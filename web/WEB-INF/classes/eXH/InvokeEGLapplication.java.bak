/***************************************************************************************************************
 * Author   :   Prithvirajan. R
 * Desc     :	This class is used to invoke the external EGL application
 ***************************************************************************************************************/

package eXH;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.Map;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import webbeans.eCommon.ConnectionManager;
import eXH.InterfaceUtil;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

/**
 * Servlet implementation class InvokeEGLapplication
 */ 
public class InvokeEGLapplication extends HttpServlet {

	boolean isDebugYN = false; // temporary variable for debug logging check, should be removed once final testing is done 
	
	public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    {
		doPost(request, response);
	}
    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException
    { 
		String responseTxt=null;
		JSONObject jsonOb = null;

		try
		{
			Map<String, String> reqParams = XHUtil.getRequestParams(request);
			String callType = reqParams.get("callType");

			isDebugYN = (XHUtil.singleParamExeQry("SELECT DEBUG_YN FROM XH_PARAM ").equals("Y")) ? true : false;

			if(isDebugYN) 
			System.out.println("call type..."+callType);
		
			if("InvokeEGLapplication".equals(callType)) 
			{
					responseTxt=processRequest(reqParams);
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("PayerMembershipEligibilityCheck".equals(callType)) // This is used for bupa interface membership eligibility check
			{
					responseTxt=payerEligibilityCheck(reqParams);
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("CheckCustGroupInterfaceProfile".equals(callType)) // This is used to check whether interface is enabled for customer group or not
			{
					//responseTxt=checkInterfaceEnabled(reqParams);
					jsonOb = checkInterfaceEnabled(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(jsonOb.toString());
					resp.flush();
					resp.close();
			}
			else if("CheckVisitRegProcEnabledYN".equals(callType))
			{
					responseTxt=InterfaceUtil.isVisitRegProcFlagEnabled(reqParams.get("cust_group_code"));
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("checkModuleIdForPayerEligibility".equals(callType))
			{
					responseTxt=InterfaceUtil.checkModuleIdForPayerEligibility(reqParams.get("callingModuleId"));
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("CheckProfileIdExisting".equals(callType))
			{
					responseTxt=InterfaceUtil.isInterfaceProfileExisting(reqParams.get("profileId"));
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("StorePayerDetails".equals(callType)) // This is used to check whether interface is enabled for customer group or not
			{
					responseTxt=storePayerDetails(reqParams);
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("PanCardValidation".equals(callType)) // Just sample... have to be removed.
			{
					responseTxt=panCardValidation(reqParams);
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("GetTranslationData".equals(callType)) // Just sample... have to be removed.
			{
				    String tableId = reqParams.get("tableId");
				    String appId = reqParams.get("appId");
					String fieldValue = reqParams.get("fieldValue");

					if(isDebugYN) 
					System.out.println("InvokeEGL::getTranslationData::::transValue for appId.."+appId+"....tableId..."+tableId+"...fieldValue ..." +fieldValue);

					responseTxt=InterfaceUtil.getTranslationData(tableId,appId,fieldValue);

					if(isDebugYN) 
					System.out.println("Response from invokeEGL..."+responseTxt);

					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("CheckForCCApplet".equals(callType)) // This is used to check whether interface is enabled for customer group or not
			{
					responseTxt=checkCCAppletFunction(reqParams);
					PrintWriter resp = response.getWriter();
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("CheckEligibilityStatusProfile".equals(callType)) // Added by Apoorva for MOHE-CRF-0020 - This is used for getting the check status flag
			{
					
					responseTxt = checkEligibiltyStatusTrn(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("GENERATE_ID".equals(callType)) // Added by Sethu for MOHE-CRF-0076 on 01/08/20210 - This is used for getting generated transaction id
			{
					if(isDebugYN) 
						System.out.println("InvokeEGL::GENERATE_ID ");

					responseTxt = Generate_Transaction_ID(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("GET_INSURANCE_ID".equals(callType)) // Added by Sethu for MOHE-CRF-0076 on 01/08/20210 - This is used for getting generated transaction id
			{
					if(isDebugYN) 
						System.out.println("InvokeEGL::GET_INSURANCE_ID ");

					responseTxt = getInsuranceId(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			
			
			else if("FetchNewToken".equals(callType)) // Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022 
			{
					if(isDebugYN) 
						System.out.println("InvokeEGL::FetchNewToken");

					responseTxt = getNewToken(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("FetchTokenDetails".equals(callType)) // Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022 
			{
					if(isDebugYN) 
						System.out.println("InvokeEGL::FetchTokenDetails");

					responseTxt = getTokenDetails(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("ReleaseTokenDetails".equals(callType)) // Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022 
			{
					if(isDebugYN) 
						System.out.println("InvokeEGL::ReleaseTokenDetails");

					responseTxt = getReleaseTokenDetails(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
			else if("InsertIntoXhQmsTable".equals(callType)) // Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022
			{
					if(isDebugYN) 
						System.out.println("InvokeEGL::InsertIntoXhQmsTable");

					responseTxt = processInsertIntoXhQmsTable(reqParams);

					PrintWriter resp = response.getWriter();
					//resp.write(responseTxt);
					resp.write(responseTxt);
					resp.flush();
					resp.close();
			}
		// added by thiru
			else if ("GetNDHMOTP".equals(callType)) {

				responseTxt = processNDHMOTP(reqParams);
				System.out.println("responseText: " + responseTxt);
				PrintWriter resp = response.getWriter();
				resp.write(responseTxt);
				resp.flush();
				resp.close();

			}	
		

		// Added by Nagarjun for ML-BRU-CRF-628.10 on 14/05/2023
		else if ("FetchQueueNumber".equals(callType))
		{
			if(isDebugYN) 
					System.out.println("InvokeEGL::FetchQueueNumber");

				responseTxt = getQueueNumber(reqParams);

				PrintWriter resp = response.getWriter();
				//resp.write(responseTxt);
				resp.write(responseTxt);
				resp.flush();
				resp.close();
		}
		catch (Exception exp) 
		{
			exp.printStackTrace(System.err);
		}
    }
private String processNDHMOTP(Map<String, String> reqParams)
			throws Exception {

		System.out.println("ReParams: " + reqParams.toString());

		String request_type = XHDBAdapter.checkNull(reqParams
				.get("request_type"));
		String responseTxt = "";
		String p_response = "";
		String errorCode = "";
		String errorMsg = "";
		CallableStatement ostmt = null;
		Connection dbConn = null;
		JSONObject jObj = null;

		try {
			dbConn = ConnectionManager.getConnection();

			ostmt = dbConn
					.prepareCall("{ CALL XHNDHM.NDHM_REQUEST(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) }");
			ostmt.setString(1, request_type);
			ostmt.setString(2,
					XHDBAdapter.checkNull(reqParams.get("aadhaar_no")));
			ostmt.setString(3,
					XHDBAdapter.checkNull(reqParams.get("mobile_no")));
			ostmt.setString(4,
					XHDBAdapter.checkNull(reqParams.get("patient_id")));
			ostmt.setString(5,
					XHDBAdapter.checkNull(reqParams.get("aadhaar_otp")));
			ostmt.setString(6,
					XHDBAdapter.checkNull(reqParams.get("mobile_otp")));
			ostmt.setString(7,
					XHDBAdapter.checkNull(reqParams.get("aadhaar_trans_id")));
			ostmt.setString(8,
					XHDBAdapter.checkNull(reqParams.get("mobile_trans_id")));
			ostmt.setString(9,
					XHDBAdapter.checkNull(reqParams.get("facility_id")));
			ostmt.setString(10,
					XHDBAdapter.checkNull(reqParams.get("logged_in_user")));
			ostmt.setString(11,
					XHDBAdapter.checkNull(reqParams.get("logged_in_ws_no")));
			ostmt.setString(12,
					XHDBAdapter.checkNull(reqParams.get("session_id")));
			ostmt.registerOutParameter(13, java.sql.Types.CLOB);
			ostmt.registerOutParameter(14, java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(15, java.sql.Types.VARCHAR);
			ostmt.execute();
			p_response = ostmt.getString(13);
			errorCode = ostmt.getString(14);
			errorMsg = ostmt.getString(15);

			System.out.println(p_response + " " + errorCode + " " + errorMsg);

			if (request_type.equals("NDHAD5")) {

				if (errorCode.equals("S")) {
					
					JSONParser parser = new JSONParser();  
					jObj = (JSONObject) parser.parse(p_response);
					
					responseTxt ="[{\"Name\":\"" + jObj.get("name") + "\",\"Gender\":\"" + jObj.get("gender") + "\",\"DOB\":\"" + jObj.get("dayOfBirth") +"/"+ jObj.get("monthOfBirth") +"/"+ jObj.get("yearOfBirth") +"\",\"ABHA ID\":\""+jObj.get("healthIdNumber")+"\",\"Mobile Numbrer\":\""+jObj.get("mobile")+"\"}]$!^"+errorCode+"$!^"+errorMsg+"$!^"+jObj.get("new")+"$!^"+p_response;
					
				} else {
					responseTxt = p_response + "$!^" + errorCode + "$!^" + errorMsg;
				}
			} else {
				responseTxt = p_response + "$!^" + errorCode + "$!^ " + errorMsg;
			}
			System.out
					.println("(InvokeEGLapplication:processNDHMOTP) responseTxt "
							+ responseTxt);
			System.out
					.println("(InvokeEGLapplication:processNDHMOTP) errorCode "
							+ errorCode);
			System.out
					.println("(InvokeEGLapplication:processNDHMOTP) errorMsg "
							+ errorMsg);

		} catch (Exception exp) {
			System.out
					.println("(InvokeEGLapplication:processNDHMOTP) Exception at executing procedure");
			exp.printStackTrace(System.err);
		} finally {
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;
	}
    
   
	private String processRequest(Map<String, String> reqParams) throws Exception 
	{
		String responseTxt="";
		String p_response="";
		String errorCode="";
		String errorMsg="";
		CallableStatement ostmt = null;
		Connection dbConn = null;
		try
		{
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);

			dbConn = ConnectionManager.getConnection();

			ostmt = dbConn.prepareCall("{ CALL XHINTERACTIVE.EGLMESSAGEHANDLER(?,?,?,?) }" );
			ostmt.setString(1,reqParams.get("paramString"));
			ostmt.registerOutParameter(2,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(3,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(4,java.sql.Types.VARCHAR);
			ostmt.execute();
			p_response = ostmt.getString(2);
			errorCode = ostmt.getString(3);
			errorMsg = ostmt.getString(4);
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			if(isDebugYN) {
				System.out.println("(InvokeEGLapplication:processRequest) responseTxt "+responseTxt);
				System.out.println("(InvokeEGLapplication:processRequest) errorCode "+errorCode);
				System.out.println("(InvokeEGLapplication:processRequest) errorMsg "+errorMsg);
			}
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:processRequest) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;	
	}

	/*
	* Added by prithivi on 08/12/2016 for MMS-QH-CRF-0085 
	* This method is used for patient eligibility check for payer.(BUPA interface)
	*/
	private String payerEligibilityCheck(Map<String, String> reqParams) throws Exception 
	{
		//<PATIENT_ID>#PatientId$!^<ENCOUNTER_ID>$!^<NATIONAL_ID>#NationalId$!^<PATIENT_NAME>#PatientName$!^<PATIENT_DOB>#PatientDOB$!^<MOBILE_NO>#PatientMobileNO$!^<MEMBERSHIP_NO>#MembershipNO$!^<POLICY_HOLDER_NAME>#PolicyHolderName$!^<POLICY_PLAN_NO>#PolicyNO$!^<PROVIDER_CODE>#ProviderCode$!^<SERVICE_TYPE>#ServiceCode$!^<PAYER_CODE>#PayerCode$!^<FACILITY_ID>#FacilityId$!^<LOGGED_IN_USER_ID>#Username$!^<LOGGED_IN_WSNO>#strWsNo$!^<SESSION>REGVISIT

		String responseTxt="";
		String nationIdFlag="";
		Connection dbConn = null;
		ResultSet rs=null;
		PreparedStatement pstmt = null;
		String paramString=reqParams.get("paramString");
		String patientId = reqParams.get("patientId");
		if(isDebugYN) {
			System.out.println("InvokeEGLapplication.java:::payerEligibilityCheck...paramString-accen num...."+paramString);
			System.out.println("InvokeEGLapplication.java:::payerEligibilityCheck...patientId...."+patientId);
		}
		paramString = processParamString(paramString,patientId);
		try
		{   
			String custCodeArr[] = paramString.split("<PROVIDER_CODE>");		
			
			String custGroupCode = custCodeArr[1].split(Pattern.quote("$!^"))[0];
			
			if(isDebugYN) 
			System.out.println("InvokeEGLapplication.java:::custGroupCode...."+custGroupCode);

			dbConn =  ConnectionManager.getConnection();
			String checkProfileIdQuery = "SELECT NATID_MAND_FLAG FROM AR_CUST_GROUP WHERE CUST_GROUP_CODE= ?";

			pstmt = dbConn.prepareStatement(checkProfileIdQuery);
			pstmt.setString(1, custGroupCode);
			rs = pstmt.executeQuery();
			while(rs.next())
			{
			   nationIdFlag = rs.getString("NATID_MAND_FLAG");
			}
		
			if("Y".equalsIgnoreCase(nationIdFlag))
			{
				String strArr[] = paramString.split("<NATIONAL_ID>");		
			
				String nationalId = strArr[1].split(Pattern.quote("$!^"))[0];

				if(nationalId!=null && nationalId.length() > 0)
				{
					responseTxt=payerEligCheckProcessResponse(paramString);
				}
				else
				{
					if(isDebugYN) 
						System.out.println("InvokeEGLapplication.java:::payerEligibilityCheck...nationalId...empty...."+nationalId);

					responseTxt = "Unable to process the request - National ID is not available for this patient";	
				}
			}
			else
			{
				responseTxt=payerEligCheckProcessResponse(paramString);
			}
			
				if(isDebugYN) 
					System.out.println("(InvokeEGLapplication:payerEligibilityCheck) responseTxt "+responseTxt);
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:payerEligibilityCheck) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(rs, pstmt, dbConn);
		}
		if(isDebugYN) 
			System.out.println("InvokeEGLapplication.java:::responseTxt...."+responseTxt);

		return responseTxt;	
	}

	/*
	* This method is used for set the required values for paramString.
	* Added by prithivi on 08/12/2016 for MMS-QH-CRF-0085 
	*/
	private String processParamString(String paramString , String patientId)
	{ 
         Connection dbConn = null;
         CallableStatement pstmt = null;
         ResultSet rs = null;
          
		 String nationalId = "";
		 String patientName="";
		 String dob = "";
		 String mobileNum = "";

		 try{
            String qry = "select nvl(NATIONAL_ID_NO, ALT_ID1_NO) NATIONAL_ID_NO, PATIENT_NAME, nvl(DATE_OF_BIRTH,'') DATE_OF_BIRTH, nvl(CONTACT1_NO,'') CONTACT1_NO  from mp_patient where patient_id = ?";
			dbConn = ConnectionManager.getConnection();
            pstmt = dbConn.prepareCall(qry);
            pstmt.setString(1, patientId);
			if(isDebugYN) 
				System.out.println("InvokeEGLapplication.java:::processParamString:: qry...."+qry);

            rs = pstmt.executeQuery();
       
			if(isDebugYN) {
				System.out.println("InvokeEGLapplication.java:::processParamString...qry...."+qry);
				System.out.println("InvokeEGLapplication.java:::processParamString...paramString 1 ...."+paramString);
			}
			while(rs.next())
			 {
				
				if(rs.getString("NATIONAL_ID_NO")!=null && rs.getString("NATIONAL_ID_NO").length() > 0)
				 {
					nationalId = rs.getString("NATIONAL_ID_NO");
				 }
				 else
				 {
					 nationalId = "";
				 }
				patientName = rs.getString("PATIENT_NAME") == null ? "" : rs.getString("PATIENT_NAME");
				//dob = rs.getString("DATE_OF_BIRTH");
				if(isDebugYN) {
				System.out.println("InvokeEGLapplication.java:::processParamString:: nationalId...."+nationalId);
				System.out.println("InvokeEGLapplication.java:::processParamString:: patientName...."+patientName);
				}
				if(rs.getDate("DATE_OF_BIRTH") !=null)
				{
					java.util.Date currentdate=rs.getDate("DATE_OF_BIRTH");
					java.text.SimpleDateFormat sf=new java.text.SimpleDateFormat("yyyy-MM-dd");
					dob =sf.format(currentdate);
					System.out.println("InvokeEGLapplication.java:::processParamString:: dob...."+dob);
				}
				mobileNum = rs.getString("CONTACT1_NO") == null ? "" : rs.getString("CONTACT1_NO");
				System.out.println("InvokeEGLapplication.java:::processParamString:: mobileNum...."+mobileNum);
			 } 
			paramString = paramString.replace("#PatientId",patientId);
			paramString = paramString.replace("#NationalId",nationalId);
			paramString = paramString.replace("#PatientName",patientName);
			paramString = paramString.replace("#PatientDOB",dob);
			paramString = paramString.replace("#PatientMobileNO",mobileNum);
			paramString = paramString.replace("#PolicyHolderName",patientName);

			System.out.println("InvokeEGLapplication.java:::processParamString...paramString 2 ...."+paramString);
		 }
		 catch(Exception e)
		{
			 e.printStackTrace();
			 System.out.println("InvokeEGLapplication.java:::processParamString...exception...");
		}
		finally
		{			
			XHUtil.closeDBResources(rs, pstmt, dbConn);
		}
		 return paramString;
	}

	/*
	* Added by prithivi on 08/12/2016 for MMS-QH-CRF-0085 
	* This method is used for patient eligibility check for payer.(BUPA interface)
	*/
	private String payerEligCheckProcessResponse(String paramString) throws Exception 
	{
		//<PATIENT_ID>#PatientId$!^<ENCOUNTER_ID>$!^<NATIONAL_ID>#NationalId$!^<PATIENT_NAME>#PatientName$!^<PATIENT_DOB>#PatientDOB$!^<MOBILE_NO>#PatientMobileNO$!^<MEMBERSHIP_NO>#MembershipNO$!^<POLICY_HOLDER_NAME>#PolicyHolderName$!^<POLICY_PLAN_NO>#PolicyNO$!^<PROVIDER_CODE>#ProviderCode$!^<SERVICE_TYPE>#ServiceCode$!^<PAYER_CODE>#PayerCode$!^<FACILITY_ID>#FacilityId$!^<LOGGED_IN_USER_ID>#Username$!^<LOGGED_IN_WSNO>#strWsNo$!^<SESSION>REGVISIT

		String responseTxt="";
		String p_response="";
		String errorCode="";
		String errorMsg="";
		CallableStatement ostmt = null;
		Connection dbConn = null;
		try
		{        
			dbConn = ConnectionManager.getConnection();

			ostmt = dbConn.prepareCall("{ CALL XHBUPAINSURANCE.CHECK_ELGIBILITY(?,?,?,?) }" );
			ostmt.setString(1,paramString);
			ostmt.registerOutParameter(2,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(3,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(4,java.sql.Types.VARCHAR);
			ostmt.execute();
			p_response = ostmt.getString(2);
			errorCode = ostmt.getString(3);
			errorMsg = ostmt.getString(4);
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			
			System.out.println("(InvokeEGLapplication:payerEligCheckProcessResponse) responseTxt "+responseTxt);
			System.out.println("(InvokeEGLapplication:payerEligCheckProcessResponse) errorCode "+errorCode);
			System.out.println("(InvokeEGLapplication:payerEligCheckProcessResponse) errorMsg "+errorMsg);
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:payerEligCheckProcessResponse) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		//responseTxt = "S$!^SUCCESS$!^123456$!^03/31/2017 12:55 $!^1$!^2$!^9876$!^nothing$!^remarks22$!^03/31/2017 11:59";
		return responseTxt;	
	}


	/*
	* Added by prithivi on 08/12/2016 for MMS-QH-CRF-0085 
	* This method is used for patient eligibility check for payer.(BUPA interface)
	*/
	//private String checkInterfaceEnabled(Map<String, String> reqParams) throws Exception 
	private JSONObject checkInterfaceEnabled(Map<String, String> reqParams) throws Exception 
	{
		//ResultSet rs1 = null;
		//CallableStatement ostmt = null;
		//Connection dbConn = null;
		String cust_group_code = reqParams.get("cust_group_code");

		
		XHCustomerGroup custGroupDetails = null; 
		XHCustomerGroupBean CustomerGroupDetails = null;
		String cg_det_cust_group_code="", cg_det_op_interface="", cg_det_em_interface="", cg_det_ip_interface="", cg_det_dc_interface="", cg_det_natid_flag="", cg_det_altid1="", cg_det_altid2="", cg_det_altid3="", cg_det_altid4="", cg_det_altid5="", cg_det_membshpid_flag="", cg_det_visitreg_flag="", cg_det_policyno_flag="";

		JSONObject jsonOb = null;

		String protocol_Link_Id="";
		String DebugYNProtocolLinkId = "";	
		XHUtil ProtocolLinkID = new XHUtil();

		try
		{
			protocol_Link_Id="HSWITCHPL";
			DebugYNProtocolLinkId = ProtocolLinkID.FetchProtocollinkMethod(protocol_Link_Id);	
			
			if("Y".equals(DebugYNProtocolLinkId))
				System.out.println("Check Interface Enabled for Customer Group Code : "+cust_group_code);

			custGroupDetails = new XHCustomerGroup(); 
			CustomerGroupDetails = custGroupDetails.getCustGroupDetails(cust_group_code);

			cg_det_cust_group_code = CustomerGroupDetails.getCustGroupCode();
			cg_det_op_interface = CustomerGroupDetails.getOpInterface();
			cg_det_em_interface = CustomerGroupDetails.getEmInterface();
			cg_det_ip_interface = CustomerGroupDetails.getIpInterface();
			cg_det_dc_interface = CustomerGroupDetails.getDcInterface();
			cg_det_natid_flag = CustomerGroupDetails.getNationalIdFlag();
			cg_det_altid1 = CustomerGroupDetails.getAltId1();
			cg_det_altid2 = CustomerGroupDetails.getAltId2();
			cg_det_altid3 = CustomerGroupDetails.getAltId3();
			cg_det_altid4 = CustomerGroupDetails.getAltId4();
			cg_det_altid5 = CustomerGroupDetails.getAltId5();
			cg_det_membshpid_flag = CustomerGroupDetails.getMembshpIdFlag();
			cg_det_visitreg_flag = CustomerGroupDetails.getVisitRegFlag();
			cg_det_policyno_flag = CustomerGroupDetails.getPolicyNoFlag();

			if("Y".equals(DebugYNProtocolLinkId)){
				System.out.println(" Customer Group Code : "+cg_det_cust_group_code
									+" OP Interface Flag : "+cg_det_op_interface
									+" EM Interface Flag : "+cg_det_em_interface
									+" IP Interface Flag : "+cg_det_ip_interface
									+" DC Interface Flag : "+cg_det_dc_interface
									+" Nationality ID Flag : "+cg_det_natid_flag
									+" Alternate ID1 Flag : "+cg_det_altid1
									+" Alternate ID2 Flag : "+cg_det_altid2
									+" Alternate ID3 Flag : "+cg_det_altid3
									+" Alternate ID4 Flag : "+cg_det_altid4
									+" Alternate ID5 Flag : "+cg_det_altid5
									+" Membership ID Flag : "+cg_det_membshpid_flag
									+" Visit Reg Flag : "+cg_det_visitreg_flag
									+" Policy No Flag : "+cg_det_policyno_flag);
			}

			jsonOb = new JSONObject();
			jsonOb.put("cust_group_code", cg_det_cust_group_code);
			jsonOb.put("op_interface_flag", cg_det_op_interface);
			jsonOb.put("em_interface_flag", cg_det_em_interface);
			jsonOb.put("ip_interface_flag", cg_det_ip_interface);
			jsonOb.put("dc_interface_flag", cg_det_dc_interface);
			jsonOb.put("natid_flag", cg_det_natid_flag);
			jsonOb.put("altid1_flag", cg_det_altid1);
			jsonOb.put("altid2_flag", cg_det_altid2);
			jsonOb.put("altid3_flag", cg_det_altid3);
			jsonOb.put("altid4_flag", cg_det_altid4);
			jsonOb.put("altid5_flag", cg_det_altid5);
			jsonOb.put("membshpid_flag", cg_det_membshpid_flag);
			jsonOb.put("visitreg_flag", cg_det_visitreg_flag);
			jsonOb.put("policyno_flag", cg_det_policyno_flag);

			if("Y".equals(DebugYNProtocolLinkId)){
				System.out.println(" Customer Group Configuration JSON Object Created "+jsonOb.toString());
			}

			/*

			String sql_interface_flag="SELECT INTERFACE_YN FROM AR_CUST_GROUP WHERE CUST_GROUP_CODE = ? ";
			dbConn = ConnectionManager.getConnection();
			ostmt = dbConn.prepareCall(sql_interface_flag);
			ostmt.setString(1, cust_group_code);

			System.out.println("InvokeEGLapplication:::checkInterfaceEnabled sql_interface_flag :::: "+sql_interface_flag+" ::: cust_group_code ::: "+cust_group_code);

			rs1 = ostmt.executeQuery();
			if (rs1 != null) {
				while (rs1.next()) {
					interfaceYN = rs1.getString("INTERFACE_YN");					
				}
			}
			System.out.println("InvokeEGLapplication.java:::checkInterfaceEnabled...interfaceYN...."+interfaceYN);
			
			if (rs1 != null)   rs1.close();
			ostmt.close();

			*/
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:checkInterfaceEnabled) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		/*
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		*/
		//return interfaceYN;
		return jsonOb;
	}

	/*
	* Added by Bhuvaneshwari on 09/04/2019 for MMS-DM-SCF-0600 
	* This method is used to check for CC Applet Function
	*/

	private String checkCCAppletFunction(Map<String, String> reqParams) throws Exception 
	{
		ResultSet rs1 = null;
		PreparedStatement pstmt = null;
		Connection dbConn = null;
		
		String ccAppletYN = "N";

		String application_id = reqParams.get("intExtAppID");
		if(isDebugYN)
			System.out.println("InvokeEGLapplication Check For Applet Function...."+application_id);
		try
		{
			String query="SELECT VALUE_1 FROM sm_function_control a, sm_site_param b  "
										+" WHERE a.site_id = b.customer_id AND module_id = 'XH'  "
										+"	AND functionality_id = ?  "
										+"  AND KEY_1 = 'CC_APPLET_ENABLE' ";
			dbConn = ConnectionManager.getConnection();
			pstmt = dbConn.prepareStatement(query);
			pstmt.setString(1, application_id);
			
			if(isDebugYN) 
				System.out.println("InvokeEGLapplication query :::: "+query+" ::: application ::: "+application_id);

			rs1 = pstmt.executeQuery();
			if (rs1 != null) {
				while (rs1.next()) {
					ccAppletYN = rs1.getString("VALUE_1");					
				}
			}
			if(isDebugYN)
				System.out.println("InvokeEGLapplication ccAppletYN...."+ccAppletYN);
			
			if (rs1 != null)   rs1.close();
			pstmt.close();
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:checkCCAppletFunction) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, pstmt, dbConn);
		}
		return ccAppletYN;	
	}

	/*
	* Added by prithivi on 08/12/2016 for MMS-QH-CRF-0085 
	* This method is used to update the payer interface eligibility details.(BUPA interface)
	*/
	private String storePayerDetails(Map<String, String> reqParams) throws Exception 
	{
			/*  callType: 'StorePayerDetails',
				ofd: operating_facility_id,  m_operating_facility_id IN VARCHAR2, 
				eid: encounter_id,            m_encounter_id IN NUMBER, 
				epty: episode_type,            m_episode_type IN VARCHAR2,
				epid: episode_id,              m_episode_id IN NUMBER,
				vid: visit_id,                m_visit_id IN NUMBER,
				asn: acc_seq_num,             m_acct_seq_no IN NUMBER, 
				pid: patient_id,              m_patient_id IN VARCHAR2, 
				bgi: billing_group_id,        m_blng_grp_id IN VARCHAR2, 
				sin: settlement_ind,          m_settlement_ind IN VARCHAR2,
				cuco: cust_code,               m_cust_code IN VARCHAR2,
				prio: priority,                m_priority IN NUMBER, 
				ptc: policy_type_code,          m_policy_type_code IN VARCHAR2,
				cgc: cust_group_code,           m_cust_group_code IN VARCHAR2,
				tid: transaction_id,            pint_transaction_id      IN    NUMBER,
				rdt: response_date_time,        pint_response_date_time  IN    DATE,
				rco: response_code,             pint_response_code       IN    NUMBER,
				ety: eligibility_code,          pint_elgibility_code     IN    VARCHAR2, 
				vty: validity_type,             pint_validity_type       IN    NUMBER ,
				emg: error_msg,                 pint_error_msg           IN    VARCHAR2,
				rks: remarks                 pint_remarks             IN    VARCHAR2,         */ 
			CallableStatement ostmt = null;
			Connection dbConn = null;
			String p_response="";
			String errorMsg="";
			String responseTxt="";
			String responseDateStr="";
			long encounterId = 0;
			long episodeId=0;
			long visitId=0;
			long acc_seq_num=0;
			long priority=0;
			long transactionId = 0;
			long responseCode = 0;
			long validityType = 0;

            responseDateStr = XHDBAdapter.checkNull(reqParams.get("rdt"));
			String encounterStr = XHDBAdapter.checkNull(reqParams.get("eid"));
			String episodeIdStr = XHDBAdapter.checkNull(reqParams.get("epid"));
			String visitIdStr = XHDBAdapter.checkNull(reqParams.get("vid"));
			String acc_seq_num_str = XHDBAdapter.checkNull(reqParams.get("asn"));
			String priorityStr = XHDBAdapter.checkNull(reqParams.get("prio"));
			String transactionIdStr = XHDBAdapter.checkNull(reqParams.get("tid"));
			String responseCodeStr = XHDBAdapter.checkNull(reqParams.get("rco"));
			String validityTypeStr = XHDBAdapter.checkNull(reqParams.get("vty"));
            
             if(encounterStr!=null && encounterStr!="")
		     encounterId = Long.parseLong(encounterStr);

			 if(episodeIdStr!=null && episodeIdStr!="")
		     episodeId = Long.parseLong(episodeIdStr);

			 if(visitIdStr!=null && visitIdStr!="")
		     visitId = Long.parseLong(visitIdStr);

			 if(acc_seq_num_str!=null && acc_seq_num_str!="")
		     acc_seq_num = Long.parseLong(acc_seq_num_str);

			 if(priorityStr!=null && priorityStr!="")
		     priority = Long.parseLong(priorityStr);

			 if(transactionIdStr!=null && transactionIdStr!="")
		     transactionId = Long.parseLong(transactionIdStr);

			 if(responseCodeStr!=null && responseCodeStr!="")
		     responseCode = Long.parseLong(responseCodeStr);

			 if(validityTypeStr!=null && validityTypeStr!="")
		     validityType = Long.parseLong(validityTypeStr);

			try
			{    
					dbConn = ConnectionManager.getConnection();

					System.out.println( " Facility ID ::: "+reqParams.get("ofd")+" Encounter ID :::"+encounterId+" Episode Type ::: "+reqParams.get("epty")+" Episode ID ::: "+episodeId+ " Visit ID :::"+ visitId+ " Acct SEQ No::: "+acc_seq_num+" Patient ID ::: "+reqParams.get("pid")+" Billing Group::: "+reqParams.get("bgi")+"Settlement Index ::: "+reqParams.get("sin")+" Customer Code ::: "+reqParams.get("cuco")+" Priority::: "+priority+" Policy Type Code::: "+reqParams.get("ptc")+" Customer Group Code ::: "+reqParams.get("cgc")+" Customer Code ::: "+reqParams.get("cuco"));

					ostmt = dbConn.prepareCall("{ CALL XHBUPAINSURANCE.UPDATE_BL_ENC_PAYER_PRIORITY(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }" );
					ostmt.setString(1,XHDBAdapter.checkNull(reqParams.get("ofd")));
					ostmt.setLong(2,encounterId);
					ostmt.setString(3,XHDBAdapter.checkNull(reqParams.get("epty")));
					ostmt.setLong(4,episodeId);
					ostmt.setLong(5,visitId);
					ostmt.setLong(6,acc_seq_num);
					ostmt.setString(7,XHDBAdapter.checkNull(reqParams.get("pid")));
					ostmt.setString(8,XHDBAdapter.checkNull(reqParams.get("bgi")));
					ostmt.setString(9,XHDBAdapter.checkNull(reqParams.get("sin")));
					ostmt.setString(10,XHDBAdapter.checkNull(reqParams.get("cuco")));
					ostmt.setLong(11,priority);
					ostmt.setString(12,XHDBAdapter.checkNull(reqParams.get("ptc")));
					ostmt.setString(13,XHDBAdapter.checkNull(reqParams.get("cgc")));
					System.out.println( "(InvokeEGLapplication:storePayerDetails) transactionId ::: "+transactionId+" responseDateStr :::"+responseDateStr+" responseCode ::: "+responseCode+" Elgibility Code ::: "+reqParams.get("ety")+" validityType::: "+validityType+"  validity until..."+reqParams.get("val_until")+" Error Msg ::: "+reqParams.get("emg")+" Remarks ::: "+reqParams.get("rks"));
					ostmt.setLong(14,transactionId);
					if(responseDateStr!=null && responseDateStr!="")
					{
                      ostmt.setTimestamp(15,getTimeStamp(responseDateStr));
					}
					else
					{
                      ostmt.setString(15,responseDateStr);
					}
					
					ostmt.setLong(16,responseCode);
					ostmt.setString(17,XHDBAdapter.checkNull(reqParams.get("ety")));
					ostmt.setLong(18,validityType);
					ostmt.setString(19,XHDBAdapter.checkNull(reqParams.get("emg")));
					ostmt.setString(20,XHDBAdapter.checkNull(reqParams.get("rks")));
					ostmt.setString(21,XHDBAdapter.checkNull(reqParams.get("val_until"))); //added on 26/12/2016

					ostmt.registerOutParameter(22,java.sql.Types.VARCHAR);
					ostmt.registerOutParameter(23,java.sql.Types.VARCHAR);
					ostmt.execute();

					p_response = ostmt.getString(22);
					errorMsg = ostmt.getString(23);

					System.out.println("(InvokeEGLapplication:storePayerDetails) ... errorMsg ..."+errorMsg);
					if((errorMsg != null) && (errorMsg.trim().length()>0)) 
					{
						responseTxt="Update Failed!";	
					}
					else
					{	
						responseTxt="Successfully updated!";
					}
					System.out.println("(InvokeEGLapplication:storePayerDetails) responseTxt "+responseTxt);
					System.out.println("(InvokeEGLapplication:storePayerDetails) errorMsg "+errorMsg);
			}
			catch(Exception exp)
			{
				System.out.println("(InvokeEGLapplication:storePayerDetails) Exception at executing procedure");
				exp.printStackTrace(System.err);
			}
			finally
			{			
				XHUtil.closeDBResources(null, ostmt, dbConn);
			}
			return responseTxt;	

    }	

	/*
	* Added by Sethu on 14/04/2017 for KDAH-CRF-0370 
	* This method is used for Pan Card Validation
	*/
	
	private String panCardValidation(Map<String, String> reqParams) throws Exception 
	{
		//"<FACILITY_ID>SI$!^<PATIENT_ID>GE00000142$!^<USER>anilp$!^<WSNO>DFLT_WSNO$!^<PANCARDNO>ARBPS3602E";

		String responseTxt="";
		Connection dbConn = null;
		ResultSet rs=null;
		CallableStatement ostmt = null;
		String p_response="", errorCode = "", errorMsg = "";

		String paramString=reqParams.get("paramString");
		System.out.println("InvokeEGLapplication.java:::panCardValidation...paramString...."+paramString);
		try
		{   
				
			dbConn = ConnectionManager.getConnection();

			ostmt = dbConn.prepareCall("{ CALL XHPANCARDVALIDATION.VALIDATION_REQUEST(?,?,?,?) }" );
			ostmt.setString(1,paramString);
			ostmt.registerOutParameter(2,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(3,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(4,java.sql.Types.VARCHAR);
			ostmt.execute();
			p_response = ostmt.getString(2);
			errorCode = ostmt.getString(3);
			errorMsg = ostmt.getString(4);
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
					
			System.out.println("(InvokeEGLapplication:panCardValidation) responseTxt "+responseTxt);
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:panCardValidation) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(rs, ostmt, dbConn);
		}
		System.out.println("InvokeEGLapplication.java panCardValidation:::responseTxt...."+responseTxt);
		return responseTxt;	
	}	


	public static Timestamp getTimeStamp(String dateStr)
	{
		//String startDate="01/02/2013 11:30:25.0";
		Timestamp timestamp=null;
		try{
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
			java.util.Date parsedDate = dateFormat.parse(dateStr);
			timestamp = new java.sql.Timestamp(parsedDate.getTime());
			System.out.println("InvokeEglaplication.java::::responseDate time value......."+timestamp);
			//timestamp.
		}catch(Exception e){//this generic but you can control another types of exception
		 e.printStackTrace(); 
		}

		return timestamp;
	}

// Added by Apoorva for MOHE-CRF-0020 - This is used for getting the check status flag
	private String checkEligibiltyStatusTrn(Map<String, String> reqParams) throws Exception 
	{
		String responseTxt="";
		String p_response="";
		String errorCode="";
		String errorMsg="";
		CallableStatement ostmt = null;
		Connection dbConn = null;
		try
		{
			dbConn = ConnectionManager.getConnection();

			ostmt = dbConn.prepareCall("{ CALL XHBUPAINSURANCE.CHECK_ELIG_PROFILE_VALUES(?,?,?,?,?) }" );
			ostmt.setString(1,reqParams.get("cust_group_code"));
			ostmt.setString(2,reqParams.get("segment_id"));
			ostmt.registerOutParameter(3,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(4,java.sql.Types.VARCHAR);
			ostmt.registerOutParameter(5,java.sql.Types.VARCHAR);
			ostmt.execute();
			p_response = ostmt.getString(3);
			errorCode = ostmt.getString(4);
			errorMsg = ostmt.getString(5);
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			if(isDebugYN) {
				System.out.println("(InvokeEGLapplication:checkEligibiltyStatusTrn) responseTxt "+responseTxt);
				System.out.println("(InvokeEGLapplication:checkEligibiltyStatusTrn) errorCode "+errorCode);
				System.out.println("(InvokeEGLapplication:checkEligibiltyStatusTrn) errorMsg "+errorMsg);
			}
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:checkEligibiltyStatusTrn) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;	
	}
	// Added by Apoorva for MOHE-CRF-0020 - This is used for getting the check status flag ends here

	// Added by Sethu for MOHE-CRF-0076 on 01/08/20210 - This is used for getting generated transaction id
	private String Generate_Transaction_ID(Map<String, String> reqParams) throws Exception 
	{
		ResultSet rs1 = null;
		PreparedStatement pstmt = null;
		Connection dbConn = null;
		
		String transaction_id = "";

		String application_id = reqParams.get("P_Ext_Application_ID");
		if(isDebugYN)
			System.out.println("InvokeEGLapplication Generate Transaction ID Function...."+application_id);
		try
		{
			String query="SELECT XH_PAYSKY_TRANSNO_SEQ.NEXTVAL TRANS_ID FROM dual ";
			dbConn = ConnectionManager.getConnection();
			pstmt = dbConn.prepareStatement(query);
			
			if(isDebugYN) 
				System.out.println("InvokeEGLapplication query :::: "+query+" ::: application ::: "+application_id);

			rs1 = pstmt.executeQuery();
			if (rs1 != null) {
				while (rs1.next()) {
					transaction_id = rs1.getString("TRANS_ID");					
				}
			}
			if(isDebugYN)
				System.out.println("InvokeEGLapplication Generate_Transaction_ID...."+transaction_id);
			
			if (rs1 != null)   rs1.close();
			pstmt.close();
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:Generate_Transaction_ID) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, pstmt, dbConn);
		}
		return transaction_id;	
	}
	
	// Added by Sethu for MOHE-CRF-0076 on 01/08/20210 - This is used for getting generated transaction id
		private String getInsuranceId(Map<String, String> reqParams) throws Exception 
		{
			ResultSet rs1 = null;
			PreparedStatement pstmt = null;
			Connection dbConn = null;
			
			String patient_id = "", alt_id2_no = "";
			

			String application_id = reqParams.get("P_Ext_Application_ID");
			if(isDebugYN)
				System.out.println("InvokeEGLapplication Get Insurance ID Function....");
			try
			{
				patient_id = reqParams.get("patient_id");
				String query="SELECT nvl(ALT_ID2_NO,'') ALT_ID2_NO FROM MP_PATIENT WHERE PATIENT_ID = ? ";
				dbConn = ConnectionManager.getConnection();
				pstmt = dbConn.prepareStatement(query);
				
				if(isDebugYN) 
					System.out.println("InvokeEGLapplication query :::: "+query);
				
				pstmt.setString(1, patient_id);
				rs1 = pstmt.executeQuery();
				if (rs1 != null) {
					while (rs1.next()) {
						alt_id2_no = rs1.getString("ALT_ID2_NO");					
					}
				}
				if(isDebugYN)
					System.out.println("InvokeEGLapplication Get Insurance ID...."+alt_id2_no);
				
				if (rs1 != null)   rs1.close();
				pstmt.close();
			}
			catch(Exception exp)
			{
				System.out.println("(InvokeEGLapplication:Generate_Transaction_ID) Exception at executing procedure");
				exp.printStackTrace(System.err);
			}
			finally
			{			
				XHUtil.closeDBResources(null, pstmt, dbConn);
			}
			return alt_id2_no;	
		}

	// Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022 - This is used for generating new Token
	private String getNewToken(Map<String, String> reqParams) throws Exception 
		{
			String responseTxt="";
			String p_response="";
			String errorCode="";
			String errorMsg="";
			CallableStatement ostmt = null;
			Connection dbConn = null;
			try
			{
				dbConn = ConnectionManager.getConnection();

				ostmt = dbConn.prepareCall("{ CALL XHQMS.FETCH_QMS_NEW_TOKEN(?,?,?,?,?,?,?,?,?,?,?,?,?,?) }" );
				ostmt.setString(1,reqParams.get("function_id"));
				ostmt.setString(2,reqParams.get("facility_id"));
				ostmt.setString(3,reqParams.get("doctor_id"));
				ostmt.setString(4,reqParams.get("clinic_code"));
				ostmt.setString(5,reqParams.get("patient_id"));
				ostmt.setString(6,reqParams.get("patient_name"));
				ostmt.setString(7,reqParams.get("appointment_true_yn"));
				ostmt.setString(8,reqParams.get("appointment_date"));
				ostmt.setString(9,reqParams.get("appointment_time"));
				ostmt.setString(10,reqParams.get("encounter_id"));
				ostmt.setString(11,reqParams.get("user_id"));
				ostmt.registerOutParameter(12,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(13,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(14,java.sql.Types.VARCHAR);
				ostmt.execute();
				p_response = ostmt.getString(12);
			errorCode = ostmt.getString(13);
			errorMsg = ostmt.getString(14);
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			if(isDebugYN) {
				System.out.println("(InvokeEGLapplication:getNewToken) responseTxt "+responseTxt);
				System.out.println("(InvokeEGLapplication:getNewToken) errorCode "+errorCode);
				System.out.println("(InvokeEGLapplication:getNewToken) errorMsg "+errorMsg);
			}
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:getNewToken) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;	

	}

	// Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022 - This is used for getting Token Details
	private String getTokenDetails(Map<String, String> reqParams) throws Exception 
		{
			String responseTxt="";
			String p_response="";
			String errorCode="";
			String errorMsg="";
			CallableStatement ostmt = null;
			Connection dbConn = null;
			try
			{
				dbConn = ConnectionManager.getConnection();

				ostmt = dbConn.prepareCall("{ CALL XHQMS.FETCH_TOKEN_DETAILS(?,?,?,?,?,?,?,?,?) }" );
				ostmt.setString(1,reqParams.get("function_id"));
				ostmt.setString(2,reqParams.get("facility_id"));
				ostmt.setString(3,reqParams.get("token_number"));
				ostmt.setString(4,reqParams.get("patient_id"));
				ostmt.setString(5,reqParams.get("encounter_id"));
				ostmt.setString(6,reqParams.get("user_id"));
				ostmt.registerOutParameter(7,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(8,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(9,java.sql.Types.VARCHAR);
				ostmt.execute();
				p_response = ostmt.getString(7);
			errorCode = ostmt.getString(8);
			errorMsg = ostmt.getString(9);
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			if(isDebugYN) {
				System.out.println("(InvokeEGLapplication:getTokenDetails) responseTxt "+responseTxt);
				System.out.println("(InvokeEGLapplication:getTokenDetails) errorCode "+errorCode);
				System.out.println("(InvokeEGLapplication:getTokenDetails) errorMsg "+errorMsg);
			}
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:getTokenDetails) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;	

	}

	// Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022 - This is used for getting Release Token Details
	private String getReleaseTokenDetails(Map<String, String> reqParams) throws Exception 
		{
			String responseTxt="";
			String p_response="";
			String errorCode="";
			String errorMsg="";
			CallableStatement ostmt = null;
			Connection dbConn = null;
			try
			{
				dbConn = ConnectionManager.getConnection();

				ostmt = dbConn.prepareCall("{ CALL XHQMS.FETCH_TOKEN_DETAILS(?,?,?,?,?,?,?,?,?) }" );
				ostmt.setString(1,reqParams.get("function_id"));
				ostmt.setString(2,reqParams.get("facility_id"));
				ostmt.setString(3,reqParams.get("token_number"));
				ostmt.setString(4,reqParams.get("patient_id"));
				ostmt.setString(5,reqParams.get("encounter_id"));
				ostmt.setString(6,reqParams.get("user_id"));
				ostmt.registerOutParameter(7,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(8,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(9,java.sql.Types.VARCHAR);
				ostmt.execute();
				p_response = ostmt.getString(7);
			errorCode = ostmt.getString(8);
			errorMsg = ostmt.getString(9);
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			if(isDebugYN) {
				System.out.println("(InvokeEGLapplication:getQueuePrimaryKey) responseTxt "+responseTxt);
				System.out.println("(InvokeEGLapplication:getQueuePrimaryKey) errorCode "+errorCode);
				System.out.println("(InvokeEGLapplication:getQueuePrimaryKey) errorMsg "+errorMsg);
			}
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:getQueuePrimaryKey) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;	

	}

	// Added by Apoorva for TH-KW-CRF-0020 on 03/10/2022 - This is used to insert into XH_QMS table
	private String processInsertIntoXhQmsTable(Map<String, String> reqParams) throws Exception 
		{
			String responseTxt="";
			String p_response="";
			String errorCode="";
			String errorMsg="";
			CallableStatement ostmt = null;
			Connection dbConn = null;
			try
			{
				dbConn = ConnectionManager.getConnection();

				ostmt = dbConn.prepareCall("{ CALL XHQMS.XH_QMS_AUDIT(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }" );
				ostmt.setString(1,reqParams.get("function_id"));
				ostmt.setString(2,reqParams.get("facility_id"));
				ostmt.setString(3,reqParams.get("queue_pkid"));
				ostmt.setString(4,reqParams.get("token_number"));
				ostmt.setString(5,reqParams.get("issued_date"));
				ostmt.setString(6,reqParams.get("called_date"));
				ostmt.setString(7,reqParams.get("patient_id"));
				ostmt.setString(8,reqParams.get("encounter_id"));
				ostmt.setString(9,reqParams.get("reference_id"));
				ostmt.setString(10,reqParams.get("status_code"));
				ostmt.setString(11,reqParams.get("status_text"));
				ostmt.setString(12,reqParams.get("user_id"));
				ostmt.registerOutParameter(13,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(14,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(15,java.sql.Types.VARCHAR);
				ostmt.execute();
				p_response = ostmt.getString(13);
			errorCode = ostmt.getString(14);
			errorMsg = ostmt.getString(15);
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			if(isDebugYN) {
				System.out.println("(InvokeEGLapplication:getNewToken) responseTxt "+responseTxt);
				System.out.println("(InvokeEGLapplication:getNewToken) errorCode "+errorCode);
				System.out.println("(InvokeEGLapplication:getNewToken) errorMsg "+errorMsg);
			}
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:getNewToken) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;	

	}

	// Added by Nagarjun for ML-BRU-CRF-628.10 on 14/05/2023 -- Used for getting the queue number
		private String getQueueNumber(Map<String, String> reqParams) throws Exception 
		{
			String responseTxt="";
			String p_response="";
			String errorCode="";
			String errorMsg="";
			CallableStatement ostmt = null;
			Connection dbConn = null;
			try
			{
				dbConn = ConnectionManager.getConnection();

				ostmt = dbConn.prepareCall("{ CALL XHBRUQMS.FETCH_QUEUE_NO(?,?,?,?,?,?,?,?,?) }" );
				ostmt.setString(3,reqParams.get("facility_id"));
				ostmt.setString(4,reqParams.get("location_id"));
				ostmt.setString(5,reqParams.get("patient_id"));
				ostmt.setString(6,reqParams.get("encounter_id"));
				ostmt.setString(7,reqParams.get("user_id"));
				ostmt.setString(8,reqParams.get("workStation_id"));
				
				ostmt.registerOutParameter(9,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(10,java.sql.Types.VARCHAR);
				ostmt.registerOutParameter(11,java.sql.Types.VARCHAR);
				ostmt.execute();
				p_response = ostmt.getString(9);
			errorCode = ostmt.getString(10);
			errorMsg = ostmt.getString(11);
			if(isDebugYN) 
			System.out.println(" ... 9 ..."+errorMsg);
			if((errorMsg != null) && (errorMsg.trim().length()>0)) 
			{
				responseTxt=errorMsg;	
			}
			else
			{
				if(errorCode=="S" || "S".equalsIgnoreCase(errorCode))
				{
					 responseTxt=p_response;
				}
				else
				{
					 responseTxt=p_response;
				}
			}
			if(isDebugYN) {
				System.out.println("(InvokeEGLapplication:getQueueNumber) responseTxt "+responseTxt);
				System.out.println("(InvokeEGLapplication:getQueueNumber) errorCode "+errorCode);
				System.out.println("(InvokeEGLapplication:getQueueNumber) errorMsg "+errorMsg);
			}
		}
		catch(Exception exp)
		{
			System.out.println("(InvokeEGLapplication:getQueueNumber) Exception at executing procedure");
			exp.printStackTrace(System.err);
		}
		finally
		{			
			XHUtil.closeDBResources(null, ostmt, dbConn);
		}
		return responseTxt;	

	}





}
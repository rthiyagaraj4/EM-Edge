/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
package eXH;

import java.util.Hashtable;
/*
 * This class stores all the static SQL Query data.
 */
public class XHSQLSet 
{
  static Hashtable hashMap = new Hashtable();
  static String columnDelimiter=",";
  
  static
  {
 
  // Application 
  hashMap.put("APPLICATION",
          "SELECT APPLICATION_ID, APPLICATION_NAME,FACILITY_NAME,IN_USE_YN,FIELD_SEPARATOR          FROM XH_APPLICATION_LANG_VW WHERE upper(APPLICATION_ID) like upper('#appl_id%')  AND upper(APPLICATION_NAME) LIKE upper('%#appl_name%')         /*  AND upper(FACILITY_NAME) LIKE upper('%#appl_fac_name%')  */     AND UPPER(IN_USE_YN) like UPPER('%#in_use%')  AND LANGUAGE_ID =NVL('#locale',LANGUAGE_ID)  ORDER BY #orderbycolumns ");

   // Communication Settings For Application  
   hashMap.put("APPLICATION_COMMUNICATION",
          "SELECT A.APPLICATION_ID,A.FACILITY_ID,A.OUTBOUND_YN,B.INBOUND_YN,C.APPLICATION_NAME,D.FACILITY_NAME    "+
          " FROM XH_APPL_FOR_FACILITY A,XH_APPL_FOR_INBOUND B,XH_APPLICATION_LANG_VW C,SM_FACILITY_PARAM_LANG_VW D WHERE upper(C.APPLICATION_NAME) LIKE upper('%#appl%') "+
          " AND upper(D.FACILITY_NAME) LIKE upper('%#facility%') "+
		  "	AND A.APPLICATION_ID = C.APPLICATION_ID AND A.FACILITY_ID=D.FACILITY_ID"+
          " AND A.APPLICATION_ID=B.APPLICATION_ID "+
		  " AND C.LANGUAGE_ID =NVL('#locale',C.LANGUAGE_ID) "+
	      " AND D.LANGUAGE_ID =NVL('#locale',D.LANGUAGE_ID) "+
          " ORDER BY #orderbycolumns ");

// Client Communication
   hashMap.put("CLIENT_COMMUNICATION",
          "SELECT DISTINCT A.CLIENT_ID,A.CLIENT_NAME,A.OUTBOUND_YN,A.INBOUND_YN"+
          " FROM XH_COMM_CLIENT_LANG_VW A WHERE upper(A.CLIENT_NAME) LIKE upper('#client%') "+
		  " AND OUTBOUND_YN = NVL('#OUTBOUND_YN',OUTBOUND_YN)"+
		  " AND INBOUND_YN = NVL('#INBOUND_YN',INBOUND_YN)"+
		  " AND LANGUAGE_ID = NVL('#locale',LANGUAGE_ID)"+
          " ORDER BY #orderbycolumns ");

/* inserted code by srinivasa.N--------------------------------------------*/

   //  QUERY FOR VIEW SERVER ERRORS AND VIEW COMMINICATION ERRORS  
   hashMap.put("VIEWSERVERERROR",
         " SELECT X.OPERATING_FACILITY_ID,Y.FACILITY_NAME,X.PROC_ID,X.FAILED_PROC_ID,X.MSG_NUM,X.APP_MSG,ERR_MSG,TO_CHAR(X.MSG_DATE_TIME,'DD/MM/YYYY HH:MI:SS'),X.APP_KEY "+
         " FROM SM_PROC_MSG X,SM_FACILITY_PARAM_LANG_VW Y "+
         " WHERE  X.PROC_ID=NVL('#sprocessid',X.PROC_ID) "+
         " AND X.OPERATING_FACILITY_ID=NVL('#sfacility',X.OPERATING_FACILITY_ID) "+
       //  " AND TO_CHAR(X.MSG_DATE_TIME,'DD/MM/YYYY') BETWEEN  NVL('#smsg_dt1', TO_CHAR(X.MSG_DATE_TIME,'DD/MM/YYYY')) "+
       //  " AND NVL('#smsg_dt2', TO_CHAR(X.MSG_DATE_TIME,'DD/MM/YYYY')) "+
		 " AND X.APP_KEY=NVL('#appkey',X.APP_KEY) "+
         " AND X.OPERATING_FACILITY_ID=Y.FACILITY_ID AND Y.LANGUAGE_ID=NVL('#locale',Y.LANGUAGE_ID)"+
		  " ORDER BY #orderbycolumns "+ "#sortMode");

//  QUERY FOR VIEW AUDIT LOG
   hashMap.put("VIEWAUDITLOG",
			   "SELECT x.message_id, x.facility_id, y.facility_name,"+
			   " x.process_date_time, x.event_type,"+
			   " x.process_id, x.processed_by,"+
			   " x.end_date_time, x.comm_retries,"+
			   " x.status, x.status_text, x.MESSAGE_TEXT"+
		  " FROM #tableName x,"+
			   " sm_facility_param_lang_vw y,"+
			   " xh_event_type c"+
		" WHERE x.application_id = NVL ('#appl_name', x.application_id)"+
		   " AND x.facility_id = NVL ('#facility', x.facility_id)"+
		   " AND x.message_id = NVL ('#msg_id', x.message_id)"+
		   " AND x.event_type = c.event_type"+
		   " AND c.MESSAGE_TYPE = NVL ('#msg_type', c.MESSAGE_TYPE)"+
		   " AND x.event_type = NVL ('#event_type', x.event_type)"+
		   " AND TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss') BETWEEN NVL ('#amsg_dt1', TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss')) AND NVL ('#amsg_dt2', TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss') + 0.99999)"+
		   " AND x.facility_id = y.facility_id"+
		   " AND y.language_id = NVL ('#locale', y.language_id)"+
		   " ORDER BY #orderbycolumns "+"#sortMode");
		  
   //  QUERY FOR VIEW QUERY PROCESS
   hashMap.put("VIEWQUERY",
          "SELECT APPLICATION_ID,QUERY_ID,FACILITY_ID,TO_CHAR(QUERY_DATE,'DD/MM/YYYY HH:MI:SS'),QUERY_TYPE,"+
		  //" DECODE(QUERY_PRIORITY,'I','Immediate','D','Defered'),"+
          " QUERY_PRIORITY,PROCESS_ID,"+
          //" DECODE(QUERY_STATUS,'S','Successful','R','Rejected','F','Failure','A','All'),"+ 
          " QUERY_STATUS,TO_CHAR(LAST_PROC_START_TIME,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(LAST_PROC_END_TIME,'DD/MM/YYYY HH:MI:SS'),ADDED_BY_ID,MODIFIED_BY_ID, "+
		  " QUERY_TEXT,STATUS_TEXT,TO_CHAR(ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'),"+
		  " ADDED_AT_WS_NO,ADDED_FACILITY_ID,MODIFIED_AT_WS_NO,MODIFIED_FACILITY_ID,EVENT_TYPE,ACCESSION_NUMBER,SITE_ID"+
		  " FROM XH_APPLICATION_QUERY "+
		  " WHERE "+
		  " APPLICATION_ID=NVL('#qapplname',APPLICATION_ID) AND "+
          " FACILITY_ID=NVL('#qfacility',FACILITY_ID) AND "+
          " QUERY_STATUS=NVL('#qstatus',QUERY_STATUS) "+
          " AND TO_CHAR(QUERY_DATE,'DD/MM/YYYY')BETWEEN  NVL('#qmsg_dt1', TO_CHAR(QUERY_DATE,'DD/MM/YYYY')) "+
          " AND NVL('#qmsg_dt2',TO_CHAR(QUERY_DATE,'DD/MM/YYYY'))"+
          " ORDER BY #orderbycolumns "+ "#sortMode");
  // QUERY  FOR VIEW PROCEDURE DEBUG LOG 
   hashMap.put("VIEWPROCEDUREDEBUG",
           "SELECT TO_CHAR(OPERATED_DATE_TIME,'DD/MM/YYYY HH:MI:SS'),OPERATED_BY,INVOKE_PRODUCT_NAME,PROCESS_ID,PROCEDURE_NAME,PROCEDURE_PARAMETER "+
		   " FROM XH_DEBUG_LOG "+
           " WHERE "+
           " APPLICATION_ID = NVL('#vapplname',APPLICATION_ID) AND "+
           " MESSAGE_ID = NVL('#vmsgid',MESSAGE_ID) AND "+           
           " FACILITY_ID = NVL('#vfacility',FACILITY_ID) AND "+ 
           " EVENT_TYPE = NVL('#veventtype',EVENT_TYPE) AND "+
           " OBJECT_TYPE='P' "+
           " ORDER BY #orderbycolumns "+ "#sortMode");


  // QUERY  FOR VIEW TRIGGER DEBUG LOG 
   hashMap.put("VIEWTRIGGERDEBUG",
           "SELECT TO_CHAR(OPERATED_DATE_TIME,'DD/MM/YYYY HH:MI:SS'),OPERATED_BY,INVOKE_PRODUCT_NAME,TRIGGERING_EVENT,TRIGGERING_TABLE ,TRIGGERING_CONDITION"+       
		   " FROM XH_DEBUG_LOG "+
           " WHERE "+
           " APPLICATION_ID = NVL('#vapplname',APPLICATION_ID) AND "+
           " MESSAGE_ID = NVL('#vmsgid',MESSAGE_ID) AND "+           
           " FACILITY_ID = NVL('#vfacility',FACILITY_ID) AND "+ 
           " EVENT_TYPE = NVL('#veventtype',EVENT_TYPE) AND "+
           " OBJECT_TYPE='T' "+
           " ORDER BY #orderbycolumns "+ "#sortMode");

 // QUERY  FOR VIEW EVENTS OUTBOUND 
   hashMap.put("VIEW_EVENTS(OUTBOUND)",
			"SELECT APPLICATION_ID,application_name,To_number(MESSAGE_ID),"+
			" TO_CHAR(MESSAGE_DATE,'DD/MM/YYYY HH:MI:SS'),EVENT_TYPE,PATIENT_ID,MERGED_PATIENT_ID,"+
			" FACILITY_NAME,FACILITY_ID,EPISODE_TYPE,To_number(EPISODE_ID),to_number(VISIT_ID),"+
			" ACCESSION_NUM,EXT_ACCESSION_NUM,ACTION_TYPE,TO_CHAR(LAST_PROC_DATE,'DD/MM/YYYY HH:MI:SS'),"+
			" EVENT_STATUS,NOT_REQ_REASON,ADDED_BY_ID,TO_CHAR(ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),ADDED_AT_WS_NO,"+
			" MODIFIED_BY_ID,TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'),MODIFIED_AT_WS_NO,MESSAGE_STATUS_DESC,PROTOCOL_LINK_ID "+
			" FROM XH_EVENT_APPL_MESSAGE_VW  ");

  //INSERTION FOR XP EVENTS 
  
   hashMap.put("VIEW_XP_EVENTS",
			"SELECT APPLICATION_ID,application_name,To_number(MESSAGE_ID),"+
			" TO_CHAR(MESSAGE_DATE,'DD/MM/YYYY HH:MI:SS'),EVENT_TYPE,PATIENT_ID,MERGED_PATIENT_ID,"+
			" FACILITY_NAME,FACILITY_ID,EPISODE_TYPE,To_number(EPISODE_ID),to_number(VISIT_ID),"+
			" ACCESSION_NUM,EXT_ACCESSION_NUM,ACTION_TYPE,TO_CHAR(LAST_PROC_DATE,'DD/MM/YYYY HH:MI:SS'),"+
			" EVENT_STATUS,NOT_REQ_REASON,ADDED_BY_ID,TO_CHAR(ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),ADDED_AT_WS_NO,"+
			" MODIFIED_BY_ID,TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'),MODIFIED_AT_WS_NO,MESSAGE_STATUS_DESC,PROTOCOL_LINK_ID "+
			" FROM XP_EVENT_APPL_MESSAGE_VW  ");	 



 // QUERY  FOR VIEW PURGE  EVENTS OUTBOUND 
    hashMap.put("VIEW_PURGE_EVENTS(OUTBOUND)",
			"SELECT APPLICATION_ID,application_name,To_number(MESSAGE_ID),"+
			" TO_CHAR(MESSAGE_DATE,'DD/MM/YYYY HH:MI:SS'),EVENT_TYPE,PATIENT_ID,MERGED_PATIENT_ID,"+
			" FACILITY_NAME,FACILITY_ID,EPISODE_TYPE,To_number(EPISODE_ID),to_number(VISIT_ID),"+
			" ACCESSION_NUM,EXT_ACCESSION_NUM,ACTION_TYPE,TO_CHAR(LAST_PROC_DATE,'DD/MM/YYYY HH:MI:SS'),"+
			" EVENT_STATUS,NOT_REQ_REASON,ADDED_BY_ID,TO_CHAR(ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),ADDED_AT_WS_NO,"+
			" MODIFIED_BY_ID,TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'),MODIFIED_AT_WS_NO,MESSAGE_STATUS_DESC,PROTOCOL_LINK_ID "+
			" FROM XH_PURGE_APPL_MESSAGE_VW  ");


// QUERY  FOR VIEW EVENTS inbound
    hashMap.put("VIEW_EVENTS(INBOUND)",
			"SELECT X.MESSAGE_STATUS ,X.APPLICATION_ID,Y.APPLICATION_NAME,X.MESSAGE_ID,"+
	        " TO_CHAR(X.MESSAGE_RECEIVED_DATE,'DD/MM/YYYY HH:MI:SS')MESSAGE_RECEIVED_DATE,X.PROCESS_ID,X.CLIENT_ID,"+
	        " X.RD_ORDER_YN,TO_CHAR(X.ADDED_DATE,'DD/MM/YYYY HH:MI:SS')ADDED_DATE, "+
			" TO_CHAR(X.MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS')MODIFIED_DATE,"+
			" X.ACTION_TYPE,X.LAST_PROC_DATE,X.EVENT_STATUS,X.NOT_REQ_REASON,X.EXT_ACCESSION_NUM,X.EVENT_TYPE,"+
			" X.MODIFIED_AT_WS_NO,X.PATIENT_ID,X.MERGED_PATIENT_ID,X.EPISODE_TYPE,X.EPISODE_ID,X.VISIT_ID,X.ACCESSION_NUM,X.PROTOCOL_LINK_ID" +
			" FROM XH_INBOUND_MESSAGE_VW X,XH_APPLICATION_LANG_VW Y  ");



  // QUERY  FOR client master outbound
     hashMap.put("COMMUN_I",
			" SELECT X.APPLICATION_ID,X.APPLICATION_NAME,Y.FACILITY_ID,Z.FACILITY_NAME, 'N' IN_USE_YN "+ 
            " FROM XH_APPLICATION_LANG_VW X,XH_APPL_FOR_FACILITY Y,	SM_FACILITY_PARAM Z "+
			" WHERE X.APPLICATION_ID = Y.APPLICATION_ID AND Y.FACILITY_ID=Z.FACILITY_ID "+
	        " AND Y.OUTBOUND_YN='Y' AND X.LANGUAGE_ID='#locale' "+
            " AND (Y.APPLICATION_ID,'NULL') NOT IN (SELECT APPLICATION_ID,CLIENT_ID "+  
			" FROM XH_COMM_CLIENT_APPLICATION WHERE COMM_TYPE='O') ORDER BY 2 ");

  // QUERY  FOR client master outbound  for update
     hashMap.put("COMMUN_U",
			" SELECT X.APPLICATION_ID,X.APPLICATION_NAME,Z.FACILITY_ID,Z.FACILITY_NAME, NVL(Y.IN_USE_YN,'N') IN_USE_YN "+ 
            " FROM XH_APPLICATION_LANG_VW X,XH_COMM_CLIENT_APPLICATION Y,SM_FACILITY_PARAM Z "+ 
            " WHERE X.APPLICATION_ID=Y.APPLICATION_ID AND	Y.FACILITY_ID=Z.FACILITY_ID "+
			" AND	Y.CLIENT_ID	='#client_id' AND X.LANGUAGE_ID='#locale' UNION "+
			" SELECT X.APPLICATION_ID,X.APPLICATION_NAME,Y.FACILITY_ID,Z.FACILITY_NAME, 'N' IN_USE_YN FROM "+ 
			" XH_APPLICATION_LANG_VW X,	XH_APPL_FOR_FACILITY Y,	SM_FACILITY_PARAM Z "+
			" WHERE X.APPLICATION_ID =	Y.APPLICATION_ID AND Y.FACILITY_ID=	Z.FACILITY_ID AND Y.OUTBOUND_YN='Y' "+ 
			" AND X.LANGUAGE_ID='#locale' AND	(Y.APPLICATION_ID,'#client_id') NOT IN "+
			" (SELECT APPLICATION_ID,CLIENT_ID  FROM XH_COMM_CLIENT_APPLICATION WHERE COMM_TYPE='O') ORDER BY 2");

   // QUERY  FOR client master outbound
      hashMap.put("COMMUN_II",
			" SELECT X.APPLICATION_ID,X.APPLICATION_NAME,'*A' FACILITY_ID,'All' FACILITY_NAME, 'N' IN_USE_YN "+
            " FROM XH_APPLICATION_LANG_VW X,	XH_APPL_FOR_INBOUND Y WHERE X.APPLICATION_ID=	Y.APPLICATION_ID "+
	        " AND Y.INBOUND_YN='Y'   AND X.LANGUAGE_ID='#locale' AND (Y.APPLICATION_ID,'NULL') NOT IN "+
			" (SELECT APPLICATION_ID,CLIENT_ID FROM XH_COMM_CLIENT_APPLICATION WHERE COMM_TYPE='I')");

    // QUERY  FOR client master INBOUND
      hashMap.put("COMMUN_UU",
			"SELECT X.APPLICATION_ID,X.APPLICATION_NAME,'*A' FACILITY_ID,'All' FACILITY_NAME,"+
                 " NVL(Y.IN_USE_YN,'N') IN_USE_YN FROM XH_APPLICATION_LANG_VW X,XH_COMM_CLIENT_APPLICATION Y "+
	             " WHERE X.APPLICATION_ID=Y.APPLICATION_ID AND Y.FACILITY_ID='*A' AND Y.CLIENT_ID	='#CLIENT_ID' "+
	             " AND X.LANGUAGE_ID='#locale' UNION SELECT X.APPLICATION_ID,X.APPLICATION_NAME,'*A' FACILITY_ID, "+
	             "'All' FACILITY_NAME, 'N' IN_USE_YN FROM XH_APPLICATION_LANG_VW X,	XH_APPL_FOR_INBOUND Y "+
	             " WHERE X.APPLICATION_ID=	Y.APPLICATION_ID AND Y.INBOUND_YN='Y'  AND X.LANGUAGE_ID='#locale' "+
	             " AND (Y.APPLICATION_ID,'#CLIENT_ID') NOT IN (SELECT APPLICATION_ID,CLIENT_ID FROM "+
	             " XH_COMM_CLIENT_APPLICATION WHERE COMM_TYPE='I')");


			/* code inserted by Neelkamal Pyla --------------------------------------------*/

	 //  Begin - Modified by Lakshman on 18/5/2009 for HMC
	 // QUERY FOR Data Group Id 
	  hashMap.put("DATAGROUPID",
		  "SELECT A.DATA_GROUP_ID, A.DESCRIPTION,A.STANDARD_CODE,B.STANDARD_DESC,A.APPLICATION_ID,C.APPLICATION_NAME,A.protocol_mode FROM XH_DATA_GROUP A,XH_STANDARD B,XH_APPLICATION C WHERE A.STANDARD_CODE=B.STANDARD_CODE(+) AND A.APPLICATION_ID=C.APPLICATION_ID(+) AND 		  upper(A.DATA_GROUP_ID) like NVL(upper('%#dg_code%'),upper(A.DATA_GROUP_ID)) AND upper(A.DESCRIPTION) LIKE upper('%#dg_desc%')  AND  upper(B.STANDARD_DESC) like NVL(upper('%#stnd_code%'),upper(B.STANDARD_DESC)) AND upper(C.APPLICATION_NAME) LIKE upper('%#appl_id%') ORDER BY #orderbycolumns ");

//changed by prithivi for ML-MMOH-CRF-0491 on 20/07/2016 -eNotification -added 5 new columns for soap
//changed by NIVEDITHA for AAKH-CRF-0113 on 12/02/2020 -  A.MAIL_HOST, A.MAIL_PORT, A.MAIL_CONFIG, A.MAIL_SMTP_AUTH_FLAG, A.MAIL_SMTP_STARTTLS_FLAG A.MAIL_ATTACHMENT_FLAG ADDED COLOUMS FOR JAVAMAIL   
hashMap.put("COMMPROTID",
			"SELECT /*DISTINCT */ A.PROTOCOL_ID,A.PROTOCOL_NAME,A.PROTOCOL_TYPE,A.PROTCOL_MODE,A.FILE_DIRECTORY,A.DBF_FILE_TYPE,A.IP_ADDRESS,A.PORT_NUMBER,A.ACK_TYPE,A.RETRY_INTERVAL,A.MAXIMUM_RETRIES,A.CREATE_FILE_INTERVAL_HHMM,A.FILE_NAMING_API,A.CREATE_DATA_INTERVAL_HHMM,A.COMM_DATA_INPUT_OUTPUT_API,A.COMM_STATISTICS_API,A.AUTOMATIC_RESTART_TYPE,TO_CHAR(A.AUTOMATIC_RESTART_TIME,'HH24:MI'),A.MODULE_ID,A.DB_CONNECT_STRING,A.DB_DRIVER,A.FAX_ID,A.MAIL_ID,B.MODULE_NAME,/* C.RECIPIENT_NAME,D.TO_MAIL, */ A.ORACLE_TABLE_QRY,A.ORACLE_TABLE_INSERT,A.SOLICITED_YN,A.ACK_DIRECTORY,A.XML_STYLE_SHEET_URL,A.INTERFACE_MODULE_ID,E.INTERFACE_DESC,A.ERROR_DIRECTORY,A.ODBC_USER_ID,A.ODBC_PWD,A.ODBC_SID,A.DB_LINK, c.LIST_ELMT_LABEL, A.HTTP_USER_AGENT, A.HTTP_CONTENT_TYPE, A.HTTP_TRANSFER_ENCODING, A.HTTP_SOAPACTION, A.HTTP_CONTENT_LENGTH_FLAG, A.MAIL_HOST, A.MAIL_PORT, A.MAIL_CONFIG, A.MAIL_SMTP_AUTH_FLAG, A.MAIL_SMTP_STARTTLS_FLAG, A.MAIL_ATTACHMENT_FLAG FROM XH_PROTOCOL A,SM_MODULE B,/*SM_FAX C,SM_MAIL D,*/XH_INTERFACE E, sm_list_item c where upper(A.PROTOCOL_ID) LIKE upper('#protocol_id%') AND upper(A.PROTOCOL_NAME) LIKE upper('%#protocol_name%') AND upper(A.PROTOCOL_TYPE) = NVL(upper('#protocol_type'),A.PROTOCOL_TYPE) AND upper(A.PROTCOL_MODE) LIKE upper('%#protocol_mode%') and c.LIST_REF = 'XH_COMM_TYPE' and A.PROTOCOL_TYPE = c.LIST_ELMT_VALUE AND A.MODULE_ID=B.MODULE_ID AND /* A.FAX_ID=C.FAX_ID(+) AND A.MAIL_ID=D.MAIL_ID(+) AND   */ A.INTERFACE_MODULE_ID=E.INTERFACE_MODULE_ID(+) ORDER BY #orderbycolumns");


	// QUERY FOR Comm Protocol Link Id 
	  hashMap.put("COMMPROTLINKID",
	     	" SELECT A.PROTOCOL_LINK_ID,A.PROTOCOL_LINK_NAME,A.PROTOCOL_ID,A.DATA_GROUP_ID, B.PROTOCOL_NAME,	        C.DESCRIPTION,A.STANDARD_CODE,D.STANDARD_DESC,A.APPLICATION_ID,E.APPLICATION_NAME,   	    A.PROFILE_ID,G.SHORT_DESC,A.AUDIT_YN,	     A.DEBUG_YN,A.OUTBOUND_LOG_YN,	        	     A.INBOUND_LOG_YN ,B.PROTCOL_MODE FROM XH_PROTOCOL_LINK A,XH_PROTOCOL B,XH_DATA_GROUP C,XH_STANDARD D,XH_APPLICATION E,XH_STANDARD_PROFILE G WHERE upper(A.PROTOCOL_LINK_ID)  like NVL(upper('#protocol_linkId%'),upper(A.PROTOCOL_LINK_ID))       AND upper(A.PROTOCOL_LINK_NAME) LIKE upper('%#protocol_linkName%') AND         	          upper(B.PROTOCOL_NAME) LIKE upper('%#protocol_name%') AND upper(C.DESCRIPTION) LIKE upper('%#dg_desc%') AND    A.PROTOCOL_ID=B.PROTOCOL_ID(+) AND	        	           A.DATA_GROUP_ID=C.DATA_GROUP_ID(+) AND A.STANDARD_CODE=D.STANDARD_CODE(+) AND	        	            A.APPLICATION_ID=E.APPLICATION_ID(+) AND       	             A.PROFILE_ID=G.PROFILE_ID(+) ORDER BY #orderbycolumns ");
    // End - Modified by Lakshman on 18/5/2009 for HMC

	// QUERY FOR Data Group Id 
	//  hashMap.put("DATAGROUPID",
	//	  "SELECT A.DATA_GROUP_ID, A.DESCRIPTION,A.STANDARD_CODE,B.STANDARD_DESC,A.APPLICATION_ID,C.APPLICATION_NAME FROM XH_DATA_GROUP A,XH_STANDARD B,XH_APPLICATION C WHERE A.STANDARD_CODE=B.STANDARD_CODE(+) AND A.APPLICATION_ID=C.APPLICATION_ID(+) AND 		  upper(A.DATA_GROUP_ID) like NVL(upper('#dg_code%'),upper(A.DATA_GROUP_ID)) AND upper(A.DESCRIPTION) LIKE upper('%#dg_desc%')  AND  upper(B.STANDARD_DESC) like NVL(upper('%#stnd_code%'),upper(B.STANDARD_DESC)) AND upper(C.APPLICATION_NAME) LIKE upper('%#appl_id%') ORDER BY #orderbycolumns ");

	// QUERY FOR Data Group Id Details 
	 hashMap.put("DATAGROUPDETAILS",
			"SELECT distinct A.SRL_NO,A.DATA_GROUP_ID,A.APPLICATION_ID,A.FACILITY_ID,A.MESSAGE_TYPE,A.EVENT_TYPE,A.SEGMENT_TYPE,B.DESCRIPTION,C.APPLICATION_NAME,D.FACILITY_NAME,F.DESCRIPTION,G.EVENT_NAME,H.SEGMENT_NAME,A.FILTER_RULE_TYPE,A.PROTOCOL_LINK_ID  FROM XH_DATA_GROUP_DETAIL A,XH_DATA_GROUP B,XH_APPLICATION C,	SM_FACILITY_PARAM_LANG_VW D,XH_EVENT_TYPE_segment E,XH_MESSAGE_TYPE F,XH_EVENT_TYPE G,XH_SEGMENT H  ");


	// QUERY FOR Comm Protocol Id 
	//  hashMap.put("COMMPROTID",
	//		" SELECT /*DISTINCT */ A.PROTOCOL_ID,A.PROTOCOL_NAME,A.PROTOCOL_TYPE,A.PROTCOL_MODE,A.FILE_DIRECTORY,A.DBF_FILE_TYPE,A.IP_ADDRESS,A.PORT_NUMBER,A.ACK_TYPE,A.RETRY_INTERVAL,A.MAXIMUM_RETRIES,A.CREATE_FILE_INTERVAL_HHMM,A.FILE_NAMING_API,A.CREATE_DATA_INTERVAL_HHMM,A.COMM_DATA_INPUT_OUTPUT_API,A.COMM_STATISTICS_API,A.AUTOMATIC_RESTART_TYPE,TO_CHAR(A.AUTOMATIC_RESTART_TIME,'HH24:MI'),A.MODULE_ID,A.DB_CONNECT_STRING,A.DB_DRIVER,A.FAX_ID,A.MAIL_ID,B.MODULE_NAME,/* C.RECIPIENT_NAME,D.TO_MAIL, */ A.ORACLE_TABLE_QRY,A.ORACLE_TABLE_INSERT,A.SOLICITED_YN,A.ACK_DIRECTORY,A.XML_STYLE_SHEET_URL,A.INTERFACE_MODULE_ID,E.INTERFACE_DESC,A.ERROR_DIRECTORY,A.ODBC_USER_ID,A.ODBC_PWD,A.ODBC_SID,A.DB_LINK FROM XH_PROTOCOL A,SM_MODULE B,/*SM_FAX C,SM_MAIL D,*/XH_INTERFACE E where upper(A.PROTOCOL_ID) LIKE upper('#protocol_id%') AND upper(A.PROTOCOL_NAME) LIKE upper('%#protocol_name%') AND upper(A.PROTOCOL_TYPE) = NVL(upper('#protocol_type'),A.PROTOCOL_TYPE) AND upper(A.PROTCOL_MODE) LIKE upper('%#protocol_mode%') AND A.MODULE_ID=B.MODULE_ID AND /* A.FAX_ID=C.FAX_ID(+) AND A.MAIL_ID=D.MAIL_ID(+) AND   */ A.INTERFACE_MODULE_ID=E.INTERFACE_MODULE_ID(+) ORDER BY #orderbycolumns ");

	// QUERY FOR Comm Protocol Link Id 
	//  hashMap.put("COMMPROTLINKID",
	//     	" SELECT A.PROTOCOL_LINK_ID,A.PROTOCOL_LINK_NAME,A.PROTOCOL_ID,A.DATA_GROUP_ID, B.PROTOCOL_NAME,	        C.DESCRIPTION,A.STANDARD_CODE,D.STANDARD_DESC,A.APPLICATION_ID,E.APPLICATION_NAME,   	    A.PROFILE_ID,G.SHORT_DESC,A.AUDIT_YN,	     A.DEBUG_YN,A.OUTBOUND_LOG_YN,	        	     A.INBOUND_LOG_YN FROM XH_PROTOCOL_LINK A,XH_PROTOCOL B,XH_DATA_GROUP C,XH_STANDARD D,XH_APPLICATION E,XH_STANDARD_PROFILE G WHERE upper(A.PROTOCOL_LINK_ID)  like NVL(upper('#protocol_linkId%'),upper(A.PROTOCOL_LINK_ID))       AND upper(A.PROTOCOL_LINK_NAME) LIKE upper('%#protocol_linkName%') AND         	          upper(B.PROTOCOL_NAME) LIKE upper('%#protocol_name%') AND upper(C.DESCRIPTION) LIKE upper('%#dg_desc%') AND    A.PROTOCOL_ID=B.PROTOCOL_ID(+) AND	        	           A.DATA_GROUP_ID=C.DATA_GROUP_ID(+) AND A.STANDARD_CODE=D.STANDARD_CODE(+) AND	        	            A.APPLICATION_ID=E.APPLICATION_ID(+) AND       	             A.PROFILE_ID=G.PROFILE_ID(+) ORDER BY #orderbycolumns ");

	  	// QUERY FOR API/Query Based Inbound Header 
	  hashMap.put("INBOUNDHEADER",
			"SELECT A.APPLICATION_ID,C.APPLICATION_NAME,A.FACILITY_ID,D.FACILITY_NAME,A.EVENT_TYPE, EVENT_NAME , A.SEGMENT_ID,SEGMENT_NAME, A.INBOUND_API, B.API_DESC,B.EXECUTION_NATURE,A.PROFILE_ID,H.SHORT_DESC,A.REPEAT_SEGMENT,A.SYSTEM_DEFINED_STRING,A.QUERY_CODE  FROM XH_INBOUND_HEADER A,XH_API B,XH_APPLICATION C,	SM_FACILITY_PARAM_LANG_VW D,XH_EVENT_TYPE_segment E, XH_SEGMENT F , XH_EVENT_TYPE G,XH_STANDARD_PROFILE H WHERE  A.APPLICATION_ID=C.APPLICATION_ID AND A.FACILITY_ID=D.FACILITY_ID AND A.EVENT_TYPE=E.EVENT_TYPE(+) 			  and a.segment_ID = E.SEGMENT_TYPE (+) AND  A.INBOUND_API=B.API_CODE AND  D.LANGUAGE_ID =NVL('#locale',D.LANGUAGE_ID)  AND a.segment_ID = F.SEGMENT_TYPE AND A.EVENT_TYPE = G.EVENT_TYPE AND A.PROFILE_ID = H.PROFILE_ID AND upper(C.APPLICATION_NAME) LIKE upper('%#application_name%') AND upper(B.API_DESC) LIKE upper('%#inboundapi_name%') AND upper(B.EXECUTION_NATURE) LIKE upper('%#exec_nature%') AND upper(H.SHORT_DESC) LIKE upper('%#profile_desc%')");


	// QUERY FOR API Based Inbound 
	  hashMap.put("APIBASEDINBOUND",
			" SELECT A.SNO,A.ARGUMENT_ID,A.ARGUMENT_NAME,A.ELEMENT_POSITION,A.ELEMENT_VALUE,B.ELEMENT_NAME,C.NULL_YN FROM xh_inbound_api_dtl A,XH_ELEMENT_CROSSREF B,XH_API_DETAILS C ");

  	// QUERY FOR Query Based Inbound 
	  hashMap.put("QUERYBASEDINBOUND",
			" SELECT A.APPLICATION_ID,A.FACILITY_ID,A.EVENT_TYPE,A.SEGMENT_ID, A.INBOUND_API,A.SRL_NO, A.INSERT_QUERY,A.UPDATE_QUERY,B.API_DESC,C.APPLICATION_NAME,D.FACILITY_NAME, EVENT_NAME ,SEGMENT_NAME,A.SUB_API FROM XH_INBOUND_QUERY_DTL A,XH_API B,XH_APPLICATION C, SM_FACILITY_PARAM_LANG_VW D,XH_EVENT_TYPE_segment E, XH_SEGMENT F , XH_EVENT_TYPE G ");

  	// QUERY FOR Table Based Inbound 
	  hashMap.put("TABLEBASEDINBOUND",
			" SELECT A.SRL_NO,A.TABLE_NAME,A.SUB_API FROM XH_INBOUND_QUERY_DTL A ");

    // QUERY FOR Interface Standards 

	   hashMap.put("INTERFACESTANDARDS",
		   " SELECT STANDARD_CODE,STANDARD_DESC,STANDARD_TYPE,MESSAGE_START,MESSAGE_END,SEGMENT_START,SEGMENT_END,FILED_SEPARATOR,ELEMENT_SEPARATOR,EFF_STATUS FROM XH_STANDARD WHERE upper(STANDARD_CODE) LIKE upper('%#standard_code%') AND upper(STANDARD_DESC) LIKE upper('%#standard_desc%') AND upper(STANDARD_TYPE) LIKE upper('%#standard_type%') ORDER BY #orderbycolumns ");


    // QUERY FOR Interface API 
	  hashMap.put("INTERFACEAPI",
		   " SELECT API_CODE,API_DESC,API_TYPE,EXECUTION_NATURE FROM XH_API WHERE upper(API_CODE) LIKE upper('#api_code%') AND upper(API_DESC) LIKE upper('%#api_desc%') AND upper(API_TYPE) LIKE upper('%#api_type%') AND  DECODE(EXECUTION_NATURE,NULL,'XX',EXECUTION_NATURE) = NVL('#exec_nature',DECODE(EXECUTION_NATURE,NULL,'XX',EXECUTION_NATURE))   ORDER BY #orderbycolumns ");

    // QUERY FOR Interface Module 
	  hashMap.put("INTERFACEMODULE",
		  "SELECT A.MODULE_ID,B.MODULE_NAME,INTERFACE_MODULE_ID,INTERFACE_DESC FROM XH_INTERFACE A,SM_MODULE B WHERE A.MODULE_ID=B.MODULE_ID AND UPPER(A.MODULE_ID) LIKE UPPER('#module_id%') AND UPPER(B.MODULE_NAME) LIKE UPPER('%#module_desc%')  AND UPPER(INTERFACE_MODULE_ID) LIKE UPPER('%#sub_module_id%') ORDER BY #orderbycolumns ");

        // QUERY FOR Outbound Triggers 
		// added message_query_identifier
	  hashMap.put("OUTBOUNDTRIGGERS",
		  " SELECT distinct A.TRIGGER_NAME,A.TRIGGERING_EVENT,A.TRIGGERING_TABLE,A.TRIGGER_TYPE, A.TRIGGER_CONDITION,A.EVENT_TYPE,A.FACILITY_ID,A.INSERTING_STATEMENT,   nvl(B.FACILITY_NAME,A.FACILITY_ID),D.EVENT_NAME,A.PROFILE_ID,E.SHORT_DESC, A.MESSAGE_QUERY_IDENTIFIER  FROM XH_TRIGGER A,SM_FACILITY_PARAM_LANG_VW B,XH_EVENT_TYPE_segment C,XH_EVENT_TYPE D,XH_STANDARD_PROFILE E  WHERE UPPER(SUBSTR(A.FACILITY_ID,2,LENGTH(A.FACILITY_ID)-2))=B.FACILITY_ID(+)	AND A.EVENT_TYPE = D.EVENT_TYPE AND A.PROFILE_ID=E.PROFILE_ID(+) AND nvl(B.LANGUAGE_ID,'en')='en' AND upper(A.TRIGGER_NAME) LIKE upper('%#trig_name%') AND upper(A.TRIGGERING_EVENT) LIKE upper('%#trig_event%') AND upper(A.TRIGGER_TYPE) LIKE upper('%#trig_type%') ");
		  
    // QUERY FOR Outbound Triggers colQuery
	  hashMap.put("OUTBOUNDTRIGGERSCOLQRY","SELECT COLUMN_NAME from ALL_TAB_COLUMNS");


	  // QUERY FOR Element Segment Configuration		         
	// 	  hashMap.put("CONFIGUARATION",		    "SELECT A.CONFIG_TYPE,A.CONFIG_NAME,A.QUERY_TEXT,A.SYSTEM_DEFINED_STRING,A.DATA_SOURCE_TYPE,B.SEGMENT_NAME,A.STANDARD_CODE,A.PROFILE_ID,C.SHORT_DESC,D.STANDARD_DESC FROM XH_EVENT_SEGMENT_CONFIG A,XH_SEGMENT B,XH_STANDARD_PROFILE C,XH_STANDARD D  WHERE A.CONFIG_NAME=B.SEGMENT_TYPE AND			A.PROFILE_ID=C.PROFILE_ID(+) AND B.STANDARD_CODE=D.STANDARD_CODE (+) AND upper(A.CONFIG_TYPE) LIKE upper('%#config_type%') AND upper(B.SEGMENT_NAME) LIKE upper('%#config_name%')  AND upper(A.DATA_SOURCE_TYPE) like upper('%#datasrc_type%') /* AND upper(A.SYSTEM_DEFINED_STRING) LIKE upper('%#sysdef_str%') */ ORDER BY #orderbycolumns ");
   
   	  	  hashMap.put("CONFIGUARATION",
			"SELECT A.CONFIG_TYPE,A.CONFIG_NAME,A.QUERY_TEXT,A.SYSTEM_DEFINED_STRING,A.DATA_SOURCE_TYPE,B.SEGMENT_NAME,A.STANDARD_CODE,A.PROFILE_ID,C.SHORT_DESC,D.STANDARD_DESC,A.API_CODE,E.API_DESC,A.POSTING_API_CODE,(SELECT API_DESC FROM XH_API WHERE API_CODE=A.POSTING_API_CODE) POST_API_DESC,A.POSTING_API_SIGNATURE,A.INB_HDR_STRING,A.SYSTEM_DEFINED_STRING_ELE_DESC,D.STANDARD_TYPE,D.FILED_SEPARATOR,D.ELEMENT_SEPARATOR FROM XH_EVENT_SEGMENT_CONFIG A,XH_SEGMENT B,XH_STANDARD_PROFILE C,XH_STANDARD D,XH_API E   WHERE A.CONFIG_NAME=B.SEGMENT_TYPE AND			A.PROFILE_ID=C.PROFILE_ID(+) AND B.STANDARD_CODE=D.STANDARD_CODE (+) AND  A.API_CODE=E.API_CODE(+)  AND upper(A.CONFIG_TYPE) LIKE upper('%#config_type%') AND upper(B.SEGMENT_NAME) LIKE upper('#config_name%') and upper(C.SHORT_DESC) LIKE upper('%#profile_id%') /*AND upper(A.DATA_SOURCE_TYPE) like upper('%#datasrc_type%')  AND upper(A.SYSTEM_DEFINED_STRING) LIKE upper('%#sysdef_str%') */ ORDER BY #orderbycolumns ");

	// QUERY FOR Comm Protocol File Control Structure
	  	  hashMap.put("COMMPROTFILECTRLSTRUCTURE",
		    "SELECT A.SRNO,A.PROTOCOL_ID,A.FILE_CONTROL_TYPE,A.SEGMENT_ID,B.PROTOCOL_NAME,C.SEGMENT_NAME FROM XH_FILE_CONTROL_STRUCTURES A,XH_PROTOCOL B, XH_SEGMENT C ");

    // QUERY FOR Interface API Details
		  hashMap.put("INTERFACEAPIDETAILS",
			"SELECT A.API_CODE,A.SNO,A.ARGUMENT_ID,A.ARGUMENT_NAME,B.API_DESC,B.API_TYPE,A.STANDARD_CODE,C.STANDARD_DESC,A.SUB_API,A.SEARCH_CONDITION,A.REF_KEY,A.NULL_YN FROM XH_API_DETAILS A,XH_API B,XH_STANDARD C ");

    // QUERY FOR Protocol Link Details
		  hashMap.put("COMMPROTOCOLDETAIL",
			"SELECT A.protocol_id,A.protocol_type,A.data_group_id,A.data_group_desc FROM XH_PROTOCOL_LINK A,XH_DATAGROUP_DETAIL B ");

    // Administer Server Process
		  hashMap.put("ADMINSERVERPROCESS",
			"SELECT J.JOB,J.WHAT,J.LOG_USER,TO_CHAR(J.LAST_DATE,'DD/MM/YYYY HH24:MI') LAST_DATE,TO_CHAR(J.NEXT_DATE,'DD/MM/YYYY HH24:MI:SS') NEXT_DATE,DECODE(nvl(null,'0'),'Idle','Running')J_STATUS,DECODE(NVL(J.FAILURES,0),0,'Success','Failed') PREV_STATUS ,J.INTERVAL FROM DBA_JOBS j WHERE (UPPER(WHAT)) NOT LIKE 'XHGEN_CREATOR%'");

	// Event Types
		  hashMap.put("EVENTTYPES",
			"SELECT A.EVENT_TYPE,A.EVENT_NAME,A.INTERFACE_YN,A.COMMUNICATION_TYPE,C.STANDARD_DESC,A.GENERIC_YN,A.STANDARD_CODE,A.MESSAGE_TYPE,A.SOLICITED_YN FROM XH_EVENT_TYPE_LANG_VW A,XH_STANDARD C ");

	// Event Type Segments
		  hashMap.put("EVENTTYPSEG", 
			"SELECT A.SEGMENT_TYPE,A.SEGMENT_NAME,A.OPTIONAL_YN,A.IN_USE_YN,C.STANDARD_DESC,B.REPETITION_APPLICABLE,B.CONTROL_YN,B.FILE_CONTROL_TYPE,B.STANDARD_CODE FROM XH_SEGMENT_LANG_VW A,XH_SEGMENT B,XH_STANDARD C ");

	// Event Wise Segments
    /*		  hashMap.put("EVENTWISESEGMENTS",
			"SELECT DISTINCT * FROM (SELECT a.SEGMENT_TYPE,b.SEGMENT_NAME,a.OPTIONAL_YN,a.IN_USE_YN,C.STANDARD_DESC,B.STANDARD_CODE,A.EVENT_TYPE  FROM  XH_EVENT_TYPE_SEGMENT a, XH_SEGMENT_LANG_VW b, XH_STANDARD C "); */

	// Event Wise Segments
		  hashMap.put("EVENTWISESEGMENTS",
		  "SELECT  * FROM (SELECT /* DISTINCT  */ a.SEGMENT_TYPE,b.SEGMENT_NAME,a.OPTIONAL_YN,a.IN_USE_YN,C.STANDARD_DESC,B.STANDARD_CODE,A.EVENT_TYPE,a.SEGMENT_SEQ  FROM  XH_EVENT_TYPE_SEGMENT a, XH_SEGMENT_LANG_VW b, XH_STANDARD C ");
 
 	// Administer Data Process
		  hashMap.put("ADMINORACLEJOBQUERY",
			"SELECT job, what, log_user, last_execution, next_execution, status, status, interval, long_desc FROM xh_jobs_vw");

	/* End of the code inserted by Neelkamal Pyla --------------------------------------------*/

	 //INSERTION FOR GENERAL EVENTS 
  
		hashMap.put("VIEW_GENERAL_EVENTS",
			"SELECT AMV.APPLICATION_ID,application_name,To_number(MESSAGE_ID),"+
			" TO_CHAR(MESSAGE_DATE,'DD/MM/YYYY HH24:MI:SS'),EVENT_TYPE,PATIENT_ID,MERGED_PATIENT_ID,"+
			" FACILITY_NAME,AMV.FACILITY_ID,EPISODE_TYPE,To_number(EPISODE_ID),to_number(VISIT_ID),"+
			" ACCESSION_NUM,EXT_ACCESSION_NUM,ACTION_TYPE,TO_CHAR(LAST_PROC_DATE,'DD/MM/YYYY HH24:MI:SS'),"+
			" EVENT_STATUS,NOT_REQ_REASON,AMV.ADDED_BY_ID,TO_CHAR(AMV.ADDED_DATE,'DD/MM/YYYY HH24:MI:SS'),AMV.ADDED_AT_WS_NO,"+
			" AMV.MODIFIED_BY_ID,TO_CHAR(AMV.MODIFIED_DATE,'DD/MM/YYYY HH24:MI:SS'),AMV.MODIFIED_AT_WS_NO,MESSAGE_STATUS,AMV.PROTOCOL_LINK_ID,XPL.PROTOCOL_LINK_NAME "+
			" FROM ");

	// GENERALIZED QUERY FOR VIEW EVENTS INBOUND, 
	// Second table name will be appended at the time of processing the query

hashMap.put("VIEW_INBOUND_EVENTS",
			"SELECT X.MESSAGE_STATUS ,X.APPLICATION_ID,Y.APPLICATION_NAME,X.MESSAGE_ID,"+
	        " TO_CHAR(X.MESSAGE_RECEIVED_DATE,'DD/MM/YYYY HH24:MI:SS')MESSAGE_RECEIVED_DATE,X.PROCESS_ID,X.CLIENT_ID,"+
	        " X.RD_ORDER_YN,TO_CHAR(X.ADDED_DATE,'DD/MM/YYYY HH24:MI:SS')ADDED_DATE, "+
			" TO_CHAR(X.MODIFIED_DATE,'DD/MM/YYYY HH24:MI:SS')MODIFIED_DATE,"+
			" X.ACTION_TYPE,TO_CHAR(X.LAST_PROC_DATE,'DD/MM/YYYY HH24:MI:SS')LAST_PROC_DATE,X.EVENT_STATUS,X.NOT_REQ_REASON,X.EXT_ACCESSION_NUM,X.EVENT_TYPE,"+
			" X.MODIFIED_AT_WS_NO,X.PATIENT_ID,X.MERGED_PATIENT_ID,X.EPISODE_TYPE,X.EPISODE_ID,X.VISIT_ID,X.ACCESSION_NUM,X.PROTOCOL_LINK_ID," +
			" X.FACILITY_ID,X.ADDED_BY_ID,X.ERR_MSG,X.MODIFIED_BY_ID,X.ADDED_AT_WS_NO,X.ADDED_FACILITY_ID,X.MODIFIED_FACILITY_ID,TO_CHAR(X.LAST_PROC_DATE,'DD/MM/YYYY HH24:MI:SS') LAST_PROC_DATE,"+
			" X.NOT_REQ_REASON,X.QUERY_ID,X.STATUS_DESC,X.FACILITY_NAME,X.SRL_NO,XPL.PROTOCOL_LINK_NAME "+
			" FROM XH_APPLICATION_LANG_VW Y,XH_PROTOCOL_LINK XPL, ");

//			hashMap.put("VIEWXHAPPLELEMENTNONTABVAL","SELECT MEDICOM_CODE,CROSSREF_CODE,CROSSREF_DESC FROM  XH_APPL_ELEMENT_NONTABVAL");
			hashMap.put("VIEWXHAPPLELEMENTNONTABVAL","SELECT a.MEDICOM_CODE,a.CROSSREF_CODE,a.CROSSREF_DESC,b.bank_name FROM  XH_APPL_ELEMENT_NONTABVAL a,BL_BANK_NAME b");
			hashMap.put("VIEWXHAPPLELEMENTCROSSREF","select B.ELEMENT_ID,B.ELEMENT_NAME,A.DERIVATION_TYPE,B.IN_USE_YN,A.CONDITION_EXP1_VAL,A.EXPECTED_VALUE,A.EXECUTION_ORDER,A.EXPECTED_VALUE2,A.POSITION,A.PROFILE_ID from XH_PROFILE_DERIVATION_RULES A, xh_element_crossref B");

			hashMap.put("VIEWXHPROTOCOLLINKDERVNRULES","select B.ELEMENT_ID,B.ELEMENT_NAME,A.DERIVATION_TYPE,B.IN_USE_YN,A.CONDITION_EXP1_VAL,A.EXPECTED_VALUE,A.EXECUTION_ORDER,A.EXPECTED_VALUE2,A.POSITION,A.PROTOCOL_ID from XH_PROTOCOL_LINK_DERVN_RULES A, xh_element_crossref B");
			hashMap.put("VIEWXHAPPLDERIVATIONRULES","select B.ELEMENT_ID,B.ELEMENT_NAME,A.DERIVATION_TYPE,B.IN_USE_YN,A.CONDITION_EXP1_VAL,A.EXPECTED_VALUE,A.EXECUTION_ORDER,A.EXPECTED_VALUE2,A.POSITION,A.APPLICATION_ID,A.PROFILE_ID from xh_appl_derivation_rules A, xh_element_crossref B");
			hashMap.put("VIEWXHFILTERGROUP","select APPLICATION_ID,FACILITY_ID,MESSAGE_TYPE,EVENT_TYPE,PROTOCOL_LINK,FILTER_GROUP_CODE,FILTER_GROUP_DESC,TOTAL_LEVELS from XH_FILTER_GROUP");

		// code added by lakshman
		  hashMap.put("VIEWQUERY1",
          "SELECT APPLICATION_ID,QUERY_ID,FACILITY_ID,TO_CHAR(QUERY_DATE,'DD/MM/YYYY HH:MI:SS'),QUERY_TYPE,          QUERY_PRIORITY,PROCESS_ID, QUERY_STATUS,TO_CHAR(LAST_PROC_START_TIME,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(LAST_PROC_END_TIME,'DD/MM/YYYY HH:MI:SS'),ADDED_BY_ID,MODIFIED_BY_ID, 		  QUERY_TEXT,STATUS_TEXT,TO_CHAR(ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'),ADDED_AT_WS_NO,ADDED_FACILITY_ID,MODIFIED_AT_WS_NO,MODIFIED_FACILITY_ID,EVENT_TYPE,ACCESSION_NUMBER,SITE_ID FROM XH_APPLICATION_QUERY_OB WHERE APPLICATION_ID=NVL('#qapplname',APPLICATION_ID) AND  FACILITY_ID=NVL('#qfacility',FACILITY_ID) AND  QUERY_STATUS=NVL('#qstatus',QUERY_STATUS)  AND TO_CHAR(QUERY_DATE,'DD/MM/YYYY')BETWEEN  NVL('#qmsg_dt1', TO_CHAR(QUERY_DATE,'DD/MM/YYYY'))  AND NVL('#qmsg_dt2',TO_CHAR(QUERY_DATE,'DD/MM/YYYY')) ORDER BY #orderbycolumns "+ "#sortMode");

		  hashMap.put("VIEWQUERY2",
          "SELECT APPLICATION_ID,QUERY_ID,FACILITY_ID,TO_CHAR(QUERY_DATE,'DD/MM/YYYY HH:MI:SS'),QUERY_TYPE,          QUERY_PRIORITY,PROCESS_ID,QUERY_STATUS,TO_CHAR(LAST_PROC_START_TIME,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(LAST_PROC_END_TIME,'DD/MM/YYYY HH:MI:SS'),ADDED_BY_ID,MODIFIED_BY_ID, 		  QUERY_TEXT,STATUS_TEXT,TO_CHAR(ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'),ADDED_AT_WS_NO,ADDED_FACILITY_ID,MODIFIED_AT_WS_NO,MODIFIED_FACILITY_ID,EVENT_TYPE,ACCESSION_NUMBER,SITE_ID FROM XH_APPLICATION_QUERY  ORDER BY #orderbycolumns "+ "#sortMode");

		  hashMap.put("VIEWQUERY3",
          "SELECT APPLICATION_ID,QUERY_ID,FACILITY_ID,TO_CHAR(QUERY_DATE,'DD/MM/YYYY HH:MI:SS'),QUERY_TYPE,           QUERY_PRIORITY,PROCESS_ID, QUERY_STATUS,TO_CHAR(LAST_PROC_START_TIME,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(LAST_PROC_END_TIME,'DD/MM/YYYY HH:MI:SS'),ADDED_BY_ID,MODIFIED_BY_ID, 		  QUERY_TEXT,STATUS_TEXT,TO_CHAR(ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'),ADDED_AT_WS_NO,ADDED_FACILITY_ID,MODIFIED_AT_WS_NO,MODIFIED_FACILITY_ID,EVENT_TYPE,ACCESSION_NUMBER,SITE_ID FROM XH_APPLICATION_QUERY_OB  ORDER BY #orderbycolumns "+ "#sortMode");

		hashMap.put("NEWARRAIVALITEM","select XI_ITEM_CODE,XI_ITEM_DESCRIPTION,XI_ITEM_CATEGORY_CODE,TO_CHAR(TRX_DATE,'DD/MM/YYYY HH24:MI'),XI_ORGANIZATION_ID from XI_ITEM");

	//	Administrator Inb/Outbound - Interactive - Cmmntd on 07/8/2009
	/*	hashMap.put("VIEWXHINTERACTIVE","select MESSAGE_ID,ACK_MESSAGE_ID,APPLICATION_ID,  FACILITY_ID, REQUEST_DATE,  EVENT_TYPE, PATIENT_ID, MERGED_PATIENT_ID, EPISODE_TYPE, ENCOUNTER_ID, ACCESSION_NUM, EXT_ACCESSION_NUM,   PROFILE_ID, ADDED_BY_ID, ADDED_DATE,  MODIFIED_BY_ID, MODIFIED_DATE, ADDED_AT_WS_NO, ADDED_FACILITY_ID, MODIFIED_AT_WS_NO, MODIFIED_FACILITY_ID, TRX_NO,MESSAGE_DATE, MODULE_ID, PGM_ID, USER_ID,  SESSION_ID,REJEACTED_REASON,PROCESS_ID  from XH_INTERACTIVE_INTEGRATION"); */
	//	Administrator Inb/Outbound - Interactive 
		hashMap.put("VIEWXHINTERACTIVE","select a.MESSAGE_ID,a.ACK_MESSAGE_ID,a.APPLICATION_ID,  a.FACILITY_ID, a.REQUEST_DATE,  a.EVENT_TYPE, a.PATIENT_ID, a.MERGED_PATIENT_ID, a.EPISODE_TYPE, a.ENCOUNTER_ID, a.ACCESSION_NUM, a.EXT_ACCESSION_NUM,   a.PROFILE_ID, a.ADDED_BY_ID, a.ADDED_DATE,  a.MODIFIED_BY_ID, a.MODIFIED_DATE, a.ADDED_AT_WS_NO, a.ADDED_FACILITY_ID, a.MODIFIED_AT_WS_NO, a.MODIFIED_FACILITY_ID, a.TRX_NO,a.MESSAGE_DATE, a.MODULE_ID, a.PGM_ID, a.USER_ID,  a.SESSION_ID,a.REJEACTED_REASON,a.PROCESS_ID,a.PROTOCOL_LINK_ID,b.APPLICATION_NAME , b.FACILITY_NAME, a.ERROR_TEXT  from ");	

		hashMap.put("VIEWINTERFACESTANDARD","select PROFILE_ID,STANDARD_CODE,SHORT_DESC,LONG_DESC,VERSION_SPECIFIC,VERSION_DESC,GEOGRAPHY_SPECIFIC,GEOGRAPHY_DESC,APPLICATION_SPECIFIC,APPLICATION_ID,SITE_SPECIFIC,SITE_ID,EFF_STATUS from  xh_standard_profile");

		hashMap.put("VIEWINTERFACESTANDARDSCTRL","select A.SEGMENT_ID,A.ELEMENT_ID,A.ELEMENT_SEQUENCE,A.DEFAULT_VALUE,A.STANDARD_CODE,B.ELEMENT_NAME,A.CONTROL_ELEMENT_ID,C.ELEMENT_DESC,D.SEGMENT_NAME from xh_standard_control_seg A,XH_ELEMENT_CROSSREF B ,XH_CONTROL_ELEMENT C,XH_SEGMENT D ");

		// Key for Debug log functionality (Trace function)
		hashMap.put("VIEW_TRACE_EVENTS","SELECT pgm_id,text,rx_date,machineid FROM xh_trace");
        
		// FIltreing and Scheduling
		hashMap.put("VIEWXHFILTERANDSCDHULINGLEVEL","select FILTER_GROUP_CODE,FILTER_LEVEL1_TYPE,FILTER_LEVEL1_SUBTYPE,FILTER_LEVEL1_CODE,FILTER_LEVEL1_VALUE,FILTER_LEVEL2_TYPE,FILTER_LEVEL2_SUBTYPE,FILTER_LEVEL2_CODE,FILTER_LEVEL2_VALUE,FILTER_LEVEL3_TYPE,FILTER_LEVEL3_SUBTYPE,FILTER_LEVEL3_CODE,FILTER_LEVEL3_VALUE,FILTER_LEVEL4_TYPE,FILTER_LEVEL4_SUBTYPE,FILTER_LEVEL4_CODE,FILTER_LEVEL4_VALUE,FILTER_LEVEL5_TYPE,FILTER_LEVEL5_SUBTYPE,FILTER_LEVEL5_CODE,FILTER_LEVEL5_VALUE,FILTER_LEVEL6_TYPE,FILTER_LEVEL6_SUBTYPE,FILTER_LEVEL6_CODE,FILTER_LEVEL6_VALUE,FILTER_LEVEL7_TYPE,FILTER_LEVEL7_SUBTYPE,FILTER_LEVEL7_CODE,FILTER_LEVEL7_VALUE,FILTER_LEVEL8_TYPE,FILTER_LEVEL8_SUBTYPE,FILTER_LEVEL8_CODE,FILTER_LEVEL8_VALUE,FILTER_LEVEL9_TYPE,FILTER_LEVEL9_SUBTYPE,FILTER_LEVEL9_CODE,FILTER_LEVEL9_VALUE,TRX_NO from XH_APPL_FILTER_RULE_DETAIL");

        //Added by prithivi for eNotification Requiredment
		hashMap.put("ENOTIFYFIL", "SELECT 1 FROM mr_term_code b WHERE filter_level1_subtype = b.term_code AND UPPER (short_desc) LIKE upper('%#subTypeDesc%')");
		
        // Filter Configration
		hashMap.put("VIEWXHFILTERGROUPWISELEVEL","select FILTER_GROUP_CODE,LEVEL_NUMBER,FILTER_ELEMENT_TYPE,FILTER_ELEMENT_TYPE_DESC,FILTER_SUBTYPE_CODE,FILTER_SUBTYPE_DESC,ELEMENT_CODE_NAME, TYPE_QUERY,SUBTYPE_QUERY,LOOKUP_QUERY from XH_FILTER_LEVEL_CONFIG order by 2");

		hashMap.put("VIEWXHAPPLVALIDATIONRULES","select B.ELEMENT_ID,B.ELEMENT_NAME,A.validation_TYPE,B.IN_USE_YN,A.CONDITION_EXP1_VAL,A.Action,A.EXECUTION_ORDER,A.error_text,A.POSITION,A.APPLICATION_ID,A.FACILITY_ID,A.EVENT_TYPE,A.SEGMENT_ID,A.EFF_STATUS from xh_appl_validation_rules A, xh_element_crossref B");

		hashMap.put("VIEWADMINQUERYINITIATE", 
          "SELECT A.APPLICATION_ID,A.QUERY_ID,A.FACILITY_ID,TO_CHAR(A.QUERY_DATE,'DD/MM/YYYY HH:MI:SS'),A.QUERY_TYPE,A.QUERY_PRIORITY,A.PROCESS_ID, A.QUERY_STATUS,TO_CHAR(A.LAST_PROC_START_TIME,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(A.LAST_PROC_END_TIME,'DD/MM/YYYY HH:MI:SS'),A.ADDED_BY_ID,A.MODIFIED_BY_ID,  A.QUERY_TEXT,A.STATUS_TEXT,TO_CHAR(A.ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(A.MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'), A.ADDED_AT_WS_NO,A.ADDED_FACILITY_ID,A.MODIFIED_AT_WS_NO,A.MODIFIED_FACILITY_ID,A.EVENT_TYPE,A.ACCESSION_NUMBER,A.SITE_ID,A.PROTOCOL_LINK_ID,B.APPLICATION_NAME, B.FACILITY_NAME FROM XH_APPLICATION_QUERY_OB A,XH_APPLICATION_LANG_VW B  WHERE  A.APPLICATION_ID=NVL('#qapplname',A.APPLICATION_ID) AND  A.FACILITY_ID=NVL('#qfacility',A.FACILITY_ID) AND  A.QUERY_STATUS=NVL('#qstatus',A.QUERY_STATUS) AND TO_DATE(A.QUERY_DATE) BETWEEN TO_DATE(NVL('#qmsg_dt1',TO_CHAR(A.QUERY_DATE,'dd/mm/yyyy')),'dd/mm/yyyy') AND TO_DATE(NVL('#qmsg_dt2',TO_CHAR(A.QUERY_DATE,'dd/mm/yyyy')),'dd/mm/yyyy') and  A.APPLICATION_ID=B.APPLICATION_ID ORDER BY #orderbycolumns "+ "#sortMode");
		
//	    Cmmnts on M21
//		hashMap.put("VIEWADMINQUERYPROCESS",
//			"SELECT A.APPLICATION_ID,A.QUERY_ID,A.FACILITY_ID,TO_CHAR(A.QUERY_DATE,'DD/MM/YYYY HH:MI:SS'),A.QUERY_TYPE,	 A.QUERY_PRIORITY,A.PROCESS_ID, A.QUERY_STATUS,TO_CHAR(A.LAST_PROC_START_TIME,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(A.LAST_PROC_END_TIME,'DD/MM/YYYY HH:MI:SS'),A.ADDED_BY_ID,A.MODIFIED_BY_ID,  A.STATUS_TEXT,TO_CHAR(A.ADDED_DATE,'DD/MM/YYYY HH:MI:SS'),TO_CHAR(A.MODIFIED_DATE,'DD/MM/YYYY HH:MI:SS'), A.ADDED_AT_WS_NO,A.ADDED_FACILITY_ID,A.MODIFIED_AT_WS_NO,A.MODIFIED_FACILITY_ID,A.EVENT_TYPE,A.ACCESSION_NUMBER,A.SITE_ID,A.PROTOCOL_LINK_ID,B.APPLICATION_NAME, B.FACILITY_NAME,A.APP_MSG, A.ERR_MSG,C.MESSAGE_STATUS FROM XH_APPLICATION_LANG_VW B,xh_application_message c, ");     	

hashMap.put("VIEWADMINQUERYPROCESS",
          "SELECT A.APPLICATION_ID,A.QUERY_ID,A.FACILITY_ID,TO_CHAR(A.QUERY_DATE,'DD/MM/YYYY HH:MI:SS'),A.QUERY_TYPE,"+
		  //" DECODE(QUERY_PRIORITY,'I','Immediate','D','Defered'),"+
          " A.QUERY_PRIORITY,A.PROCESS_ID,"+
          //" DECODE(QUERY_STATUS,'S','Successful','R','Rejected','F','Failure','A','All'),"+ 
          " A.QUERY_STATUS,TO_CHAR(A.LAST_PROC_START_TIME,'DD/MM/YYYY HH24:MI:SS'),TO_CHAR(A.LAST_PROC_END_TIME,'DD/MM/YYYY HH24:MI:SS'),A.ADDED_BY_ID,A.MODIFIED_BY_ID, "+
		  " A.STATUS_TEXT,TO_CHAR(A.ADDED_DATE,'DD/MM/YYYY HH24:MI:SS'),TO_CHAR(A.MODIFIED_DATE,'DD/MM/YYYY HH24:MI:SS'),"+
		  " A.ADDED_AT_WS_NO,A.ADDED_FACILITY_ID,A.MODIFIED_AT_WS_NO,A.MODIFIED_FACILITY_ID,A.EVENT_TYPE,A.ACCESSION_NUMBER,A.SITE_ID,A.PROTOCOL_LINK_ID,B.APPLICATION_NAME, d.FACILITY_NAME,"+
		  "c.EVENT_NAME, XP.PROTOCOL_LINK_NAME,A.MESSAGE_STATUS,A.MESSAGE_ID FROM XH_APPLICATION_LANG_VW B,SM_FACILITY_PARAM d,XH_PROTOCOL_LINK XP,xh_event_type c ");



//  QUERY FOR VIEW AUDIT LOG OFFLINE
   hashMap.put("VIEWAUDITLOGOFFLINE",
			   "SELECT x.message_id, x.facility_id, y.facility_name,"+
			   " x.process_date_time, x.event_type,"+
			   " x.process_id, x.processed_by,"+
			   " x.end_date_time, x.comm_retries,"+
			   " x.status, x.status_text, x.MESSAGE_TEXT"+
		  " FROM #tableName x,"+
			   " sm_facility_param_lang_vw y,"+
			   " xh_event_type c"+
		" WHERE x.application_id = NVL ('#appl_name', x.application_id)"+
		   " AND x.facility_id = NVL ('#facility', x.facility_id)"+
		   " AND x.message_id = NVL ('#msg_id', x.message_id)"+
		   " AND x.event_type = c.event_type"+
		   " AND c.MESSAGE_TYPE = NVL ('#msg_type', c.MESSAGE_TYPE)"+
		   " AND x.event_type = NVL ('#event_type', x.event_type)"+
		   " AND TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss') BETWEEN NVL ('#amsg_dt1', TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss')) AND NVL ('#amsg_dt2', TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss') + 0.99999)"+
		   " AND x.facility_id = y.facility_id"+
		   " AND y.language_id = NVL ('#locale', y.language_id)"+
		   " ORDER BY #orderbycolumns "+"#sortMode");
	
	//  QUERY FOR VIEW AUDIT LOG PURGE
   hashMap.put("VIEWAUDITLOGPURGE",
			   "SELECT x.message_id, x.facility_id, y.facility_name,"+
			   " x.process_date_time, x.event_type,"+
			   " x.process_id, x.processed_by,"+
			   " x.end_date_time, x.comm_retries,"+
			   " x.status, x.status_text, x.MESSAGE_TEXT"+
		  " FROM #tableName x,"+
			   " sm_facility_param_lang_vw y,"+
			   " xh_event_type c"+
		" WHERE x.application_id = NVL ('#appl_name', x.application_id)"+
		   " AND x.facility_id = NVL ('#facility', x.facility_id)"+
		   " AND x.message_id = NVL ('#msg_id', x.message_id)"+
		   " AND x.event_type = c.event_type"+
		   " AND c.MESSAGE_TYPE = NVL ('#msg_type', c.MESSAGE_TYPE)"+
		   " AND x.event_type = NVL ('#event_type', x.event_type)"+
		   " AND TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss') BETWEEN NVL ('#amsg_dt1', TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss')) AND NVL ('#amsg_dt2', TO_DATE (x.process_date_time, 'DD/MM/YYYY hh24:mi:ss') + 0.99999)"+
		   " AND x.facility_id = y.facility_id"+
		   " AND y.language_id = NVL ('#locale', y.language_id)"+
		   " ORDER BY #orderbycolumns "+"#sortMode");
   hashMap.put("INVENTORY_MONITORING_SCR", "SELECT * FROM ");
   hashMap.put("NOTIFICATION_RECIPIENT_ID", "SELECT short_desc, long_desc, communication_mode, contact_type_code, country_code, to_mail_id_s, cc_mail_id_s, bcc_mail_id_s, to_phone_number_s, to_alt_phonenumber_s, to_alt_mobilenumber_s, to_mobile_number_s, to_fax_number_s, from_maild, recipient_id FROM xm_recipient_id WHERE recipient_id like upper('#recipientID%') AND short_desc like upper('%#shortDesc%')");
   hashMap.put("NOTIFICATION_TYPE_SETUP", "SELECT short_desc, type_class, eff_status, type_code FROM xm_notification_type_code WHERE type_code like upper('#typeCode%') AND short_desc like upper('%#shortDesc%')");
   hashMap.put("NOTIFICATION_CONSENT", "SELECT patient_id, receipient_type, receipient_dependency, contact_type, contact_mode, eff_status, sms_events, mail_events, language_id FROM xm_event_notify_recipients_pat WHERE patient_id like '#patientID%'");
   hashMap.put("QMS_RD_COUNTER_SETUP", "SELECT x.section_code, rds.short_desc sec_desc, counter_name, service_no, study_location, rdc.short_desc study_loc_desc, x.facility_id, facility_name FROM xh_rd_servicecounter x, sm_facility_param s, rd_section_lang_vw rds, rd_clinic_lang_vw rdc WHERE x.section_code like upper('%#sectionCode%') AND x.study_location like upper('%#studyLocation%') AND x.facility_id like upper('%#facilityID%') AND x.section_code = rds.section_code AND rds.language_id = '#locale' AND x.study_location = rdc.clinic_code AND rdc.language_id = '#locale' AND x.facility_id = s.facility_id AND s.facility_id = rdc.operating_facility_id");
   hashMap.put("NOTIFICATION_RECIPIENTS_TYPE", "SELECT recipient_id code, short_desc description FROM xm_recipient_id ORDER BY short_desc");
   hashMap.put("DMS_SIMULATOR_DISP", "SELECT document_id, patient_id, ENCOUNTER_ID, DOCUMENT_TYPE, DOC_FILE_NAME FROM XH_EXTERNAL_APP_SIMULATOR WHERE document_id = NVL('#documentID',DOCUMENT_ID) AND PATIENT_ID = NVL('#patientID', patient_id) AND ENCOUNTER_ID = NVL('#encounterID', ENCOUNTER_ID)");

  /* hashMap.put("PAYERELIGIBILITYCHECK","SELECT a.PATIENT_ID,a.ENCOUNTER_ID,a.EPISODE_TYPE,a.ENC_REGN_DATE_TIME,e.ATTEND_PRACTITIONER_ID,e.ASSIGN_CARE_LOCN_TYPE,e.ASSIGN_CARE_LOCN_CODE,substr(GET_LOCN_DESC(e.FACILITY_ID, e.ASSIGN_CARE_LOCN_TYPE, e.ASSIGN_CARE_LOCN_CODE),1, INSTR(GET_LOCN_DESC(e.FACILITY_ID, e.ASSIGN_CARE_LOCN_TYPE, e.ASSIGN_CARE_LOCN_CODE),'*',1)-1) LOCN_DESC,a.ACCT_SEQ_NO,c.PATIENT_NAME,nvl(c.NATIONAL_ID_NO, c.ALT_ID1_NO) NATIONAL_IQAMA_ID,to_char(c.DATE_OF_BIRTH,'YYYY-MM-DD') DATE_OF_BIRTH,CONTACT1_NO,a.MEMBERSHIP_NO,c.PATIENT_NAME,a.POLICY_NUMBER,to_char(a.POLICY_START_DATE,'DD-MM-YYYY'),to_char(a.POLICY_EXPIRY_DATE,'DD-MM-YYYY'),to_char(a.EFFECTIVE_FROM,'DD-MM-YYYY'),to_char(a.EFFECTIVE_TO,'DD-MM-YYYY'),a.CUST_GROUP_CODE,a.CUST_CODE,a.PRIORITY,a.SETTLEMENT_IND,a.POLICY_TYPE_CODE,a.BLNG_GRP_ID,B.LONG_NAME CUST_NAME,d.short_desc payer_group_desc,e.patient_class, e.service_code, c.sex, f.short_desc service_desc,G.SHORT_DESC policy_desc,h.SHORT_DESC blng_grp_desc,A.OPERATING_FACILITY_ID,A.EPISODE_ID,A.VISIT_ID,A.INT_TRANSACTION_ID,to_char(A.INT_RESPONSE_DATE_TIME,'DD/MM/YYYY hh24:mi:ss'), A.INT_RESPONSE_CODE, A.INT_ELGIBILITY_CODE, A.INT_VALIDITY_TYPE, A.INT_ERROR_MSG, A.INT_REMARKS,A.INT_VALIDITY_UNTIL FROM BL_ENCOUNTER_PAYER_PRIORITY a, AR_CUSTOMER B, MP_PATIENT C, AR_CUST_GROUP d, PR_ENCOUNTER e , AM_SERVICE f, bl_ins_policy_types g, bl_blng_grp h "); */


  /* hashMap.put("PAYERELIGIBILITYCHECK","SELECT a.PATIENT_ID,a.ENCOUNTER_ID,a.EPISODE_TYPE,a.ENC_REGN_DATE_TIME,e.ATTEND_PRACTITIONER_ID,e.ASSIGN_CARE_LOCN_TYPE,e.ASSIGN_CARE_LOCN_CODE,substr(GET_LOCN_DESC(e.FACILITY_ID, e.ASSIGN_CARE_LOCN_TYPE, e.ASSIGN_CARE_LOCN_CODE),1, INSTR(GET_LOCN_DESC(e.FACILITY_ID, e.ASSIGN_CARE_LOCN_TYPE, e.ASSIGN_CARE_LOCN_CODE),'*',1)-1) LOCN_DESC,a.ACCT_SEQ_NO,c.PATIENT_NAME,nvl(c.NATIONAL_ID_NO, c.ALT_ID1_NO) NATIONAL_IQAMA_ID,to_char(c.DATE_OF_BIRTH,'YYYY-MM-DD') DATE_OF_BIRTH,CONTACT1_NO,a.MEMBERSHIP_NO,c.PATIENT_NAME,a.POLICY_NUMBER,to_char(a.POLICY_START_DATE,'DD-MM-YYYY'),to_char(a.POLICY_EXPIRY_DATE,'DD-MM-YYYY'),to_char(a.EFFECTIVE_FROM,'DD-MM-YYYY'),to_char(a.EFFECTIVE_TO,'DD-MM-YYYY'),a.CUST_GROUP_CODE,a.CUST_CODE,a.PRIORITY,a.SETTLEMENT_IND,a.POLICY_TYPE_CODE,a.BLNG_GRP_ID,B.LONG_NAME CUST_NAME,d.short_desc payer_group_desc,e.patient_class, e.service_code, c.sex, f.short_desc service_desc,G.SHORT_DESC policy_desc,h.SHORT_DESC blng_grp_desc,A.OPERATING_FACILITY_ID,A.EPISODE_ID,A.VISIT_ID,A.INT_TRANSACTION_ID,to_char(A.INT_RESPONSE_DATE_TIME,'DD/MM/YYYY hh24:mi:ss'), A.INT_RESPONSE_CODE, A.INT_ELGIBILITY_CODE, A.INT_VALIDITY_TYPE, A.INT_ERROR_MSG, A.INT_REMARKS,A.INT_VALIDITY_UNTIL FROM BL_ENCOUNTER_PAYER_PRIORITY a, AR_CUSTOMER B, MP_PATIENT C, AR_CUST_GROUP d, PR_ENCOUNTER e , AM_SERVICE f, bl_ins_policy_types g, bl_blng_grp h "); */

  hashMap.put("PAYERELIGIBILITYCHECK","select * FROM xh_elg_chk_message_vw ");

   hashMap.put("PRINTITEMBARCODE", "select FACILITY_ID,DOC_TYPE_CODE,DOC_NO,to_char(DOC_DATE,'DD-MON-YYYY') DOC_DATE,DOC_REF SAPGRNNO,a.IBA_DOC_NUM HISGRNNO,a.ITEM_CODE,b.SHORT_DESC,a.BATCH_ID,GRN_ITEM_QTY,to_char(EXPIRY_DATE, 'DD-MON-YYYY') EXPIRY_DATE,a.XI_BARCODE_ID from xi_trn_grn a, mm_item b ");
   //adding comment to commit

    hashMap.put("PAYERELIGIBILITYCHECK","select * FROM xh_hswitch_message_vw ");

   /* hashMap.put("MEDIKREDITELIGIBILITYCHECK","SELECT * FROM xf_insurance_vw WHERE (((cust_code BETWEEN NVL (#p_customer, cust_code) AND NVL (#p_customer_to, cust_code)) AND (   (#encounterId IS NOT NULL AND encounter_id = #encounterId) OR #encounterId IS NULL) AND ((#patientId IS NOT NULL AND patient_id = #patientId) OR #patientId IS NULL) AND (facility_id = #facilityId) AND (   (#episodeType = 'IP' AND episode_type IN ('I', 'D')) OR (#episodeType = 'OP' AND episode_type IN ('O', 'E')) ) AND (   (    #visit_date_from IS NOT NULL AND #visit_date_to IS NOT NULL AND TRUNC (start_encounter) BETWEEN TRUNC (TO_DATE (#visit_date_from)) AND TRUNC (TO_DATE (#visit_date_to)) ) OR (#visit_date_from IS NULL AND #visit_date_to IS NULL)) AND (   (    #bill_doc_type_from IS NOT NULL AND bill_doc_type_code = #bill_doc_type_from) OR #bill_doc_type_from IS NULL) AND ( (  #bill_doc_num_from IS NOT NULL AND #bill_doc_num_to IS NOT NULL AND #bill_doc_type_from IS NOT NULL AND bill_doc_num BETWEEN NVL (#bill_doc_num_from, 1) AND NVL (#bill_doc_num_to, 99999999)) OR (#bill_doc_type_from IS NULL)))) "); */

   //hashMap.put("MEDIKREDITELIGIBILITYCHECK","SELECT * FROM xf_insurance_vw ");

   hashMap.put("MEDIPREADMISSIONELIGIBILITYCHECK","SELECT * FROM xf_insurance_vw ");   

   /*

   hashMap.put("ONADMISSIONELIGIBILITYCHECK","Select b.FACILITY_ID, b.PATIENT_ID, b.episode_id,  a.PATIENT_NAME, a.SEX, a.NATIONAL_ID_NO, b.PATIENT_CLASS, to_char(b.visit_adm_date_time,'DD/MM/YYYY hh24:mi:ss') visit_adm_date_time, b.ASSIGN_CARE_LOCN_TYPE, b.ASSIGN_CARE_LOCN_CODE, b.SERVICE_CODE, b.SPECIALTY_CODE, c.CUST_CODE, A.FIRST_NAME, A.SECOND_NAME, A.NAME_PREFIX, to_char(A.DATE_OF_BIRTH,'DD/MM/YYYY') DATE_OF_BIRTH, D.MEMBERSHIP_NUM, D.WCA_NUMBER, D.DEPENDENT_NUM, D.DEPENDENT_RELATIONSHIP,A.FAMILY_NAME,  e.LONG_DESC Speciality_desc, f.LONG_DESC service_desc, g.LONG_NAME customer_name, DESTINATION_CODE_SAP, c.episode_type, b.op_episode_visit_num ,  d.request_status, d.authorization_num, nvl(d.approval_status,'') approval_status, nvl(d.warn_code,'') warn_code,  nvl(d.warn_desc,'') warn_desc from MP_PATIENT a, PR_ENCOUNTER b, bl_episode_fin_dtls c, XF_ECLAIMS_TRX_HDR d, am_speciality e, am_service f, ar_customer g ");

   hashMap.put("PREADMISSIONELIGIBILITYCHECK","SELECT a.pref_facility_id facility_id, a.patient_id, NULL episode_id, a.patient_name, a.sex, a.national_id_no, NULL patient_class, NULL visit_adm_date_time, NULL assign_care_locn_type, NULL assign_care_locn_code, NULL service_code, NULL specialty_code, c.cust_code, a.first_name, a.second_name,a.NAME_PREFIX, to_char(A.DATE_OF_BIRTH,'DD/MM/YYYY') DATE_OF_BIRTH, D.MEMBERSHIP_NUM, D.WCA_NUMBER, D.DEPENDENT_NUM, D.DEPENDENT_RELATIONSHIP, a.family_name, NULL Speciality_desc, NULL service_desc, g.LONG_NAME customer_name, DESTINATION_CODE_SAP, NULL episode_type, NULL op_episode_visit_num, d.request_status, d.authorization_num, nvl(d.approval_status,'') approval_status, nvl(d.warn_code,'') warn_code,  nvl(d.warn_desc,'') warn_desc  FROM mp_patient a, bl_patient_fin_dtls c, xf_eclaims_trx_hdr d, ar_customer g ");

   */

   hashMap.put("ONADMISSIONELIGIBILITYCHECK"," Select * from XF_ECLAIMS_ADMISSION_QUERY_VW ");

   hashMap.put("PREADMISSIONELIGIBILITYCHECK","SELECT * from XF_ECLAIMS_PREADMISSION_VW ");
    
   hashMap.put("MEDICLAIMSCHECK","Select * from XF_ECLAIMS_PATIENT_DETAILS_VW");

   //hashMap.put("ELIGIBILITYCHECKQUERY","SELECT b.FACILITY_ID, b.PATIENT_ID, b.EPISODE_ID, a.PATIENT_NAME, a.SEX, a.NATIONAL_ID_NO, b.PATIENT_CLASS,TO_CHAR (d.MODIFIED_DATE, 'DD/MM/YYYY hh24:mi:ss') TRANS_DATE_TIME,b.ASSIGN_CARE_LOCN_TYPE, b.ASSIGN_CARE_LOCN_CODE, b.SERVICE_CODE, b.SPECIALTY_CODE, a.FIRST_NAME, a.SECOND_NAME,a.NAME_PREFIX, TO_CHAR (a.DATE_OF_BIRTH, 'DD/MM/YYYY') DATE_OF_BIRTH,d.MEMBERSHIP_NUM, d.WCA_NUMBER, d.DEPENDENT_NUM,d.DEPENDENT_RELATIONSHIP, a.FAMILY_NAME,d.DESTINATION_CODE, d.APPROVAL_STATUS, d.SRL_NO, d.VISIT_ID,d.ADDED_BY_ID, b.ENCOUNTER_ID, d.REQUEST_STATUS, d.EVENT_TYPE,d.CUST_CODE,d.TRANS_TYPE,d.DOC_NUM,d.DOC_TYPE_CODE, d.APPR_GROSS_AMOUNT,TO_CHAR (b.visit_adm_date_time,'DD/MM/YYYY hh24:mi:ss') visit_adm_date_time, e.STATUS_DESC FROM MP_PATIENT a, PR_ENCOUNTER b, XF_ECLAIMS_TRX_HDR d, XH_TRANS_STATUS e  ");
   hashMap.put("ELIGIBILITYCHECKQUERY","SELECT * from XF_ECLAIMS_QUERY_RESULT_VW ");

    
   hashMap.put("MEDICLAIMSCHECKQUERY","Select * from XF_ECLAIMS_PATIENT_DETAILS_VW");

   hashMap.put("MEDICLAIMSBATCHPROCESS","Select * from XF_ECLAIMS_BATCH_QUERY_VW ");

   hashMap.put("MEDICLAIMSERAPROCESS","Select * from XF_ERA_CLAIM_DETAILS_VW ");
  }

	/**
	 * Static method which return the query string depending on passed query id  
	 * @param  String id  
	 * @return String  
	 */
  public synchronized static String getSQL(String id)
  {
    return((String)hashMap.get(id));
  }

  /**
	 * Static method which returns the columnDelimiter 
	 * @return String  
	 */

  public synchronized static String getDelimiter()
  {
    return(columnDelimiter);
  }
  
 
}//end of class
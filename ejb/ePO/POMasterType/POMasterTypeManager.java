/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
package ePO.POMasterType;
import javax.ejb.SessionContext;
import javax.ejb.EJBException;
import eCommon.Common.*;
import ePO.Common.PoEJBSessionAdapter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

/**  
*
* @ejb.bean
*	name="POMasterTypeManager" 
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="POMasterType"
*	local-jndi-name="POMasterType"
*	impl-class-name="ePO.POMasterType.POMasterTypeManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="ePO.POMasterType.POMasterTypeLocal"
*	remote-class="ePO.POMasterType.POMasterTypeRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="ePO.POMasterType.POMasterTypeLocalHome"
*	remote-class="ePO.POMasterType.POMasterTypeHome"
*	generate= "local,remote"
*
*
*/


public class  POMasterTypeManager extends PoEJBSessionAdapter {
//	public SessionContext context = null;
	public void setSessionContext( SessionContext sessionContext) {
		super.setSessionContext(sessionContext);
		this.context = sessionContext;
	}
	///Function for handling generic operation..
	//String SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE;	

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap insert(HashMap hmData, HashMap hmSQL)	{
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql =	"";
		ArrayList alData = null;
		ArrayList alRecord = null;
		Properties properties = null;
//		int      sizeOfTrn		=	1;
		int      trnRecords		=	1;

		boolean isUpdateSuccessful = true;
	//	boolean isDocNoAutoGenerated	=	false;
	//	int iResult = 0;
		int failedRecordIndex = -1;
		int[] iaResult = null;
	//	int sResult = 0;
		hmReturn.put(RESULT,FALSE);

			System.out.flush();

		try {
			properties =	(Properties) hmData.get("properties");
			connection = getConnection(properties);
			connection.setAutoCommit(false);

			alData =	(ArrayList) hmData.get("InsertDTLData");

			sql = (String) hmSQL.get	("InsertDTLSQL");

			preparedStatement = connection.prepareStatement(sql);
				
				trnRecords = alData.size();

				for (int index = 0; index < trnRecords; index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				try{
				iaResult = preparedStatement.executeBatch();
				}catch(SQLException exception){						

				hmReturn.put(RESULT,FALSE);
				if(exception.getErrorCode()==1){
					hmReturn.put(MSGID,CODE_ALREADY_EXISTS); 
					hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
				}else {
					hmReturn.put(MESSAGE,exception.toString());
				}
				connection.rollback();
				return hmReturn;

				}
				if(preparedStatement!=null)
						preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
				}

				sql = null;
				alData =null;

				alData =	(ArrayList) hmData.get("InsertCOMMNTData");				
				sql = (String)	hmSQL.get	("InsertCOMMNTSQL");
				
				if(alData !=null) {
				
					preparedStatement = connection.prepareStatement(sql);
					
					trnRecords = alData.size();

					for (int index = 0; index < trnRecords; index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					try{
					iaResult = preparedStatement.executeBatch();
					}catch(SQLException exception){
						hmReturn.put(RESULT,FALSE);
						if(exception.getErrorCode()==1){
							hmReturn.put(MSGID,CODE_ALREADY_EXISTS); 
							hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
						}else {
							hmReturn.put(MESSAGE,exception.toString());
						}
						connection.rollback();
						return hmReturn;
					}
					if(preparedStatement!=null)
							preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting Commitment record " + failedRecordIndex);
					}

				}
			
				// After successful insertion and updation 

				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_INSERTED);
				if (connection!=null) {
						closeConnection(connection,properties);	
				}
		}catch(SQLException sqlException) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				if(sqlException.getErrorCode()==1) {
					hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
					hmReturn.put(MSGID,CODE_ALREADY_EXISTS);

				}
				else {
					hmReturn.put(MESSAGE,sqlException.toString());
					hmReturn.put(MSGID,sqlException.toString());
				}
				sqlException.printStackTrace();
			}
			catch (Exception exception) {
				exception.printStackTrace(); 
			}
        }
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				hmReturn.put(MSGID,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace(); 
			}
        }
		finally{
			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				if (connection!=null) {
					closeConnection(connection,(Properties)hmData.get(properties));	
				}
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		} 
	
		//hmReturn.put("doc_no",doc_no);

		return hmReturn;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap modify(HashMap hmData, HashMap hmSQL)	 {
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		ArrayList alData =	new ArrayList();
		ArrayList alRecord =	new ArrayList();
		Properties properties = null;
		String sql =	"";
		//int iResult =	0;
		int failedRecordIndex = -1;
	
		int iaResult[] = null;
	//	int sResult = 0;
		boolean isUpdateSuccessful = true;
		hmReturn.put(RESULT,FALSE);
		hmReturn.put(MESSAGE,"No records found to be modified..");
		properties =	(Properties) hmData.get("properties");
		try {
			connection = getConnection(properties);
			connection.setAutoCommit(false);

				alData = (ArrayList)	hmData.get ("UpdateDTLData");
				sql = (String)	hmSQL.get	("UpdateDTLSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
					preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++) {
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record");
					}	
				}

		
				alData = null;
				sql = null;

				alData = (ArrayList)	hmData.get ("UpdateCOMMNTData");
				sql = (String)	hmSQL.get	("UpdateCOMMNTSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					for (int i=0;i<iaResult.length ;i++) {
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					} 
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record");
					}	
				}		
				
	
				//insert for committment records in query mode
				
				sql = null;
				alData =null;

				alData =	(ArrayList) hmData.get("InsertCOMMNTData");				
				sql = (String)	hmSQL.get	("InsertCOMMNTSQL");
				
				System.out.println("From manager sql=147=>b4 checking condition alData !=null"+sql);
				System.out.println("From manager alData=148=>b4 checking condition alData !=null "+alData);

				if(alData.size() >0) {
				
					preparedStatement = connection.prepareStatement(sql);
					
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					try{
					iaResult = preparedStatement.executeBatch();
					}
					catch(SQLException exception){
						hmReturn.put(RESULT,FALSE);
						if(exception.getErrorCode()==1){
							hmReturn.put(MSGID,CODE_ALREADY_EXISTS); 
							hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
						}else {
							hmReturn.put(MESSAGE,exception.toString());
						}
						connection.rollback();
						return hmReturn;
					}

					if(preparedStatement!=null)
							preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting Commitment record " + failedRecordIndex);
					}

				}

				if(isUpdateSuccessful){
				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_MODIFIED);
				}

				
				if (connection!=null) {
						closeConnection(connection,properties);	
				}
		}
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MSGID,exception.toString());
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace();
			}
        }
		finally{
 			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				closeConnection(connection,(Properties)hmData.get(properties));	
			}
			catch (Exception subexception){
				subexception.printStackTrace();
			}
		}
		return hmReturn;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap delete(HashMap hmData, HashMap hmSQL)	{
		Connection connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql = "";
		Properties properties = null;
		ArrayList alData =	new ArrayList();
//		ArrayList alRecords =	new ArrayList();
		ArrayList alRecord =	new ArrayList();
		int iaResult[] = null;
		boolean isUpdateSuccessful = true;
		int iResult = 0;
		properties =	(Properties) hmData.get("properties");
		hmReturn.put(RESULT,FALSE);
		hmReturn.put(MESSAGE,"No record found to be deleted..");
		try {
			connection = getConnection(properties);
			connection.setAutoCommit(false);
//
			alData = null;
			sql = null;
			// Update Item Store
			if (hmSQL.containsKey("UpdateITMSQL") && hmData.containsKey("UpdateITMData")) {
				alData = (ArrayList)	hmData.get ("UpdateITMData");
				sql = (String)	hmSQL.get	("UpdateITMSQL");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				if(preparedStatement!=null)
					preparedStatement.close();
				//preparedStatement.clearParameters();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record");
				}
			}
			if(isUpdateSuccessful){
				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_MODIFIED);
			}
///
			//Delete Details
			alData = (ArrayList)	hmData.get("DeleteDTLData");
			sql = (String)	hmSQL.get	("DeleteDTLSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in header !");
			}
			//Delete Header
			alData = (ArrayList)	hmData.get("DeleteHDRData");
			sql = (String)	hmSQL.get	("DeleteHDRSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in header !");
			}
			//delete status
			alData = (ArrayList)	hmData.get("DeleteSTATUSData");
			sql = (String)	hmSQL.get	("DeleteSTATUSSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in status !");
			}
			connection.commit();
			hmReturn.put(RESULT,TRUE);
			hmReturn.put(MSGID,RECORD_DELETED);
			if (connection!=null) {
						closeConnection(connection,properties);	
			}		
		}
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
					subexception.printStackTrace();
			}
        }
		finally{
			try{
				if(preparedStatement!=null) {
					preparedStatement.close();
				}
				closeConnection(connection,(Properties)hmData.get(properties));	
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		return hmReturn;
	}
	protected final String MESSAGE = "message";
	protected final String RESULT = "result";
	protected final Boolean TRUE = new Boolean(true);
	protected final Boolean FALSE =	new Boolean(false);
	private final String CODE_ALREADY_EXISTS = "CODE_ALREADY_EXISTS";
    private final String RECORD_INSERTED = "RECORD_INSERTED";
    private final String RECORD_MODIFIED = "RECORD_MODIFIED";
    private final String RECORD_DELETED  =	"RECORD_DELETED";
}

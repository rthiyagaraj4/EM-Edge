/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
/*
-------------------------------------------------------------------------------------------------------------------------------------------
Date		            Edit History	        Name		       Rev.Date		     Rev.Name			     Description
-------------------------------------------------------------------------------------------------------------------------------------------

03/06/2018              IN:069375               B Haribabu         03/06/2018        B Haribabu              KDAH-CRF-0514.1
--------------------------------------------------------------------------------------------------------------------------------------------
*/
package eST.StockTransfer;

//import java.rmi.RemoteException;
import eST.Common.StEJBSessionAdapter;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

/**
*
* @ejb.bean
*	name="StockTransfer"
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="StockTransfer"
*	local-jndi-name="StockTransfer"
*	impl-class-name="eST.StockTransfer.StockTransferManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="eST.StockTransfer.StockTransferLocal"
*	remote-class="eST.StockTransfer.StockTransferRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="eST.StockTransfer.StockTransferLocalHome"
*	remote-class="eST.StockTransfer.StockTransferHome"
*	generate= "local,remote"
*
*
*/


public class StockTransferManager extends StEJBSessionAdapter {
//	HashMap hmData1;
	HashMap hmSQL;
	HashMap	hmReturn;
	String stSQL						= null;

	String stSQLHdrUpdate;	
	String stSQLHdrInsert;	
	String stSQLHdrDelete;	
							
	String stSQLDtlUpdate;	
	String stSQLDtlInsert;	
	String stSQLDtlDeleteAll;
	String stSQLDtlDelete;	
							
//	String stSQLExpUpdate;	
	String stSQLExpInsert;	
	String stSQLExpDeleteAll;
	String stSQLExpDelete;	

	String sql_st_transfer_dtl_exp_select_for_block_rel;
	String sql_sy_acc_entity_doc_type_select;	
	String sql_sy_acc_entity_doc_type_update;	
	String sql_sy_acc_entity_doc_type_select_flag;

	int rec_high_no = 0;
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap insertStockTransfer(Connection connection, HashMap hmData){
		HashMap		hmResult	=	new HashMap();

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alDtlData	=	new ArrayList();
		ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
		ArrayList	alExpRecords=	new ArrayList();
		ArrayList	allanguageData=	new ArrayList();
		ArrayList<ArrayList> alTempData		= new ArrayList<ArrayList>();
		ArrayList<Integer> alItemClassCount	= new ArrayList<Integer>();
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");
//		String      dtl_unit_cost="";
		String      uom_code="";
		String      trn_type		=	"TFR";
		int      sizeOfTrn		=	1;
		int      trnRecords		=	1;
		int      batch_records	=	0;
		int prev_batch_records	=	0;
		ArrayList doc_no	=	new ArrayList();

		boolean isDocNoAutoGenerated	=	false;
		boolean isFinalized	=	false;
//     String finalized_yn="";
		String stCurrentItemCodeInCaseOfError=null;
		ArrayList	alDtlData1			=	(ArrayList)	hmData.get("DTL_DATA");
		alTempData		=	(ArrayList) hmData.get("HDR_DATA");
		if(hmData.containsKey("ItemClassCount")){
			alItemClassCount=	(ArrayList) hmData.get("ItemClassCount");
		}

		try {
			boolean site = eCommon.Common.CommonBean.isSiteSpecific(connection, "ST","MUL_FAC_TFR_BATCH_PRICE_MOVE");//Added for IN:069375
			String 	sql_st_records_per_trn_select		=	(String)hmSQL.get ("sql_st_records_per_trn_select");
			HashMap records	=	fetchRecord(connection, sql_st_records_per_trn_select,trn_type);
			int records_per_trn = 0;
			if((String)records.get("RECORDS_PER_TRN")!=null){
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			}else{
				records_per_trn = alDtlData1.size();
			}
			if(item_class_based.equals("Y")){
				sizeOfTrn = alItemClassCount.size();
			}else{
				if(records_per_trn>alDtlData1.size()){
					sizeOfTrn = 1;
				}else if((alDtlData1.size()%records_per_trn)==0){
					sizeOfTrn = alDtlData1.size()/records_per_trn;
				}else{
					sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;
				}
			}

			stSQLHdrInsert	=	(String)hmSQL.get ("stSQLHdrInsert");
			stSQLDtlInsert	=	(String)hmSQL.get ("stSQLDtlInsert");
			stSQLExpInsert	=	(String)hmSQL.get ("stSQLExpInsert"); 

			sql_sy_acc_entity_doc_type_select		=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select");
			sql_sy_acc_entity_doc_type_update		=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_update");
			sql_sy_acc_entity_doc_type_select_flag	=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select_flag");

			if(item_class_based.equals("N")){
				alHdrData			=	(ArrayList)	hmData.get("HDR_DATA");
				isFinalized			=	((String)alHdrData.get(7)).equals("Y");
			}
			alDtlData			=	(ArrayList)	hmData.get("DTL_DATA");
						
			alExpData			=	(ArrayList)	hmData.get("DTL_EXP_DATA");
			allanguageData		=	(ArrayList)	hmData.get("LANGUAGE_DATA");
//			finalized_yn	=	(String)alHdrData.get(7);
//			isFinalized			=	((String)alHdrData.get(7)).equals("Y");

			for(int j=0,k=0;j<sizeOfTrn;j++){
				if(item_class_based.equals("Y")){
					alHdrData = new ArrayList();
					alHdrData = alTempData.get(j);
					isFinalized			=	((String)alHdrData.get(7)).equals("Y");
					}

				HashMap hmRecord	=	fetchRecord(connection, sql_sy_acc_entity_doc_type_select_flag, (String)alHdrData.get(1));
				isDocNoAutoGenerated=	hmRecord.get("DOC_NUM_GEN_FLAG").toString().equals("Y");

				if (isDocNoAutoGenerated) {
					alHdrData.set(2,(String)fetchRecord(connection, sql_sy_acc_entity_doc_type_select, (String)alHdrData.get(1)).get("NEXT_DOC_NO"));
				}
				doc_no.add((String)alHdrData.get(2));

				ArrayList alData		=	new ArrayList(alHdrData);
				alData.add(alData.get(13));		//added_by_id
				alData.add(alData.get(14));		//added_at_ws_no
				alData.add(alData.get(15));		//added_facility_id

				hmArgData.put(DATA,alData);
				hmArgSQL.put(INSERT_SQL,stSQLHdrInsert);
				hmResult	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

	//dtl logic
				//alDtlData			=	(ArrayList)	hmData.get("DTL_DATA");
				if(item_class_based.equals("Y")){
					trnRecords = k + alItemClassCount.get(j);
				}else{
					if(records_per_trn>alDtlData.size()){
						trnRecords = alDtlData.size();
					}else if((k+records_per_trn)>=alDtlData.size()){
						trnRecords = alDtlData.size();
					}else{
						trnRecords = k+records_per_trn;
					}
				}
				alDtlRecords=	new ArrayList();
				//for (int i=0;i<alDtlData.size() ;i++ ) {
				for (int i=k;i<trnRecords ;i++ ) {
					ArrayList alDtlRecord	= (ArrayList)alDtlData.get(i);
					//System.out.println("alDtlRecord===mng----/>" +alDtlRecord);
					alDtlRecord.add(0,alHdrData.get(0));
					alDtlRecord.add(1,alHdrData.get(1));
					alDtlRecord.add(2,alHdrData.get(2));
					alDtlRecord.add(alHdrData.get(13));		//added_by_id
					alDtlRecord.add(alHdrData.get(14));		//added_at_ws_no
					alDtlRecord.add(alHdrData.get(15));		//added_facility_id
					alDtlRecord.add(alHdrData.get(13));		//modified_by_id
					alDtlRecord.add(alHdrData.get(14));		//modified_at_ws_no
					alDtlRecord.add(alHdrData.get(15));		//modified_facility_id
					//alDtlRecords.add(alDtlRecord);
					alDtlRecord.add(alDtlRecord.get(10));		//TO_STR_QTY
					batch_records=batch_records+Integer.parseInt((String)alDtlRecord.get(11));		//batch_records
					String mm_trn_qty=(String)alDtlRecord.get(12);
					alDtlRecord.add(checkForNull((String)alDtlRecord.get(13)));		//USAGE_type //18/09/12
					alDtlRecord.remove(10);
					alDtlRecord.remove(10);
					alDtlRecord.remove(10);
					alDtlRecord.remove(10);
					// save the item codein case of error
					stCurrentItemCodeInCaseOfError=(String)alDtlRecord.get(4);
				if(isFinalized) {

						HashMap hmParameters = new HashMap();
						hmParameters.put("item_code",alDtlRecord.get(4));//item_code
						hmParameters.put("store_code",alHdrData.get(5));
						hmParameters.put("to_store_code",alHdrData.get(6));
						hmParameters.put("trn_type","TFR");
						hmParameters.put("doc_date",alHdrData.get(3));
						hmParameters.put("trn_qty",alDtlRecord.get(5));//item_qty
						hmParameters.put("mm_trn_qty",mm_trn_qty);
						hmParameters.put("language_id",(String)allanguageData.get(0));
						hmParameters.put("trn_unit_cost",alDtlRecord.get(6));
	//					dtl_unit_cost=(String)alDtlRecord.get(6);
						
						/**
						 * @Name - Priya
						 * @Date - 26/05/2010
						 * @Inc# - 
						 * @Desc -  As the trn_value is rounded up already in the bean the below code setNumber is removed 
						 */
						/*hmParameters.put("trn_value",setNumber(""+trn_val,3));//value
						double trn_val= Double.parseDouble((String)alDtlRecord.get(5))*Double.parseDouble((String)alDtlRecord.get(6)); */
						hmParameters.put("trn_value", (String)alDtlRecord.get(9));//value
						hmParameters.put("from_stk_item_yn",alDtlRecord.get(8));//value
						hmParameters.put("to_stk_item_yn","Y");//value
						hmParameters.put("last_receipt_date",alHdrData.get(3)); // doc_date
						hmParameters.put("last_issue_date",alHdrData.get(3)); // doc_date

						hmParameters.put("login_by_id",alHdrData.get(13));
						hmParameters.put("login_at_ws_no",alHdrData.get(14));
						hmParameters.put("login_facility_id",alHdrData.get(15));
						hmParameters.put("to_str_qty",alDtlRecord.get(16));
						calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
						hmParameters.remove("to_str_qty");
						rec_high_no = rec_high_no + 1;
						insertItemMoveSummaryForTFR (connection, hmParameters);
					}
						alDtlRecord.remove(16);
						alDtlRecords.add(alDtlRecord);
				}
				//System.out.println("alDtlRecords==245 mng==>" +alDtlRecords);
				//System.out.println("stSQLDtlInsert==245 mng==>" +stSQLDtlInsert);

				hmArgData.put(DATA,alDtlRecords);
				hmArgSQL.put(BATCH_SQL,stSQLDtlInsert);

				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

	//exp logic
				//alExpData			=	(ArrayList)	hmData.get("DTL_EXP_DATA");
				ArrayList unitcost = (ArrayList) hmData.get("UNIT_COST_DATA");
				
				alExpRecords=	new ArrayList();
				//for (int i=0;i<alExpData.size() ;i++ ) {
				for (int i=prev_batch_records,t=0;i<batch_records ;i++ ) {
					ArrayList alExpRecord	= (ArrayList)alExpData.get(i);
					uom_code	=(String)	alExpRecord.get(9);
					alExpRecord.remove(9);
					alExpRecord.add(0,alHdrData.get(0));
					alExpRecord.add(1,alHdrData.get(1));
					alExpRecord.add(2,alHdrData.get(2));
					alExpRecord.add(alHdrData.get(13));		//added_by_id
					alExpRecord.add(alHdrData.get(14));		//added_at_ws_no
					alExpRecord.add(alHdrData.get(15));		//added_facility_id
					alExpRecord.add(alHdrData.get(13));		//modifies_by_id
					alExpRecord.add(alHdrData.get(14));		//modified_at_ws_no
					alExpRecord.add(alHdrData.get(15));		//modifies_facility_id
					alExpRecords.add(alExpRecord);
					// save the item codein case of error
					stCurrentItemCodeInCaseOfError=(String)alExpRecord.get(5);

					if(!isFinalized){//Batch blocking logic follows:
						HashMap hmParameter	=	new HashMap();
						hmParameter.put("store_code",alHdrData.get(5));
						hmParameter.put("item_code",alExpRecord.get(5));
						hmParameter.put("batch_id",alExpRecord.get(6));
						hmParameter.put("bin_location_code",alExpRecord.get(7));
						hmParameter.put("expiry_date_or_receipt_date",alExpRecord.get(8));
						hmParameter.put("trn_qty",""+(String)alExpRecord.get(10));

						hmParameter.put("login_by_id",alHdrData.get(13));
						hmParameter.put("login_at_ws_no",alHdrData.get(14));
						hmParameter.put("login_facility_id",alHdrData.get(15));
						
						hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'B');
						throwExceptionWhenFailed(hmResult);
					}

																						

					if (isFinalized) {
						HashMap hmParameters = new HashMap();

						hmParameters.put("item_code",alExpRecord.get(5));//item_code
						hmParameters.put("store_code",alHdrData.get(5));
						hmParameters.put("to_store_code",alHdrData.get(6));
						hmParameters.put("trn_type","TFR");

						hmParameters.put("trn_qty",""+(String)alExpRecord.get(10));
						hmParameters.put("batch_id",alExpRecord.get(6));
						hmParameters.put("expiry_date_or_receipt_date",alExpRecord.get(8));
						hmParameters.put("trade_id",alExpRecord.get(9));
						hmParameters.put("from_bin_location_code",alExpRecord.get(7));
						hmParameters.put("to_bin_location_code",alExpRecord.get(11));
						hmParameters.put("suspended_batch_allowed_yn","Y");
						hmParameters.put("release_batch_yn","N");
						hmParameters.put("last_receipt_date",alHdrData.get(3)); // doc_date
						hmParameters.put("last_issue_date",alHdrData.get(3)); // doc_date
								
						hmParameters.put("login_by_id",alHdrData.get(13));
						hmParameters.put("login_at_ws_no",alHdrData.get(14));
						hmParameters.put("login_facility_id",alHdrData.get(15));
						updateBatchOnLine(connection, hmSQL, hmParameters);




			  // Setting values for insertion record in st_item_trn_dtl for FROM item BEGINS here


					ArrayList alFromDtlTrn=new ArrayList();
					 String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(5)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
					
					//alFromDtlTrn.add(alHdrData.get(0));//facility_id
					alFromDtlTrn.add(fm_facility_id);//facility_id
					alFromDtlTrn.add(alHdrData.get(5));//store_code
					alFromDtlTrn.add(alExpRecord.get(5));//item_code
					t++;			
					alFromDtlTrn.add(""+t);//trn_srl_no
					alFromDtlTrn.add("TFR");
					alFromDtlTrn.add(alHdrData.get(1));//doc_type_code
					alFromDtlTrn.add(alExpRecord.get(2));//doc_no
					alFromDtlTrn.add(alExpRecord.get(3));//doc_srl_no
					alFromDtlTrn.add(alHdrData.get(3));//Doc_date
					alFromDtlTrn.add(alHdrData.get(4));//Doc_ref
					alFromDtlTrn.add(alExpRecord.get(6));//fm_item_batch_id
					alFromDtlTrn.add(alExpRecord.get(8)); //fm_expiry_date
					String temp_fm_item_qty="-"+alExpRecord.get(10); //fm_item_qty
					alFromDtlTrn.add(temp_fm_item_qty);
					alFromDtlTrn.add("");
					alFromDtlTrn.add("");
					
					alFromDtlTrn.add(unitcost.get(i));//dtl_unit_cost); fm_item_unit_cost  --alDtlRecord.get(6)
					
					alFromDtlTrn.add("");
					alFromDtlTrn.add(uom_code); //fm_stk_uom_code    --alDtlRecord.get(8)
					alFromDtlTrn.add("");
					alFromDtlTrn.add("");
					alFromDtlTrn.add("");
					alFromDtlTrn.add("");
					alFromDtlTrn.add("");
					alFromDtlTrn.add("");
					alFromDtlTrn.add(alHdrData.get(6));//other to store code
					alFromDtlTrn.add("Y");
					alFromDtlTrn.add("");
					alFromDtlTrn.add("");
					alFromDtlTrn.add(alHdrData.get(13));
					alFromDtlTrn.add(alHdrData.get(14));
					alFromDtlTrn.add(alHdrData.get(15));
					alFromDtlTrn.add(alHdrData.get(13));
					alFromDtlTrn.add(alHdrData.get(14));
					alFromDtlTrn.add(alHdrData.get(15));
	//new columns
					alFromDtlTrn.add("");//sal_trn
					alFromDtlTrn.add(alExpRecord.get(7));//bin_location_code
					alFromDtlTrn.add(alExpRecord.get(9));//trade_id 

	//         Setting values for insertion record in st_item_trn_dtl for FROM item BEGINS here
	//		   Insertion of the FROM record into st_item_trn_dtl BEGINS here 

					stSQL	      =	(String)hmSQL.get("TrnDtlInsertSQL");



					hmArgData.put(DATA,alFromDtlTrn);
					hmArgSQL.put(INSERT_SQL,stSQL);



	           // try{
					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmReturn);
				///   }   	    catch(Exception ex) { ex.printStackTrace(); }

	//		   Insertion of the FROM record into st_item_trn_dtl ENDS here 


	//		  Setting values for insertion record in st_item_trn_dtl for TO item BEGINS here


					ArrayList alToDtlTrn=new ArrayList();
					 String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(6)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014

					//alToDtlTrn.add(alHdrData.get(0));//facility_id
					alToDtlTrn.add(to_facility_id);//facility_id
					alToDtlTrn.add(alHdrData.get(6));//store_code
					alToDtlTrn.add(alExpRecord.get(5));//item_code
					t++;			
					alToDtlTrn.add(""+t);//trn_srl_no
					alToDtlTrn.add("TFR");
					alToDtlTrn.add(alHdrData.get(1));//doc_type_code
					alToDtlTrn.add(alExpRecord.get(2));//doc_no
					alToDtlTrn.add(alExpRecord.get(3));//doc_srl_no
					alToDtlTrn.add(alHdrData.get(3));//Doc_date
					alToDtlTrn.add(alHdrData.get(4));//Doc_ref
					alToDtlTrn.add(alExpRecord.get(6));//to item_batch_id
					alToDtlTrn.add(alExpRecord.get(8)); //to expiry_date
					alToDtlTrn.add(alExpRecord.get(10));//to_item_qty
					alToDtlTrn.add("");
					alToDtlTrn.add("");
					alToDtlTrn.add(unitcost.get(i)); //to_item_unit_cost  --alDtlRecord.get(6)
					alToDtlTrn.add("");
					alToDtlTrn.add(uom_code); //to_stk_uom_code    --alDtlRecord.get(8)
					alToDtlTrn.add("");
					alToDtlTrn.add("");
					alToDtlTrn.add("");
					alToDtlTrn.add("");
					alToDtlTrn.add("");
					alToDtlTrn.add("");
					alToDtlTrn.add(alHdrData.get(5));//other to store code
					alToDtlTrn.add("Y");
					alToDtlTrn.add("");
					alToDtlTrn.add("");
					alToDtlTrn.add(alHdrData.get(13));
					alToDtlTrn.add(alHdrData.get(14));
					alToDtlTrn.add(alHdrData.get(15));
					alToDtlTrn.add(alHdrData.get(13));
					alToDtlTrn.add(alHdrData.get(14));
					alToDtlTrn.add(alHdrData.get(15));
					alToDtlTrn.add("");//sal_trn
					alToDtlTrn.add(alExpRecord.get(11));//bin_location_code
					alToDtlTrn.add(alExpRecord.get(9));//trade_id 
		
				stSQL				            =	(String)hmSQL.get("TrnDtlInsertSQL");

				hmArgData.put(DATA,alToDtlTrn);
				hmArgSQL.put(INSERT_SQL,stSQL);
				//try{
					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmReturn);
				 //  }catch(Exception ex) { ex.printStackTrace(); }

	//		   Insertion of the To record into st_item_trn_dtl ENDS here 
					//Added for IN:069375 start
					if(site){
					if(!(fm_facility_id.equals(to_facility_id))){
						System.out.println(alExpRecord.get(5)+","+alExpRecord.get(9)+","+alExpRecord.get(6)+","+alHdrData.get(13)+","+alHdrData.get(14)+","+fm_facility_id+","+to_facility_id);
						CallableStatement callableStatement = null;
						callableStatement	= connection.prepareCall("{ call bl_create_material_batch_price (?,?,?,?,?,?,?,?,?,?,?) }");
						callableStatement.setString(1, (String)alExpRecord.get(5));
						callableStatement.setString(2, ((String)alExpRecord.get(9)));
						callableStatement.setString(3, (String)alExpRecord.get(6));
						callableStatement.setString(4, "");
						callableStatement.setString(5, (String)alHdrData.get(13));
						callableStatement.setString(6, (String)alHdrData.get(14));
						callableStatement.registerOutParameter(7, Types.VARCHAR);
						callableStatement.registerOutParameter(8, Types.VARCHAR);
						callableStatement.registerOutParameter(9, Types.VARCHAR);
						callableStatement.setString(10, (String)fm_facility_id);
						callableStatement.setString(11, (String)to_facility_id);
						callableStatement.execute();
						System.out.println(fm_facility_id.equals(to_facility_id));
						
					}
					}
					//Added for IN:069375 end

					}


				}
				prev_batch_records	=	batch_records;
				String locale=(String)allanguageData.get(0);
				hmArgData.put(DATA,alExpRecords);
				hmArgSQL.put(BATCH_SQL,stSQLExpInsert);

				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

				if (isDocNoAutoGenerated) {
					String s  = "";
					String s1 = "";
					ArrayList alParameters	=	new ArrayList();
					alParameters.add((String)alHdrData.get(13));
					alParameters.add((String)alHdrData.get(14));
					alParameters.add((String)alHdrData.get(15));
					alParameters.add((String)alHdrData.get(1));
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}		
					hmArgData.put(DATA,alParameters);
					hmArgSQL.put(UPDATE_SQL,sql_sy_acc_entity_doc_type_update);

					hmResult	=	update(connection, hmArgData, hmArgSQL);
					hmResult.put("flag",s1);

					throwExceptionWhenFailed(hmResult);

				}
				if(item_class_based.equals("Y")){
					k = k + alItemClassCount.get(j);
				}else{
					k=k+records_per_trn;
				}
			}
		}
		catch (Exception exception) {
			hmResult.put(RESULT,FALSE);
			hmResult.put(MESSAGE,exception.toString());
			hmResult.put(MSGID,exception.getMessage());
			if (exception.getMessage().equals("INSUFFICIENT_BATCH_QTY")) {
				hmResult.put(MESSAGE,"INSUFFICIENT_BATCH_QTY");
				hmResult.put("flag",stCurrentItemCodeInCaseOfError+"~"+rec_high_no);
			}
			else if(exception.getMessage().equals("NEGATIVE_STOCK")) {
				hmResult.put(MESSAGE,"NEGATIVE_STOCK");
				hmResult.put("flag",stCurrentItemCodeInCaseOfError+"~"+rec_high_no);
			}

			exception.printStackTrace();
		}

		hmResult.put("doc_no",doc_no);
		return hmResult;
	}
	

	public void copyArrayList( ArrayList sourceArrayList, ArrayList destinationArrayList){
		for (int i=0;i<sourceArrayList.size(); i++ ) {
			destinationArrayList.add(sourceArrayList.get(i));
		}
	}
	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap updateStockTransfer(Connection connection, HashMap hmData){
		int			iHdrLength	=	0	;
		HashMap		hmResult	=	new HashMap();

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alDtlData	=	new ArrayList();
//		ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
//		ArrayList	alExpRecords=	new ArrayList();
		ArrayList	allanguageData=	new ArrayList();
	//	String      dtl_unit_cost="";
		String      uom_code="";
		ArrayList doc_no=new ArrayList();
		boolean isFinalized	=	false;
//		HashMap hmCommon	=	new HashMap();
		String stCurrentItemCodeInCaseOfError=null;
		int rec_high_no = 0;
		try {
			boolean site = eCommon.Common.CommonBean.isSiteSpecific(connection, "ST","MUL_FAC_TFR_BATCH_PRICE_MOVE");//Added for IN:069375
			stSQLHdrUpdate	=	(String)hmSQL.get ("stSQLHdrUpdate");
			stSQLDtlUpdate	=	(String)hmSQL.get ("stSQLDtlUpdate");
//			stSQLExpUpdate	=	(String)hmSQL.get ("stSQLExpUpdate");
			stSQLExpDelete	=	(String)hmSQL.get ("stSQLExpDelete");
			stSQLExpInsert	=	(String)hmSQL.get ("stSQLExpInsert");
			stSQLDtlDelete	=	(String)hmSQL.get ("stSQLDtlDelete");
			stSQLDtlInsert	=	(String)hmSQL.get ("stSQLDtlInsert");
			sql_st_transfer_dtl_exp_select_for_block_rel	=	(String)hmSQL.get ("sql_st_transfer_dtl_exp_select_for_block_rel");   

			alHdrData			=	(ArrayList)	hmData.get("HDR_DATA");
			allanguageData		=	(ArrayList)	hmData.get("LANGUAGE_DATA");
			isFinalized			=	((String)alHdrData.get(7)).equals("Y");
			iHdrLength			=	alHdrData.size();
			ArrayList alData	=	new ArrayList(alHdrData);
			doc_no.add((String)alData.get(2));
			alData.add(alData.get(0));
			alData.add(alData.get(1));
			alData.add(alData.get(2));
			alData.remove(0);
			alData.remove(0);
			alData.remove(0);
			hmArgData.put(DATA,alData);
			hmArgSQL.put(UPDATE_SQL,stSQLHdrUpdate);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

//dtl logic
			alDtlData			=	(ArrayList)	hmData.get("DTL_DATA");
			
			for (int i=0;i<alDtlData.size() ;i++ ) {
				ArrayList alDtlRecord	= (ArrayList)alDtlData.get(i);
				System.out.println("alDtlRecord modify ==579==>" +alDtlRecord);
				int iMode	=	Integer.parseInt((String)alDtlRecord.get(0));
				String toStrQty		=	(String)alDtlRecord.get(8);
				String mm_trn_qty	=	(String)alDtlRecord.get(9);
				String usage_type   =	checkForNull((String)alDtlRecord.get(10)); 
// save the item codein case of error
stCurrentItemCodeInCaseOfError=(String)alDtlRecord.get(2);
				alDtlRecord.remove(0);//remove mode from the list..
				switch (iMode){
					case 0://delete
						ArrayList alDeleteRecord	=	new ArrayList();

						alDeleteRecord.add(alHdrData.get(0));	//facility_id
						alDeleteRecord.add(alHdrData.get(1));	//doc_type_code
						alDeleteRecord.add(alHdrData.get(2));	//doc_no
						alDeleteRecord.add(alDtlRecord.get(0));//put doc_srl_no at last..

						ArrayList alRecords	=	fetchRecords(connection,sql_st_transfer_dtl_exp_select_for_block_rel, alDeleteRecord);

						for (int j=0; j<alRecords.size(); j++) {
							HashMap hmRecord	=	(HashMap)alRecords.get(j);
							HashMap hmParameter	=	new HashMap();
							hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
							hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
							hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
							hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
							hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
							hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
							//commented due to passing wrong parameter Monday, January 30, 2012
							//hmParameter.put("login_by_id",alData.get(13));
							//hmParameter.put("login_at_ws_no",alData.get(14));
							//hmParameter.put("login_facility_id",alData.get(15));
							hmParameter.put("login_by_id",alData.get(11));
							hmParameter.put("login_at_ws_no",alData.get(12));
							hmParameter.put("login_facility_id",alData.get(13));



							hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R');//false to release the batch..
							throwExceptionWhenFailed(hmResult);
						}

						hmArgData.put(DATA,alDeleteRecord);
						hmArgSQL.put(DELETE_SQL,stSQLExpDelete);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);

						hmArgSQL.put(DELETE_SQL,stSQLDtlDelete);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);

						break;

					case 1://insert
						alDtlRecord.remove(7);
						alDtlRecord.remove(7);
						alDtlRecord.remove(7); //18/09/12
						alDtlRecord.add(0,alHdrData.get(0));
						alDtlRecord.add(1,alHdrData.get(1));
						alDtlRecord.add(2,alHdrData.get(2));
						alDtlRecord.add(alHdrData.get(iHdrLength-3));	//added_by_id
						alDtlRecord.add(alHdrData.get(iHdrLength-2));	//added_at_ws_no
						alDtlRecord.add(alHdrData.get(iHdrLength-1));	//added_facility_id
						alDtlRecord.add(alHdrData.get(iHdrLength-3));	//modified_by_id
						alDtlRecord.add(alHdrData.get(iHdrLength-2));	//modified_at_ws_no
						alDtlRecord.add(alHdrData.get(iHdrLength-1));	//modified_facility_id
						alDtlRecord.add(usage_type); //usage_type
						hmArgData.put(DATA,alDtlRecord);
						hmArgSQL.put(INSERT_SQL,stSQLDtlInsert);
						hmResult	=	insert(connection, hmArgData, hmArgSQL);
						//Code added by Mahesh on 17/11/2009 as there is a problem exiists for the newly added items in query mode.
						alDtlRecord.remove(0);
						alDtlRecord.remove(0);
						alDtlRecord.remove(0);
						alDtlRecord.remove(0);
						break;

					case 2://update


					{
						ArrayList alDeleteExpRecord	=	new ArrayList();

						alDeleteExpRecord.add(alHdrData.get(0));		//facility_id
						alDeleteExpRecord.add(alHdrData.get(1));		//doc_type_code
						alDeleteExpRecord.add(alHdrData.get(2));		//doc_no
						alDeleteExpRecord.add(alDtlRecord.get(0));//put doc_srl_no at last..

						ArrayList alRecords1	=	fetchRecords(connection,sql_st_transfer_dtl_exp_select_for_block_rel, alDeleteExpRecord);

						for (int j=0; j<alRecords1.size(); j++) {
							HashMap hmRecord	=	(HashMap)alRecords1.get(j);
							HashMap hmParameter	=	new HashMap();
							hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
							hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
							hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
							hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
							hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
							hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
							hmParameter.put("login_by_id",alHdrData.get(iHdrLength-3));
							hmParameter.put("login_at_ws_no",alHdrData.get(iHdrLength-2));
							hmParameter.put("login_facility_id",alHdrData.get(iHdrLength-1));




				hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R');//false to release the batch..
				throwExceptionWhenFailed(hmResult);
					}

						hmArgData.put(DATA,alDeleteExpRecord);
						hmArgSQL.put(DELETE_SQL,stSQLExpDelete);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);
					}
						alDtlRecord.remove(7);
						alDtlRecord.remove(7);
						alDtlRecord.remove(7); //18/09/12
						alDtlRecord.add(alHdrData.get(iHdrLength-3));		//modified_by_id
						alDtlRecord.add(alHdrData.get(iHdrLength-2));		//modified_at_ws_no
						alDtlRecord.add(alHdrData.get(iHdrLength-1));		//modified_facility_id
						alDtlRecord.add(usage_type); //18/09/12
						alDtlRecord.add(alHdrData.get(0));		//fac
						alDtlRecord.add(alHdrData.get(1));		//doc_type_code
						alDtlRecord.add(alHdrData.get(2));		//doc_no
						alDtlRecord.add(alDtlRecord.get(0));//put doc_srl_no at last..
						alDtlRecord.remove(0);
						hmArgData.put(DATA,alDtlRecord);
						hmArgSQL.put(UPDATE_SQL,stSQLDtlUpdate);

						hmResult	=	update(connection, hmArgData, hmArgSQL);

						
						break;
				}
				throwExceptionWhenFailed(hmResult);
				if(isFinalized && iMode!=0) {// mode not equals delete
					HashMap hmParameters = new HashMap();
					hmParameters.put("item_code",alDtlRecord.get(0));//item_code
					hmParameters.put("store_code",alHdrData.get(5));
					hmParameters.put("to_store_code",alHdrData.get(6));
					hmParameters.put("trn_type","TFR");
					hmParameters.put("doc_date",alHdrData.get(3));
					hmParameters.put("trn_qty",alDtlRecord.get(1));//item_qty
					hmParameters.put("trn_unit_cost",alDtlRecord.get(2));
						/**
						 * @Name - Priya
						 * @Date - 26/05/2010
						 * @Inc# - 
						 * @Desc -  As the trn_value is rounded up already in the bean the below code setNumber is removed 
						 */
					//dtl_unit_cost=(String)alDtlRecord.get(2);
					//double trn_val= Double.parseDouble((String)alDtlRecord.get(1))*Double.parseDouble((String)alDtlRecord.get(2));
					//hmParameters.put("trn_value",setNumber(""+trn_val,3));//value				
					hmParameters.put("trn_value",alDtlRecord.get(5));//value
					hmParameters.put("from_stk_item_yn",alDtlRecord.get(4));
					hmParameters.put("to_stk_item_yn","Y");//value
					hmParameters.put("last_receipt_date",alHdrData.get(3)); // doc_date
					hmParameters.put("last_issue_date",alHdrData.get(3)); // doc_date

					hmParameters.put("login_by_id",alHdrData.get(iHdrLength-3));
					hmParameters.put("login_at_ws_no",alHdrData.get(iHdrLength-2));
					hmParameters.put("login_facility_id",alHdrData.get(iHdrLength-1));
					hmParameters.put("to_str_qty",toStrQty);
					hmParameters.put("mm_trn_qty",mm_trn_qty);
					hmParameters.put("language_id",(String)allanguageData.get(0));
					
					calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
					//hmParameters.remove("to_str_qty");
					insertItemMoveSummaryForTFR (connection, hmParameters);
					rec_high_no = rec_high_no + 1;
				}

			


			}

			alExpData	=	(ArrayList)hmData.get("DTL_EXP_DATA");
			ArrayList unitcost = (ArrayList) hmData.get("UNIT_COST_DATA");
			for (int i=0,t=0; i<alExpData.size(); i++) {
				ArrayList alTemp	=	(ArrayList)	alExpData.get(i);
				uom_code	=(String)	alTemp.get(9);
// save the item codein case of error
stCurrentItemCodeInCaseOfError=(String)alTemp.get(2);
				alTemp.remove(9);
				alTemp.add(0,alHdrData.get(0));
				alTemp.add(1,alHdrData.get(1));
				alTemp.add(2,alHdrData.get(2));
				alTemp.add(alHdrData.get(iHdrLength-3));		//added_by_id
				alTemp.add(alHdrData.get(iHdrLength-2));		//added_at_ws_no
				alTemp.add(alHdrData.get(iHdrLength-1));		//added_facility_id
				alTemp.add(alHdrData.get(iHdrLength-3));		//modified_by_id
				alTemp.add(alHdrData.get(iHdrLength-2));		//modified_at_ws_no
				alTemp.add(alHdrData.get(iHdrLength-1));		//modified_facility_id



				if(!isFinalized){//Batch blocking logic follows:
					HashMap hmParameter	=	new HashMap();
					hmParameter.put("store_code",alHdrData.get(5));
					hmParameter.put("item_code",alTemp.get(5));
					hmParameter.put("batch_id",alTemp.get(6));
					hmParameter.put("bin_location_code",alTemp.get(7));
					hmParameter.put("expiry_date_or_receipt_date",alTemp.get(8));
					hmParameter.put("trn_qty",""+(String)alTemp.get(10));

					hmParameter.put("login_by_id",alHdrData.get(iHdrLength-3));
					hmParameter.put("login_at_ws_no",alHdrData.get(iHdrLength-2));
					hmParameter.put("login_facility_id",alHdrData.get(iHdrLength-1));
					
					hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'B');
					throwExceptionWhenFailed(hmResult);
				}



				if (isFinalized) {
					HashMap hmParameters = new HashMap();

					hmParameters.put("item_code",alTemp.get(5));//item_code
					hmParameters.put("store_code",alHdrData.get(5));
					hmParameters.put("to_store_code",alHdrData.get(6));
					hmParameters.put("trn_type","TFR");

					hmParameters.put("trn_qty",""+(String)alTemp.get(10));
					hmParameters.put("batch_id",alTemp.get(6));
					hmParameters.put("expiry_date_or_receipt_date",alTemp.get(8));
					hmParameters.put("trade_id",alTemp.get(9));
					hmParameters.put("from_bin_location_code",alTemp.get(7));
					hmParameters.put("to_bin_location_code",alTemp.get(11));
					hmParameters.put("suspended_batch_allowed_yn","Y");
					hmParameters.put("release_batch_yn","N");
					hmParameters.put("last_receipt_date",alHdrData.get(3)); // doc_date
					hmParameters.put("last_issue_date",alHdrData.get(3)); // doc_date
						    
					hmParameters.put("login_by_id",alHdrData.get(iHdrLength-3));
					hmParameters.put("login_at_ws_no",alHdrData.get(iHdrLength-2));
					hmParameters.put("login_facility_id",alHdrData.get(iHdrLength-1));
					updateBatchOnLine(connection, hmSQL, hmParameters);

		  // Setting values for insertion record in st_item_trn_dtl for FROM item BEGINS here

				ArrayList alFromDtlTrn=new ArrayList();
				String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(5)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
				     
				
				//alFromDtlTrn.add(alHdrData.get(0));//facility_id
				alFromDtlTrn.add(fm_facility_id);//facility_id
				alFromDtlTrn.add(alHdrData.get(5));//store_code
				alFromDtlTrn.add(alTemp.get(5));//item_code
				t++;			
				alFromDtlTrn.add(""+t);//trn_srl_no
				alFromDtlTrn.add("TFR");
				alFromDtlTrn.add(alHdrData.get(1));//doc_type_code
				alFromDtlTrn.add(alTemp.get(2));//doc_no
				alFromDtlTrn.add(alTemp.get(3));//doc_srl_no
				alFromDtlTrn.add(alHdrData.get(3));//Doc_date
				alFromDtlTrn.add(alHdrData.get(4));//Doc_ref
				alFromDtlTrn.add(alTemp.get(6));//fm_item_batch_id
				alFromDtlTrn.add(alTemp.get(8)); //fm_expiry_date
				String temp_fm_item_qty="-"+alTemp.get(10); //fm_item_qty
				alFromDtlTrn.add(temp_fm_item_qty);
				alFromDtlTrn.add("");
				alFromDtlTrn.add("");
				//alFromDtlTrn.add(dtl_unit_cost); //fm_item_unit_cost  --alDtlRecord.get(6)
				alFromDtlTrn.add(unitcost.get(i)); //fm_item_unit_cost  --alDtlRecord.get(6)
				alFromDtlTrn.add("");
				alFromDtlTrn.add(uom_code); //fm_stk_uom_code    --alDtlRecord.get(8)
				alFromDtlTrn.add("");
				alFromDtlTrn.add("");
				alFromDtlTrn.add("");
				alFromDtlTrn.add("");
				alFromDtlTrn.add("");
				alFromDtlTrn.add("");
				alFromDtlTrn.add(alHdrData.get(6));
				alFromDtlTrn.add("Y");
				alFromDtlTrn.add("");
				alFromDtlTrn.add("");
				alFromDtlTrn.add(alHdrData.get(iHdrLength-3));
				alFromDtlTrn.add(alHdrData.get(iHdrLength-2));
				alFromDtlTrn.add(alHdrData.get(iHdrLength-1));
				alFromDtlTrn.add(alHdrData.get(iHdrLength-3));
				alFromDtlTrn.add(alHdrData.get(iHdrLength-2));
				alFromDtlTrn.add(alHdrData.get(iHdrLength-1));

				alFromDtlTrn.add("");//sal_trn
				alFromDtlTrn.add(alTemp.get(7));//bin_location_code
				alFromDtlTrn.add(alTemp.get(9));//trade_id 

//         Setting values for insertion record in st_item_trn_dtl for FROM item BEGINS here
//		   Insertion of the FROM record into st_item_trn_dtl BEGINS here 

			stSQL				            =	(String)hmSQL.get("TrnDtlInsertSQL");



			hmArgData.put(DATA,alFromDtlTrn);
			hmArgSQL.put(INSERT_SQL,stSQL);


 //           try{
			    hmReturn	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);
//			   }
  //  	    catch(Exception ex) { ex.printStackTrace(); }

//		   Insertion of the FROM record into st_item_trn_dtl ENDS here 


//		  Setting values for insertion record in st_item_trn_dtl for TO item BEGINS here

                String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(6)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
  			    ArrayList alToDtlTrn=new ArrayList();
				
				//alToDtlTrn.add(alHdrData.get(0));//facility_id
				alToDtlTrn.add(to_facility_id);//facility_id
				alToDtlTrn.add(alHdrData.get(6));//store_code
				alToDtlTrn.add(alTemp.get(5));//item_code
				t++;			
				alToDtlTrn.add(""+t);//trn_srl_no
				alToDtlTrn.add("TFR");
				alToDtlTrn.add(alHdrData.get(1));//doc_type_code
				alToDtlTrn.add(alTemp.get(2));//doc_no
				alToDtlTrn.add(alTemp.get(3));//doc_srl_no
				alToDtlTrn.add(alHdrData.get(3));//Doc_date
				alToDtlTrn.add(alHdrData.get(4));//Doc_ref
				alToDtlTrn.add(alTemp.get(6));//fm_item_batch_id
				alToDtlTrn.add(alTemp.get(8)); //fm_expiry_date
				alToDtlTrn.add(alTemp.get(10));
				alToDtlTrn.add("");
				alToDtlTrn.add("");
				//alToDtlTrn.add(dtl_unit_cost); //fm_item_unit_cost  --alDtlRecord.get(6)
				alToDtlTrn.add(unitcost.get(i)); //fm_item_unit_cost  --alDtlRecord.get(6)
				alToDtlTrn.add("");
				alToDtlTrn.add(uom_code); //fm_stk_uom_code    --alDtlRecord.get(8)
				alToDtlTrn.add("");
				alToDtlTrn.add("");
				alToDtlTrn.add("");
				alToDtlTrn.add("");
				alToDtlTrn.add("");
				alToDtlTrn.add("");
				alToDtlTrn.add(alHdrData.get(5));
				alToDtlTrn.add("Y");
				alToDtlTrn.add("");
				alToDtlTrn.add("");
				alToDtlTrn.add(alHdrData.get(iHdrLength-3));
				alToDtlTrn.add(alHdrData.get(iHdrLength-2));
				alToDtlTrn.add(alHdrData.get(iHdrLength-1));
				alToDtlTrn.add(alHdrData.get(iHdrLength-3));
				alToDtlTrn.add(alHdrData.get(iHdrLength-2));
				alToDtlTrn.add(alHdrData.get(iHdrLength-1));
				alToDtlTrn.add("");//sal_trn
				alToDtlTrn.add(alTemp.get(11));//bin_location_code
				alToDtlTrn.add(alTemp.get(9));//trade_id 


//           Setting values for insertion record in st_item_trn_dtl for TO item BEGINS here
//		   Insertion of the TO record into st_item_trn_dtl BEGINS here 

//            ArrayList alItemTrnDtlDataTo	=	(ArrayList)hmData.get("ItemTrnDtlDataTo");
			stSQL				            =	(String)hmSQL.get("TrnDtlInsertSQL");
			hmArgData.put(DATA,alToDtlTrn);
			hmArgSQL.put(INSERT_SQL,stSQL);
//            try{
			    hmReturn	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);
//			   }
  //  	    catch(Exception ex) { ex.printStackTrace(); }

//		   Insertion of the To record into st_item_trn_dtl ENDS here 
				//Added for IN:069375 start
				if(site){
				if(!(fm_facility_id.equals(to_facility_id))){
					System.out.println(alTemp.get(5)+","+alTemp.get(9)+","+alTemp.get(6)+","+alHdrData.get(iHdrLength-3)+","+alHdrData.get(iHdrLength-2)+","+fm_facility_id+","+to_facility_id);
					CallableStatement callableStatement = null;
					callableStatement	= connection.prepareCall("{ call bl_create_material_batch_price (?,?,?,?,?,?,?,?,?,?,?) }");
					callableStatement.setString(1, (String)alTemp.get(5));
					callableStatement.setString(2, ((String)alTemp.get(9)));
					callableStatement.setString(3, (String)alTemp.get(6));
					callableStatement.setString(4, "");
					callableStatement.setString(5, (String)alHdrData.get(iHdrLength-3));
					callableStatement.setString(6, (String)alHdrData.get(iHdrLength-2));
					callableStatement.registerOutParameter(7, Types.VARCHAR);
					callableStatement.registerOutParameter(8, Types.VARCHAR);
					callableStatement.registerOutParameter(9, Types.VARCHAR);
					callableStatement.setString(10, (String)fm_facility_id);
					callableStatement.setString(11, (String)to_facility_id);
					callableStatement.execute();
					System.out.println(fm_facility_id.equals(to_facility_id));
					
				}
				}
				//Added for IN:069375 end

				}
//-----end
			}

			hmArgData.put(DATA,alExpData);
			hmArgSQL.put(BATCH_SQL,stSQLExpInsert);
			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

		}
		catch (Exception exception) {
			exception.printStackTrace();
			hmResult.put(RESULT,FALSE);
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
/*			if ((exception.getMessage().equals("INSUFFICIENT_BATCH_QTY")) || (exception.getMessage().equals("NEGATIVE_STOCK"))) {
				hmResult.put("flag",stCurrentItemCodeInCaseOfError);
			}*/

			if (exception.getMessage().equals("INSUFFICIENT_BATCH_QTY")) {
				hmResult.put(MESSAGE,"INSUFFICIENT_BATCH_QTY");
				hmResult.put("flag",stCurrentItemCodeInCaseOfError+"~"+rec_high_no);
			}
			else if(exception.getMessage().equals("NEGATIVE_STOCK")) {
				hmResult.put(MESSAGE,"NEGATIVE_STOCK");
				hmResult.put("flag",stCurrentItemCodeInCaseOfError+"~"+rec_high_no);
			}
		}
		hmResult.put("doc_no",doc_no);
		return hmResult;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap deleteStockTransfer(Connection connection, HashMap hmData){

		HashMap		hmResult	=	new HashMap();

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmCommon=	new HashMap();

		ArrayList	alData		=	new ArrayList();

		try {
			stSQLHdrDelete	=	(String)hmSQL.get ("stSQLHdrDelete");
			stSQLDtlDeleteAll=	(String)hmSQL.get ("stSQLDtlDeleteAll");
			stSQLDtlDelete	=	(String)hmSQL.get ("stSQLDtlDelete");
			stSQLExpDeleteAll=	(String)hmSQL.get ("stSQLExpDeleteAll");
			stSQLExpDelete	=	(String)hmSQL.get ("stSQLExpDelete");   
			sql_st_transfer_dtl_exp_select_for_block_rel	=	(String)hmSQL.get ("sql_st_transfer_dtl_exp_select_for_block_rel");   
			
			alData			=	(ArrayList)	hmData.get("DATA");
			alData.add("%");
			hmCommon	=	(HashMap)	hmData.get("COMMON_DATA");
//

			ArrayList alRecords	=	fetchRecords(connection,sql_st_transfer_dtl_exp_select_for_block_rel, alData);

			for (int j=0; j<alRecords.size(); j++) {
				HashMap hmRecord	=	(HashMap)alRecords.get(j);
				HashMap hmParameter	=	new HashMap();
				hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
				hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
				hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
				hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
				hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
				hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
				hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
				hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
				hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));


				hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R');//false to release the batch..
				throwExceptionWhenFailed(hmResult);
			}



//
			alData.remove(3);//remove doc_srl_no
			hmArgData.put(DATA, alData);

			/*hmArgSQL.put(DELETE_SQL,stSQLExpDeleteAll);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,stSQLDtlDeleteAll);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,stSQLHdrDelete);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);*/

			hmArgData.put(DATA,(ArrayList)hmData.get("ALUPDATEHDRDATA"));
			hmArgSQL.put(UPDATE_SQL,(String)hmSQL.get ("UpdateSqlfordelete"));
			hmResult	=	update(connection, hmArgData, hmArgSQL);	
  
		}
		catch (Exception exception) {
			hmResult.put(RESULT,FALSE);
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			exception.printStackTrace();
		}

		return hmResult;
	}
//mgr start

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap delete( HashMap hmData, HashMap hmSQLValues) //throws RemoteException
		{
        Connection connection = null;
		Properties properties=null;
		HashMap hmResult=new HashMap();
		hmSQL		= hmSQLValues;

		hmResult.put("result", FALSE);

		ArrayList alData		=	(ArrayList)hmData.get("DATA");

        try{
            properties = (Properties)hmData.get("properties");
            connection = getConnection(properties);
            connection.setAutoCommit(false);
			  

			hmData.put("DATA",alData);

			hmResult=deleteStockTransfer(connection, hmData);
			throwExceptionWhenFailed(hmResult);
		    connection.commit();
        }
        catch(Exception exception){
			try{
				connection.rollback();
				exception.printStackTrace();
            }
            catch(Exception subException){
                subException.printStackTrace();
            }
            hmResult.put(RESULT, FALSE);
            hmResult.put(MSGID, exception.getMessage());
            hmResult.put(MESSAGE, exception.toString());
        }
        finally{
            try{
				closeConnection(connection, properties);
            }
            catch(Exception exception){
                exception.printStackTrace();
            }
        }
        return hmResult;
	}

	/**
	* Method, which is responsible for inserting the data in to the related tables
	* for the adjustStock transaction. This method will in turn call the other methods
	* to do the corresponding updates.
	* @param hmDataValues, the data to be inserted
	* @param hmSQLValues, the queries used for the corresponding updates
	* @return HashMap, the result and the messages
	*/
	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap insert(HashMap hmData, HashMap hmSQLValues) //throws RemoteException
		{

        Connection connection = null;
		Properties properties=null;

//		hmData1		= hmData;
		hmSQL		= hmSQLValues;

		HashMap hmResult=new HashMap();
		hmResult.put("result", FALSE);

		ArrayList alHdrData		=	(ArrayList)hmData.get("HDR_DATA");
		ArrayList alDtlData		=	new ArrayList();
		ArrayList alExpData		=	new ArrayList();
		ArrayList alDtlRecords	=	(ArrayList)hmData.get("DTL_DATA");
		ArrayList alExpRecords	=	(ArrayList)hmData.get("DTL_EXP_DATA");
		ArrayList allanguageData	=	(ArrayList)hmData.get("LANGUAGE_DATA");
		ArrayList alExpDataUnitcost		=	new ArrayList();

        try{
            properties = (Properties)hmData.get("properties");
            connection = getConnection(properties);
            connection.setAutoCommit(false);
			  
			for (int i=0; i<alDtlRecords.size(); i++) {
				HashMap hmDtlRecord		=	(HashMap)alDtlRecords.get(i);
				//System.out.println("hmDtlRecord===1141=mng=>" +hmDtlRecord);
				ArrayList alDtlRecord	=	new ArrayList();
				alDtlRecord.add(hmDtlRecord.get("doc_srl_no"));
				alDtlRecord.add(hmDtlRecord.get("item_code"));
				alDtlRecord.add(hmDtlRecord.get("item_qty"));
				alDtlRecord.add(hmDtlRecord.get("item_unit_cost"));
				alDtlRecord.add(hmDtlRecord.get("store_code"));
				alDtlRecord.add(hmDtlRecord.get("stock_item_yn"));
				/**
				 * @Name - Priya
				 * @Date - 26/05/2010
				 * @Inc# - 
				 * @Desc -  As the item_cost_value is assigned & get from the validate jsp the below calculation is commented
				 */
				//alDtlRecord.add(setNumber(""+Double.parseDouble((String)hmDtlRecord.get("item_unit_cost"))*Double.parseDouble((String)hmDtlRecord.get("item_qty")),3));
				alDtlRecord.add((String)hmDtlRecord.get("item_cost_value"));
				alDtlRecord.add((String)hmDtlRecord.get("to_str_qty"));
				alDtlRecord.add((String)hmDtlRecord.get("batch_records"));
				alDtlRecord.add((String)hmDtlRecord.get("mm_trn_qty"));
				alDtlRecord.add(checkForNull((String)hmDtlRecord.get("usage_type"))); //18/09/12
				alDtlData.add(alDtlRecord);
				System.out.println("alDtlData===1162=mng=>" +alDtlData);
			}

			for (int i=0; i<alExpRecords.size(); i++) {
				HashMap hmExpRecord		=	(HashMap)alExpRecords.get(i);
				ArrayList alExpRecord	=	new ArrayList();
				alExpRecord.add(hmExpRecord.get("doc_srl_no"));
				alExpRecord.add(hmExpRecord.get("STORE_CODE"));
				alExpRecord.add(hmExpRecord.get("ITEM_CODE"));
				alExpRecord.add(hmExpRecord.get("BATCH_ID"));
				alExpRecord.add(hmExpRecord.get("BIN_LOCATION_CODE"));
				alExpRecord.add(hmExpRecord.get("EXPIRY_DATE"));
				alExpRecord.add(hmExpRecord.get("TRADE_ID"));
				alExpRecord.add(hmExpRecord.get("QTY"));
				alExpRecord.add(hmExpRecord.get("TO_BIN_LOCATION_CODE"));
				alExpRecord.add(hmExpRecord.get("uom_code"));
				alExpDataUnitcost.add(hmExpRecord.get("item_unit_cost"));

	
				alExpData.add(alExpRecord);
			}

			hmData.put("HDR_DATA",alHdrData);
			hmData.put("DTL_DATA",alDtlData);
			hmData.put("DTL_EXP_DATA",alExpData);
			hmData.put("UNIT_COST_DATA",alExpDataUnitcost);	
			hmData.put("LANGUAGE_DATA",allanguageData);

			hmResult=insertStockTransfer(connection, hmData);
			throwExceptionWhenFailed(hmResult);
            connection.commit();
        }
        catch(Exception exception){
			try{
				connection.rollback();
				exception.printStackTrace();
            }
            catch(Exception subException){
                subException.printStackTrace();
            }
            hmResult.put(RESULT, FALSE);
            hmResult.put(MSGID, exception.getMessage());
            hmResult.put(MESSAGE, exception.toString());
        }
        finally{
            try{
				closeConnection(connection, properties);
            }
            catch(Exception exception){
                exception.printStackTrace();
            }
        }
        return hmResult;
    }
	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap modify(HashMap hmData, HashMap hmSQLValues) //throws RemoteException
		{

        Connection connection = null;
		Properties properties=null;

		HashMap hmResult=new HashMap();
		hmResult.put("result", FALSE);
//		hmData1		= hmData;
		hmSQL		= hmSQLValues;

		ArrayList alHdrData			=	(ArrayList)hmData.get("HDR_DATA");
		ArrayList alDtlData			=	new ArrayList();
		ArrayList alExpData			=	new ArrayList();
		ArrayList alExpDataUnitcost	=	new ArrayList();
		ArrayList alDtlRecords		=	(ArrayList)hmData.get("DTL_DATA");
		ArrayList alExpRecords		=	(ArrayList)hmData.get("DTL_EXP_DATA");

        try{
            properties = (Properties)hmData.get("properties");
            connection = getConnection(properties);
            connection.setAutoCommit(false);

			for (int i=0; i<alDtlRecords.size(); i++) {
				HashMap hmDtlRecord		=	(HashMap)alDtlRecords.get(i);
				//System.out.println("hmDtlRecord modify ====>" +hmDtlRecord);
				ArrayList alDtlRecord	=	new ArrayList();
				alDtlRecord.add(hmDtlRecord.get("mode"));
				alDtlRecord.add(hmDtlRecord.get("doc_srl_no"));
				alDtlRecord.add(hmDtlRecord.get("item_code"));
				alDtlRecord.add(hmDtlRecord.get("item_qty"));
				alDtlRecord.add(hmDtlRecord.get("item_unit_cost"));
				alDtlRecord.add(alHdrData.get(5));//hmDtlRecord.get("store_code"));
				alDtlRecord.add(hmDtlRecord.get("stock_item_yn"));
				/**
				 * @Name - Priya
				 * @Date - 26/05/2010
				 * @Inc# - 
				 * @Desc -  As the item_cost_value is assigned & get from the validate jsp the below calculation is commented
				 */
				//alDtlRecord.add(setNumber(""+Double.parseDouble((String)hmDtlRecord.get("item_unit_cost"))*Double.parseDouble((String)hmDtlRecord.get("item_qty")),3));
				alDtlRecord.add(hmDtlRecord.get("item_cost_value"));
				alDtlRecord.add(hmDtlRecord.get("to_str_qty"));
				alDtlRecord.add(hmDtlRecord.get("mm_trn_qty"));
				alDtlRecord.add(checkForNull((String)hmDtlRecord.get("usage_type"))); //18/09/12
				alDtlData.add(alDtlRecord);
			} 
 
			for (int i=0; i<alExpRecords.size(); i++) {
				HashMap hmExpRecord		=	(HashMap)alExpRecords.get(i);
				ArrayList alExpRecord	=	new ArrayList();
				alExpRecord.add(hmExpRecord.get("doc_srl_no"));
				alExpRecord.add(hmExpRecord.get("STORE_CODE"));
				alExpRecord.add(hmExpRecord.get("ITEM_CODE"));
				alExpRecord.add(hmExpRecord.get("BATCH_ID"));
				alExpRecord.add(hmExpRecord.get("BIN_LOCATION_CODE"));
				alExpRecord.add(hmExpRecord.get("EXPIRY_DATE"));
				alExpRecord.add(hmExpRecord.get("TRADE_ID"));
				alExpRecord.add(hmExpRecord.get("QTY"));
				alExpRecord.add(hmExpRecord.get("TO_BIN_LOCATION_CODE"));
				alExpRecord.add(hmExpRecord.get("uom_code"));
				alExpDataUnitcost.add(hmExpRecord.get("item_unit_cost"));
				alExpData.add(alExpRecord);
			} 

			hmData.put("HDR_DATA",alHdrData);
			hmData.put("DTL_DATA",alDtlData);
			hmData.put("DTL_EXP_DATA",alExpData);
			hmData.put("UNIT_COST_DATA",alExpDataUnitcost);
			hmResult=updateStockTransfer(connection, hmData);
			throwExceptionWhenFailed(hmResult);
            connection.commit();
			//connection.rollback();
        }
        catch(Exception exception){
			try{
				connection.rollback();
				exception.printStackTrace();
            }
            catch(Exception subException){
                subException.printStackTrace();
            }
            hmResult.put(RESULT, FALSE);
            hmResult.put(MSGID, exception.getMessage());
            hmResult.put(MESSAGE, exception.toString());
        }
        finally{
            try{
				closeConnection(connection, properties);
            }
            catch(Exception exception){
                exception.printStackTrace();
            }
        }
        return hmResult;
    }

//end
	public void insertItemMoveSummaryForTFR (Connection connection,HashMap hmParameters) throws Exception {
		HashMap	hmArgData				=	new HashMap();
		HashMap	hmArgSQL				=	new HashMap();
		ArrayList alItemMoveSummRecord	=	new ArrayList();
//		ArrayList alCommonData			=	(ArrayList)	hmData1.get("COMMON_DATA");
		String l_doc_date	= (String)hmParameters.get("doc_date");
		alItemMoveSummRecord.clear();
		alItemMoveSummRecord.add(l_doc_date);
		alItemMoveSummRecord.add(l_doc_date);
		HashMap hmResult = fetchRecord(connection,(String)hmSQL.get ("GetMonthAndYear"));
		String l_move_month	= (String)hmResult.get("MM");
		String l_move_year	= (String)hmResult.get("YYYY");


        /* For From record to be inserted in st_item_move_summ table */
		
		 String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)hmParameters.get("store_code")).get("FACILITY_ID");
	     

		alItemMoveSummRecord.clear();
		//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id
		alItemMoveSummRecord.add(fm_facility_id);      // facility_id
		alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code
		alItemMoveSummRecord.add(hmParameters.get("store_code"));    // store_code
		alItemMoveSummRecord.add(l_move_month);
		alItemMoveSummRecord.add(l_move_year);
		/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/
		ArrayList  nafitive_value_to_zero=new ArrayList();
		//nafitive_value_to_zero.add(hmParameters.get("login_facility_id"));      // facility_id
		nafitive_value_to_zero.add(fm_facility_id);      // facility_id
		nafitive_value_to_zero.add(hmParameters.get("item_code"));     // Item code
		nafitive_value_to_zero.add(hmParameters.get("store_code"));    // store_code
		nafitive_value_to_zero.add(l_move_month);
		nafitive_value_to_zero.add(l_move_year);
	
		hmResult = fetchRecord(connection,(String)hmSQL.get ("SummaryExistsCheckSQL"),alItemMoveSummRecord);
		int summary_count= Integer.parseInt((String)(hmResult.get("COUNT")));

		if(summary_count == 0) {


			alItemMoveSummRecord.clear();
			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));  // facility_id    
			alItemMoveSummRecord.add(fm_facility_id);  // facility_id    
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code      
			alItemMoveSummRecord.add(hmParameters.get("store_code"));    // store_code     
			alItemMoveSummRecord.add(l_move_year);
			alItemMoveSummRecord.add(l_move_month);

			//alItemMoveSummRecord.add("-"+hmParameters.get("trn_qty"));  //From Quantity
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //From Quantity
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));    //Cost value
			//alItemMoveSummRecord.add("-"+hmParameters.get("trn_qty"));      //From Quantity
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));      //From Quantity
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));    //Cost value
			//alItemMoveSummRecord.add("-"+hmParameters.get("trn_qty"));      //From out Quantity
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));      //From out Quantity
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));    //Cost out value

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 


			stSQL	=	(String)hmSQL.get ("FmItemMovSumInsertSQL");

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmReturn	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}
		else {
			alItemMoveSummRecord.clear();


			//alItemMoveSummRecord.add("-"+hmParameters.get("trn_qty"));  //From Quantity    
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //From Quantity    
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));    //Cost value       
			//alItemMoveSummRecord.add("-"+hmParameters.get("trn_qty"));      //From Quantity for month end
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));      //From Quantity for month end
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));    //Cost value       
			//alItemMoveSummRecord.add("-"+hmParameters.get("trn_qty"));      //From out Quantity 
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));      //From out Quantity 
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));    //out Cost value       

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 

			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(fm_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("store_code"));    // store_code   
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			stSQL = (String)hmSQL.get ("FmItemMovSumFromUpdateSQL");

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmReturn	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}

		/* For To record to be inserted in st_item_move_summ table */
		
		String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)hmParameters.get("to_store_code")).get("FACILITY_ID");
	     

		alItemMoveSummRecord.clear();
		//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
		alItemMoveSummRecord.add(to_facility_id);      // facility_id  
		alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
		alItemMoveSummRecord.add(hmParameters.get("to_store_code"));    // to_store_code   
		alItemMoveSummRecord.add(l_move_month);
		alItemMoveSummRecord.add(l_move_year);

		hmResult = fetchRecord(connection,(String)hmSQL.get ("SummaryExistsCheckSQL"),alItemMoveSummRecord);
		summary_count= Integer.parseInt((String)(hmResult.get("COUNT")));

		if(summary_count == 0) {


			alItemMoveSummRecord.clear();
		//	alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(to_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("to_store_code"));    // to_store_code   
			alItemMoveSummRecord.add(l_move_year);
			alItemMoveSummRecord.add(l_move_month);

			//alItemMoveSummRecord.add(hmParameters.get("trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));    //Cost value
			//alItemMoveSummRecord.add(hmParameters.get("trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));    //Cost value
			//alItemMoveSummRecord.add(hmParameters.get("trn_qty"));      //To in Quantity
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));      //To in Quantity
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));    //in Cost value

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 


			stSQL	=	(String)hmSQL.get ("ToItemMovSumInsertSQL");

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmReturn	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}
		else {     
			alItemMoveSummRecord.clear();
			//alItemMoveSummRecord.add(hmParameters.get("trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));    //Cost value
			//alItemMoveSummRecord.add(hmParameters.get("trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));      //To Quantity
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));    //Cost value
			//alItemMoveSummRecord.add(hmParameters.get("trn_qty"));      //To in Quantity
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));      //To in Quantity
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));    //in Cost value

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 

			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(to_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("to_store_code"));    // store_code   
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			stSQL = (String)hmSQL.get ("ToItemMovSumFromUpdateSQL");

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmReturn	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}
			/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/

		//stSQL="UPDATE st_item_move_summ SET month_opening_value = (CASE WHEN month_opening_qty = 0 THEN 0 WHEN month_opening_value < 0 THEN 0 END ), month_closing_value = (CASE WHEN month_closing_qty = 0 THEN 0 WHEN month_closing_value < 0 THEN 0 END ) WHERE facility_id = ? AND item_code = ? AND store_code = ? AND move_month = ? AND move_year = ? ";

		stSQL="UPDATE st_item_move_summ SET month_opening_value = (CASE WHEN month_opening_qty = 0 THEN 0 WHEN month_opening_value < 0 THEN 0 WHEN month_opening_value > 0   THEN month_opening_value END ), month_closing_value = (CASE WHEN month_closing_qty = 0 THEN 0 WHEN month_closing_value < 0 THEN 0 WHEN month_closing_value > 0 THEN month_closing_value END ) WHERE facility_id = ? AND item_code = ? AND store_code = ? AND move_month = ? AND move_year = ? ";
		hmArgData.put(DATA,nafitive_value_to_zero);
		hmArgSQL.put(UPDATE_SQL,stSQL);
		hmReturn	=	update(connection, hmArgData, hmArgSQL);
		throwExceptionWhenFailed(hmReturn);
	}

}

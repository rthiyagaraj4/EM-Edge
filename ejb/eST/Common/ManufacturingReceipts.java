/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
package eST.Common;
//import java.rmi.RemoteException;
//import eST.Common.StEJBSessionAdapter;
import java.sql.Connection;
import java.util.ArrayList;
//import java.util.Properties;
import java.util.HashMap;

public class  ManufacturingReceipts extends StEJBSessionAdapter {

	public HashMap insertManufacturingReceipts(Connection connection, HashMap hmData){
		int rec_high_no = 0;
		HashMap		hmResult	=	new HashMap();
		      

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		HashMap		hmHeader	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();

		HashMap		hmItemInfo	=	new HashMap();

		ArrayList	alDetail	=	new ArrayList();
		ArrayList	alExp		=	new ArrayList();
		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alDtlData	=	new ArrayList();
		ArrayList	languageData	=	new ArrayList();
		//ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
		//ArrayList	alExpRecords=	new ArrayList();
		ArrayList	alItemTrnDtl=	new ArrayList();
		//ArrayList    alHdrCrData = new ArrayList();
		ArrayList    alItemTrnDtlRows = new ArrayList();
		ArrayList    alUpdateRequest = new ArrayList();
		boolean isDocNoAutoGenerated	=	false;
		int next_batch_id=0;
		String SQL_ST_MAN_RECEIPT_PREP_LOCN_UPDATE="";

		boolean isFinalized	=	false;
		boolean isExtemp	=	false;
		boolean dflt_mfg_mode = false; //Added by Rabbani #Inc no:29950(Bru-HIMS-CRF-084) on 18-FEB-2013 
		String doc_no	=	"";
		String batch_id = "";
		try {
			hmCommon			=	(HashMap)	hmData.get("COMMON_DATA");
			hmHeader			=	(HashMap)	hmData.get("HDR_DATA");
 			isFinalized			=	((String)	hmHeader.get("finalized_yn")).equals("Y");
			isExtemp			=	((String)	hmHeader.get("preparation_type")).equals("E");
			//Added by Rabbani #Inc no:29950(Bru-HIMS-CRF-084) on 08-FEB-2013 
			dflt_mfg_mode		=	((String)	hmHeader.get("dflt_mfg_mode")).equals("R");
 
			HashMap hmRecord	=	fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG, (String)hmHeader.get("doc_type_code"));
			isDocNoAutoGenerated=	hmRecord.get("DOC_NUM_GEN_FLAG").toString().equals("Y");

			if (isDocNoAutoGenerated){
				hmHeader.put("doc_no", (String)fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT, (String)hmHeader.get("doc_type_code")).get("NEXT_DOC_NO"));
			}
			doc_no=(String)hmHeader.get("doc_no");
			batch_id=(String)hmHeader.get("batch_id");
			double mfg_item_unit_cost=0.0;
			double mfg_item_cost=0.0;
			double mfg_item_cost_value=0.0;
			alDetail			=	(ArrayList)	hmData.get("DTL_DATA");
			for (int i=0;i<alDetail.size() ;i++ ) {
				HashMap hmDetail=(HashMap)alDetail.get(i);
				mfg_item_cost=mfg_item_cost+Double.parseDouble((String)hmDetail.get("mfg_cost_value"));
			}
/*			Changed on 12/7/2005 ... item_qty has to be taken not the prepare_qty
			mfg_item_unit_cost=mfg_item_cost/Integer.parseInt((String)hmHeader.get("prepare_qty"));
			mfg_item_cost_value=mfg_item_unit_cost*Integer.parseInt((String)hmHeader.get("prepare_qty")); */


			mfg_item_unit_cost=mfg_item_cost/Double.parseDouble((String)hmHeader.get("item_qty"));
			mfg_item_cost_value=mfg_item_unit_cost*Double.parseDouble((String)hmHeader.get("item_qty"));
			/**
			 * @Name - Priya
			 * @Date - 07/06/2010
			 * @Inc# - 
			 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost 
			 */
			int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost(connection));
			mfg_item_unit_cost=Double.parseDouble(setNumber(""+mfg_item_unit_cost,noOfDecimalsForCost));
			mfg_item_cost_value=Double.parseDouble(setNumber(""+mfg_item_cost_value,noOfDecimalsForCost));
	

			alHdrData.add(hmHeader.get("facility_id"));
			alHdrData.add(hmHeader.get("doc_type_code"));
			alHdrData.add(hmHeader.get("doc_no"));
			alHdrData.add(hmHeader.get("doc_date"));
			alHdrData.add(hmHeader.get("doc_ref"));
			alHdrData.add(hmHeader.get("store_code"));
			alHdrData.add(hmHeader.get("item_code"));
			alHdrData.add(hmHeader.get("item_qty"));
			alHdrData.add(hmHeader.get("expiry_date"));
			alHdrData.add(hmHeader.get("batch_id"));
			alHdrData.add(hmHeader.get("bin_location_code"));
			alHdrData.add(hmHeader.get("finalized_yn"));
			alHdrData.add(hmHeader.get("gl_interfaced_yn"));
			alHdrData.add(hmHeader.get("trn_type"));
			alHdrData.add(hmHeader.get("stock_item_yn"));
			alHdrData.add(hmHeader.get("preparation_type"));
			alHdrData.add(hmHeader.get("preparation_mode"));
			alHdrData.add(hmHeader.get("prepare_location_code"));
			alHdrData.add(hmHeader.get("patient_id"));
			alHdrData.add(hmHeader.get("encounter_id"));
			alHdrData.add(""+mfg_item_unit_cost);
			alHdrData.add(hmHeader.get("prepare_desc"));
			alHdrData.add(hmHeader.get("process_loss_percent"));
			alHdrData.add(hmHeader.get("prepare_qty"));
			alHdrData.add(hmHeader.get("mfg_request_no"));
			alHdrData.add(hmHeader.get("trade_id"));

			alHdrData.add(hmCommon.get("login_by_id"));
			alHdrData.add(hmCommon.get("login_at_ws_no"));
			alHdrData.add(hmCommon.get("login_facility_id"));

			alHdrData.add(hmCommon.get("login_by_id"));
			alHdrData.add(hmCommon.get("login_at_ws_no"));
			alHdrData.add(hmCommon.get("login_facility_id"));
			alHdrData.add(""+mfg_item_cost_value);
			
			//added on 19/11/04 start
			alHdrData.add(hmHeader.get("packed_by"));
			alHdrData.add(hmHeader.get("remarks"));
			alHdrData.add(hmHeader.get("counter"));
			//added on 19/11/04 end
			alHdrData.add(checkForNull(hmHeader.get("barcode_id")));  //Added by Rabbani #Inc no:32766 on 18/05/12
			alHdrData.add(checkForNull(hmHeader.get("no_of_labels"))); //18/05/12
			
            System.out.println("alHdrData===common===>" +alHdrData);
			hmArgData.put(DATA,alHdrData);
			hmArgSQL.put(INSERT_SQL,SQL_ST_MAN_RECEIPT_HDR_INSERT);
			hmResult	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);


	/***		
	auto_gen_batch_id=fetchRecord(connection,sql,(String)alHdrData.get(16));	
	fetchRecord(connection,SQL_ST_GET_MONTH_AND_YEAR,alParameters);***/
	    	SQL_ST_MAN_RECEIPT_PREP_LOCN_UPDATE=eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MAN_RECEIPT_PREP_LOCN_UPDATE");
			next_batch_id = Integer.parseInt((String)hmHeader.get("next_batch_id"));
			ArrayList locn_update_data = new ArrayList();
			locn_update_data.add((next_batch_id+1)+"");
			locn_update_data.add(hmCommon.get("login_by_id"));
			locn_update_data.add(hmCommon.get("login_at_ws_no"));
			locn_update_data.add(hmCommon.get("login_facility_id"));
			locn_update_data.add(hmHeader.get("prepare_location_code"));
			hmArgData.put(DATA,locn_update_data);
			hmArgSQL.put(UPDATE_SQL,SQL_ST_MAN_RECEIPT_PREP_LOCN_UPDATE);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
			
			int trn_srl_no=1;
			if(isFinalized && !isExtemp) {
		
			alItemTrnDtl.add(hmHeader.get("facility_id"));
			alItemTrnDtl.add(hmHeader.get("store_code"));
			alItemTrnDtl.add(hmHeader.get("item_code"));
			alItemTrnDtl.add(""+trn_srl_no);
			alItemTrnDtl.add("MFG");
			alItemTrnDtl.add(hmHeader.get("doc_type_code"));
			alItemTrnDtl.add(hmHeader.get("doc_no"));
			alItemTrnDtl.add("0");
			alItemTrnDtl.add(hmHeader.get("doc_date"));
			alItemTrnDtl.add(hmHeader.get("doc_ref"));
			alItemTrnDtl.add(hmHeader.get("batch_id"));
			alItemTrnDtl.add(hmHeader.get("expiry_date"));
//			alItemTrnDtl.add(hmHeader.get("prepare_qty"));  // Modified on 12/7/2005 , since item_qty has to be passed not the prep_qty(since qty includes the loss % also)
			alItemTrnDtl.add(hmHeader.get("item_qty"));
			alItemTrnDtl.add(""+mfg_item_unit_cost);
			alItemTrnDtl.add(hmHeader.get("stock_item_yn"));
			alItemTrnDtl.add(hmHeader.get("bin_location_code"));
			alItemTrnDtl.add(hmHeader.get("trade_id"));
			alItemTrnDtl.add(hmHeader.get("uom_code"));

			alItemTrnDtl.add(hmCommon.get("login_by_id"));
			alItemTrnDtl.add(hmCommon.get("login_at_ws_no"));
			alItemTrnDtl.add(hmCommon.get("login_facility_id"));

			alItemTrnDtl.add(hmCommon.get("login_by_id"));
			alItemTrnDtl.add(hmCommon.get("login_at_ws_no"));
			alItemTrnDtl.add(hmCommon.get("login_facility_id"));

			hmArgData.put(DATA,alItemTrnDtl);
			hmArgSQL.put(INSERT_SQL,SQL_ST_MFG_TRN_DTL);
			hmResult	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
		
			

					HashMap hmParametersCuos = new HashMap();
					HashMap hmSQLCuos = new HashMap();
					hmSQLCuos.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
					hmSQLCuos.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
					hmSQLCuos.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
					hmSQLCuos.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);



						hmParametersCuos.put("item_code",hmHeader.get("item_code"));
						hmParametersCuos.put("store_code",hmHeader.get("store_code"));
						hmParametersCuos.put("trn_type","MFG");
//						hmParametersCuos.put("trn_qty",hmHeader.get("prepare_qty"));
						hmParametersCuos.put("trn_qty",hmHeader.get("item_qty"));
						hmParametersCuos.put("mm_trn_qty",hmHeader.get("item_qty")); //Added by Rabbani for Unit_cost calculation on 22-MAR-2013  
						hmParametersCuos.put("trn_unit_cost",""+mfg_item_unit_cost);
						//hmParametersCuos.put("trn_value",""+unit_val);
						hmParametersCuos.put("trn_value",""+mfg_item_cost_value);

						hmParametersCuos.put("from_stk_item_yn",hmHeader.get("stock_item_yn"));
						hmParametersCuos.put("last_issue_date",hmHeader.get("doc_date"));
						hmParametersCuos.put("login_by_id",			hmCommon.get("login_by_id"));
						hmParametersCuos.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
						hmParametersCuos.put("login_facility_id",	hmCommon.get("login_facility_id"));

					try{
						calculateAndUpdateOnlineStock (connection, hmSQLCuos, hmParametersCuos);
//						rec_high_no = rec_high_no + 1;
					}catch(Exception exception){
							hmResult.put(RESULT,FALSE);
							hmResult.put(MSGID,exception.toString());
							hmResult.put(MESSAGE,"NEGATIVE_STOCK");
							hmResult.put("flag",  "" +" ~" + hmHeader.get("item_code"));
							exception.printStackTrace();
							return(hmResult);
					}

			HashMap hmParameters = new HashMap();
			HashMap hmSQL		 = new HashMap();

			hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
			hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
			hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
			hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
			hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
			hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
			hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);



			hmParameters.put("item_code",hmHeader.get("item_code"));
			hmParameters.put("store_code",hmHeader.get("store_code"));
			hmParameters.put("trn_type","MFG");
			
//			hmParameters.put("trn_qty",hmHeader.get("prepare_qty"));
			hmParameters.put("trn_qty",hmHeader.get("item_qty"));
			hmParameters.put("batch_id",hmHeader.get("batch_id"));
			hmParameters.put("expiry_date_or_receipt_date",hmHeader.get("expiry_date"));
			hmParameters.put("trade_id",hmHeader.get("trade_id"));
			hmParameters.put("from_bin_location_code",hmHeader.get("bin_location_code"));
			hmParameters.put("suspended_batch_allowed_yn","Y");
			hmParameters.put("release_batch_yn","N");
			hmParameters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date
			hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
			hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
			hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));
			hmParameters.put("barcode_id",	       checkForNull(hmHeader.get("barcode_id")));  //Added by Rabbani #Inc no:32766 on 18/05/12
			System.out.println("hmParameters====257 commm===>" +hmParameters);

			updateBatchOnLine(connection, hmSQL, hmParameters);
					

					
						
			hmResult	=	insertOrUpdateItemMoveSummaryforManReceipt(connection, hmParametersCuos);
			throwExceptionWhenFailed(hmResult);
			}

//dtl logic
			alDetail	=	(ArrayList)	hmData.get("DTL_DATA");

            

			for (int i=0;i<alDetail.size() ;i++ ) {
				HashMap hmDetail	= (HashMap)alDetail.get(i);

                

				ArrayList alDtlRecord	=	new ArrayList();

				alDtlRecord.add(hmHeader.get("facility_id"));
				alDtlRecord.add(hmHeader.get("doc_type_code"));
				alDtlRecord.add(hmHeader.get("doc_no"));
		
				alDtlRecord.add(""+(i+1));
				alDtlRecord.add(hmDetail.get("child_item_code"));
				alDtlRecord.add(hmDetail.get("child_item_qty"));
				alDtlRecord.add(setNumber(((String)hmDetail.get("item_unit_cost")),noOfDecimalsForCost));
				alDtlRecord.add(hmDetail.get("stock_item_yn"));
				alDtlRecord.add(hmDetail.get("mfg_uom_code"));

				//check here 
				alDtlRecord.add(hmDetail.get("child_item_trans_qty"));

				alDtlRecord.add(setNumber(((String)hmDetail.get("mfg_cost_value")),noOfDecimalsForCost));
				//alDtlRecord.add(""+mfg_item_unit_cost);
				
				alDtlRecord.add(hmCommon.get("login_by_id"));
				alDtlRecord.add(hmCommon.get("login_at_ws_no"));
				alDtlRecord.add(hmCommon.get("login_facility_id"));
				alDtlRecord.add(hmCommon.get("login_by_id"));
				alDtlRecord.add(hmCommon.get("login_at_ws_no"));
				alDtlRecord.add(hmCommon.get("login_facility_id"));

				alDtlData.add(alDtlRecord);
				if(isFinalized) {
//itm info logic
					HashMap hmTemp	=	new HashMap();
					hmTemp.put("item_unit_cost", hmDetail.get("item_unit_cost"));
					hmTemp.put("item_unit_price", hmDetail.get("item_unit_price"));
					hmTemp.put("uom_code", hmDetail.get("uom_code"));
					hmTemp.put("stock_item_yn", hmDetail.get("stock_item_yn"));
					hmItemInfo.put((String)hmDetail.get("item_code"),hmTemp);
//
					HashMap hmSQL = new HashMap();
					hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
					hmSQL.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
					hmSQL.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
					hmSQL.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);

					HashMap hmParameters = new HashMap();
					hmParameters.put("item_code",hmDetail.get("child_item_code"));
					hmParameters.put("store_code",hmHeader.get("store_code"));
					hmParameters.put("trn_type","SAL");
// modified on 11/01/05 to send integer value to  update stock.
					double qty = Double.parseDouble((String)hmDetail.get("child_item_trans_qty"));
					hmParameters.put("trn_qty","-"+qty);
					hmParameters.put("mm_trn_qty","-"+qty); //Added by Rabbani for Unit_cost calculation on 22-MAR-2013 
					hmParameters.put("trn_unit_cost",""+setNumber(((String)hmDetail.get("item_unit_cost")),noOfDecimalsForCost));
					hmParameters.put("trn_value","-"+setNumber(((String)hmDetail.get("mfg_cost_value")),noOfDecimalsForCost));
					hmParameters.put("from_stk_item_yn",hmDetail.get("stock_item_yn"));

					hmParameters.put("last_issue_date",hmHeader.get("doc_date"));

					hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
					hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
					hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));
                   
					try{
						calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
						rec_high_no = rec_high_no + 1;
					}catch(Exception exception){
							hmResult.put(RESULT,FALSE);
							hmResult.put(MSGID,exception.toString());
							hmResult.put(MESSAGE,"NEGATIVE_STOCK");
							hmResult.put("flag",rec_high_no+"~"+ hmDetail.get("child_item_code"));
							exception.printStackTrace();
							return(hmResult);
					}

                    hmResult	=	insertOrUpdateItemMoveSummaryforManReceipt(connection, hmParameters);
					throwExceptionWhenFailed(hmResult);
					
				}
			}

			hmArgData.put(DATA,alDtlData);
			hmArgSQL.put(BATCH_SQL,SQL_ST_MAN_RECEIPT_DTL_INSERT);

			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

//exp logic
			alExp		=	(ArrayList)	hmData.get("DTL_EXP_DATA");
			//System.out.println("alExp===common===>" +alExp);

			for (int i=0;i<alExp.size() ;i++ ) {
				HashMap hmExpRecord		= (HashMap)alExp.get(i);
				ArrayList alExpRecord	= new ArrayList();

				alExpRecord.add(hmHeader.get("facility_id"));
				alExpRecord.add(hmHeader.get("doc_type_code"));
				alExpRecord.add(hmHeader.get("doc_no"));

				alExpRecord.add( hmExpRecord.get("doc_srl_no"));
				alExpRecord.add(hmHeader.get("store_code"));
				alExpRecord.add(hmExpRecord.get("item_code"));
				alExpRecord.add(hmExpRecord.get("batch_id"));
				alExpRecord.add(hmExpRecord.get("bin_location_code"));
				alExpRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
				alExpRecord.add(hmExpRecord.get("trade_id"));

				//check here 
				alExpRecord.add(hmExpRecord.get("item_qty"));
			

				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));
				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));
				//alExpRecord.add(checkForNull(hmExpRecord.get("barcode_id"))); //15/05/12


				alExpData.add(alExpRecord);
			//System.out.println("alExpData===common===>" +alExpData);

//TO BE CHECKED..
				if (isFinalized) {
					HashMap hmParamaters = new HashMap();
					HashMap hmSQL		 = new HashMap();

					hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
					hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
					hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
					hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
					hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
					hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
					hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);


					hmParamaters.put("item_code",hmExpRecord.get("item_code"));
					hmParamaters.put("store_code",hmExpRecord.get("store_code"));
					hmParamaters.put("trn_type","MFG");
					hmParamaters.put("trn_qty","-"+hmExpRecord.get("item_qty"));
					hmParamaters.put("batch_id",hmExpRecord.get("batch_id"));
					hmParamaters.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
					hmParamaters.put("trade_id",hmExpRecord.get("trade_id"));
					hmParamaters.put("from_bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParamaters.put("suspended_batch_allowed_yn","Y");
					hmParamaters.put("release_batch_yn","N");

					hmParamaters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date

					hmParamaters.put("login_by_id",			hmCommon.get("login_by_id"));
					hmParamaters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
					hmParamaters.put("login_facility_id",	hmCommon.get("login_facility_id"));
					//hmParamaters.put("barcode_id",	        hmExpRecord.get("barcode_id"));  //16/05/12
			         //System.out.println("hmParamaters====427 commm===>" +hmParamaters);
					updateBatchOnLine(connection, hmSQL, hmParamaters);
///
					trn_srl_no++;
					ArrayList ItemTrnDtlRecord	=	new ArrayList();
				//	HashMap	hmTempItemInfo		=	(HashMap)hmItemInfo.get((String)hmExpRecord.get("item_code"));
					ItemTrnDtlRecord.add(hmHeader.get("facility_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("store_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("item_code"));
					ItemTrnDtlRecord.add(""+trn_srl_no);//trn_srl_no
					ItemTrnDtlRecord.add("MFG");
					ItemTrnDtlRecord.add(hmHeader.get("doc_type_code"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_no"));
					ItemTrnDtlRecord.add(hmExpRecord.get("doc_srl_no"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_date"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_ref"));
					ItemTrnDtlRecord.add(hmExpRecord.get("batch_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
					ItemTrnDtlRecord.add("-"+hmExpRecord.get("item_qty"));//normal_qty
					ItemTrnDtlRecord.add(""+setNumber(((String)hmExpRecord.get("unit_cost")),noOfDecimalsForCost));
					ItemTrnDtlRecord.add("Y");
					ItemTrnDtlRecord.add(hmExpRecord.get("bin_location_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("trade_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("uom_code"));
 					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));

					alItemTrnDtlRows.add(ItemTrnDtlRecord);
///
				}
				else{//Batch blocking logic follows:
					HashMap hmParameter	=	new HashMap();
					hmParameter.put("store_code",hmExpRecord.get("store_code"));
					hmParameter.put("item_code",hmExpRecord.get("item_code"));
					hmParameter.put("batch_id",hmExpRecord.get("batch_id"));
					hmParameter.put("bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParameter.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
					hmParameter.put("trn_qty",hmExpRecord.get("item_qty"));

					hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
					hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
					hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

					hmResult	=	blockReleaseBatch(connection, hmParameter, 'B');
					throwExceptionWhenFailed(hmResult);
				}

			}

			hmArgData.put(DATA,alExpData);
			hmArgSQL.put(BATCH_SQL,SQL_ST_MAN_RECEIPT_EXP_INSERT);
			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			if (isFinalized) {
				hmArgData.put(DATA,alItemTrnDtlRows);
				hmArgSQL.put(BATCH_SQL,SQL_ST_MFG_TRN_DTL);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
			}

				//Added by Rabbani #Inc no:29950(Bru-HIMS-CRF-084) on 18-FEB-2013 
				if(hmHeader.get("dflt_mfg_mode").equals("R")){  
				alUpdateRequest.add(hmCommon.get("login_by_id"));
				alUpdateRequest.add(hmCommon.get("login_at_ws_no"));
				alUpdateRequest.add(hmCommon.get("login_facility_id"));
				alUpdateRequest.add(hmHeader.get("mfg_request_no"));
				hmArgData.put(DATA,alUpdateRequest);
				hmArgSQL.put(UPDATE_SQL,SQL_ST_MAN_RECEIPT_STATUS_UPDATE);
				hmResult	=	update(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
				}


		languageData		=	(ArrayList)	hmData.get("LANGUAGE_DATA");
			if (isDocNoAutoGenerated) {
				ArrayList alParameters	=	new ArrayList();
				String s = getSTMessage((String)languageData.get(0), "DOC_NO", "ST") ;
				String s1=s+":  "+alHdrData.get(2)+"!"+batch_id;
				alParameters.add(hmCommon.get("login_by_id"));
				alParameters.add(hmCommon.get("login_at_ws_no"));
				alParameters.add(hmCommon.get("login_facility_id"));
				alParameters.add(hmHeader.get("doc_type_code"));
				hmArgData.put(DATA,alParameters);
				hmArgSQL.put(UPDATE_SQL,SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE);

				hmResult	=	update(connection, hmArgData, hmArgSQL);
				hmResult.put("flag",s1);

				throwExceptionWhenFailed(hmResult);
			}

		

		}
		catch (Exception exception) {
			hmResult.put(RESULT,FALSE);
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			hmResult.put("flag",rec_high_no+"");
			exception.printStackTrace();
		}

		hmResult.put("doc_no", doc_no+"!"+batch_id);
		return hmResult;
	}


	public HashMap insertOrUpdateItemMoveSummaryforManReceipt (Connection connection, HashMap hmParameters) throws Exception {

		

		HashMap hmColumns	=	new HashMap();

		hmColumns.put("doc_date",hmParameters.get("last_issue_date"));
		hmColumns.put("facility_id",hmParameters.get("login_facility_id"));
		hmColumns.put("item_code",hmParameters.get("item_code"));
		hmColumns.put("store_code",hmParameters.get("store_code"));
		hmColumns.put("login_by_id",hmParameters.get("login_by_id"));
		hmColumns.put("login_at_ws_no",hmParameters.get("login_at_ws_no"));
		hmColumns.put("login_facility_id",hmParameters.get("login_facility_id"));

		hmColumns.put("mfg_qty",hmParameters.get	("trn_qty"));
		hmColumns.put("mfg_cost",hmParameters.get	("trn_value"));
		
		hmColumns.put("month_closing_qty",hmParameters.get("trn_qty"));
		hmColumns.put("month_closing_value",hmParameters.get("trn_value"));
		hmColumns.put("stk_item_yn",hmParameters.get("from_stk_item_yn"));

		

		return insertOrUpdateItemMoveSummary(connection, hmColumns);
	}

	public HashMap insertOrUpdateItemMoveSummary(Connection connection, HashMap hmColumns) throws Exception {

		HashMap	hmArgData				=	new HashMap();
		HashMap	hmArgSQL				=	new HashMap();

		ArrayList alParameters	=	new ArrayList();
		ArrayList alData		=	new ArrayList();

		//String doc_date	= (String)hmColumns.get("doc_date"); //doc_date
		String stSQL;

		//alParameters.add(doc_date);
		//alParameters.add(doc_date);
		HashMap hmResult = fetchRecord(connection,SQL_ST_GET_MONTH_AND_YEAR);

		String move_month	= (String)hmResult.get("MM");
		String move_year	= (String)hmResult.get("YYYY");

		String	facility_id         	=	(String)hmColumns.get("facility_id");
		String	item_code           	=	(String)hmColumns.get("item_code");
		String	store_code          	=	(String)hmColumns.get("store_code");
		String	month_closing_qty   	="";
		String	month_closing_value 	=	"";
		
		String	stock_item_yn		 	=	(String)hmColumns.get("stk_item_yn");
		String	mfg_qty             	=	"";
		String	mfg_cost            	="";
		
			mfg_qty =	stock_item_yn.equals("Y")?((String)hmColumns.get("mfg_qty")):"0";
            
			//boolean bl_stock_item_yn = stock_item_yn.equals("Y") ;
			

			mfg_cost   =	stock_item_yn.equals("Y")?((String)hmColumns.get("mfg_cost")):"0";

			month_closing_qty   	=	((String)hmColumns.get("month_closing_qty"));
			month_closing_value 	=	((String)hmColumns.get("month_closing_value"));

		/**
		 * @Name - Priya
		 * @Date - 10/06/2010
		 * @Inc# - 
		 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
		 */
		
		if(Double.valueOf(month_closing_qty) == 0){
			month_closing_value = "0";
		}
					
		String	login_by_id 			=	(String)hmColumns.get("login_by_id");
		String	login_at_ws_no 			=	(String)hmColumns.get("login_at_ws_no");
		String	login_facility_id 		=	(String)hmColumns.get("login_facility_id");

		alParameters.clear();
		alParameters.add(facility_id);
		alParameters.add(item_code);
		alParameters.add(store_code);
		alParameters.add(move_year);
		alParameters.add(move_month);

		hmResult = fetchRecord(connection,SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT,alParameters);

		if(((String)hmResult.get("TOTAL")).equals("0")) {//no record found

			

			alData.add(facility_id        );
			alData.add(item_code          );
			alData.add(store_code         );
			alData.add(move_year          );
			alData.add(move_month         );
			alData.add(mfg_qty            );
			alData.add(mfg_cost           );
			
			alData.add(month_closing_qty  );
			alData.add(month_closing_value);

			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );
			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );

			

			stSQL	=	SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_MFG;

			hmArgData.put(DATA,alData);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmResult	=	insert(connection, hmArgData, hmArgSQL);
		}
		else {

			alData.add(mfg_qty            );
			alData.add(mfg_cost           );
			
			alData.add(month_closing_qty  );
			alData.add(month_closing_value);

			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );

			alData.add(facility_id        );
			alData.add(item_code          );
			alData.add(store_code         );
			alData.add(move_year          );
			alData.add(move_month         );

			

			stSQL = SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_MFG;

			hmArgData.put(DATA,alData);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
		}
		throwExceptionWhenFailed(hmResult);
		return hmResult;
	}
	
	public HashMap updateManufacturingReceipts(Connection connection, HashMap hmData){

		

		HashMap		hmResult	=	new HashMap();

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		HashMap		hmHeader	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();

		ArrayList	alItemTrnDtl=	new ArrayList();
		ArrayList	alDetail	=	new ArrayList();
		ArrayList	alExp		=	new ArrayList();
		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alDtlData	=	new ArrayList();
		//ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
		//ArrayList	alExpRecords=	new ArrayList();
		ArrayList	alItemTrnDtlRows=	new ArrayList();
		HashMap		hmItemInfo	=	new HashMap();
		int rec_high_no = 0;
		String		doc_no		="";
		boolean	isFinalized		=	false;
		boolean	isExtemp		=	false;
		String stSQL;

		try {
			hmCommon			=	(HashMap)	hmData.get("COMMON_DATA");
			hmHeader			=	(HashMap)	hmData.get("HDR_DATA");
 			
			isFinalized			=	((String)	hmHeader.get("finalized_yn")).equals("Y");
 			isExtemp			=	((String)	hmHeader.get("preparation_type")).equals("E");
			

			/*
UPDATE st_mfg_hdr SET EXPIRY_DATE=to_date(?,'dd/mm/yyyy'),BATCH_ID=?,BIN_LOCATION_CODE=?,trade_id=?,FINALIZED_YN=?,PREPARE_LOCATION_CODE =?,PATIENT_ID=?,ENCOUNTER_ID=?,PROCESS_LOSS_PERCENT=?,PREPARE_QTY=? ,MODIFIED_BY_ID=?,MODIFIED_DATE=SYSDATE,MODIFIED_AT_WS_NO=?,MODIFIED_FACILITY_ID=? WHERE FACILITY_ID=? AND DOC_TYPE_CODE=? AND DOC_NO=? AND MFG_REQUEST_NO=?	

*/

			double mfg_item_unit_cost=0.0;
			double mfg_item_cost=0.0;
			double mfg_item_cost_value=0.0;

			alDetail			=	(ArrayList)	hmData.get("DTL_DATA");

			for (int i=0;i<alDetail.size() ;i++ ) {
				HashMap hmDetail=(HashMap)alDetail.get(i);
				mfg_item_cost=mfg_item_cost+Double.parseDouble((String)hmDetail.get("mfg_cost_value"));
			}
			/* Commented on 12/7/2005 ... item_qty has to be considered not the prepare_qty
			mfg_item_unit_cost=mfg_item_cost/Integer.parseInt((String)hmHeader.get("prepare_qty"));
			mfg_item_cost_value=mfg_item_unit_cost*Integer.parseInt((String)hmHeader.get("prepare_qty"));*/


			mfg_item_unit_cost=mfg_item_cost/Double.parseDouble((String)hmHeader.get("item_qty"));
			mfg_item_cost_value=mfg_item_unit_cost*Double.parseDouble((String)hmHeader.get("item_qty"));
					/**
			 * @Name - Priya
			 * @Date - 07/06/2010
			 * @Inc# - 
			 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost 
			 */
			int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost(connection));
			mfg_item_unit_cost=Double.parseDouble(setNumber(""+mfg_item_unit_cost,noOfDecimalsForCost));
			mfg_item_cost_value=Double.parseDouble(setNumber(""+mfg_item_cost_value,noOfDecimalsForCost));

			

			alHdrData.add(hmHeader.get("expiry_date"));
			alHdrData.add(hmHeader.get("batch_id"));
			alHdrData.add(hmHeader.get("bin_location_code"));
			alHdrData.add(hmHeader.get("trade_id"));
			alHdrData.add(hmHeader.get("finalized_yn"));
			alHdrData.add(hmHeader.get("prepare_location_code"));
			alHdrData.add(hmHeader.get("patient_id"));
			alHdrData.add(hmHeader.get("encounter_id"));
			alHdrData.add(hmHeader.get("process_loss_percent"));
			alHdrData.add(hmHeader.get("prepare_qty"));
			alHdrData.add(""+mfg_item_unit_cost);
			alHdrData.add(""+mfg_item_cost_value);
			alHdrData.add(hmCommon.get("login_by_id"));
			alHdrData.add(hmCommon.get("login_at_ws_no"));
			alHdrData.add(hmCommon.get("login_facility_id"));
			alHdrData.add(hmHeader.get("remarks"));
			alHdrData.add(hmHeader.get("packed_by"));
			alHdrData.add(hmHeader.get("counter_by"));
			alHdrData.add(checkForNull(hmHeader.get("barcode_id"))); //15/05/12
			alHdrData.add(checkForNull(hmHeader.get("no_of_labels"))); //15/05/12
			

			alHdrData.add(hmHeader.get("facility_id"));
			alHdrData.add(hmHeader.get("doc_type_code"));
			alHdrData.add(hmHeader.get("doc_no"));
			if(hmHeader.get("mfg_request_no") != ""){
			 alHdrData.add(hmHeader.get("mfg_request_no"));
			 }
			doc_no=(String)hmHeader.get("doc_no");
			
			System.out.println("alHdrData====782===>" +alHdrData);
			
			
			//Added by Rabbani #Inc no:29950(Bru-HIMS-CRF-084) on 18-FEB-2013 Starts
			if(hmHeader.get("mfg_request_no") != ""){
			stSQL = SQL_ST_MFG_HDR_UPDATE;
			}else{
			stSQL = SQL_ST_MFG_HDR_DFLT_UPDATE;
			}

			hmArgData.put(DATA,alHdrData);
			//hmArgSQL.put(UPDATE_SQL,SQL_ST_MFG_HDR_UPDATE);
			hmArgSQL.put(UPDATE_SQL,stSQL);
 			hmResult	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			int trn_srl_no=1;
			if(isFinalized && !isExtemp) {
		
			alItemTrnDtl.add(hmHeader.get("facility_id"));
			alItemTrnDtl.add(hmHeader.get("store_code"));
			alItemTrnDtl.add(hmHeader.get("item_code"));
			alItemTrnDtl.add(""+trn_srl_no);
			alItemTrnDtl.add("MFG");
			alItemTrnDtl.add(hmHeader.get("doc_type_code"));
			alItemTrnDtl.add(hmHeader.get("doc_no"));
			alItemTrnDtl.add("0");
			alItemTrnDtl.add(hmHeader.get("doc_date"));
			alItemTrnDtl.add(hmHeader.get("doc_ref"));
			alItemTrnDtl.add(hmHeader.get("batch_id"));
			alItemTrnDtl.add(hmHeader.get("expiry_date"));
			alItemTrnDtl.add(hmHeader.get("prepare_qty"));
			alItemTrnDtl.add(""+mfg_item_unit_cost);
			alItemTrnDtl.add(hmHeader.get("stock_item_yn"));
			alItemTrnDtl.add(hmHeader.get("bin_location_code"));
			alItemTrnDtl.add(hmHeader.get("trade_id"));
			alItemTrnDtl.add(hmHeader.get("uom_code"));
			alItemTrnDtl.add(hmCommon.get("login_by_id"));
			alItemTrnDtl.add(hmCommon.get("login_at_ws_no"));
			alItemTrnDtl.add(hmCommon.get("login_facility_id"));

			alItemTrnDtl.add(hmCommon.get("login_by_id"));
			alItemTrnDtl.add(hmCommon.get("login_at_ws_no"));
			alItemTrnDtl.add(hmCommon.get("login_facility_id"));

			hmArgData.put(DATA,alItemTrnDtl);
			hmArgSQL.put(INSERT_SQL,SQL_ST_MFG_TRN_DTL);
			hmResult	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
			
		
			

		
			HashMap hmParametersCuos = new HashMap();
			HashMap hmSQLCuos = new HashMap();
			hmSQLCuos.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
			hmSQLCuos.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
			hmSQLCuos.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
			hmSQLCuos.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);

					
				//float unit_val	=0.0f;
				//unit_val=Integer.parseInt((String)hmHeader.get("item_qty"))*Float.parseFloat((String)hmHeader.get("mfg_item_unit_cost"));

				hmParametersCuos.put("item_code",hmHeader.get("item_code"));
				hmParametersCuos.put("store_code",hmHeader.get("store_code"));
				hmParametersCuos.put("trn_type","MFG");
//				hmParametersCuos.put("trn_qty",hmHeader.get("prepare_qty"));
				hmParametersCuos.put("trn_qty",hmHeader.get("item_qty"));
				hmParametersCuos.put("mm_trn_qty",hmHeader.get("item_qty"));//Added by Rabbani for Unit_cost calculation on 22-MAR-2013 
				hmParametersCuos.put("trn_unit_cost",""+mfg_item_unit_cost);
				//hmParametersCuos.put("trn_value",""+unit_val);
				hmParametersCuos.put("trn_value",""+mfg_item_cost_value);
				
				hmParametersCuos.put("from_stk_item_yn",hmHeader.get("stock_item_yn"));
				hmParametersCuos.put("last_issue_date",hmHeader.get("doc_date"));
				hmParametersCuos.put("login_by_id",			hmCommon.get("login_by_id"));
				hmParametersCuos.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
				hmParametersCuos.put("login_facility_id",	hmCommon.get("login_facility_id"));

				try{
						calculateAndUpdateOnlineStock (connection, hmSQLCuos, hmParametersCuos);
//						rec_high_no = rec_high_no + 1;
					}catch(Exception exception){
							hmResult.put(RESULT,FALSE);
							hmResult.put(MSGID,exception.toString());
							hmResult.put(MESSAGE,"NEGATIVE_STOCK");
							hmResult.put("flag", "" + "~" + hmHeader.get("item_code"));
							exception.printStackTrace();
							return(hmResult);
					}

			HashMap hmParameters = new HashMap();
			HashMap hmSQL		 = new HashMap();

			hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
			hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
			hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
			hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
			hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
			hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
			hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);

			hmParameters.put("item_code",hmHeader.get("item_code"));
			hmParameters.put("store_code",hmHeader.get("store_code"));
			hmParameters.put("trn_type","MFG");
//			hmParameters.put("trn_qty",hmHeader.get("prepare_qty"));
			hmParameters.put("trn_qty",hmHeader.get("item_qty"));
			hmParameters.put("batch_id",hmHeader.get("batch_id"));
			hmParameters.put("expiry_date_or_receipt_date",hmHeader.get("expiry_date"));
			hmParameters.put("trade_id",hmHeader.get("trade_id"));
			hmParameters.put("from_bin_location_code",hmHeader.get("bin_location_code"));
			hmParameters.put("suspended_batch_allowed_yn","Y");
			hmParameters.put("release_batch_yn","N");
			hmParameters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date
			hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
			hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
			hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));
			hmParameters.put("barcode_id",	        checkForNull(hmHeader.get("barcode_id")));
			System.out.println("hmParameters====257 commm===>" +hmParameters);
			updateBatchOnLine(connection, hmSQL, hmParameters);

				hmResult	=	insertOrUpdateItemMoveSummaryforManReceipt(connection, hmParametersCuos);
				throwExceptionWhenFailed(hmResult);
	}

//dtl logic
			alDetail			=	(ArrayList)	hmData.get("DTL_DATA");

			for (int i=0;i<alDetail.size() ;i++ ) {
				HashMap hmDetail		=	(HashMap)alDetail.get(i);
				//ArrayList alDtlRecord	=	new ArrayList();
				int iMode	=	Integer.parseInt((String)hmDetail.get("mode"));

				switch (iMode){
					case 0:{//delete
						ArrayList alDeleteRecord	=	new ArrayList();

						alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
						alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
						alDeleteRecord.add(hmHeader.get("doc_no"));	//doc_no
						alDeleteRecord.add(hmDetail.get("doc_srl_no"));//put doc_srl_no at last..
///
						ArrayList alRecords	=	fetchRecords(connection, SQL_ST_MFG_DTL_EXP_SELECT_FOR_BLOCK_REL, alDeleteRecord);

						for (int j=0; j<alRecords.size(); j++) {
							HashMap hmRecord	=	(HashMap)alRecords.get(j);
							HashMap hmParameter	=	new HashMap();
							hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
							hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
							hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
							hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
							hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE"));
							hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
							hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
							hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
							hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

							hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
							throwExceptionWhenFailed(hmResult);
						}

						hmArgData.put(DATA,alDeleteRecord);
						hmArgSQL.put(DELETE_SQL,SQL_ST_MFG_EXP_DELETE);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);

						hmArgSQL.put(DELETE_SQL,SQL_ST_MFG_DTL_DELETE);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);

						break;
					}
					
					case 2:{//update
						ArrayList alDeleteRecord	=	new ArrayList();

						alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
						alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
						alDeleteRecord.add(hmHeader.get("doc_no"));	//doc_no
						alDeleteRecord.add(hmDetail.get("doc_srl_no"));//put doc_srl_no at last..
///release batch
						ArrayList alRecords	=	fetchRecords(connection, SQL_ST_MFG_DTL_EXP_SELECT_FOR_BLOCK_REL, alDeleteRecord);

						for (int j=0; j<alRecords.size(); j++) {
							HashMap hmRecord	=	(HashMap)alRecords.get(j);
							HashMap hmParameter	=	new HashMap();
							hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
							hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
							hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
							hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
							hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE"));
							hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
							hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
							hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
							hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

							hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
							throwExceptionWhenFailed(hmResult);
						}
///
						hmArgData.put(DATA,alDeleteRecord);
						hmArgSQL.put(DELETE_SQL,SQL_ST_MFG_EXP_DELETE);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);

									
						ArrayList alDtlRecord	=	new ArrayList();
						alDtlRecord.add(hmDetail.get("child_item_qty"));
						alDtlRecord.add(setNumber(((String)hmDetail.get("item_unit_cost")),noOfDecimalsForCost));
						alDtlRecord.add(hmDetail.get("stock_item_yn"));
						
						alDtlRecord.add(hmDetail.get("child_item_trans_qty"));
						alDtlRecord.add(setNumber(((String)hmDetail.get("mfg_cost_value")),noOfDecimalsForCost));
						
						alDtlRecord.add(checkForNull(hmDetail.get("mfg_uom_code")));
						alDtlRecord.add(hmCommon.get("login_by_id"));
						alDtlRecord.add(hmCommon.get("login_at_ws_no"));
						alDtlRecord.add(hmCommon.get("login_facility_id"));
						alDtlRecord.add(hmHeader.get("facility_id"));
						alDtlRecord.add(hmHeader.get("doc_type_code"));
						alDtlRecord.add(hmHeader.get("doc_no"));
				
						alDtlRecord.add(hmDetail.get("doc_srl_no"));
						alDtlRecord.add(hmDetail.get("child_item_code"));

						alDtlData.add(alDtlRecord);	

						if(isFinalized) {
//itm info logic
						HashMap hmTemp	=	new HashMap();
						hmTemp.put("item_unit_cost", hmDetail.get("item_unit_cost"));
						hmTemp.put("item_unit_price", hmDetail.get("item_unit_price"));
						hmTemp.put("uom_code", hmDetail.get("uom_code"));
						hmTemp.put("stock_item_yn", hmDetail.get("stock_item_yn"));
						hmItemInfo.put((String)hmDetail.get("item_code"),hmTemp);
	//
						HashMap hmSQL = new HashMap();
						hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
						hmSQL.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
						hmSQL.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
						hmSQL.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);

						HashMap hmParameters = new HashMap();
						hmParameters.put("item_code",hmDetail.get("child_item_code"));
						hmParameters.put("store_code",hmHeader.get("store_code"));
						hmParameters.put("trn_type","SAL");
						hmParameters.put("trn_qty","-"+hmDetail.get("child_item_trans_qty"));
						hmParameters.put("mm_trn_qty","-"+hmDetail.get("child_item_trans_qty")); //Added by Rabbani for Unit_cost calculation on 22-MAR-2013 
						hmParameters.put("trn_unit_cost",setNumber(((String)hmDetail.get("item_unit_cost")),noOfDecimalsForCost));
						hmParameters.put("trn_value","-"+setNumber(((String)hmDetail.get("mfg_cost_value")),noOfDecimalsForCost));
						hmParameters.put("from_stk_item_yn",hmDetail.get("stock_item_yn"));

						hmParameters.put("last_issue_date",hmHeader.get("doc_date"));

						hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
						hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
						hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));

	//					calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
				try{
						calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
						rec_high_no = rec_high_no + 1;
					}catch(Exception exception){
							hmResult.put(RESULT,FALSE);
							hmResult.put(MSGID,exception.toString());
							hmResult.put(MESSAGE,"NEGATIVE_STOCK");
							hmResult.put("flag",rec_high_no+"~"+hmDetail.get("child_item_code"));
							exception.printStackTrace();
							return(hmResult);
					}

       				    

						hmResult	=	insertOrUpdateItemMoveSummaryforManReceipt(connection, hmParameters);
						throwExceptionWhenFailed(hmResult);

					}
			}

				hmArgData.put(DATA,alDtlData);
				hmArgSQL.put(BATCH_SQL,SQL_ST_MFG_DTL_UPDATE);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

				}
			}
			alExp	=	(ArrayList)hmData.get("DTL_EXP_DATA");
			for (int i=0;i<alExp.size() ;i++ ) {
				HashMap hmExpRecord		= (HashMap)alExp.get(i);
				ArrayList alExpRecord	= new ArrayList();

				alExpRecord.add(hmHeader.get("facility_id"));
				alExpRecord.add(hmHeader.get("doc_type_code"));
				alExpRecord.add(hmHeader.get("doc_no"));

				alExpRecord.add( hmExpRecord.get("doc_srl_no"));
				alExpRecord.add(hmHeader.get("store_code"));
				alExpRecord.add(hmExpRecord.get("item_code"));
				alExpRecord.add(hmExpRecord.get("batch_id"));
				alExpRecord.add(hmExpRecord.get("bin_location_code"));
				alExpRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
				alExpRecord.add(hmExpRecord.get("trade_id"));
				alExpRecord.add(hmExpRecord.get("item_qty"));
			

				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));
				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));
				//alExpRecord.add(checkForNull(hmExpRecord.get("barcode_id"))); //15/05/12

				alExpData.add(alExpRecord);

//TO BE CHECKED..
				if (isFinalized) {
					HashMap hmParamaters = new HashMap();
					HashMap hmSQL		 = new HashMap();

					hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
					hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
					hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
					hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
					hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
					hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
					hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);


					hmParamaters.put("item_code",hmExpRecord.get("item_code"));
					hmParamaters.put("store_code",hmHeader.get("store_code"));
					hmParamaters.put("trn_type","MFG");
					hmParamaters.put("trn_qty","-"+hmExpRecord.get("item_qty"));
					hmParamaters.put("batch_id",hmExpRecord.get("batch_id"));
					hmParamaters.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
					hmParamaters.put("trade_id",hmExpRecord.get("trade_id"));
					hmParamaters.put("from_bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParamaters.put("suspended_batch_allowed_yn","Y");
					hmParamaters.put("release_batch_yn","N");

					hmParamaters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date

					hmParamaters.put("login_by_id",			hmCommon.get("login_by_id"));
					hmParamaters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
					hmParamaters.put("login_facility_id",	hmCommon.get("login_facility_id"));
					//hmParamaters.put("barcode_id",hmExpRecord.get("barcode_id")); //16/05/12
					
					updateBatchOnLine(connection, hmSQL, hmParamaters);
///
					trn_srl_no++;
					ArrayList ItemTrnDtlRecord	=	new ArrayList();
//					HashMap	hmTempItemInfo		=	(HashMap)hmItemInfo.get((String)hmExpRecord.get("item_code"));
					ItemTrnDtlRecord.add(hmHeader.get("facility_id"));
					ItemTrnDtlRecord.add(hmHeader.get("store_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("item_code"));
					ItemTrnDtlRecord.add(""+trn_srl_no);//trn_srl_no
					ItemTrnDtlRecord.add("MFG");
					ItemTrnDtlRecord.add(hmHeader.get("doc_type_code"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_no"));
					ItemTrnDtlRecord.add(hmExpRecord.get("doc_srl_no"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_date"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_ref"));
					ItemTrnDtlRecord.add(hmExpRecord.get("batch_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
					ItemTrnDtlRecord.add("-"+hmExpRecord.get("item_qty"));//normal_qty
					ItemTrnDtlRecord.add(setNumber(((String)hmExpRecord.get("unit_cost")),noOfDecimalsForCost));
					ItemTrnDtlRecord.add("Y");
					ItemTrnDtlRecord.add(hmExpRecord.get("bin_location_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("trade_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("uom_code"));
 					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));

					alItemTrnDtlRows.add(ItemTrnDtlRecord);
///
				}
				else{//Batch blocking logic follows:
					HashMap hmParameter	=	new HashMap();
					hmParameter.put("store_code",hmHeader.get("store_code"));
					hmParameter.put("item_code",hmExpRecord.get("item_code"));
					hmParameter.put("batch_id",hmExpRecord.get("batch_id"));
					hmParameter.put("bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParameter.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
					hmParameter.put("trn_qty",hmExpRecord.get("item_qty"));

					hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
					hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
					hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

					hmResult	=	blockReleaseBatch(connection, hmParameter, 'B');
					throwExceptionWhenFailed(hmResult);
				}

			}
			hmArgData.put(DATA,alExpData);
			hmArgSQL.put(BATCH_SQL,SQL_ST_MAN_RECEIPT_EXP_INSERT);
			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			if (isFinalized) {
				hmArgData.put(DATA,alItemTrnDtlRows);
				hmArgSQL.put(BATCH_SQL,SQL_ST_MFG_TRN_DTL);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
			}

		}
		catch (Exception exception) {
			exception.printStackTrace();
			hmResult.put(RESULT,FALSE);
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			hmResult.put("flag",rec_high_no+"");
		}
		hmResult.put("doc_no", doc_no);
		return hmResult;
	}

	public HashMap deleteManufacturingReceipts(Connection connection, HashMap hmData){
		HashMap		hmResult	=	new HashMap();

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		HashMap		hmCommon	=	new HashMap();
		HashMap		hmPKData	=	new HashMap();

		ArrayList	alData		=	new ArrayList();

		try {
			hmPKData		=	(HashMap)	hmData.get("DATA");
			hmCommon		=	(HashMap)	hmData.get("COMMON_DATA");

			alData.add(hmPKData.get("facility_id"));	//facility_id
			alData.add(hmPKData.get("doc_type_code"));	//doc_type_code
			alData.add(hmPKData.get("doc_no"));	//doc_no
			//alData.add("%");//put doc_srl_no at last..
///
			ArrayList alRecords	=	fetchRecords(connection, SQL_ST_MFG_EXP_SELECT_ALL_DOC, alData);

			for (int j=0; j<alRecords.size(); j++) {
				HashMap hmRecord	=	(HashMap)alRecords.get(j);
				HashMap hmParameter	=	new HashMap();
				hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
				hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
				hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
				hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
				hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE"));
				hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
				hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
				hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
				hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

				hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
				throwExceptionWhenFailed(hmResult);
			}

			//alData.remove(3);//remove doc_srl_no

			hmArgData.put(DATA, alData);

			hmArgSQL.put(DELETE_SQL,SQL_ST_MFG_EXP_DELETE_ALL);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,SQL_ST_MFG_DTL_DELETE_ALL);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,SQL_ST_MFG_HDR_DELETE_ALL);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
		}
		catch (Exception exception) {
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			exception.printStackTrace();
		}

		return hmResult;
	}
/*
	public HashMap blockReleaseBatch(Connection connection, HashMap hmParameter, char blockReleaseFlag){

		HashMap hmArgData		=	new HashMap();
		HashMap hmArgSQL		=	new HashMap();
		HashMap hmResult		=	new HashMap();
		ArrayList alParameters	=	new ArrayList();

	String store_code		=	(String)hmParameter.get("store_code");
		String item_code		=	(String)hmParameter.get("item_code");
		String batch_id			=	(String)hmParameter.get("batch_id");
		String bin_location_code=	(String)hmParameter.get("bin_location_code");
		String expiry_date_or_receipt_date	=	(String)hmParameter.get("expiry_date_or_receipt_date");
		String trn_qty	=	(String)hmParameter.get("trn_qty");

		String login_by_id			=	(String)hmParameter.get("login_by_id");
		String login_at_ws_no		=	(String)hmParameter.get("login_at_ws_no");
		String login_facility_id	=	(String)hmParameter.get("login_facility_id");



		try {
			if (blockReleaseFlag=='R')
				trn_qty="-"+trn_qty;
			else if (blockReleaseFlag=='B'){
			}
			else{
				throw new Exception("INVALID_FLAG_FOR_BLOCK_RELEASE");
			}

			alParameters.add(trn_qty);
			alParameters.add(login_by_id		);
			alParameters.add(login_at_ws_no		);
			alParameters.add(login_facility_id	);

			alParameters.add(store_code);
			alParameters.add(item_code);
			alParameters.add(batch_id);
			alParameters.add(bin_location_code);
			alParameters.add(expiry_date_or_receipt_date);

			hmArgData.put(DATA, alParameters);
			hmArgSQL.put(UPDATE_SQL,SQL_ST_ITEM_BATCH_FOR_SAL);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
		}
		catch (Exception exception) {
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			exception.printStackTrace();
		}
		return hmResult;
	}
*/
	public ManufacturingReceipts(){
	
		SQL_ST_ITEM_BATCH_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_FOR_SAL");
		SQL_ST_GET_MONTH_AND_YEAR		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_MONTH_AND_YEAR");
		SQL_ST_CHECK_SUMMARY_EXISTS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_SUMMARY_EXISTS");
		SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT");
		SQL_ST_CHECK_BATCH_EXISTS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_BATCH_EXISTS");
		SQL_ST_BATCH_CONTROL_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_BATCH_CONTROL_INSERT");
		SQL_ST_CHECK_ITEM_BATCH_EXISTS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_ITEM_BATCH_EXISTS");
		SQL_ST_ITEM_BATCH_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_INSERT");
		SQL_ST_GET_ITEM_BATCH_STOCK_POS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_ITEM_BATCH_STOCK_POS");
		SQL_ST_ITEM_BATCH_DELETE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_DELETE");
		SQL_ST_ITEM_BATCH_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_UPDATE");
		SQL_ST_ITEM_VALUE_SELECT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_VALUE_SELECT1");
		SQL_ST_ITEM_MASTER_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MASTER_UPDATE");
		SQL_ST_GET_ITEM_STORE_STOCK_POS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_ITEM_STORE_STOCK_POS");
		SQL_ST_ITEM_STORE_QTY_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_STORE_QTY_UPDATE");
		SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL");
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT	= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT");
		SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE	= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE");
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG	= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG");

		SQL_ST_MAN_RECEIPT_HDR_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MAN_RECEIPT_HDR_INSERT");
		SQL_ST_MAN_RECEIPT_DTL_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MAN_RECEIPT_DTL_INSERT");
		SQL_ST_MAN_RECEIPT_EXP_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MAN_RECEIPT_EXP_INSERT");
		SQL_ST_MAN_RECEIPT_STATUS_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MAN_RECEIPT_STATUS_UPDATE");
		SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_MFG		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_MFG");
		SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_MFG		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_MFG");
		SQL_ST_MFG_HDR_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_HDR_UPDATE");
		SQL_ST_MFG_DTL_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_DTL_UPDATE");
		//SQL_ST_MFG_DTL_UPDATE		= "UPDATE st_mfg_dtl SET CHILD_ITEM_QTY=? ,ITEM_UNIT_COST=?,STOCK_ITEM_YN=?,CHILD_ITEM_TRANS_QTY=?,MFG_COST_VALUE =?,mfg_uom_code=? ,MODIFIED_BY_ID=?,MODIFIED_DATE=SYSDATE, MODIFIED_AT_WS_NO=? , MODIFIED_FACILITY_ID=?  WHERE FACILITY_ID=?  AND  DOC_TYPE_CODE=? AND DOC_NO=? AND DOC_SRL_NO=? AND CHILD_ITEM_CODE=? ";
		SQL_ST_MFG_EXP_DELETE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_EXP_DELETE");
		SQL_ST_MFG_EXP_DELETE_ALL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_EXP_DELETE_ALL");
		SQL_ST_MFG_EXP_SELECT_ALL_DOC		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_EXP_SELECT_ALL_DOC");
		SQL_ST_MFG_DTL_DELETE_ALL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_DTL_DELETE_ALL");
		SQL_ST_MFG_HDR_DELETE_ALL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_HDR_DELETE_ALL");
		SQL_ST_MFG_DTL_EXP_SELECT_FOR_BLOCK_REL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_DTL_EXP_SELECT_FOR_BLOCK_REL");
		SQL_ST_MFG_RECEIPT_STOCK_ITEM_YN		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_RECEIPT_STOCK_ITEM_YN");
		SQL_ST_MFG_TRN_DTL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_TRN_DTL");
		SQL_ST_MFG_DTL_DELETE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_DTL_DELETE");
		SQL_ST_MFG_HDR_DFLT_UPDATE   = eST.Common.StEJBRepository.getStKeyValue("SQL_ST_MFG_HDR_DFLT_UPDATE"); //Added by Rabbani #Inc no:29950(Bru-HIMS-CRF-084) on 18-FEB-2013  
	}

	//String SQL_ST_SAL_HDR_UPDATE_FOR_SAL;
	//String SQL_ST_SAL_HDR_INSERT_FOR_SAL;
	//String SQL_ST_SAL_HDR_DELETE_FOR_SAL;
	//String SQL_ST_SAL_DTL_UPDATE_FOR_SAL;
	//String SQL_ST_SAL_DTL_INSERT_FOR_SAL;
	//String SQL_ST_SAL_DTL_DELETE_FOR_SAL;
	//String SQL_ST_SAL_DTL_DELETE_ALL_FOR_SAL;
	String SQL_ST_ITEM_BATCH_FOR_SAL;

	String SQL_ST_GET_MONTH_AND_YEAR;
	String SQL_ST_CHECK_SUMMARY_EXISTS;
	String SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT;

	String SQL_ST_CHECK_BATCH_EXISTS;
	String SQL_ST_BATCH_CONTROL_INSERT;
	String SQL_ST_CHECK_ITEM_BATCH_EXISTS;
	String SQL_ST_ITEM_BATCH_INSERT;
	String SQL_ST_GET_ITEM_BATCH_STOCK_POS;
	String SQL_ST_ITEM_BATCH_DELETE;
	String SQL_ST_ITEM_BATCH_UPDATE;
	String SQL_ST_ITEM_VALUE_SELECT;
	String SQL_ST_ITEM_MASTER_UPDATE;
	String SQL_ST_GET_ITEM_STORE_STOCK_POS;
	String SQL_ST_ITEM_STORE_QTY_UPDATE;
	String SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL;
	String SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT;
	String SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE;
    String SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG;

	// Receipts
	String SQL_ST_MAN_RECEIPT_HDR_INSERT	;
	String SQL_ST_MAN_RECEIPT_DTL_INSERT	;
	String SQL_ST_MAN_RECEIPT_EXP_INSERT	;
	String SQL_ST_MAN_RECEIPT_STATUS_UPDATE	;

	String SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_MFG	;
	String SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_MFG;
	String SQL_ST_MFG_HDR_UPDATE	;
	String SQL_ST_MFG_DTL_UPDATE	;
	String SQL_ST_MFG_EXP_DELETE	;
	String SQL_ST_MFG_EXP_DELETE_ALL	;
	String SQL_ST_MFG_EXP_SELECT_ALL_DOC	;
	String SQL_ST_MFG_DTL_DELETE_ALL	;
	String SQL_ST_MFG_HDR_DELETE_ALL	;
	String SQL_ST_MFG_DTL_EXP_SELECT_FOR_BLOCK_REL;
	String SQL_ST_MFG_RECEIPT_STOCK_ITEM_YN;
	String SQL_ST_MFG_TRN_DTL;
	String SQL_ST_MFG_DTL_DELETE;
	String SQL_ST_MFG_HDR_DFLT_UPDATE; //Added by Rabbani #Inc no:29950(Bru-HIMS-CRF-084) on 18-FEB-2013
}

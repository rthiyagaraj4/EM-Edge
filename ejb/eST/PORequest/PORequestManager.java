/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
package eST.PORequest;
import javax.ejb.SessionContext;
import javax.ejb.EJBException;
import eCommon.Common.*;
import eST.Common.StEJBSessionAdapter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

/**
*
* @ejb.bean
*	name="PORequest"
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="PORequest"
*	local-jndi-name="PORequest"
*	impl-class-name="eST.PORequest.PORequestManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="eST.PORequest.PORequestLocal"
*	remote-class="eST.PORequest.PORequestRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="eST.PORequest.PORequestLocalHome"
*	remote-class="eST.PORequest.PORequestHome"
*	generate= "local,remote"
*
*
*/


public class  PORequestManager extends StEJBSessionAdapter {
//	public SessionContext context = null;
	public void setSessionContext( SessionContext sessionContext) {
		super.setSessionContext(sessionContext);
		this.context = sessionContext;
	}
	///Function for handling generic operation..
	String sql_sy_acc_entity_doc_type_select;	
	String sql_sy_acc_entity_doc_type_select_flag;

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap insert(HashMap hmData, HashMap hmSQL)	{
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql =	"";
		ArrayList alData = null;
		ArrayList alRecord = null;
		Properties properties = null;
		ArrayList doc_no = new ArrayList();
		String doc_no_temp = "";
		String   trn_type		=	"PRQ";
		int      sizeOfTrn		=	1;
		int      trnRecords		=	1;

		boolean isUpdateSuccessful = true;
		boolean isDocNoAutoGenerated	=	false;
		int iResult = 0;
		int failedRecordIndex = -1;
		int[] iaResult = null;
		int sResult = 0;
		hmReturn.put(RESULT,FALSE);
		//	ArrayList	alDtlData1			=	(ArrayList)	hmData.get("InsertDTLData");
			System.out.flush();
			ArrayList	alStatusData			=	null;

		try {
			properties =	(Properties) hmData.get("properties");
			connection = getConnection(properties);
			connection.setAutoCommit(false);

			String 	sql_st_records_per_trn_select		=	(String)hmSQL.get ("sql_st_records_per_trn_select");
			HashMap records	=	fetchRecord(connection, sql_st_records_per_trn_select,trn_type);
		
			int records_per_trn = 0;
			int all_mm_item_code_size = 1;
			String po_request_by=(String)hmData.get("PO_REQUEST_BY");
			sql_sy_acc_entity_doc_type_select_flag	=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select_flag");
			alData =	(ArrayList) hmData.get("InsertHDRData");
			HashMap hmRecord	=	fetchRecord(connection, sql_sy_acc_entity_doc_type_select_flag, (String)alData.get(1));
			isDocNoAutoGenerated=	checkForNull((String)hmRecord.get("DOC_NUM_GEN_FLAG"),"N").equals("Y");

			HashMap final_dtl=(HashMap) hmData.get("FINAL_DTL");
			ArrayList all_mm_item_code=new ArrayList();
			if(!po_request_by.equals("NA")){ 
			all_mm_item_code=(ArrayList) final_dtl.get("ALL_MM_ITEM_CODE");
			all_mm_item_code_size=all_mm_item_code.size();
			}
			if(po_request_by.equals("NA")){
			all_mm_item_code_size=1;
			ArrayList	alDtlData1			=	(ArrayList)	final_dtl.get("FINAL_DTL");
			if((String)records.get("RECORDS_PER_TRN")!=null && isDocNoAutoGenerated){
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			}else{
				records_per_trn = alDtlData1.size();

			}

			if(records_per_trn>alDtlData1.size())
				sizeOfTrn = 1;
				//sizeOfTrn = alDtlData1.size();
			else if((alDtlData1.size()%records_per_trn)==0)
				sizeOfTrn = alDtlData1.size()/records_per_trn;
			else
				sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;

			}else{
				sizeOfTrn = all_mm_item_code_size;
			}

		

			sql_sy_acc_entity_doc_type_select		=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select");
			
			// Insert Header Value
			for(int j=0,k=0;j<sizeOfTrn;j++){
				alData =	(ArrayList) hmData.get("InsertHDRData");

			
				if (isDocNoAutoGenerated) {

					doc_no_temp = 	(String)fetchRecord(connection, sql_sy_acc_entity_doc_type_select, (String)alData.get(1)).get("NEXT_DOC_NO");

				}else{
				doc_no_temp=(String)alData.get(2);
		
				}


				alData.set(2,doc_no_temp);
				if(po_request_by.equals("MG")){
					alData.set(5,all_mm_item_code.get(j));
				}
				else if(po_request_by.equals("IC")){
					alData.set(6,all_mm_item_code.get(j));
				}
				doc_no.add((String)alData.get(2));
				sql = (String) hmSQL.get	("InsertHDRSQL");
				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement,alData);
				iResult = preparedStatement.executeUpdate();
				if(preparedStatement!=null)
						preparedStatement.close();
				if(iResult != 0) {
					hmReturn.put(RESULT,TRUE);
					hmReturn.put(MSGID,RECORD_INSERTED);
				}
				else {
					connection.rollback();
					throw new EJBException("Insert failed in header");
				}


				// Insert Detail Value
				sql = null;
				alData =null;
				if(po_request_by.equals("NA")){
				alData = (ArrayList)	((HashMap)hmData.get ("FINAL_DTL")).get("FINAL_DTL");
				//alData = (ArrayList)	hmData.get ("InsertDTLData");
				}else{
					alData = (ArrayList)((HashMap)((HashMap)hmData.get("FINAL_DTL")).get("FINAL_DTL")).get(all_mm_item_code.get(j));
				}
				sql = (String)	hmSQL.get	("InsertDTLSQL");
				preparedStatement = connection.prepareStatement(sql);
				if(po_request_by.equals("NA")){
				if(records_per_trn>alData.size())
					trnRecords = alData.size();
				else if((k+records_per_trn)>=alData.size())
					trnRecords = alData.size();
				else
					trnRecords = k+records_per_trn;
				}else{
					trnRecords = alData.size();
				}
				for (int index = k; index < trnRecords; index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					alRecord.set(2,doc_no_temp);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				try{
				iaResult = preparedStatement.executeBatch();
				}catch(Exception exception){
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MSGID,exception.toString());
				connection.rollback();
				return hmReturn;
				}
				if(preparedStatement!=null)
						preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
				}


				if (hmSQL.containsKey("UpdateITMSQL") && hmData.containsKey("FINAL_DTL")) {
					sql = null;
					alData = null;
					alData = (ArrayList)	((HashMap)hmData.get ("FINAL_DTL")).get("ALUPDATEITEMDATA");
					sql = (String)	hmSQL.get	("UpdateITMSQL");
					preparedStatement = connection.prepareStatement(sql);
					for (int index = k; index < trnRecords; index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
						preparedStatement.close();
					//preparedStatement.clearParameters();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
					}
				}
				
				iaResult = null;
				sql = null;
				alData = null;
			
				alStatusData =	(ArrayList) hmData.get("alRequestStatusInsertRecord");

				sql = (String) hmSQL.get	("InsertStatusDTLSQL");
				preparedStatement = connection.prepareStatement(sql);
				alStatusData.set(2,doc_no_temp);
				String status_srl_no="1";
				try{
				status_srl_no=(String)fetchRecord(connection,"select ST_STATUS_SRL_NO.nextval count  from dual").get("COUNT");
				}catch (Exception e){
				e.printStackTrace();

				}

				alStatusData.set(3,status_srl_no);
				setData(preparedStatement,alStatusData);
				sResult = preparedStatement.executeUpdate();
				if(preparedStatement!=null)
						preparedStatement.close();
				if(sResult != 0) {
					hmReturn.put(RESULT,TRUE);
					hmReturn.put(MSGID,RECORD_INSERTED);
				}else {
				connection.rollback();
				throw new EJBException("Insert Status table failed");
				}
				preparedStatement = null;
				alStatusData=null;
				sql = null;
			


	

				
				//Update the document no
				ArrayList allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
				String locale=(String)allanguageData.get(0);
				if (isDocNoAutoGenerated) {
					String s  = "";
					String s1 = "";
					sql = (String)	hmSQL.get	("UpdateSQL");
					alData = (ArrayList)	hmData.get ("UpdateData");
					preparedStatement = connection.prepareStatement(sql);
					setData(preparedStatement,alData);
					iResult = preparedStatement.executeUpdate();
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}
					hmReturn.put("flag",s1);
					if(preparedStatement!=null)
							preparedStatement.close();
					if(iResult<=0){
						connection.rollback();
						throw new SQLException("Update of Document No failed");
					}
				}
				// After successful insertion and updation 
			k=k+records_per_trn;
			}
				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_INSERTED);
				if (connection!=null) {
						closeConnection(connection,properties);	
				}
		}catch(SQLException sqlException) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				if(sqlException.getErrorCode()==1) {
					hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
					hmReturn.put(MSGID,CODE_ALREADY_EXISTS);

				}
				else {
					hmReturn.put(MESSAGE,sqlException.toString());
				}
				sqlException.printStackTrace();
			}
			catch (Exception exception) {
				exception.printStackTrace(); 
			}
        }
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				hmReturn.put(MSGID,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace(); 
			}
        }
		finally{
			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				if (connection!=null) {
					closeConnection(connection,(Properties)hmData.get(properties));	
				}
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		} 
	
		hmReturn.put("doc_no",doc_no);

		return hmReturn;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap modify(HashMap hmData, HashMap hmSQL)	 {
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		ArrayList alData =	new ArrayList();
		ArrayList	 alRecord =	new ArrayList();
		Properties properties = null;
		String sql =	"";
		int iResult =	0;
		ArrayList	alStatusData			=	null;
	
		int iaResult[] = null;
		int sResult = 0;
		boolean isUpdateSuccessful = true;
		hmReturn.put(RESULT,FALSE);
		hmReturn.put(MESSAGE,"No records found to be modified..");
		properties =	(Properties) hmData.get("properties");
		try {
			connection = getConnection(properties);
			connection.setAutoCommit(false);
			alData =	(ArrayList)	hmData.get ("UpdateData");
			sql = (String)	hmSQL.get	("UpdateSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult	 =	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult!=0){
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_MODIFIED);
			}
			alData = null;
			sql = null;
			if (hmData.containsKey("DeleteDTLData") && hmSQL.containsKey("DeleteDTLSQL")) {
				alData = (ArrayList)	hmData.get ("DeleteDTLData");
				sql = (String)	hmSQL.get	("DeleteDTLSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
					preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record");
					}
				}
			}
			alData = null;
			sql = null;
			if (hmData.containsKey("UpdateDTLData") && hmSQL.containsKey("UpdateDTLSQL")) {
				alData = (ArrayList)	hmData.get ("UpdateDTLData");
				sql = (String)	hmSQL.get	("UpdateDTLSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
					preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++) {
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record");
					}	
				}
			}
			if (hmData.containsKey("InsertDTLData") && hmSQL.containsKey("InsertDTLSQL")) {
				alData = (ArrayList)	hmData.get ("InsertDTLData");
				sql = (String)	hmSQL.get	("InsertDTLSQL");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				if(preparedStatement!=null)
					preparedStatement.close();
				//preparedStatement.clearParameters();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						isUpdateSuccessful = false;
						break;
					}	
				}
			}
			alData = null;
			sql = null;
			// Update Item Store
			if (hmSQL.containsKey("UpdateITMSQL") && hmData.containsKey("UpdateITMData")) {
				sql = null;
				alData = null;
				preparedStatement = null;
				alData = (ArrayList)	hmData.get ("UpdateITMData");
				sql = (String)	hmSQL.get	("UpdateITMSQL");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				//preparedStatement.clearParameters();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record");
				}
			}
			if(isUpdateSuccessful){
				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_MODIFIED);
			}

				alStatusData =	(ArrayList) hmData.get("alRequestStatusInsertRecord");

				sql = (String) hmSQL.get	("InsertStatusDTLSQL");
				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement,alStatusData);
				sResult = preparedStatement.executeUpdate();
				if(preparedStatement!=null)
						preparedStatement.close();
				if(sResult != 0) {
					hmReturn.put(RESULT,TRUE);
					hmReturn.put(MSGID,RECORD_INSERTED);
				}else {
				connection.rollback();
				throw new EJBException("Insert Status table failed");
				}



					closeConnection(connection,properties);	
}
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MSGID,exception.toString());
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace();
			}
        }
		finally{
 			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				closeConnection(connection,(Properties)hmData.get(properties));	
			}
			catch (Exception subexception){
				subexception.printStackTrace();
			}
		}
		return hmReturn;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap delete(HashMap hmData, HashMap hmSQL)	{
		Connection connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql = "";
		Properties properties = null;
		ArrayList alData =	new ArrayList();
//		ArrayList alRecords =	new ArrayList();
		ArrayList alRecord =	new ArrayList();
		int iaResult[] = null;
		boolean isUpdateSuccessful = true;
		int iResult = 0;
		properties =	(Properties) hmData.get("properties");
		hmReturn.put(RESULT,FALSE);
		hmReturn.put(MESSAGE,"No record found to be deleted..");
		try {
			connection = getConnection(properties);
			connection.setAutoCommit(false);
//
			alData = null;
			sql = null;
			// Update Item Store
			if (hmSQL.containsKey("UpdateITMSQL") && hmData.containsKey("UpdateITMData")) {
				alData = (ArrayList)	hmData.get ("UpdateITMData");
				sql = (String)	hmSQL.get	("UpdateITMSQL");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				if(preparedStatement!=null)
					preparedStatement.close();
				//preparedStatement.clearParameters();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record");
				}
			}
			if(isUpdateSuccessful){
				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_MODIFIED);
			}
///
			//Delete Details
			alData = (ArrayList)	hmData.get("DeleteDTLData");
			sql = (String)	hmSQL.get	("DeleteDTLSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in header !");
			}
			//Delete Header
			alData = (ArrayList)	hmData.get("DeleteHDRData");
			sql = (String)	hmSQL.get	("DeleteHDRSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in header !");
			}
			//delete status
			alData = (ArrayList)	hmData.get("DeleteSTATUSData");
			sql = (String)	hmSQL.get	("DeleteSTATUSSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in status !");
			}
			connection.commit();
			hmReturn.put(RESULT,TRUE);
			hmReturn.put(MSGID,RECORD_DELETED);
			if (connection!=null) {
						closeConnection(connection,properties);	
			}		
		}
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
					subexception.printStackTrace();
			}
        }
		finally{
			try{
				if(preparedStatement!=null) {
					preparedStatement.close();
				}
				closeConnection(connection,(Properties)hmData.get(properties));	
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		return hmReturn;
	}
	protected final String MESSAGE = "message";
	protected final String RESULT = "result";
	protected final Boolean TRUE = new Boolean(true);
	protected final Boolean FALSE =	new Boolean(false);
	private final String CODE_ALREADY_EXISTS = "CODE_ALREADY_EXISTS";
    private final String RECORD_INSERTED = "RECORD_INSERTED";
    private final String RECORD_MODIFIED = "RECORD_MODIFIED";
    private final String RECORD_DELETED  =	"RECORD_DELETED";
}

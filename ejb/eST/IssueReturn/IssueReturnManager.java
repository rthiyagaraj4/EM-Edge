/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
/*
-------------------------------------------------------------------------------------------------------------------------------
Date		            Edit History	        Name		       Rev.Date		     Rev.Name			     Description
-------------------------------------------------------------------------------------------------------------------------------
06/04/2017				IN063878				Badmavathi B					        					 Unused variables
-------------------------------------------------------------------------------------------------------------------------------
*/
package eST.IssueReturn; 

//import java.rmi.RemoteException;
import eST.Common.StEJBSessionAdapter;
import java.sql.Connection;
import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;
import webbeans.eCommon.* ;

/**
*
* @ejb.bean
*	name="IssueReturn"
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="IssueReturn"
*	local-jndi-name="IssueReturn"
*	impl-class-name="eST.IssueReturn.IssueReturnManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="eST.IssueReturn.IssueReturnLocal"
*	remote-class="eST.IssueReturn.IssueReturnRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="eST.IssueReturn.IssueReturnLocalHome"
*	remote-class="eST.IssueReturn.IssueReturnHome"
*	generate= "local,remote"
*
*
*/


public class IssueReturnManager extends StEJBSessionAdapter {

	HashMap hmData;
	HashMap hmSQL;
	HashMap	hmReturn;

	Connection	connection	=	null;
	Properties	properties	=	null;



	
	String stSQL						= null;

	String sql_st_issue_ret_dtl_exp_select_for_block_rel;

	


/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

 public HashMap insert(HashMap hmDataValues, HashMap hmSQLValues) //throws RemoteException 
 { 

		hmData		= hmDataValues;
		hmSQL		= hmSQLValues;
		
		System.out.println("beg==>"+hmDataValues);
		hmReturn	= new HashMap();		

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmResult	=	new HashMap();
		HashMap		hmItemDtl	=	new HashMap();

		
		ArrayList<ArrayList> alTempData		= new ArrayList<ArrayList>();
		ArrayList<Integer> alItemClassCount	= new ArrayList<Integer>();
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");
		
		ArrayList	alDtlData	 =	new ArrayList();
        ArrayList	alDtlExpData =	new ArrayList();
        ArrayList	alDtlRecords =	new ArrayList();
		ArrayList   alHdrData    = 	new ArrayList();
		ArrayList	alCommonData = 	new ArrayList();;
		String      trn_type	 =	"RET";
		String		AltFacilityId = (String)hmData.get("AltFacilityId");
		
		int      sizeOfTrn		 =	1;
		int      trnRecords		 =	1;
		int      batch_records	 =	0;
		int	prev_batch_records	 =	0;
		String modified_date ="Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')";
		ArrayList  hmparam = new ArrayList();    
		String p_from_bin_location_code		= "";
		String p_from_store_code			= ""; 
		String p_to_store_code				= "";
		String p_to_bin_location_code		= "";
		String p_item_code					= ""; 
		String p_batch_id					= ""; 
		String p_expiry_date_or_receipt_date= "";
		String mod_date						="";


	
		boolean isFinalized	=	false;
        
		ArrayList doc_no	= new ArrayList();
		hmReturn.put(RESULT,FALSE);
		boolean isDocNoAutoGenerated	=	false;
		String stCurrentItemCodeInCaseOfError=null;
		String fm_stk_item_yn,sql;
		ArrayList	alDtlData1			=	(ArrayList)	hmData.get("DtlInsertData");
		ArrayList allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
		alTempData		=	(ArrayList) hmData.get("HdrInsertData");
		if(hmData.containsKey("ItemClassCount")){
			alItemClassCount=	(ArrayList) hmData.get("ItemClassCount");
		}

		try {
			properties			=	(Properties)hmData.get("properties");
			connection			=	getConnection(properties);
			connection.setAutoCommit(false);
			int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost(connection));

			String 	sql_st_records_per_trn_select		=	(String)hmSQL.get ("sql_st_records_per_trn_select");
			HashMap records	=	fetchRecord(connection, sql_st_records_per_trn_select,trn_type);
			int records_per_trn = 0;
			if((String)records.get("RECORDS_PER_TRN")!=null){
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			}else{
				records_per_trn = alDtlData1.size();
			}
			//MO-CRF-20176 START
			String		fromStore ="";
			fromStore = (String)hmData.get("fromStore");//MO-CRF-20176
			String 	sql_st_store_records_per_trn_select		=	(String)hmSQL.get ("sql_st_store_records_per_trn_select");
			HashMap records1	=	fetchRecord(connection, sql_st_store_records_per_trn_select,fromStore);
			int records_per_trn_ret = 0;
			if((String)records1.get("RECORDS_PER_TRN_RET")!=null){
				records_per_trn_ret = Integer.parseInt((String)records1.get("RECORDS_PER_TRN_RET"));
			}  
			System.out.println("records_per_trn: "+records_per_trn);
			System.out.println("records_per_trn_ret:"+records_per_trn_ret);
			if(records_per_trn_ret != 0){
				records_per_trn = records_per_trn_ret;
			}//MO-CRF-20176 END 
			System.out.println("records_per_trn: "+records_per_trn);
			
			if(item_class_based.equals("Y")){
				sizeOfTrn = alItemClassCount.size();
			}else{
				if(records_per_trn>alDtlData1.size()){
					sizeOfTrn = 1;
				}else if((alDtlData1.size()%records_per_trn)==0){
					sizeOfTrn = alDtlData1.size()/records_per_trn;
				}else{
					sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;
				}
			}
			alHdrData	=	(ArrayList)hmData.get("HdrInsertData");
			alCommonData=(ArrayList)hmData.get("CommonData");

			for(int j=0,k=0;j<sizeOfTrn;j++){
				if(item_class_based.equals("Y")){
					alHdrData = new ArrayList();
					alHdrData = alTempData.get(j);
					//isFinalized			=	((String)alHdrData.get(8)).equals("Y");
				}

			String locale=(String)allanguageData.get(0);
				HashMap hmRecord	=	fetchRecord(connection, (String)hmSQL.get("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG"), (String)alHdrData.get(1));
				isDocNoAutoGenerated=	hmRecord.get("DOC_NUM_GEN_FLAG").toString().equals("Y");
				if (isDocNoAutoGenerated){
				
					Connection connection111 = ConnectionManager.getConnection();	
					connection111.setAutoCommit(false);
					
					alHdrData.remove(2);
					alHdrData.add(2,(String)fetchRecord(connection111, (String)hmSQL.get("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT"), (String)alHdrData.get(1)).get("NEXT_DOC_NO"));
					
					doc_no.add((String)alHdrData.get(2));
					
					hmArgData	=	new HashMap();
					hmArgSQL	=	new HashMap();
					alCommonData = new ArrayList();;
					String		stSQL		=	null;
					String s  = "";
					String s1 = "";

					alCommonData	=	(ArrayList)	hmData.get("CommonData");
					stSQL			=	(String)	hmSQL.get ("NextDocNoUpdateSQL");
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}
					HashMap hmArgData1 = new HashMap();
					hmArgData1.put(DATA,alCommonData);
					HashMap hmArgSQL1 = new HashMap();
					hmArgSQL1.put(UPDATE_SQL,stSQL);
					System.out.println("DOC_NOS_GEN_FROM==>"+hmArgData1);
					hmReturn	=	update(connection111, hmArgData1, hmArgSQL1);
					
					connection111.commit();
					connection111.close();
					
					hmReturn.put("flag",s1);
					throwExceptionWhenFailed(hmReturn);					
					
				}				
			

				stSQL		=	(String)hmSQL.get ("HdrInsertSQL");

				hmArgData.put(DATA,alHdrData);
				hmArgSQL.put(INSERT_SQL,stSQL);
				System.out.println("HdrInsertSQL==>"+alHdrData);
				hmReturn	=	 insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);
		   
				isFinalized			=	((String)alHdrData.get(7)).equals("Y");

				alDtlData			=	(ArrayList)	hmData.get("DtlInsertData");
				HashMap hmDtlData=new HashMap();
				if(item_class_based.equals("Y")){
					trnRecords = k + alItemClassCount.get(j);
				}else{
					if(records_per_trn>alDtlData.size()){
						trnRecords = alDtlData.size();
					}else if((k+records_per_trn)>=alDtlData.size()){
						trnRecords = alDtlData.size();
					}else{
						trnRecords = k+records_per_trn;
					}
				}
				alDtlRecords=	new ArrayList();
				//for (int i=0;i<alDtlData.size() ;i++ ) {
				for (int i=k;i<trnRecords ;i++ ) {

					hmDtlData = (HashMap)alDtlData.get(i);
					ArrayList alTempItemData = new ArrayList();
					
					stCurrentItemCodeInCaseOfError=(String)hmDtlData.get("item_code");


					String stItemCode=(String)hmDtlData.get("item_code");
					//Added to pass unit cost as base to st_item_trn_dtl against inc#50521
					String dtl_unit_cost = "";
					dtl_unit_cost=Double.toString(Double.parseDouble((String)hmDtlData.get("item_unit_cost"))/Double.parseDouble((String)hmDtlData.get("frm_conv_fact")));
					//Added ends

					//alTempItemData.add((String)hmDtlData.get("item_unit_cost"));
					alTempItemData.add(setNumber(dtl_unit_cost,noOfDecimalsForCost));
					alTempItemData.add((String)hmDtlData.get("item_cost_value"));
					alTempItemData.add((String)hmDtlData.get("uom_code"));

					hmItemDtl.put( stItemCode,alTempItemData);


					

					ArrayList alDtlRecord = new ArrayList();

					sql = (String)hmSQL.get("GetStockItemYNFlag");
					ArrayList alStkYN	=	new ArrayList();
					alStkYN.add(hmDtlData.get("item_code"));
					alStkYN.add(alHdrData.get(5));
					HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
					fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 

					alDtlRecord.add(0,alHdrData.get(0));
					alDtlRecord.add(1,alHdrData.get(1));
					alDtlRecord.add(2,alHdrData.get(2));
					alDtlRecord.add(3, (String)hmDtlData.get("doc_srl_no") );
					alDtlRecord.add(4, (String)hmDtlData.get("item_code")  );
					alDtlRecord.add(5, (String)hmDtlData.get("item_qty")   );
					alDtlRecord.add(6, (String)hmDtlData.get("item_unit_cost")  );
					alDtlRecord.add(7, (String)hmDtlData.get("item_cost_value") );
					alDtlRecord.add(8, fm_stk_item_yn);//"Y" );
					alDtlRecord.add(9, (String)alCommonData.get(0));
					alDtlRecord.add(10,(String)alCommonData.get(1));
					alDtlRecord.add(11,(String)alCommonData.get(2));
					alDtlRecord.add(12,(String)alCommonData.get(0));
					alDtlRecord.add(13,(String)alCommonData.get(1));
					alDtlRecord.add(14,(String)alCommonData.get(2)); 
				//	alDtlRecord.add(15,(String)hmDtlData.get("remarks")); 
					alDtlRecord.add(15,checkForNull((String)hmDtlData.get("remarks_code"))); 
					alDtlRecord.add(16,(String)hmDtlData.get("to_str_qty")); 
					alDtlRecord.add(17,(String)hmDtlData.get("mm_trn_qty")); 
					batch_records	=	batch_records+Integer.parseInt((String)(String)hmDtlData.get("batch_records"));
				//	alDtlRecords.add(alDtlRecord);

					

					
					if(isFinalized) {
						HashMap hmParameters = new HashMap();

						hmParameters.put("item_code",alDtlRecord.get(4));
						hmParameters.put("store_code",alHdrData.get(5));
						hmParameters.put("to_store_code",alHdrData.get(6));
						hmParameters.put("trn_type","RET");
						hmParameters.put("doc_date",alHdrData.get(3));
						hmParameters.put("trn_qty",alDtlRecord.get(5));
						hmParameters.put("to_str_qty",alDtlRecord.get(16));
						hmParameters.put("mm_trn_qty",alDtlRecord.get(17));
						hmParameters.put("language_id",(String)allanguageData.get(0));
						hmParameters.put("trn_unit_cost",alDtlRecord.get(6));
						/* @Name - Priya
						* @Date - 02/06/2010
						* @Inc# - 
						* @Desc - As trn_value is there in alDtlRecord.get(7) the below calculation is commented out
						*/
						/*double trn_val= Double.parseDouble((String)alDtlRecord.get(5))*Double.parseDouble((String)alDtlRecord.get(6));
						hmParameters.put("trn_value",setNumber(""+trn_val,3));*/
						hmParameters.put("trn_value",alDtlRecord.get(7));
						hmParameters.put("from_stk_item_yn",alDtlRecord.get(8));
						hmParameters.put("to_stk_item_yn","Y");
						hmParameters.put("last_receipt_date",""); 
						hmParameters.put("last_issue_date","");   
						hmParameters.put("login_by_id",(String)alCommonData.get(0));
						hmParameters.put("login_at_ws_no",(String)alCommonData.get(1));
						hmParameters.put("login_facility_id",(String)alCommonData.get(2));

						try{
						System.out.println("calculateAndUpdateOnlineStock==>"+hmParameters);
						calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
						hmParameters.remove("to_str_qty");
						}catch(Exception ex){
							hmReturn.put("flag",""+i);							
							if(ex.getMessage().toString().contains("NEGATIVE_STOCK"))
						  {
							throw new Exception("NEGATIVE_STOCK");
						  }
						  else{
					        throw ex;
						  }
						} 

					   
						hmDtlData.remove("to_str_qty");
						System.out.println("ItemMoveSummaryForIssueReturn==>"+hmParameters);
						ItemMoveSummaryForIssueReturn (connection,hmData,hmSQL,hmDtlData);
				   }		
					alDtlRecord.remove(16);
					alDtlRecord.remove(16);
					alDtlRecords.add(alDtlRecord);
				}   

					 
				String stSqlDtlInsert=(String)hmSQLValues.get("DtlInsertSQL");

				hmArgData.put(DATA,alDtlRecords);
				hmArgSQL.put(BATCH_SQL,stSqlDtlInsert);
				System.out.println("DtlInsertSQL==>"+alDtlRecords);
				hmReturn	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn); 

			   
				alDtlExpData = (ArrayList)hmData.get("ExpInsertData");
				
			   
				ArrayList alTotalExpData =new ArrayList();
				int t; 

				String stSqlDtlExpInsert=(String)hmSQLValues.get("DtlExpInsertSQL");
				//for (int i=0;i<alDtlExpData.size() ;i++ ) {
				for (int i=prev_batch_records;i<batch_records ;i++ ) {

				t=i; t++;			
				HashMap  hmExpData= (HashMap)alDtlExpData.get(i);

				

				if (checkForNull((String)hmExpData.get("ISSUE_TO_BIN_LOCATION_CODE")).equals("")){
					hmExpData.put("ISSUE_TO_BIN_LOCATION_CODE"," ");
				}


				

				stCurrentItemCodeInCaseOfError=(String)hmExpData.get("ITEM_CODE");

				sql = (String)hmSQL.get("GetStockItemYNFlag");
				ArrayList alStkYN	=	new ArrayList();
				alStkYN.add(hmExpData.get("ITEM_CODE"));
				alStkYN.add(alHdrData.get(5));
				HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
				fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 


				if(!isFinalized){   

					HashMap hmExpDataForBlock = (HashMap)alDtlExpData.get(i);

					HashMap hmParameter	=	new HashMap();
					hmParameter.put("store_code",alHdrData.get(5));
					hmParameter.put("item_code",(String)hmExpDataForBlock.get("ITEM_CODE"));
					hmParameter.put("batch_id",(String)hmExpDataForBlock.get("BATCH_ID"));
					hmParameter.put("bin_location_code",(String)hmExpDataForBlock.get("ISSUE_TO_BIN_LOCATION_CODE"));
					hmParameter.put("expiry_date_or_receipt_date",(String)hmExpDataForBlock.get("EXPIRY_RECEIPT_DT"));
					hmParameter.put("trn_qty",""+checkForNull((String)hmExpDataForBlock.get("QTY"),(String)hmExpDataForBlock.get("AVAIL_QTY")));

					hmParameter.put("login_by_id",(String)alCommonData.get(0));
					hmParameter.put("login_at_ws_no",(String)alCommonData.get(1));
					hmParameter.put("login_facility_id",(String)alCommonData.get(2));

					
					if (fm_stk_item_yn.equals("Y")) {
						System.out.println("blockReleaseBatch==>"+hmParameter);
						hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'B');
						throwExceptionWhenFailed(hmResult);
					}

				}


				ArrayList alExpData = new ArrayList() ;
				alExpData.add(0,(String)alHdrData.get(0));
				alExpData.add(1,(String)alHdrData.get(1));
				alExpData.add(2,(String)alHdrData.get(2));

				alExpData.add(3,(String)hmExpData.get("doc_srl_no"));
				alExpData.add(4,(String)alHdrData.get(5)); // Return From store Code
				alExpData.add(5,(String)hmExpData.get("ITEM_CODE"));
				alExpData.add(6,(String)hmExpData.get("BATCH_ID"));
				alExpData.add(7,(String)hmExpData.get("ISSUE_TO_BIN_LOCATION_CODE"));
				alExpData.add(8,(String)hmExpData.get("EXPIRY_RECEIPT_DT"));
				alExpData.add(9,(String)hmExpData.get("TRADE_ID"));
				alExpData.add(10,checkForNull((String)hmExpData.get("QTY"),(String)hmExpData.get("AVAIL_QTY")));

				alExpData.add(11,(String)alCommonData.get(0));
				alExpData.add(12,(String)alCommonData.get(1));
				alExpData.add(13,(String)alCommonData.get(2));
				alExpData.add(14,(String)alCommonData.get(0));
				alExpData.add(15,(String)alCommonData.get(1));
				alExpData.add(16,(String)alCommonData.get(2));

				alExpData.add(17,(String)hmExpData.get("DOC_TYPE_CODE"));
				alExpData.add(18,(String)hmExpData.get("DOC_NO"));
				alExpData.add(19,(String)hmExpData.get("SEQ_NO"));

				
				alExpData.add(20,(String)hmExpData.get("NEW_BIN_LOCATION_CODE"));
				

				alTotalExpData.add(alExpData);

		

			

				ArrayList alTempDtlUpdateFields = new ArrayList();

				alTempDtlUpdateFields.add((String)hmExpData.get("ret_item_qty"));
				alTempDtlUpdateFields.add((String)alCommonData.get(0));
				alTempDtlUpdateFields.add((String)alCommonData.get(1));
				alTempDtlUpdateFields.add((String)alCommonData.get(2));
				//alTempDtlUpdateFields.add((String)alHdrData.get(0));
				alTempDtlUpdateFields.add(AltFacilityId);// for Across facility
				alTempDtlUpdateFields.add((String)hmExpData.get("DOC_TYPE_CODE"));
				alTempDtlUpdateFields.add((String)hmExpData.get("DOC_NO"));
				alTempDtlUpdateFields.add((String)hmExpData.get("SEQ_NO"));
				alTempDtlUpdateFields.add((String)hmExpData.get("ITEM_CODE"));

				stSQL	= (String)hmSQL.get("TrnIssDtlUpdateSQL");

				
				System.out.println("TrnIssDtlUpdateSQL==>"+alTempDtlUpdateFields);
				hmArgData.put(DATA,alTempDtlUpdateFields);
				hmArgSQL.put(UPDATE_SQL,stSQL);

				hmReturn	=	update(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);

				
				ArrayList alUpdateFields = new ArrayList();

				//alUpdateFields.add((String)hmExpData.get("QTY"));
				//alUpdateFields.add(checkForNull((String)hmExpData.get("QTY"),(String)hmExpData.get("AVAIL_QTY")));
				
				//Added by Rabbani against inc no:31625 on 08/03/2012
				//alUpdateFields.add((String)hmExpData.get("ret_item_qty"));
				//Modified by suresh.r on 22-08-2014 against 
				alUpdateFields.add(checkForNull((String)hmExpData.get("QTY"),(String)hmExpData.get("AVAIL_QTY")));
				alUpdateFields.add((String)alCommonData.get(0));
				alUpdateFields.add((String)alCommonData.get(1));
				alUpdateFields.add((String)alCommonData.get(2));
				//alUpdateFields.add((String)alHdrData.get(0));
				alUpdateFields.add(AltFacilityId);//for across facility
				alUpdateFields.add((String)hmExpData.get("DOC_TYPE_CODE"));
				alUpdateFields.add((String)hmExpData.get("DOC_NO"));
				alUpdateFields.add((String)hmExpData.get("SEQ_NO"));
				alUpdateFields.add((String)hmExpData.get("ITEM_CODE"));
				alUpdateFields.add((String)hmExpData.get("BATCH_ID"));
				alUpdateFields.add((String)hmExpData.get("EXPIRY_RECEIPT_DT"));
                alUpdateFields.add(checkForNull((String)hmExpData.get("NEW_BIN_LOCATION_CODE"))); //18/04/12
				stSQL	= (String)hmSQL.get("TrnIssDtlExpUpdateSQL");
                System.out.println("alUpdateFields===485==>" +alUpdateFields);
				

				hmArgData.put(DATA,alUpdateFields);
				hmArgSQL.put(UPDATE_SQL,stSQL);
				System.out.println("TrnIssDtlExpUpdateSQL==>"+alUpdateFields);
				hmReturn	=	update(connection, hmArgData, hmArgSQL);
				//Added by Rabbani #Inc no:32490 on 03/07/12
				 String message = (String)hmReturn.get("message");
			    // String msgid = (String)hmReturn.get("msgid"); //commented by Rabbani on 24-Mar-2014 for chkstyles
			     //System.out.println("HSISRN manager.java,507,message = > "+message+" msgid = > "+msgid);
				if(message.contains("NO_RECORD_UPDATED"))
			    {
				hmReturn.put(MSGID,  "NO_RECORD_UPDATED");
				hmReturn.put(MESSAGE,"NO_RECORD_UPDATED");
			    }
				//ends
				throwExceptionWhenFailed(hmReturn);


			if(isFinalized) {
					HashMap hmParameters = new HashMap();
					
					hmParameters.put("item_code",(String)hmExpData.get("ITEM_CODE"));
					hmParameters.put("store_code",alHdrData.get(5));
					hmParameters.put("to_store_code",alHdrData.get(6));
					hmParameters.put("trn_type","RET");

					//hmParameters.put("trn_qty",(String)hmExpData.get("QTY"));
					hmParameters.put("trn_qty",checkForNull((String)hmExpData.get("QTY"),(String)hmExpData.get("AVAIL_QTY")));
					hmParameters.put("batch_id",(String)hmExpData.get("BATCH_ID"));
					hmParameters.put("expiry_date_or_receipt_date",(String)hmExpData.get("EXPIRY_RECEIPT_DT"));
					hmParameters.put("trade_id",(String)hmExpData.get("TRADE_ID"));
					
					hmParameters.put("to_bin_location_code",(String)hmExpData.get("NEW_BIN_LOCATION_CODE"));
					hmParameters.put("from_bin_location_code",(String)hmExpData.get("BIN_LOCATION_CODE"));

					hmParameters.put("suspended_batch_allowed_yn","N");
					hmParameters.put("release_batch_yn","N");
					hmParameters.put("last_receipt_date",""); 
					hmParameters.put("last_issue_date",""); 
							
					hmParameters.put("login_by_id",(String)alCommonData.get(0));
					hmParameters.put("login_at_ws_no",(String)alCommonData.get(1));
					hmParameters.put("login_facility_id",(String)alCommonData.get(2));
											
				//String modified_date ="Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')";
				  hmparam = new ArrayList();
			            
				 p_from_bin_location_code		= checkForNull (hmParameters.get("from_bin_location_code"));
				 p_from_store_code				= checkForNull (hmParameters.get("store_code")); 
				 p_to_store_code					= checkForNull	(hmParameters.get("to_store_code"));
				 p_to_bin_location_code			= checkForNull (hmParameters.get("to_bin_location_code"));
				 p_item_code						= checkForNull (hmParameters.get("item_code")); 
				 p_batch_id						= checkForNull (hmParameters.get("batch_id")); 
				 p_expiry_date_or_receipt_date	= checkForNull (hmParameters.get("expiry_date_or_receipt_date"));

			


			            
						   hmparam.add(p_from_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_from_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                    mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
						   							   
						   hmParameters.put("modified_date",mod_date);
						   hmparam = new ArrayList();
						    hmparam.add(p_to_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_to_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                    mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
					
						   hmParameters.put("to_modified_date",mod_date);
					
					//hmParameters.put("modified_date",(String)hmExpData.get("MODIFIED_DATE"));
               

					System.out.println("updateBatchOnLine==>"+hmParameters);
					updateBatchOnLine(connection, hmSQL, hmParameters);
					
					ArrayList alTempItmDtl = (ArrayList)hmItemDtl.get((String)hmExpData.get("ITEM_CODE")); 

					ArrayList alFromDtlTrn=new ArrayList();
					
					String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)alHdrData.get(5)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014

					//alFromDtlTrn.add(alHdrData.get(0));
					alFromDtlTrn.add(fm_facility_id);
					alFromDtlTrn.add(alHdrData.get(5));
					alFromDtlTrn.add((String)hmExpData.get("ITEM_CODE"));
					alFromDtlTrn.add(""+1);
					alFromDtlTrn.add("RET");
					alFromDtlTrn.add(alHdrData.get(1));
					alFromDtlTrn.add(alHdrData.get(2));
					alFromDtlTrn.add((String)hmExpData.get("doc_srl_no"));
					alFromDtlTrn.add(alHdrData.get(3));
					alFromDtlTrn.add(alHdrData.get(4));
					alFromDtlTrn.add((String)hmExpData.get("BATCH_ID"));
					alFromDtlTrn.add((String)hmExpData.get("EXPIRY_RECEIPT_DT"));
					//alFromDtlTrn.add("-"+(String)hmExpData.get("QTY"));
					alFromDtlTrn.add("-"+checkForNull((String)hmExpData.get("QTY"),(String)hmExpData.get("AVAIL_QTY")));
					alFromDtlTrn.add((String)alTempItmDtl.get(0)); 
					alFromDtlTrn.add((String)alTempItmDtl.get(2)); 

					alFromDtlTrn.add((String)hmExpData.get("DOC_TYPE_CODE")); 
					alFromDtlTrn.add((String)hmExpData.get("DOC_NO")); 
					alFromDtlTrn.add((String)hmExpData.get("DOC_SRL_NO")); 
					alFromDtlTrn.add((String)hmExpData.get("DOC_DATE")); 

					alFromDtlTrn.add(alHdrData.get(6)); 
					alFromDtlTrn.add(fm_stk_item_yn);
					alFromDtlTrn.add((String)alCommonData.get(0));
					alFromDtlTrn.add((String)alCommonData.get(1));
					alFromDtlTrn.add((String)alCommonData.get(2));
					alFromDtlTrn.add((String)alCommonData.get(0));
					alFromDtlTrn.add((String)alCommonData.get(1));
					alFromDtlTrn.add((String)alCommonData.get(2));
					
					alFromDtlTrn.add(checkForNull((String)hmExpData.get("BIN_LOCATION_CODE"))); 
					alFromDtlTrn.add((String)hmExpData.get("TRADE_ID"));

					alFromDtlTrn.add((String)hmExpData.get("SEQ_NO")); 

					stSQL	= (String)hmSQL.get("TrnDtlInsertSQL");

					hmArgData.put(DATA,alFromDtlTrn);
					hmArgSQL.put(INSERT_SQL,stSQL);
					System.out.println("TrnDtlInsertSQL==>alFromDtlTrn==>"+alFromDtlTrn);
					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmReturn);


					if (fm_stk_item_yn.equals("N")) {
						alFromDtlTrn.set(3,""+3);
						//alFromDtlTrn.set(12,hmExpData.get("QTY"));
						alFromDtlTrn.set(12,checkForNull((String)hmExpData.get("QTY"),(String)hmExpData.get("AVAIL_QTY")));
						alFromDtlTrn.set(4,"CON");

						hmReturn	=	insert(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmReturn);
					}
					ArrayList alToDtlTrn=new ArrayList();
					
					String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)alHdrData.get(6)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
					
					//alToDtlTrn.add(alHdrData.get(0));
					alToDtlTrn.add(to_facility_id);
					alToDtlTrn.add(alHdrData.get(6));
					alToDtlTrn.add((String)hmExpData.get("ITEM_CODE"));
					alToDtlTrn.add(""+2);
					alToDtlTrn.add("RET");
					alToDtlTrn.add(alHdrData.get(1));
					alToDtlTrn.add(alHdrData.get(2));
					alToDtlTrn.add((String)hmExpData.get("doc_srl_no"));
					alToDtlTrn.add(alHdrData.get(3));
					alToDtlTrn.add(alHdrData.get(4));
					alToDtlTrn.add((String)hmExpData.get("BATCH_ID"));
					alToDtlTrn.add((String)hmExpData.get("EXPIRY_RECEIPT_DT"));
					//alToDtlTrn.add((String)hmExpData.get("QTY"));
					alToDtlTrn.add(checkForNull((String)hmExpData.get("QTY"),(String)hmExpData.get("AVAIL_QTY")));
					alToDtlTrn.add((String)alTempItmDtl.get(0)); 
					alToDtlTrn.add((String)alTempItmDtl.get(2)); 

					alToDtlTrn.add((String)hmExpData.get("DOC_TYPE_CODE")); 
					alToDtlTrn.add((String)hmExpData.get("DOC_NO")); 
					alToDtlTrn.add((String)hmExpData.get("DOC_SRL_NO")); 
					alToDtlTrn.add((String)hmExpData.get("DOC_DATE")); 

					alToDtlTrn.add(alHdrData.get(5)); 
					alToDtlTrn.add("Y");
					alToDtlTrn.add((String)alCommonData.get(0));
					alToDtlTrn.add((String)alCommonData.get(1));
					alToDtlTrn.add((String)alCommonData.get(2));
					alToDtlTrn.add((String)alCommonData.get(0));
					alToDtlTrn.add((String)alCommonData.get(1));
					alToDtlTrn.add((String)alCommonData.get(2));
					alToDtlTrn.add(checkForNull((String)hmExpData.get("NEW_BIN_LOCATION_CODE")));
					alToDtlTrn.add((String)hmExpData.get("TRADE_ID"));
					alToDtlTrn.add((String)hmExpData.get("SEQ_NO")); 

					stSQL	= (String)hmSQL.get("TrnDtlInsertSQL");

					hmArgData.put(DATA,alToDtlTrn);
					hmArgSQL.put(INSERT_SQL,stSQL);

					System.out.println("TrnDtlInsertSQL==>alToDtlTrn==>"+alToDtlTrn);
					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmReturn);

			   

				 }

			}
				prev_batch_records	=	batch_records;
				hmArgData.put(DATA,alTotalExpData);
				hmArgSQL.put(BATCH_SQL,stSqlDtlExpInsert);
				System.out.println("stSqlDtlExpInsert==>"+alTotalExpData);
				hmReturn	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);
				
				locale=(String)allanguageData.get(0);
			  
			  if( ((Boolean)hmData.get("isDocNoAutoGenYN")).booleanValue() )
				{
					//generateDocNo(connection,hmData,hmSQL);
					
					hmArgData	=	new HashMap();
					hmArgSQL	=	new HashMap();
					alCommonData = new ArrayList();;
					String		stSQL		=	null;
					String s  = "";
					String s1 = "";

					alCommonData	=	(ArrayList)	hmData.get("CommonData");
					stSQL			=	(String)	hmSQL.get ("NextDocNoUpdateSQL");
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}
					hmArgData.put(DATA,alCommonData);
					hmArgSQL.put(UPDATE_SQL,stSQL);

					//hmReturn	=	update(connection, hmArgData, hmArgSQL);
					hmReturn.put("flag",s1);
					throwExceptionWhenFailed(hmReturn);
				}  
				if(item_class_based.equals("Y")){
					k = k + alItemClassCount.get(j);
				}else{
					k=k+records_per_trn;
				}
			}
			connection.commit();
       }
	   catch(Exception exception){
			try {
				connection.rollback();
				exception.printStackTrace();
			}
			catch (Exception subException) {
				subException.printStackTrace(); 
			}
			hmReturn.put(RESULT,FALSE);
			hmReturn.put(MSGID,exception.getMessage());
			hmReturn.put(MESSAGE,exception.toString());
			if ((exception.getMessage().equals("INSUFFICIENT_BATCH_QTY")) || (exception.getMessage().equals("NEGATIVE_STOCK"))) {
				hmResult.put("flag",stCurrentItemCodeInCaseOfError);
			}
		}
		finally{
			try{
				closeConnection( connection, properties );
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		hmReturn.put("doc_no",doc_no);
		return hmReturn;
	}



/**
	* @ejb.interface-method
	*	 view-type="both"
	*/


 public HashMap modify(HashMap hmDataValues, HashMap hmSQLValues) //throws RemoteException
	 {
		hmData=hmDataValues;
		hmSQL=hmSQLValues;

        Connection connection = null;
		Properties properties=null;

		hmReturn	=	new HashMap();
        hmReturn.put(RESULT,FALSE);

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmItemDtl	=	new HashMap();

		ArrayList   alCommonData = new ArrayList ();
		ArrayList	alHdrData	 =	new ArrayList();
		ArrayList	alDtlData	 =	new ArrayList();
		ArrayList	alExpData	 =	new ArrayList();
		ArrayList	allanguageData	 =	new ArrayList();


		ArrayList doc_no	= new ArrayList();
		String stCurrentItemCodeInCaseOfError=null;
		String sql,fm_stk_item_yn;

		alCommonData		=	(ArrayList)hmData.get("CommonData");
		alHdrData           =   (ArrayList)	hmData.get("HdrInsertData");
		alDtlData			=	(ArrayList)	hmData.get("DtlInsertData");
		alExpData			=   (ArrayList)	hmData.get("ExpInsertData");
		allanguageData		=   (ArrayList)	hmData.get("LANGUAGE_DATA");
		String	AltFacilityId = (String)hmData.get("AltFacilityId");

		boolean isFinalized	=	false;
		String modified_date ="Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')";
		ArrayList  hmparam = new ArrayList();    
		String p_from_bin_location_code		= "";
		String p_from_store_code			= ""; 
		String p_to_store_code				= "";
		String p_to_bin_location_code		= "";
		String p_item_code					= ""; 
		String p_batch_id					= ""; 
		String p_expiry_date_or_receipt_date= "";
		String mod_date						="";
		 String message                      = "";  
		 String msgid                        = "";	    


		try {

			properties			=	(Properties)hmData.get("properties");
			connection			=	getConnection(properties);
            connection.setAutoCommit(false);

			String stSQLHdrUpdate	=	(String)hmSQL.get ("stSQLHdrUpdate");
			String stSQLDtlUpdate	=	(String)hmSQL.get ("stSQLDtlUpdate");
		

			String stSQLDtlDelete	=	(String)hmSQL.get ("stSQLDtlDelete");
			String stSQLExpDelete	=	(String)hmSQL.get ("stSQLExpDelete");

			String stSQLDtlInsert	=	(String)hmSQL.get ("DtlInsertSQL");
			String stSqlDtlExpInsert	=	(String)hmSQL.get ("DtlExpInsertSQL");

			sql_st_issue_ret_dtl_exp_select_for_block_rel	=	(String)hmSQL.get ("sql_st_issue_ret_dtl_exp_select_for_block_rel");   
			
			isFinalized			=	((String)alHdrData.get(7)).equals("Y");
			int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost(connection));


			

            ArrayList altempHdrData	=	new ArrayList();

            altempHdrData.add(alHdrData.get(3)); //doc date
            altempHdrData.add(alHdrData.get(4)); //doc_ref
			altempHdrData.add(alHdrData.get(7)); //finalize yn
			altempHdrData.add(alHdrData.get(8)); //finalize yn
            altempHdrData.add(alCommonData.get(0));
			altempHdrData.add(alCommonData.get(1));
			altempHdrData.add(alCommonData.get(2));
			altempHdrData.add(alHdrData.get(0));
			altempHdrData.add(alHdrData.get(1));
			altempHdrData.add(alHdrData.get(2));
			doc_no.add((String)alHdrData.get(2));		
			hmArgData.put(DATA,altempHdrData);
			hmArgSQL.put(UPDATE_SQL,stSQLHdrUpdate);
			hmReturn	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);

 			/*  For HDR Modification Logic Ends here */



			/* For DTL Modification logic Starts here */


			for (int i=0;i<alDtlData.size() ;i++ ) {

                HashMap hmDtlRecord		= new  HashMap();
				hmDtlRecord	= (HashMap)alDtlData.get(i);
                // save the item codein case of error
                stCurrentItemCodeInCaseOfError=(String)hmDtlRecord.get("item_code");

				sql = (String)hmSQL.get("GetStockItemYNFlag");
				ArrayList alStkYN	=	new ArrayList();
				alStkYN.add(hmDtlRecord.get("item_code"));
				alStkYN.add(alHdrData.get(5));
				HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
				fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 

								
                ArrayList alTempItemData = new ArrayList();

				String stItemCode=(String)hmDtlRecord.get("item_code");
				//Added to pass unit cost as base to st_item_trn_dtl against inc#50521
				String dtl_unit_cost = "";
				dtl_unit_cost=Double.toString(Double.parseDouble((String)hmDtlRecord.get("item_unit_cost"))/Double.parseDouble((String)hmDtlRecord.get("frm_conv_fact")));
				//Added ends

				//alTempItemData.add((String)hmDtlRecord.get("item_unit_cost"));
				alTempItemData.add(setNumber(dtl_unit_cost,noOfDecimalsForCost));
				alTempItemData.add((String)hmDtlRecord.get("item_cost_value"));
				alTempItemData.add((String)hmDtlRecord.get("uom_code"));

				hmItemDtl.put( stItemCode,alTempItemData);

				int iMode	=	Integer.parseInt((String)hmDtlRecord.get("mode"));
				String stSQLIDtlUpdate	  =	(String)hmSQL.get ("TrnIssDtlUpdateSQL");
				String stSQLIDtlExpUpdate	  =	(String)hmSQL.get ("TrnIssDtlExpUpdateSQL");

				switch (iMode){
					
				    case 2: // Modify Dtl data 

					String stSQLDataSelect	  =	(String)hmSQL.get ("SQL_ST_ISSUE_RET_DTL_EXP_SELECT_MULTIPLE");
					
					ArrayList alParameters = new ArrayList();	
					//fethching data for cross updation
					alParameters.add(alHdrData.get(0));
					alParameters.add(alHdrData.get(2));
					alParameters.add(alHdrData.get(1));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
					//alParameters.add((String)hmDtlRecord.get("doc_srl_no"));
					alParameters.add((String)hmDtlRecord.get("item_code"));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
					alParameters.add(alHdrData.get(18));
					alParameters.add(alHdrData.get(18));
					alParameters.add(alHdrData.get(18));
					ArrayList crossUpdateData	=	fetchRecords(connection,stSQLDataSelect, alParameters);

					for (int j=0;j<crossUpdateData.size() ;j++ ) {
							HashMap hmExpRecord=(HashMap)crossUpdateData.get(j);

					  	    /* Updating values for ST_ISSUE_DTL for ret_item_qty BEGINS here */

							ArrayList alTempDtlUpdateFields = new ArrayList();
							//int ret_itm_qty = Integer.parseInt((String)hmExpRecord.get("QTY"))/getConvFactTemp((String)hmExpRecord.get("ITEM_CODE"),(String)hmExpRecord.get("STORE_CODE"),hmSQL,(String)alHdrData.get(17),properties);
							double ret_itm_qty = Double.parseDouble(checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")))/getConvFactTemp((String)hmExpRecord.get("ITEM_CODE"),(String)hmExpRecord.get("STORE_CODE"),hmSQL,(String)alHdrData.get(18),properties);
							alTempDtlUpdateFields.add("-"+""+ret_itm_qty);
							alTempDtlUpdateFields.add((String)alCommonData.get(0));
							alTempDtlUpdateFields.add((String)alCommonData.get(1));
							alTempDtlUpdateFields.add((String)alCommonData.get(2));
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
							//alTempDtlUpdateFields.add((String)alHdrData.get(0));
							alTempDtlUpdateFields.add(AltFacilityId);
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
							alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
							alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
							alTempDtlUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
							alTempDtlUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));


							hmArgData.put(DATA,alTempDtlUpdateFields);
							hmArgSQL.put(UPDATE_SQL,stSQLIDtlUpdate);

							try{
								hmReturn	=	update(connection, hmArgData, hmArgSQL);
								throwExceptionWhenFailed(hmReturn);
							   }

							catch(Exception ex) { ex.printStackTrace(); }

						/* Updating values for ST_ISSUE_DTL for ret_item_qty ENDS here  */


						/* Updating values for ST_ISSUE_DTL_EXP for ret_item_qty BEGINS here */

							ArrayList alUpdateFields = new ArrayList();

							//alUpdateFields.add("-"+(String)hmExpRecord.get("QTY"));
						
						//Commented by Rabbani against inc no:31625 on 08/03/2012
			      //alUpdateFields.add("-"+checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
							
							//Added by Rabbani against inc no:31625 on 08/03/2012
							//alUpdateFields.add("-"+""+ret_itm_qty);
							//Modified by suresh.r on 22-08-2014 against 
							alUpdateFields.add("-"+checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
							alUpdateFields.add((String)alCommonData.get(0));
							alUpdateFields.add((String)alCommonData.get(1));
							alUpdateFields.add((String)alCommonData.get(2));
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
							//alUpdateFields.add((String)alHdrData.get(0));
							alUpdateFields.add(AltFacilityId);
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
							alUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
							alUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
							alUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
							alUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));
							alUpdateFields.add((String)hmExpRecord.get("BATCH_ID"));
							alUpdateFields.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
                            alUpdateFields.add(checkForNull((String)hmExpRecord.get("NEW_BIN_LOCATION_CODE"))); //18/04/12

							hmArgData.put(DATA,alUpdateFields);
							hmArgSQL.put(UPDATE_SQL,stSQLIDtlExpUpdate);

							try{
								hmReturn	=	update(connection, hmArgData, hmArgSQL);
								//Added by Rabbani #Inc no:32490 on 03/07/2012 
								 message = (String)hmReturn.get("message");
			                     msgid = (String)hmReturn.get("msgid");
			                  //System.out.println("HSISRN manager.java,978,message = > "+message+" msgid = > "+msgid);
				              if(message.contains("NO_RECORD_UPDATED"))
			                  {
				              hmReturn.put(MSGID,  "NO_RECORD_UPDATED");
				              hmReturn.put(MESSAGE,"NO_RECORD_UPDATED");
			                  }
							  //ends
								throwExceptionWhenFailed(hmReturn);
							   }

							catch(Exception ex) { ex.printStackTrace(); }

					     /*  Updating values for ST_ISSUE_DTL_EXP for ret_item_qty ENDS here  */

						}

					
					ArrayList alDeleteExpRecord	=	new ArrayList();

					alDeleteExpRecord.add(alHdrData.get(0)); //facility_id
					alDeleteExpRecord.add(alHdrData.get(1)); //doc_type_code
					alDeleteExpRecord.add(alHdrData.get(2)); //doc_no
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
					//alDeleteExpRecord.add((String)hmDtlRecord.get("doc_srl_no")); //put doc_srl_no at last..
					alDeleteExpRecord.add((String)hmDtlRecord.get("item_code"));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end

					ArrayList alCheckData=new ArrayList();
					alCheckData.add(alHdrData.get(0));
					alCheckData.add(alHdrData.get(1));
					alCheckData.add(alHdrData.get(2));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
					//alCheckData.add((String)hmDtlRecord.get("doc_srl_no"));
					alCheckData.add((String)hmDtlRecord.get("item_code"));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
                 
				    ArrayList alRecords11	=	fetchRecords(connection,sql_st_issue_ret_dtl_exp_select_for_block_rel, alCheckData);
                  
					for (int j=0; j<alRecords11.size(); j++) {
						HashMap hmRecord	=	(HashMap)alRecords11.get(j);
						HashMap hmParameter	=	new HashMap();
						hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
						hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
						hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
						hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
						hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
						hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
						hmParameter.put("login_by_id",alCommonData.get(0));
						hmParameter.put("login_at_ws_no",alCommonData.get(1));
						hmParameter.put("login_facility_id",alCommonData.get(2));

						if (fm_stk_item_yn.equals("Y")){
							hmReturn	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R'); 
							throwExceptionWhenFailed(hmReturn);
						}
					}
						hmArgData.put(DATA,alDeleteExpRecord);
						hmArgSQL.put(DELETE_SQL,stSQLExpDelete);
						hmReturn	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmReturn);

					/* All Exp record deleted */
ArrayList alDtlRecordInst1 = new ArrayList();

						//alDtlRecordInst.add(0,alHdrData.get(0));
					//alDtlRecordInst.add(1,alHdrData.get(1));
					//alDtlRecordInst.add(2,alHdrData.get(2));
					//alDtlRecordInst.add(3, (String)hmDtlRecord.get("doc_srl_no") );
					//alDtlRecordInst.add(4, (String)hmDtlRecord.get("item_code")  );
					alDtlRecordInst1.add( (String)hmDtlRecord.get("item_qty"));
					//alDtlRecordInst.add(6, (String)hmDtlRecord.get("item_unit_cost")  );
					alDtlRecordInst1.add( (String)hmDtlRecord.get("item_cost_value") );
					//alDtlRecordInst1.add((String)hmDtlRecord.get("remarks")); 
					alDtlRecordInst1.add((String)hmDtlRecord.get("remarks_code")); 
					//alDtlRecordInst.add(8, fm_stk_item_yn);//"Y" );
				//	alCommonData.get(0)
					alDtlRecordInst1.add( (String)alCommonData.get(0));
					alDtlRecordInst1.add((String)alCommonData.get(1));
					alDtlRecordInst1.add((String)alCommonData.get(2));
					alDtlRecordInst1.add(alHdrData.get(0));
					alDtlRecordInst1.add(alHdrData.get(1));
					alDtlRecordInst1.add(alHdrData.get(2));
					alDtlRecordInst1.add((String)hmDtlRecord.get("doc_srl_no"));
					//(String)hmDtlRecord.get("doc_srl_no")
					
					hmArgData.put(DATA,alDtlRecordInst1);
					hmArgSQL.put(UPDATE_SQL,stSQLDtlUpdate);
					hmReturn	=	update(connection, hmArgData, hmArgSQL);
								throwExceptionWhenFailed(hmReturn);
							  

				    break;
						
					case 1 :  // Insert Dtl data 

					ArrayList alDtlRecordInst = new ArrayList();

					alDtlRecordInst.add(0,alHdrData.get(0));
					alDtlRecordInst.add(1,alHdrData.get(1));
					alDtlRecordInst.add(2,alHdrData.get(2));
					alDtlRecordInst.add(3, (String)hmDtlRecord.get("doc_srl_no") );
					alDtlRecordInst.add(4, (String)hmDtlRecord.get("item_code")  );
					alDtlRecordInst.add(5, (String)hmDtlRecord.get("item_qty")   );
					alDtlRecordInst.add(6, (String)hmDtlRecord.get("item_unit_cost")  );
					alDtlRecordInst.add(7, (String)hmDtlRecord.get("item_cost_value") );
					alDtlRecordInst.add(8, fm_stk_item_yn);//"Y" );
					alDtlRecordInst.add(9, (String)alCommonData.get(0));
					alDtlRecordInst.add(10,(String)alCommonData.get(1));
					alDtlRecordInst.add(11,(String)alCommonData.get(2));
					alDtlRecordInst.add(12,(String)alCommonData.get(0));
					alDtlRecordInst.add(13,(String)alCommonData.get(1));
					alDtlRecordInst.add(14,(String)alCommonData.get(2)); 
					//alDtlRecordInst.add(15,(String)hmDtlRecord.get("remarks")); 
					alDtlRecordInst.add(15,(String)hmDtlRecord.get("remarks_code")); 
					
					hmArgData.put(DATA,alDtlRecordInst);
					hmArgSQL.put(INSERT_SQL,stSQLDtlInsert);
					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					break;

                    case 0 :  // Delete Dtl data 
						stSQLExpDelete	  =	"";   
						stSQLDtlDelete	  =		"";   

						stSQLIDtlUpdate	  =		"";   
						stSQLIDtlExpUpdate	 =	"";   
						stSQLDataSelect = "";
						alParameters	=	new ArrayList();
						stSQLExpDelete	  =	(String)hmSQL.get ("stSQLExpDelete");   
						stSQLDtlDelete	  =	(String)hmSQL.get ("stSQLDtlDelete");
						stSQLIDtlUpdate	  =	(String)hmSQL.get ("TrnIssDtlUpdateSQL");
						stSQLIDtlExpUpdate	  =	(String)hmSQL.get ("TrnIssDtlExpUpdateSQL");
						stSQLDataSelect	  =	(String)hmSQL.get ("SQL_ST_ISSUE_RET_DTL_EXP_SELECT_MULTIPLE");
						
						//fethching data for cross updation
						alParameters.add(alHdrData.get(0));
						alParameters.add(alHdrData.get(2));
						alParameters.add(alHdrData.get(1));
						//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
						//alParameters.add((String)hmDtlRecord.get("doc_srl_no"));
						alParameters.add((String)hmDtlRecord.get("item_code"));
						//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
						alParameters.add(alHdrData.get(18));
						alParameters.add(alHdrData.get(18));
						alParameters.add(alHdrData.get(18));
						crossUpdateData	=	fetchRecords(connection,stSQLDataSelect, alParameters);
						System.out.println("crossUpdateData===1100==>" +crossUpdateData);

						//***start deleting
						alParameters.clear();
						alParameters.add(alHdrData.get(0));//facility
						alParameters.add(alHdrData.get(1));//doc type
						alParameters.add(alHdrData.get(2));//doc no
						//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
						//alParameters.add((String)hmDtlRecord.get("doc_srl_no"));//doc srl_no
						alParameters.add((String)hmDtlRecord.get("item_code"));
						//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
						hmArgData.put(DATA, alParameters);
						hmArgSQL.put(DELETE_SQL,stSQLExpDelete);
						hmReturn	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmReturn);
						//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
						alParameters.remove(3);//item_code
						alParameters.add((String)hmDtlRecord.get("doc_srl_no"));//doc srl_no
						hmArgData.put(DATA, alParameters);
						//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
						hmArgSQL.put(DELETE_SQL,stSQLDtlDelete);
						hmReturn	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmReturn);
						
						
						//***end deleting

						//###start updating st_issue_dtl and st_issue_dtl_exp
						for (int j=0;j<crossUpdateData.size() ;j++ ) {
							HashMap hmExpRecord=(HashMap)crossUpdateData.get(j);
						/* Updating values for ST_ISSUE_DTL for ret_item_qty BEGINS here */
							ArrayList alTempDtlUpdateFields = new ArrayList();
							//int ret_itm_qty = Integer.parseInt((String)hmExpRecord.get("QTY"))/getConvFactTemp((String)hmExpRecord.get("ITEM_CODE"),(String)hmExpRecord.get("STORE_CODE"),hmSQL,(String)alHdrData.get(17),properties);
							double ret_itm_qty = Double.parseDouble(checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")))/getConvFactTemp((String)hmExpRecord.get("ITEM_CODE"),(String)hmExpRecord.get("STORE_CODE"),hmSQL,(String)alHdrData.get(18),properties);
							alTempDtlUpdateFields.add("-"+""+ret_itm_qty);
							//alTempDtlUpdateFields.add("-"+(String)hmExpRecord.get("QTY"));
							alTempDtlUpdateFields.add((String)alCommonData.get(0));
							alTempDtlUpdateFields.add((String)alCommonData.get(1));
							alTempDtlUpdateFields.add((String)alCommonData.get(2));
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
							//alTempDtlUpdateFields.add((String)alHdrData.get(0));
							alTempDtlUpdateFields.add(AltFacilityId);
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
							alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
							alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
							alTempDtlUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
							alTempDtlUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));

							hmArgData.put(DATA,alTempDtlUpdateFields);
							hmArgSQL.put(UPDATE_SQL,stSQLIDtlUpdate);

							try{
								hmReturn	=	update(connection, hmArgData, hmArgSQL);
								throwExceptionWhenFailed(hmReturn);
							   }

							catch(Exception ex) { ex.printStackTrace(); }

						/* Updating values for ST_ISSUE_DTL for ret_item_qty ENDS here  */


						/* Updating values for ST_ISSUE_DTL_EXP for ret_item_qty BEGINS here */

							ArrayList alUpdateFields = new ArrayList();

							//alUpdateFields.add("-"+(String)hmExpRecord.get("QTY"));
							//alUpdateFields.add("-"+checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
							//Added by Rabbani against inc no:31625 on 08/03/2012
							//alUpdateFields.add("-"+""+ret_itm_qty);
							//Modified by suresh.r on 22-08-2014 against 
							alUpdateFields.add("-"+checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
							alUpdateFields.add((String)alCommonData.get(0));
							alUpdateFields.add((String)alCommonData.get(1));
							alUpdateFields.add((String)alCommonData.get(2));
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
							//alUpdateFields.add((String)alHdrData.get(0));
							alUpdateFields.add(AltFacilityId);
							//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
							alUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
							alUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
							alUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
							alUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));
							alUpdateFields.add((String)hmExpRecord.get("BATCH_ID"));
							alUpdateFields.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
                            alUpdateFields.add(checkForNull((String)hmExpRecord.get("NEW_BIN_LOCATION_CODE"))); //18/04/12
							hmArgData.put(DATA,alUpdateFields);
							hmArgSQL.put(UPDATE_SQL,stSQLIDtlExpUpdate);

							try{
								hmReturn	=	update(connection, hmArgData, hmArgSQL);
								//Added by Rabbani #Inc no:32490 on 03/07/2012 
								message = (String)hmReturn.get("message");
			                    msgid   = (String)hmReturn.get("msgid");
			                  //System.out.println("HSISRN manager.java,1193,message = > "+message+" msgid = > "+msgid);
				               if(message.contains("NO_RECORD_UPDATED"))
			                   {
				               hmReturn.put(MSGID,  "NO_RECORD_UPDATED");
				               hmReturn.put(MESSAGE,"NO_RECORD_UPDATED");
			                   }
			                    //System.out.println("HSISRN manager.java,1198,message = > "+hmReturn);
								throwExceptionWhenFailed(hmReturn);
							   }

							catch(Exception ex) { ex.printStackTrace(); }

					/*    Updating values for ST_ISSUE_DTL_EXP for ret_item_qty ENDS here  */
					//###end updating st_issue_dtl and st_issue_dtl_exp
					 
						HashMap hmParameter12	=	new HashMap();
						//hmParameter12.put("store_code",hmExpRecord.get("STORE_CODE"));
						hmParameter12.put("store_code",hmExpRecord.get("TO_STORE_CODE"));
						hmParameter12.put("item_code",hmExpRecord.get("ITEM_CODE"));
						hmParameter12.put("batch_id",hmExpRecord.get("BATCH_ID"));
						//Commented by Rabbani on 07/11/12 change the binlocation_code  
					   //hmParameter12.put("bin_location_code",hmExpRecord.get("NEW_BIN_LOCATION_CODE"));
						hmParameter12.put("bin_location_code",hmExpRecord.get("ISSUE_TO_BIN_LOCATION_CODE"));
						hmParameter12.put("expiry_date_or_receipt_date",hmExpRecord.get("EXPIRY_RECEIPT_DT"));
						hmParameter12.put("trn_qty", hmExpRecord.get("QTY"));
						hmParameter12.put("login_by_id",alCommonData.get(0));
						hmParameter12.put("login_at_ws_no",alCommonData.get(1));
						hmParameter12.put("login_facility_id",alCommonData.get(2));
						
						System.out.println("hmParameter12===1202=>" +hmParameter12);

						if (fm_stk_item_yn.equals("Y")){
							hmReturn	=	blockReleaseBatch(connection, hmParameter12,hmSQL, 'R'); 
							throwExceptionWhenFailed(hmReturn);
							System.out.println("hmReturn===1202=>" +hmReturn);
						}
						}	
			         break ;

                    
		
				  } // End of SWITH condition  
                   

				   if(isFinalized && iMode!=0) {

				    ArrayList alCheckData=new ArrayList();
					alCheckData.add(alHdrData.get(0));
					alCheckData.add(alHdrData.get(1));
					alCheckData.add(alHdrData.get(2));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
					//alCheckData.add((String)hmDtlRecord.get("doc_srl_no"));
					alCheckData.add((String)hmDtlRecord.get("item_code"));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
                 
				    ArrayList alRecords1	=	fetchRecords(connection,sql_st_issue_ret_dtl_exp_select_for_block_rel, alCheckData);
                  
					for (int j=0; j<alRecords1.size(); j++) {
						HashMap hmRecord	=	(HashMap)alRecords1.get(j);
						HashMap hmParameter	=	new HashMap();
						hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
						hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
						hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
						hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
						hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
						hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
						hmParameter.put("login_by_id",alCommonData.get(0));
						hmParameter.put("login_at_ws_no",alCommonData.get(1));
						hmParameter.put("login_facility_id",alCommonData.get(2));
						sql = (String)hmSQL.get("GetStockItemYNFlag");
						alStkYN	=	new ArrayList();
						alStkYN.add(hmRecord.get("ITEM_CODE"));
						alStkYN.add(hmRecord.get("STORE_CODE"));
						hmStkYN					= fetchRecord(connection, sql, alStkYN);
						fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
			/////////
						if(fm_stk_item_yn.equals("Y")){
							hmReturn	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R');//false to release the batch..
							throwExceptionWhenFailed(hmReturn);
						}
					}
			  


						/* Setting values and calling OnlineStockUpdate BEGINS here  */

						HashMap hmParameters = new HashMap();

						hmParameters.put("item_code",(String)hmDtlRecord.get("item_code"));
						hmParameters.put("store_code",alHdrData.get(5));
						hmParameters.put("to_store_code",alHdrData.get(6));
						hmParameters.put("trn_type","RET");
						hmParameters.put("doc_date",alHdrData.get(3));
						hmParameters.put("trn_qty",(String)hmDtlRecord.get("item_qty"));
						hmParameters.put("trn_unit_cost",(String)hmDtlRecord.get("item_unit_cost"));
						hmParameters.put("trn_value",(String)hmDtlRecord.get("item_cost_value"));
						hmParameters.put("from_stk_item_yn",fm_stk_item_yn);//"Y");
						hmParameters.put("to_stk_item_yn","Y");
						hmParameters.put("last_receipt_date",""); 
						hmParameters.put("last_issue_date","");   
						hmParameters.put("login_by_id",(String)alCommonData.get(0));
						hmParameters.put("login_at_ws_no",(String)alCommonData.get(1));
						hmParameters.put("login_facility_id",(String)alCommonData.get(2));
						hmParameters.put("to_str_qty",hmDtlRecord.get("to_str_qty"));
						hmParameters.put("mm_trn_qty",hmDtlRecord.get("mm_trn_qty"));
						hmParameters.put("language_id",(String)allanguageData.get(0));
						hmDtlRecord.remove("to_str_qty");
                        try{
							calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
							hmParameters.remove("to_str_qty");
						}catch(Exception exp){
							hmReturn.put("flag",""+i);
							
						  if(exp.getMessage().toString().contains("NEGATIVE_STOCK"))
						  {
							throw new Exception("NEGATIVE_STOCK");
						  }
						  else{
					        throw exp;
						  }
						}

						/* Setting values and calling OnlineStockUpdate ENDS here  */

						ItemMoveSummaryForIssueReturn (connection,hmData,hmSQL,hmDtlRecord);

					} // if codition for isFinalize 
            
		   } //End of For Loop 
    

			/* For DTL Modification logic ENDS here */		

           
			
			/* For DTL EXP Modification logic STARTS here */			

            /*
            ArrayList alTempAllExpData=new ArrayList();

			
			 for (int i=0;i<alExpData.size() ;i++ ) {

 			 HashMap hmExpRecord=(HashMap)alExpData.get(i);

             ArrayList alExpRecord=new ArrayList();
			 alExpRecord.add(hmExpRecord.get("QTY"));
			 alExpRecord.add(hmExpRecord.get("TO_BIN_LOCATION_CODE"));
             alExpRecord.add(alCommonData.get(0));
			 alExpRecord.add(alCommonData.get(1));
			 alExpRecord.add(alCommonData.get(2));
			 alExpRecord.add(alHdrData.get(0));
			 alExpRecord.add(alHdrData.get(1));
			 alExpRecord.add(alHdrData.get(2));
			 alExpRecord.add((String)hmExpRecord.get("doc_srl_no"));
			 alExpRecord.add((String)hmExpRecord.get("BATCH_ID"));
			 alExpRecord.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
			 
             alTempAllExpData.add(alExpRecord);
			}


            hmArgData.put(DATA,alTempAllExpData);
			hmArgSQL.put(BATCH_SQL,stSQLExpUpdate);

            hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

            */

            ArrayList alTotalExpData1=new ArrayList();

			for (int i=0;i<alExpData.size() ;i++ ) {

 			HashMap hmExpRecord=(HashMap)alExpData.get(i);
// save the item codein case of error
stCurrentItemCodeInCaseOfError=(String)hmExpRecord.get("ITEM_CODE");
/////////
				sql = (String)hmSQL.get("GetStockItemYNFlag");
				ArrayList alStkYN	=	new ArrayList();
				alStkYN.add(hmExpRecord.get("ITEM_CODE"));
				alStkYN.add(alHdrData.get(5));
				HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
				fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
/////////

			ArrayList alExpDataToIns = new ArrayList() ;

			alExpDataToIns.add(0,(String)alHdrData.get(0));
			alExpDataToIns.add(1,(String)alHdrData.get(1));
			alExpDataToIns.add(2,(String)alHdrData.get(2));

			//int intdocNo=i+1;
            //alExpDataToIns.add(3,String.valueOf(intdocNo));
			alExpDataToIns.add(3,(String)hmExpRecord.get("doc_srl_no"));
			alExpDataToIns.add(4,(String)alHdrData.get(5)); // Return From store Code
			alExpDataToIns.add(5,(String)hmExpRecord.get("ITEM_CODE"));
			alExpDataToIns.add(6,(String)hmExpRecord.get("BATCH_ID"));
			//need to check 
			//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
			//alExpDataToIns.add(7,(String)hmExpRecord.get("ISSUE_TO_BIN_LOCATION_CODE")); //By Mahesh
			alExpDataToIns.add(7,checkForNull((String)hmExpRecord.get("ISSUE_TO_BIN_LOCATION_CODE")," "));
			//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 END
			//alExpDataToIns.add(7,checkForNull((String)hmExpRecord.get("NEW_BIN_LOCATION_CODE")));
            alExpDataToIns.add(8,(String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
			alExpDataToIns.add(9,(String)hmExpRecord.get("TRADE_ID"));
			//alExpDataToIns.add(10,(String)hmExpRecord.get("QTY"));
			alExpDataToIns.add(10,checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));

			alExpDataToIns.add(11,(String)alCommonData.get(0));
			alExpDataToIns.add(12,(String)alCommonData.get(1));
			alExpDataToIns.add(13,(String)alCommonData.get(2));
			alExpDataToIns.add(14,(String)alCommonData.get(0));
			alExpDataToIns.add(15,(String)alCommonData.get(1));
			alExpDataToIns.add(16,(String)alCommonData.get(2));

			alExpDataToIns.add(17,(String)hmExpRecord.get("DOC_TYPE_CODE"));
			alExpDataToIns.add(18,(String)hmExpRecord.get("DOC_NO"));
			alExpDataToIns.add(19,(String)hmExpRecord.get("SEQ_NO"));

			//alExpDataToIns.add(20,(String)hmExpRecord.get("ISSUE_FM_BIN_LOCATION_CODE"));
			//modified on 21/07/2004
            alExpDataToIns.add(20,(String)hmExpRecord.get("NEW_BIN_LOCATION_CODE"));
            

			alTotalExpData1.add(alExpDataToIns);
			}
			
            hmArgData.put(DATA,alTotalExpData1);
			hmArgSQL.put(BATCH_SQL,stSqlDtlExpInsert);

            hmReturn	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);

  

			/* For DTL EXP Modification logic ENDS here */			
			
            //Code need to be checked from here

            if(!isFinalized) {
				for (int i=0;i<alExpData.size() ;i++ ) {

                    HashMap hmExpRecordNotfin=(HashMap)alExpData.get(i);
// save the item codein case of error
					stCurrentItemCodeInCaseOfError=(String)hmExpRecordNotfin.get("ITEM_CODE");

                   /* Again BLOCK new quantity */                
				
					HashMap hmParameter	=	new HashMap();
					hmParameter.put("store_code",alHdrData.get(5));
					hmParameter.put("item_code",(String)hmExpRecordNotfin.get("ITEM_CODE"));
					hmParameter.put("batch_id",(String)hmExpRecordNotfin.get("BATCH_ID"));
					hmParameter.put("bin_location_code",(String)hmExpRecordNotfin.get("ISSUE_TO_BIN_LOCATION_CODE"));
					hmParameter.put("expiry_date_or_receipt_date",(String)hmExpRecordNotfin.get("EXPIRY_RECEIPT_DT"));
					//hmParameter.put("trn_qty",(String)hmExpRecordNotfin.get("QTY"));
					hmParameter.put("trn_qty",checkForNull((String)hmExpRecordNotfin.get("QTY"),(String)hmExpRecordNotfin.get("AVAIL_QTY")));
					hmParameter.put("login_by_id",(String)alCommonData.get(0));
					hmParameter.put("login_at_ws_no",(String)alCommonData.get(1));
					hmParameter.put("login_facility_id",(String)alCommonData.get(2));

/////////
				sql = (String)hmSQL.get("GetStockItemYNFlag");
				ArrayList alStkYN	=	new ArrayList();
				alStkYN.add(hmExpRecordNotfin.get("ITEM_CODE"));
				alStkYN.add(alHdrData.get(5));
				HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
				fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
/////////
				if (fm_stk_item_yn.equals("Y")) {
					hmReturn	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'B'); // B for blocking the new quantity
					throwExceptionWhenFailed(hmReturn);
				}
				         			
				}

			} 


		for (int i=0;i<alExpData.size() ;i++ ) {

                HashMap hmExpRecord=(HashMap)alExpData.get(i);

				/* Updating values for ST_ISSUE_DTL for ret_item_qty BEGINS here */

					ArrayList alTempDtlUpdateFields = new ArrayList();

					alTempDtlUpdateFields.add((String)hmExpRecord.get("ret_item_qty"));
					alTempDtlUpdateFields.add((String)alCommonData.get(0));
					alTempDtlUpdateFields.add((String)alCommonData.get(1));
					alTempDtlUpdateFields.add((String)alCommonData.get(2));
					//alTempDtlUpdateFields.add((String)alHdrData.get(0));
					alTempDtlUpdateFields.add(AltFacilityId);
					alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));

					stSQL	= (String)hmSQL.get("TrnIssDtlUpdateSQL");


					hmArgData.put(DATA,alTempDtlUpdateFields);
					hmArgSQL.put(UPDATE_SQL,stSQL);

					try{
						hmReturn	=	update(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmReturn);
					   }

					catch(Exception ex) { ex.printStackTrace(); }

				/* Updating values for ST_ISSUE_DTL for ret_item_qty ENDS here  */


	            /* Updating values for ST_ISSUE_DTL_EXP for ret_item_qty BEGINS here */

					ArrayList alUpdateFields = new ArrayList();

					//alUpdateFields.add((String)hmExpRecord.get("QTY"));
					//alUpdateFields.add(checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
					//Added by Rabbani against inc no:31625 on 08/03/2012
					//alUpdateFields.add((String)hmExpRecord.get("ret_item_qty"));
					//Modified by suresh.r on 22-08-2014 against 
					alUpdateFields.add(checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
					alUpdateFields.add((String)alCommonData.get(0));
					alUpdateFields.add((String)alCommonData.get(1));
					alUpdateFields.add((String)alCommonData.get(2));
					//alUpdateFields.add((String)alHdrData.get(0));
					alUpdateFields.add(AltFacilityId);
					alUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
					alUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
					alUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
					alUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));
					alUpdateFields.add((String)hmExpRecord.get("BATCH_ID"));
					alUpdateFields.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
                    alUpdateFields.add(checkForNull((String)hmExpRecord.get("NEW_BIN_LOCATION_CODE"))); //18/04/12
					stSQL	= (String)hmSQL.get("TrnIssDtlExpUpdateSQL");


					hmArgData.put(DATA,alUpdateFields);
					hmArgSQL.put(UPDATE_SQL,stSQL);

//					try{
						hmReturn	=	update(connection, hmArgData, hmArgSQL);
						       message = (String)hmReturn.get("message");
			                    msgid   = (String)hmReturn.get("msgid");
			                  //System.out.println("HSISRN manager.java,1193,message = > "+message+" msgid = > "+msgid);
				              if(message.contains("NO_RECORD_UPDATED"))
			                  {
				              hmReturn.put(MSGID,  "NO_RECORD_UPDATED");
				              hmReturn.put(MESSAGE,"NO_RECORD_UPDATED");
			                  }
						     throwExceptionWhenFailed(hmReturn);
//					   }

//					catch(Exception ex) { ex.printStackTrace(); }

			    /* Updating values for ST_ISSUE_DTL_EXP for ret_item_qty ENDS here  */

}




			if(isFinalized) {
                
				for (int i=0;i<alExpData.size() ;i++ ) {

                HashMap hmExpRecord=(HashMap)alExpData.get(i);

				/* Updating values for ST_ISSUE_DTL for ret_item_qty BEGINS here 

					ArrayList alTempDtlUpdateFields = new ArrayList();

					alTempDtlUpdateFields.add((String)hmExpRecord.get("QTY"));
					alTempDtlUpdateFields.add((String)alHdrData.get(0));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));

					stSQL	= (String)hmSQL.get("TrnIssDtlUpdateSQL");


					hmArgData.put(DATA,alTempDtlUpdateFields);
					hmArgSQL.put(UPDATE_SQL,stSQL);

					try{
						hmReturn	=	update(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmReturn);
					   }

					catch(Exception ex) { ex.printStackTrace(); }

				/* Updating values for ST_ISSUE_DTL for ret_item_qty ENDS here  


	            /* Updating values for ST_ISSUE_DTL_EXP for ret_item_qty BEGINS here 

					ArrayList alUpdateFields = new ArrayList();

					alUpdateFields.add((String)hmExpRecord.get("QTY"));
					alUpdateFields.add((String)alHdrData.get(0));
					alUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
					alUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
					alUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
					alUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));
					alUpdateFields.add((String)hmExpRecord.get("BATCH_ID"));
					alUpdateFields.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));

					stSQL	= (String)hmSQL.get("TrnIssDtlExpUpdateSQL");


					hmArgData.put(DATA,alUpdateFields);
					hmArgSQL.put(UPDATE_SQL,stSQL);

//					try{
						hmReturn	=	update(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmReturn);
//					   }

//					catch(Exception ex) { ex.printStackTrace(); }

			    Updating values for ST_ISSUE_DTL_EXP for ret_item_qty ENDS here  */


				/* Inside DTL_EXP FOR LOOP Calling the UpdateBatchOnline STARTS here */

				HashMap hmParameters = new HashMap();
// save the item codein case of error
				stCurrentItemCodeInCaseOfError=(String)hmExpRecord.get("ITEM_CODE");
							
				hmParameters.put("item_code",(String)hmExpRecord.get("ITEM_CODE"));//item_code
				hmParameters.put("store_code",alHdrData.get(5));
				hmParameters.put("to_store_code",alHdrData.get(6));
				hmParameters.put("trn_type","RET");
				//hmParameters.put("trn_qty",(String)hmExpRecord.get("QTY"));
				hmParameters.put("trn_qty",checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
				hmParameters.put("batch_id",(String)hmExpRecord.get("BATCH_ID"));
				hmParameters.put("expiry_date_or_receipt_date",(String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
				hmParameters.put("trade_id",(String)hmExpRecord.get("TRADE_ID"));
				hmParameters.put("to_bin_location_code",(String)hmExpRecord.get("ISSUE_FM_BIN_LOCATION_CODE")); //NEW_BIN_LOCATION_CODE(String)hmExpRecord.get("TO_BIN_LOCATION_CODE")
				hmParameters.put("from_bin_location_code",(String)hmExpRecord.get("ISSUE_TO_BIN_LOCATION_CODE"));
				hmParameters.put("suspended_batch_allowed_yn","N");
				hmParameters.put("release_batch_yn","N");
				hmParameters.put("last_receipt_date",""); // doc_date  
				hmParameters.put("last_issue_date",""); // doc_date
				hmParameters.put("login_by_id",(String)alCommonData.get(0));
				hmParameters.put("login_at_ws_no",(String)alCommonData.get(1));
				hmParameters.put("login_facility_id",(String)alCommonData.get(2));
                hmParameters.put("modified_date",(String)hmExpRecord.get("MODIFIED_DATE"));
//				String modified_date ="Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')";
				  hmparam = new ArrayList();
			            
				 p_from_bin_location_code		= checkForNull (hmParameters.get("from_bin_location_code"));
				 p_from_store_code				= checkForNull (hmParameters.get("store_code")); 
				 p_to_store_code					= checkForNull	(hmParameters.get("to_store_code"));
				 p_to_bin_location_code			= checkForNull (hmParameters.get("to_bin_location_code"));
				 p_item_code						= checkForNull (hmParameters.get("item_code")); 
				 p_batch_id						= checkForNull (hmParameters.get("batch_id")); 
				 p_expiry_date_or_receipt_date	= checkForNull (hmParameters.get("expiry_date_or_receipt_date"));
						
						   hmparam.add(p_from_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_from_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                    mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
						   							   
						   hmParameters.put("modified_date",mod_date);
						   hmparam = new ArrayList();
						    hmparam.add(p_to_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_to_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                    mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
					
						   hmParameters.put("to_modified_date",mod_date);
			
				
				
				updateBatchOnLine(connection, hmSQL, hmParameters);
				
				/* Inside DTL_EXP FOR LOOP Calling the UpdateBAtchOnline ENDS here */


				
				/* Setting values(for FORM) and inserting into ST_ITEM_TRN_DTL table BEGINS here */

                ArrayList alTempItmDtl = (ArrayList)hmItemDtl.get((String)hmExpRecord.get("ITEM_CODE")); 


/////////
				sql = (String)hmSQL.get("GetStockItemYNFlag");
				ArrayList alStkYN	=	new ArrayList();
				alStkYN.add(hmExpRecord.get("ITEM_CODE"));
				alStkYN.add(alHdrData.get(5));
				HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
				fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
/////////
				ArrayList alFromDtlTrn=new ArrayList();
				String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)alHdrData.get(5)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
				
				//alFromDtlTrn.add(alHdrData.get(0));//facility_id
				alFromDtlTrn.add(fm_facility_id);//facility_id
				alFromDtlTrn.add(alHdrData.get(5));//From store_code
				alFromDtlTrn.add((String)hmExpRecord.get("ITEM_CODE"));//item_code
				alFromDtlTrn.add(""+1);
				alFromDtlTrn.add("RET");
				alFromDtlTrn.add(alHdrData.get(1));
				alFromDtlTrn.add(alHdrData.get(2));
				alFromDtlTrn.add((String)hmExpRecord.get("doc_srl_no"));
				alFromDtlTrn.add(alHdrData.get(3));
				alFromDtlTrn.add(alHdrData.get(4));
				alFromDtlTrn.add((String)hmExpRecord.get("BATCH_ID"));
				alFromDtlTrn.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
				//alFromDtlTrn.add("-"+(String)hmExpRecord.get("QTY"));
				alFromDtlTrn.add("-"+checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
				alFromDtlTrn.add((String)alTempItmDtl.get(0)); 
				alFromDtlTrn.add((String)alTempItmDtl.get(2)); 

				alFromDtlTrn.add((String)hmExpRecord.get("DOC_TYPE_CODE")); 
				alFromDtlTrn.add((String)hmExpRecord.get("DOC_NO")); 
				alFromDtlTrn.add((String)hmExpRecord.get("DOC_SRL_NO")); 
				alFromDtlTrn.add((String)hmExpRecord.get("DOC_DATE")); 


                alFromDtlTrn.add(alHdrData.get(6)); //other store 
				alFromDtlTrn.add(fm_stk_item_yn);//"Y");
				alFromDtlTrn.add((String)alCommonData.get(0));
				alFromDtlTrn.add((String)alCommonData.get(1));
				alFromDtlTrn.add((String)alCommonData.get(2));
				alFromDtlTrn.add((String)alCommonData.get(0));
				alFromDtlTrn.add((String)alCommonData.get(1));
				alFromDtlTrn.add((String)alCommonData.get(2));
				//alFromDtlTrn.add(checkForNull((String)hmExpRecord.get("ISSUE_TO_BIN_LOCATION_CODE")));//fm_bin_location_code
				//Modified on 21/07/2004
				alFromDtlTrn.add(checkForNull((String)hmExpRecord.get("NEW_BIN_LOCATION_CODE")));
				alFromDtlTrn.add((String)hmExpRecord.get("TRADE_ID"));//trade_id 

                alFromDtlTrn.add((String)hmExpRecord.get("SEQ_NO"));

                
				stSQL	= (String)hmSQL.get("TrnDtlInsertSQL");


				hmArgData.put(DATA,alFromDtlTrn);
			    hmArgSQL.put(INSERT_SQL,stSQL);

//				try{
					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmReturn);
//				   }
//				catch(Exception ex) { ex.printStackTrace(); }
				if (fm_stk_item_yn.equals("N")) {
					alFromDtlTrn.set(3,""+3);
					//alFromDtlTrn.set(12,hmExpRecord.get("QTY"));
					alFromDtlTrn.set(12,checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
					alFromDtlTrn.set(4,"CON");

					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmReturn);
				}

			   /* Setting values(for FORM) and inserting into ST_ITEM_TRN_DTL table ENDS here */


			   /* Setting values(for TO) and inserting into ST_ITEM_TRN_DTL table BEGINS here */
                
				ArrayList alToDtlTrn=new ArrayList();
				String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)alHdrData.get(6)).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
				
				//alToDtlTrn.add(alHdrData.get(0)); //facility_id
				alToDtlTrn.add(to_facility_id); //facility_id
				alToDtlTrn.add(alHdrData.get(6)); //To store_code
				alToDtlTrn.add((String)hmExpRecord.get("ITEM_CODE"));//item_code
				alToDtlTrn.add(""+2);
				alToDtlTrn.add("RET");
				alToDtlTrn.add(alHdrData.get(1));
				alToDtlTrn.add(alHdrData.get(2));
				alToDtlTrn.add((String)hmExpRecord.get("doc_srl_no"));
				alToDtlTrn.add(alHdrData.get(3));
				alToDtlTrn.add(alHdrData.get(4));
				alToDtlTrn.add((String)hmExpRecord.get("BATCH_ID"));
				alToDtlTrn.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
				//alToDtlTrn.add((String)hmExpRecord.get("QTY"));
				alToDtlTrn.add(checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
				alToDtlTrn.add((String)alTempItmDtl.get(0)); 
				alToDtlTrn.add((String)alTempItmDtl.get(2)); 

				alToDtlTrn.add((String)hmExpRecord.get("DOC_TYPE_CODE")); 
				alToDtlTrn.add((String)hmExpRecord.get("DOC_NO")); 
				alToDtlTrn.add((String)hmExpRecord.get("DOC_SRL_NO")); 
				alToDtlTrn.add((String)hmExpRecord.get("DOC_DATE")); 

                alToDtlTrn.add(alHdrData.get(5)); 
				alToDtlTrn.add("Y");
				alToDtlTrn.add((String)alCommonData.get(0));
				alToDtlTrn.add((String)alCommonData.get(1));
				alToDtlTrn.add((String)alCommonData.get(2));
				alToDtlTrn.add((String)alCommonData.get(0));
				alToDtlTrn.add((String)alCommonData.get(1));
				alToDtlTrn.add((String)alCommonData.get(2));
				//alToDtlTrn.add(checkForNull((String)hmExpRecord.get("ISSUE_FM_BIN_LOCATION_CODE"))); // to_bin_location_code
				//Modified on 21/07/2004
                alToDtlTrn.add(checkForNull((String)hmExpRecord.get("NEW_BIN_LOCATION_CODE"))); 
				alToDtlTrn.add((String)hmExpRecord.get("TRADE_ID"));//trade_id 

                alToDtlTrn.add((String)hmExpRecord.get("SEQ_NO"));
				
				stSQL	= (String)hmSQL.get("TrnDtlInsertSQL");

               
				hmArgData.put(DATA,alToDtlTrn);
			    hmArgSQL.put(INSERT_SQL,stSQL);

//				try{
					hmReturn	=	insert(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmReturn);
//				   }
//				catch(Exception ex) { ex.printStackTrace(); }
               

			   /* Setting values(for TO) and inserting into ST_ITEM_TRN_DTL table BEGINS here */


			   } //End of for Loop 

			}  //End of if 

			connection.commit();
		}
		catch(Exception exception) {
			try {
				connection.rollback();
				exception.printStackTrace();
			}
			catch (Exception subException) {
				subException.printStackTrace(); 
			}
			hmReturn.put(RESULT,FALSE);
			hmReturn.put(MSGID,exception.getMessage());
			hmReturn.put(MESSAGE,exception.toString());
			if ((exception.getMessage().equals("INSUFFICIENT_BATCH_QTY")) || (exception.getMessage().equals("NEGATIVE_STOCK"))) {
				hmReturn.put("flag",stCurrentItemCodeInCaseOfError);
			}
		}
		finally{
			try{
				closeConnection( connection, properties );
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		hmReturn.put("doc_no", doc_no);
		return hmReturn;
 }



/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

public HashMap delete( HashMap hmData, HashMap hmSQLValues)// throws RemoteException 
	{


		hmSQL		= hmSQLValues;


		HashMap hmResult=new HashMap();
		hmResult.put("result", FALSE);

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		ArrayList alHdrData		=new ArrayList();
		ArrayList alCommonData		=new ArrayList(); 	

		String stSQLExpDeleteAll  = "" ;
	//	String stSQLExpDelete	  =	"" ;
		String stSQLDtlDeleteAll  = "" ;
	//	String stSQLDtlDelete	  =	"" ;
		String stSQLHdrDelete	  =	"" ; 
	//	String stSQLIDtlUpdate	  =	"" ; 
	//	String stSQLIDtlExpUpdate	  =	"" ; 


        try{

            properties = (Properties)hmData.get("properties");
            connection = getConnection(properties);
            connection.setAutoCommit(false);

			alHdrData =	(ArrayList)hmData.get("HdrInsertData"); 
			alHdrData.add("%");

			alCommonData	=	(ArrayList)	hmData.get("CommonData");

  		    stSQLExpDeleteAll =	(String)hmSQL.get ("stSQLExpDeleteAll");
//			stSQLExpDelete	  =	(String)hmSQL.get ("stSQLExpDelete");   

			stSQLDtlDeleteAll =	(String)hmSQL.get ("stSQLDtlDeleteALL");
//			stSQLDtlDelete	  =	(String)hmSQL.get ("stSQLDtlDelete");

			stSQLHdrDelete	  =	(String)hmSQL.get ("stSQLHdrDelete");

//			stSQLIDtlUpdate	  =	(String)hmSQL.get ("TrnIssDtlUpdateSQL");
//			stSQLIDtlExpUpdate	  =	(String)hmSQL.get ("TrnIssDtlExpUpdateSQL");
			

				ArrayList alExpData = (ArrayList)hmData.get("ExpInsertData");
			//	ArrayList alDtlData = (ArrayList)hmData.get("DtlInsertData");



				for (int i=0;i<alExpData.size() ;i++ ) {


					HashMap hmExpRecord=(HashMap)alExpData.get(i);

				/* Updating values for ST_ISSUE_DTL for ret_item_qty BEGINS here */

					ArrayList alTempDtlUpdateFields = new ArrayList();
					alTempDtlUpdateFields.add("-"+(String)hmExpRecord.get("ret_item_qty"));
					alTempDtlUpdateFields.add((String)alCommonData.get(0));
					alTempDtlUpdateFields.add((String)alCommonData.get(1));
					alTempDtlUpdateFields.add((String)alCommonData.get(2));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
					//alTempDtlUpdateFields.add((String)alHdrData.get(0));
					alTempDtlUpdateFields.add((String)alCommonData.get(3));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
					alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
					alTempDtlUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));

					stSQL	= (String)hmSQL.get("TrnIssDtlUpdateSQL");


					hmArgData.put(DATA,alTempDtlUpdateFields);
					hmArgSQL.put(UPDATE_SQL,stSQL);

					try{
						hmResult	=	update(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);
					   }

					catch(Exception ex) { ex.printStackTrace(); }

				/* Updating values for ST_ISSUE_DTL for ret_item_qty ENDS here  */


	            /* Updating values for ST_ISSUE_DTL_EXP for ret_item_qty BEGINS here */

					ArrayList alUpdateFields = new ArrayList();

					//alUpdateFields.add("-"+(String)hmExpRecord.get("QTY"));
				//alUpdateFields.add("-"+checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
					//Added by Rabbani against inc no:31625 on 08/03/2012
					//alUpdateFields.add("-"+(String)hmExpRecord.get("ret_item_qty"));
					//Modified by suresh.r on 22-08-2014 against 
					alUpdateFields.add("-"+checkForNull((String)hmExpRecord.get("QTY"),(String)hmExpRecord.get("AVAIL_QTY")));
					alUpdateFields.add((String)alCommonData.get(0));
					alUpdateFields.add((String)alCommonData.get(1));
					alUpdateFields.add((String)alCommonData.get(2));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 beg
					//alUpdateFields.add((String)alHdrData.get(0));
					alUpdateFields.add((String)alCommonData.get(3));
					//Added by suresh.r on 24-02-2013 against AMS-CRF-0054 end
					alUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
					alUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
					alUpdateFields.add((String)hmExpRecord.get("SEQ_NO"));
					alUpdateFields.add((String)hmExpRecord.get("ITEM_CODE"));
					alUpdateFields.add((String)hmExpRecord.get("BATCH_ID"));
					alUpdateFields.add((String)hmExpRecord.get("EXPIRY_RECEIPT_DT"));
                    alUpdateFields.add(checkForNull((String)hmExpRecord.get("NEW_BIN_LOCATION_CODE"))); //18/04/12
					
					stSQL	= (String)hmSQL.get("TrnIssDtlExpUpdateSQL");


					hmArgData.put(DATA,alUpdateFields);
					hmArgSQL.put(UPDATE_SQL,stSQL);

					try{
						hmResult	=	update(connection, hmArgData, hmArgSQL);
						      String  message = (String)hmResult.get("message");
			              //    String  msgid = (String)hmResult.get("msgid"); Commented for Unused Variable IN063878
			                 // System.out.println("HSISRN manager.java,1953,message = > "+message+" msgid = > "+msgid);
				              if(message.contains("NO_RECORD_UPDATED"))
			                  {
				              hmResult.put(MSGID,  "NO_RECORD_UPDATED");
				              hmResult.put(MESSAGE,"NO_RECORD_UPDATED");
			                  }
						
						
						throwExceptionWhenFailed(hmResult);
					   }

					catch(Exception ex) { ex.printStackTrace(); }

			/*    Updating values for ST_ISSUE_DTL_EXP for ret_item_qty ENDS here  */
				}

   							
			sql_st_issue_ret_dtl_exp_select_for_block_rel	=	(String)hmSQL.get ("sql_st_issue_ret_dtl_exp_select_for_block_rel");   
 		    //ArrayList alRecords	=	fetchRecords(connection,sql_st_issue_ret_dtl_exp_select_for_block_rel, alHdrData);
			ArrayList alRecords	=	fetchRecords(connection,eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ISSUE_RETURN_DTL_EXP_SELECT_FOR_BLOCK_REL_DEL"), alHdrData); 

		    for (int j=0; j<alRecords.size(); j++) {

            
			HashMap hmRecord	=	(HashMap)alRecords.get(j);
			HashMap hmParameter	=	new HashMap();
			hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
			hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
			hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
			hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
			hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
			hmParameter.put("trn_qty",hmRecord.get("ITEM_QTY"));
			hmParameter.put("login_by_id",alCommonData.get(0));
			hmParameter.put("login_at_ws_no",alCommonData.get(1));
			hmParameter.put("login_facility_id",alCommonData.get(2));
			String sql = (String)hmSQL.get("GetStockItemYNFlag");
			ArrayList alStkYN	=	new ArrayList();
			alStkYN.add(hmRecord.get("ITEM_CODE"));
			alStkYN.add(hmRecord.get("STORE_CODE"));
			HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
			String fm_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
				if (fm_stk_item_yn.equals("Y")) {
					hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R');
					throwExceptionWhenFailed(hmResult);
				}

//			hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R');//false to release the batch..
//			throwExceptionWhenFailed(hmResult);

		   
		   
		   }
            alHdrData.remove(3);

		 	hmArgData.put(DATA, alHdrData);
			System.out.println("hmArgData====2002==>>" +hmArgData);

			//uncommented against inc no:35321 on 25/09/12
			hmArgSQL.put(DELETE_SQL,stSQLExpDeleteAll);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
          
		   	hmArgSQL.put(DELETE_SQL,stSQLDtlDeleteAll);
           	hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult); 
			//25/09/12

			/*hmArgSQL.put(DELETE_SQL,stSQLHdrDelete);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);*/
			
			hmArgData.put(DATA,(ArrayList)hmData.get("ALUPDATEHDRDATA"));
			hmArgSQL.put(UPDATE_SQL,(String)hmSQL.get ("UpdateSqlfordelete"));
			hmResult	=	update(connection, hmArgData, hmArgSQL);		
			connection.commit();

         }catch(Exception exception){
			try{
				connection.rollback();
				exception.printStackTrace();
            }
            catch(Exception subException){
                subException.printStackTrace();
            }
            hmResult.put(RESULT, FALSE);
            hmResult.put(MSGID, exception.getMessage());
            hmResult.put(MESSAGE, exception.toString());
        }
        finally{
            try{
				closeConnection(connection, properties);
            }
            catch(Exception exception){
                exception.printStackTrace();
            }
        }
        return hmResult;
	
}

public void generateDocNo(Connection connection,HashMap hmData,HashMap hmSQL) throws Exception {
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
//		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alCommonData;
		String		stSQL		=	null;

		alCommonData	=	(ArrayList)	hmData.get("CommonData");
		stSQL			=	(String)	hmSQL.get ("NextDocNoUpdateSQL");
		

		hmArgData.put(DATA,alCommonData);
		hmArgSQL.put(UPDATE_SQL,stSQL);

		hmReturn	=	update(connection, hmArgData, hmArgSQL);
		throwExceptionWhenFailed(hmReturn);

		//hmReturn.put("flag","Doc No: "+alHdrData.get(2));
	}



	public void ItemMoveSummaryForIssueReturn (Connection connection,HashMap hmData,HashMap hmSQL,HashMap hmDtlData) throws Exception 
	{

		HashMap	hmArgData				=	new HashMap();
		HashMap	hmArgSQL				=	new HashMap();
        HashMap	hmtempDtlData			=	new HashMap();

        hmtempDtlData					=   hmDtlData ;
		//ArrayList tempAlDtlData			=	new ArrayList();

		ArrayList alCommonData			=	(ArrayList)	hmData.get("CommonData");
        ArrayList alHdrData				=	(ArrayList)	hmData.get("HdrInsertData");
        ArrayList alHdrData1				=	(ArrayList)	hmData.get("HdrInsertData");
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");
		if(item_class_based.equals("Y")){
		alHdrData = new ArrayList();
		alHdrData =(ArrayList)alHdrData1.get(0);
		}

		ArrayList alItemMoveSummRecord	=	new ArrayList();

        String stItemCode	   = (String)hmtempDtlData.get("item_code") ;
		String stFromStoreCode = (String)hmtempDtlData.get("from_store_code") ;
		String stToStoreCode   = (String)hmtempDtlData.get("to_store_code") ;



        /* Check the item for stacable in both the store */

		ArrayList batchDetails = getBatchDetails(connection,stItemCode,stFromStoreCode,stToStoreCode);

		String l_doc_date	= (String)alHdrData.get(3); //doc_date
        alItemMoveSummRecord.clear();
		alItemMoveSummRecord.add(l_doc_date);
		alItemMoveSummRecord.add(l_doc_date);
		HashMap hmResult = fetchRecord(connection,(String)hmSQL.get ("GetMonthAndYear"));
		String l_move_month	= (String)hmResult.get("MM");
		String l_move_year	= (String)hmResult.get("YYYY");

        /* For Record to be inserted in st_item_move_summ table */
		
		String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)hmtempDtlData.get("from_store_code")).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014

		alItemMoveSummRecord.clear();
		//alItemMoveSummRecord.add(alHdrData.get(0));								// facility_id
		alItemMoveSummRecord.add(fm_facility_id);								// facility_id
		alItemMoveSummRecord.add((String)hmtempDtlData.get("item_code"));       // Item code
		alItemMoveSummRecord.add((String)hmtempDtlData.get("from_store_code")); // fm store_code
		alItemMoveSummRecord.add(l_move_month);
		alItemMoveSummRecord.add(l_move_year);

		/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/
		ArrayList  nafitive_value_to_zero=new ArrayList();
		//nafitive_value_to_zero.add(alHdrData.get(0));      // facility_id
		nafitive_value_to_zero.add(fm_facility_id);      // facility_id
		nafitive_value_to_zero.add((String)hmtempDtlData.get("item_code"));     // Item code
		nafitive_value_to_zero.add((String)hmtempDtlData.get("from_store_code"));    // store_code
		nafitive_value_to_zero.add(l_move_month);
		nafitive_value_to_zero.add(l_move_year);
	
		hmResult = fetchRecord(connection,(String)hmSQL.get ("SummaryExistsCheckSQL"),alItemMoveSummRecord);
		int summary_count= Integer.parseInt((String)(hmResult.get("COUNT")));

		if(summary_count == 0) {


			alItemMoveSummRecord.clear();

			//alItemMoveSummRecord.add(alHdrData.get(0));     //facility code
			alItemMoveSummRecord.add(fm_facility_id);     //facility code
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_code")); //Item code
			alItemMoveSummRecord.add((String)hmtempDtlData.get("from_store_code"));      // store_code
			alItemMoveSummRecord.add(l_move_year);
			alItemMoveSummRecord.add(l_move_month);

			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));        //Quantity
			/* @Name - Priya
			* @Date - 13/05/2010
			* @Inc# - 21352 
			* @Desc - As Qty & cost values have to be stored as negative in st_item_move_summ table for From Store "-" is added while passing the parameters 
			*/
			alItemMoveSummRecord.add("-"+(String)hmtempDtlData.get("mm_trn_qty"));        //Quantity
				/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmtempDtlData.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add("-"+(String)hmtempDtlData.get("item_cost_value")); //month_closing_value = item_cost_value
			}
			//Cost value
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));		//From Quantity for month end
			alItemMoveSummRecord.add("-"+(String)hmtempDtlData.get("mm_trn_qty"));		//From Quantity for month end
			alItemMoveSummRecord.add("-"+(String)hmtempDtlData.get("item_cost_value")); //Cost value for month end
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));        //For OUT_RET_QTY_ST
			alItemMoveSummRecord.add("-"+(String)hmtempDtlData.get("mm_trn_qty"));        //For OUT_RET_QTY_ST
            alItemMoveSummRecord.add("-"+(String)hmtempDtlData.get("item_cost_value")); //For OUT_RET_COST_ST

			alItemMoveSummRecord.add(alCommonData.get(0));
			alItemMoveSummRecord.add(alCommonData.get(1));
			alItemMoveSummRecord.add(alCommonData.get(2));
			alItemMoveSummRecord.add(alCommonData.get(0));
			alItemMoveSummRecord.add(alCommonData.get(1));
			alItemMoveSummRecord.add(alCommonData.get(2));

            
		   
           if(((String)batchDetails.get(5)).equals("Y"))
  			 stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQLST");
		   else
             stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQLNS");
			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmReturn	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}
		else {

			alItemMoveSummRecord.clear();
		
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));		//From Quantity
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));		//From Quantity
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value")); //Cost value
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));		//From Quantity for month end
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));		//From Quantity for month end

				/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmtempDtlData.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value")); //month_closing_value = item_cost_value
			} //Cost value for month end
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));		//For OUT_RET_QTY_ST
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));		//For OUT_RET_QTY_ST
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value")); //For OUT_RET_COST_ST

			alItemMoveSummRecord.add(alCommonData.get(0));
			alItemMoveSummRecord.add(alCommonData.get(1));
			alItemMoveSummRecord.add(alCommonData.get(2));

			//alItemMoveSummRecord.add(alHdrData.get(0));     // facility_id
			alItemMoveSummRecord.add(fm_facility_id);     // facility_id
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_code")); // Item code
			alItemMoveSummRecord.add((String)hmtempDtlData.get("from_store_code")); // store_code
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			if(((String)batchDetails.get(5)).equals("Y"))
				stSQL = (String)hmSQL.get("ItemMovSumFromUpdateSQLST");
			else
				stSQL	=	(String)hmSQL.get("ItemMovSumFromUpdateSQLNS");

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmReturn	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}

		/* For To record to be inserted in st_item_move_summ table */
		String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)hmtempDtlData.get("to_store_code")).get("FACILITY_ID");


		alItemMoveSummRecord.clear();

		//alItemMoveSummRecord.add(alCommonData.get(2));					      // facility_id
		alItemMoveSummRecord.add(to_facility_id);					      // facility_id
		alItemMoveSummRecord.add((String)hmtempDtlData.get("item_code"));     // Item code
		alItemMoveSummRecord.add((String)hmtempDtlData.get("to_store_code")); // store_code
		alItemMoveSummRecord.add(l_move_month);
		alItemMoveSummRecord.add(l_move_year);

		hmResult = fetchRecord(connection,(String)hmSQL.get ("SummaryExistsCheckSQL"),alItemMoveSummRecord);
		summary_count= Integer.parseInt((String)(hmResult.get("COUNT")));



		if(summary_count == 0) {

			alItemMoveSummRecord.clear();

			//alItemMoveSummRecord.add(alHdrData.get(0));     //facility code
			alItemMoveSummRecord.add(to_facility_id);     //facility code
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_code")); //Item code
			alItemMoveSummRecord.add((String)hmtempDtlData.get("to_store_code"));      // store_code
			alItemMoveSummRecord.add(l_move_year);
			alItemMoveSummRecord.add(l_move_month);

			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));        //Quantity
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));        //Quantity
			/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmtempDtlData.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value")); //month_closing_value = item_cost_value
			}
			//Cost value
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty")); //From Quantity for month end
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty")); //From Quantity for month end
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value")); //Cost value for month end
            //alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));
            alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value"));

			alItemMoveSummRecord.add(alCommonData.get(0));
			alItemMoveSummRecord.add(alCommonData.get(1));
			alItemMoveSummRecord.add(alCommonData.get(2));
			alItemMoveSummRecord.add(alCommonData.get(0));
			alItemMoveSummRecord.add(alCommonData.get(1));
			alItemMoveSummRecord.add(alCommonData.get(2));


			//stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQLST");
			/* @Name - Priya
			* @Date - 13/05/2010
			* @Inc# - 21352 
			* @Desc - For To Store Qty & cost values should be stored in the Columns 'in_ret_qty' & 'in_ret_cost' respectively in the table st_item_move_summ table for  
			*/
			stSQL = "INSERT INTO st_item_move_summ(facility_id,	item_code, store_code, move_year, move_month, month_closing_qty, month_closing_value,ret_qty, ret_cost,in_ret_qty,in_ret_cost,added_by_id,	added_date,	added_at_ws_no,	added_facility_id, modified_by_id, modified_date, modified_at_ws_no, modified_facility_id) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,SYSDATE,?,?,?,SYSDATE,?,?)";
			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmReturn	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
			
		}
		else {      


			alItemMoveSummRecord.clear();

			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));        //Quantity
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));        //Quantity
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value")); //Cost value
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));        //From Quantity for month end
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));        //From Quantity for month end
			/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmtempDtlData.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value")); //month_closing_value = item_cost_value
			}
			 //Cost value for month end
			//alItemMoveSummRecord.add((String)hmtempDtlData.get("item_qty"));       
			alItemMoveSummRecord.add((String)hmtempDtlData.get("mm_trn_qty"));       
            alItemMoveSummRecord.add((String)hmtempDtlData.get("item_cost_value"));

			alItemMoveSummRecord.add(alCommonData.get(0));
			alItemMoveSummRecord.add(alCommonData.get(1));
			alItemMoveSummRecord.add(alCommonData.get(2));

			//alItemMoveSummRecord.add(alHdrData.get(0));							  // facility_id
			alItemMoveSummRecord.add(to_facility_id);							  // facility_id
			alItemMoveSummRecord.add((String)hmtempDtlData.get("item_code"));     // Item code
			alItemMoveSummRecord.add((String)hmtempDtlData.get("to_store_code")); // to store_code
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			if(((String)batchDetails.get(6)).equals("Y"))
				stSQL = (String)hmSQL.get ("ItemMovSumToUpdateSQLST");

			/* Always stock item...(Issuing store always all item stock item in that store)
			else
				stSQL = (String)hmSQL.get ("ItemMovSumToUpdateSQLNS");
            */
			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmReturn	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);

		}

			/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/

		stSQL="UPDATE st_item_move_summ SET month_opening_value = (CASE WHEN month_opening_qty = 0 THEN 0 WHEN month_opening_value < 0 THEN 0 WHEN month_opening_value > 0   THEN month_opening_value END ), month_closing_value = (CASE WHEN month_closing_qty = 0 THEN 0 WHEN month_closing_value < 0 THEN 0 WHEN month_closing_value > 0 THEN month_closing_value END ) WHERE facility_id = ? AND item_code = ? AND store_code = ? AND move_month = ? AND move_year = ? ";
		
		hmArgData.put(DATA,nafitive_value_to_zero);
		hmArgSQL.put(UPDATE_SQL,stSQL);
		hmReturn	=	update(connection, hmArgData, hmArgSQL);
		throwExceptionWhenFailed(hmReturn);
	}

	public ArrayList getBatchDetails(Connection connection,String item_code, String store_code,String to_store_code )throws Exception {

		ArrayList BatchDetails=new ArrayList();
		//Connection connection = null;
		//int isValidDocDate = -1;
		try {
			//connection = getConnection();

			// To call the procedure st_stock_availability_status

			String[] strParameters = new String[7];

			strParameters[0] = item_code;
			strParameters[1] = store_code;
			strParameters[2] = "0";
			strParameters[3] = "N";
			strParameters[4] = "";//stHeaderBean.getSysDate();
			strParameters[5] = "Y";
			strParameters[6] = to_store_code ;


			HashMap hmStockAvailabilityStatus = getStockAvailabilityStatus(connection,strParameters);

			BatchDetails.add((String)hmStockAvailabilityStatus.get("stock_available_yn"));
			BatchDetails.add((String)hmStockAvailabilityStatus.get("item_unit_cost"));
			/* @Name - Priya
				* @Date - 02/06/2010
				* @Inc# - 
				* @Desc - To get the Unit Cost from the function 'ST_DISPLAY_COST_DECIMALS' and  assign it to the item_unit_cost key
				*/
			String storeItemUnitCost=getUnitCost(item_code,store_code,connection);
			//BatchDetails.add(new Double ((String)hmStockAvailabilityStatus.get("store_item_unit_cost")));
			BatchDetails.add(new Double (storeItemUnitCost));
			BatchDetails.add(new Double ((String)hmStockAvailabilityStatus.get("available_stock")));
			BatchDetails.add(new Double ((String)hmStockAvailabilityStatus.get("expired_stock")));
			BatchDetails.add((String)hmStockAvailabilityStatus.get("stock_item_yn"));
			BatchDetails.add((String)hmStockAvailabilityStatus.get("to_stock_item_yn"));
	
		}
		catch(Exception exception) {
			exception.printStackTrace();
			throw exception;
		}
	/*	finally {
			//closeConnection(connection);
		}*/
		return BatchDetails;
	}

	public HashMap getStockAvailabilityStatus(Connection connection,String [] stParameters)throws Exception{
		//Connection connection = null;
		CallableStatement callableStatement = null;
		HashMap hmReturn	=	new HashMap();


		try{
			//connection = getConnection();
			callableStatement	= connection.prepareCall("{ CALL st_stock_availability_status(?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
			callableStatement.setString(1, stParameters[0]);//item_code
			callableStatement.setString(2, stParameters[1]);//store_code
			callableStatement.setLong(3, Long.parseLong(stParameters[2]));//qty_required
			callableStatement.setString(4, stParameters[3]);//consider_qty_required_yn
			callableStatement.setString(5, stParameters[4]);//effective_date_for_expiry
			callableStatement.setString(6, stParameters[5]);//include_suspended_batch_yn
			callableStatement.setString(7, stParameters[6]);//to_store_code
			callableStatement.registerOutParameter(8, Types.VARCHAR);	//stock_available_yn
			callableStatement.registerOutParameter(9, Types.INTEGER);	//item_unit_cost
			callableStatement.registerOutParameter(10, Types.INTEGER);	//store_item_unit_cost
			callableStatement.registerOutParameter(11, Types.INTEGER);	//available_stock
			callableStatement.registerOutParameter(12, Types.INTEGER);	//expired_stock
			callableStatement.registerOutParameter(13, Types.VARCHAR);	//stock_item_yn
			callableStatement.registerOutParameter(14, Types.VARCHAR);	//to_stock_item_yn
			callableStatement.registerOutParameter(15, Types.INTEGER);	//to_qty_on_hand
			callableStatement.registerOutParameter(16, Types.INTEGER);	//to_store_item_unit_cost
			callableStatement.registerOutParameter(17, Types.VARCHAR);	//to_store_master_bin
			callableStatement.registerOutParameter(18, Types.VARCHAR);	//item_Store_combination_exists
			callableStatement.registerOutParameter(19, Types.VARCHAR);	//msg_text
			callableStatement.execute();
			
			hmReturn.put("stock_available_yn",callableStatement.getString(8));
			hmReturn.put("item_unit_cost",""+callableStatement.getLong(9));
			hmReturn.put("store_item_unit_cost",""+callableStatement.getLong(10));
			hmReturn.put("available_stock",""+callableStatement.getLong(11));
			hmReturn.put("expired_stock",""+callableStatement.getLong(12));
			hmReturn.put("stock_item_yn",callableStatement.getString(13));
			hmReturn.put("to_stock_item_yn",callableStatement.getString(14));
			hmReturn.put("to_qty_on_hand",""+callableStatement.getLong(15));
			hmReturn.put("to_store_item_unit_cost",""+callableStatement.getLong(16));
			hmReturn.put("to_store_master_bin",callableStatement.getString(17));
			if (callableStatement.getString(18)!=null &&callableStatement.getString(18).equals("N"))
			{
				throw new Exception (callableStatement.getString(19));
			}
		}
		catch(Exception exception){
				if (!(callableStatement.getString(18)!=null &&callableStatement.getString(18).equals("N")))
				{
					exception.printStackTrace();
				}
			throw exception;
		}
		finally{
			closeStatement(callableStatement);
			//closeConnection(connection);
		}
		return hmReturn;
	}
public double getConvFactTemp(String item_code,String store_code,HashMap hmSQL,String language_id,Properties properties){
		double conv_fac_temp=1;
        PreparedStatement pstmt = null;
        ResultSet resultSet = null;
		try {
			connection = getConnection(properties);
//			pstmt = connection.prepareStatement("SELECT EQVL_VALUE CONV_FACTOR FROM AM_UOM_EQVL WHERE UOM_CODE =(SELECT DEF_ISSUE_UOM FROM ST_ITEM_STORE WHERE STORE_CODE=? AND ITEM_CODE=?) AND EQVL_UOM_CODE=?");
			//pstmt = connection.prepareStatement("SELECT EQVL_VALUE CONV_FACTOR  FROM MM_ITEM_UOM_DEFN WHERE UOM_CODE = ? AND EQVL_UOM_CODE= (SELECT DEF_ISSUE_UOM FROM ST_ITEM_STORE WHERE STORE_CODE= ? AND ITEM_CODE=  ?) AND ITEM_CODE = ?");
			pstmt = connection.prepareStatement("SELECT ST_GET_UOM_CONV_FAC_SING_STR(?,?) CONV_FACTOR FROM DUAL");
			pstmt.setString(1, item_code);
			pstmt.setString(2, store_code);
			resultSet = pstmt.executeQuery();
			if (resultSet != null && resultSet.next()) {
				conv_fac_temp=resultSet.getInt("CONV_FACTOR");
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}finally{
			try{
				closeResultSet( resultSet ) ;
				closeStatement( pstmt ) ;
				connection.close();
			}catch(Exception e){
			}
		}
		return conv_fac_temp;
	}
	public String getGenItemUOM(String item_code,HashMap hmSQL,String language_id) throws Exception {
		String chkdefaultParameters[] = {item_code,language_id};
		String gen_uom_code			  = "";	
		HashMap base_uom			  = new HashMap();
		try{
			//base_uom = fetchRecord("SELECT GEN_UOM_CODE FROM MM_ITEM WHERE ITEM_CODE=?",chkdefaultParameters);
				base_uom = fetchRecord(connection,(String)hmSQL.get("SQL_ST_GEN_UOM_CODE_SELECT"),chkdefaultParameters);
		}catch(Exception e){
			gen_uom_code = "";
		}
		
		if(base_uom.size() > 0)
			gen_uom_code = (String)base_uom.get("GEN_UOM_CODE");
		return gen_uom_code;
	}
   
}

/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
package eST.ChangeBinLocation;

//import java.rmi.RemoteException;
import eST.Common.StEJBSessionAdapter;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

/**
*
* @ejb.bean
*	name="ChangeBinLocationManager"
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="ChangeBinLocation"
*	local-jndi-name="ChangeBinLocation"
*	impl-class-name="eST.ChangeBinLocation.ChangeBinLocationManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="eST.ChangeBinLocation.ChangeBinLocationLocal"
*	remote-class="eST.ChangeBinLocation.ChangeBinLocationRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="eST.ChangeBinLocation.ChangeBinLocationLocalHome"
*	remote-class="eST.ChangeBinLocation.ChangeBinLocationHome"
*	generate= "local,remote"
*
*
*/

public class ChangeBinLocationManager extends StEJBSessionAdapter {

	HashMap hmData;
	HashMap hmSQL;
	HashMap	hmReturn;

	Connection	connection	=	null;
	Properties	properties	=	null;


	/*String item_code					= "";
	String store_code					= "";

    String trn_type						= "";
	String trn_qty						= "";

	String batch_id						= "";
	String expiry_date_or_receipt_date	= "";
	String trade_id						= "";

    String old_bin_location_code		= "";
    String new_bin_location_code		= "";
	String suspended_batch_allowed_yn	= "";

	String adj_item_qty					= "";
    String avl_item_qty					= "";

	String login_by_id					= "";
	String login_at_ws_no				= "";
    String login_facility_id			= "";
    String to_store_code				= "";*/
	String stSQL						= null;

	/*
	 	
	* @param hmDataValues, the data to be inserted
	* @param hmSQLValues, the queries used for the corresponding updates
	* @return HashMap, the result and the messages

	*/

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/
 public HashMap modify(HashMap hmDataValues, HashMap hmSQLValues) {
	 return getMessageHashMap(false);
 }

 /**
	* @ejb.interface-method
	*	 view-type="both"
	*/

 public HashMap delete(HashMap hmDataValues, HashMap hmSQLValues) {
	 return getMessageHashMap(false);
 }
  
   /**
	* @ejb.interface-method
	*	 view-type="both"
	*/

 public HashMap insert(HashMap hmDataValues, HashMap hmSQLValues) {

		hmData		= hmDataValues;
		hmSQL		= hmSQLValues;

		

		hmReturn	= new HashMap();		

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		int      sizeOfTrn		=	1;
		boolean isDocNoAutoGenerated	=	false;
		int      trnRecords		=	1;
		ArrayList doc_no = new ArrayList();
		//ArrayList item_code_list = new ArrayList();
		HashMap itemClass =new HashMap();


		ArrayList  alHdrData	=	(ArrayList)hmData.get("HdrInsertData");
		ArrayList   hmHeader;
		stSQL				=	(String)hmSQL.get ("HdrInsertSQL");
     	hmReturn.put(RESULT,FALSE);

		try {

				hmReturn.put(MESSAGE, "FROM EJB" ) ;
				hmReturn.put(MSGID, "FROM EJB" ) ;

			properties			=	(Properties)hmData.get("properties");
			connection			=	getConnection(properties);
			connection.setAutoCommit(false);
			ArrayList alDtlData1	=	(ArrayList)hmData.get("DtlInsertData");
			//stSQL				=	(String)hmSQL.get("DtlInsertSQL");
			HashMap item_class_based_hm = fetchRecord(connection,"SELECT ITEM_CLASS_WISE_DOCUMENTS_YN ITEM_CLASS_BASED,ITEM_CLASS_BASED_YN,ITEM_CLASS_BASED_YN FROM ST_TRN_TYPE WHERE TRN_TYPE = ?","CBL");
             String item_class_based = checkForNull((String)item_class_based_hm.get("ITEM_CLASS_BASED"),"N");
            
			 String item_class_based_yn = checkForNull((String)item_class_based_hm.get("ITEM_CLASS_BASED_YN"),"N");
			
			/* It is used to catch the items according to the Item Classes Ramana C*/
			String 	sql_st_records_per_trn_select		=	"SELECT RECORDS_PER_TRN FROM ST_TRN_TYPE WHERE TRN_TYPE=?";
			HashMap records	=	fetchRecord(connection, sql_st_records_per_trn_select,"CBL");

			HashMap   itemtoItemClass =(HashMap)hmData.get("itemtoItemClass");
               int records_per_trn = 0;
			
			int no_of_item_classes =  itemtoItemClass.size();
			 if((String)records.get("RECORDS_PER_TRN")!=null)
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			else
				records_per_trn = alDtlData1.size();
			if(item_class_based.equals("Y")){
				//if(records_per_trn>alDtlData1.size())
				sizeOfTrn =no_of_item_classes;
				//else
				//sizeOfTrn = alDtlData1.size();
			}else {
			if(records_per_trn>alDtlData1.size())
				sizeOfTrn = 1;
			
			else if((alDtlData1.size()%records_per_trn)==0)
				sizeOfTrn = alDtlData1.size()/records_per_trn;
			else
				sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;
			}
			
			for(int j=0,k=0;j<sizeOfTrn;j++)
			{
			
			ArrayList alItemRow1 = new ArrayList();
			ArrayList alItemRow1_temp = new ArrayList();
             
			   for(int d=0;j<alDtlData1.size();d++)
			{
			 ArrayList alItemRow =   (ArrayList)alDtlData1.get(d);
			itemClass = fetchRecord(connection,"SELECT  ITEM_CLASS_CODE ITEM_CLASS_CODE FROM MM_ITEM WHERE item_code =?",(String)alItemRow.get(5));
			  if(itemtoItemClass.containsKey(itemClass.get("ITEM_CLASS_CODE")))
				{
			alItemRow1_temp     =(ArrayList)itemtoItemClass.get(itemClass.get("ITEM_CLASS_CODE"));
			if(alItemRow1_temp.size()>records_per_trn)
					{
					for(int t=0;t<records_per_trn;t++)
						{
					alItemRow1.add(alItemRow1_temp.get(t));
						}
					alItemRow1_temp.subList(0,records_per_trn).clear();
			
				}else if(alItemRow1_temp.size()==records_per_trn){
      			for(int y=0;y<alItemRow1_temp.size();y++)
						{
                  alItemRow1.add(alItemRow1_temp.get(y));
						}
				itemtoItemClass.remove(itemClass.get("ITEM_CLASS_CODE"));
				}else if(alItemRow1_temp.size()<records_per_trn){
				for(int u=0;u<alItemRow1_temp.size();u++)
						{
                  alItemRow1.add(alItemRow1_temp.get(u));
						}
				   itemtoItemClass.remove(itemClass.get("ITEM_CLASS_CODE"));
				   }
				break;
				}else
               	continue;
			}
							
			//ArrayList hmRecord	=	new ArrayList();
			HashMap hmRecord_temp	=	fetchRecord(connection, "SELECT	nvl(doc_num_gen_flag,'N') doc_num_gen_flag FROM	sy_acc_entity_doc_type WHERE doc_type_code =?", (String)alHdrData.get(1));
			isDocNoAutoGenerated=	hmRecord_temp.get("DOC_NUM_GEN_FLAG").toString().equals("Y");

			hmHeader = new ArrayList();
			hmHeader.add((String)alHdrData.get(0));
			hmHeader.add((String)alHdrData.get(1));
			if (isDocNoAutoGenerated){
			
				hmHeader.add((String)fetchRecord(connection, "SELECT next_doc_no, doc_print_flag FROM sy_acc_entity_doc_type WHERE doc_type_code = ?", (String)alHdrData.get(1)).get("NEXT_DOC_NO"));
			}else
             hmHeader.add((String)alHdrData.get(2));
			hmHeader.add((String)alHdrData.get(3));
			hmHeader.add((String)alHdrData.get(4));
			hmHeader.add((String)alHdrData.get(5));
			if(item_class_based.equals("Y") || item_class_based_yn.equals("Y"))
            hmHeader.add((String)itemClass.get("ITEM_CLASS_CODE"));
			else
			hmHeader.add("");
			hmHeader.add((String)alHdrData.get(6));
			hmHeader.add((String)alHdrData.get(7));
			hmHeader.add((String)alHdrData.get(8));
			hmHeader.add((String)alHdrData.get(9));
			hmHeader.add((String)alHdrData.get(10));
			hmHeader.add((String)alHdrData.get(11));
						
			
			
			doc_no.add((String)hmHeader.get(2));
				
			
        
			hmArgData.put(DATA,hmHeader);
			hmArgSQL.put(INSERT_SQL,(String)hmSQL.get ("HdrInsertSQL"));
			try{
			     hmReturn	=	insert(connection, hmArgData, hmArgSQL);
                 throwExceptionWhenFailed(hmReturn);
			   }
			catch(Exception ex) { ex.printStackTrace(); }
			
			
			
			/* Insertion of the record in st_change_bin_loc_hdr ENDS here */


			
			/* Insertion of the record in st_change_bin_loc_dtl BEGINS here */
            /* Updation of record in st_item_batch BEGINS here */
            /* Insertion of the record in st_item_trn_dtl BEGINS here */
		
			ArrayList alDtlData	=	(ArrayList)hmData.get("DtlInsertData");
			stSQL				=	(String)hmSQL.get("DtlInsertSQL");
        
           
             if(item_class_based.equals("Y")){
				trnRecords =  k+alItemRow1.size();
			}else{
				if(records_per_trn>alDtlData.size()){
					trnRecords = alDtlData.size();
				}else if((k+records_per_trn)>=alDtlData.size()){
					trnRecords = alDtlData.size();
				}else{
					trnRecords = k+records_per_trn;
				}
			}


			for (int i=k; i<trnRecords;i++ ) {

				ArrayList alItemRow_temp =   (ArrayList)alDtlData.get(i);

				

				ArrayList alItemDtlInsert=new ArrayList();

				alItemDtlInsert.add(alItemRow_temp.get(0));
				alItemDtlInsert.add(alItemRow_temp.get(1));
                alItemDtlInsert.add(hmHeader.get(2));
                alItemDtlInsert.add(alItemRow_temp.get(3));
                alItemDtlInsert.add(alItemRow_temp.get(4));
				alItemDtlInsert.add(alItemRow_temp.get(5));
                alItemDtlInsert.add(alItemRow_temp.get(6));
				alItemDtlInsert.add(alItemRow_temp.get(7));
                alItemDtlInsert.add(alItemRow_temp.get(8));
				alItemDtlInsert.add(alItemRow_temp.get(9));
                alItemDtlInsert.add(alItemRow_temp.get(10));
				alItemDtlInsert.add(alItemRow_temp.get(11));
                alItemDtlInsert.add(alItemRow_temp.get(12));
				alItemDtlInsert.add(alItemRow_temp.get(13));
                alItemDtlInsert.add(alItemRow_temp.get(14));
				alItemDtlInsert.add(alItemRow_temp.get(15));
                alItemDtlInsert.add(alItemRow_temp.get(16));
				alItemDtlInsert.add(alItemRow_temp.get(18));
			    alItemDtlInsert.add(checkForNull(alItemRow_temp.get(21)));//07/05/12
				

                System.out.println("alItemDtlInsert==299==manager==>" +alItemDtlInsert);
			    System.out.println("stSQL==299==manager==>" +stSQL);

				hmArgData.put(DATA,alItemDtlInsert);
       			hmArgSQL.put(INSERT_SQL,stSQL);

                try{
			         hmReturn	=    insert(connection, hmArgData, hmArgSQL);
                     throwExceptionWhenFailed(hmReturn);
			       }
			    catch(Exception ex) { ex.printStackTrace(); }

				                            
                /*  Calling updateBatch...() to reduce the qty form old bin location */  

				updateBatchOnLine(connection,hmSQL,commonParams(alItemRow_temp));

                    
                /* Calling updateBatch...() to increase the qty in new  bin location */  

                updateBatchOnLine(connection,hmSQLValues,commonParams1(alItemRow_temp));


				/* Insertion in to the ST_ITEM_TRN_DTL table with +ve quantity */

                ArrayList alTrnTo=new ArrayList();
				alTrnTo=new ArrayList((ArrayList)((ArrayList)hmData.get("TrnDtlData")).get(i));
				ArrayList alForOPerateBatch=new ArrayList();
				alForOPerateBatch.add(alTrnTo);
                insertTrnDtl(connection,alForOPerateBatch,(String)hmSQL.get("ItemTrnDtlInsert")) ;

				/* Insertion in to the ST_ITEM_TRN_DTL table with -ve quantity */
				
                ArrayList trnDtlData1=(ArrayList)hmData.get("TrnDtlData");
                
				ArrayList trnDtlModiData=new ArrayList();
				trnDtlModiData=(ArrayList)trnDtlData1.get(i);

				ArrayList alGetValue=new ArrayList();

				/*Call fucntion yo set the qty_normal value to -ve quantity*/

                alGetValue=modTrnForQty(trnDtlModiData);

				ArrayList alAddModValue=new ArrayList();
				alGetValue.set(21,alItemRow_temp.get(7));
				alGetValue.add(""+trnDtlModiData.get(trnDtlModiData.size()-1));
				alAddModValue.add(alGetValue);
                insertTrnDtl(connection,alAddModValue,(String)hmSQL.get("ItemTrnDtlInsert")) ;
			    
			}
			
			
			if(item_class_based.equals("Y")){
					k = k + alItemRow1.size();
				}else{
					k=k+records_per_trn;
				}

			if ( ((Boolean)hmData.get("isDocNoAutoGenYN")).booleanValue() )
			{
            	generateDocNo(connection,hmData,hmSQL);
			}
			
		   
			}
			ArrayList LanguageData = (ArrayList)hmData.get("LANGUAGE_DATA");
				String locale=(String)LanguageData.get(0);
				if(((Boolean)hmData.get("isDocNoAutoGenYN")).booleanValue()){
					String s  = "";
					String s1 = "";
			
				ArrayList alParameters	=	new ArrayList();
				ArrayList hmCommon = (ArrayList)hmData.get("CommonData");
				alParameters.add(hmCommon.get(0));
				alParameters.add(hmCommon.get(1));
				alParameters.add(hmCommon.get(2));
				alParameters.add(hmCommon.get(3));
				if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}
				hmReturn.put("flag",s1);
				}
		  
		  
		  
		  
		  connection.commit();	
       }
	   catch(Exception exception) {
			try {
				connection.rollback();
				exception.printStackTrace();
			}
			catch (Exception subException) {
				subException.printStackTrace(); 
			}
			hmReturn.put(RESULT,FALSE);
			hmReturn.put(MSGID,exception.getMessage());
			hmReturn.put(MESSAGE,exception.toString());
			
		}
		finally{
			try{
				closeConnection( connection, properties );
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}

		return hmReturn;
	}


public void generateDocNo(Connection connection,HashMap hmData,HashMap hmSQL) throws Exception {
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
	//	ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alCommonData;
		String		stSQL		=	null;

		alCommonData	=	(ArrayList)	hmData.get("CommonData");
		stSQL			=	(String)	hmSQL.get ("NextDocNoUpdateSQL");
		

		hmArgData.put(DATA,alCommonData);
		hmArgSQL.put(UPDATE_SQL,stSQL);

		hmReturn	=	update(connection, hmArgData, hmArgSQL);
		throwExceptionWhenFailed(hmReturn);
//return hmReturn;
		//hmReturn.put("flag","Doc No: "+alHdrData.get(2));
	}


	public HashMap  commonParams(ArrayList arraylist){

            HashMap hashBatchData=new HashMap();

			hashBatchData.put("item_code", (String)arraylist.get(5));
			hashBatchData.put("store_code", (String)arraylist.get(4));
            hashBatchData.put("trn_type", (String)arraylist.get(17));

			hashBatchData.put("batch_id", (String)arraylist.get(6));
			hashBatchData.put("expiry_date_or_receipt_date", (String)arraylist.get(9));
			hashBatchData.put("trade_id", (String)arraylist.get(18));

			
            hashBatchData.put("from_bin_location_code", (String)arraylist.get(7)); //old bin loc 
			hashBatchData.put("release_batch_yn", "N");
			
  		    hashBatchData.put("suspended_batch_allowed_yn", (String)arraylist.get(19));

			hashBatchData.put("login_by_id", (String)arraylist.get(11));
			hashBatchData.put("login_at_ws_no", (String)arraylist.get(12));
			hashBatchData.put("login_facility_id", (String)arraylist.get(13));

			String trn_to_reduce="-"+(String)arraylist.get(10);
			hashBatchData.put("trn_qty",trn_to_reduce);
			hashBatchData.put("barcode_id", checkForNull((String)arraylist.get(22))); //11/05/12
			System.out.println("hashBatchData===old ==471====>" +hashBatchData);
      


		    return hashBatchData;
		}

    public HashMap  commonParams1(ArrayList arraylist1){
            HashMap hashBatchData=new HashMap();

			hashBatchData.put("item_code", (String)arraylist1.get(5));
			hashBatchData.put("store_code", (String)arraylist1.get(4));
            hashBatchData.put("trn_type", (String)arraylist1.get(17));

			hashBatchData.put("batch_id", (String)arraylist1.get(6));
			hashBatchData.put("expiry_date_or_receipt_date", (String)arraylist1.get(9));
			hashBatchData.put("trade_id", (String)arraylist1.get(18));

			hashBatchData.put("from_bin_location_code", (String)arraylist1.get(8)); //new bin loc
			hashBatchData.put("release_batch_yn", "N");
			hashBatchData.put("suspended_batch_allowed_yn", (String)arraylist1.get(19));

			hashBatchData.put("login_by_id", (String)arraylist1.get(11));
			hashBatchData.put("login_at_ws_no", (String)arraylist1.get(12));
			hashBatchData.put("login_facility_id", (String)arraylist1.get(13));

			hashBatchData.put("trn_qty",(String)arraylist1.get(10));
		    hashBatchData.put("barcode_id",checkForNull((String)arraylist1.get(21)));//11/05/12
			System.out.println("hashBatchData===new ==471====>" +hashBatchData);

		    return hashBatchData;
		}
		
public ArrayList modTrnForQty(ArrayList trnDtlModiData)
	{
	    ArrayList modifiedArrayList=new ArrayList();

        modifiedArrayList.add((String)trnDtlModiData.get(0));
		modifiedArrayList.add((String)trnDtlModiData.get(1));
		modifiedArrayList.add((String)trnDtlModiData.get(2));
		String stTempTrnNo=(String)trnDtlModiData.get(3);
        int intDocNo=Integer.parseInt(stTempTrnNo);
		intDocNo=intDocNo+1;
		String stNextDocNo=Integer.toString(intDocNo); 
		modifiedArrayList.add(stNextDocNo);
		modifiedArrayList.add((String)trnDtlModiData.get(4));
		modifiedArrayList.add((String)trnDtlModiData.get(5));
		modifiedArrayList.add((String)trnDtlModiData.get(6));
		modifiedArrayList.add((String)trnDtlModiData.get(7));
		modifiedArrayList.add((String)trnDtlModiData.get(8));
		modifiedArrayList.add((String)trnDtlModiData.get(9));
		modifiedArrayList.add((String)trnDtlModiData.get(10));
		modifiedArrayList.add((String)trnDtlModiData.get(11));
		String stModiData="-"+(String)trnDtlModiData.get(12);
		modifiedArrayList.add(stModiData);
		modifiedArrayList.add((String)trnDtlModiData.get(13));
		modifiedArrayList.add((String)trnDtlModiData.get(14));
		modifiedArrayList.add((String)trnDtlModiData.get(15));
		modifiedArrayList.add((String)trnDtlModiData.get(16));
		modifiedArrayList.add((String)trnDtlModiData.get(17));
		modifiedArrayList.add((String)trnDtlModiData.get(18));
        modifiedArrayList.add((String)trnDtlModiData.get(19));
		modifiedArrayList.add((String)trnDtlModiData.get(20));
		modifiedArrayList.add((String)trnDtlModiData.get(21));
		modifiedArrayList.add((String)trnDtlModiData.get(22));
		
	  
       return modifiedArrayList;
	}
		
}

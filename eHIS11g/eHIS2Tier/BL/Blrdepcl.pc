/*************************************************************************/
/* OCS MEDICOM VER 1.0                                                    */
/************************************************************************/
/* PROGRAM NAME          : BLRDEPCL.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 18-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */ 
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                  
#include <stdio.h>   
#include <string.h>       
#include <bl.h>         

#define ESC 0x1B
#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])

/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [91],
            nd_session_id                              [31],
            nd_pgm_date                                [25],
			nd_temp_date							   [21],
			p_language_id							   [3],
			date_convert							   [21],
			nd_loc_date								   [21],
            d_curr_pgm_name                            [15],
            nd_epi_type                                [2],
            nd_fm_date                                 [12],
            nd_to_date                                 [12],
            nd_fm_pat_no                               [21],
            nd_to_pat_no                               [21],
            nd_fm_epi_no                               [9],
            nd_to_epi_no                               [9],
            nd_fm_visit_no                             [5],
            nd_to_visit_no                             [5],
            nd_show_dtls                               [2],
			nd_operating_facility_id                   [3],
			nd_facility_id							   [3],

            nd_fm_date_prn                             [15],
            nd_to_date_prn                             [15],
            
            bl_patient_name_loc_lang                   [101], 
            bl_patient_name                            [61],
			bl_patient_name1                           [61],
                  d_short_name_full                    [61];
   VARCHAR bl_pat_episode_type                         [2],
           bl_pat_patient_id                           [21],
           bl_pat_episode_id                           [9],
           bl_pat_visit_id                             [5],
           bl_pat_org_doc_type_code                    [7],
           bl_pat_org_doc_num                          [9],
		   bl_pat_org_doc_srno	                       [7],
           bl_pat_org_doc_date                         [13],
           bl_pat_trx_type_code                        [2],
           bl_pat_bill_trx_type_code                   [2],
           bl_pat_bill_nature_code                     [2],
           bl_pat_recpt_nature_code                    [3],
           bl_pat_recpt_type_code                      [4],
           bl_pat_narration                            [51],
           bl_pat_max_line_num                         [23],
           bl_pat_doc_amt_prn                          [23],
           bl_pat_doc_outst_amt_prn                    [23],
           bl_pat_added_by_id                          [21],
           bl_pat_added_date                           [13],
           bl_pat_modified_by_id                       [21],
           bl_pat_modified_date                        [13],
		   l_pk_value						           [100],
		   l_translated_value						   [201],
           bl_pat_episode_visit_id                     [16],
           bl_pat_recpt_nat_desc                       [31],

           recpt_type_desc                             [101];

   VARCHAR bl_trn_doc_type_code                        [7],
           bl_trn_doc_num                              [9],
           bl_trn_doc_date                             [13],
           bl_trn_doc_amt                              [23],
           bl_trn_trx_type_code                        [2],
           bl_trn_bill_trx_type_code                   [2],
           bl_trn_recpt_nature_code                    [3],

           bl_trn_bill_trx_type_desc                   [35];

   double  bl_pat_doc_amt,
           bl_pat_doc_outst_amt,
		   bl_trn_doc_amt_db;


	char filename[150];
	char loc_legend[999][201];
	char x_msg[200];
	char l_mesg[200];

    int i;		

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0;
  
FILE *fp;
 char   store_episode_visit_id                       [16],
         store_patient_id                             [21],
         store_episode_type                           [2];

  double epi_vis_amt_outst_tot,
         pat_amt_outst_tot,
         epi_amt_outst_tot,
         grand_amt_outst_tot;

void proc_main(argc,argv)
char *argv[];
int argc;
{

    int rec_ctr = 0, trn_ctr = 0, page_skip = 0;

    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRDEPCL");

    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ORA_MESG,"Error in connecting to Oracle\n");
        proc_exit();
    }

    set_meduser_role();

   strcpy(p_language_id.arr,l_language_id.arr);
   p_language_id.len = l_language_id.len;

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    start_prog_msg();

    fetch_prog_param();
fetch_legend_value();
    declare_cur();

    fetch_hosp_name();
							
    open_file();
							
    open_pat_ledger();
							
    epi_vis_amt_outst_tot = 0;
    pat_amt_outst_tot     = 0;
    epi_amt_outst_tot     = 0;
    grand_amt_outst_tot   = 0;

    while(fetch_pat_ledger())
    {

       if (rec_ctr == 0)
       {
          print_rec(0);
          strcpy(store_episode_visit_id,bl_pat_episode_visit_id.arr);
          strcpy(store_patient_id,bl_pat_patient_id.arr);
          strcpy(store_episode_type,bl_pat_episode_type.arr);
       }
       if (strcmp(store_episode_type,bl_pat_episode_type.arr))
       {
            print_epi_tot();
            strcpy(store_episode_type,bl_pat_episode_type.arr);
            strcpy(store_patient_id,bl_pat_patient_id.arr);
            strcpy(store_episode_visit_id,bl_pat_episode_visit_id.arr);
            page_skip = 1;
       }
       else if (strcmp(store_patient_id,bl_pat_patient_id.arr))
       {
            print_pat_tot(1);
            strcpy(store_patient_id,bl_pat_patient_id.arr);
            strcpy(store_episode_visit_id,bl_pat_episode_visit_id.arr);
       }
       else if (strcmp(store_episode_visit_id,bl_pat_episode_visit_id.arr))
       {
            print_epi_vis_tot(1);
            strcpy(store_episode_visit_id,bl_pat_episode_visit_id.arr);
       }

       if (page_skip == 1)
       {
	    
           print_head();
		    
           print_rec(0);
		    
           page_skip = 0;
       }
       rec_ctr++;
       print_rec(1);
	    
       if (nd_show_dtls.arr[0] == 'Y')
       {
          open_pat_ledger_trn();
          while(fetch_pat_ledger_trn())
          {
              trn_ctr++;
              print_rec(2);
          }
       }
     }
     if (rec_ctr)
        print_grand_tot();
 
    end_of_rep();

    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

fetch_prog_param()
{
    nd_epi_type.arr[0]          = '\0';
    nd_fm_date.arr[0]           = '\0';
    nd_to_date.arr[0]           = '\0';
    nd_fm_pat_no.arr[0]         = '\0';
    nd_to_pat_no.arr[0]         = '\0';
    nd_fm_epi_no.arr[0]         = '\0';
    nd_to_epi_no.arr[0]         = '\0';
    nd_fm_visit_no.arr[0]       = '\0';
    nd_to_visit_no.arr[0]       = '\0';
    nd_show_dtls.arr[0]         = '\0';

    nd_fm_date_prn.arr[0]           = '\0';
    nd_to_date_prn.arr[0]           = '\0';

    nd_epi_type.len             = 0;
    nd_fm_date.len              = 0;
    nd_to_date.len              = 0;
    nd_fm_pat_no.len            = 0;
    nd_to_pat_no.len            = 0;
    nd_fm_epi_no.len            = 0;
    nd_to_epi_no.len            = 0;
    nd_fm_visit_no.len          = 0;
    nd_to_visit_no.len          = 0;
    nd_show_dtls.len            = 0;

    nd_fm_date_prn.len              = 0;
    nd_to_date_prn.len              = 0;

/*-- Y2K correction. Format introduced for 'FROM AND TO' Date prn variable
     as DD/MM/YYYY in form itself. So, no need to format again below also
	 VSK 14/11/1999 */  
  
   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,
                   PARAM6,PARAM7,PARAM8,PARAM9,PARAM10,
				   PARAM2,PARAM3
//                 TO_CHAR(TO_DATE(PARAM2,'DD-MON-YY'),'DD/MM/YYYY'),
//                 TO_CHAR(TO_DATE(PARAM3,'DD-MON-YY'),'DD/MM/YYYY')
              INTO :nd_operating_facility_id,
				   :nd_epi_type,
                   :nd_fm_date,
                   :nd_to_date,
                   :nd_fm_pat_no,
                   :nd_to_pat_no,
                   :nd_fm_epi_no,
                   :nd_to_epi_no,
                   :nd_fm_visit_no,
                   :nd_to_visit_no,
                   :nd_show_dtls,
                   :nd_fm_date_prn,
                   :nd_to_date_prn
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

    nd_epi_type.arr[nd_epi_type.len]              = '\0';
    nd_fm_date.arr[nd_fm_date.len]                = '\0';
    nd_to_date.arr[nd_to_date.len]                = '\0';
    nd_fm_pat_no.arr[nd_fm_pat_no.len]            = '\0';
    nd_to_pat_no.arr[nd_to_pat_no.len]            = '\0';
    nd_fm_epi_no.arr[nd_fm_epi_no.len]            = '\0';
    nd_to_epi_no.arr[nd_to_epi_no.len]            = '\0';
    nd_fm_visit_no.arr[nd_fm_visit_no.len]        = '\0';
    nd_to_visit_no.arr[nd_to_visit_no.len]        = '\0';
    nd_show_dtls.arr[nd_show_dtls.len]            = '\0';

    nd_fm_date_prn.arr[nd_fm_date_prn.len]                = '\0';
    nd_to_date_prn.arr[nd_to_date_prn.len]                = '\0';



   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   strcpy(g_facility_id, nd_operating_facility_id.arr);   
}

declare_cur()
{


/*-- Y2K correction. Format introduced for 'FROM AND TO' Date 
     as DD/MM/YYYY VSK 15/11/1999 */

     EXEC SQL DECLARE BL_PAT_LEDGER_CUR CURSOR FOR
               SELECT EPISODE_TYPE,
                      PATIENT_ID,
                      EPISODE_ID,
                      VISIT_ID,
                      ORG_DOC_TYPE_CODE,
                      ORG_DOC_NUM,
                      to_char(TRUNC(ORG_DOC_DATE),'dd/mm/yyyy'),
                      TRX_TYPE_CODE,
                      BILL_TRX_TYPE_CODE,
                      BILL_NATURE_CODE,
                      RECPT_NATURE_CODE,
                      RECPT_TYPE_CODE,
                      NARRATION,
                      MAX_LINE_NUM,
                      TO_CHAR(NVL(DOC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(DOC_OUTST_AMT,0),'999,999,990.99'),
                      ADDED_BY_ID,
                      ADDED_DATE,
                      MODIFIED_BY_ID,
                      MODIFIED_DATE,
					  ORG_DOC_SRNO,
                      EPISODE_ID||VISIT_ID,
                      NVL(DOC_AMT,0),
                      NVL(DOC_OUTST_AMT,0),
                      SUBSTR(DECODE(RECPT_NATURE_CODE,
                            'AD','ADJUSTABLE DEPOSIT',
                            'RD','REFUNDABLE DEPOSIT',
                            'PR','PREPAYMENTS',
                            'MI','MISCELLANEOUS',
                            'DC','DEFERRED CASH PATIENTS',
                            'BI','AGAINST BILLS',
                            'CU','CUSTOMERS',''),1,15)
                 FROM BL_PATIENT_LEDGER
                WHERE EPISODE_TYPE = NVL(:nd_epi_type,EPISODE_TYPE)
                  AND PATIENT_ID  
                         BETWEEN NVL(:nd_fm_pat_no,' ') AND
                                 NVL(:nd_to_pat_no,'~~~~~~~~~~')
                  AND EPISODE_ID 
                         BETWEEN NVL(:nd_fm_epi_no,0) AND
                                 NVL(:nd_to_epi_no,99999999)
                  AND NVL(VISIT_ID,0) 
                         BETWEEN NVL(:nd_fm_visit_no,0) AND
                                 NVL(:nd_to_visit_no,9999)
                  AND TRUNC(ORG_DOC_DATE)
                       BETWEEN 
                        NVL(TO_DATE(:nd_fm_date,'DD/MM/YYYY'),to_date('00010101','YYYYDDMM'))
                         AND
                        NVL(TO_DATE(:nd_to_date,'DD/MM/YYYY'),to_date('47123112','YYYYDDMM'))
                  AND TRX_TYPE_CODE = '5'
                  AND RECPT_NATURE_CODE = 'RD'
                  AND NVL(DOC_OUTST_AMT,0) != 0
				  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
                ORDER BY EPISODE_TYPE,PATIENT_ID,EPISODE_ID,VISIT_ID,
                      ORG_DOC_TYPE_CODE,ORG_DOC_NUM;

     EXEC SQL DECLARE BL_PAT_LEDGER_TRN_CUR CURSOR FOR
               SELECT DOC_TYPE_CODE,
                      DOC_NUM,
                      TRUNC(DOC_DATE),
                      TO_CHAR(DOC_AMT,'999,999,990.99'),
					  DOC_AMT,
                      TRX_TYPE_CODE,
                      BILL_TRX_TYPE_CODE,
                      RECPT_NATURE_CODE,
                      SUBSTR(DECODE(BILL_TRX_TYPE_CODE,
                             'D','Inpatients Discharge Bill',
                             'A','Inpatients After Dischg Bill',
                             'I','Inpatients Inhouse Bill',
                             'O','Outpatients Bill',
                             'E','Outpatients Episode Level Bill',
                             'R','Referral Patients Bill',''),1,30)
                 FROM BL_PATIENT_LEDGER_TRN
                WHERE EPISODE_TYPE      = :bl_pat_episode_type
                  AND EPISODE_ID        = :bl_pat_episode_id
                  AND PATIENT_ID        = :bl_pat_patient_id 
                  AND VISIT_ID          = :bl_pat_visit_id 
                  AND ORG_DOC_TYPE_CODE = :bl_pat_org_doc_type_code
                  AND ORG_DOC_NUM       = :bl_pat_org_doc_num
				  AND OPERATING_FACILITY_ID =  :nd_operating_facility_id
                ORDER BY DOC_TYPE_CODE,DOC_NUM;
 

    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              /*SELECT SUBSTR(SHORT_NAME_LOC_LANG,1,16),
                     //substr(SHORT_NAME,1,30),
					 //decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname1,
                     
					           short_name
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_pat_patient_id;*/

			
              SELECT 
				 
		decode(:p_language_id,'en', substr(short_name,1,30),substr(SHORT_NAME_LOC_LANG,1,30)),
				null
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_pat_patient_id;



    EXEC SQL DECLARE BL_REC_TYPE_CUR CURSOR FOR
              SELECT LONG_DESC
                FROM BL_RECEIPT_TYPE_lang_vw
               WHERE RECEIPT_TYPE_CODE = :bl_pat_recpt_type_code
			   and language_id=:p_language_id;
}

open_pat_ledger()
{
    EXEC SQL OPEN BL_PAT_LEDGER_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_PAT_LEDGER_CUR",0,"");
}

open_pat_ledger_trn()
{
    EXEC SQL OPEN BL_PAT_LEDGER_TRN_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_PAT_LEDGER_TRN_CUR",0,"");
}

fetch_pat_ledger()
{

bl_pat_episode_type.arr[0]                                        = '\0';
bl_pat_patient_id.arr[0]                                          = '\0';
bl_pat_episode_id.arr[0]                                          = '\0';
bl_pat_visit_id.arr[0]                                            = '\0';
bl_pat_org_doc_type_code.arr[0]                                   = '\0';
bl_pat_org_doc_num.arr[0]                                         = '\0';
bl_pat_org_doc_srno.arr[0]		                                  = '\0';
bl_pat_org_doc_date.arr[0]                                        = '\0';
bl_pat_trx_type_code.arr[0]                                       = '\0';
bl_pat_bill_trx_type_code.arr[0]                                  = '\0';
bl_pat_bill_nature_code.arr[0]                                    = '\0';
bl_pat_recpt_nature_code.arr[0]                                   = '\0';
bl_pat_recpt_type_code.arr[0]                                     = '\0';
bl_pat_narration.arr[0]                                           = '\0';
bl_pat_max_line_num.arr[0]                                        = '\0';
bl_pat_doc_amt_prn.arr[0]                                         = '\0';
bl_pat_doc_outst_amt_prn.arr[0]                                   = '\0';
bl_pat_added_by_id.arr[0]                                         = '\0';
bl_pat_added_date.arr[0]                                          = '\0';
bl_pat_modified_by_id.arr[0]                                      = '\0';
bl_pat_modified_date.arr[0]                                       = '\0';
bl_pat_recpt_nat_desc.arr[0]                                      = '\0';
bl_pat_episode_visit_id.arr[0]                                    = '\0'; 


bl_pat_episode_type.len                                           = 0;
bl_pat_patient_id.len                                             = 0;
bl_pat_episode_id.len                                             = 0;
bl_pat_visit_id.len                                               = 0;
bl_pat_org_doc_type_code.len                                      = 0;
bl_pat_org_doc_num.len                                            = 0;
bl_pat_org_doc_srno.len		                                      = 0;
bl_pat_org_doc_date.len                                           = 0;
bl_pat_trx_type_code.len                                          = 0;
bl_pat_bill_trx_type_code.len                                     = 0;
bl_pat_bill_nature_code.len                                       = 0;
bl_pat_recpt_nature_code.len                                      = 0;
bl_pat_recpt_type_code.len                                        = 0;
bl_pat_narration.len                                              = 0;
bl_pat_max_line_num.len                                           = 0;
bl_pat_doc_amt_prn.len                                            = 0;
bl_pat_doc_outst_amt_prn.len                                      = 0;
bl_pat_added_by_id.len                                            = 0;
bl_pat_added_date.len                                             = 0;
bl_pat_modified_by_id.len                                         = 0;
bl_pat_modified_date.len                                          = 0;
bl_pat_recpt_nat_desc.len                                         = 0;
bl_pat_episode_visit_id.len                                       = 0;

bl_pat_doc_amt                                                    = 0;
bl_pat_doc_outst_amt                                              = 0;
bl_trn_doc_amt_db												  = 0;

     EXEC SQL FETCH BL_PAT_LEDGER_CUR
               INTO :bl_pat_episode_type,
                    :bl_pat_patient_id,
                    :bl_pat_episode_id,
                    :bl_pat_visit_id,
                    :bl_pat_org_doc_type_code,
                    :bl_pat_org_doc_num,
                    :bl_pat_org_doc_date,
                    :bl_pat_trx_type_code,
                    :bl_pat_bill_trx_type_code,
                    :bl_pat_bill_nature_code,
                    :bl_pat_recpt_nature_code,
                    :bl_pat_recpt_type_code,
                    :bl_pat_narration,
                    :bl_pat_max_line_num,
                    :bl_pat_doc_amt_prn,
                    :bl_pat_doc_outst_amt_prn,
                    :bl_pat_added_by_id,
                    :bl_pat_added_date,
                    :bl_pat_modified_by_id,
                    :bl_pat_modified_date,
					:bl_pat_org_doc_srno,
                    :bl_pat_episode_visit_id,
                    :bl_pat_doc_amt,
                    :bl_pat_doc_outst_amt,
                    :bl_pat_recpt_nat_desc;


     if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_LEDGER_CUR",0,"");

bl_pat_episode_type.arr[bl_pat_episode_type.len]                         = '\0';
bl_pat_patient_id.arr[bl_pat_patient_id.len]                             = '\0';
bl_pat_episode_id.arr[bl_pat_episode_id.len]                             = '\0';
bl_pat_visit_id.arr[bl_pat_visit_id.len]                                 = '\0';
bl_pat_org_doc_type_code.arr[bl_pat_org_doc_type_code.len]               = '\0';
bl_pat_org_doc_num.arr[bl_pat_org_doc_num.len]                           = '\0';
bl_pat_org_doc_date.arr[bl_pat_org_doc_date.len]                         = '\0';
bl_pat_trx_type_code.arr[bl_pat_trx_type_code.len]                       = '\0';
bl_pat_bill_trx_type_code.arr[bl_pat_bill_trx_type_code.len]             = '\0';
bl_pat_bill_nature_code.arr[bl_pat_bill_nature_code.len]                 = '\0';
bl_pat_recpt_nature_code.arr[bl_pat_recpt_nature_code.len]               = '\0';
bl_pat_recpt_type_code.arr[bl_pat_recpt_type_code.len]                   = '\0';
bl_pat_narration.arr[bl_pat_narration.len]                               = '\0';
bl_pat_max_line_num.arr[bl_pat_max_line_num.len]                         = '\0';
bl_pat_doc_amt_prn.arr[bl_pat_doc_amt_prn.len]                           = '\0';
bl_pat_doc_outst_amt_prn.arr[bl_pat_doc_outst_amt_prn.len]               = '\0';
bl_pat_added_by_id.arr[bl_pat_added_by_id.len]                           = '\0';
bl_pat_added_date.arr[bl_pat_added_date.len]                             = '\0';
bl_pat_modified_by_id.arr[bl_pat_modified_by_id.len]                     = '\0';
bl_pat_modified_date.arr[bl_pat_modified_date.len]                       = '\0';
bl_pat_org_doc_srno.arr[bl_pat_org_doc_srno.len]			             = '\0';
bl_pat_recpt_nat_desc.arr[bl_pat_recpt_nat_desc.len]                     = '\0';
bl_pat_episode_visit_id.arr[bl_pat_episode_visit_id.len]                 = '\0';

    return(LAST_ROW?0:1);
}

fetch_pat_ledger_trn()
{

bl_trn_doc_type_code.arr[0]                                       = '\0';
bl_trn_doc_num.arr[0]                                             = '\0';
bl_trn_doc_date.arr[0]                                            = '\0';
bl_trn_doc_amt.arr[0]                                             = '\0';
bl_trn_trx_type_code.arr[0]                                       = '\0';
bl_trn_bill_trx_type_code.arr[0]                                  = '\0';
bl_trn_recpt_nature_code.arr[0]                                   = '\0';

bl_trn_bill_trx_type_desc.arr[0]                                  = '\0';

bl_trn_doc_type_code.len                                          = 0;
bl_trn_doc_num.len                                                = 0;
bl_trn_doc_date.len                                               = 0;
bl_trn_doc_amt.len                                                = 0;
bl_trn_trx_type_code.len                                          = 0;
bl_trn_bill_trx_type_code.len                                     = 0;
bl_trn_recpt_nature_code.len                                      = 0;

bl_trn_bill_trx_type_desc.len                                     = 0;

     EXEC SQL FETCH BL_PAT_LEDGER_TRN_CUR
               INTO :bl_trn_doc_type_code,
                    :bl_trn_doc_num,
                    :bl_trn_doc_date,
                    :bl_trn_doc_amt,
					:bl_trn_doc_amt_db,
                    :bl_trn_trx_type_code,
                    :bl_trn_bill_trx_type_code,
                    :bl_trn_recpt_nature_code,
                    :bl_trn_bill_trx_type_desc;
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_LEDGER_TRN_CUR",0,"");

bl_trn_doc_type_code.arr[bl_trn_doc_type_code.len]                       = '\0';
bl_trn_doc_num.arr[bl_trn_doc_num.len]                                   = '\0';
bl_trn_doc_date.arr[bl_trn_doc_date.len]                                 = '\0';
bl_trn_doc_amt.arr[bl_trn_doc_amt.len]                                   = '\0';
bl_trn_trx_type_code.arr[bl_trn_trx_type_code.len]                       = '\0';
bl_trn_bill_trx_type_code.arr[bl_trn_bill_trx_type_code.len]             = '\0';
bl_trn_recpt_nature_code.arr[bl_trn_recpt_nature_code.len]               = '\0';

bl_trn_bill_trx_type_desc.arr[bl_trn_bill_trx_type_desc.len]             = '\0';

    return(LAST_ROW?0:1);
}

fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   
   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_name1.arr[0]                    = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_name1.len                       = 0;

    EXEC SQL FETCH BL_PAT_NAME_CUR
              INTO :bl_patient_name_loc_lang,
                  /* :bl_patient_name,
				   :bl_patient_name1,*/
                           :d_short_name_full;


    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_name1.arr[bl_patient_name1.len] = '\0';
     d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
    EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
	  str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name1    := :bl_patient_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_name1.arr[bl_patient_name1.len]  = '\0';
 


    EXEC SQL OPEN BL_REC_TYPE_CUR;

    if (OERROR)
         err_mesg("OPEN failed on cursor BL_REC_TYPE_CUR",0,"");

    recpt_type_desc.arr[0]  = '\0';
    recpt_type_desc.len     = 0;

    EXEC SQL FETCH BL_REC_TYPE_CUR
              INTO :recpt_type_desc;

	    
	if (OERROR)
         err_mesg("FETCH failed on cursor BL_REC_TYPE_CUR",0,"");

    recpt_type_desc.arr[recpt_type_desc.len] = '\0';
}


print_rec(ind)
int ind;
{

  if (ind == 0)
  {
      fetch_dtls();

	  if (lctr > 37)  //53
          print_head();

	  
      fprintf(fp,"%-16s     %1s ",loc_legend[220],bl_pat_episode_type.arr);
      switch (bl_pat_episode_type.arr[0])
      {
         case 'I' : fprintf(fp,"%-7s",loc_legend[360]);
                    break;

         case 'D' : fprintf(fp,"%-7s",loc_legend[350]);
	            break;

         case 'O' : fprintf(fp,"%-7s",loc_legend[340]);
                    break;

         case 'E' : fprintf(fp,"%-7s",loc_legend[330]);
                    break;
 
         case 'R' : fprintf(fp,"%-7s",loc_legend[320]);
                    break;

         default  : fprintf(fp,"  ");
                    break;
      }
      fprintf(fp,"\n");

      fprintf(fp,"%-14s       %-20s %-16.16s %-30.30s",loc_legend[90],
                bl_pat_patient_id.arr,
                bl_patient_name_loc_lang.arr,
                bl_patient_name.arr);
	  
      fprintf(fp,"    %-14s  %8s    %-12s  %4s\n",loc_legend[100],
                bl_pat_episode_id.arr,loc_legend[110], bl_pat_visit_id.arr);

	 if(strlen(bl_patient_name1.arr) > 2)
	{
	 fprintf(fp,"%54s %s \n"," ",bl_patient_name1.arr);
	 lctr++;
	}

     lctr+=2;
   }
   else if (ind == 1)
   {
      if (lctr > 37) //53
          print_head();
		  	if(bl_pat_org_doc_date.arr[0]!='\0')
			{
    init_date_temp_var();
	strcpy(date_convert.arr,bl_pat_org_doc_date.arr);
	fun_change_loc_date();

     fprintf(fp,"    %-6s %8s/%-19s%12s%7s      %-2s %-15s %-2s %-32.32s ",
                bl_pat_org_doc_type_code.arr,
                bl_pat_org_doc_num.arr,bl_pat_org_doc_srno.arr,
                date_convert.arr,
                bl_pat_trx_type_code.arr,
                bl_pat_recpt_nature_code.arr,
                bl_pat_recpt_nat_desc.arr,
                bl_pat_recpt_type_code.arr,
                recpt_type_desc.arr);
//                bl_pat_doc_amt_prn.arr);
//                bl_pat_doc_outst_amt_prn.arr);
			    print_formated(bl_pat_doc_amt);
				fprintf(fp," ");
			    print_formated(bl_pat_doc_outst_amt);fprintf(fp,"\n");
     lctr++;
     epi_vis_amt_outst_tot += bl_pat_doc_outst_amt;
	} 
   }
   else
   {
      if (lctr > 37) //53
          print_head();
		if(bl_trn_doc_date.arr[0]!='\0')
			{
    init_date_temp_var();
	strcpy(date_convert.arr,bl_trn_doc_date.arr);
	fun_change_loc_date();  
				 "    %-6s %8s/%-19s%12s%7s      %-2s %-15s %-2s %-30s ",
      fprintf(fp,"            %-6s %9s %-10s  %1s    %-3s %-15s    %-3s %-30s ",
               bl_trn_doc_type_code.arr,
               bl_trn_doc_num.arr,
               date_convert.arr,
               bl_trn_trx_type_code.arr,
               bl_trn_recpt_nature_code.arr,
               (bl_trn_recpt_nature_code.arr[0] == 'C')?"Cash Memo":
               (bl_trn_recpt_nature_code.arr[0] == 'A')?"Ack. Slip":"",
               bl_trn_bill_trx_type_code.arr,
               bl_trn_bill_trx_type_desc.arr);
//               bl_trn_doc_amt.arr);
			    print_formated(bl_trn_doc_amt_db);fprintf(fp,"\n");
}
     lctr++;
 	  
  }
  fflush(fp);
}
 
print_epi_vis_tot(l_flg)
int l_flg;
{
    if (lctr > 38) //52
       print_head();

	   
    fprintf(fp,"%117s-----------------\n"," ");
    fprintf(fp,"%81s%-23s               "," ",loc_legend[230]);
    print_formated(epi_vis_amt_outst_tot);fprintf(fp,"\n");
    fprintf(fp,"%117s-----------------\n"," ");
    lctr +=3;
    pat_amt_outst_tot += epi_vis_amt_outst_tot;
    epi_vis_amt_outst_tot = 0;
    if (l_flg)
       print_rec(0);
}

print_pat_tot(l_flg)
int l_flg;
{
    print_epi_vis_tot(0);

    if (lctr > 38) //52
       print_head();

    fprintf(fp,"%117s-----------------\n"," ");
    fprintf(fp,"%81s%-17s                     "," ",loc_legend[210]);
    print_formated(pat_amt_outst_tot);fprintf(fp,"\n");
    fprintf(fp,"%117s-----------------\n"," ");
    lctr +=3;
    epi_amt_outst_tot += pat_amt_outst_tot;
    pat_amt_outst_tot = 0;
    if (l_flg)
       print_rec(0);
}

print_epi_tot()
{
    print_pat_tot(0);

    if (lctr > 38) //52
       print_head();


    fprintf(fp,"%117s-----------------\n"," ");
    fprintf(fp,"%81s%-22s                "," ",loc_legend[200]);
    print_formated(epi_amt_outst_tot);fprintf(fp,"\n");
    fprintf(fp,"%117s-----------------\n"," ");
    lctr +=3;
    grand_amt_outst_tot += epi_amt_outst_tot;
    epi_amt_outst_tot = 0;
}

print_grand_tot()
{
    print_epi_tot();
    if (lctr > 38) //52
       print_head();


    fprintf(fp,"%117s-----------------\n"," ");
    fprintf(fp,"%81s%-15s                       "," ",loc_legend[190]);
    print_formated(grand_amt_outst_tot);fprintf(fp,"\n");
    fprintf(fp,"%117s-----------------\n"," ");
    lctr +=3;
}

end_of_rep()
{
fprintf(fp,"\n\n                                                      ***  END OF REPORT ***\n");
fflush(fp);
}

open_file()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"blrdepcl.lis");
	
    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrdepcl.lis");
       proc_exit();
    }
    print_title();
    print_head();
}

print_title()
{
init_date_temp_var();

strcpy(date_convert.arr,date_time.arr);
	
fun_change_loc_date();

    fprintf(fp,"%c&l1O",ESC);   /* To Print Landscape           */
     fprintf(fp,"%c(s14H",ESC); 	/* To set the font size			*/

/*fprintf(fp,
"\f%6s : %-5s                                     %-30s                                        %-16s\n",loc_legend[400],loc_legend[150],
hosp_name.arr,date_convert.arr);*/

fprintf(fp,
"%6s : %-5s                                     %-30s                                        %-16s\n",loc_legend[400],loc_legend[150],
hosp_name.arr,date_convert.arr);
 
fprintf(fp,"%6s : %-10s \n",loc_legend[410], user_id.arr);
fprintf(fp,"%6s : %-12s                       %-70s %10s : %4d\n",loc_legend[420],loc_legend[40],loc_legend[390],loc_legend[30],++pctr);
fprintf(fp,
"--------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        %-20s :\n        ---------------------\n\n",loc_legend[430]);
fprintf(fp,"                  %-17s                      : %s\n\n",loc_legend[220],nd_epi_type.arr);
	if(nd_fm_date_prn.arr[0]=='\0')
fprintf(fp,"                  %-17s           %-10s : LOWEST\n",loc_legend[80],loc_legend[60]);
else
{
init_date_temp_var();
strcpy(date_convert.arr,nd_fm_date_prn.arr);
fun_change_loc_date();
fprintf(fp,"                  %-17s           %-10s : %s\n",loc_legend[80],loc_legend[60],date_convert.arr);
}
if(nd_to_date_prn.arr[0]=='\0')
fprintf(fp,"                                              %-10s : HIGHEST\n\n",loc_legend[70]);
else
{
init_date_temp_var();
strcpy(date_convert.arr,nd_to_date_prn.arr);
fun_change_loc_date();
fprintf(fp,"                                              %-10s : %s\n\n",loc_legend[70],date_convert.arr);
}
if(nd_fm_pat_no.arr[0]=='\0')
fprintf(fp,"                  %-17s           %-10s : LOWEST\n",loc_legend[90],loc_legend[60]);
else
fprintf(fp,"                  %-17s           %-10s : %s\n",loc_legend[90],loc_legend[60],nd_fm_pat_no.arr);
if(nd_to_pat_no.arr[0]=='\0')
fprintf(fp,"                                              %-10s : HIGHEST\n\n",loc_legend[70]);
else
fprintf(fp,"                                              %-10s : %s\n\n",loc_legend[70],nd_to_pat_no.arr);
if(nd_fm_epi_no.arr[0]=='\0')
fprintf(fp,"                  %-17s           %-10s : LOWEST\n",loc_legend[100],loc_legend[60]);
else
fprintf(fp,"                  %-17s           %-10s : %s\n",loc_legend[100],loc_legend[60],nd_fm_epi_no.arr);
if(nd_to_epi_no.arr[0]=='\0')
fprintf(fp,"                                              %-10s : HIGHEST\n\n",loc_legend[70]);
else
fprintf(fp,"                                              %-10s : %s\n\n",loc_legend[70],nd_to_epi_no.arr);
if(nd_fm_visit_no.arr[0]=='\0')
fprintf(fp,"                  %-17s           %-10s : LOWEST\n",loc_legend[110],loc_legend[60]);
else
fprintf(fp,"                  %-17s           %-10s : %s\n",loc_legend[110],loc_legend[60],nd_fm_visit_no.arr);
if(nd_to_visit_no.arr[0]=='\0')
fprintf(fp,"                                              %-10s : %HIGHEST\n\n",loc_legend[70]);
else
fprintf(fp,"                                              %-10s : %s\n\n",loc_legend[70],nd_to_visit_no.arr);
fprintf(fp,"                  %-24s               : %s\n\n",loc_legend[120],nd_show_dtls.arr);
}
/*fprintf(fp,"                  EPISODE TYPE         : %s\n\n",nd_epi_type.arr);
fprintf(fp,"                  DATE            FROM : %s\n",nd_fm_date_prn.arr);
fprintf(fp,"                                  TO   : %s\n\n",nd_to_date_prn.arr);
fprintf(fp,"                  PATIENT NO      FROM : %s\n",nd_fm_pat_no.arr);
fprintf(fp,"                                  TO   : %s\n\n",nd_to_pat_no.arr);
fprintf(fp,"                  EPISODE NO      FROM : %s\n",nd_fm_epi_no.arr);
fprintf(fp,"                                  TO   : %s\n\n",nd_to_epi_no.arr);
fprintf(fp,"                  VISIT NO        FROM : %s\n",nd_fm_visit_no.arr);
fprintf(fp,"                                  TO   : %s\n\n",nd_to_visit_no.arr);
fprintf(fp,"                  SHOW ALLOCATION DTLS : %s\n\n",nd_show_dtls.arr);*/


print_head()
{
init_date_temp_var();

strcpy(date_convert.arr,date_time.arr);
	
fun_change_loc_date();

/*fprintf(fp,
"\f%6s : %-5s                                         %-30s                                        %-16s\n",loc_legend[400],loc_legend[150],
hosp_name.arr,date_convert.arr);
*/

fprintf(fp,
"\f%6s : %-5s                                     %-42.42s                                        %-12s\n",loc_legend[400],loc_legend[150],
hosp_name.arr,date_convert.arr); 

 
fprintf(fp,"%6s : %-10s \n",loc_legend[410], user_id.arr);
fprintf(fp,
"%6s : %-12s        %70s %36s : %4d\n",loc_legend[420],loc_legend[40],loc_legend[390],loc_legend[30],++pctr);
fprintf(fp,
"------------------------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,
"    %-19s/%-15s  %-12s  %-7s  %-14s     %-30s  %19s %15s\n",loc_legend[140],loc_legend[450],loc_legend[160],loc_legend[170],loc_legend[180],loc_legend[250],loc_legend[260],loc_legend[270]);
fprintf(fp,
"            %-15s             %-8s %-15s    %-17s                                                  %15s\n",loc_legend[280],loc_legend[290],loc_legend[300],loc_legend[310],loc_legend[260]);
fprintf(fp,
"------------------------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 11;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

/*-- Y2K correction. Format introduced for year as YYYY instead of YY 
     VSK 14/11/1999 */


    EXEC SQL SELECT ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, 
			        :date_time,
			        :user_id
               FROM SY_ACC_ENTITY_lang_vw
			   WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			   and language_id=:p_language_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}

fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRDEPCL.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

get_local_date()
{
 
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	  
    //   	get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date);  
      
	//   :nd_loc_date := to_char(t_date,'DD/MM/YYYY');

		   :nd_loc_date :=  	sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI:SS'),:p_language_id);  

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}


fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);
nd_temp_date.arr[nd_temp_date.len]='\0';

get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}

fun_centre(v_text,v_size)
{
int l_length,i;

l_length=strlen(v_text);

for (i=0;i<(v_size-l_length)/2;i++)
{

	fprintf(fp," ");
}
 
}			

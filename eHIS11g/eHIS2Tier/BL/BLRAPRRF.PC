/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRAPRRF.PC                                  */
/* AUTHOR                : Jagwinder Kaur                               */  
/* DATE WRITTEN          : 10/06/2004                                   */      
/************************************************************************/
          

#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR     hosp_name                       [120],
			l_acc_name						[120],
			l_sysdate						[20],
            date_time                       [20],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
			nd_facility				        [3],
			bl_doc_no						[16],
			bl_org_doc_no					[19],
			bl_doc_date						[11],
			bl_doc_date1					[11],
			bl_org_doc_date					[11],
			bl_org_doc_date1				[11],
			bl_patient_id					[21],
			bl_patient_name					[58],
			nd_fm_date						[11],
			nd_to_date						[11],
			l_translated_value				[201],
			l_cash_book_acc_desc			[16],
			l_pk_value						[100],
			tmp_doc_date					[11],
			tmp_org_doc_date				[11],
			old_doc_date					[11],
			bl_appr_date					[11],
			bl_appr_date1					[11],
			tmp_appr_date					[11],
			old_appr_date					[11],
			bl_instr_no						[9],
			tmp_instr_date					[11],
			bl_instr_date					[11],
			bl_instr_date1					[11],
			bl_bank_name					[102],
			old_bank_name					[102],
			bl_payee_name					[41],
			p_language_id					[3],
			nd_temp_date					[13],
			nd_loc_date						[13],
			date_convert					[13],
			language_id                     [3];

			
double      bl_org_doc_amt,tot_org_doc_amt,tot_amt;
			
int i,bl_doc_srl_no;
char nd_order_by;
char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200];
char fm_date[11],to_date[11];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;
int    first = 1;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRAPRRF");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
  
	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

		strcpy(p_language_id.arr,l_language_id.arr);
		p_language_id.len = l_language_id.len;

        nd_fm_date.arr[0]			= '\0';
		nd_to_date.arr[0]			= '\0';
		nd_fm_date.len				= 0;
		nd_to_date.len				= 0;
		
        EXEC SQL SELECT	PARAM1,PARAM2,PARAM3
				INTO	:nd_fm_date,
						:nd_to_date,
						:nd_order_by
				FROM SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

		nd_fm_date.arr[nd_fm_date.len]				= '\0';
		nd_to_date.arr[nd_to_date.len]				= '\0';
		 

	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   

    	declare_cur();

    	fetch_hosp_name();

		fetch_legend_value();

    	open_file();		

		open_dtl();

        print_head();

	    print_hdr();

	    end_of_rep();


    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

declare_cur()
{
	EXEC SQL DECLARE REQUEST_DTL_CUR CURSOR FOR 
		          select  approved_date,
				  to_char(approved_date,'DD/MM/YYYY'),
                  substr(pmnt_instr_num,1,8),
                  pmnt_instr_date,
				  to_char(pmnt_instr_date,'DD/MM/YYYY'),
                  bank_name,
                  orig_doc_outst_amt,
                  doc_type_code||'/'||to_char(doc_num),
                  doc_srl_num,
                  doc_date,
                  to_char(doc_date,'DD/MM/YYYY'),
                  orig_doc_type_code||'/'||to_char(orig_doc_num)||'/'||to_char(orig_doc_srno),
                  orig_doc_date,
                  to_char(orig_doc_date,'DD/MM/YYYY'),
                  patient_id,
                  payee_name
  from bl_refund_request_dtl
  where operating_facility_id= :nd_facility
  and nvl(request_status,'N') = 'A'
  and doc_date between to_date(:nd_fm_date,'DD/MM/YYYY')
                  and to_date(:nd_to_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS')
  order by decode(:nd_order_by,'A',approved_date,'R',doc_date);
}


open_dtl() 
{

	EXEC SQL OPEN REQUEST_DTL_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor REQUEST_DTL_CUR",0,"");
}

close_dtl() 
{

	EXEC SQL CLOSE REQUEST_DTL_CUR;
    
}

fetch_dtl()
{

bl_appr_date.arr[0]		= '\0';
bl_instr_no.arr[0]		= '\0';
bl_instr_date.arr[0]	= '\0';
bl_bank_name.arr[0]		= '\0';
bl_doc_no.arr[0]		= '\0';
bl_doc_date.arr[0]		= '\0';
bl_org_doc_no.arr[0]	= '\0';
bl_org_doc_date.arr[0]	= '\0';
bl_patient_id.arr[0]	= '\0';
bl_payee_name.arr[0]	= '\0';

bl_appr_date.len		= 0;
bl_instr_no.len			= 0;
bl_instr_date.len		= 0;
bl_bank_name.len		= 0;
bl_doc_no.len			= 0;
bl_doc_date.len			= 0;
bl_org_doc_no.len		= 0;
bl_org_doc_date.len		= 0;
bl_patient_id.len		= 0;
bl_payee_name.len		= 0;

bl_org_doc_amt           = 0;

      EXEC SQL FETCH REQUEST_DTL_CUR
               INTO :tmp_appr_date,
					:bl_appr_date,
					:bl_instr_no,
					:tmp_instr_date,
					:bl_instr_date,
					:bl_bank_name,
					:bl_org_doc_amt,	
					:bl_doc_no,
					:bl_doc_srl_no,
					:tmp_doc_date,
			   		:bl_doc_date,
					:bl_org_doc_no,
					:tmp_org_doc_date,
					:bl_org_doc_date,
					:bl_patient_id,
					:bl_payee_name;

       if (OERROR)
            err_mesg("FETCH failed on cursor REQUEST_DTL_CUR",0,"");

bl_appr_date.arr[bl_appr_date.len]		= '\0';
bl_instr_no.arr[bl_instr_no.len]		= '\0';
bl_instr_date.arr[bl_instr_date.len]	= '\0';
bl_bank_name.arr[bl_bank_name.len]		= '\0';
bl_doc_no.arr[bl_doc_no.len]			= '\0';
bl_doc_date.arr[bl_doc_date.len]		= '\0';
bl_org_doc_no.arr[bl_org_doc_no.len]	= '\0';
bl_org_doc_date.arr[bl_org_doc_date.len]= '\0';
bl_patient_id.arr[bl_patient_id.len]	= '\0';
bl_payee_name.arr[bl_payee_name.len]	= '\0';

    return(LAST_ROW?0:1);
}



print_hdr()
{
  while(fetch_dtl())
  {
    fetch_patient_name();

    if(first)
	 {
     strcpy(old_doc_date.arr,bl_doc_date.arr);
	 old_doc_date.len=strlen(old_doc_date.arr);

	 strcpy(old_appr_date.arr,bl_appr_date.arr);
	 old_appr_date.len=strlen(old_appr_date.arr);

	 strcpy(old_bank_name.arr,bl_bank_name.arr);
	 old_bank_name.len=strlen(old_bank_name.arr);
	 
	 first = 0;
	 }
      
	if(nd_order_by == 'R' && strcmp(old_doc_date.arr,bl_doc_date.arr) != 0)
	    print_total();

	if(nd_order_by == 'A' && strcmp(old_appr_date.arr,bl_appr_date.arr) != 0)
	    print_total();

    if(nd_order_by == 'B' && strcmp(old_bank_name.arr,bl_bank_name.arr) != 0)
	    print_total();

	check_page_end(2,0);

	  	 
	  if(bl_appr_date.arr[0]!='\0')
	  {
	  init_date_temp_var();
	  strcpy(date_convert.arr,bl_appr_date.arr);
	  fun_change_loc_date();
	  strcpy(bl_appr_date1.arr,date_convert.arr);
	  }
	  
	  if(bl_instr_date.arr[0]!='\0')
	  {
	  init_date_temp_var();
	  strcpy(date_convert.arr,bl_instr_date.arr);
	  fun_change_loc_date();
	  strcpy(bl_instr_date1.arr,date_convert.arr);
	  }
	
	fprintf(fp," %-11s%-5s%-12s %-10s %-30.30s",
	             bl_appr_date1.arr," ",
				 bl_instr_no.arr,
				 bl_instr_date1.arr,
				 bl_bank_name.arr);
	print_formated(bl_org_doc_amt);

     if(bl_doc_date.arr[0]!='\0')
	  {
	  init_date_temp_var();
	  strcpy(date_convert.arr,bl_doc_date.arr);
	  fun_change_loc_date();
	  strcpy(bl_doc_date1.arr,date_convert.arr);
	  }
 
    if(bl_org_doc_date.arr[0]!='\0')
	  {
	  init_date_temp_var();
	  strcpy(date_convert.arr,bl_org_doc_date.arr);
	  fun_change_loc_date();
	  strcpy(bl_org_doc_date1.arr,date_convert.arr);
	  }
	fprintf(fp," %-19s %6d %-10s %-15s %-10s\n",
				bl_doc_no.arr,
				bl_doc_srl_no,
				bl_doc_date1.arr,
				bl_org_doc_no.arr,
				bl_org_doc_date1.arr);
	
	/*fprintf(fp," %-20s %-57s %-40s \n",
				bl_patient_id.arr,
				bl_patient_name.arr,
				bl_payee_name.arr);*/

	 fprintf(fp," %-15s %-12s %-42s %-14s  %-40s\n",
	            bl_patient_id.arr," ",
				bl_patient_name.arr," ",
				bl_payee_name.arr);

    lctr=lctr+2;
	tot_org_doc_amt = tot_org_doc_amt + bl_org_doc_amt;

	 if (nd_order_by == 'A')
	 {
	 strcpy(old_appr_date.arr,bl_appr_date.arr);
	 old_appr_date.len=strlen(old_appr_date.arr);
      }

	 if (nd_order_by == 'R')
	 {
	 strcpy(old_doc_date.arr,bl_doc_date.arr);
	 old_doc_date.len=strlen(old_doc_date.arr);
      }

     if (nd_order_by == 'B')
	 {
	 strcpy(old_bank_name.arr,bl_bank_name.arr);
	 old_bank_name.len=strlen(old_bank_name.arr);
	 }
	 
	}
print_total();
print_grand_total();
}   

print_total()
{
    check_page_end(3,0);
	fprintf(fp,"%-70s %-15s\n"," ","---------------");
	fprintf(fp,"%-49s %-19s :"," ",loc_legend[12]); 
	print_formated(tot_org_doc_amt);
	fprintf(fp,"\n");
	fprintf(fp,"%-70s %-15s\n"," ","---------------");
	tot_amt = tot_amt + tot_org_doc_amt;
	lctr=lctr+3; 
	tot_org_doc_amt = 0;
}   

print_grand_total()
{
    check_page_end(5,0);
	fprintf(fp,"%-49s %-19s :"," ",loc_legend[13]); 
	print_formated(tot_amt);
	fprintf(fp,"\n");
	fprintf(fp,"%-70s %-15s\n"," ","---------------");
	tot_amt = 0;
	
}   


end_of_rep()
{
	check_page_end(3,0);
	fprintf(fp,"\n\n %56s   ***  END OF THE REPORT ***\n\f"," ");
	fflush(fp);
}

open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLRAPRRF.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLRAPRRF.lis");
       proc_exit();
    }
}

/*print_page_header()
{

   




print_page_title();
fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1 \n\n\n\n");
fprintf(fp,"           INPUT PARAMETER \n");
fprintf(fp,"           --------------- \n\n\n\n");
fprintf(fp,"				TRANSACTION TYPE                  : ");

if (nd_trn_type == 'R')
fprintf(fp,"Receipt");
else
fprintf(fp,"Refund");
fprintf(fp,"\n\n");

fprintf(fp,"				RECEIPT DATE     FROM             : %s\n",fm_date);
fprintf(fp,"				                 TO               : %s\n\n",to_date);
fprintf(fp,"\f");
}

*/
print_head()
{
	print_page_title();
	fprintf(fp,"---------------------------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp," %-15s %-12s %-10s %-28s  %16s  %-16s%-4s%6s %-10s %-15s %-8s\n",loc_legend[4],loc_legend[5],loc_legend[6],loc_legend[7],loc_legend[8],loc_legend[9]," ",loc_legend[10],loc_legend[6],loc_legend[11],loc_legend[6]);
	fprintf(fp," %-14s%-15s%-8s%-51s%-9s %-8s\n",loc_legend[18]," ",loc_legend[19]," ",loc_legend[20],loc_legend[19]);
	fprintf(fp,"---------------------------------------------------------------------------------------------------------------------------------------------------------\n");
	fflush(fp); 
	lctr = 8;
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;
    char fm_date[10],to_date[10];
  
     
	 if (strcmp(nd_fm_date.arr,"01/01/1000") == 0)
	  strcpy(fm_date,loc_legend[25]);
    else
	  {
	  init_date_temp_var();
	  strcpy(date_convert.arr,nd_fm_date.arr);
	  fun_change_loc_date();
	  strcpy(fm_date,date_convert.arr);
	  }
   
	if (strcmp(nd_to_date.arr,"31/12/4000") == 0)
	  strcpy(to_date,loc_legend[24]);
    else
	  {
	  init_date_temp_var();
	  strcpy(date_convert.arr,nd_to_date.arr);
	  fun_change_loc_date();
	  strcpy(to_date,date_convert.arr);
	  }

	l_report_width=132;
	l_acc_entity_length = strlen(hosp_name.arr);

	//Code for Line 1

	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	fprintf(fp,"%-13s : BL",loc_legend[21]);
	l_start_point=l_start_point-18;
	print_spaces(l_start_point);
	fprintf(fp,"%s",hosp_name.arr);
	l_comp_name_end_point=l_start_point+18+l_acc_entity_length;
	l_start_point=(l_report_width-(15+strlen(l_sysdate.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	init_date_temp_var();
	strcpy(date_convert.arr,l_sysdate.arr);
	fun_change_loc_date();
	
	fprintf(fp,"%-15.15s : %s\n",loc_legend[15],date_convert.arr);

	//Code for Line 2
	
	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[1]))/2));
	fprintf(fp,"%-13s : %s",loc_legend[22],user_id.arr);
	l_start_point=l_start_point-(strlen(user_id.arr)+16);
	print_spaces(l_start_point);
	fprintf(fp,"%s ",loc_legend[1]);
	l_comp_name_end_point=l_start_point+(strlen(user_id.arr)+16)+strlen(loc_legend[1]);
	l_start_point=(l_report_width-(18+strlen(date_time.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp,"%-15.15s : %s\n",loc_legend[16],date_time.arr);
    
	//Code for Line 3

	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[2])+strlen(fm_date)+strlen(to_date)+strlen(loc_legend[3]))/2));;
	fprintf(fp,"%-14.14s: BLRAPRRF",loc_legend[14]);
	l_start_point=l_start_point-24;
    print_spaces(l_start_point);
    fprintf(fp,"%s %s %s %s",loc_legend[2],fm_date,loc_legend[3],to_date);
	l_comp_name_end_point=l_start_point+24+strlen(loc_legend[2])+strlen(fm_date)+strlen(to_date)+strlen(loc_legend[3]);
	l_start_point=(l_report_width-(19+9)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp,"%-15.15s : %d\n",loc_legend[17],++pctr);

	
}

fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","-");
}

fetch_hosp_name()
{
    l_acc_name.arr[0]= '\0';
	hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	l_sysdate.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    l_acc_name.len   = 0;
	hosp_name.len    = 0;
    date_time.len    = 0;
	l_sysdate.len	 = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACCOUNTING_NAME,
					ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/RRRR'),
					TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    USER
               INTO :l_acc_name,
					:hosp_name, 
					:l_sysdate,
					:date_time, 
					:user_id
               FROM SY_ACC_ENTITY_LANG_VW
	          WHERE ACC_ENTITY_ID = :nd_facility
			  AND   LANGUAGE_ID   = :p_language_id;

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	l_acc_name.arr[l_acc_name.len]		   = '\0';
	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	l_sysdate.arr[l_sysdate.len]		   = '\0';
	user_id.arr[user_id.len]               = '\0';

}

fetch_patient_name()
{
    bl_patient_name.arr[0] = '\0';
    bl_patient_name.len = 0;

    EXEC SQL SELECT decode(:p_language_id,'en', substr(short_name,1,57),
								      substr(short_name_loc_lang,1,57))
               INTO :bl_patient_name
               FROM MP_PATIENT_MAST
	           WHERE PATIENT_ID = :bl_patient_id;

    if (OERROR) 
		err_mesg("SELECT failed on table MP_PATIENT_MAST",0,"");

	bl_patient_name.arr[bl_patient_name.len]           = '\0';
	
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
    }
}                        

check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+10;

	if((lctr+l_lead_lines)> 55) 
	{
		fprintf(fp,"\f");
		print_head();
		lctr = 3;
	}
}

print_spaces(l_length)
double l_length;
{
    
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}




fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRAPRRF.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


get_local_date()
{
	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'DD/MM/YYYY'),:p_language_id,t_date);

		:nd_loc_date := to_char(t_date,'DD/MM/YYYY');

	END;

	END-EXEC;

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");


}

init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}


fun_change_loc_date()
{
strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 
}
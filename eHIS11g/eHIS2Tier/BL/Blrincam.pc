/************************************************************************/
/*   OCS MEDICOM VER 1.10.01                                              */
/************************************************************************/
/* PROGRAM NAME          : BLRINCAM.PC                                  */
/* DATE WRITTEN          : 04-SEP-1993                                  */ 
/*                                                                      */
/* CALLED FROM           : BLRINCAL (FORM)                              */
/*                                                                      */
/* FUNCTION               :                                             */  
/*                                                                      */
/*                                                                      */
/*                                                                      */  
/*  TABLE DETAILS                                                        */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        BL_SRV_INC_SUM_MTH_DTL     Query                   */
/*         2.        BL_PKG_INC_SUM_MTH_DTL     Query                   */
/*         3.        BL_BLNG_SERV               Query                   */
/*         4.        BL_PACKAGE_HDR             Lookup                  */
/*         5.        SY_DEPT                    Lookup                  */
/*         6.        SY_PHYSICIAN_MAST          Lookup                  */
/*         7.        SY_PROG_PARAM              Query/Delete            */
/*                                                                      */
/*  PARAMETERS                                                          */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/************************************************************************/
                       

#include <stdio.h>      
#include <string.h>
#include "bl.h" 

#define OERROR (sqlca.sqlcode < 0)

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

/*
#define DEBUG 0
*/

#define MAXLINES 55

EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd                      [132],
           hosp_name                    [120],
           date_time                    [20],
           user_id                      [31],
           nd_session_id                [16],
           nd_pgm_date                  [35];

   VARCHAR nd_pkg_serv_flag             [2],
           nd_rep_flag                  [2],
           nd_fm_blng_serv              [11],
           nd_to_blng_serv              [11],
           nd_fm_ac_dept                [7],
           nd_to_ac_dept                [7],
           nd_fm_or_dept                [7],
           nd_to_or_dept                [7],
           nd_fm_dr                     [16],
           nd_to_dr                     [16],
           nd_fm_date                   [11],
           nd_to_date                   [11],
           nd_fm_month                  [3],
           nd_to_month                  [3],
           nd_fm_year                   [5],
           nd_to_year                   [5],
		   nd_operating_facility_id     [3],
		   nd_fr_facility               [3],
		   nd_to_facility               [3],
		   nd_rep_option                [2],
		   nd_op_facility_id            [3],
		   nd_pre_facility_id           [3],
		   l_pk_value					[100],
		   l_translated_value			[201],
		   p_language_id				[3],
		    nd_facility_id				[3];

   VARCHAR incsum_serv_pkg_code         [11],
           incsum_acct_dept_code        [7],
           incsum_orig_dept_code        [7],
           incsum_physician_id          [16],
           incsum_serv_date             [11],
           incsum_episode_type          [2],
           incsum_blng_class_code       [3],
           incsum_bed_class_code        [3];

   VARCHAR serv_pkg_desc                [41],
           acc_dept_desc                [41],
           org_dept_desc                [41],
           physician_name               [31];

   double  incsum_base_charge = 0,
           incsum_gross_charge = 0,
           incsum_disc_amt = 0,
           incsum_net_charge = 0;

   char    sql_stmt                     [2000];
   char    string_var                   [120];

   	int i;
	
	char g_facility_id[3];

    char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];


EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char   old_serv_pkg_code         [11],
       old_acct_dept_code        [7],
       old_orig_dept_code        [7],
       old_serv_date             [11],
       old_episode_type          [2],
       old_serv_pkg_desc         [41],
       old_acc_dept_desc         [41],
       old_org_dept_desc         [41];

double orgtot_base_charge = 0,
       orgtot_gross_charge = 0,
       orgtot_disc_amt = 0,
       orgtot_net_charge = 0,
       acctot_base_charge = 0,
       acctot_gross_charge = 0,
       acctot_disc_amt = 0,
       acctot_net_charge = 0,
       boptot_base_charge = 0,
       boptot_gross_charge = 0,
       boptot_disc_amt = 0,
       boptot_net_charge = 0,
       pertot_base_charge = 0,
       pertot_gross_charge = 0,
       pertot_disc_amt = 0,
       pertot_net_charge = 0,
       epitot_base_charge = 0,
       epitot_gross_charge = 0,
       epitot_disc_amt = 0,
       epitot_net_charge = 0,
       reptot_base_charge = 0,
       reptot_gross_charge = 0,
       reptot_disc_amt = 0,
       reptot_net_charge = 0;

FILE *fp;
int lctr = 0,pctr =0;
int detail_ctr = 0;

void fetch_desc(),
     fetch_param(),
     delete_param(),
     declare_cursors(),
     open_files(),
     print_title(),
     print_head(),
     print_org_head(),
     print_break_footer(char *brk, 
                        double base_charge_tot, 
                        double gross_charge_tot,
                        double disc_amt_tot,
                        double net_charge_tot),
     print_detail(),
     print_all_breaks(int i),
     init_old(),
     print_end(),
     sql_connect(),
     ltrim(char *str),
     print_formated(double amount),
     list_args(int arg_cnt,char **arg_list);

int fetch_inc_sum(),
    check_break();

void proc_main(int argc,char **argv)
{
   int brkindex;

   if (argc != 5)
   {
      list_args(argc, argv);
      proc_exit();
   }

   strcpy(g_pgm_id,"BLRINCAM");

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_facility_id.arr,argv[4]);
   nd_facility_id.len = strlen(nd_facility_id.arr);
   strcpy(g_facility_id,nd_facility_id.arr);

   sql_connect();

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);
 
   set_meduser_role();
   strcpy(p_language_id.arr,l_language_id.arr);

   fetch_param();
   fetch_legend_value();
   delete_param();
   start_prog_msg();
   fetch_desc();
   open_files();
   declare_cursors();
   detail_ctr = 0;
   print_title();
   init_old();
   while(fetch_inc_sum())
   {
      brkindex = check_break();
      print_all_breaks(brkindex);
      detail_ctr ++;
      print_detail();
   }
   if (detail_ctr > 0)
   {
      print_all_breaks(6);
   }
   print_end();
   end_prog_msg();
   EXEC SQL COMMIT WORK RELEASE;
   return;
}

/***************** Database Access & Updation Functions ***********************/
void fetch_desc()
{
   hosp_name.arr[0]      = '\0';
   date_time.arr[0]      = '\0';
   user_id.arr[0]        = '\0';

   hosp_name.len      = 0;
   date_time.len      = 0;
   user_id.len        = 0;

   EXEC SQL SELECT ACCOUNTING_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                   USER
              INTO :hosp_name, :date_time, :user_id
              FROM SY_ACC_ENTITY
			  WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

   if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]           = '\0';
   date_time.arr[date_time.len]           = '\0';
   user_id.arr[user_id.len]               = '\0';

}

void fetch_param()
{
   nd_pkg_serv_flag.arr[0] = '\0';
   nd_rep_flag.arr[0]      = '\0';
   nd_fm_blng_serv.arr[0]  = '\0';
   nd_to_blng_serv.arr[0]  = '\0';
   nd_fm_ac_dept.arr[0]    = '\0';
   nd_to_ac_dept.arr[0]    = '\0';
   nd_fm_or_dept.arr[0]    = '\0';
   nd_to_or_dept.arr[0]    = '\0';
   nd_fm_dr.arr[0]         = '\0';
   nd_to_dr.arr[0]         = '\0';
   nd_fm_date.arr[0]       = '\0';
   nd_to_date.arr[0]       = '\0';
   nd_fm_month.arr[0]      = '\0';
   nd_to_month.arr[0]      = '\0';
   nd_fm_year.arr[0]       = '\0';
   nd_to_year.arr[0]       = '\0';
   nd_operating_facility_id.arr[0]  = '\0';

   nd_pkg_serv_flag.len    = 0;
   nd_rep_flag.len         = 0;
   nd_fm_blng_serv.len     = 0;
   nd_to_blng_serv.len     = 0;
   nd_fm_ac_dept.len       = 0;
   nd_to_ac_dept.len       = 0;
   nd_fm_or_dept.len       = 0;
   nd_to_or_dept.len       = 0;
   nd_fm_dr.len            = 0;
   nd_to_dr.len            = 0;
   nd_fm_date.len          = 0;
   nd_to_date.len          = 0;
   nd_fm_month.len         = 0;      
   nd_to_month.len         = 0;
   nd_fm_year.len          = 0;
   nd_to_year.len          = 0;
   nd_operating_facility_id.len = 0;

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,PARAM3, PARAM4, PARAM5,
                   PARAM6,PARAM7,PARAM8, PARAM9, PARAM10, 
                   PARAM11,PARAM12,PARAM13, PARAM14, PARAM15, PARAM16,
				   PARAM17, PARAM18, PARAM19
              INTO :nd_operating_facility_id,
				   :nd_pkg_serv_flag,
                   :nd_rep_flag,
                   :nd_fm_blng_serv,
                   :nd_to_blng_serv,
                   :nd_fm_ac_dept,
                   :nd_to_ac_dept,
                   :nd_fm_or_dept,
                   :nd_to_or_dept,
                   :nd_fm_dr,
                   :nd_to_dr,
                   :nd_fm_date,
                   :nd_to_date,
                   :nd_fm_month,
                   :nd_to_month,
                   :nd_fm_year,
                   :nd_to_year,
				   :nd_fr_facility,
				   :nd_to_facility,
				   :nd_rep_option
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'BLRINCAM'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NO_DATA_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_pkg_serv_flag.arr[nd_pkg_serv_flag.len] = '\0';
   nd_rep_flag.arr[nd_rep_flag.len]           = '\0';
   nd_fm_blng_serv.arr[nd_fm_blng_serv.len]   = '\0';
   nd_to_blng_serv.arr[nd_to_blng_serv.len]   = '\0';
   nd_fm_ac_dept.arr[nd_fm_ac_dept.len]       = '\0';
   nd_to_ac_dept.arr[nd_to_ac_dept.len]       = '\0';
   nd_fm_or_dept.arr[nd_fm_or_dept.len]       = '\0';
   nd_to_or_dept.arr[nd_to_or_dept.len]       = '\0';
   nd_fm_dr.arr[nd_fm_dr.len]                 = '\0';
   nd_to_dr.arr[nd_to_dr.len]                 = '\0';
   nd_fm_date.arr[nd_fm_date.len]             = '\0';
   nd_to_date.arr[nd_to_date.len]             = '\0';
   nd_fm_month.arr[nd_fm_month.len]           = '\0';
   nd_to_month.arr[nd_to_month.len]           = '\0';
   nd_fm_year.arr[nd_fm_year.len]             = '\0';
   nd_to_year.arr[nd_to_year.len]             = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);
}

void delete_param()
{
    EXEC SQL DELETE FROM SY_PROG_PARAM
                   WHERE PGM_ID     = 'BLRINCAM'
                     AND SESSION_ID = :nd_session_id
                     AND PGM_DATE   = :nd_pgm_date;

    if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

}

void declare_cursors()
{
   if (nd_pkg_serv_flag.arr[0]=='S') 
   {
      strcpy(sql_stmt,"SELECT BLNG_SERV_CODE, ACCT_DEPT_CODE, ORIG_DEPT_CODE, \
      PHYSICIAN_ID, SUBSTR(TO_CHAR(SERV_MONTH, '09'),2,3)|| '/' \
       || SUBSTR(TO_CHAR(SERV_YEAR,'9999'),1,5), EPISODE_TYPE, \
      BLNG_CLASS_CODE, BED_CLASS_CODE, BASE_CHARGE, GROSS_CHARGE, DISC_AMT, \
      GROSS_CHARGE - DISC_AMT, \
	  OPERATING_FACILITY_ID  \
      FROM BL_SRV_INC_SUM_MTH_DTL \
      WHERE (SERV_YEAR * 100) + SERV_MONTH \
      BETWEEN TO_NUMBER(NVL(:nd_fm_year,'0000')) * 100 \
               +  TO_NUMBER(NVL(:nd_fm_month, '01')) \
      AND TO_NUMBER(NVL(:nd_to_year,'9999')) * 100 \
               +  TO_NUMBER(NVL(:nd_to_month, '12')) \
      AND BLNG_SERV_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ACCT_DEPT_CODE BETWEEN NVL(:nd_fm_ac_dept,  '      ') \
           AND NVL(:nd_to_ac_dept,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND  OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility \
      ORDER BY EPISODE_TYPE, SERV_YEAR, SERV_MONTH, BLNG_SERV_CODE, \
               ACCT_DEPT_CODE, ORIG_DEPT_CODE, PHYSICIAN_ID ");
   }
   else 
   {
      strcpy(sql_stmt,"SELECT PACKAGE_CODE, NULL, ORIG_DEPT_CODE, \
      PHYSICIAN_ID, SUBSTR(TO_CHAR(SERV_MONTH, '09'),2,3)|| '/' \
       || SUBSTR(TO_CHAR(SERV_YEAR,'9999'),1,5), EPISODE_TYPE, \
      BLNG_CLASS_CODE, BED_CLASS_CODE, BASE_CHARGE, GROSS_CHARGE, DISC_AMT, \
      GROSS_CHARGE - DISC_AMT  \
      FROM BL_PKG_INC_SUM_MTH_DTL \
      WHERE (SERV_YEAR * 100) + SERV_MONTH \
      BETWEEN TO_NUMBER(NVL(:nd_fm_year,'0000')) * 100 \
               +  TO_NUMBER(NVL(:nd_fm_month, '01')) \
      AND TO_NUMBER(NVL(:nd_to_year,'9999')) * 100 \
               +  TO_NUMBER(NVL(:nd_to_month, '12')) \
      AND PACKAGE_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~~~~~~~~~~') \
	  AND  OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility \
      ORDER BY EPISODE_TYPE, SERV_YEAR, SERV_MONTH, PACKAGE_CODE, \
               ORIG_DEPT_CODE, PHYSICIAN_ID ");
   }

   EXEC SQL PREPARE S FROM :sql_stmt;

   if (OERROR)
      err_mesg("PREPARE failed on statment S",0,"");

   EXEC SQL DECLARE INC_SUM_MTH_DTL_CUR CURSOR FOR S;

   if (OERROR)
      err_mesg("DECLARE failed on CURSOR INC_SUM_MTH_DTL_CUR",0,"");

   if (nd_pkg_serv_flag.arr[0]=='S') 
   {
       EXEC SQL OPEN INC_SUM_MTH_DTL_CUR USING :nd_fm_year,  :nd_fm_month,
                                           :nd_to_year,      :nd_to_month,      
                                           :nd_fm_blng_serv, :nd_to_blng_serv,
                                           :nd_fm_ac_dept,   :nd_to_ac_dept,
                                           :nd_fm_or_dept,   :nd_to_or_dept,
                                           :nd_fm_dr,        :nd_to_dr,
										   :nd_fr_facility,  :nd_to_facility;
   }
   else
   {
       EXEC SQL OPEN INC_SUM_MTH_DTL_CUR USING :nd_fm_year,  :nd_fm_month,
                                           :nd_to_year,      :nd_to_month,      
                                           :nd_fm_blng_serv, :nd_to_blng_serv,
                                           :nd_fm_or_dept,   :nd_to_or_dept,
                                           :nd_fm_dr,        :nd_to_dr,
										   :nd_fr_facility,  :nd_to_facility;
   }

   if (OERROR)
      err_mesg("OPEN failed on cursor INC_SUM_MTH_DTL_CUR",0,"");

   EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR 
   SELECT LONG_DESC
   FROM   BL_BLNG_SERV
   WHERE  BLNG_SERV_CODE = :incsum_serv_pkg_code;

   EXEC SQL DECLARE BL_PACKAGE_HDR_CUR CURSOR FOR 
   SELECT LONG_DESC
   FROM   BL_PACKAGE_HDR
   WHERE  PACKAGE_CODE = :incsum_serv_pkg_code;

   EXEC SQL DECLARE SY_AC_DEPT_CUR CURSOR FOR
   SELECT LONG_DESC
   FROM   SY_DEPT
   WHERE  DEPT_CODE = :incsum_acct_dept_code
   AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;

   EXEC SQL DECLARE SY_ORG_DEPT_CUR CURSOR FOR
   SELECT LONG_DESC
   FROM   SY_DEPT
   WHERE  DEPT_CODE = :incsum_orig_dept_code
   AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;


   EXEC SQL DECLARE SY_PHYSICIAN_MAST_CUR CURSOR FOR
   SELECT FULL_NAME
   FROM   SY_PHYSICIAN_MAST
   WHERE  PHYSICIAN_ID = :incsum_physician_id;

}

int fetch_inc_sum()
{
      incsum_serv_pkg_code.arr[0]   = '\0';
      incsum_acct_dept_code.arr[0]  = '\0';
      incsum_orig_dept_code.arr[0]  = '\0';
      incsum_physician_id.arr[0]    = '\0';
      incsum_serv_date.arr[0]       = '\0';
      incsum_episode_type.arr[0]    = '\0';
      incsum_blng_class_code.arr[0] = '\0';
      incsum_bed_class_code.arr[0]  = '\0';

      incsum_serv_pkg_code.len      = 0;
      incsum_acct_dept_code.len     = 0;
      incsum_orig_dept_code.len     = 0;
      incsum_physician_id.len       = 0;
      incsum_serv_date.len          = 0;
      incsum_episode_type.len       = 0;
      incsum_blng_class_code.len    = 0;
      incsum_bed_class_code.len     = 0;

      incsum_base_charge  = (double) 0;
      incsum_gross_charge = (double) 0;
      incsum_disc_amt     = (double) 0;
      incsum_net_charge   = (double) 0;

      EXEC SQL FETCH INC_SUM_MTH_DTL_CUR
               INTO  :incsum_serv_pkg_code,
                     :incsum_acct_dept_code,
                     :incsum_orig_dept_code,
                     :incsum_physician_id,
                     :incsum_serv_date,
                     :incsum_episode_type,
                     :incsum_blng_class_code,
                     :incsum_bed_class_code,
                     :incsum_base_charge,
                     :incsum_gross_charge,
                     :incsum_disc_amt,
                     :incsum_net_charge,
					 :nd_op_facility_id;

      if (OERROR)
            err_mesg("FETCH failed on cursor INC_SUM_MTH_DTL_CUR",0,"");

      if (LAST_ROW)
          return(0);

      incsum_serv_pkg_code.arr[incsum_serv_pkg_code.len]     = '\0';
      incsum_acct_dept_code.arr[incsum_acct_dept_code.len]   = '\0';
      incsum_orig_dept_code.arr[incsum_orig_dept_code.len]   = '\0';
      incsum_physician_id.arr[incsum_physician_id.len]       = '\0';
      incsum_serv_date.arr[incsum_serv_date.len]             = '\0';
      incsum_episode_type.arr[incsum_episode_type.len]       = '\0';
      incsum_blng_class_code.arr[incsum_blng_class_code.len] = '\0';
      incsum_bed_class_code.arr[incsum_bed_class_code.len]   = '\0';

      return(1);
}

/*********************** File Handling & Printing Functions *******************/
void open_files()
{
 //  char *file_name = "blrincam.lis", err_stmt[70];
    strcpy(filename,WORKING_DIR);
    strcat(filename,"blrincam.lis");

   if ((fp = fopen(filename,"w")) == NULL)
   {
     //   sprintf(err_stmt,"Error while opening File %s",filename);
     //   err_mesg(err_stmt,0,"");
	  sprintf(string_var,"Error while opening File %s",filename);
      disp_message(ERR_MESG,string_var);
        proc_exit();
   }

}

void print_title()
{
  fprintf(fp, "\n\nMDL : %2s %43s %-30s %30s  %-18s\n",loc_legend[150],
      " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-25s                 %24s %15s\n",
     user_id.arr,loc_legend[50],
     ((nd_pkg_serv_flag.arr[0]=='S')?loc_legend[80]:loc_legend[90]));
  fprintf(fp, "REP : %-8s %44s  %-28s %30s %4s : %4d\n",loc_legend[40], " ", 
    loc_legend[100]," ",loc_legend[30], ++pctr);
  fprintf(fp, "%s%s%s\n",
            "--------------------------------------------------------",
            "--------------------------------------------------------",
            "--------------------");
  fprintf(fp,"VER : 4.1\n");
  fflush(fp);

  fprintf(fp,"\n\n\n\n        INPUT PARAMETERS \n        ----------------\n\n");
  fprintf(fp," %14s %20s : %s\n\n"," ",loc_legend[110], nd_pkg_serv_flag.arr);

  if (nd_pkg_serv_flag.arr[0]=='S')
  {
   fprintf(fp," %14s %15s %4s : %-10s\n"," ",loc_legend[120],loc_legend[60], nd_fm_blng_serv.arr); 
   fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_blng_serv.arr);
   fprintf(fp," %14s %15s %4s : %-10s\n"," ",loc_legend[130],loc_legend[60], nd_fm_ac_dept.arr); 
   fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_ac_dept.arr);
  }
  else
  {
   fprintf(fp," %14s %12s    %4s : %-10s\n"," ",loc_legend[140],loc_legend[60], nd_fm_blng_serv.arr); 
   fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_blng_serv.arr);
  }

  fprintf(fp," %14s %15s %4s : %-10s\n"," ",loc_legend[160],loc_legend[60], nd_fm_or_dept.arr); 
  fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_or_dept.arr);
  fprintf(fp," %14s %6s          %4s : %-10s\n"," ",loc_legend[170],loc_legend[60], nd_fm_dr.arr); 
  fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_dr.arr);
  fprintf(fp," %14s %14s  %4s : %02.2s/%04.4s\n"," ",loc_legend[180],loc_legend[60],
                                              nd_fm_month.arr, nd_fm_year.arr); 
  fprintf(fp," %14s                 %2s   : %02.2s/%04.4s\n"," ",loc_legend[70], 
                                              nd_to_month.arr, nd_to_year.arr); 

  fflush(fp);
}

void print_head()
{
  fprintf(fp, "\f\n\nMDL : BL %43s %-30s %30s  %-15s\n",
      " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-25s                 %s %s\n",
     user_id.arr, loc_legend[50],
     ((nd_pkg_serv_flag.arr[0]=='S')?loc_legend[80]:loc_legend[90]));
  fprintf(fp, "REP : %-8s %44s  %-28s %30s %4s : %4d\n\n",loc_legend[40], " ",
    loc_legend[100] ," ",loc_legend[30], ++pctr);

   switch (old_episode_type[0]) {
   case 'I' :
     fprintf(fp, "%12s : %13s\n\n",loc_legend[200],loc_legend[210]); break;
   case 'D' :
     fprintf(fp, "%12s : %10s\n\n",loc_legend[200],loc_legend[220]); break;
   case 'O' :
     fprintf(fp, "%12s : %14s\n\n",loc_legend[200],loc_legend[230]); break;
   case 'E' :
     fprintf(fp, "%12s : %12s\n\n",loc_legend[200],loc_legend[240]); break;
   case 'R' :
     fprintf(fp, "%12s : %20s\n\n",loc_legend[200],loc_legend[250]); break;
  }
  fprintf(fp, "%s%s%s\n",
            "--------------------------------------------------------",
            "--------------------------------------------------------",
            "--------------------");
  fprintf(fp, "%19s  %11s %1s%4s                     "," ",loc_legend[190],"&",loc_legend[260]);
  fprintf(fp, "    %11s       %12s",loc_legend[270],loc_legend[280]);
  fprintf(fp, "           %8s         %10s\n",loc_legend[290],loc_legend[300]);

  fprintf(fp, "%s%s%s\n",
            "--------------------------------------------------------",
            "--------------------------------------------------------",
            "--------------------");

  if (strcmp(nd_rep_option.arr, "B") == 0)
  {
    if (!nd_pre_facility_id.arr)
	   strcpy(nd_pre_facility_id.arr,nd_op_facility_id.arr);

    if (strcmp(nd_pre_facility_id.arr,nd_op_facility_id.arr)!=0) 
      {
        strcpy(nd_pre_facility_id.arr,nd_op_facility_id.arr);
        fprintf(fp,"Facility Id :  %2s\n" ,nd_op_facility_id.arr);          
        lctr++;
      }
   }
           
  fprintf(fp, "%6s : %-8.8s\n", old_serv_date);
  fprintf(fp, "%s : %-6.6s %-40.40s",
      (nd_pkg_serv_flag.arr[0]=='S')?loc_legend[120]:loc_legend[140],
      old_serv_pkg_code, old_serv_pkg_desc);
  if (nd_pkg_serv_flag.arr[0]=='S')
      fprintf(fp, "     %8s : %-6.6s  %40.40s\n",loc_legend[320], old_acct_dept_code,
                                                       old_acc_dept_desc);

  else fprintf(fp, "\n");
  fflush(fp);
  lctr = 13;
}

void print_end()
{
  if (lctr > MAXLINES - 6) print_head();

  if (pctr==1)
  {
      fprintf(fp, "\f\n\nMDL : %2s %43s %-30s %30s  %-15s\n",loc_legend[150],
          " ", hosp_name.arr," ", date_time.arr);
      fprintf(fp, "OPR : %-25s                 %s %s\n",
         user_id.arr, loc_legend[50],
         ((nd_pkg_serv_flag.arr[0]=='S')?loc_legend[80]:loc_legend[90]));
      fprintf(fp, "REP : %-8s %44s  %-28s %30s %4s : %4d\n\n", g_pgm_id, " ",
        loc_legend[100] ," ",loc_legend[30], ++pctr);
      fprintf(fp, "%s%s%s\n",
                "--------------------------------------------------------",
                "--------------------------------------------------------",
                "--------------------");
      fprintf(fp, "%19s  %11s %1s%4s                     "," ",loc_legend[190],"&",loc_legend[260]);
      fprintf(fp, "    %11s       %12s",loc_legend[270],loc_legend[280]);
      fprintf(fp, "           %8s         %10s\n",loc_legend[290],loc_legend[300]);
    
      fprintf(fp, "%s%s%s\n",
                "--------------------------------------------------------",
                "--------------------------------------------------------",
                "--------------------");
  }

  fprintf(fp, "\n\n\n %52s **   END  OF  REPORT   ** \n\n", " ");
  fflush(fp);
  fclose(fp);
}

void init_old()
{
    old_serv_pkg_code[0]  = '\0';
    old_acct_dept_code[0] = '\0';
    old_orig_dept_code[0] = '\0';
    old_serv_date[0]      = '\0';
    old_episode_type[0]   = '\0';
    old_serv_pkg_desc[0]  = '\0';
    old_acc_dept_desc[0]  = '\0';
    old_org_dept_desc[0]  = '\0';
}

void print_all_breaks(int i)
{
  if (detail_ctr)
  {
    if (i > 0)
    {
         print_break_footer(loc_legend[340], orgtot_base_charge,
            orgtot_gross_charge, orgtot_disc_amt, orgtot_net_charge);
         orgtot_base_charge  = (double) 0; orgtot_gross_charge = (double) 0;
         orgtot_disc_amt     = (double) 0; orgtot_net_charge   = (double) 0;
    }
    if (i > 1)
    {
         if (nd_pkg_serv_flag.arr[0]=='S')
            print_break_footer(loc_legend[320], acctot_base_charge,
               acctot_gross_charge, acctot_disc_amt, acctot_net_charge);
         acctot_base_charge  = (double) 0; acctot_gross_charge = (double) 0;
         acctot_disc_amt     = (double) 0; acctot_net_charge   = (double) 0;
    }
    if (i > 2)
    {
         print_break_footer((nd_pkg_serv_flag.arr[0]=='S')?
            loc_legend[120]:loc_legend[140], boptot_base_charge,
            boptot_gross_charge, boptot_disc_amt, boptot_net_charge);
         boptot_base_charge  = (double) 0; boptot_gross_charge = (double) 0;
         boptot_disc_amt     = (double) 0; boptot_net_charge   = (double) 0;
    }
    if (i > 3)
    {
         print_break_footer(loc_legend[310], pertot_base_charge,
            pertot_gross_charge, pertot_disc_amt, pertot_net_charge);
         pertot_base_charge  = (double) 0; pertot_gross_charge = (double) 0;
         pertot_disc_amt     = (double) 0; pertot_net_charge   = (double) 0;
    }
    if (i > 4)
    {
         print_break_footer(loc_legend[200], epitot_base_charge,
            epitot_gross_charge, epitot_disc_amt, epitot_net_charge);
         epitot_base_charge  = (double) 0; epitot_gross_charge = (double) 0;
         epitot_disc_amt     = (double) 0; epitot_net_charge   = (double) 0;
    }
    if (i > 5)
    {
         print_break_footer(loc_legend[350], reptot_base_charge,
            reptot_gross_charge, reptot_disc_amt, reptot_net_charge);
    }
  }
  orgtot_base_charge   += incsum_base_charge;
  orgtot_gross_charge  += incsum_gross_charge;
  orgtot_disc_amt      += incsum_disc_amt;
  orgtot_net_charge    += incsum_net_charge;
  acctot_base_charge   += incsum_base_charge;
  acctot_gross_charge  += incsum_gross_charge;
  acctot_disc_amt      += incsum_disc_amt;
  acctot_net_charge    += incsum_net_charge;
  boptot_base_charge   += incsum_base_charge;
  boptot_gross_charge  += incsum_gross_charge;
  boptot_disc_amt      += incsum_disc_amt;
  boptot_net_charge    += incsum_net_charge;
  pertot_base_charge   += incsum_base_charge;
  pertot_gross_charge  += incsum_gross_charge;
  pertot_disc_amt      += incsum_disc_amt;
  pertot_net_charge    += incsum_net_charge;
  epitot_base_charge   += incsum_base_charge;
  epitot_gross_charge  += incsum_gross_charge;
  epitot_disc_amt      += incsum_disc_amt;
  epitot_net_charge    += incsum_net_charge;
  reptot_base_charge   += incsum_base_charge;
  reptot_gross_charge  += incsum_gross_charge;
  reptot_disc_amt      += incsum_disc_amt;
  reptot_net_charge    += incsum_net_charge;


   /******************  Get the Descriptions if codes are changed ************/

    physician_name.arr[0] = '\0'; physician_name.len = 0; 
    EXEC SQL OPEN SY_PHYSICIAN_MAST_CUR;
    EXEC SQL FETCH SY_PHYSICIAN_MAST_CUR INTO :physician_name;
    physician_name.arr[physician_name.len] = '\0'; 

    if (i > 0)
    {
        if(strcmp(old_orig_dept_code, incsum_orig_dept_code.arr)!=0)
        {
             org_dept_desc.arr[0] = '\0'; org_dept_desc.len = 0; 
             EXEC SQL OPEN SY_ORG_DEPT_CUR;
             EXEC SQL FETCH SY_ORG_DEPT_CUR INTO :org_dept_desc;
             org_dept_desc.arr[org_dept_desc.len] = '\0'; 
             strcpy(old_orig_dept_code, incsum_orig_dept_code.arr); 
             strcpy(old_org_dept_desc, org_dept_desc.arr); 
        }
    }
    if (i > 1)
    {
        if(strcmp(old_acct_dept_code, incsum_acct_dept_code.arr)!=0)
        {
             acc_dept_desc.arr[0] = '\0'; acc_dept_desc.len = 0; 
             EXEC SQL OPEN SY_AC_DEPT_CUR;
             EXEC SQL FETCH SY_AC_DEPT_CUR INTO :acc_dept_desc;
             acc_dept_desc.arr[acc_dept_desc.len] = '\0'; 
             strcpy(old_acct_dept_code, incsum_acct_dept_code.arr);
             strcpy(old_acc_dept_desc, acc_dept_desc.arr); 
        }
    }
    if (i > 2)
    {
        if(strcmp(old_serv_pkg_code, incsum_serv_pkg_code.arr)!=0)
        {
             serv_pkg_desc.arr[0] = '\0'; serv_pkg_desc.len = 0; 
             if (nd_pkg_serv_flag.arr[0]=='S')
             {
                EXEC SQL OPEN BL_BLNG_SERV_CUR;
                EXEC SQL FETCH BL_BLNG_SERV_CUR INTO :serv_pkg_desc;
             }
             else
             {
                EXEC SQL OPEN BL_PACKAGE_HDR_CUR;
                EXEC SQL FETCH BL_PACKAGE_HDR_CUR INTO :serv_pkg_desc;
             }
             serv_pkg_desc.arr[serv_pkg_desc.len] = '\0'; 
             strcpy(old_serv_pkg_code, incsum_serv_pkg_code.arr);
             strcpy(old_serv_pkg_desc, serv_pkg_desc.arr); 
        }
    }
    if (i > 3)
    {
         if (strcmp(old_serv_date, incsum_serv_date.arr)!=0)
           strcpy(old_serv_date, incsum_serv_date.arr);
    }
    if ((i == 5) && (strcmp(old_episode_type, incsum_episode_type.arr)!=0))
           strcpy(old_episode_type, incsum_episode_type.arr);
  if (i==6) return;
  if (i > 1) print_head();
  if (i > 0) print_org_head();
}

int check_break()
{
   if(strcmp(old_episode_type, incsum_episode_type.arr)!=0)
          return 5;
   if(strcmp(old_serv_date, incsum_serv_date.arr)!=0)
          return 4;
   else if(strcmp(old_serv_pkg_code, incsum_serv_pkg_code.arr)!=0)
          return 3;
   else if(strcmp(old_acct_dept_code, incsum_acct_dept_code.arr)!=0)
          return 2;
   else if(strcmp(old_orig_dept_code, incsum_orig_dept_code.arr)!=0)
          return 1;
   return 0;
}

void print_org_head()
{
   if (lctr > MAXLINES - 1) print_head();
   
   fprintf(fp,"        %16s : %-6.6s  %-40.40s\n",loc_legend[370],
        old_orig_dept_code, old_org_dept_desc); 
   lctr++;
}
 
void print_detail()
{
   if (lctr > MAXLINES - 1) print_head();

   fprintf(fp,"%19s  %-6.6s  %-30.30s ", "", incsum_physician_id.arr,
                                             physician_name.arr);
      print_formated(incsum_base_charge);  fprintf(fp, "    ");
      print_formated(incsum_gross_charge); fprintf(fp, "    ");
      print_formated(incsum_disc_amt);     fprintf(fp, "    ");
      print_formated(incsum_net_charge);   fprintf(fp, "\n");

   fflush(fp);
   lctr ++;
}

void print_break_footer(char *brk,
                        double base_charge_tot,
                        double gross_charge_tot,
                        double disc_amt_tot,
                        double net_charge_tot)
{
     if (lctr > MAXLINES - 5) print_head();
     fprintf(fp, "%58s%s%s\n", "",
            "------------------------------------------------------",
            "--------------------");
     fprintf(fp, " %30s %-15.15s        ", "",loc_legend[380], brk);
     print_formated(base_charge_tot);  fprintf(fp,"    ");
     print_formated(gross_charge_tot); fprintf(fp,"    ");
     print_formated(disc_amt_tot);     fprintf(fp,"    ");
     print_formated(net_charge_tot);   fprintf(fp,"\n");
     fprintf(fp, "%58s%s%s\n\n", "",
            "------------------------------------------------------",
            "--------------------");

     lctr += 4;
}

/************************** General Purpose Functions *************************/
void sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
  {
      disp_message(ORA_MESG,"Error in connecting to Oracle");
      if (uid_pwd.len == 0)
         disp_message(ERR_MESG,"Null oracle uid/pwd");
      proc_exit();
  }
}

void print_formated(double loc_amount)
{
   char out_str[30],out_str1[30];

   if (loc_amount == 0)
      fprintf(fp,"%14s ","0.00");
   else if (loc_amount > 0)
   {
      sprintf(out_str,"%11.2f",loc_amount);
      ltrim(out_str);format_amt(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%11.2f",-loc_amount);
      ltrim(out_str);format_amt(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}

void ltrim(char *l_str)
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}

/* This function is now included in err_mesg 
void put_comma(str)
char *str;
{
  int i,l,m,a,b,c;
  float j,k;
  char arr[120],o_arr[120],l_str1[10];
  strcpy(arr,str);
  strncpy(l_str1,arr + (strlen(arr) - 2),2);
  l_str1[2] = '\0';
  arr[strlen(str)-3] = '\0';
  i = strlen(arr);
  j = i;
  k = j/3;
  l = k;
  m = i - (l*3);
  if (i > 3)
  {
      for (a=0;a<m;a++)
         o_arr[a] = arr[a];
   if (m)
   {
     o_arr[m] = ','; b=m+1;
   }
   else b = m;
  for (c=1,a=m;arr[a]!= '\0';a++,b++)
  {
     o_arr[b] = arr[a]; 
     c++;
     if (c > 3 && arr[a+1] != '\0')
     {
       o_arr[++b] = ','; c = 1;
     }
   }
   o_arr[b] = '\0';
  }
  else
      strcpy(o_arr,arr);
   sprintf(str,"%s.%s",o_arr,l_str1);
}
*/

void list_args(int arg_cnt, char **arg_list)
{
   int i;

   disp_message(ERR_MESG,"Not enough Parameters for running this program");
}

fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRINCAM.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRBLTRA.PC                                  */
/* AUTHOR                : ANIL.S.RAM                                   */
/* Converted To Windows  : Prasad B G S                4/7/96           */
/* DATE WRITTEN          : 05-APR-1994                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */ 
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>    
#include <string.h>   
#include <gl.h>       
#include <bl.h>                    

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])


/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [40],
            nd_session_id                              [16],
            nd_pgm_date                                [35],
            d_curr_pgm_name                            [15],
            nd_epi_type                                [2],
            nd_rep_ord                                 [2],
            nd_fm_serv_date                            [35],
            nd_to_serv_date                            [35],
            nd_fm_trx_date                             [35],
            nd_to_trx_date                             [35],
			d_facility_id							   [10],
			p_language_id							   [3],
	    nd_fm_episode_id                           [9],
	    nd_to_episode_id                           [9],
	    nd_fm_pat_id                               [21],
	    nd_to_pat_id                               [21],
           d_short_name_full                           [61],
            bl_patient_name_loc_lang                   [61],
            bl_patient_name                            [61],
			bl_patient_name1                           [31],
			l_pk_value									[100],
			l_translated_value							[201],
			nd_temp_date								[21],
			date_convert								[35],
			nd_loc_date									[35],
			nd_temp_date1								[35],
			date_convert1								[35],
			nd_loc_date1								[35],
			nd_facility_id								[3];

   VARCHAR bl_pat_episode_type                         [2],
           bl_pat_episode_id                           [9],
           bl_pat_visit_id                             [5],
           bl_pat_patient_id                           [21],
           bl_pat_trx_date                             [13],
           bl_pat_trx_doc_ref                          [21],
           bl_pat_trx_doc_ref_line_num                 [5],
           bl_pat_trx_doc_ref_seq_num                  [5],
           bl_pat_service_date                         [13],
           bl_pat_service_time                         [6],
           bl_pat_service_qty                          [11],
           bl_pat_upd_gross_charge_amt                 [100],
           bl_pat_upd_disc_amt                         [100],
           bl_pat_upd_net_charge_amt                   [1003],
           bl_pat_trx_status                           [2],
           bl_pat_rev_adj_ind                          [2],
           bl_pat_modified_by                          [21],
           bl_pat_modified_date                        [21],
           bl_pat_org_doc_ref                          [21],
           bl_pat_org_doc_ref_line_num                 [5],
           bl_pat_org_doc_ref_seq_num                  [5],
           bl_pat_canadj_reason_text                   [51],

           bl_pat_cur_date                             [13],
           bl_pat_new_date                             [13],
	   bl_pat_blng_serv_code                       [11],
	   d_blng_serv_desc                            [41];

 double    bl_pat_gross_charge_amt_db,
           bl_pat_disc_amt_db,
           bl_pat_net_charge_amt_db,

           bl_pat_tot_gross_charge_amt,
           bl_pat_tot_disc_amt,
           bl_pat_tot_net_charge_amt,

           bl_vis_tot_gross_charge_amt,
           bl_vis_tot_disc_amt,
           bl_vis_tot_net_charge_amt,

           bl_grn_tot_gross_charge_amt,
           bl_grn_tot_disc_amt,
           bl_grn_tot_net_charge_amt;

	int i;
	
	char g_facility_id[3];

    char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];


EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char       store_concat_visit                          [15],
           store_concat_pkg                            [10];

int    lctr = 0,pctr = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0, trn_ctr = 0, page_skip = 0;

    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRBLTRA");

    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ORA_MESG,"Error in connecting to Oracle\n");
        proc_exit();
    }

	set_meduser_role();
	
	strcpy(p_language_id.arr,l_language_id.arr);
   p_language_id.len = l_language_id.len;

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    strcpy(nd_facility_id.arr,argv[4]);
   	nd_facility_id.len = strlen(nd_facility_id.arr);
   	strcpy(g_facility_id,nd_facility_id.arr);


    start_prog_msg();

    fetch_prog_param();
	fetch_legend_value();
    declare_cur();
    fetch_hosp_name();
    open_file();
     
    open_cur();

    while(fetch_cur())
    {
       get_blng_serv_desc();
       if (rec_ctr == 0)
       {
          print_rec(0);
          if (nd_rep_ord.arr[0] == 'T')
          {
             strcpy(bl_pat_cur_date.arr,bl_pat_trx_date.arr);
             bl_pat_cur_date.len = strlen(bl_pat_cur_date.arr);
          }
          else
          {
             strcpy(bl_pat_cur_date.arr,bl_pat_service_date.arr);
             bl_pat_cur_date.len = strlen(bl_pat_cur_date.arr);
          }
       }
       if (nd_rep_ord.arr[0] == 'T')
       {
         if (strcmp(bl_pat_cur_date.arr,bl_pat_trx_date.arr))
         {
            print_date_tot();
            print_rec(0);

            strcpy(bl_pat_cur_date.arr,bl_pat_trx_date.arr);
            bl_pat_cur_date.len = strlen(bl_pat_cur_date.arr);
         }
       }
       else
       {
         if (strcmp(bl_pat_cur_date.arr,bl_pat_service_date.arr))
         {
            print_date_tot();
            print_rec(0);

            strcpy(bl_pat_cur_date.arr,bl_pat_service_date.arr);
            bl_pat_cur_date.len = strlen(bl_pat_cur_date.arr);
         }
       }

       rec_ctr++;
       print_rec(2);
     }
     if (rec_ctr)
     {
        print_grand_tot();
        while(lctr < 51)
        {
         fprintf(fp,"\n");
         lctr+=1;
        }
        print_footer();
     }

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

}

fetch_prog_param()
{
    nd_epi_type.arr[0]               = '\0';
    nd_rep_ord.arr[0]                = '\0';
    nd_fm_serv_date.arr[0]           = '\0';
    nd_to_serv_date.arr[0]           = '\0';
    nd_fm_trx_date.arr[0]            = '\0';
    nd_to_trx_date.arr[0]            = '\0';
    nd_fm_episode_id.arr[0]          = '\0';
    nd_to_episode_id.arr[0]          = '\0';
    nd_fm_pat_id.arr[0]              = '\0';
    nd_to_pat_id.arr[0]              = '\0';

    nd_epi_type.len                  = 0;
    nd_rep_ord.len                   = 0;
    nd_fm_serv_date.len              = 0;
    nd_to_serv_date.len              = 0;
    nd_fm_trx_date.len               = 0;
    nd_to_trx_date.len               = 0;
    nd_fm_episode_id.len             = 0;
    nd_to_episode_id.len             = 0;
    nd_fm_pat_id.len                 = 0;
    nd_to_pat_id.len                 = 0;

   EXEC SQL SELECT PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,
                   PARAM6, PARAM7, PARAM8, PARAM9, PARAM10,
				   operating_facility_id
              INTO :nd_epi_type,
                   :nd_rep_ord ,
                   :nd_fm_episode_id,
                   :nd_to_episode_id,
                   :nd_fm_pat_id,
                   :nd_to_pat_id,
                   :nd_fm_serv_date,
                   :nd_to_serv_date,
                   :nd_fm_trx_date,
                   :nd_to_trx_date ,
				   :d_facility_id
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

    nd_epi_type.arr[nd_epi_type.len]              = '\0';
    nd_rep_ord.arr[nd_rep_ord.len]                = '\0';
    nd_fm_serv_date.arr[nd_fm_serv_date.len]      = '\0';
    nd_to_serv_date.arr[nd_to_serv_date.len]      = '\0';
    nd_fm_trx_date.arr[nd_fm_trx_date.len]        = '\0';
    nd_to_trx_date.arr[nd_to_trx_date.len]        = '\0';
    nd_fm_episode_id.arr[nd_fm_episode_id.len]    = '\0';
    nd_to_episode_id.arr[nd_to_episode_id.len]    = '\0';
    nd_fm_pat_id.arr[nd_fm_pat_id.len]            = '\0';
    nd_to_pat_id.arr[nd_to_pat_id.len]            = '\0';

	d_facility_id.arr[d_facility_id.len]		  = '\0';
	strcpy(g_facility_id, d_facility_id.arr);

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

     EXEC SQL DECLARE BL_PAT_CHG_FOLIO_CUR CURSOR FOR
               SELECT EPISODE_TYPE,
                      LPAD(TO_CHAR(EPISODE_ID),8,'0'),
                      LPAD(TO_CHAR(VISIT_ID),4,'0'),
                      PATIENT_ID,
                      TRUNC(TRX_DATE),
                      TRUNC(SERVICE_DATE),
                      TO_CHAR(SERVICE_DATE,'HH24:MI'),
                      TRX_DOC_REF,
                      TRX_DOC_REF_LINE_NUM,
                      TRX_DOC_REF_SEQ_NUM,
                      TO_CHAR(NVL(SERV_QTY,0),'999,990.99'),
                      TO_CHAR(NVL(UPD_GROSS_CHARGE_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_DISC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_NET_CHARGE_AMT,0),'999,999,990.99'),
                      TRX_STATUS,
                      REV_ADJ_TRX_IND,
                      ORIG_DOC_REF,
                      ORIG_DOC_REF_LINE_NUM,
                      ORIG_DOC_REF_SEQ_NUM ,
                      CANADJ_REASON_TEXT,
                      MODIFIED_BY_ID,
                      TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH24:MI'),
                      NVL(UPD_GROSS_CHARGE_AMT,0),
                      NVL(UPD_DISC_AMT,0),
                      NVL(UPD_NET_CHARGE_AMT,0) ,
		      BLNG_SERV_CODE
                 FROM BL_PATIENT_CHARGES_FOLIO
                WHERE EPISODE_TYPE = NVL(:nd_epi_type,EPISODE_TYPE)
		  AND EPISODE_ID BETWEEN 
			NVL(:nd_fm_episode_id,'0') 
			 AND
		        NVL(:nd_to_episode_id,'99999999')
		  AND PATIENT_ID BETWEEN 
			NVL(:nd_fm_pat_id,'!!!!!!!!!!!!!!!!!!!!') AND
			NVL(:nd_to_pat_id,'~~~~~~~~~~~~~~~~~~~~')
                  AND TRUNC(SERVICE_DATE)
                       BETWEEN 
                        NVL(TO_DATE(:nd_fm_serv_date,'DD/MM/YYYY'),
                             to_date('00010101','YYYYDDMM'))
                         AND
                        NVL(TO_DATE(:nd_to_serv_date,'DD/MM/YYYY'),
                             to_date('47123112','YYYYDDMM'))
                  AND TRUNC(TRX_DATE) BETWEEN 
                        NVL(TO_DATE(:nd_fm_trx_date,'DD/MM/YYYY'),
                             to_date('00010101','YYYYDDMM')) AND
                        NVL(TO_DATE(:nd_to_trx_date,'DD/MM/YYYY'),
                             to_date('47123112','YYYYDDMM'))
                  AND TRX_FINALIZE_IND = 'Y'
                  AND (TRX_STATUS IS NOT NULL OR REV_ADJ_TRX_IND IS NOT NULL)
				  AND NVL(operating_facility_id,'N') = NVL(:d_facility_id,'N')
                ORDER BY DECODE(:nd_rep_ord,'T',TRUNC(TRX_DATE),
                                                TRUNC(SERVICE_DATE)),
                         EPISODE_ID,VISIT_ID,TRX_DOC_REF,
                         TRX_DOC_REF_LINE_NUM,TRX_DOC_REF_SEQ_NUM;

    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              SELECT SUBSTR(SHORT_NAME_LOC_LANG,1,16),
                   /*  substr(SHORT_NAME,1,30),
					 decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname1,
                     */

					  short_name
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_pat_patient_id;

    EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR
	      SELECT LONG_DESC
		FROM BL_BLNG_SERV
	       WHERE BLNG_SERV_CODE = :bl_pat_blng_serv_code;

}

get_blng_serv_desc()
{
    EXEC SQL OPEN BL_BLNG_SERV_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor BL_BLNG_SERV_CUR",0,"");

    d_blng_serv_desc.arr[0]  = '\0';
    d_blng_serv_desc.len     = 0;

    EXEC SQL FETCH BL_BLNG_SERV_CUR 
	      INTO :d_blng_serv_desc;

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_BLNG_SERV_CUR",0,"");

    d_blng_serv_desc.arr[d_blng_serv_desc.len]  = '\0';
}

open_cur()
{
    EXEC SQL OPEN BL_PAT_CHG_FOLIO_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");
}

fetch_cur()
{
bl_pat_episode_type.arr[0]                                        = '\0';
bl_pat_episode_id.arr[0]                                          = '\0';
bl_pat_visit_id.arr[0]                                            = '\0';
bl_pat_patient_id.arr[0]                                          = '\0';
bl_pat_trx_date.arr[0]                                            = '\0';
bl_pat_trx_doc_ref.arr[0]                                         = '\0';
bl_pat_trx_doc_ref_line_num.arr[0]                                = '\0';
bl_pat_trx_doc_ref_seq_num.arr[0]                                 = '\0';
bl_pat_service_date.arr[0]                                        = '\0';
bl_pat_service_time.arr[0]                                        = '\0';
bl_pat_service_qty.arr[0]                                         = '\0';
bl_pat_upd_gross_charge_amt.arr[0]                                = '\0';
bl_pat_upd_disc_amt.arr[0]                                        = '\0';
bl_pat_upd_net_charge_amt.arr[0]                                  = '\0';
bl_pat_org_doc_ref.arr[0]                                         = '\0';
bl_pat_org_doc_ref_line_num.arr[0]                                = '\0';
bl_pat_org_doc_ref_seq_num.arr[0]                                 = '\0';
bl_pat_trx_status.arr[0]                                          = '\0';
bl_pat_rev_adj_ind.arr[0]                                         = '\0';
bl_pat_canadj_reason_text.arr[0]                                  = '\0';
bl_pat_modified_by.arr[0]                                         = '\0';
bl_pat_modified_date.arr[0]                                       = '\0';
bl_pat_blng_serv_code.arr[0]                                      = '\0';

bl_pat_episode_type.len                                           = 0;
bl_pat_episode_id.len                                             = 0;
bl_pat_visit_id.len                                               = 0;
bl_pat_patient_id.len                                             = 0;
bl_pat_trx_date.len                                               = 0;
bl_pat_trx_doc_ref.len                                            = 0;
bl_pat_trx_doc_ref_line_num.len                                   = 0;
bl_pat_trx_doc_ref_seq_num.len                                    = 0;
bl_pat_service_date.len                                           = 0;
bl_pat_service_time.len                                           = 0;
bl_pat_service_qty.len                                            = 0;
bl_pat_upd_gross_charge_amt.len                                   = 0;
bl_pat_upd_disc_amt.len                                           = 0;
bl_pat_upd_net_charge_amt.len                                     = 0;
bl_pat_org_doc_ref.len                                            = 0;
bl_pat_org_doc_ref_line_num.len                                   = 0;
bl_pat_org_doc_ref_seq_num.len                                    = 0;
bl_pat_trx_status.len                                             = 0;
bl_pat_rev_adj_ind.len                                            = 0;
bl_pat_canadj_reason_text.len                                     = 0;
bl_pat_modified_by.len                                            = 0;
bl_pat_modified_date.len                                          = 0;
bl_pat_blng_serv_code.len                                         = 0;

bl_pat_gross_charge_amt_db                                        = 0;
bl_pat_disc_amt_db                                                = 0;
bl_pat_net_charge_amt_db                                          = 0;

     EXEC SQL FETCH BL_PAT_CHG_FOLIO_CUR
               INTO :bl_pat_episode_type,
                    :bl_pat_episode_id,
                    :bl_pat_visit_id,
                    :bl_pat_patient_id,
                    :bl_pat_trx_date,
                    :bl_pat_service_date,
                    :bl_pat_service_time,
                    :bl_pat_trx_doc_ref,
                    :bl_pat_trx_doc_ref_line_num,
                    :bl_pat_trx_doc_ref_seq_num,
                    :bl_pat_service_qty,
                    :bl_pat_upd_gross_charge_amt,
                    :bl_pat_upd_disc_amt,
                    :bl_pat_upd_net_charge_amt,
                    :bl_pat_trx_status,
                    :bl_pat_rev_adj_ind,
                    :bl_pat_org_doc_ref,
                    :bl_pat_org_doc_ref_line_num,
                    :bl_pat_org_doc_ref_seq_num,
                    :bl_pat_canadj_reason_text,
                    :bl_pat_modified_by,
                    :bl_pat_modified_date,
                    :bl_pat_gross_charge_amt_db,
                    :bl_pat_disc_amt_db,
                    :bl_pat_net_charge_amt_db,
                    :bl_pat_blng_serv_code;

      if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");

	bl_pat_episode_type.arr[bl_pat_episode_type.len]                         = '\0';
	bl_pat_episode_id.arr[bl_pat_episode_id.len]                             = '\0';
	bl_pat_visit_id.arr[bl_pat_visit_id.len]                                 = '\0';
	bl_pat_patient_id.arr[bl_pat_patient_id.len]                             = '\0';
	bl_pat_trx_date.arr[bl_pat_trx_date.len]                                 = '\0';
	bl_pat_trx_doc_ref.arr[bl_pat_trx_doc_ref.len]                           = '\0';
	bl_pat_trx_doc_ref_line_num.arr[bl_pat_trx_doc_ref_line_num.len]         = '\0';
	bl_pat_trx_doc_ref_seq_num.arr[bl_pat_trx_doc_ref_seq_num.len]           = '\0';
	bl_pat_service_date.arr[bl_pat_service_date.len]                         = '\0';
	bl_pat_service_time.arr[bl_pat_service_time.len]                         = '\0';
	bl_pat_service_qty.arr[bl_pat_service_qty.len]                           = '\0';
	bl_pat_upd_gross_charge_amt.arr[bl_pat_upd_gross_charge_amt.len]         = '\0';
	bl_pat_upd_disc_amt.arr[bl_pat_upd_disc_amt.len]                         = '\0';
	bl_pat_upd_net_charge_amt.arr[bl_pat_upd_net_charge_amt.len]             = '\0';
	bl_pat_org_doc_ref.arr[bl_pat_org_doc_ref.len]                           = '\0';
	bl_pat_org_doc_ref_line_num.arr[bl_pat_org_doc_ref_line_num.len]         = '\0';
	bl_pat_org_doc_ref_seq_num.arr[bl_pat_org_doc_ref_seq_num.len]           = '\0';
	bl_pat_trx_status.arr[bl_pat_trx_status.len]                             = '\0';
	bl_pat_rev_adj_ind.arr[bl_pat_rev_adj_ind.len]                           = '\0';
	bl_pat_canadj_reason_text.arr[bl_pat_canadj_reason_text.len]             = '\0';
	bl_pat_modified_by.arr[bl_pat_modified_by.len]                           = '\0';
	bl_pat_modified_date.arr[bl_pat_modified_date.len]                       = '\0';
	bl_pat_blng_serv_code.arr[bl_pat_blng_serv_code.len]                     = '\0';

    return(LAST_ROW?0:1);
}

fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_name1.arr[0]                    = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_name1.len                       = 0;

    EXEC SQL FETCH BL_PAT_NAME_CUR
              INTO :bl_patient_name_loc_lang,
                   /*:bl_patient_name,
				   :bl_patient_name1,*/
                    :d_short_name_full;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_name1.arr[bl_patient_name1.len] = '\0';
    d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name1    := :bl_patient_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_name1.arr[bl_patient_name1.len]  = '\0';


}


print_rec(ind)
int ind;
{
  if (ind == 0)
  {
      if (lctr+2 > 51)
      {
        print_footer();
        print_head();
      }

      if (nd_rep_ord.arr[0] == 'T')
		if(bl_pat_trx_date.arr[0]!='\0')
		{
		init_date_temp_var1();                              
	    strcpy(date_convert1.arr,bl_pat_trx_date.arr);            
	    fun_change_loc_date1();
        fprintf(fp,"%8.8s   : %-10.10s\n",loc_legend[210],date_convert1.arr);

		}
      else
	  if(bl_pat_service_date.arr[0]!='\0')
	  {
		init_date_temp_var1();                              
	    strcpy(date_convert1.arr,bl_pat_service_date.arr);            
	    fun_change_loc_date1();
        fprintf(fp,"%9.9s  : %-10.10s\n",loc_legend[460],date_convert1.arr);

	  }
	  
     fprintf(fp,"\n");
     lctr+=2;
   }
   else
   {

     if (lctr+4 > 51)
     {
        print_footer();
        print_head();
     }

     fetch_dtls();
     if (nd_rep_ord.arr[0] == 'S')
	 {
		init_date_temp_var1();                              
		strcpy(date_convert1.arr,bl_pat_trx_date.arr);            
		fun_change_loc_date1();	
        fprintf(fp,"  %-10s ",date_convert1.arr);
		}		
     else
	 {
		init_date_temp_var1();                              
		strcpy(date_convert1.arr,bl_pat_service_date.arr);            
		fun_change_loc_date1();
        fprintf(fp,"  %-10s ",date_convert1.arr);
     fprintf(fp,"%-5s ",bl_pat_service_time.arr);
	 }		 
/*     fprintf(fp,"%-20s/%-4s/%-4s %s/%-8s/%-4s %s %s %s %s %s   %s\n",
                bl_pat_trx_doc_ref.arr,
                bl_pat_trx_doc_ref_line_num.arr,
                bl_pat_trx_doc_ref_seq_num.arr,
                bl_pat_episode_type.arr,
                bl_pat_episode_id.arr,
                bl_pat_visit_id.arr,
                bl_pat_service_qty.arr,
                bl_pat_upd_gross_charge_amt.arr,
                bl_pat_upd_disc_amt.arr,
                bl_pat_upd_net_charge_amt.arr,
                bl_pat_trx_status.arr,
                bl_pat_rev_adj_ind.arr);*/

     fprintf(fp,"%-20s/%-4s/%-4s %s/%-8s/%-4s %s  ",
                bl_pat_trx_doc_ref.arr,
                bl_pat_trx_doc_ref_line_num.arr,
                bl_pat_trx_doc_ref_seq_num.arr,
                bl_pat_episode_type.arr,
                bl_pat_episode_id.arr,
                bl_pat_visit_id.arr,
                bl_pat_service_qty.arr);
	print_formated(bl_pat_gross_charge_amt_db);
	fprintf(fp," ");
	print_formated(bl_pat_disc_amt_db);
	fprintf(fp," ");
	print_formated(bl_pat_net_charge_amt_db);

	fprintf(fp," %s   %s\n",bl_pat_trx_status.arr,bl_pat_rev_adj_ind.arr);
	    init_date_temp_var();                              
		strcpy(date_convert.arr,bl_pat_modified_date.arr);            
		fun_change_loc_date();
     fprintf(fp,"  %-20s %-29.29s %-42.42s %-20s %-16s\n",
                bl_pat_patient_id.arr,
                bl_patient_name.arr,
                bl_pat_canadj_reason_text.arr,
                bl_pat_modified_by.arr,
                date_convert.arr);
	
if(strlen(bl_patient_name1.arr) > 2)
{
 fprintf(fp,"%24s %s \n"," ",bl_patient_name1.arr);
 lctr++;
}


     if (bl_pat_org_doc_ref.len) 
       fprintf(fp,"      %-20s/%-4s/%-4s  %-10s %-40s\n\n",
                bl_pat_org_doc_ref.arr,
                bl_pat_org_doc_ref_line_num.arr,
                bl_pat_org_doc_ref_seq_num.arr,
		bl_pat_blng_serv_code.arr,
		d_blng_serv_desc.arr);
     else
       fprintf(fp,"      %-20s/%-4s/%-4s  %-10s %-40s\n\n",
                " ", " ", " ",
		bl_pat_blng_serv_code.arr,
		d_blng_serv_desc.arr);
  
     lctr+=4;
    
     if (bl_pat_rev_adj_ind.len) 
     {
       bl_pat_tot_gross_charge_amt += bl_pat_gross_charge_amt_db;
       bl_pat_tot_disc_amt         += bl_pat_disc_amt_db;
       bl_pat_tot_net_charge_amt   += bl_pat_net_charge_amt_db;
     }
   }
   fflush(fp);
}

print_date_tot()
{
    if (lctr+4 > 51)
    {
       print_footer();
       print_head();
    }

    fprintf(fp,"%78s--------------- --------------- ---------------\n"," ");
    fprintf(fp,"%43s%16s                    "," ",loc_legend[450]);
    print_formated(bl_pat_tot_gross_charge_amt); fprintf(fp," ");
    print_formated(bl_pat_tot_disc_amt); fprintf(fp," ");
    print_formated(bl_pat_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%78s--------------- --------------- ---------------\n"," ");
    fprintf(fp,"\n");
    lctr +=4;

    bl_grn_tot_gross_charge_amt += bl_pat_tot_gross_charge_amt;
    bl_grn_tot_disc_amt         += bl_pat_tot_disc_amt;
    bl_grn_tot_net_charge_amt   += bl_pat_tot_net_charge_amt;

    bl_pat_tot_gross_charge_amt = 0;
    bl_pat_tot_disc_amt = 0;
    bl_pat_tot_net_charge_amt = 0;

}

print_grand_tot()
{
    print_date_tot();

    if (lctr+3 > 51)
    {
       print_footer();
       print_head();
    }

    fprintf(fp,"%78s--------------- --------------- ---------------\n"," ");
    fprintf(fp,"%43s%11s                         "," ",loc_legend[440]);
    print_formated(bl_grn_tot_gross_charge_amt); fprintf(fp," ");
    print_formated(bl_grn_tot_disc_amt); fprintf(fp," ");
    print_formated(bl_grn_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%78s--------------- --------------- ---------------\n"," ");
    lctr +=3;

}

end_of_rep()
{
fprintf(fp,"\n\n                                                      ***  %-13s***\n",loc_legend[530]);
fflush(fp);
}

open_file()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"blrbltra.lis");
    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrbltra.lis");
       proc_exit();
    }
    print_title();
    print_head();
}

print_title()
{
      init_date_temp_var();                            
	  strcpy(date_convert.arr,date_time.arr);           
	  fun_change_loc_date(); 
fprintf(fp,"\f%-3.3s : %2s                                         %-40.40s                                    %-16.16s\n",loc_legend[480],loc_legend[150],
hosp_name.arr,date_convert.arr);
fprintf(fp,"%-3.3s : %-10s \n",loc_legend[490],user_id.arr);
fprintf(fp,
"%-3.3s : %-8.8s                       %s                                   %4s : %4d\n",loc_legend[500],
loc_legend[40],loc_legend[50],loc_legend[30],++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        %-16.16s :\n        ----------------\n\n",loc_legend[470]);

	if(strcmp(nd_epi_type.arr,"I")==0)
	{
		fprintf(fp,"                  %12.12s         : %11s\n\n",loc_legend[80],loc_legend[90]);				
	}
	else if(strcmp(nd_epi_type.arr,"O")==0)
	{
		fprintf(fp,"                  %12.12s         : %12s\n\n",loc_legend[80],loc_legend[100]);
	}
	else if(strcmp(nd_epi_type.arr,"R")==0)
	{
		fprintf(fp,"                  %12.12s         : %8s\n\n",loc_legend[80],loc_legend[110]);
	}
        else if(strcmp(nd_epi_type.arr,"D")==0)
	{
		fprintf(fp,"                  %12.12s         : %8s\n\n",loc_legend[80],loc_legend[120]);
	}
        else if(strcmp(nd_epi_type.arr,"E")==0)
	{
		fprintf(fp,"                  %12.12s         : %9s\n\n",loc_legend[80],loc_legend[130]);
	}



	if(strcmp(nd_rep_ord.arr,"T")==0)
	{
		fprintf(fp,"                  %12.12s         : %16s\n\n",loc_legend[140],loc_legend[160]);
	}
	else if(strcmp(nd_rep_ord.arr,"S")==0)
	{
		fprintf(fp,"                  %12.12s         : %12s\n\n",loc_legend[140],loc_legend[170]);
	}

if(nd_fm_episode_id.arr[0] == '\0')
fprintf(fp,"                  %10s      %4s : %s\n",loc_legend[180],loc_legend[60],loc_legend[510]);
else
fprintf(fp,"                  %10s      %4s : %s\n",loc_legend[180],loc_legend[60],nd_fm_episode_id.arr);
if(nd_to_episode_id.arr[0] == '\0')
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],loc_legend[520]);
else
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],nd_to_episode_id.arr);
if(nd_fm_pat_id.arr[0] == '\0')
fprintf(fp,"                  %10s      %4s : %s\n",loc_legend[200],loc_legend[60],loc_legend[510]);
else
fprintf(fp,"                  %10s      %4s : %s\n",loc_legend[200],loc_legend[60],nd_fm_pat_id.arr);
if(nd_to_pat_id.arr[0] == '\0')
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],loc_legend[520]);
else
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],nd_to_pat_id.arr);

if(nd_fm_serv_date.arr[0] == '\0')
fprintf(fp,"                  %12s    %4s : %s\n",loc_legend[170],loc_legend[60],loc_legend[510]);
else
{
	 init_date_temp_var();                            
	 strcpy(date_convert1.arr,nd_fm_serv_date.arr);           
	 fun_change_loc_date1(); 
fprintf(fp,"                  %12s    %4s : %s\n",loc_legend[170],loc_legend[60],date_convert1.arr);
}

if(nd_to_serv_date.arr[0] == '\0')
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],loc_legend[520]);
else
{
	 init_date_temp_var();                            
	 strcpy(date_convert1.arr,nd_to_serv_date.arr);           
	 fun_change_loc_date1(); 
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],date_convert1.arr);
}

if(nd_fm_trx_date.arr[0] == '\0')
fprintf(fp,"                  %8s        %4s : %s\n",loc_legend[190],loc_legend[60],loc_legend[510]);
else
{
	 init_date_temp_var();                            
	 strcpy(date_convert1.arr,nd_fm_trx_date.arr);           
	 fun_change_loc_date1(); 
fprintf(fp,"                  %8s        %4s : %s\n",loc_legend[190],loc_legend[60],date_convert1.arr);
}

if(nd_to_trx_date.arr[0] == '\0')
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],loc_legend[520]);
else
{
	 init_date_temp_var();                            
	 strcpy(date_convert1.arr,nd_to_trx_date.arr);           
	 fun_change_loc_date1();
fprintf(fp,"                                  %2s   : %s\n\n",loc_legend[70],date_convert1.arr);
}

}


print_head()
{
      init_date_temp_var();                            
	  strcpy(date_convert.arr,date_time.arr);           
	  fun_change_loc_date(); 
fprintf(fp,
"\f%-3.3s : %2s                                         %-40.40s                                    %-16s\n",loc_legend[480],loc_legend[150],
hosp_name.arr,date_convert.arr);
fprintf(fp,"%-3.3s : %-10s \n",loc_legend[490],user_id.arr);
fprintf(fp,
"%-3.3s : %-8s                       %s                                   %4s : %4d\n",loc_legend[500],
loc_legend[40],loc_legend[50],loc_legend[30],++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
if (nd_rep_ord.arr[0] == 'S')
{
  fprintf(fp,
  "  %8.8s   %4.4s  %7.7s %8.8s               %15.15s    %8.8s           %5.5s            %4.4s             %11.11s\n",loc_legend[210],loc_legend[220],loc_legend[230],loc_legend[240],loc_legend[250],loc_legend[260],loc_legend[270],loc_legend[280],loc_legend[290]);
}
else
{
  fprintf(fp,
"  %14.14s   %7.7s %8.8s               %15.15s    %8.8s          %5.5s           %4.4s        %11.11s\n",loc_legend[300],loc_legend[230],loc_legend[240],loc_legend[250],loc_legend[260],loc_legend[270],loc_legend[280],loc_legend[290]);
}
fprintf(fp,
"  %-20.20s %18.18s        %30.30s                 %11.11s         %13.13s  \n",loc_legend[310],loc_legend[320],loc_legend[330],loc_legend[340],loc_legend[350]);
fprintf(fp,
"      %17.17s               %28.28s\n",loc_legend[360],loc_legend[370]);
/*
"      xxxxxxxxxxxxxxxxxxxx/xxxx/xxxx  xxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
*/
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 12;
}

print_footer()
{

fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"%24.24s    ; %14.14s)\n",loc_legend[380],loc_legend[390]);
fprintf(fp,"%27.27s ; %13.13s; %14s; ",loc_legend[400],loc_legend[410],loc_legend[420]);
fprintf(fp,"%27.27s\n",loc_legend[430]);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");

fflush(fp);

}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

	/*-- Y2K correction. Format introduced for year as YYYY instead of YY 
		 VSK 15/11/1999 */

    EXEC SQL SELECT ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, 
					:date_time, 
					:user_id
               FROM SY_ACC_ENTITY_lang_vw
			  WHERE acc_entity_id = :d_facility_id
			  AND	language_id=:p_language_id;

       if (OERROR) 
			err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

		hosp_name.arr[hosp_name.len]           = '\0';
		date_time.arr[date_time.len]           = '\0';
		user_id.arr[user_id.len]               = '\0';
}

/*print_formated(loc_amount)
double loc_amount;
{
   char out_str[300],out_str1[300];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}*/

print_formated(l_amt)
double l_amt;
{
	char  s_amt[50];

    if(l_amt < 0)
	{
        put_val(s_amt,-l_amt);
        format_amt(s_amt);
        strcat(s_amt,"-");  
		fprintf(fp,"%14s",s_amt);
    }
    else 
	{
        put_val(s_amt,l_amt);
        format_amt(s_amt);
        strcat(s_amt," ");
		fprintf(fp,"%14s",s_amt);
    }
}


fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRBLTRA.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
	  
	  :nd_loc_date :=sm_convert_datetime_2t(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id);

       	//get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date);  
      
	   //:nd_loc_date := to_char(t_date,'DD/MM/YYYY HH24:MI');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}


fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}


get_local_date1()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date1  date;
	
	BEGIN
	
	  
	  :nd_loc_date1 :=sm_convert_date_2t(to_date(:nd_temp_date1,'DD/MM/YYYY HH24:MI'),:p_language_id);
       	//get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date1,'DD/MON/RRRR HH24:MI'),:p_language_id,t_date1);  
      
	   //:nd_loc_date1 := to_char(t_date1,'DD/MM/RRRR');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

init_date_temp_var1()
{
nd_temp_date1.arr[0] = '\0';
nd_loc_date1.arr[0]  = '\0';
date_convert1.arr[0] = '\0';

nd_temp_date1.len = 0;
nd_loc_date1.len  = 0;
date_convert1.len = 0;
}
                     

fun_change_loc_date1()
{

strcpy(nd_temp_date1.arr,date_convert1.arr);
nd_temp_date1.len = strlen(nd_temp_date1.arr);


get_local_date1();

strcpy(date_convert1.arr,nd_loc_date1.arr); 

}
/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRRFBLS.PC                                    */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 13-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */ 
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
  
#include <stdio.h>  
#include <string.h>
#include "bl.h"       

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define INIT_MESG "Report Generation In Progress"
/*
#define DEBUG 0
*/

                   
EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [91],
			uid_pwd									   [91],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
            nd_from_date                               [12],
            nd_to_date                                 [12],
            nd_from_date_prn                           [12],
            nd_to_date_prn                             [12],
            nd_from_pat_no                             [21],
            nd_to_pat_no                               [21],
			nd_operating_facility_id				   [3];


   VARCHAR bl_hdr_patient_id                           [21],
		   bl_hdr_doc_type_code                        [7],
           bl_hdr_doc_num                              [9],
           bl_hdr_doc_date                             [13],
           bl_hdr_bill_tot_amt_prn                     [23],
           bl_hdr_bill_tot_outst_amt_pr				   [23],
           bl_hdr_bill_paid_amt_prn                    [23],
		   bl_hdr_gross_amt_prn                        [23],
		   bl_hdr_pmnt_recd_amt_prn                    [23],
		   bl_hdr_deposit_adj_amt_prn                  [23],
           bl_hdr_bill_status                          [2],

           bl_patient_name_loc_lang                    [61],
           d_short_name_full                           [61],
           bl_patient_name                             [61],
		   bl_patient_name1                            [61],
		   d_blng_grp_id                               [3],
           bl_status_desc                              [51];

    char   nd_zero_bal;

   long    tot_no_pat,
		   tot_no_ar,
		   tot_no_dcp;     

   double  bl_hdr_bill_tot_amt,
           bl_hdr_bill_tot_outst_amt,
           bl_hdr_bill_paid_amt,
		   bl_hdr_gross_amt,
		   bl_hdr_ar_amt,
		   bl_hdr_dcp_amt,
		   bl_hdr_serv_disc_amt,
		   bl_hdr_pmnt_recd_amt,
		   bl_hdr_deposit_adj_amt,
		   bl_hdr_tot_disc_amt,
		   bl_hdr_tot_refund_amt,

           bl_tot_bill_amt,
           bl_tot_paid_amt,
           bl_tot_outst_amt,
	       bl_tot_bus_man_disc_amt,
	   
		   d_aft_disch_prepay_boun_clr,
		   d_aft_disch_dep_boun_clr,
		   d_aft_disch_pmnt_boun_clr;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

int lctr = 0,pctr = 0;

FILE *fp;

int bill_ctr = 0;

double g_tot_gross_amt,
       g_tot_disc_amt,
       g_tot_dep_amt,
       g_tot_pmnt_amt,
       g_tot_rfnd_amt,
       g_tot_ar_amt,
       g_tot_dcp_amt,
       g_tot_outst_amt,
       g_tot_inh_pmnt_amt,
       g_tot_dis_pmnt_amt,
       g_tot_boun_clr_amt,
       tot_boun_clr_amt,
       outst_amt;

char   print_buf[100];
#define REP_WIDTH 160
char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1],
     hdr_line4[REP_WIDTH+1],
     hdr_line5[REP_WIDTH+1];

char rep_title[] = "REFERRAL BILL SUMMARY REPORT";
int rec_ctr, zero_bal;

char prv_patient_id[11];

void proc_main(argc,argv)
char *argv[];
int argc;
{

    int frst;

    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRRFBLS");

   
    strcpy(uid_pwd.arr,argv[1]);
    uid_pwd.len = strlen(uid_pwd.arr);

    EXEC SQL CONNECT :uid_pwd;

    if(OERROR) {
		disp_message(ORA_MESG,"Unable to connect to oracle.");
		proc_exit();
    }

   set_meduser_role();

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);
    
    start_prog_msg();

    fetch_prog_param();
    declare_cur();
    fetch_hosp_name();
    open_file();
     

    tot_no_pat       = 0;
    tot_no_ar        = 0;
    tot_no_dcp       = 0;
    bl_tot_bill_amt  = 0;
    bl_tot_paid_amt  = 0;
    bl_tot_outst_amt = 0;

    g_tot_gross_amt    = 0;
    g_tot_disc_amt     = 0;
    g_tot_dep_amt      = 0;
    g_tot_pmnt_amt     = 0;
    g_tot_inh_pmnt_amt = 0;
    g_tot_dis_pmnt_amt = 0;
    g_tot_boun_clr_amt = 0;
    g_tot_rfnd_amt     = 0;
    g_tot_ar_amt       = 0;
    g_tot_dcp_amt      = 0;
    g_tot_outst_amt    = 0;

    open_bill_hdr();

    prv_patient_id[0] = '\0';
    frst = 1;

    while(fetch_bill_hdr()) {

        outst_amt = bl_hdr_gross_amt -
		   (bl_hdr_tot_disc_amt+
		    bl_hdr_ar_amt+bl_hdr_dcp_amt +
		    bl_hdr_bill_paid_amt + tot_boun_clr_amt) +
                    bl_hdr_tot_refund_amt;

        if(equal(outst_amt,(double)0) && nd_zero_bal == 'N')
	    continue;


	chk_break(1);

	if(strcmp(prv_patient_id, bl_hdr_patient_id.arr)) {
            get_pat_name();
            get_blng_grp();
	    fprintf(fp,"%-20s %-30.30s %-2s %-6s/%-8s ",
		      bl_hdr_patient_id.arr,
		      bl_patient_name.arr,
		      d_blng_grp_id.arr,
		      bl_hdr_doc_type_code.arr,
		      bl_hdr_doc_num.arr);

	    strcpy(prv_patient_id, bl_hdr_patient_id.arr);
	}
	else
	    fprintf(fp,"%-10s %-30s %-2s %-6s/%-8s ",
		      "",
		      "",
		      "",
		      bl_hdr_doc_type_code.arr,
		      bl_hdr_doc_num.arr);

        print_formated(bl_hdr_gross_amt);
        print_formated(bl_hdr_tot_disc_amt);
        print_formated(bl_hdr_bill_paid_amt);
        print_formated(bl_hdr_ar_amt);
        print_formated(bl_hdr_dcp_amt);
        print_formated(outst_amt);
        fprintf(fp,"\n");

	if(strlen(bl_patient_name1.arr) > 2)
	{
	 fprintf(fp,"%20s %s \n"," ",bl_patient_name1.arr);
	lctr++;

	}

	lctr ++;

        g_tot_gross_amt      += bl_hdr_gross_amt;
        g_tot_disc_amt       += bl_hdr_tot_disc_amt;
        g_tot_dis_pmnt_amt   += bl_hdr_bill_paid_amt;
        g_tot_ar_amt         += bl_hdr_ar_amt;
        g_tot_dcp_amt        += bl_hdr_dcp_amt;
        g_tot_outst_amt      += outst_amt;

        tot_no_pat++;
    }

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

}

fetch_prog_param()
{
   nd_from_date.arr[0]     = '\0';
   nd_to_date.arr[0]       = '\0';
   nd_from_date_prn.arr[0] = '\0';
   nd_to_date_prn.arr[0]   = '\0';
   nd_from_pat_no.arr[0]   = '\0';
   nd_to_pat_no.arr[0]     = '\0';

   nd_from_date.len      = 0;
   nd_to_date.len        = 0;
   nd_from_date_prn.len  = 0;
   nd_to_date_prn.len    = 0;
   nd_from_pat_no.len    = 0;
   nd_to_pat_no.len      = 0;

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,
				   PARAM2,
                   PARAM1,
                   PARAM2,
                   PARAM3,
				   PARAM4,
				   PARAM5
              INTO :nd_operating_facility_id,
			       :nd_from_date,
                   :nd_to_date,
                   :nd_from_date_prn,
                   :nd_to_date_prn,
                   :nd_from_pat_no,
                   :nd_to_pat_no,
		   :nd_zero_bal
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   nd_from_date.arr[nd_from_date.len] = '\0';
   nd_to_date.arr[nd_to_date.len] = '\0';
   nd_from_date_prn.arr[nd_from_date_prn.len] = '\0';
   nd_to_date_prn.arr[nd_to_date_prn.len] = '\0';
   nd_from_pat_no.arr[nd_from_pat_no.len] = '\0';
   nd_to_pat_no.arr[nd_to_pat_no.len] = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

     EXEC SQL DECLARE BL_HDR_CUR CURSOR FOR
               SELECT PATIENT_ID,
		      DOC_TYPE_CODE,
                      DOC_NUM,
                      TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                      NVL(BILL_TOT_AMT,0),
                      NVL(BILL_TOT_OUTST_AMT,0),
                      NVL(BILL_PAID_AMT,0),
		      NVL(GROSS_AMT,0),
		      NVL(SERV_DISC_AMT,0),
		      (NVL(TOT_PAID_AMT,0)-NVL(BILL_PAID_AMT,0))+
		          NVL(PREPAY_ADJ_AMT,0),
		      NVL(DEPOSIT_ADJ_AMT,0),
		      NVL(TOT_REFUND_AMT,0),
                      BILL_STATUS,
                      DECODE(BILL_STATUS,
                             NULL,'Valid Bill',
                             'A','Interfaced to A/R',
                             'C','Cancelled Bill',
                             'D','Interfaced to Deferred Cash Patients',
                             'N','Interfaced to A/R as consolidated Invoice',
                             'S','Superseded Bill')
                 FROM BL_BILL_HDR
                WHERE EPISODE_TYPE = 'R'
                  AND PATIENT_ID BETWEEN
		       NVL(:nd_from_pat_no,'!!!!!!!!!!!!!!!!!!!!') AND
		       NVL(:nd_to_pat_no,'~~~~~~~~~~~~~~~~~~~~')
		  AND TRUNC(DOC_DATE) BETWEEN
		      TO_DATE(:nd_from_date,'DD/MM/YYYY') AND
	              TO_DATE(:nd_to_date,'DD/MM/YYYY')
                  AND BILL_TRX_TYPE_CODE = 'R'
		  AND NVL(BILL_STATUS,'X') NOT IN ('C','S')
             ORDER BY PATIENT_ID,
		      DOC_TYPE_CODE,
		      DOC_NUM;

    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              SELECT SUBSTR(SHORT_NAME,1,30) PAT_NAME,
			         decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname2 ,
                             short_name
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_hdr_patient_id;
}

open_bill_hdr()
{
    EXEC SQL OPEN BL_HDR_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_HDR_CUR",0,"");
}

fetch_bill_hdr()
{

double l_outst_amt; 

l_outst_amt = 0;
tot_boun_clr_amt = 0;

bl_hdr_patient_id.arr[0]                        = '\0';
bl_hdr_doc_type_code.arr[0]                     = '\0';
bl_hdr_doc_num.arr[0]                           = '\0';
bl_hdr_doc_date.arr[0]                          = '\0';
bl_hdr_bill_tot_amt_prn.arr[0]                  = '\0';
bl_hdr_bill_tot_outst_amt_pr.arr[0]            = '\0';
bl_hdr_bill_paid_amt_prn.arr[0]                 = '\0';
bl_hdr_bill_status.arr[0]                       = '\0';
bl_status_desc.arr[0]                           = '\0';
bl_hdr_gross_amt_prn.arr[0]                     = '\0';
bl_hdr_pmnt_recd_amt_prn.arr[0]                 = '\0';
bl_hdr_deposit_adj_amt_prn.arr[0]               = '\0';

bl_hdr_patient_id.len                           = 0;
bl_hdr_doc_type_code.len                        = 0;
bl_hdr_doc_num.len                              = 0;
bl_hdr_doc_date.len                             = 0;
bl_hdr_bill_tot_amt_prn.len                     = 0;
bl_hdr_bill_tot_outst_amt_pr.len               = 0;
bl_hdr_bill_paid_amt_prn.len                    = 0;
bl_hdr_bill_status.len                          = 0;
bl_status_desc.len                              = 0;
bl_hdr_gross_amt_prn.len                        = 0;
bl_hdr_pmnt_recd_amt_prn.len                    = 0;
bl_hdr_deposit_adj_amt_prn.len                  = 0;

bl_hdr_bill_tot_amt                             = 0;
bl_hdr_bill_tot_outst_amt                       = 0;
bl_hdr_bill_paid_amt                            = 0;
bl_hdr_gross_amt                                = 0;
bl_hdr_ar_amt                                   = 0;
bl_hdr_dcp_amt                                  = 0;
bl_hdr_serv_disc_amt                            = 0;
bl_hdr_pmnt_recd_amt                            = 0;
bl_hdr_deposit_adj_amt                          = 0;
bl_hdr_tot_refund_amt                           = 0;


     EXEC SQL FETCH BL_HDR_CUR
               INTO :bl_hdr_patient_id,
		    :bl_hdr_doc_type_code,
                    :bl_hdr_doc_num,
                    :bl_hdr_doc_date,
                    :bl_hdr_bill_tot_amt,
                    :bl_hdr_bill_tot_outst_amt,
                    :bl_hdr_bill_paid_amt,
                    :bl_hdr_gross_amt,
		    :bl_hdr_serv_disc_amt,
                    :bl_hdr_pmnt_recd_amt,
                    :bl_hdr_deposit_adj_amt,
		    :bl_hdr_tot_refund_amt,
                    :bl_hdr_bill_status,
                    :bl_status_desc;

bl_hdr_patient_id.arr[bl_hdr_patient_id.len]           = '\0';
bl_hdr_doc_type_code.arr[bl_hdr_doc_type_code.len]     = '\0';
bl_hdr_doc_num.arr[bl_hdr_doc_num.len]                 = '\0';
bl_hdr_doc_date.arr[bl_hdr_doc_date.len]               = '\0';
bl_hdr_bill_status.arr[bl_hdr_bill_status.len]         = '\0';
bl_status_desc.arr[bl_status_desc.len]                 = '\0';

bl_hdr_tot_disc_amt = bl_hdr_serv_disc_amt + bl_tot_bus_man_disc_amt;

tot_boun_clr_amt = d_aft_disch_dep_boun_clr + d_aft_disch_prepay_boun_clr + 
		   d_aft_disch_pmnt_boun_clr;

l_outst_amt = bl_hdr_gross_amt - (bl_hdr_tot_disc_amt+bl_hdr_deposit_adj_amt+
				bl_hdr_pmnt_recd_amt + bl_hdr_bill_paid_amt +
				tot_boun_clr_amt) + 
				bl_hdr_tot_refund_amt;

if(bl_hdr_bill_status.arr[0] == 'A' || bl_hdr_bill_status.arr[0] == 'N'){
        bl_hdr_ar_amt = l_outst_amt;
	if(nd_zero_bal == 'Y')
            tot_no_ar++;
	l_outst_amt = 0;
}
else if(bl_hdr_bill_status.arr[0] == 'D'){
        bl_hdr_dcp_amt = l_outst_amt;
	if(nd_zero_bal == 'Y')
            tot_no_dcp++;
	l_outst_amt = 0;
}

    return(LAST_ROW?0:1);
}

get_pat_name()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name.arr[0]  = '\0';
   bl_patient_name1.arr[0]  = '\0';
   bl_patient_name.len     = 0;
   bl_patient_name1.len     = 0;

    EXEC SQL FETCH BL_PAT_NAME_CUR
              INTO :bl_patient_name,
			       :bl_patient_name1,
                   :d_short_name_full;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_name1.arr[bl_patient_name1.len] = '\0';
    d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
   EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name1    := :bl_patient_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_name1.arr[bl_patient_name1.len]  = '\0';

}

get_blng_grp()
{

    EXEC SQL SELECT BLNG_GRP_ID
	       INTO :d_blng_grp_id
	       FROM BL_PATIENT_FIN_DTLS
	      WHERE PATIENT_ID = :bl_hdr_patient_id;

    if(OERROR)
	err_mesg("SELECT failed on table BL_PATIENT_FIN_DTLS",0,"");

    d_blng_grp_id.arr[d_blng_grp_id.len]  = '\0';
}

end_of_rep()
{
    chk_break(5);
    fprintf(fp,"                                                                       -----------------------------------------------------------------------------------------\n");

    fprintf(fp,"                                                                       ");
    print_formated(g_tot_gross_amt);
    print_formated(g_tot_disc_amt);
    print_formated(g_tot_dis_pmnt_amt);
    print_formated(g_tot_ar_amt);
    print_formated(g_tot_dcp_amt);
    print_formated(g_tot_outst_amt);

    fprintf(fp,"\n");
    fprintf(fp,"                                                                       =========================================================================================\n");
    fprintf(fp,"TOTAL NO OF BILLS : %ld\n", tot_no_pat);

fprintf(fp,"\n\n                                                      ***  END OF REPORT ***\n");
fflush(fp);
}

open_file()
{
char filename[30];
	strcpy(filename,WORKING_DIR);
    strcat(filename,"blrrfbls.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrrfbls.lis");
       proc_exit();
    }
    print_title();
    print_head();
}

print_title()
{
form_hdr();
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
fprintf(fp,"                       BILL DATE  FROM : %s\n",nd_from_date_prn.arr);
fprintf(fp,"                                   TO  : %s\n\n",nd_to_date_prn.arr);
fprintf(fp,"                    PATIENT NO    FROM : %s\n",nd_from_pat_no.arr);
fprintf(fp,"                                   TO  : %s\n\n",nd_to_pat_no.arr);
fprintf(fp,"         INCLUDE ZERO BALANCE PATIENTS : %c\n\n",nd_zero_bal);

}

print_head()
{

    form_hdr();

    fprintf(fp,"PATIENT                                                BILL                      BILL                       PAYMENT       TRANSFER       TRANSFER    OUTSTANDING\n");
    fprintf(fp,"NUMBER     PATIENT NAME                                NUMBER                  AMOUNT       DISCOUNT       RECEIVED         TO A/R         TO DCP         AMOUNT\n");


/*
PATIENT                                      BILL                      BILL                       PAYMENT       TRANSFER       TRANSFER    OUTSTANDING
NUMBER     PATIENT NAME                      NUMBER                  AMOUNT       DISCOUNT       RECEIVED         TO A/R         TO DCP         AMOUNT
xxxxxxxxxx xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx xx xxxxxx/99999999 999,999,999.99 999,999,999.99 999,999,999.99 999,999,999.99 999,999,999.99 999,999,999.99
*/
fprintf(fp,"%s\n",hdr_line5);

fflush(fp);
lctr = 10;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    EXEC SQL SELECT acc_entity_name, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY
			   WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[16], str_amt[16];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
        //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
          //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }
}

/*
print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
      //ltrim(out_str);
	  str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
      //ltrim(out_str);
	  str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}
*/
form_hdr()
{

    static int first = 1;
    char buf[15];
    char head[200];
    int col;  

    if(first) {
        memset(hdr_line1,' ',REP_WIDTH+1);
        memset(hdr_line2,' ',REP_WIDTH+1);
        memset(hdr_line4,' ',REP_WIDTH+1);
	memset(hdr_line5,'-',REP_WIDTH);
	hdr_line5[REP_WIDTH] = '\0';

        strncpy(hdr_line1,"MDL : BL",8);
        col = (int)(REP_WIDTH-strlen(hosp_name.arr))/2;
        strncpy(hdr_line1+col,hosp_name.arr,strlen(hosp_name.arr));
        col = (REP_WIDTH-strlen(date_time.arr));
        strcpy(hdr_line1+col,date_time.arr);
    
        strncpy(hdr_line2,"OPR :",5);
        strcpy(hdr_line2+6,user_id.arr);

        sprintf(head,"BILL DATE %s TO %s         PATIENT NO %10s TO %10s",
                 nd_from_date_prn.arr,nd_to_date_prn.arr,
                 nd_from_pat_no.arr,nd_to_pat_no.arr);
        col = (REP_WIDTH-strlen(head))/2;
        strcpy(hdr_line4+col,head);
    }

    memset(hdr_line3,' ',REP_WIDTH+1);

    strncpy(hdr_line3,"REP : BLRRFBLS",14);
    col = (int)(REP_WIDTH-strlen(rep_title))/2;
    strncpy(hdr_line3+col,rep_title,strlen(rep_title));
    sprintf(buf,"PAGE : %4d",++pctr);
    strcpy(hdr_line3+(REP_WIDTH-strlen(buf)),buf);

    if(first)
        fprintf(fp,"%s\n",hdr_line1);
    else
        fprintf(fp,"\f%s\n",hdr_line1);
    fprintf(fp,"%s\n",hdr_line2);
    fprintf(fp,"%s\n",hdr_line3);
    fprintf(fp,"%s\n",hdr_line4);
    fprintf(fp,"%s\n",hdr_line5);

    first = 0;
}
  
chk_break(nol)
int nol;
{
    if(lctr+nol >= 55) {
        lctr = 1;
	print_head();
    }
}

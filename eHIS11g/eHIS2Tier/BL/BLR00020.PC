/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR00020.PC                                  */
/* AUTHOR                : Jagwinder Kaur                               */  
/* DATE WRITTEN          : 09/06/2004                                   */      
/************************************************************************/
   
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR     hosp_name                       [120],
			l_acc_name						[120],
			date							[20],
			date1							[20],
			date2							[20],
			nd_date							[20],
			nd_upto_date					[20],
			nd_upto_date1					[20],
            date_time                       [20],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
			nd_facility				        [3],
			bl_reason_code					[5],
			bl_reason_desc					[256],
			bl_reason_desc1					[1000],
			bl_reason_desc2					[100],
			bl_reason_desc3					[100],
			bl_reason_desc4					[100],
			bl_reason_desc5					[100],
			l_translated_value				[100],
			l_cash_book_acc_desc			[16],
			l_pk_value						[100],
			nd_mon_year						[8],
			nd_mon_year1					[8],
			base_curr						[7],
			nd_temp_date					[20],
			nd_loc_date						[20],
			language_id						[3],
			p_language_id					[3];
			
double      bl_doc_amt,tot_doc_amt;
			
int i,no_bill,tot_no_bill,txt_prt=1,des_cnt=1;
int mon_cnt = 0,
	yr_cnt=0,
	last_yr_cnt=0,
	null_place;

char nd_trn_type;
char filename[150];
char x_msg[200],string_var[1000];
char loc_legend[999][201];
char l_mesg[200];
char fm_date[11],to_date[11];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;
int    first = 1;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLR00020");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
  
	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 

		strcpy(p_language_id.arr,l_language_id.arr);
		p_language_id.len = l_language_id.len;

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

		nd_mon_year.arr[0]		= '\0';
		nd_mon_year.len			= 0;
		nd_upto_date.arr[0]		= '\0';
        nd_upto_date.len			= 0;

 	
        EXEC SQL SELECT	PARAM1,to_char(last_day(to_date(PARAM1,'MM/YYYY')),'DD/MM/YYYY')
				INTO	:nd_mon_year,:nd_upto_date
				FROM SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;



   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

		nd_mon_year.arr[nd_mon_year.len]				= '\0';
        nd_upto_date.arr[nd_upto_date.len]		= '\0';
		 

	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   

    	declare_cur();

		get_language_id();

    	fetch_hosp_name();

		fetch_legend_value();

    	open_file();		

		

		open_cursor();
		print_head();
        
	    print_hdr();

	    end_of_rep();
		close_cur();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

declare_cur()
{
	EXEC SQL DECLARE EXEMP_MON_CUR CURSOR FOR 
	select	reason_code,
			count(*),
			sum(a.doc_amt)
	from bl_bill_adj_dtl a,bl_bill_adj_hdr b
	where a.operating_facility_id=:nd_facility
	and a.doc_type_code=b.doc_type_code
	and a.doc_num=b.doc_num
	and a.adjust_exempt_ind = 'E'
	and to_char(a.doc_date,'MM/YYYY') = :nd_mon_year
	and (a.doc_type_code,a.doc_num,a.doc_slno) not in(select doc_type_code,doc_num,doc_slno
				from bl_bill_adj_dtl_canc 
				where operating_facility_id=:nd_facility
				and to_char(cancelled_date,'MM/YYYY') = :nd_mon_year)
	group by reason_code
	order by reason_code;

	EXEC SQL DECLARE EXEMP_YR_CUR CURSOR FOR 
	select	reason_code,
			count(*),
			sum(a.doc_amt)
	from bl_bill_adj_dtl a,bl_bill_adj_hdr b
	where a.operating_facility_id=:nd_facility
	and a.doc_type_code=b.doc_type_code
	and a.doc_num=b.doc_num
	and a.adjust_exempt_ind = 'E'
	and to_char(a.doc_date,'YYYY') = substr(:nd_mon_year,4,4)
	and a.doc_date <= LAST_DAY(TO_DATE( :nd_mon_year ||' 23:59:59','MM/YYYY HH24:MI:SS'))
	and (a.doc_type_code,a.doc_num,a.doc_slno) not in(select doc_type_code,doc_num,doc_slno
				from bl_bill_adj_dtl_canc 
				where operating_facility_id=:nd_facility
				and to_char(cancelled_date,'YYYY') = substr(:nd_mon_year,4,4)
				AND cancelled_date<=LAST_DAY(TO_DATE(:nd_mon_year||' 23:59:59','MM/YYYY HH24:MI:SS')))

	group by reason_code
	order by reason_code;


	EXEC SQL DECLARE EXEMP_LAST_YR_CUR CURSOR FOR 
	select	reason_code,
			count(*),
			sum(a.doc_amt)
	from bl_bill_adj_dtl a,bl_bill_adj_hdr b
	where a.operating_facility_id=:nd_facility
	and a.doc_type_code=b.doc_type_code
	and a.doc_num=b.doc_num
	and a.adjust_exempt_ind = 'E'
	and to_char(a.doc_date,'YYYY') = substr(:nd_mon_year,4,4) - 1
	//and to_number(to_char(a.doc_date,'MM')) <= to_number(substr(:nd_mon_year,1,2))
	and (a.doc_type_code,a.doc_num,a.doc_slno) not in(select doc_type_code,doc_num,doc_slno
				from bl_bill_adj_dtl_canc 
				where operating_facility_id=:nd_facility
				and to_char(cancelled_date,'YYYY') = substr(:nd_mon_year,4,4)-1)
	group by reason_code
	order by reason_code;


}


open_cursor() 
{

	EXEC SQL OPEN EXEMP_MON_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor EXEMP_MON_CUR",0,"");

	EXEC SQL OPEN EXEMP_YR_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor EXEMP_YR_CUR",0,"");

	EXEC SQL OPEN EXEMP_LAST_YR_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor EXEMP_LAST_YR_CUR",0,"");
}

close_cur() 
{

	EXEC SQL CLOSE EXEMP_MON_CUR;
	EXEC SQL CLOSE EXEMP_YR_CUR;
	EXEC SQL CLOSE EXEMP_LAST_YR_CUR;
    
}

get_language_id()
{
	language_id.arr[0] = '\0';
	language_id.len = 0;
	
	EXEC SQL SELECT LANGUAGE_ID INTO :language_id FROM SM_APPL_USER where APPL_USER_ID = :user_id;

	if (OERROR)
        err_mesg("SELECTING LANGUAGE_ID failed",0,"");
}


fetch_mon_cur()
{

bl_reason_code.arr[0]		= '\0';
bl_reason_code.len			= 0;

bl_doc_amt           = 0;

      EXEC SQL FETCH EXEMP_MON_CUR
               INTO :bl_reason_code,
					:no_bill,
					:bl_doc_amt;
					
       if (OERROR)
            err_mesg("FETCH failed on cursor EXEMP_MON_CUR",0,"");

bl_reason_code.arr[bl_reason_code.len]		= '\0';

    return(LAST_ROW?0:1);
}

fetch_yr_cur()
{

bl_reason_code.arr[0]		= '\0';
bl_reason_code.len			= 0;

bl_doc_amt           = 0;

      EXEC SQL FETCH EXEMP_YR_CUR
               INTO :bl_reason_code,
					:no_bill,
					:bl_doc_amt;
					
       if (OERROR)
            err_mesg("FETCH failed on cursor EXEMP_YR_CUR",0,"");

bl_reason_code.arr[bl_reason_code.len]		= '\0';

    return(LAST_ROW?0:1);
}

fetch_last_yr_cur()
{

bl_reason_code.arr[0]		= '\0';
bl_reason_code.len			= 0;

bl_doc_amt           = 0;

      EXEC SQL FETCH EXEMP_LAST_YR_CUR
               INTO :bl_reason_code,
					:no_bill,
					:bl_doc_amt;
					
       if (OERROR)
            err_mesg("FETCH failed on cursor EXEMP_LAST_YR_CUR",0,"");

bl_reason_code.arr[bl_reason_code.len]		= '\0';

    return(LAST_ROW?0:1);
}


print_hdr()
{
  //fprintf(fp,"(This Month)   ");	
    fprintf(fp,"%-25.25s",loc_legend[15]);
  
  while(fetch_mon_cur())
  {
    mon_cnt=1;
    fetch_reason_desc();
	fprintf(fp," %-4s-%-58s %6d            ",bl_reason_code.arr,bl_reason_desc1.arr,no_bill);		
	print_formated(bl_doc_amt);
	fprintf(fp,"\n");
    lctr=lctr+1;

	if(bl_reason_desc2.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc2.arr);		
	lctr=lctr+1;
	}
	
	if(bl_reason_desc3.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc3.arr);		
	lctr=lctr+1;
	}
	
	if(bl_reason_desc4.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc4.arr);		
	lctr=lctr+1;
	}
	
	if(bl_reason_desc5.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc5.arr);		
	lctr=lctr+1;
	}
	
	check_page_end(1,0);
	fprintf(fp,"                         ");
    tot_doc_amt = tot_doc_amt + bl_doc_amt;	 
	tot_no_bill = tot_no_bill + no_bill;
   }
  
  print_total();
  check_page_end(2,0); 
  fprintf(fp,"\n\n");
  lctr=lctr+2;
  check_page_end(1,0);
//fprintf(fp,"(This Year)    ");	
  fprintf(fp,"%-25.25s",loc_legend[16]);
  

  while(fetch_yr_cur())
  {
    yr_cnt = 1;
	fetch_reason_desc();
	
	if(des_cnt<3)
	{
	   fprintf(fp," %-4s-%-58s %6d            ",bl_reason_code.arr,bl_reason_desc1.arr,no_bill);
	   des_cnt=des_cnt+1;
	}
	else
	{
	   fprintf(fp," %-24s %-4s-%-58s %6d            "," ",bl_reason_code.arr,bl_reason_desc1.arr,no_bill);
	}		
	print_formated(bl_doc_amt);
	fprintf(fp,"\n");
    lctr=lctr+1;
	check_page_end(1,0);	

	if (txt_prt)
	{
	  fprintf(fp,"%-12.12s",loc_legend[18]);
      txt_prt=0;

	  if(nd_upto_date.arr[0]!='\0')
	  {
      get_initialize();
	  strcpy(nd_temp_date.arr,nd_upto_date.arr);
	  get_local_date_convn1();
	  strcpy(nd_upto_date.arr,nd_loc_date.arr);
	  fprintf(fp," %-12.12s",nd_upto_date.arr);
	  }
        

    if(bl_reason_desc2.arr[0] != '\0')
 	 {
	  fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc2.arr);		
	  lctr=lctr+1;
	 }

	}

	else
	 {
	
	if(bl_reason_desc2.arr[0] != '\0')
	{
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc2.arr);		
	lctr=lctr+1;
	}
	}
	

	if(bl_reason_desc3.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc3.arr);		
	lctr=lctr+1;
	}
	

	if(bl_reason_desc4.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc4.arr);		
	lctr=lctr+1;
	}
	
	if(bl_reason_desc5.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc5.arr);		
	lctr=lctr+1;
	}
	
	check_page_end(1,0);

	if(bl_reason_desc2.arr[0] !=0 || bl_reason_desc3.arr[0] !=0 || bl_reason_desc4.arr[0] != '\0' || bl_reason_desc5.arr[0] !=0  )
	 fprintf(fp,"                         ");
				
        tot_doc_amt = tot_doc_amt + bl_doc_amt;
	tot_no_bill = tot_no_bill + no_bill;	 
   }


  
  print_total();
  check_page_end(2,0);
  fprintf(fp,"\n\n");
  check_page_end(1,0);
  lctr=lctr+2;

 //fprintf(fp,"(Last Year)    ");	
fprintf(fp,"%-25.25s",loc_legend[17]);
  
  while(fetch_last_yr_cur())
	{
	last_yr_cnt = 1;
    fetch_reason_desc();
    fprintf(fp," %-4s-%-58s %6d            ",bl_reason_code.arr,bl_reason_desc1.arr,no_bill);
	print_formated(bl_doc_amt);
	fprintf(fp,"\n");
    lctr=lctr+1;
  
	if(bl_reason_desc2.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc2.arr);		
	lctr=lctr+1;
	}
	
	if(bl_reason_desc3.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc3.arr);		
	lctr=lctr+1;
	}
	
	if(bl_reason_desc4.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc4.arr);		
	lctr=lctr+1;
	}
	
	if(bl_reason_desc5.arr[0] != '\0')
	{
	check_page_end(1,0);
	fprintf(fp,"                         ");
	fprintf(fp," %-4s %-58s\n"," ",bl_reason_desc5.arr);		
	lctr=lctr+1;
	}
	
	check_page_end(1,0);
	fprintf(fp,"                         ");
	tot_doc_amt = tot_doc_amt + bl_doc_amt;
	tot_no_bill = tot_no_bill + no_bill;	 
   }

  
  print_total();
  check_page_end(6,0);
  fprintf(fp," \n\n%-63s %-15s \n\n"," ",loc_legend[11]);
  fprintf(fp," %-62s %-15s :\n"," ",loc_legend[12]);
  fprintf(fp," %-62s %-15s :\n"," ",loc_legend[13]);
  fprintf(fp," %-62s %-15s :\n"," ",loc_legend[14]);   
}   

print_total()
{
    
    check_page_end(4,0);
	fprintf(fp,"\n%-89s %-23s\n"," ","------    -----------------------");
	fprintf(fp,"%-75s %-11s : %6d            "," ",loc_legend[10],tot_no_bill); 
	print_formated(tot_doc_amt);
	fprintf(fp,"\n");
	fprintf(fp,"%-89s %-23s\n"," ",  "------    -----------------------");
	tot_doc_amt = 0;
	tot_no_bill = 0;
	
}   


end_of_rep()
{
	check_page_end(3,0);
	
	fprintf(fp,"\n\n %75s \n\f",loc_legend[22]); 
	fflush(fp);
}

open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00020.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00020.lis");
       proc_exit();
    }
}


print_head()
{
	print_page_title();
	fprintf(fp,"---------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp,"%-25.25s %-54s %15.15s %26s\n",loc_legend[7],loc_legend[6],loc_legend[8],loc_legend[9]);
	fprintf(fp,"%-25.25s %-57.57s %-15.15s %23.23s \n"," "," "," ",base_curr.arr);
	fprintf(fp,"---------------------------------------------------------------------------------------------------------------------------\n");
	fflush(fp); 
	lctr = 8;
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;


	l_report_width=115;
	l_acc_entity_length = strlen(hosp_name.arr);

	//Code for Line 1
	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
   	fprintf(fp,"%-13s : BL",loc_legend[19]);
	l_start_point=l_start_point-18;
	print_spaces(l_start_point);
	fprintf(fp,"%s",hosp_name.arr);
	l_comp_name_end_point=l_start_point+18+l_acc_entity_length;
	l_start_point=(l_report_width-(15+strlen(date.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
    
	get_initialize();
	strcpy(nd_temp_date.arr,date.arr);
	get_local_date_convn1();
	strcpy(date1.arr,nd_loc_date.arr);
	fprintf(fp,"%-15.15s : %s\n",loc_legend[3],date1.arr);

	//Code for Line 2
	
	l_start_point=0;

	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[1]))/2)-(7/2));

    fprintf(fp,"%-13s : %s",loc_legend[20],user_id.arr);
	l_start_point=l_start_point-(strlen(user_id.arr)+16);
	print_spaces(l_start_point);
	
	get_initialize();
	strcpy(nd_temp_date.arr,nd_mon_year.arr);
	get_local_date_convn2();
	strcpy(nd_mon_year1.arr,nd_loc_date.arr);

	fprintf(fp,"%s %s",loc_legend[1],nd_mon_year1.arr);
	
	l_comp_name_end_point=l_start_point+(strlen(user_id.arr)+16)+strlen(loc_legend[1]);
	
	l_start_point=(l_report_width-(18+strlen(date_time.arr)+7)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp,"%-15.15s : %s\n",loc_legend[4],date_time.arr);
    
	//Code for Line 3
	l_start_point=0;
	l_start_point=ceill(l_report_width/2);
	fprintf(fp,"%-14.14s: BLR00020",loc_legend[2]);
	//fprintf(fp,"%-14.14s: %s",loc_legend[2],loc_legend[23]);
	l_start_point=l_start_point-24;
	print_spaces(l_start_point);
	l_comp_name_end_point=l_start_point+24;
	l_start_point=(l_report_width-(17+9)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp," %-15.15s : %d\n",loc_legend[5],++pctr);

	
}

fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","-");
}

fetch_hosp_name()
{
    l_acc_name.arr[0] = '\0';
	hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	date.arr[0]		 = '\0';
	nd_date.arr[0]	 = '\0';
    user_id.arr[0]   = '\0';
	base_curr.arr[0] = '\0';

    l_acc_name.len   = 0;
	hosp_name.len	 = 0;
    date_time.len    = 0;
	date.len		 = 0;
    user_id.len      = 0;
	base_curr.len    = 0;
	nd_date.len		 = 0;

    EXEC SQL SELECT ACCOUNTING_NAME,
					ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/YYYY'),
					TO_CHAR(SYSDATE,'HH24:MI:SS'),
					TO_CHAR(SYSDATE,'MM/YYYY'),
                    USER,
					'('||BASE_CURRENCY||')'
               INTO :l_acc_name, 
					:hosp_name,
					:date,
					:date_time, 
					:nd_date,
					:user_id,
					:base_curr
               FROM SY_ACC_ENTITY_LANG_VW
	          WHERE ACC_ENTITY_ID = :nd_facility
				AND LANGUAGE_ID   = :p_language_id;

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	l_acc_name.arr[l_acc_name.len]         = '\0';
	hosp_name.arr[hosp_name.len]		   = '\0';		
	date_time.arr[date_time.len]           = '\0';
	date.arr[date.len]					   = '\0';
	user_id.arr[user_id.len]               = '\0';
	base_curr.arr[base_curr.len]		   = '\0';
	nd_date.arr[nd_date.len]			   = '\0';

}


fetch_reason_desc()
{
    bl_reason_desc.arr[0]	= '\0';
    bl_reason_desc1.arr[0]	= '\0';
    bl_reason_desc2.arr[0]	= '\0';
	bl_reason_desc3.arr[0]	= '\0';
	bl_reason_desc4.arr[0]	= '\0';
	bl_reason_desc5.arr[0]	= '\0';	

	bl_reason_desc.len		= 0;
	bl_reason_desc1.len		= 0;
	bl_reason_desc2.len		= 0;
	bl_reason_desc3.len		= 0;
	bl_reason_desc4.len		= 0;
	bl_reason_desc5.len		= 0;

    EXEC SQL SELECT replace(action_reason_desc,CHR(10),CHR(32)) ,instr(action_reason_desc,' ')
               INTO :bl_reason_desc,:null_place
               FROM  BL_ACTION_REASON_LANG_VW
	           WHERE action_reason_code = :bl_reason_code
			   AND   language_id	    = :p_language_id;

    if (OERROR) 
		err_mesg("SELECT failed on table BL_ACTION_REASON",0,"");

	bl_reason_desc.arr[bl_reason_desc.len]           = '\0';


	
    if(null_place > 0)
	{
	EXEC SQL EXECUTE
	BEGIN
	declare
		str1   varchar2(4000);
		str2   varchar2(1000);
    
	 BEGIN
     blcommon.split_words(:bl_reason_desc,55,'*',1,str1,str2);
	    IF str2 IS NOT NULL THEN
         :bl_reason_desc1 := str2;
        END IF;
	 blcommon.split_words(:bl_reason_desc,55,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_reason_desc2  := str2;
       END IF;
	 blcommon.split_words(:bl_reason_desc,55,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_reason_desc3    :=  str2;
        END IF;

	 blcommon.split_words(:bl_reason_desc,55,'*',4,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_reason_desc4    := str2;
        END IF;

	 blcommon.split_words(:bl_reason_desc,55,'*',5,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_reason_desc5    := str2;
        END IF;

     
	 END;
	 END;
	END-EXEC;
	}
	
	else
	{
       strcpy(bl_reason_desc1.arr,bl_reason_desc.arr);
	   bl_reason_desc1.len = strlen(bl_reason_desc1.arr);
	}
       
    
     /*sprintf(string_var,"%s ",bl_reason_desc1.arr);
	   disp_message(ERR_MESG,string_var);
	 */

		bl_reason_desc1.arr[bl_reason_desc1.len]  = '\0';
		bl_reason_desc2.arr[bl_reason_desc2.len]  = '\0';
		bl_reason_desc3.arr[bl_reason_desc3.len]  = '\0';
		bl_reason_desc4.arr[bl_reason_desc4.len]  = '\0';
		bl_reason_desc5.arr[bl_reason_desc5.len]  = '\0';
	
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
    }
}                        

check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+10;

	if((lctr+l_lead_lines)> 55) 
	{
		fprintf(fp,"\f");
		print_head();
		lctr = 3;
	}
}

print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}




fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00020.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

get_local_date()
{

	EXEC SQL EXECUTE

	DECLARE

	t_date  date;

	BEGIN
		get_locale_date.convert_to_locale_date(TO_DATE(:nd_temp_date,'dd/mm/yyyy'),:p_language_id,t_date);
	
	   :nd_loc_date := to_char(t_date,'DD/MM/YYYY');
	
	END;
	END-EXEC;

}

get_local_date1()
{

	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'dd/mm/yyyy'),:p_language_id,t_date);
															
		:nd_loc_date := to_char(t_date,'DD/MM/YYYY');

	END;

	END-EXEC;

        if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

get_local_date2()
{

	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
		
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'mm/yyyy'),:p_language_id,t_date);
	    :nd_loc_date := to_char(t_date,'mm/yyyy');
	
	END;

	END-EXEC;
	
	nd_loc_date.arr[nd_loc_date.len] = '\0';

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");
}

get_initialize()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
}
  
get_local_date_convn1()
{

nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date1();

}

get_local_date_convn2()
{

nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date2();

}
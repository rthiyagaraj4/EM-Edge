/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLBPSTFL.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* Converted to windows  : Prasad B G S 3/7/96                          */
/* DATE WRITTEN          : 19-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                                */
/*                                                                      */
/*  TABLE DETAILS                                                       */   
/*                                                                      */
/*        S. No.       TABLENAMES              INPUT/OUTPUT             */
/*                                                                      */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/


#include <stdio.h>
#include <string.h>
#include "gl.h"  
#include "bl.h"     
         
#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define VIEW_LOG_FILE 1

/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR hosp_name                              [120],
	    date_time                                  [20],
	    user_id                                    [40],
	    nd_pwd 									   [91],
	    nd_session_id                              [16],
	    nd_pgm_date                                [25],
	    d_curr_pgm_name                            [15],
	    nd_post_upto_date                          [11],
	    nd_operating_facility_id				   [3],
	    nd_ws_no								   [31],
	    nd_doc_type_code						    [7],
	    nd_doc_num									[9],
	    nd_doc_date								   [35],
	    nd_cash_counter_code                        [7] ,
	    nd_shift_id									[2],
	    nd_reason_text							  [300],
	    nd_pre_doc_type_code						[7],
	    nd_pre_doc_num								[9],
	    nd_pre_doc_date							   [35],
	    nd_cust_code								[9],
	    nd_pre_cust_code							[9],
	    nd_post_month								[3],
	    nd_post_year								[5],
	    nd_error_level								[10],
	    nd_sys_message_id							[10],
	    nd_error_text							  [1000];   

   VARCHAR bl_pat_trx_doc_ref                      [21],
	   bl_pat_trx_doc_ref_line_num                 [5],
	   bl_pat_trx_doc_ref_seq_num                  [5],
	   bl_pat_trx_date                             [13],
	   bl_pat_episode_type                         [2],
	   bl_pat_patient_id                           [21],
	   bl_pat_episode_id                           [9],
	   bl_pat_visit_id                             [5],
	   bl_pat_billed_flag                          [2],
	   bl_pat_settlement_ind                       [2],

	   d_orig_dept_code                            [11],
	   d_bed_class_code                            [3],

	   bl_pat_prt_grp_hdr_code                     [6],
	   bl_pat_prt_grp_line_code                    [4],
	   bl_pat_package_ind                          [2],
	   bl_pat_package_service_code                 [11],
	   bl_pat_blng_serv_code                       [11],
	   bl_pat_package_trx_ind                      [2],
	   bl_pat_serv_locn_code                       [5],
	   bl_pat_serv_item_code                       [21],
	   bl_pat_serv_item_desc                       [41],
	   bl_pat_rate_charge_flag                     [2],
	   bl_pat_base_qty                             [23],
	   bl_pat_base_rate                            [23],
	   bl_pat_serv_qty                             [23],
	   bl_pat_base_charge_amt                      [23],
	   bl_pat_org_gross_charge_amt                 [23],
	   bl_pat_org_disc_amt                         [23],
	   bl_pat_org_net_charge_amt                   [23],
	   bl_pat_upd_gross_charge_amt                 [23],
	   bl_pat_upd_disc_amt                         [23],
	   bl_pat_upd_net_charge_amt                   [23],
	   bl_pat_adj_gross_charge_amt                 [23],
	   bl_pat_adj_disc_amt                         [23],
	   bl_pat_adj_net_charge_amt                   [23],
	   bl_pat_module_id                            [3],
	   bl_pat_source_doc_ref                       [21],
	   bl_pat_source_doc_date                      [13],
	   bl_pat_service_date                         [13],
	   bl_pat_service_date_time		       [30],
	   bl_pat_acct_dept_code                       [11],
	   bl_pat_orig_dept_code                       [11],
	   bl_pat_physician_id                         [16],
	   l_op_physician_id			       [17],
	   l_clinic_code			       [5],
	   l_ward_code				       [5],
	   bl_pat_blng_grp_id                          [5],
	   bl_pat_blng_class_code                      [3],
	   bl_pat_day_type_code                        [3],
	   bl_pat_time_type_code                       [3],
	   bl_pat_disc_perc                            [6],
	   bl_pat_addl_factor_num                      [6],
	   bl_pat_bed_class_code                       [3],
	   bl_pat_bill_type_code                       [3],
	   bl_pat_folio_remarks                        [51],
	   bl_pat_df_service_ind                       [2],
	   bl_pat_df_upd_flag                          [2],
	   bl_pat_doc_type_code                        [7],
	   bl_pat_doc_number                           [23],
	   bl_pat_bill_doc_type_code                   [7],
	   bl_pat_bill_doc_num                         [9],
	   bl_pat_bill_doc_date                        [13],
	   bl_pat_trx_finalize_ind                     [2],
	   bl_pat_finalized_by_id                      [21],
	   bl_pat_finalized_date                       [13],
	   bl_pat_trx_posted_ind                       [2],
	   bl_pat_posted_by_id                         [21],
	   bl_pat_posted_date                          [13],
	   bl_pat_last_adjusted_by_id                  [21],
	   bl_pat_last_adjusted_date                   [13],
	   bl_pat_added_by_id                          [21],
	   bl_pat_modified_by_id                       [21],
	   bl_pat_added_date                           [13],
	   bl_pat_modified_date                        [13],

	   bl_pat_rowid                                [31],

	   bl_pat_concat_code                          [16],

	   bl_store_trx_doc_ref_line_no		       [10],	
	   bl_store_trx_doc_ref_seq_no		       [10],
	   bl_store_trx_date                           [13],
	   bl_store_episode_type                       [2],
	   bl_store_patient_id                         [21],
	   bl_store_episode_id                         [9],
	   bl_store_visit_id                           [5],
	   bl_store_trx_doc_ref                        [51],
	   store_concat_code                           [16],
	   bl_loc                                      [10],     
	   store_acct_dept_code                        [11];


VARCHAR    bl_dept_main_acc1_code                  [11],
	   bl_dept_main_acc2_code                      [5],
	   bl_dept_dept_code                           [11],
	   bl_dept_subledger_group_code                [4],
	   bl_dept_subledger_line_code                 [9],
	   bl_dept_product_group_code                  [4],
	   bl_dept_product_line_code                   [5],

	   bl_pkg1_main_acc1_code                      [11],
	   bl_pkg1_main_acc2_code                      [5],
	   bl_pkg1_dept_code                           [11],
	   bl_pkg1_subledger_group_code                [4],
	   bl_pkg1_subledger_line_code                 [9],
	   bl_pkg1_product_group_code                  [4],
	   bl_pkg1_product_line_code                   [5],

	   bl_pkg2_main_acc1_code                      [11],
	   bl_pkg2_main_acc2_code                      [5],
	   bl_pkg2_dept_code                           [11],
	   bl_pkg2_subledger_group_code                [4],
	   bl_pkg2_subledger_line_code                 [9],
	   bl_pkg2_product_group_code                  [4],
	   bl_pkg2_product_line_code                   [5],

	   bl_acc_int_code                             [7];

VARCHAR    d_hdr_upd_rowid            [20],
           d_lin_upd_rowid            [20];

 
 
VARCHAR	        l_allow_unbilled_folio			[10],
				l_unbilled_remarks				[55],
				l_cash_ctrl_rcpt_in_use			[10],
				l_temp_narration				[100],
				l_group_posting_yn				[5],
				l_temp_prev_trx_doc_ref			[51],
				l_temp_curr_trx_doc_ref			[51],
				l_temp_reason					[100],
				l_error_yn						[10],
				l_error_msg						[300];   
/* These Variables added by raghava on 15/07/2008 for Additional Charge*/
VARCHAR		 bl_operating_facility_id [3],
			 bl_blng_serv_code		  [11],
			 bl_bill_type_code        [4],
			 bl_rule_code			  [7],
			 bl_gl_interface_code	  [7];

double 		 bl_addl_charge_amt,
			 bl_addl_charge_amt_in_charge;
/* upto here*/
 
    int		bl_pat_serv_mth,
			bl_pat_serv_yr;

    int		bl_mth,
			bl_yr,
			cur_mth,
			cur_yr,
			nd_month,l_cnt=1,
			nd_year;

   double  bl_tot_gross_charge_amt = 0,
	   bl_tot_disc_amt = 0,
	   bl_tot_net_charge_amt = 0;

    char   d_ip_gl_yn,
	   d_op_gl_yn,
	   nd_cash_control_use_flag,
	   d_rf_gl_yn,
	   l_mesg[500],
	   ctest[100],temp[100];

    VARCHAR	nd_orig_doc_ref[30],nd_trx_status[2], nd_confirmed_yn[2];                  
    long        nd_orig_doc_ref_line_num,          
	        nd_orig_doc_ref_seq_num,
		nd_can_rec_ctr = 0;

    char msg_str_var[1000], string_var[1000];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int rec_ctr = 0, err_ctr = 0;
char msg_str[132];

char	prv_trx_ref[51];
char	l_prev_trx_doc_ref_line_num[10];
char	l_prev_trx_doc_ref_seq_num[20];
int skip_rec;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 7)
    {
		int i = 0;
		disp_message(ERR_MESG,"Not enough Parameters for running this program");
		proc_exit();
    }
 
    strcpy(g_pgm_id,"BLBPSTFL");

    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
	if(OERROR)
    {
		disp_message(ERR_MESG,"Error in connecting to Oracle");
		proc_exit();
    }

    set_meduser_role();

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    strcpy(nd_operating_facility_id.arr,argv[5]);
    nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr);  

    strcpy(g_facility_id,nd_operating_facility_id.arr);    

    strcpy(nd_ws_no.arr,argv[6]);
    nd_ws_no.len = strlen(nd_ws_no.arr);  

    start_prog_msg();
    fetch_prog_param();

    l_error_yn.arr[0]	= '\0';
    l_error_msg.arr[0]	= '\0';
    l_error_yn.len	= 0;
    l_error_msg.len	= 0;

    

    EXEC SQL EXECUTE
    BEGIN
	bl_upd_back_cash_ctrl(:nd_operating_facility_id,
	  		      :l_group_posting_yn,
			      :l_error_yn,
			      :l_error_msg);
    END;
    END-EXEC;


    l_error_yn.len  = strlen(l_error_yn.arr);
    l_error_msg.len = strlen(l_error_msg.arr);

    if(strcmp(l_error_yn.arr,"Y")==0)
    {
	sprintf(l_mesg,"Error in Proc bl_upd_back_cash_control : %s",l_error_msg.arr);
	disp_message(ERR_MESG,l_mesg);
    }
	
    declare_cur();
    cash_control_use_chec();
     
    bl_tot_gross_charge_amt = 0;
    bl_tot_disc_amt = 0;
    bl_tot_net_charge_amt = 0;

    prv_trx_ref[0] = '\0';

    open_cur();
    skip_rec = 0;

    while(fetch_cur())
    {	   
    

	 EXEC SQL SAVEPOINT LAST_DOC_REF;
	

    
	    if (OERROR)
		  err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

        
		if((strcmp(bl_pat_physician_id.arr,"000000000000000")==0) && (strcmp(bl_pat_episode_type.arr,"O")==0 || strcmp(bl_pat_episode_type.arr,"E")==0 ))
		{
			l_op_physician_id.arr[0] = '\0';
			
			EXEC SQL SELECT physician_id
			           INTO :l_op_physician_id
					   FROM op_visit
					  WHERE facility_id = :nd_operating_facility_id
					    AND	episode_id  = :bl_pat_episode_id
						AND visit_id    = :bl_pat_visit_id;


			if(strlen(l_op_physician_id.arr)>0)
			{
				l_op_physician_id.arr[l_op_physician_id.len] = '\0';
				strcpy(bl_pat_physician_id.arr,l_op_physician_id.arr);
				bl_pat_physician_id.len = strlen(bl_pat_physician_id.arr);
			}	
		}		


		upd_reasons_in_folio_for_unposting();        

		if (nd_reason_text.arr[0] != '\0')
		{
			//New addition by Harish on 05/05/2004
			err_ctr=0;
			continue;	
		}
		//if(strcmp("OR-IPEN0404-00000136",bl_pat_trx_doc_ref.arr))

		if(strcmp(l_group_posting_yn.arr,"Y")==0)
		{
			if(skip_rec && !strcmp(prv_trx_ref, bl_pat_trx_doc_ref.arr))
			{
				//New addition by Harish on 05/05/2004
				err_ctr=0;
				continue;
			}
		}
		else if(strcmp(l_group_posting_yn.arr,"N")==0)
		{
			l_temp_curr_trx_doc_ref.arr[0] = '\0';
			l_temp_curr_trx_doc_ref.len    = 0;

			l_temp_prev_trx_doc_ref.arr[0] = '\0';
			l_temp_prev_trx_doc_ref.len    = 0;

			strcat(l_temp_curr_trx_doc_ref.arr,bl_pat_trx_doc_ref.arr);
			l_temp_curr_trx_doc_ref.len = strlen(l_temp_curr_trx_doc_ref.arr);		

			strcat(l_temp_curr_trx_doc_ref.arr,bl_pat_trx_doc_ref_line_num.arr);
			l_temp_curr_trx_doc_ref.len = strlen(l_temp_curr_trx_doc_ref.arr);		

			strcat(l_temp_curr_trx_doc_ref.arr,bl_pat_trx_doc_ref_seq_num.arr);
			l_temp_curr_trx_doc_ref.len = strlen(l_temp_curr_trx_doc_ref.arr);		

			strcat(l_temp_prev_trx_doc_ref.arr,prv_trx_ref);
			l_temp_prev_trx_doc_ref.len = strlen(l_temp_prev_trx_doc_ref.arr);		

			strcat(l_temp_prev_trx_doc_ref.arr,l_prev_trx_doc_ref_line_num);
			l_temp_prev_trx_doc_ref.len = strlen(l_temp_prev_trx_doc_ref.arr);		

			strcat(l_temp_prev_trx_doc_ref.arr,l_prev_trx_doc_ref_seq_num);
			l_temp_prev_trx_doc_ref.len = strlen(l_temp_prev_trx_doc_ref.arr);				
			

			if(skip_rec && (!strcmp(l_temp_curr_trx_doc_ref.arr,l_temp_prev_trx_doc_ref.arr)))
			{
				//New addition by Harish on 05/05/2004
				err_ctr=0;
				continue;
			}
		}

		//if(strcmp("OR-IPEN0404-00000136",bl_pat_trx_doc_ref.arr))

		if(strcmp(l_group_posting_yn.arr,"Y")==0)
		{
			if(strcmp(prv_trx_ref, bl_pat_trx_doc_ref.arr)) 
			{
				/* Check if all records for the trx_doc_ref can be locked    */
				/* If not the skip all those trx_doc_ref                     */
				strcpy(prv_trx_ref,bl_pat_trx_doc_ref.arr);
				strcpy(l_prev_trx_doc_ref_line_num,bl_pat_trx_doc_ref_line_num.arr);
				strcpy(l_prev_trx_doc_ref_seq_num,bl_pat_trx_doc_ref_seq_num.arr);

				if(!lock_trx_ref())
					skip_rec = 1;
				else 
					skip_rec = 0;

				if(skip_rec)
				{
					//New addition by Harish on 05/05/2004
					err_ctr=0;
					continue;
				}
			}
		}
		else if(strcmp(l_group_posting_yn.arr,"N")==0)
		{
			//if(strcmp("OR-IPEN0404-00000136",bl_pat_trx_doc_ref.arr))

			if(strcmp(l_temp_curr_trx_doc_ref.arr,l_temp_prev_trx_doc_ref.arr)) 
			{
				/* Check if all records for the trx_doc_ref can be locked    */
				/* If not the skip all those trx_doc_ref                     */
				strcpy(prv_trx_ref,bl_pat_trx_doc_ref.arr);
				strcpy(l_prev_trx_doc_ref_line_num,bl_pat_trx_doc_ref_line_num.arr);
				strcpy(l_prev_trx_doc_ref_seq_num,bl_pat_trx_doc_ref_seq_num.arr);

				if(!lock_trx_ref())
					skip_rec = 1;
				else 
					skip_rec = 0;

				if(skip_rec)
				{
					//New addition by Harish on 05/05/2004
					err_ctr=0;
					continue;
				}
			}
		}

		//if(strcmp("OR-IPEN0404-00000136",bl_pat_trx_doc_ref.arr))


		strcpy(prv_trx_ref,bl_pat_trx_doc_ref.arr);
		strcpy(l_prev_trx_doc_ref_line_num,bl_pat_trx_doc_ref_line_num.arr);
		strcpy(l_prev_trx_doc_ref_seq_num,bl_pat_trx_doc_ref_seq_num.arr);

		

		if(bl_pat_package_trx_ind.arr[0] == 'Y')
		{
			updt_pkg_inc();

		}
		if(bl_pat_package_trx_ind.arr[0] == 'N')
		{
			updt_srv_inc();
		}



		if(bl_pat_package_trx_ind.arr[0] == 'N') 
		{
			if (!rec_ctr)
			{
				EXEC SQL SAVEPOINT LAST_DOC_REF;
    
				if (OERROR)
					err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 
			}
			rec_ctr++;

	

			if(strcmp(l_group_posting_yn.arr,"Y")==0)
			{
				if ((rec_ctr == 1)||(strcmp(bl_store_trx_doc_ref.arr,bl_pat_trx_doc_ref.arr)))
				{
					
					trx_ref_break();

				}
			}
			else if(strcmp(l_group_posting_yn.arr,"N")==0)
			{
				//sprintf(l_mesg,"Trx  : %s  %s  %s     Store  : %s  %s  %s",bl_pat_trx_doc_ref.arr,bl_pat_trx_doc_ref_line_num.arr, bl_pat_trx_doc_ref_seq_num.arr,bl_store_trx_doc_ref.arr,bl_store_trx_doc_ref_line_no.arr,bl_store_trx_doc_ref_seq_no.arr);
				//disp_message(ERR_MESG,l_mesg);

				l_temp_curr_trx_doc_ref.arr[0] = '\0';
				l_temp_curr_trx_doc_ref.len    = 0;

				l_temp_prev_trx_doc_ref.arr[0] = '\0';
				l_temp_prev_trx_doc_ref.len    = 0;

				strcat(l_temp_curr_trx_doc_ref.arr,bl_pat_trx_doc_ref.arr);
				l_temp_curr_trx_doc_ref.len = strlen(l_temp_curr_trx_doc_ref.arr);		

				strcat(l_temp_curr_trx_doc_ref.arr,bl_pat_trx_doc_ref_line_num.arr);
				l_temp_curr_trx_doc_ref.len = strlen(l_temp_curr_trx_doc_ref.arr);		

				strcat(l_temp_curr_trx_doc_ref.arr,bl_pat_trx_doc_ref_seq_num.arr);
				l_temp_curr_trx_doc_ref.len = strlen(l_temp_curr_trx_doc_ref.arr);		

				strcat(l_temp_prev_trx_doc_ref.arr,bl_store_trx_doc_ref.arr);
				l_temp_prev_trx_doc_ref.len = strlen(l_temp_prev_trx_doc_ref.arr);		

				strcat(l_temp_prev_trx_doc_ref.arr,bl_store_trx_doc_ref_line_no.arr);
				l_temp_prev_trx_doc_ref.len = strlen(l_temp_prev_trx_doc_ref.arr);		

				strcat(l_temp_prev_trx_doc_ref.arr,bl_store_trx_doc_ref_seq_no.arr);
				l_temp_prev_trx_doc_ref.len = strlen(l_temp_prev_trx_doc_ref.arr);		


				if ((rec_ctr == 1)||strcmp(l_temp_curr_trx_doc_ref.arr,l_temp_prev_trx_doc_ref.arr))
				{	

					//if(strcmp("OR-IPEN0404-00000136",bl_pat_trx_doc_ref.arr))

				   trx_ref_break();

				

				}
			}



			if ((rec_ctr == 1)||(strcmp(store_concat_code.arr,bl_pat_concat_code.arr)))
			{
				concat_break();
			}


			if ((rec_ctr == 1)||(strcmp(store_acct_dept_code.arr,bl_pat_acct_dept_code.arr)))
			{	
					
				dept_break();
			}



			bl_tot_gross_charge_amt += atof(bl_pat_adj_gross_charge_amt.arr);
			bl_tot_disc_amt			+= atof(bl_pat_adj_disc_amt.arr);
			bl_tot_net_charge_amt	+= atof(bl_pat_adj_net_charge_amt.arr);
		}

    
	    strcpy(nd_pre_doc_type_code.arr,nd_doc_type_code.arr);
	    nd_pre_doc_type_code.len = strlen(nd_pre_doc_type_code.arr);
        
	    strcpy(nd_pre_doc_num.arr,nd_doc_num.arr);
	    nd_pre_doc_num.len = strlen(nd_pre_doc_num.arr);
        
	    strcpy(nd_pre_doc_date.arr,nd_doc_date.arr);
	    nd_pre_doc_date.len = strlen(nd_pre_doc_date.arr);
        
	    strcpy(nd_pre_cust_code.arr,nd_cust_code.arr);
	    nd_pre_cust_code.len = strlen(nd_pre_cust_code.arr);

	  /*l_cnt++;
	  if (l_cnt > 100) 
	   {
	      disp_message(ERR_MESG, "100");
		  l_cnt = 0;
	  }*/

	/* This one newly added by raghava on 15/07/2008 for inserting additional charge in BL_GL_DISTRIBUTION*/	 
	 if(bl_addl_charge_amt_in_charge != 0) 
	 {


		l_error_yn.arr[0]	= '\0';
		l_error_msg.arr[0]	= '\0';
		l_error_yn.len	= 0;
		l_error_msg.len	= 0;

		EXEC SQL EXECUTE
		BEGIN
		   
		BL_POST_ADDL_SERV_CHARGE.GET_ADDL_CHARGE_DETLS(:nd_operating_facility_id,
										 TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY'),
										 :bl_pat_trx_doc_ref, 				
										 :bl_pat_trx_doc_ref_line_num,
										 :bl_pat_trx_doc_ref_seq_num, 
										 :nd_post_year,						
										 :nd_post_month,
										 :bl_pat_acct_dept_code,
										 :l_group_posting_yn,
										 :bl_pat_episode_type,
										 :bl_pat_patient_id,
										 :bl_pat_episode_id,
										 :bl_pat_visit_id,
										 :l_temp_narration,
										 :nd_ws_no,
										 :nd_pre_doc_type_code,
										 :nd_pre_doc_num,
										 TO_DATE(:nd_pre_doc_date,'DD/MM/YYYY'),
										 :nd_pre_cust_code,
										 :l_error_yn,
										 :l_error_msg);
					  
		END;
		END-EXEC;
	
						
		l_error_yn.len  = strlen(l_error_yn.arr);
		l_error_msg.len = strlen(l_error_msg.arr);

		if(strcmp(l_error_yn.arr,"Y")==0)
		{
		sprintf(l_mesg,":%s",l_error_msg.arr);
		disp_message(ERR_MESG,l_mesg);
		}


	 }
	/* upto here 15/07/2008*/ 

}//end while


    
	if (rec_ctr)
    {
	  if (!err_ctr)
		{
			//disp_message(ERR_MESG,"create_bl_gl_dist_dept 2");

			 create_bl_gl_dist_dept();
			
			 create_bl_gl_dist_trx_ref();
			
			 upd_pat_chg_folio();
			 EXEC SQL COMMIT WORK;
			 if (OERROR)
			 err_mesg("COMMIT failed",0,""); 
		}
		else
		   continue_to_next_ref();
	}

   

    end_prog_msg();
    EXEC SQL UPDATE BL_PARAMETERS 
	     SET    LAST_FOLIO_POST_DATE = 
				  TO_DATE(:nd_post_upto_date,'DD/MM/YYYY'),
		    MODIFIED_BY_ID         = USER,
	            MODIFIED_DATE          = SYSDATE,
		    ADDED_AT_WS_NO         = :nd_ws_no,
		    ADDED_FACILITY_ID      = :nd_operating_facility_id,
	            MODIFIED_AT_WS_NO      = :nd_ws_no,
		    MODIFIED_FACILITY_ID   = :nd_operating_facility_id
	     WHERE  NVL(LAST_FOLIO_POST_DATE,
				  TO_DATE(:nd_post_upto_date,'DD/MM/YYYY'))
			      <=  TO_DATE(:nd_post_upto_date,'DD/MM/YYYY')
 	     AND    OPERATING_FACILITY_ID = :nd_operating_facility_id ;


    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
	 err_mesg("COMMIT WORK RELEASE failed REA",0,"");
  //  disp_message(ERR_MESG, "EXEC SQL UPDATE BL_PARAMETERS ");

    return;
}

fetch_prog_param() 
{

    nd_post_upto_date.arr[0]        = '\0';
    nd_post_upto_date.len			= 0;
	l_allow_unbilled_folio.arr[0]	= '\0';
	l_unbilled_remarks.arr[0]		= '\0';
	l_group_posting_yn.arr[0]		= '\0';
    nd_month = 0;
    nd_year  = 0;

  EXEC SQL SELECT PARAM1,
				  PARAM2,
				  PARAM3, 
				  PARAM4, 
				  PARAM5,
				  PARAM6
	        INTO :nd_month,
				 :nd_year,
				 :nd_post_upto_date,
				 :l_allow_unbilled_folio,
				 :l_unbilled_remarks,
				 :l_group_posting_yn
		  FROM SY_PROG_PARAM
		 WHERE OPERATING_FACILITY_ID =  :nd_operating_facility_id
		 AND   PGM_ID                = :d_curr_pgm_name
		 AND   SESSION_ID            = :nd_session_id
		 AND   PGM_DATE              = :nd_pgm_date; 

   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

	nd_post_upto_date.arr[nd_post_upto_date.len]			= '\0';
	l_allow_unbilled_folio.arr[l_allow_unbilled_folio.len]	= '\0';
	l_unbilled_remarks.arr[l_unbilled_remarks.len]			= '\0';
	l_group_posting_yn.arr[l_group_posting_yn.len]			= '\0';

   if (nd_month == 0 || nd_year == 0 )
	 err_mesg("",1,"BL9005");

    d_ip_gl_yn = '\0';
    d_op_gl_yn = '\0';
    d_rf_gl_yn = '\0';
	l_cash_ctrl_rcpt_in_use.arr[0] = '\0';

   EXEC SQL SELECT CURRENT_PROC_ACC_MONTH,
		   CURRENT_PROC_ACC_YEAR,
		   TO_NUMBER(TO_CHAR(SYSDATE,'MM')),
		   TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')),
		   NVL(IP_GL_REQD_YN,'N'),
		   NVL(OP_GL_REQD_YN,'N'),
		   NVL(RF_GL_REQD_YN,'N'),
		   NVL(cash_ctrl_rcpt_in_use_yn,'N')
	INTO   :bl_mth,
		   :bl_yr,
		   :cur_mth,
		   :cur_yr,
		   :d_ip_gl_yn,
		   :d_op_gl_yn,
		   :d_rf_gl_yn,
		   :l_cash_ctrl_rcpt_in_use
    FROM   BL_PARAMETERS
   WHERE   OPERATING_FACILITY_ID = :nd_operating_facility_id;

    if(OERROR)
		err_mesg("SELECT failed on table BL_PARAMETERS",0,"");

	l_cash_ctrl_rcpt_in_use.arr[l_cash_ctrl_rcpt_in_use.len] = '\0';	
		

    if( (cur_yr > bl_yr) || (cur_yr==bl_yr && cur_mth > bl_mth) ) 
	{
		nd_month = cur_mth;
		nd_year  = cur_yr;
    }
    else 
	{
		nd_month = bl_mth;
		nd_year  = bl_yr;
    }

	/* HANDLED IN FORM BY VSK 20/01/2001 FOR BLENH PURPOSE
	EXEC SQL DELETE SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_name
	     AND   OPERATING_FACILITY_ID = :nd_operating_facility_id
	     AND   SESSION_ID = :nd_session_id
	     AND   PGM_DATE   = :nd_pgm_date;

   if (OERROR)
	 err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");*/
   
}

cash_control_use_chec()
{
   nd_cash_control_use_flag = 'N'; 		
   
   EXEC SQL SELECT NVL(CASH_CTRL_RCPT_IN_USE_YN,'N') INTO :nd_cash_control_use_flag 
   FROM BL_PARAMETERS
   WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id;

      if(OERROR) 
        err_mesg("SELECT failed on table BL_PARAMETERS",0,""); 
}


declare_cur()
{
	 //NVL(AVAILED_IND,'N') NOT IN ('Y','U','C') 'C' IS ADDED
     
     EXEC SQL DECLARE BL_PAT_CHG_FOLIO_CUR CURSOR FOR
	       SELECT TRX_DOC_REF,
		      TRX_DOC_REF_LINE_NUM,
		      TRX_DOC_REF_SEQ_NUM,
		      TO_CHAR(TRX_DATE,'DD/MM/YYYY'),
		      EPISODE_TYPE,
		      PATIENT_ID,
		      EPISODE_ID,
		      VISIT_ID,
		      BILLED_FLAG,
		      SETTLEMENT_IND,
		      PRT_GRP_HDR_CODE,
		      PRT_GRP_LINE_CODE,
		      PACKAGE_IND,
		      PACKAGE_SERVICE_CODE,
		      BLNG_SERV_CODE,
		      PACKAGE_TRX_IND,
		      SERV_LOCN_CODE,
		      SERV_ITEM_CODE,
		      SERV_ITEM_DESC,
		      RATE_CHARGE_FLAG,
		      BASE_QTY,
		      ROUND(BASE_RATE,6),
		      SERV_QTY,
		      ROUND(BASE_CHARGE_AMT,6),
		      (ORG_GROSS_CHARGE_AMT-NVL(ADDL_CHARGE_AMT_IN_CHARGE,0)),
		      ORG_DISC_AMT,
		      ORG_NET_CHARGE_AMT,
		      (UPD_GROSS_CHARGE_AMT-NVL(ADDL_CHARGE_AMT_IN_CHARGE,0)),
		      UPD_DISC_AMT,
		      UPD_NET_CHARGE_AMT,
		      (ADJ_GROSS_CHARGE_AMT-NVL(ADDL_CHARGE_AMT_IN_CHARGE,0)),
		      ADJ_DISC_AMT,
		      ADJ_NET_CHARGE_AMT,
		      MODULE_ID,
		      SOURCE_DOC_REF,
		      TO_CHAR(SOURCE_DOC_DATE,'DD/MM/YYYY'),
		      NVL(TO_CHAR(SERVICE_DATE,'DD/MM/YYYY'),TO_CHAR(TRX_DATE,'DD/MM/YYYY')),
		      TO_NUMBER(TO_CHAR(SERVICE_DATE,'MM')),
		      TO_NUMBER(TO_CHAR(SERVICE_DATE,'YYYY')),
		      ACCT_DEPT_CODE,
		      ORIG_DEPT_CODE,
		      NVL(PHYSICIAN_ID,'000000000000000'),
		      BLNG_GRP_ID,
		      BLNG_CLASS_CODE,
		      DAY_TYPE_CODE,
		      TIME_TYPE_CODE,
		      DISC_PERC,
		      ADDL_FACTOR_NUM,
		      NVL(BED_CLASS_CODE,'XX') BED_CLASS_CODE,
		      BILL_TYPE_CODE,
		      FOLIO_REMARKS,
		      DF_SERVICE_IND,
		      DF_UPD_FLAG,
		      DOC_TYPE_CODE,
		      DOC_NUMBER,
		      BILL_DOC_TYPE_CODE,
		      BILL_DOC_NUM,
		      TO_CHAR(BILL_DOC_DATE,'DD/MM/YYYY'),
		      TRX_FINALIZE_IND,
		      FINALIZED_BY_ID,
		      TO_CHAR(FINALIZED_DATE,'DD/MM/YYYY'),
		      TRX_POSTED_IND,
		      POSTED_BY_ID,
		      TO_CHAR(POSTED_DATE,'DD/MM/YYYY'),
		      LAST_ADJUSTED_BY_ID,
		      TO_CHAR(LAST_ADJUSTED_DATE,'DD/MM/YYYY'),
		      ADDED_BY_ID,
		      MODIFIED_BY_ID,
		      TO_CHAR(ADDED_DATE,'DD/MM/YYYY'),
		      TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY'),
		      PACKAGE_IND||PACKAGE_SERVICE_CODE||BLNG_SERV_CODE,
		      CASH_CTRL_DOC_TYPE_CODE,        
		      CASH_CTRL_DOC_NUMBER,           
		      CASH_CTRL_DOC_DATE,
		      CASH_COUNTER_CODE,
		      SHIFT_ID,
		      CUST_CODE,		      
		      ORIG_DOC_REF,                   
		      ORIG_DOC_REF_LINE_NUM,          
		      ORIG_DOC_REF_SEQ_NUM,
		      TRX_STATUS,
		      NVL(CONFIRMED_YN,'N'),
		      TO_CHAR(SERVICE_DATE,'DD/MM/YYYY HH24:MI:SS'),
			  NVL(ADDL_CHARGE_AMT_IN_CHARGE,0)
		FROM BL_PAT_CHARGES_TEMP
		WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND NVL(TRX_POSTED_IND,'N') = 'N'   
		AND TRX_DATE <= TO_DATE(:nd_post_upto_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS')
		/*AND NVL(CONFIRMED_YN,'N') = 'Y'*/
		AND NVL(TRX_FINALIZE_IND,'N') = 'Y' 
		AND (EPISODE_TYPE not in ('O','E') OR   
     		    (EPISODE_TYPE in ('O','E') AND NVL(AVAILED_IND,'N') NOT IN ('Y','U','C')))
		ORDER BY TRX_DOC_REF,PACKAGE_IND,
			 PACKAGE_SERVICE_CODE,
			 BLNG_SERV_CODE,
			 ACCT_DEPT_CODE; 
   
    EXEC SQL DECLARE BL_TYPE_BLNG_SERV_CUR CURSOR FOR
	       SELECT INCOME_ACC_INT_CODE
	       FROM BL_TYPE_FOR_BLNG_SERV A
	       WHERE BLNG_SERV_CODE = :bl_pat_blng_serv_code
	       AND BILL_TYPE_CODE = :bl_pat_bill_type_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)  // Effective date range is included on 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);

/*	       AND ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);*/

EXEC SQL DECLARE BL_TYPE_BLNG_SERV_CLSFN_CUR CURSOR FOR
	       SELECT INCOME_ACC_INT_CODE
	       FROM BL_TYPE_FOR_BLNG_SERV A
	       WHERE BLNG_SERV_CODE = (select serv_classification_code from bl_blng_serv
								   where blng_serv_code =:bl_pat_blng_serv_code)         //SUBSTR(:bl_pat_blng_serv_code,1,3)
	       AND BILL_TYPE_CODE = :bl_pat_bill_type_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)  // Effective date range is included on 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);
		   
/*		   ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);*/



EXEC SQL DECLARE BL_TYPE_BLNG_SERV_GRP_CUR CURSOR FOR
	       SELECT INCOME_ACC_INT_CODE
	       FROM BL_TYPE_FOR_BLNG_SERV A
	       WHERE BLNG_SERV_CODE = SUBSTR(:bl_pat_blng_serv_code,1,2)
	       AND BILL_TYPE_CODE = :bl_pat_bill_type_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)  // Effective date range is included on 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);

/*	       AND ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);*/

  EXEC SQL DECLARE BL_TYPE_SERV_GRP_CUR CURSOR FOR
	       SELECT DISCOUNT_ACC_INT_CODE
	       FROM BL_TYPE_FOR_SERV_GRP A
	       WHERE BLNG_GRP_ID = :bl_pat_blng_grp_id
	       AND BILL_TYPE_CODE = :bl_pat_bill_type_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)    // Effective date range is included ON 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);
/*
	       AND ACC_ENTITY_CODE IN  (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);*/

EXEC SQL DECLARE BL_TYPE_SERV_GRP_BY_PAYER_CUR CURSOR FOR
	       SELECT DISCOUNT_ACC_INT_CODE
	       FROM BL_SERV_GRP_PAYER_INT A
	       WHERE BLNG_GRP_ID = :bl_pat_blng_grp_id
	       AND BILL_TYPE_CODE = :bl_pat_bill_type_code
		   //AND BLNG_SERV_CODE = :bl_pat_blng_grp_id
		   AND BLNG_SERV_CODE = :bl_pat_blng_serv_code
		   AND CUST_CODE      = :nd_cust_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)    // Effective date range is included ON 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);

/*	       AND ACC_ENTITY_CODE IN  (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id); */   

/* two cursor BL_TYPE_SERV_GRP_BY_PAYER_CUR1,BL_TYPE_SERV_GRP_BY_PAYER_CUR2 added on 15-02-2008*/

EXEC SQL DECLARE BL_TYPE_SERV_GRP_BY_PAYER_CUR1 CURSOR FOR
	       SELECT DISCOUNT_ACC_INT_CODE
	       FROM BL_SERV_GRP_PAYER_INT A
	       WHERE BLNG_GRP_ID = :bl_pat_blng_grp_id
	       AND BILL_TYPE_CODE = :bl_pat_bill_type_code
		   //AND BLNG_SERV_CODE = :bl_pat_blng_grp_id
		   AND BLNG_SERV_CODE = (select serv_classification_code from bl_blng_serv
								   where blng_serv_code =:bl_pat_blng_serv_code) //SUBSTR(:bl_pat_blng_serv_code,1,3)
		   AND CUST_CODE      = :nd_cust_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)    // Effective date range is included ON 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);


EXEC SQL DECLARE BL_TYPE_SERV_GRP_BY_PAYER_CUR2 CURSOR FOR
	       SELECT DISCOUNT_ACC_INT_CODE
	       FROM BL_SERV_GRP_PAYER_INT A
	       WHERE BLNG_GRP_ID = :bl_pat_blng_grp_id
	       AND BILL_TYPE_CODE = :bl_pat_bill_type_code
		   //AND BLNG_SERV_CODE = :bl_pat_blng_grp_id
		   AND BLNG_SERV_CODE = SUBSTR(:bl_pat_blng_serv_code,1,2)
		   AND CUST_CODE      = :nd_cust_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)    // Effective date range is included ON 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);


     EXEC SQL DECLARE BL_BILL_TYPE_CUR CURSOR FOR
	       SELECT BL_RECV_ACC_INT_CODE
	       FROM BL_BILL_TYPE_INT A
	       WHERE BILL_TYPE_CODE = :bl_pat_bill_type_code
	       AND TO_DATE(:bl_pat_trx_date,'DD/MM/YYYY') between 
		      NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(EFF_TO_DATE,SYSDATE)   // Effective date range is included ON 01/06/2004
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);

/*	       AND   ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);*/

     EXEC SQL DECLARE BL_GL_ACCOUNT_CUR CURSOR FOR
	       SELECT MAIN_ACC1_CODE,
		      MAIN_ACC2_CODE,
		      DECODE(DEPT_CODE,'X',:store_acct_dept_code,DEPT_CODE),
		      SUBLEDGER_GROUP_CODE,
		      SUBLEDGER_LINE_CODE,
		      PRODUCT_GROUP_CODE,
		      PRODUCT_LINE_CODE
		FROM BL_GL_ACCOUNT A
		WHERE ACC_INT_CODE = :bl_acc_int_code
	       AND EXISTS (SELECT 'X' FROM SY_ACC_ENTITY B WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE);


/*	        AND   ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);*/


    EXEC SQL DECLARE LOCK_TRX_REF_CUR 
	       CURSOR FOR
	          SELECT 
		  /*+INDEX(BL_PATIENT_CHARGES_FOLIO BL_PATIENT_CHARGES_FOLIO_I1) USE 			
		             BL_PATIENT_CHARGES_FOLIO_I1*/ 
			     ROWID
	           FROM BL_PATIENT_CHARGES_FOLIO
	           WHERE TRX_DOC_REF			= :bl_pat_trx_doc_ref
		   AND TRX_DOC_REF_LINE_NUM		= DECODE(:l_group_posting_yn,'Y',TRX_DOC_REF_LINE_NUM,:bl_pat_trx_doc_ref_line_num)
		   AND TRX_DOC_REF_SEQ_NUM		= DECODE(:l_group_posting_yn,'Y',TRX_DOC_REF_SEQ_NUM,:bl_pat_trx_doc_ref_seq_num)
		   AND NVL(TRX_POSTED_IND,'N')	= 'N'
		   AND TRX_DATE				<= TO_DATE(:nd_post_upto_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS')
		  /* AND CONFIRMED_YN			= 'Y' */
		   AND NVL(TRX_FINALIZE_IND,'N')	= 'Y'
		   AND OPERATING_FACILITY_ID		= :nd_operating_facility_id
		   AND (EPISODE_TYPE not in ('O','E') OR 
		       (EPISODE_TYPE  in ('O','E') AND NVL(AVAILED_IND,'N') NOT IN ('Y','U','C')))
	           FOR UPDATE OF TRX_DOC_REF NOWAIT;


}
open_cur()   
{
     EXEC SQL OPEN BL_PAT_CHG_FOLIO_CUR;


     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");
}

fetch_cur()
{

nd_cust_code.arr[0]												  = '\0';
bl_pat_trx_doc_ref.arr[0]                                         = '\0';
bl_pat_trx_doc_ref_line_num.arr[0]                                = '\0';
bl_pat_trx_doc_ref_seq_num.arr[0]                                 = '\0';
bl_pat_trx_date.arr[0]                                            = '\0';
bl_pat_episode_type.arr[0]                                        = '\0';
bl_pat_patient_id.arr[0]                                          = '\0';
bl_pat_episode_id.arr[0]                                          = '\0';
bl_pat_visit_id.arr[0]                                            = '\0';
bl_pat_billed_flag.arr[0]                                         = '\0';
bl_pat_settlement_ind.arr[0]                                      = '\0';
bl_pat_prt_grp_hdr_code.arr[0]                                    = '\0';
bl_pat_prt_grp_line_code.arr[0]                                   = '\0';
bl_pat_package_ind.arr[0]                                         = '\0';
bl_pat_package_service_code.arr[0]                                = '\0';
bl_pat_blng_serv_code.arr[0]                                      = '\0';
bl_pat_package_trx_ind.arr[0]                                     = '\0';
bl_pat_serv_locn_code.arr[0]                                      = '\0';
bl_pat_serv_item_code.arr[0]                                      = '\0';
bl_pat_serv_item_desc.arr[0]                                      = '\0';
bl_pat_rate_charge_flag.arr[0]                                    = '\0';
bl_pat_base_qty.arr[0]                                            = '\0';
bl_pat_base_rate.arr[0]                                           = '\0';
bl_pat_serv_qty.arr[0]                                            = '\0';
bl_pat_base_charge_amt.arr[0]                                     = '\0';
bl_pat_org_gross_charge_amt.arr[0]                                = '\0';
bl_pat_org_disc_amt.arr[0]                                        = '\0';
bl_pat_org_net_charge_amt.arr[0]                                  = '\0';
bl_pat_upd_gross_charge_amt.arr[0]                                = '\0';
bl_pat_upd_disc_amt.arr[0]                                        = '\0';
bl_pat_upd_net_charge_amt.arr[0]                                  = '\0';
bl_pat_adj_gross_charge_amt.arr[0]                                = '\0';
bl_pat_adj_disc_amt.arr[0]                                        = '\0';
bl_pat_adj_net_charge_amt.arr[0]                                  = '\0';
bl_pat_module_id.arr[0]                                           = '\0';
bl_pat_source_doc_ref.arr[0]                                      = '\0';
bl_pat_source_doc_date.arr[0]                                     = '\0';
bl_pat_service_date.arr[0]                                        = '\0';
bl_pat_service_date_time.arr[0] = '\0';
bl_pat_acct_dept_code.arr[0]                                      = '\0';
bl_pat_orig_dept_code.arr[0]                                      = '\0';
bl_pat_physician_id.arr[0]                                        = '\0';
bl_pat_blng_grp_id.arr[0]                                         = '\0';
bl_pat_blng_class_code.arr[0]                                     = '\0';
bl_pat_day_type_code.arr[0]                                       = '\0';
bl_pat_time_type_code.arr[0]                                      = '\0';
bl_pat_disc_perc.arr[0]                                           = '\0';
bl_pat_addl_factor_num.arr[0]                                     = '\0';
bl_pat_bed_class_code.arr[0]                                      = '\0';
bl_pat_bill_type_code.arr[0]                                      = '\0';
bl_pat_folio_remarks.arr[0]                                       = '\0';
bl_pat_df_service_ind.arr[0]                                      = '\0';
bl_pat_df_upd_flag.arr[0]                                         = '\0';
bl_pat_doc_type_code.arr[0]                                       = '\0';
bl_pat_doc_number.arr[0]                                          = '\0';
bl_pat_bill_doc_type_code.arr[0]                                  = '\0';
bl_pat_bill_doc_num.arr[0]                                        = '\0';
bl_pat_bill_doc_date.arr[0]                                       = '\0';
bl_pat_trx_finalize_ind.arr[0]                                    = '\0';
bl_pat_finalized_by_id.arr[0]                                     = '\0';
bl_pat_finalized_date.arr[0]                                      = '\0';
bl_pat_trx_posted_ind.arr[0]                                      = '\0';
bl_pat_posted_by_id.arr[0]                                        = '\0';
bl_pat_posted_date.arr[0]                                         = '\0';
bl_pat_last_adjusted_by_id.arr[0]                                 = '\0';
bl_pat_last_adjusted_date.arr[0]                                  = '\0';
bl_pat_added_by_id.arr[0]                                         = '\0';
bl_pat_modified_by_id.arr[0]                                      = '\0';
bl_pat_added_date.arr[0]                                          = '\0';
bl_pat_modified_date.arr[0]                                       = '\0';
bl_pat_concat_code.arr[0]                                         = '\0';
nd_cash_counter_code.arr[0]                                       = '\0';
nd_shift_id.arr[0]                                       	  = '\0';
nd_doc_type_code.arr[0]  = '\0';
nd_doc_num.arr[0]  = '\0';
nd_doc_date.arr[0]  = '\0';

nd_cash_counter_code.arr[0] = '\0';
nd_shift_id.arr[0] = '\0';
nd_cust_code.arr[0] = '\0';

nd_orig_doc_ref.arr[0] = '\0';                  
nd_trx_status.arr[0] = '\0';
nd_confirmed_yn.arr[0] = '\0';


bl_pat_trx_doc_ref.len                                            = 0;
bl_pat_trx_doc_ref_line_num.len                                   = 0;
bl_pat_trx_doc_ref_seq_num.len                                    = 0;
bl_pat_trx_date.len                                               = 0;
bl_pat_episode_type.len                                           = 0;
bl_pat_patient_id.len                                             = 0;
bl_pat_episode_id.len                                             = 0;
bl_pat_visit_id.len                                               = 0;
bl_pat_billed_flag.len                                            = 0;
bl_pat_settlement_ind.len                                         = 0;
bl_pat_prt_grp_hdr_code.len                                       = 0;
bl_pat_prt_grp_line_code.len                                      = 0;
bl_pat_package_ind.len                                            = 0;
bl_pat_package_service_code.len                                   = 0;
bl_pat_blng_serv_code.len                                         = 0;
bl_pat_package_trx_ind.len                                        = 0;
bl_pat_serv_locn_code.len                                         = 0;
bl_pat_serv_item_code.len                                         = 0;
bl_pat_serv_item_desc.len                                         = 0;
bl_pat_rate_charge_flag.len                                       = 0;
bl_pat_base_qty.len                                               = 0;
bl_pat_base_rate.len                                              = 0;
bl_pat_serv_qty.len                                               = 0;
bl_pat_base_charge_amt.len                                        = 0;
bl_pat_org_gross_charge_amt.len                                   = 0;
bl_pat_org_disc_amt.len                                           = 0;
bl_pat_org_net_charge_amt.len                                     = 0;
bl_pat_upd_gross_charge_amt.len                                   = 0;
bl_pat_upd_disc_amt.len                                           = 0;
bl_pat_upd_net_charge_amt.len                                     = 0;
bl_pat_adj_gross_charge_amt.len                                   = 0;
bl_pat_adj_disc_amt.len                                           = 0;
bl_pat_adj_net_charge_amt.len                                     = 0;
bl_pat_module_id.len                                              = 0;
bl_pat_source_doc_ref.len                                         = 0;
bl_pat_source_doc_date.len                                        = 0;
bl_pat_service_date.len                                           = 0;
bl_pat_service_date_time.len = 0;
bl_pat_acct_dept_code.len                                         = 0;
bl_pat_orig_dept_code.len                                         = 0;
bl_pat_physician_id.len                                           = 0;
bl_pat_blng_grp_id.len                                            = 0;
bl_pat_blng_class_code.len                                        = 0;
bl_pat_day_type_code.len                                          = 0;
bl_pat_time_type_code.len                                         = 0;
bl_pat_disc_perc.len                                              = 0;
bl_pat_addl_factor_num.len                                        = 0;
bl_pat_bed_class_code.len                                         = 0;
bl_pat_bill_type_code.len                                         = 0;
bl_pat_folio_remarks.len                                          = 0;
bl_pat_df_service_ind.len                                         = 0;
bl_pat_df_upd_flag.len                                            = 0;
bl_pat_doc_type_code.len                                          = 0;
bl_pat_doc_number.len                                             = 0;
bl_pat_bill_doc_type_code.len                                     = 0;
bl_pat_bill_doc_num.len                                           = 0;
bl_pat_bill_doc_date.len                                          = 0;
bl_pat_trx_finalize_ind.len                                       = 0;
bl_pat_finalized_by_id.len                                        = 0;
bl_pat_finalized_date.len                                         = 0;
bl_pat_trx_posted_ind.len                                         = 0;
bl_pat_posted_by_id.len                                           = 0;
bl_pat_posted_date.len                                            = 0;
bl_pat_last_adjusted_by_id.len                                    = 0;
bl_pat_last_adjusted_date.len                                     = 0;
bl_pat_added_by_id.len                                            = 0;
bl_pat_modified_by_id.len                                         = 0;
bl_pat_added_date.len                                             = 0;
bl_pat_modified_date.len                                          = 0;
bl_pat_concat_code.len                                            = 0;

nd_orig_doc_ref.len						  =0;                  
nd_orig_doc_ref_line_num = 0;          
nd_orig_doc_ref_seq_num = 0;
nd_trx_status.len = 0;
nd_confirmed_yn.len = 0;

nd_doc_type_code.len			                          = 0;
nd_doc_num.len			                                  = 0;
nd_doc_date.len		                                          = 0;
nd_cash_counter_code.len = 0;
nd_shift_id.len = 0;
nd_cust_code.len = 0;


     EXEC SQL FETCH BL_PAT_CHG_FOLIO_CUR
	       INTO :bl_pat_trx_doc_ref,
		    :bl_pat_trx_doc_ref_line_num,
		    :bl_pat_trx_doc_ref_seq_num,
		    :bl_pat_trx_date,
		    :bl_pat_episode_type,
		    :bl_pat_patient_id,
		    :bl_pat_episode_id,
		    :bl_pat_visit_id,
		    :bl_pat_billed_flag,
		    :bl_pat_settlement_ind,
		    :bl_pat_prt_grp_hdr_code,
		    :bl_pat_prt_grp_line_code,
		    :bl_pat_package_ind,
		    :bl_pat_package_service_code,
		    :bl_pat_blng_serv_code,
		    :bl_pat_package_trx_ind,
		    :bl_pat_serv_locn_code,
		    :bl_pat_serv_item_code,
		    :bl_pat_serv_item_desc,
		    :bl_pat_rate_charge_flag,
		    :bl_pat_base_qty,
		    :bl_pat_base_rate,
		    :bl_pat_serv_qty,
		    :bl_pat_base_charge_amt,
		    :bl_pat_org_gross_charge_amt,
		    :bl_pat_org_disc_amt,
		    :bl_pat_org_net_charge_amt,
		    :bl_pat_upd_gross_charge_amt,
		    :bl_pat_upd_disc_amt,
		    :bl_pat_upd_net_charge_amt,
		    :bl_pat_adj_gross_charge_amt,
		    :bl_pat_adj_disc_amt,
		    :bl_pat_adj_net_charge_amt,
		    :bl_pat_module_id,
		    :bl_pat_source_doc_ref,
		    :bl_pat_source_doc_date,
		    :bl_pat_service_date,
		    :bl_pat_serv_mth,
		    :bl_pat_serv_yr,
		    :bl_pat_acct_dept_code,
		    :bl_pat_orig_dept_code,
		    :bl_pat_physician_id,
		    :bl_pat_blng_grp_id,
		    :bl_pat_blng_class_code,
		    :bl_pat_day_type_code,
		    :bl_pat_time_type_code,
		    :bl_pat_disc_perc,
		    :bl_pat_addl_factor_num,
		    :bl_pat_bed_class_code,
		    :bl_pat_bill_type_code,
		    :bl_pat_folio_remarks,
		    :bl_pat_df_service_ind,
		    :bl_pat_df_upd_flag,
		    :bl_pat_doc_type_code,
		    :bl_pat_doc_number,
		    :bl_pat_bill_doc_type_code,
		    :bl_pat_bill_doc_num,
		    :bl_pat_bill_doc_date,
		    :bl_pat_trx_finalize_ind,
		    :bl_pat_finalized_by_id,
		    :bl_pat_finalized_date,
		    :bl_pat_trx_posted_ind,
		    :bl_pat_posted_by_id,
		    :bl_pat_posted_date,
		    :bl_pat_last_adjusted_by_id,
		    :bl_pat_last_adjusted_date,
		    :bl_pat_added_by_id,
		    :bl_pat_modified_by_id,
		    :bl_pat_added_date,
		    :bl_pat_modified_date,
		    :bl_pat_concat_code,
		    :nd_doc_type_code,
		    :nd_doc_num,
		    :nd_doc_date,
		    :nd_cash_counter_code,
		    :nd_shift_id,
		    :nd_cust_code,
		    :nd_orig_doc_ref,                  
		    :nd_orig_doc_ref_line_num,          
		    :nd_orig_doc_ref_seq_num,
		    :nd_trx_status,
		    :nd_confirmed_yn,
		    :bl_pat_service_date_time,
			:bl_addl_charge_amt_in_charge;

     //if(LAST_ROW)
	 //return 0;
	 if (OERROR)
	 err_mesg("FETCH failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");	
	 

	nd_cust_code.arr[nd_cust_code.len]                                       = '\0';
	bl_pat_trx_doc_ref.arr[bl_pat_trx_doc_ref.len]                           = '\0';
	bl_pat_trx_doc_ref_line_num.arr[bl_pat_trx_doc_ref_line_num.len]         = '\0';
	bl_pat_trx_doc_ref_seq_num.arr[bl_pat_trx_doc_ref_seq_num.len]           = '\0';
	bl_pat_trx_date.arr[bl_pat_trx_date.len]                                 = '\0';
	bl_pat_episode_type.arr[bl_pat_episode_type.len]                         = '\0';
	bl_pat_patient_id.arr[bl_pat_patient_id.len]                             = '\0';
	bl_pat_episode_id.arr[bl_pat_episode_id.len]                             = '\0';
	bl_pat_visit_id.arr[bl_pat_visit_id.len]                                 = '\0';
	bl_pat_billed_flag.arr[bl_pat_billed_flag.len]                           = '\0';
	bl_pat_settlement_ind.arr[bl_pat_settlement_ind.len]                     = '\0';
	bl_pat_prt_grp_hdr_code.arr[bl_pat_prt_grp_hdr_code.len]                 = '\0';
	bl_pat_prt_grp_line_code.arr[bl_pat_prt_grp_line_code.len]               = '\0';
	bl_pat_package_ind.arr[bl_pat_package_ind.len]                           = '\0';
	bl_pat_package_service_code.arr[bl_pat_package_service_code.len]         = '\0';
	bl_pat_blng_serv_code.arr[bl_pat_blng_serv_code.len]                     = '\0';
	bl_pat_package_trx_ind.arr[bl_pat_package_trx_ind.len]                   = '\0';
	bl_pat_serv_locn_code.arr[bl_pat_serv_locn_code.len]                     = '\0';
	bl_pat_serv_item_code.arr[bl_pat_serv_item_code.len]                     = '\0';
	bl_pat_serv_item_desc.arr[bl_pat_serv_item_desc.len]                     = '\0';
	bl_pat_rate_charge_flag.arr[bl_pat_rate_charge_flag.len]                 = '\0';
	bl_pat_base_qty.arr[bl_pat_base_qty.len]                                 = '\0';
	bl_pat_base_rate.arr[bl_pat_base_rate.len]                               = '\0';
	bl_pat_serv_qty.arr[bl_pat_serv_qty.len]                                 = '\0';
	bl_pat_base_charge_amt.arr[bl_pat_base_charge_amt.len]                   = '\0';
	bl_pat_org_gross_charge_amt.arr[bl_pat_org_gross_charge_amt.len]         = '\0';
	bl_pat_org_disc_amt.arr[bl_pat_org_disc_amt.len]                         = '\0';
	bl_pat_org_net_charge_amt.arr[bl_pat_org_net_charge_amt.len]             = '\0';
	bl_pat_upd_gross_charge_amt.arr[bl_pat_upd_gross_charge_amt.len]         = '\0';
	bl_pat_upd_disc_amt.arr[bl_pat_upd_disc_amt.len]                         = '\0';
	bl_pat_upd_net_charge_amt.arr[bl_pat_upd_net_charge_amt.len]             = '\0';
	bl_pat_adj_gross_charge_amt.arr[bl_pat_adj_gross_charge_amt.len]         = '\0';
	bl_pat_adj_disc_amt.arr[bl_pat_adj_disc_amt.len]                         = '\0';
	bl_pat_adj_net_charge_amt.arr[bl_pat_adj_net_charge_amt.len]             = '\0';
	bl_pat_module_id.arr[bl_pat_module_id.len]                               = '\0';
	bl_pat_source_doc_ref.arr[bl_pat_source_doc_ref.len]                     = '\0';
	bl_pat_source_doc_date.arr[bl_pat_source_doc_date.len]                   = '\0';
	bl_pat_service_date.arr[bl_pat_service_date.len]                         = '\0';
	bl_pat_service_date_time.arr[bl_pat_service_date_time.len]		 = '\0';
	bl_pat_acct_dept_code.arr[bl_pat_acct_dept_code.len]                     = '\0';
	bl_pat_orig_dept_code.arr[bl_pat_orig_dept_code.len]                     = '\0';
	bl_pat_physician_id.arr[bl_pat_physician_id.len]                         = '\0';
	bl_pat_blng_grp_id.arr[bl_pat_blng_grp_id.len]                           = '\0';
	bl_pat_blng_class_code.arr[bl_pat_blng_class_code.len]                   = '\0';
	bl_pat_day_type_code.arr[bl_pat_day_type_code.len]                       = '\0';
	bl_pat_time_type_code.arr[bl_pat_time_type_code.len]                     = '\0';
	bl_pat_disc_perc.arr[bl_pat_disc_perc.len]                               = '\0';
	bl_pat_addl_factor_num.arr[bl_pat_addl_factor_num.len]                   = '\0';
	bl_pat_bed_class_code.arr[bl_pat_bed_class_code.len]                     = '\0';
	bl_pat_bill_type_code.arr[bl_pat_bill_type_code.len]                     = '\0';
	bl_pat_folio_remarks.arr[bl_pat_folio_remarks.len]                       = '\0';
	bl_pat_df_service_ind.arr[bl_pat_df_service_ind.len]                     = '\0';
	bl_pat_df_upd_flag.arr[bl_pat_df_upd_flag.len]                           = '\0';
	bl_pat_doc_type_code.arr[bl_pat_doc_type_code.len]                       = '\0';
	bl_pat_doc_number.arr[bl_pat_doc_number.len]                             = '\0';
	bl_pat_bill_doc_type_code.arr[bl_pat_bill_doc_type_code.len]             = '\0';
	bl_pat_bill_doc_num.arr[bl_pat_bill_doc_num.len]                         = '\0';
	bl_pat_bill_doc_date.arr[bl_pat_bill_doc_date.len]                       = '\0';
	bl_pat_trx_finalize_ind.arr[bl_pat_trx_finalize_ind.len]                 = '\0';
	bl_pat_finalized_by_id.arr[bl_pat_finalized_by_id.len]                   = '\0';
	bl_pat_finalized_date.arr[bl_pat_finalized_date.len]                     = '\0';
	bl_pat_trx_posted_ind.arr[bl_pat_trx_posted_ind.len]                     = '\0';
	bl_pat_posted_by_id.arr[bl_pat_posted_by_id.len]                         = '\0';
	bl_pat_posted_date.arr[bl_pat_posted_date.len]                           = '\0';
	bl_pat_last_adjusted_by_id.arr[bl_pat_last_adjusted_by_id.len]           = '\0';
	bl_pat_last_adjusted_date.arr[bl_pat_last_adjusted_date.len]             = '\0';
	bl_pat_added_by_id.arr[bl_pat_added_by_id.len]                           = '\0';
	bl_pat_modified_by_id.arr[bl_pat_modified_by_id.len]                     = '\0';
	bl_pat_added_date.arr[bl_pat_added_date.len]                             = '\0';
	bl_pat_modified_date.arr[bl_pat_modified_date.len]                       = '\0';
	bl_pat_concat_code.arr[bl_pat_concat_code.len]                           = '\0';
	nd_doc_type_code.arr[nd_doc_type_code.len]                               = '\0';
	nd_doc_num.arr[nd_doc_num.len]                                          = '\0';
	nd_doc_date.arr[nd_doc_date.len]                                         = '\0';
	nd_cash_counter_code.arr[nd_cash_counter_code.len]                      = '\0';
	nd_shift_id.arr[nd_shift_id.len]                      			= '\0';

	nd_orig_doc_ref.arr[nd_orig_doc_ref.len] = '\0';                  
	nd_trx_status.arr[nd_trx_status.len] = '\0';
	nd_confirmed_yn.arr[nd_confirmed_yn.len] = '\0';

	nd_cust_code.arr[nd_cust_code.len] = '\0';

	if (bl_pat_orig_dept_code.arr[0] == '\0' && bl_pat_trx_doc_ref.arr[0] != '\0')
	{	
		EXEC SQL EXECUTE
		BEGIN	
			:nd_error_level := null;
			:nd_sys_message_id := null;
			:nd_error_text := null;

			BLCOMMON.GET_SERVICE_DEPT
			(:nd_operating_facility_id,
			:bl_pat_episode_type,
			:bl_pat_episode_id,
			:bl_pat_visit_id,
			:bl_pat_patient_id,
			TO_DATE(:bl_pat_service_date_time,'DD/MM/YYYY HH24:MI:SS'),
			:bl_pat_orig_dept_code,
			:nd_error_level,
			:nd_sys_message_id,
			:nd_error_text);		
		
			if :nd_sys_message_id is not null then
				:nd_error_level := '10';
				:nd_error_text := BLCOMMON.GET_ERROR_TEXT(:nd_sys_message_id);
			end if;
		END;
		END-EXEC;


		if (nd_error_text.arr[0] != '\0' && strcmp(nd_error_level.arr,"10") == 0)
			disp_message(ERR_MESG,nd_error_text.arr);					
	}

	
	if (bl_pat_acct_dept_code.arr[0] == '\0' && bl_pat_trx_doc_ref.arr[0] != '\0')
	{
		EXEC SQL EXECUTE
		BEGIN				
		
			BEGIN
			   :l_clinic_code := null;
			   :l_ward_code    := null;
			   :nd_error_level := null;
  			   :nd_sys_message_id := null;
			   :nd_error_text := null;

			   if :bl_pat_episode_type in ('O','E') then 
				BEGIN
					SELECT CLINIC_CODE INTO :l_clinic_code
					FROM BL_VISIT_FIN_DTLS
					WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					AND EPISODE_TYPE = :bl_pat_episode_type
					AND EPISODE_ID = :bl_pat_episode_id
					AND VISIT_ID   = :bl_pat_visit_id
					AND PATIENT_ID = :bl_pat_patient_id;
				EXCEPTION
					WHEN NO_DATA_FOUND THEN
						:nd_sys_message_id := 'BL9022';
						:nd_error_level := '10';
						:nd_error_text := BLCOMMON.GET_ERROR_TEXT(:nd_sys_message_id);					
					WHEN OTHERS THEN
						:nd_error_level := '10';
						:nd_error_text  := SUBSTR(SQLERRM,1,200);					
				END;			
			    end if;

			    if :bl_pat_episode_type in ('I','D') then 			   			   
			    
				BEGIN
					SELECT TO_WARD_CODE INTO :l_ward_code
					FROM BL_IP_ADT_TRN_VW
					WHERE FACILITY_ID = :nd_operating_facility_id
					AND EPISODE_ID = :bl_pat_episode_id
					AND SRL_NO in (
						SELECT MAX(SRL_NO)
						FROM BL_IP_ADT_TRN_VW
						WHERE FACILITY_ID=:nd_operating_facility_id
						AND EPISODE_ID = :bl_pat_episode_id
						AND PATIENT_ID = :bl_pat_patient_id
						AND NVL(ADT_TRN_STATUS,'X') != '9'
						AND NVL(TRN_CODE,'X') in ('A','T')
						AND TRN_DATE_TIME <= TO_DATE(:bl_pat_service_date_time,'DD/MM/YYYY HH24:MI:SS'));										
				EXCEPTION
					WHEN no_data_found THEN 
						:nd_sys_message_id :='BL4157';
						:nd_error_level := '10';
						:nd_error_text := BLCOMMON.GET_ERROR_TEXT(:nd_sys_message_id);					
					WHEN OTHERS THEN
						:nd_error_level := '10';
						:nd_error_text  := SUBSTR(SQLERRM,1,200);
			
				END;											
			   end if;		   			   

			   if :nd_sys_message_id is null and :nd_error_text is null then 

					BLVALID.VALID_BLNG_SERV_ACC_DEPT
					(	:bl_pat_blng_serv_code,
						:nd_operating_facility_id,          
						:bl_pat_episode_type,         
						:l_clinic_code,         
						:l_ward_code,
						:bl_pat_acct_dept_code,
						:nd_error_level,
						:nd_sys_message_id,
						:nd_error_text);		
				
					if :nd_sys_message_id is not null then
						:nd_error_level := '10';
						:nd_error_text := BLCOMMON.GET_ERROR_TEXT(:nd_sys_message_id);
					end if;						
			   end if;
		      END;
		      
		      
		END;
		END-EXEC;



		if (nd_error_text.arr[0] != '\0' && strcmp(nd_error_level.arr,"10") == 0)
			disp_message(ERR_MESG,nd_error_text.arr);		
	}
	

	nd_can_rec_ctr = 0;


	if (strcmp(nd_trx_status.arr,"C") == 0 && nd_orig_doc_ref.arr[0] != '\0' && 
			bl_pat_bill_doc_type_code.arr[0] == '\0')
	{

		EXEC SQL SELECT count(*) INTO :nd_can_rec_ctr 
			 FROM bl_patient_charges_folio 
			 WHERE operating_facility_id = :nd_operating_facility_id
			 AND TRX_DOC_REF = :nd_orig_doc_ref        
			 AND TRX_DOC_REF_LINE_NUM  = :nd_orig_doc_ref_line_num
			 AND TRX_DOC_REF_SEQ_NUM = :nd_orig_doc_ref_seq_num
			 AND BILL_DOC_TYPE_CODE IS NULL;
	}
	else if (strcmp(nd_trx_status.arr,"C") == 0 && nd_orig_doc_ref.arr[0] == '\0' && 
			bl_pat_bill_doc_type_code.arr[0] == '\0')
	{
		EXEC SQL SELECT count(*) INTO :nd_can_rec_ctr 
			 FROM bl_patient_charges_folio 
			 WHERE operating_facility_id = :nd_operating_facility_id
			 AND ORIG_DOC_REF = :bl_pat_trx_doc_ref        
			 AND ORIG_DOC_REF_LINE_NUM  = :bl_pat_trx_doc_ref_line_num
			 AND ORIG_DOC_REF_SEQ_NUM = :bl_pat_trx_doc_ref_seq_num
			 AND BILL_DOC_TYPE_CODE IS NULL;
	}
	
	else if ( atof(bl_pat_upd_gross_charge_amt.arr) == 0 )
	{
		nd_can_rec_ctr = 1;   // Allow to process
	}
	else
	{		
		nd_can_rec_ctr = 0;
	}

   
    return(LAST_ROW?0:1);
}

fetch_bl_gl_account_trx_ref()
{

/*
     EXEC SQL OPEN BL_TYPE_SERV_GRP_CUR;
     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_TYPE_SERV_GRP_CUR",0,"");

     bl_acc_int_code.arr[0]     = '\0';
     bl_acc_int_code.len        = '\0';

     EXEC SQL FETCH BL_TYPE_SERV_GRP_CUR
	       INTO :bl_acc_int_code;

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_TYPE_SERV_GRP_CUR",0,"");

     
     if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s - %s not found in BL_TYPE_FOR_SERV_GRP",
			  bl_pat_blng_grp_id.arr,
			  bl_pat_bill_type_code.arr);

	   loc_log_msg(msg_str);
	   strcpy(msg_str_var,msg_str);
	   upd_folio_unpost_reason();	   
	   return;
     }
     bl_acc_int_code.arr[bl_acc_int_code.len] = '\0';

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;
     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     bl_pkg1_main_acc1_code.arr[0]            = '\0';
     bl_pkg1_main_acc2_code.arr[0]            = '\0';
     bl_pkg1_dept_code.arr[0]                 = '\0';
     bl_pkg1_subledger_group_code.arr[0]      = '\0';
     bl_pkg1_subledger_line_code.arr[0]       = '\0';
     bl_pkg1_product_group_code.arr[0]        = '\0';
     bl_pkg1_product_line_code.arr[0]         = '\0';

     bl_pkg1_main_acc1_code.len                = 0;
     bl_pkg1_main_acc2_code.len                = 0;
     bl_pkg1_dept_code.len                     = 0;
     bl_pkg1_subledger_group_code.len          = 0;
     bl_pkg1_subledger_line_code.len           = 0;
     bl_pkg1_product_group_code.len            = 0;
     bl_pkg1_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :bl_pkg1_main_acc1_code,
		    :bl_pkg1_main_acc2_code,
		    :bl_pkg1_dept_code,
		    :bl_pkg1_subledger_group_code,
		    :bl_pkg1_subledger_line_code,
		    :bl_pkg1_product_group_code,
		    :bl_pkg1_product_line_code;
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR",0,"");


     if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s %s - %s not found in BL_GL_ACCOUNT",
		       bl_acc_int_code.arr,
		       bl_pat_blng_grp_id.arr,
		       bl_pat_bill_type_code.arr);

	   loc_log_msg(msg_str);
	   strcpy(msg_str_var,msg_str);
	   upd_folio_unpost_reason();	   
	   return;
     }

bl_pkg1_main_acc1_code.arr[bl_pkg1_main_acc1_code.len] = '\0';
bl_pkg1_main_acc2_code.arr[bl_pkg1_main_acc2_code.len] = '\0';
bl_pkg1_dept_code.arr[bl_pkg1_dept_code.len] = '\0';
bl_pkg1_subledger_group_code.arr[bl_pkg1_subledger_group_code.len] = '\0';
bl_pkg1_subledger_line_code.arr[bl_pkg1_subledger_line_code.len] = '\0';
bl_pkg1_product_group_code.arr[bl_pkg1_product_group_code.len] = '\0';
bl_pkg1_product_line_code.arr[bl_pkg1_product_line_code.len] = '\0';
*/

     EXEC SQL OPEN BL_BILL_TYPE_CUR;
     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_BILL_TYPE_CUR",0,"");

     bl_acc_int_code.arr[0]     = '\0';
     bl_acc_int_code.len        = '\0';
 
     EXEC SQL FETCH BL_BILL_TYPE_CUR
	       INTO :bl_acc_int_code;

     if (OERROR)
	     err_mesg("FETCH failed on cursor BL_BILL_TYPE_CUR",0,"");


     if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s not found in BL_BILL_TYPE_INT",
			  bl_pat_bill_type_code.arr);

	   loc_log_msg(msg_str);
	   strcpy(msg_str_var,msg_str);
	   upd_folio_unpost_reason();	   
	   return;
     }

     bl_acc_int_code.arr[bl_acc_int_code.len] = '\0';

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;
     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");
if (sqlca.sqlcode == 1403) 
    {
    disp_message(ERR_MESG,"NO DATA FOUND IN BL GL ACCOUNT CUR");
    proc_exit();
    }


     bl_pkg2_main_acc1_code.arr[0]            = '\0';
     bl_pkg2_main_acc2_code.arr[0]            = '\0';
     bl_pkg2_dept_code.arr[0]                 = '\0';
     bl_pkg2_subledger_group_code.arr[0]      = '\0';
     bl_pkg2_subledger_line_code.arr[0]       = '\0';
     bl_pkg2_product_group_code.arr[0]        = '\0';
     bl_pkg2_product_line_code.arr[0]         = '\0';

     bl_pkg2_main_acc1_code.len                = 0;
     bl_pkg2_main_acc2_code.len                = 0;
     bl_pkg2_dept_code.len                     = 0;
     bl_pkg2_subledger_group_code.len          = 0;
     bl_pkg2_subledger_line_code.len           = 0;
     bl_pkg2_product_group_code.len            = 0;
     bl_pkg2_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :bl_pkg2_main_acc1_code,
		    :bl_pkg2_main_acc2_code,
		    :bl_pkg2_dept_code,
		    :bl_pkg2_subledger_group_code,
		    :bl_pkg2_subledger_line_code,
		    :bl_pkg2_product_group_code,
		    :bl_pkg2_product_line_code;
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");

     if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s %s not found in BL_GL_ACCOUNT",
			bl_acc_int_code.arr,
			bl_pat_bill_type_code.arr);

	   loc_log_msg(msg_str);
	   return;
     }

bl_pkg2_main_acc1_code.arr[bl_pkg2_main_acc1_code.len] = '\0';
bl_pkg2_main_acc2_code.arr[bl_pkg2_main_acc2_code.len] = '\0';
bl_pkg2_dept_code.arr[bl_pkg2_dept_code.len] = '\0';
bl_pkg2_subledger_group_code.arr[bl_pkg2_subledger_group_code.len] = '\0';
bl_pkg2_subledger_line_code.arr[bl_pkg2_subledger_line_code.len] = '\0';
bl_pkg2_product_group_code.arr[bl_pkg2_product_group_code.len] = '\0';
bl_pkg2_product_line_code.arr[bl_pkg2_product_line_code.len] = '\0';

}

fetch_bl_gl_account_pkg()
{

     EXEC SQL OPEN BL_TYPE_SERV_GRP_CUR;
     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_TYPE_SERV_GRP_CUR",0,"");

     bl_acc_int_code.arr[0]     = '\0';
     bl_acc_int_code.len        = '\0';     


     EXEC SQL FETCH BL_TYPE_SERV_GRP_CUR
	       INTO :bl_acc_int_code;

				if (nd_cust_code.arr[0] != '\0')   /* Added on 26-MAr-2007 for Enhancement */
				{
				 EXEC SQL OPEN BL_TYPE_SERV_GRP_BY_PAYER_CUR;
				 if (OERROR)
				 err_mesg("OPEN failed on cursor BL_TYPE_SERV_GRP_BY_PAYER_CUR",0,"");

				 bl_acc_int_code.arr[0]     = '\0';
				 bl_acc_int_code.len        = '\0';     


				 EXEC SQL FETCH BL_TYPE_SERV_GRP_BY_PAYER_CUR
					   INTO :bl_acc_int_code;

				}
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_TYPE_SERV_GRP_BY_PAYER_CUR",0,"");

/* added on 15-02-2008*/

	 if (LAST_ROW)
				{
				 EXEC SQL OPEN BL_TYPE_SERV_GRP_BY_PAYER_CUR1;
				 if (OERROR)
				 err_mesg("OPEN failed on cursor BL_TYPE_SERV_GRP_BY_PAYER_CUR1",0,"");

				 bl_acc_int_code.arr[0]     = '\0';
				 bl_acc_int_code.len        = '\0';     


				 EXEC SQL FETCH BL_TYPE_SERV_GRP_BY_PAYER_CUR1
					   INTO :bl_acc_int_code;

				}

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_TYPE_SERV_GRP_BY_PAYER_CUR1",0,"");

	 if (LAST_ROW)
				{
				 EXEC SQL OPEN BL_TYPE_SERV_GRP_BY_PAYER_CUR2;
				 if (OERROR)
				 err_mesg("OPEN failed on cursor BL_TYPE_SERV_GRP_BY_PAYER_CUR2",0,"");

				 bl_acc_int_code.arr[0]     = '\0';
				 bl_acc_int_code.len        = '\0';     


				 EXEC SQL FETCH BL_TYPE_SERV_GRP_BY_PAYER_CUR2
					   INTO :bl_acc_int_code;

				}

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_TYPE_SERV_GRP_BY_PAYER_CUR2",0,"");

	 if (LAST_ROW)
				{
				 EXEC SQL OPEN BL_TYPE_SERV_GRP_CUR;
				 if (OERROR)
				 err_mesg("OPEN failed on cursor BL_TYPE_SERV_GRP_CUR",0,"");

				 bl_acc_int_code.arr[0]     = '\0';
				 bl_acc_int_code.len        = '\0';     


				 EXEC SQL FETCH BL_TYPE_SERV_GRP_CUR
					   INTO :bl_acc_int_code;
				}
     
	 if (OERROR)
	 err_mesg("FETCH failed on cursor BL_TYPE_SERV_GRP_CUR",0,"");

/*upto here added on 15-02-2008*/

	 if (ROW_COUNT == 0)
     {
	sprintf(msg_str,"Record for %s - %s not found in BL_TYPE_FOR_SERV_GRP",
			  bl_pat_blng_grp_id.arr,
			  bl_pat_bill_type_code.arr);

	loc_log_msg(msg_str);	   
	strcpy(msg_str_var,msg_str);
	upd_folio_unpost_reason();	   
	return;
     }

     bl_acc_int_code.arr[bl_acc_int_code.len] = '\0';

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;
     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     bl_pkg1_main_acc1_code.arr[0]            = '\0';
     bl_pkg1_main_acc2_code.arr[0]            = '\0';
     bl_pkg1_dept_code.arr[0]                 = '\0';
     bl_pkg1_subledger_group_code.arr[0]      = '\0';
     bl_pkg1_subledger_line_code.arr[0]       = '\0';
     bl_pkg1_product_group_code.arr[0]        = '\0';
     bl_pkg1_product_line_code.arr[0]         = '\0';

     bl_pkg1_main_acc1_code.len                = 0;
     bl_pkg1_main_acc2_code.len                = 0;
     bl_pkg1_dept_code.len                     = 0;
     bl_pkg1_subledger_group_code.len          = 0;
     bl_pkg1_subledger_line_code.len           = 0;
     bl_pkg1_product_group_code.len            = 0;
     bl_pkg1_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :bl_pkg1_main_acc1_code,
		    :bl_pkg1_main_acc2_code,
		    :bl_pkg1_dept_code,
		    :bl_pkg1_subledger_group_code,
		    :bl_pkg1_subledger_line_code,
		    :bl_pkg1_product_group_code,
		    :bl_pkg1_product_line_code;
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s %s - %s not found in BL_GL_ACCOUNT",
		       bl_acc_int_code.arr,
		       bl_pat_blng_grp_id.arr,
		       bl_pat_bill_type_code.arr);

	   loc_log_msg(msg_str);
	   return;
     }

bl_pkg1_main_acc1_code.arr[bl_pkg1_main_acc1_code.len] = '\0';
bl_pkg1_main_acc2_code.arr[bl_pkg1_main_acc2_code.len] = '\0';
bl_pkg1_dept_code.arr[bl_pkg1_dept_code.len] = '\0';
bl_pkg1_subledger_group_code.arr[bl_pkg1_subledger_group_code.len] = '\0';
bl_pkg1_subledger_line_code.arr[bl_pkg1_subledger_line_code.len] = '\0';
bl_pkg1_product_group_code.arr[bl_pkg1_product_group_code.len] = '\0';
bl_pkg1_product_line_code.arr[bl_pkg1_product_line_code.len] = '\0';
     
     
     EXEC SQL OPEN BL_TYPE_BLNG_SERV_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_TYPE_BLNG_SERV_CUR",0,"");

     EXEC SQL FETCH BL_TYPE_BLNG_SERV_CUR
	       INTO :bl_acc_int_code;
    
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_TYPE_BLNG_SERV_CUR",0,"");

     

     if (ROW_COUNT == 0)		/* Added on 26-MAR-2007 for enhancement */
     {
     		
				 EXEC SQL OPEN BL_TYPE_BLNG_SERV_CLSFN_CUR;

				 if (OERROR)
				 err_mesg("OPEN failed on cursor BL_TYPE_BLNG_SERV_CLSFN_CUR",0,"");

				 EXEC SQL FETCH BL_TYPE_BLNG_SERV_CLSFN_CUR
					   INTO :bl_acc_int_code;

				 if (OERROR)
				 err_mesg("FETCH failed on cursor BL_TYPE_BLNG_SERV_CUR",0,"");

				 if (ROW_COUNT == 0)
				 {
						 EXEC SQL OPEN BL_TYPE_BLNG_SERV_GRP_CUR;

						 if (OERROR)
						 err_mesg("OPEN failed on cursor BL_TYPE_BLNG_SERV_CUR",0,"");

						 EXEC SQL FETCH BL_TYPE_BLNG_SERV_GRP_CUR
							   INTO :bl_acc_int_code;
    
						 if (OERROR)
						 err_mesg("FETCH failed on cursor BL_TYPE_BLNG_SERV_CUR",0,"");

						  if (ROW_COUNT == 0)
									 {
						   sprintf(msg_str,"Record for %s - %s not found in BL_TYPE_FOR_BLNG_SERV",
								  bl_pat_blng_serv_code.arr,
								  bl_pat_bill_type_code.arr);

						   loc_log_msg(msg_str);
						   strcpy(msg_str_var,msg_str);
						   upd_folio_unpost_reason();	   
						   return;
									}
				   }
		}
	bl_acc_int_code.arr[bl_acc_int_code.len] = '\0';

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;
     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR - 3",0,"");

     bl_dept_main_acc1_code.arr[0]            = '\0';
     bl_dept_main_acc2_code.arr[0]            = '\0';
     bl_dept_dept_code.arr[0]                 = '\0';
     bl_dept_subledger_group_code.arr[0]      = '\0';
     bl_dept_subledger_line_code.arr[0]       = '\0';
     bl_dept_product_group_code.arr[0]        = '\0';
     bl_dept_product_line_code.arr[0]         = '\0';

     bl_dept_main_acc1_code.len                = 0;
     bl_dept_main_acc2_code.len                = 0;
     bl_dept_dept_code.len                     = 0;
     bl_dept_subledger_group_code.len          = 0;
     bl_dept_subledger_line_code.len           = 0;
     bl_dept_product_group_code.len            = 0;
     bl_dept_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :bl_dept_main_acc1_code,
		    :bl_dept_main_acc2_code,
		    :bl_dept_dept_code,
		    :bl_dept_subledger_group_code,
		    :bl_dept_subledger_line_code,
		    :bl_dept_product_group_code,
		    :bl_dept_product_line_code;
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR - 3",0,"");

     if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s %s - %s not found in BL_GL_ACCOUNT",
			 bl_acc_int_code.arr,
			 bl_pat_blng_serv_code.arr,
			 bl_pat_bill_type_code.arr);

	   loc_log_msg(msg_str);
	   return;
     }

bl_dept_main_acc1_code.arr[bl_dept_main_acc1_code.len] = '\0';
bl_dept_main_acc2_code.arr[bl_dept_main_acc2_code.len] = '\0';
bl_dept_dept_code.arr[bl_dept_dept_code.len] = '\0';
bl_dept_subledger_group_code.arr[bl_dept_subledger_group_code.len] = '\0';
bl_dept_subledger_line_code.arr[bl_dept_subledger_line_code.len] = '\0';
bl_dept_product_group_code.arr[bl_dept_product_group_code.len] = '\0';
bl_dept_product_line_code.arr[bl_dept_product_line_code.len] = '\0';

}

create_bl_gl_dist_dept()
{

    if( (bl_store_episode_type.arr[0] == 'I' && d_ip_gl_yn == 'N') ||
        (bl_store_episode_type.arr[0] == 'D' && d_ip_gl_yn == 'N') ||  
	(bl_store_episode_type.arr[0] == 'O' && d_op_gl_yn == 'N') ||
	(bl_store_episode_type.arr[0] == 'E' && d_op_gl_yn == 'N') ||
	(bl_store_episode_type.arr[0] == 'R' && d_rf_gl_yn == 'N') )
	{
	return;
	}

	nd_post_month.arr[0] = '\0';
	nd_post_month.len = 0;

        nd_post_year.arr[0] = '\0';
	nd_post_year.len = 0;

        exec sql select nvl(acc_per_year, to_char(to_date(:bl_store_trx_date,'DD/MM/YYYY'),'YYYY')),
        nvl(acc_per_month,to_char(to_date(:bl_store_trx_date,'DD/MM/YYYY'),'MM'))  
	into :nd_post_year, :nd_post_month
	from sy_acc_period_defn
	where to_date(:bl_store_trx_date,'DD/MM/YYYY') 
	between acc_per_start_date and acc_per_end_date;	

	nd_post_month.arr[nd_post_month.len] = '\0';
	nd_post_year.arr[nd_post_year.len] = '\0';


    if(bl_tot_disc_amt != 0) 
	{
   

		l_temp_narration.arr[0] = '\0';
		l_temp_narration.len = 0;

		if((strcmp(l_cash_ctrl_rcpt_in_use.arr,"Y")==0) && (strcmp(l_allow_unbilled_folio.arr,"Y")==0) &&
		   (nd_pre_doc_type_code.arr[0]=='\0'))
		{
			strcpy(l_temp_narration.arr,l_unbilled_remarks.arr);
			l_temp_narration.len = strlen(l_temp_narration.arr);
		}

    
	EXEC SQL INSERT INTO BL_GL_DISTRIBUTION
		  (
		    OPERATING_FACILITY_ID,
		    MAIN_ACC1_CODE,
		    MAIN_ACC2_CODE,
		    DEPT_CODE,
		    SUBLEDGER_GROUP_CODE,
		    SUBLEDGER_LINE_CODE,
		    PRODUCT_GROUP_CODE,
		    PRODUCT_LINE_CODE,
		    POST_YEAR,           /*  accepted */
		    POST_MONTH,           /*  accepted */
		    TRX_DATE,            /* from pat */
		    TRX_DOC_REF,            /* from pat */
		    TRX_DOC_REF_LINE_NUM,/*   0    */
		    TRX_DOC_REF_SEQ_NUM,/*   0    */
		    EPISODE_TYPE,       /* from pat */
		    PATIENT_ID,       /* from pat */
		    EPISODE_ID,       /* from pat */
		    VISIT_ID,       /* from pat */
		    SOURCE_DOC_REF,     /*   NULL       */
		    SOURCE_DOC_DATE,    /*   NULL       */
		    NARRATION,          /*   NULL       */
		    TRX_TYPE_CODE,      /*   F          */
		    DISTRIBUTION_AMT,   /*   net      */
		    GL_INTERFACE_BY_ID, /* NULL */
		    GL_INTERFACE_DATE, /* NULL */
		    GL_INTERFACE_FLAG,   /*   N  */
		    ADDED_BY_ID,
		    MODIFIED_BY_ID,         
	        ADDED_DATE,             
            MODIFIED_DATE,          
            ADDED_AT_WS_NO,         
            ADDED_FACILITY_ID,      
            MODIFIED_AT_WS_NO,      
            MODIFIED_FACILITY_ID,
	   	    CASH_CTRL_DOC_TYPE,     
		    CASH_CTRL_DOC_NUMBER,   
		    CASH_CTRL_DOC_DATE,
		    CUST_CODE     		        	
	       )
	   VALUES
	      (
		   :nd_operating_facility_id,
		   :bl_pkg1_main_acc1_code,
		   :bl_pkg1_main_acc2_code,
		   :bl_pkg1_dept_code,
		   :bl_pkg1_subledger_group_code,
		   :bl_pkg1_subledger_line_code,
		   :bl_pkg1_product_group_code,
		   :bl_pkg1_product_line_code,
		   /*
		   :nd_year,
		   :nd_month,
		   */
		   nvl(:nd_post_year,TO_CHAR(TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),'YYYY')),
		   nvl(:nd_post_month,TO_CHAR(TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),'MM')),
		   TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),
		   :bl_store_trx_doc_ref,
		   DECODE(:l_group_posting_yn,'Y',0,:bl_store_trx_doc_ref_line_no),
		   DECODE(:l_group_posting_yn,'Y',0,:bl_store_trx_doc_ref_seq_no),
		   :bl_store_episode_type,
		   :bl_store_patient_id,
		   :bl_store_episode_id,
		   :bl_store_visit_id,
		   NULL,
		   NULL,
		   :l_temp_narration,
		   'F',
		   :bl_tot_disc_amt,
		   NULL,
		   NULL,
		   'N',
		   user,
		   user,
		   sysdate,
		   sysdate,
		   :nd_ws_no,
		   :nd_operating_facility_id,
		   :nd_ws_no,
		   :nd_operating_facility_id,
	       :nd_pre_doc_type_code,
		   :nd_pre_doc_num,
		   :nd_pre_doc_date,
		   :nd_pre_cust_code
		 );

	
	if (OERROR)
	     err_mesg("INSERT failed on table BL_GL_DISTRIBUTION - 2",0,"");
    }

	l_temp_narration.arr[0] = '\0';
	l_temp_narration.len = 0;

	if((strcmp(l_cash_ctrl_rcpt_in_use.arr,"Y")==0) && (strcmp(l_allow_unbilled_folio.arr,"Y")==0) &&
	   (nd_pre_doc_type_code.arr[0]=='\0'))
	{
		strcpy(l_temp_narration.arr,l_unbilled_remarks.arr);
		l_temp_narration.len = strlen(l_temp_narration.arr);
	}

    EXEC SQL INSERT INTO BL_GL_DISTRIBUTION
	      (

		OPERATING_FACILITY_ID,
		MAIN_ACC1_CODE,
		MAIN_ACC2_CODE,
		DEPT_CODE,
		SUBLEDGER_GROUP_CODE,
		SUBLEDGER_LINE_CODE,
		PRODUCT_GROUP_CODE,
		PRODUCT_LINE_CODE,
		POST_YEAR,           /*  accepted */
		POST_MONTH,           /*  accepted */
		TRX_DATE,            /* from pat */
		TRX_DOC_REF,            /* from pat */
		TRX_DOC_REF_LINE_NUM,/*   0    */
		TRX_DOC_REF_SEQ_NUM,/*   0    */
		EPISODE_TYPE,       /* from pat */
		PATIENT_ID,       /* from pat */
		EPISODE_ID,       /* from pat */
		VISIT_ID,       /* from pat */
		SOURCE_DOC_REF,     /*   NULL       */
		SOURCE_DOC_DATE,    /*   NULL       */
		NARRATION,          /*   NULL       */
		TRX_TYPE_CODE,      /*   F          */
		DISTRIBUTION_AMT,   /*   tot_gross * -1     */
		GL_INTERFACE_BY_ID, /* NULL */
		GL_INTERFACE_DATE, /* NULL */
		GL_INTERFACE_FLAG,  /*   N  */
		ADDED_BY_ID,
		MODIFIED_BY_ID,         
		ADDED_DATE,             
		MODIFIED_DATE,          
		ADDED_AT_WS_NO,         
		ADDED_FACILITY_ID,      
		MODIFIED_AT_WS_NO,      
		MODIFIED_FACILITY_ID,
		CASH_CTRL_DOC_TYPE,     
		CASH_CTRL_DOC_NUMBER,   
		CASH_CTRL_DOC_DATE,
		CUST_CODE
	   )
       VALUES
	  (
	       :nd_operating_facility_id,	
	       :bl_dept_main_acc1_code,
	       :bl_dept_main_acc2_code,
	       :bl_dept_dept_code,
	       :bl_dept_subledger_group_code,
	       :bl_dept_subledger_line_code,
	       :bl_dept_product_group_code,
	       :bl_dept_product_line_code,
	       /*
	       :nd_year,
	       :nd_month,
	       */
	       nvl(:nd_post_year, TO_CHAR(TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),'YYYY')),
	       nvl(:nd_post_month, TO_CHAR(TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),'MM')),
	       TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),
	       :bl_store_trx_doc_ref,
		   DECODE(:l_group_posting_yn,'Y',0,:bl_store_trx_doc_ref_line_no),
		   DECODE(:l_group_posting_yn,'Y',0,:bl_store_trx_doc_ref_seq_no),
	       :bl_store_episode_type,
	       :bl_store_patient_id,
	       :bl_store_episode_id,
	       :bl_store_visit_id,
	       NULL,
	       NULL,
	       :l_temp_narration,
	       'F',
	       -1 * :bl_tot_gross_charge_amt,
	       NULL,
	       NULL,
	       'N',
	       user,
	       user,
	       sysdate,
	       sysdate,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       :nd_pre_doc_type_code,
	       :nd_pre_doc_num,
    	   :nd_pre_doc_date,
	       :nd_pre_cust_code
	   );


       if (OERROR)
       err_mesg("INSERT failed on table BL_GL_DISTRIBUTION",0,"");

}

create_bl_gl_dist_trx_ref()
{

    if( (bl_store_episode_type.arr[0] == 'I' && d_ip_gl_yn == 'N') ||
        (bl_store_episode_type.arr[0] == 'D' && d_ip_gl_yn == 'N') || 
	(bl_store_episode_type.arr[0] == 'O' && d_op_gl_yn == 'N') ||
        (bl_store_episode_type.arr[0] == 'E' && d_op_gl_yn == 'N') ||
	(bl_store_episode_type.arr[0] == 'R' && d_rf_gl_yn == 'N') )
	 return;	
	
	if (bl_store_trx_doc_ref.arr[0] == '\0')
			return;	

	nd_post_month.arr[0] = '\0';
	nd_post_month.len = 0;

        nd_post_year.arr[0] = '\0';
	nd_post_year.len = 0;
	

        exec sql select nvl(acc_per_year, to_char(to_date(:bl_store_trx_date,'DD/MM/YYYY'),'YYYY')),
        nvl(acc_per_month,to_char(to_date(:bl_store_trx_date,'DD/MM/YYYY'),'MM'))  
	into :nd_post_year, :nd_post_month
	from sy_acc_period_defn
	where to_date(:bl_store_trx_date,'DD/MM/YYYY') 
	between acc_per_start_date and acc_per_end_date;	

	nd_post_month.arr[nd_post_month.len] = '\0';
	nd_post_year.arr[nd_post_year.len] = '\0';

	l_temp_narration.arr[0] = '\0';
	l_temp_narration.len = 0;

	if((strcmp(l_cash_ctrl_rcpt_in_use.arr,"Y")==0) && (strcmp(l_allow_unbilled_folio.arr,"Y")==0) &&
	   (nd_pre_doc_type_code.arr[0]=='\0'))
	{
		strcpy(l_temp_narration.arr,l_unbilled_remarks.arr);
		l_temp_narration.len = strlen(l_temp_narration.arr);
	}	


    EXEC SQL INSERT INTO BL_GL_DISTRIBUTION
	      (
		OPERATING_FACILITY_ID,
		MAIN_ACC1_CODE,
		MAIN_ACC2_CODE,
		DEPT_CODE,
		SUBLEDGER_GROUP_CODE,
		SUBLEDGER_LINE_CODE,
		PRODUCT_GROUP_CODE,
		PRODUCT_LINE_CODE,
		POST_YEAR,           /*  accepted */
		POST_MONTH,           /*  accepted */
		TRX_DATE,            /* from pat */
		TRX_DOC_REF,            /* from pat */
		TRX_DOC_REF_LINE_NUM,/*   0    */
		TRX_DOC_REF_SEQ_NUM,/*   0    */
		EPISODE_TYPE,       /* from pat */
		PATIENT_ID,       /* from pat */
		EPISODE_ID,       /* from pat */
		VISIT_ID,       /* from pat */
		SOURCE_DOC_REF,     /*   NULL       */
		SOURCE_DOC_DATE,    /*   NULL       */
		NARRATION,          /*   NULL       */
		TRX_TYPE_CODE,      /*   F          */
		DISTRIBUTION_AMT,   /*   bl_tot_disc_amt, */
		GL_INTERFACE_BY_ID, /* NULL */
		GL_INTERFACE_DATE, /* NULL */
		GL_INTERFACE_FLAG,   /*   N  */
		ADDED_BY_ID,
		MODIFIED_BY_ID,         
	        ADDED_DATE,             
                MODIFIED_DATE,          
                ADDED_AT_WS_NO,         
                ADDED_FACILITY_ID,      
                MODIFIED_AT_WS_NO,      
                MODIFIED_FACILITY_ID    	,
	 	CASH_CTRL_DOC_TYPE,     
		CASH_CTRL_DOC_NUMBER,   
		CASH_CTRL_DOC_DATE,
		CUST_CODE     		        	   	
	   )
       VALUES
	  (
	        :nd_operating_facility_id,	
	        :bl_pkg2_main_acc1_code,
	        :bl_pkg2_main_acc2_code,
	        :bl_pkg2_dept_code,
	        :bl_pkg2_subledger_group_code,
	        :bl_pkg2_subledger_line_code,
	        :bl_pkg2_product_group_code,
	        :bl_pkg2_product_line_code,
	       /*
	       :nd_year,
	       :nd_month,
	       */
	        nvl(:nd_post_year, TO_CHAR(TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),'YYYY')),
	        nvl(:nd_post_month, TO_CHAR(TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),'MM')),
	        TO_DATE(:bl_store_trx_date,'DD/MM/YYYY'),
	       :bl_store_trx_doc_ref,
		   DECODE(:l_group_posting_yn,'Y',0,:bl_store_trx_doc_ref_line_no),
		   DECODE(:l_group_posting_yn,'Y',0,:bl_store_trx_doc_ref_seq_no),
	       :bl_store_episode_type,
	       :bl_store_patient_id,
	       :bl_store_episode_id,
	       :bl_store_visit_id,
	       NULL,
	       NULL,
	       :l_temp_narration,
	       'F',
	       :bl_tot_net_charge_amt,
	       NULL,
	       NULL,
	       'N',
	       user,
	       user,
	       sysdate,
	       sysdate,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       :nd_pre_doc_type_code,
	       :nd_pre_doc_num,
	       :nd_pre_doc_date,
	       :nd_pre_cust_code
	     );

       if (OERROR)
		err_mesg("INSERT failed on table BL_GL_DISTRIBUTION - 3",0,"");
}

continue_to_next_ref()
{
    EXEC SQL ROLLBACK WORK TO SAVEPOINT LAST_DOC_REF;
    if (OERROR)
		err_mesg("ROLLBACK TO LAST_DOC_REF failed",0,""); 
}

upd_pat_chg_folio()
{


EXEC SQL UPDATE /*+INDEX(BL_PATIENT_CHARGES_FOLIO BL_PATIENT_CHARGES_FOLIO_I1) USE BL_PATIENT_CHARGES_FOLIO_I1*/ 
	     BL_PATIENT_CHARGES_FOLIO
	     SET DF_UPD_FLAG = DECODE(DF_SERVICE_IND,'D','Y',DF_UPD_FLAG),
	     TRX_POSTED_IND			= 'Y',
	     POSTED_BY_ID			=  USER,
	     POSTED_DATE			=  SYSDATE,
	     MODIFIED_BY_ID			= user,
	     MODIFIED_DATE			= SYSDATE,
	     ADDED_AT_WS_NO			= :nd_ws_no,
	     ADDED_FACILITY_ID		= :nd_operating_facility_id,
	     MODIFIED_AT_WS_NO		= :nd_ws_no,
	     MODIFIED_FACILITY_ID	= :nd_operating_facility_id,
	     UNPOSTED_REASON			= NULL,
	     ACCT_DEPT_CODE = DECODE(ACCT_DEPT_CODE,null,:bl_pat_acct_dept_code,ACCT_DEPT_CODE),
	     ORIG_DEPT_CODE = decode(ORIG_DEPT_CODE, null,:bl_pat_orig_dept_code,ORIG_DEPT_CODE)
	WHERE OPERATING_FACILITY_ID	= :nd_operating_facility_id
	AND TRX_DOC_REF = :bl_store_trx_doc_ref
	AND TRX_DOC_REF_LINE_NUM	= TRX_DOC_REF_LINE_NUM 
	AND TRX_DOC_REF_SEQ_NUM		= TRX_DOC_REF_SEQ_NUM  
	AND NVL(TRX_POSTED_IND,'X') = 'N'	
	AND TRX_DATE	  <= TO_DATE(:nd_post_upto_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS')
	AND NVL(TRX_FINALIZE_IND,'N') = 'Y'
	AND (EPISODE_TYPE not in ('O','E') OR 
	(EPISODE_TYPE  in ('O','E') AND NVL(AVAILED_IND,'N') NOT IN ('Y','U','C')));




	EXEC SQL UPDATE BL_PATIENT_CHARGES_FOLIO
	SET DF_UPD_FLAG			= 'Y',
	TRX_POSTED_IND			= 'Y',
	MODIFIED_BY_ID			= user,
	MODIFIED_DATE			= SYSDATE,
	ADDED_AT_WS_NO			= :nd_ws_no,
	ADDED_FACILITY_ID		= :nd_operating_facility_id,
	MODIFIED_AT_WS_NO		= :nd_ws_no,
	MODIFIED_FACILITY_ID   = :nd_operating_facility_id,
	UNPOSTED_REASON		= NULL,
	ACCT_DEPT_CODE = DECODE(ACCT_DEPT_CODE,null,:bl_pat_acct_dept_code,ACCT_DEPT_CODE),
	ORIG_DEPT_CODE = decode(ORIG_DEPT_CODE, null,:bl_pat_orig_dept_code,ORIG_DEPT_CODE)
	WHERE ROWID	= :bl_pat_rowid;


     if (OERROR)
		err_mesg("UPDATE failed on table BL_PATIENT_CHARGES_FOLIO",0,"");
}

lock_trx_ref()
{
	bl_pat_rowid.arr[0] = '\0';
	bl_pat_rowid.len = 0;

   EXEC SQL OPEN LOCK_TRX_REF_CUR;

   if (RESOURCE_BUSY)
   {
	 sprintf(msg_str,"Patient Charges folio rec %s-%s-%s is busy",
					  bl_pat_trx_doc_ref.arr,
					  bl_pat_trx_doc_ref_line_num.arr,
					  bl_pat_trx_doc_ref_seq_num.arr);
	 lock_msg(msg_str);
	 return (0);
   }
   else if (OERROR)
	 err_mesg("OPEN failed on cursor LOCK_TRX_REF_CUR",0,"");

	EXEC SQL FETCH lock_trx_ref_cur
	          INTO :bl_pat_rowid;

    if (OERROR)
		err_mesg("FETCH failed on CURSOR lock_trx_ref_cur",0,"");

	bl_pat_rowid.arr[bl_pat_rowid.len] = '\0';

	return 1;
}

loc_log_msg(str)
char str[];
{
  disp_message(INFO_MESG, str);
  if (strlen(str) > 70)
      str[70] = '\0';
  if (err_ctr == 0)
       continue_to_next_ref();
  log_err_mesg(str,0,"");
  err_ctr++;
}

lock_msg(str)
char str[];
{
  if (strlen(str) > 70)
      str[70] = '\0';
  log_err_mesg(str,0,"");
}


trx_ref_break()
{



    if (rec_ctr!=1||strcmp(l_group_posting_yn.arr,"N")==0)
    {
		//if(strcmp("OR-IPEN0404-00000136",bl_pat_trx_doc_ref.arr))
		
		 //strcpy(store_acct_dept_code.arr,bl_pat_acct_dept_code.arr); //HARI
		//store_acct_dept_code.len = strlen(store_acct_dept_code.arr);//HARI
	  				
			
		dept_break();

		if (!err_ctr)
		{
			//if(strcmp("OR-IPEN0404-00000136",bl_pat_trx_doc_ref.arr))
	

			create_bl_gl_dist_trx_ref();

			upd_pat_chg_folio();



			err_ctr = 0;
		}

		EXEC SQL COMMIT WORK;
	   
		if (OERROR)
	      err_mesg("COMMIT failed",0,""); 
	}


    
	err_ctr					= 0;
    bl_tot_gross_charge_amt = 0;
    bl_tot_disc_amt			= 0;
    bl_tot_net_charge_amt	= 0;

    EXEC SQL SAVEPOINT LAST_DOC_REF;

    if (OERROR)
		err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

	  strcpy(bl_store_trx_doc_ref.arr,bl_pat_trx_doc_ref.arr);
	  bl_store_trx_doc_ref.len = strlen(bl_store_trx_doc_ref.arr);

	  strcpy(bl_store_trx_doc_ref_line_no.arr,bl_pat_trx_doc_ref_line_num.arr);
	  bl_store_trx_doc_ref_line_no.len = strlen(bl_store_trx_doc_ref_line_no.arr);
	  
	  strcpy(bl_store_trx_doc_ref_seq_no.arr,bl_pat_trx_doc_ref_seq_num.arr);
	  bl_store_trx_doc_ref_seq_no.len = strlen(bl_store_trx_doc_ref_seq_no.arr);

	  strcpy(bl_store_trx_date.arr,bl_pat_trx_date.arr);
	  bl_store_trx_date.len = strlen(bl_store_trx_date.arr);

	  strcpy(bl_store_episode_type.arr,bl_pat_episode_type.arr);
	  bl_store_episode_type.len = strlen(bl_store_episode_type.arr);

	  strcpy(bl_store_patient_id.arr,bl_pat_patient_id.arr);
	  bl_store_patient_id.len = strlen(bl_store_patient_id.arr);

	  strcpy(bl_store_episode_id.arr,bl_pat_episode_id.arr);
	  bl_store_episode_id.len = strlen(bl_store_episode_id.arr);

	  strcpy(bl_store_visit_id.arr,bl_pat_visit_id.arr);
	  bl_store_visit_id.len = strlen(bl_store_visit_id.arr);

	  strcpy(store_concat_code.arr,bl_pat_concat_code.arr);
	  store_concat_code.len = strlen(store_concat_code.arr);

	  strcpy(store_acct_dept_code.arr,bl_pat_acct_dept_code.arr);
	  store_acct_dept_code.len = strlen(store_acct_dept_code.arr);

	  fetch_bl_gl_account_trx_ref();
	 

		
	  if (rec_ctr != 1)
	     fetch_bl_gl_account_pkg();


}


concat_break()
{
				
			
       dept_break();
       //commented and moved couple of line down.
	   //fetch_bl_gl_account_pkg();
       strcpy(store_concat_code.arr,bl_pat_concat_code.arr);
       store_concat_code.len = strlen(store_concat_code.arr);
	 //change made by Harish on 03/09/2002 for 
	 //dept code issue

	 
	 fetch_bl_gl_account_pkg();
}

dept_break()
{




    if (store_acct_dept_code.arr[0] != '\0')
    {
       if (!err_ctr)
       {
	 	if (rec_ctr != 1)
	 	{
	     		create_bl_gl_dist_dept();
	     		bl_tot_gross_charge_amt = 0;
	     		bl_tot_disc_amt         = 0;
	 	}
       }
     }



     strcpy(store_acct_dept_code.arr,bl_pat_acct_dept_code.arr);
     store_acct_dept_code.len = strlen(store_acct_dept_code.arr);
	 //Introduced by Harish 03/09/2002 for 
	 //dept code issue
     

     fetch_bl_gl_account_pkg();



}

upd_reasons_in_folio_for_unposting()
{
        /*
	If folio is unbilled, there will be no bill and hence no cash control against the folio
	service. So to facilitate posting of unbilled records, the below conditions were commented.
	 */

	 nd_reason_text.arr[0] =  '\0';
	 nd_reason_text.len    = 0;

	 if((strcmp(l_cash_ctrl_rcpt_in_use.arr,"Y")==0) && (strcmp(l_allow_unbilled_folio.arr,"N")==0) && nd_can_rec_ctr == 0)
	 {		  
		 if (nd_doc_type_code.arr[0] == '\0' &&  nd_cash_control_use_flag == 'Y')
			   strcpy(nd_reason_text.arr,"No Cash Control Document Type is available for this record");     
		 
		 else if (nd_doc_num.arr[0] == '\0' && nd_cash_control_use_flag == 'Y')
			   strcpy(nd_reason_text.arr,"No Cash Control Document Number is available for this record");     
		 
		 else if (nd_doc_date.arr[0] == '\0' && nd_cash_control_use_flag == 'Y')
			   strcpy(nd_reason_text.arr,"No Cash Control Document Date is available for this record");     

		 else if (nd_cash_counter_code.arr[0] == '\0')
			strcpy(nd_reason_text.arr,"No cash counter code is available in this record");  
		
		 else if (nd_shift_id.arr[0] == '\0')
			   strcpy(nd_reason_text.arr,"No Shift Id is available for this record");     
          } 
	  
	  if (bl_pat_orig_dept_code.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No original Dept code is available for this record");     		
      
	  else if (bl_pat_physician_id.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Physician Id is available for this record");     		
      
	  else if (bl_pat_blng_class_code.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Billing Class Code is available for this record");     		

	  else if (bl_pat_bill_type_code.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Bill Type Code is available for this record");     							   

	  else if (bl_pat_service_date.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Service Date is available for this record");     		
           
	  else if (bl_pat_blng_serv_code.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Billing Service Code is available for this record");     		
           
	  else if (bl_pat_episode_type.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Episode Type is available for this record");     		
           
	  else if (bl_pat_settlement_ind.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Settlement Indicator is available for this record");     		
           
	  else if (bl_pat_blng_grp_id.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Billing Group Id  is available for this record");     		
           
	  else if (bl_pat_patient_id.arr[0] == '\0')
           strcpy(nd_reason_text.arr,"No Patient Id  is available for this record");    

	  else if (nd_confirmed_yn.arr[0] != 'Y' && nd_reason_text.arr[0] == '\0' &&
	       strcmp(nd_trx_status.arr,"C") != 0 && strcmp(l_cash_ctrl_rcpt_in_use.arr,"Y") !=0 )
	   {
	   strcpy(nd_reason_text.arr,"Billing Service is not confirmed");     			   
	   }  
	   nd_reason_text.len = strlen(nd_reason_text.arr);	

	  if (nd_reason_text.arr[0])  
	   {
		l_temp_reason.len		= 0;
		l_temp_reason.arr[0]	= '\0';	
			
		strcpy(l_temp_reason.arr,nd_reason_text.arr);
		l_temp_reason.len = strlen(l_temp_reason.arr);	

		strcat(l_temp_reason.arr,"-");
		l_temp_reason.len = strlen(l_temp_reason.arr);		
		  
		strcat(l_temp_reason.arr,bl_pat_trx_doc_ref.arr);
		l_temp_reason.len = strlen(l_temp_reason.arr);		

		loc_log_msg(l_temp_reason.arr);         
		//return;
          } 

      

     if (nd_reason_text.len>0)
     {
		 /*
		   This is a folio posting program and hence Bills records need not be 
		   updated with Unposted Reason - 27/01/2004 Harish.	


		 EXEC SQL UPDATE BL_BILL_HDR
			  SET  UNPOSTED_REASON = :nd_reason_text,
			   BILL_POSTED_FLAG = 'N',  
			   MODIFIED_BY_ID             = user,
				   MODIFIED_DATE          = SYSDATE,
				   MODIFIED_AT_WS_NO      = :nd_ws_no,
			   MODIFIED_FACILITY_ID       = :nd_operating_facility_id
				  WHERE DOC_TYPE_CODE     = :bl_pat_bill_doc_type_code
			  AND   DOC_NUM	   = :bl_pat_bill_doc_num ;


		if (OERROR)
			err_mesg("UPDATE failed on table BL_BILL_HDR",0,"");*/

		//sprintf(l_mesg,"Trx Doc Ref : %s   Cash Counter Code : %s   Shift Id : %s   Doc Type Code/Num/Date : %s %s %s",bl_pat_trx_doc_ref.arr, nd_cash_counter_code.arr, nd_shift_id.arr, nd_doc_type_code.arr, nd_doc_num.arr, nd_doc_date.arr);
		//disp_message(ERR_MESG,l_mesg);


		EXEC SQL UPDATE /*+INDEX(BL_PATIENT_CHARGES_FOLIO BL_PATIENT_CHARGES_FOLIO_I1) USE BL_PATIENT_CHARGES_FOLIO_I1*/ 
				 BL_PATIENT_CHARGES_FOLIO
		     SET UNPOSTED_REASON		= SUBSTR(:nd_reason_text,1,50),
		         TRX_POSTED_IND			= 'N',
		    	 MODIFIED_BY_ID			= USER,
	             MODIFIED_DATE			= SYSDATE,
	             MODIFIED_AT_WS_NO		= :nd_ws_no,
		    	 MODIFIED_FACILITY_ID   = :nd_operating_facility_id
		   WHERE trx_doc_ref			= :bl_pat_trx_doc_ref
		     AND trx_doc_ref_line_num	= :bl_pat_trx_doc_ref_line_num
			 AND trx_doc_ref_seq_num	= :bl_pat_trx_doc_ref_seq_num;

		//WHERE ROWID				= :bl_pat_rowid;
		   //Rowid should not be used in this place....Rowid not fetched at this place...it is 
		   //fetched after this place...so always old rowid will be updated here.
		   //Commented by Harish on 05/05/2004
		if (OERROR)
		   err_mesg("UPDATE failed on table BL_PATIENT_CHARGES_FOLIO",0,"");
    }
}

upd_folio_unpost_reason()
{

///*+INDEX(BL_PATIENT_CHARGES_FOLIO BL_PATIENT_CHARGES_FOLIO_I1) USE BL_PATIENT_CHARGES_FOLIO_I1*/ 
/*PRAGMA AUTONOMOUS_TRANSACTION;*/

EXEC SQL EXECUTE 
BEGIN

	UPDATE BL_PATIENT_CHARGES_FOLIO
	SET UNPOSTED_REASON		= substr(:msg_str_var,1,50)
	WHERE operating_facility_id = :nd_operating_facility_id
	AND trx_doc_ref		= :bl_pat_trx_doc_ref
	AND trx_doc_ref_line_num	= :bl_pat_trx_doc_ref_line_num
	AND trx_doc_ref_seq_num	= :bl_pat_trx_doc_ref_seq_num;	
exception
when others then 
	null;
END;
END-EXEC; 

}


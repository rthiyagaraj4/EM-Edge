#include <stdio.h>
#include <string.h>
#include "bl.h"
#include "gl.h"
         
#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define VIEW_LOG_FILE 1

EXEC SQL BEGIN DECLARE SECTION;
    VARCHAR hosp_name                              [120],
	    date_time                                  [20],
	    user_id                                    [40],
	    nd_pwd 										[91],
	    nd_session_id                              [16],
	    nd_pgm_date                                [25],
	    d_curr_pgm_name                            [15],
	    nd_operating_facility_id					[3],
	    nd_operating_facility						[3],
	    nd_price_id								   [21],
	    nd_fm_date								   [11],
		nd_fm_date1								   [12],
	    nd_to_date								   [11],
	    ERROR_MSG								 [1000];   
 
    VARCHAR d_mi_code					[120],
			d_mi_trade					[120],   //added on 29/01/2008
			d_item_code					[61],
			d_trade_id					[61],    //added on 29/01/2008
			l_pcode						[61],
			d_effe_fm_date				[11],
			l_max_date					[21],
			l_fm_date					[21],
			d_public_price				[6],
			d_inpatient_price			[6],
			d_outpatient_price			[6],
			d_external_price			[6],
			d_emergency_price			[6],
			d_daycare_price				[6],
			nd_lang_id					[4],
			nd_temp_date				[20],
			nd_loc_date					[20],
			date_convert				[20],
			nd_msg1						[2000],
			nd_msg2						[2000],
			nd_msg3						[2000],
			nd_msg4						[2000],
			nd_msg5						[2000],
			nd_msg6						[2000],
			nd_msg7						[2000],
			nd_msg8						[2000],  //added on 29/01/2008
			nd_msg9						[2000],
			nd_msg19						[2000],
			nd_msg10					[2000],
			nd_msg11					[2000],
			nd_msg12					[2000],
			nd_msg13					[2000],
			nd_msg14	  				[2000],
			nd_msg15					[2000],
			nd_msg16					[2000],
			d_inp_reimbursable_yn		[4],
			d_oth_reimbursable_yn		[4],
			d_inp_reimbursable_ind		[4], 
	        d_oth_reimbursable_ind		[4],
			d_oth_reimbursable_amt		[6],
			d_inp_reimbursable_amt		[6], 
			d_inp_override_reimbursable_yn[4],
			d_oth_override_reimbursable_yn[4];   
    
    char filename[150];
	int	l_pr_id,l_cnt,l_err;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 4)
    {
		int i = 0;
		disp_message(ERR_MESG,"Not enough Parameters for running this program");
		proc_exit();
    }
 
    strcpy(g_pgm_id,"BLITMUPL");

    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

	EXEC SQL CONNECT :nd_pwd;
	if(OERROR)
    {
		disp_message(ERR_MESG,"Error in connecting to Oracle");
		proc_exit();
    }

	set_meduser_role();

	strcpy(nd_lang_id.arr,l_language_id.arr);
    nd_lang_id.len = l_language_id.len;

	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    strcpy(nd_operating_facility_id.arr,argv[4]);
    nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr);  



    strcpy(g_facility_id,nd_operating_facility_id.arr);    

    fetch_prog_param();

	declare_cursor();

	open_cursor();

	open_file();

	declare_cursor1();

	declare_cursor2();  //added on 29/01/2008

	create_log_file();

	close_cursor();

	close_file();

}

fetch_prog_param()
{
	nd_operating_facility.arr[0]	= '\0';
	nd_fm_date.arr[0]			= '\0';
	nd_to_date.arr[0]			= '\0';
	nd_price_id.arr[0]			= '\0';
	
  EXEC SQL SELECT PARAM1,
			PARAM2,
			PARAM3 
	   INTO :nd_operating_facility,
			:nd_fm_date,
			:nd_price_id
	   FROM SY_PROG_PARAM
	   WHERE OPERATING_FACILITY_ID   = :nd_operating_facility_id
		 AND   PGM_ID                = :d_curr_pgm_name
		 AND   TO_CHAR(SESSION_ID)   = :nd_session_id
		 AND   PGM_DATE              = :nd_pgm_date; 

	if (OERROR)
		err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

	if (NOT_FOUND)
		err_mesg("No Record found in SY_PROG_PARAM",0,"");

      
   EXEC SQL DELETE SY_PROG_PARAM WHERE OPERATING_FACILITY_ID =  :nd_operating_facility_id
		 AND   PGM_ID                = :d_curr_pgm_name
		 AND   SESSION_ID            = :nd_session_id
		 AND   PGM_DATE              = :nd_pgm_date; 

   if (OERROR)
	err_mesg("DELETION failed on table SY_PROG_PARAM",0,"");
}

declare_cursor()
{
	EXEC SQL DECLARE C_BL_UPLOAD CURSOR FOR 
		SELECT	ITEM_CODE,
			TRADE_ID,
			TO_CHAR(PUBLIC_PRICE),
			TO_CHAR(INPATIENT_PRICE),
			TO_CHAR(OUTPATIENT_PRICE),
			TO_CHAR(EXTERNAL_PRICE),
			TO_CHAR(EMERGENCY_PRICE),
			TO_CHAR(DAYCARE_PRICE),
			INP_REIMBURSABLE_YN,
			INP_REIMBURSABLE_IND, 
			TO_CHAR(INP_REIMBURSABLE_AMT), 
			INP_OVERRIDE_REIMBURSABLE_YN, 
			OTH_REIMBURSABLE_YN, 
			OTH_REIMBURSABLE_IND, 
			TO_CHAR(OTH_REIMBURSABLE_AMT), 
			OTH_OVERRIDE_REIMBURSABLE_YN
		FROM	BL_UPLOAD_ITEM_TRADE_PRICE_EXT; 
}

declare_cursor1()
{
	EXEC SQL DECLARE C_MM_UPLOAD CURSOR FOR
		SELECT ITEM_CODE FROM MM_ITEM WHERE ITEM_CODE =:d_item_code;
}

declare_cursor2()                                                          //added on 29/01/2008
{
	EXEC SQL DECLARE C_MM_TRADE CURSOR FOR
		SELECT TRADE_ID FROM BL_ST_ITEM_TRADE_NAME_VW  WHERE TRADE_ID = :d_trade_id and ITEM_CODE = :d_item_code;
}                                                                          //added on 29/01/2008
 
open_cursor()
{
	EXEC SQL OPEN C_BL_UPLOAD;
	if (OERROR)
        err_mesg("OPEN failed on cursor C_BL_UPLOAD",0,"");
}

open_cursor1()
{
	EXEC SQL OPEN C_MM_UPLOAD;
	if (OERROR)
        err_mesg("OPEN failed on cursor C_MM_UPLOAD",0,"");
}
 
open_cursor2()                                                            //added on 29/01/2008
{
	EXEC SQL OPEN C_MM_TRADE;
	if (OERROR)
        err_mesg("OPEN failed on cursor C_MM_TRADE",0,"");
}                                                                         //added on 29/01/2008


fetch_cursor()
{
	d_item_code.arr[0]			= '\0';
	d_trade_id.arr[0]           = '\0';          //added on 29/01/2008
	d_public_price.arr[0]		= '\0';
	d_inpatient_price.arr[0]	= '\0';
	d_outpatient_price.arr[0]	= '\0';
	d_external_price.arr[0]		= '\0';
	d_emergency_price.arr[0]	= '\0';
	d_daycare_price.arr[0]		= '\0';



	EXEC SQL FETCH C_BL_UPLOAD INTO	
				:d_item_code,
				:d_trade_id,       //added on 29/01/2008
				:d_public_price,
				:d_inpatient_price,
				:d_outpatient_price,
				:d_external_price,
				:d_emergency_price,
				:d_daycare_price,
				:d_inp_reimbursable_yn,
				:d_inp_reimbursable_ind		, 
				:d_inp_reimbursable_amt		,
				:d_inp_override_reimbursable_yn,
			    :d_oth_reimbursable_yn			,
				:d_oth_reimbursable_ind		,
				:d_oth_reimbursable_amt		, 
				:d_oth_override_reimbursable_yn;


	d_item_code.arr[d_item_code.len]				= '\0';
	d_trade_id.arr[d_trade_id.len]				    = '\0';     //added on 29/01/2008
	d_public_price.arr[d_public_price.len]			= '\0';
	d_inpatient_price.arr[d_inpatient_price.len]	= '\0';
	d_outpatient_price.arr[d_outpatient_price.len]	= '\0';
	d_external_price.arr[d_external_price.len]		= '\0';
	d_emergency_price.arr[d_emergency_price.len]	= '\0';
	d_daycare_price.arr[d_daycare_price.len]		= '\0';
	d_inp_reimbursable_yn.arr[d_inp_reimbursable_yn.len] = '\0';
	d_oth_reimbursable_yn.arr[d_oth_reimbursable_yn.len]= '\0';
	d_inp_reimbursable_ind.arr[d_inp_reimbursable_ind.len]= '\0';
	d_oth_reimbursable_ind.arr[d_oth_reimbursable_ind.len]= '\0';
	d_oth_reimbursable_amt.arr[d_oth_reimbursable_amt.len]= '\0';
	d_inp_reimbursable_amt.arr[d_inp_reimbursable_amt.len]= '\0';
	d_inp_override_reimbursable_yn.arr[d_inp_override_reimbursable_yn.len]= '\0';
	d_oth_override_reimbursable_yn.arr[d_oth_override_reimbursable_yn.len]= '\0';
	if (OERROR)
        err_mesg("FETCH failed on cursor C_BL_UPLOAD",0,"");
    return(LAST_ROW?0:1);
}

fetch_cursor1()
{
	d_mi_code.arr[0] = '\0';
	d_mi_code.len =0;

	EXEC SQL FETCH C_MM_UPLOAD INTO :d_mi_code;
	d_mi_code.arr[d_mi_code.len]='\0';

	if (OERROR)
        err_mesg("FETCH failed on cursor C_MM_UPLOAD",0,"");
}


fetch_cursor2()                                                  //added on 29/01/2008
{
	d_mi_trade.arr[0] = '\0';
	d_mi_trade.len=0;


	EXEC SQL FETCH C_MM_TRADE INTO :d_mi_trade;
	d_mi_trade.arr[d_mi_trade.len] = '\0';
	if (OERROR)
        err_mesg("FETCH failed on cursor C_MM_TRADE",0,"");
}                                                                //added on 29/01/2008
	
close_cursor()
{
	EXEC SQL CLOSE C_BL_UPLOAD;
	if (OERROR)
        err_mesg("CLOSE failed on cursor C_BL_UPLOAD",0,"");
}

close_cursor1()
{
	EXEC SQL CLOSE C_MM_UPLOAD;
	if (OERROR)
        err_mesg("CLOSE failed on cursor C_MM_UPLOAD",0,"");
}

close_cursor2()                                                  //added on 29/01/2008
{
	EXEC SQL CLOSE C_MM_TRADE;
	if (OERROR)
        err_mesg("CLOSE failed on cursor C_MM_TRADE",0,"");
}                                                                //added on 29/01/2008

open_file()
{
    strcpy(filename,WORKING_DIR);
    strcat(filename,"BLITMUPL.log");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLITMUPL.log");
       proc_exit();
    }
}

close_file()
{
	fflush(fp);
	fclose(fp);
}

create_log_file()
{
	l_max_date.arr[0] = '\0';
	l_fm_date.arr[0]  = '\0';

	l_cnt = 0;

	EXEC SQL SELECT TO_CHAR(MAX(effective_from_date),'DD-MON-YYYY') INTO :l_max_date FROM  BL_ST_ITEM_BY_TRADENAME;
	
	EXEC SQL SELECT TO_CHAR(MAX(EFFECTIVE_FROM_DATE),'DD-MON-YYYY')
 		INTO :l_fm_date 
 		FROM  BL_ST_ITEM_BY_TRADENAME 
 		WHERE EFFECTIVE_FROM_DATE < :nd_fm_date;

	//EXEC SQL SELECT COUNT(*)                      //Comment on 03/01/2008
 	//	INTO :l_cnt                                 //Comment on 03/01/2008
 	//	FROM  BL_ST_ITEM_BY_TRADENAME               //Comment on 03/01/2008
 	//	WHERE EFFECTIVE_FROM_DATE >= :nd_fm_date;   //Comment on 03/01/2008

	if (l_cnt > 0)
	{
      	if(l_max_date.arr[0]!='\0')
		 {

		  init_date_temp_var();
		  strcpy(date_convert.arr,l_max_date.arr);
		  fun_change_loc_date();
		  strcpy(l_max_date.arr,nd_loc_date.arr);

		 } 


		strcat(nd_msg1.arr,"Definition Already Exists with Effective From Date");
		strcat(nd_msg1.arr,l_max_date.arr);
		strcat(nd_msg1.arr,"Cannot be proceed, Please cancel the record/Enter manually");
		disp_message(ERR_MESG,nd_msg1.arr);
		strcpy(nd_msg1.arr,"");
		l_err=1;


		//disp_message(ERR_MESG,"Definition Already Exists with Effective From Date");
		//disp_message(ERR_MESG,l_max_date.arr);
		//disp_message(ERR_MESG,"Cannot be proceed, Please cancel the record/Enter manually");

	}
	else
	{
		while (fetch_cursor())
		{
			open_cursor1();
			fetch_cursor1();
			close_cursor1();

			open_cursor2();                  //added on 29/01/2008
			fetch_cursor2();                 //added on 29/01/2008
			close_cursor2();                 //added on 29/01/2008


			if (strcmp(d_item_code.arr,d_mi_code.arr) == 0)
			{
			  if (strcmp(d_trade_id.arr,d_mi_trade.arr) == 0)   //added on 29/01/2008
			  {                                                 //added on 29/01/2008
				l_pr_id = 0;

				EXEC SQL SELECT COUNT(*) INTO :l_pr_id
					FROM	BL_ST_ITEM_BY_TRADENAME 
					WHERE	OPERATING_FACILITY_ID =:nd_operating_facility_id AND
						ITEM_CODE =:d_item_code AND
						TRUNC(EFFECTIVE_FROM_DATE) = :nd_fm_date;
				if (OERROR)
					err_mesg("SELECT Count Failed",0,"");

//added on 3/1/2008

				if (l_pr_id == 1)
				{


					strcat(nd_msg2.arr,"Definition Already Exists with this Effective From Date");
					strcat(nd_msg2.arr,", Item: ");
					strcat(nd_msg2.arr,d_item_code.arr);
					strcat(nd_msg2.arr,", Eff. From Date: ");
					strcat(nd_msg2.arr,nd_fm_date.arr);
					disp_message(ERR_MESG,nd_msg2.arr);
					strcpy(nd_msg2.arr,"");

					//disp_message(ERR_MESG,"Definition Already Exists with this Effective From Date");
					//disp_message(ERR_MESG,"Item: ");					
					//disp_message(ERR_MESG,d_item_code.arr);
					//disp_message(ERR_MESG,"Eff. From Date: ");
					//disp_message(ERR_MESG,nd_fm_date.arr);
				}

//added on 3/1/2008

				if (l_pr_id > 1)
				{
					fprintf(fp,"%-s%-s%-sThis Item is not defined\n\n",nd_operating_facility_id.arr,d_item_code.arr);
					proc_exit();
				}

			
				if (strlen(d_item_code.arr))
				{
					if (!strlen(d_inpatient_price.arr))
					{


						strcat(nd_msg3.arr,"Inpatient Price is not defined for the Facility: ");
						strcat(nd_msg3.arr,nd_operating_facility.arr);
						strcat(nd_msg3.arr,", Item: ");
						strcat(nd_msg3.arr,d_item_code.arr);
						strcat(nd_msg3.arr,", Eff. From Date: ");
						strcat(nd_msg3.arr,nd_fm_date.arr);
						disp_message(ERR_MESG,nd_msg3.arr);
						strcpy(nd_msg3.arr,"");

						//disp_message(ERR_MESG,"Inpatient Price is not defined for the Facility: ");
						//disp_message(ERR_MESG,nd_operating_facility.arr);
						//disp_message(ERR_MESG,"Item: ");
						//disp_message(ERR_MESG,d_item_code.arr);
						//disp_message(ERR_MESG,"Eff. From Date: ");
						//disp_message(ERR_MESG,nd_fm_date.arr);
					}
					
					if (!strlen(d_outpatient_price.arr))
					{

						strcat(nd_msg4.arr,"Outpatient Price is not defined for the Facility: ");
						strcat(nd_msg4.arr,nd_operating_facility.arr);
						strcat(nd_msg4.arr,", Item: ");
						strcat(nd_msg4.arr,d_item_code.arr);
						strcat(nd_msg4.arr,", Eff. From Date: ");
						strcat(nd_msg4.arr,nd_fm_date.arr);
						disp_message(ERR_MESG,nd_msg4.arr);
						strcpy(nd_msg4.arr,"");

						//disp_message(ERR_MESG,"Outpatient Price is not defined for the Facility: ");
						//disp_message(ERR_MESG,nd_operating_facility.arr);
						//disp_message(ERR_MESG,"Item: ");
						//disp_message(ERR_MESG,d_item_code.arr);
						//disp_message(ERR_MESG,"Eff. From Date: ");
						//disp_message(ERR_MESG,nd_fm_date.arr);
					}
					
					if (!strlen(d_external_price.arr))
					{

						strcat(nd_msg5.arr,"External Price is not defined for the Facility: ");
						strcat(nd_msg5.arr,nd_operating_facility.arr);
						strcat(nd_msg5.arr,", Item: ");
						strcat(nd_msg5.arr,d_item_code.arr);
						strcat(nd_msg5.arr,", Eff. From Date: ");
						strcat(nd_msg5.arr,nd_fm_date.arr);
						disp_message(ERR_MESG,nd_msg5.arr);
						strcpy(nd_msg5.arr,"");


						//disp_message(ERR_MESG,"External Price is not defined for the Facility: ");
						//disp_message(ERR_MESG,nd_operating_facility.arr);
						//disp_message(ERR_MESG,"Item: ");
						//disp_message(ERR_MESG,d_item_code.arr);
						//disp_message(ERR_MESG,"Eff. From Date: ");
						//disp_message(ERR_MESG,nd_fm_date.arr);
					}
					
					if (!strlen(d_emergency_price.arr))
					{

						strcat(nd_msg6.arr,"Emergency Price is not defined for the Facility: ");
						strcat(nd_msg6.arr,nd_operating_facility.arr);
						strcat(nd_msg6.arr,", Item: ");
						strcat(nd_msg6.arr,d_item_code.arr);
						strcat(nd_msg6.arr,", Eff. From Date: ");
						strcat(nd_msg6.arr,nd_fm_date.arr);
						disp_message(ERR_MESG,nd_msg6.arr);
						strcpy(nd_msg6.arr,"");

						//disp_message(ERR_MESG,"Emergency Price is not defined for the Facility: ");
						//disp_message(ERR_MESG,nd_operating_facility.arr);
						//disp_message(ERR_MESG,"Item: ");
						//disp_message(ERR_MESG,d_item_code.arr);
						//disp_message(ERR_MESG,"Eff. From Date: ");
						//disp_message(ERR_MESG,nd_fm_date.arr);
					}
					
					if (!strlen(d_daycare_price.arr))
					{

						strcat(nd_msg7.arr,"Daycare Price is not defined for the Facility: ");
						strcat(nd_msg7.arr,nd_operating_facility.arr);
						strcat(nd_msg7.arr,", Item: ");
						strcat(nd_msg7.arr,d_item_code.arr);
						strcat(nd_msg7.arr,", Eff. From Date: ");
						strcat(nd_msg7.arr,nd_fm_date.arr);
						disp_message(ERR_MESG,nd_msg7.arr);
						strcpy(nd_msg7.arr,"");

						//disp_message(ERR_MESG,"Daycare Price is not defined for the Facility: ");
						//disp_message(ERR_MESG,nd_operating_facility.arr);
						//disp_message(ERR_MESG,"Item: ");
						//disp_message(ERR_MESG,d_item_code.arr);
						//disp_message(ERR_MESG,"Eff. From Date: ");
						//disp_message(ERR_MESG,nd_fm_date.arr);
					}
					

			      if (strcmp(d_inp_reimbursable_yn.arr,"Y")!=0)
				   {
				     if (strcmp(d_inp_reimbursable_yn.arr,"N")!=0)
					   {  
					      if (strlen(d_inp_reimbursable_yn.arr))
						   {
									strcat(nd_msg16.arr,"Invalid value for Inpatient/Daycare Reimbursable for the Facility: ");
									strcat(nd_msg16.arr,nd_operating_facility.arr);
									strcat(nd_msg16.arr,", Item: ");
									strcat(nd_msg16.arr,d_item_code.arr);
									disp_message(ERR_MESG,nd_msg16.arr);
									strcpy(nd_msg16.arr,"");
							}
						}
					}
				if (strcmp(d_inp_reimbursable_ind.arr,"F")!=0)
				   {
				     if (strcmp(d_inp_reimbursable_ind.arr,"P")!=0)
					   {  
					      if (strcmp(d_inp_reimbursable_ind.arr,"N")!=0)
						   {
									strcat(nd_msg19.arr,"Invalid value for Inpatient/Daycare Reimbursable Indicator for the Facility: ");
									strcat(nd_msg19.arr,nd_operating_facility.arr);
									strcat(nd_msg19.arr,", Item: ");
									strcat(nd_msg19.arr,d_item_code.arr);
									disp_message(ERR_MESG,nd_msg19.arr);
									strcpy(nd_msg19.arr,"");
							}
						}
					}

				 if (strcmp(d_inp_reimbursable_ind.arr,"P")==0) 
				 {
				   if (d_inp_reimbursable_amt.arr<=0 || !strlen(d_inp_reimbursable_amt.arr))
				 {
				 	                strcat(nd_msg10.arr,"Amopunt cannot be less than 0 or Null for Inpatient/Daycare Reimbursable where Reimbursable Indicator is P for the Facility: ");
									strcat(nd_msg10.arr,nd_operating_facility.arr);
									strcat(nd_msg10.arr,", Item: ");
									strcat(nd_msg10.arr,d_item_code.arr);
									disp_message(ERR_MESG,nd_msg10.arr);
									strcpy(nd_msg10.arr,"");
				}
				}
			      if (strcmp(d_inp_override_reimbursable_yn.arr,"Y")!=0)
				   {
				     if (strcmp(d_inp_override_reimbursable_yn.arr,"N")!=0)
					   {  
					      if (strlen(d_inp_override_reimbursable_yn.arr))
						   {
									strcat(nd_msg11.arr,"Invalid value for Inpatient/Daycare Override Reimbursable for the Facility: ");
									strcat(nd_msg11.arr,nd_operating_facility.arr);
									strcat(nd_msg11.arr,", Item: ");
									strcat(nd_msg11.arr,d_item_code.arr);
									disp_message(ERR_MESG,nd_msg11.arr);
									strcpy(nd_msg11.arr,"");
							}
						}
					}
 if (strcmp(d_oth_reimbursable_yn.arr,"Y")!=0)
				   {
				     if (strcmp(d_oth_reimbursable_yn.arr,"N")!=0)
					   {  
					      if (strlen(d_oth_reimbursable_yn.arr))
						   {
									strcat(nd_msg12.arr,"Invalid value for Outpatient Reimbursable for the Facility: ");
									strcat(nd_msg12.arr,nd_operating_facility.arr);
									strcat(nd_msg12.arr,", Item: ");
									strcat(nd_msg12.arr,d_item_code.arr);
									disp_message(ERR_MESG,nd_msg12.arr);
									strcpy(nd_msg12.arr,"");
							}
						}
					}
				if (!strcmp(d_oth_reimbursable_ind.arr,"F"))
				   {
				     if (strcmp(d_oth_reimbursable_ind.arr,"P")!=0)
					   {  
					      if (strcmp(d_oth_reimbursable_ind.arr,"N")!=0)
						   {
									strcat(nd_msg13.arr,"Invalid value for Outpatient Reimbursable Indicator for the Facility: ");
									strcat(nd_msg13.arr,nd_operating_facility.arr);
									strcat(nd_msg13.arr,", Item: ");
									strcat(nd_msg13.arr,d_item_code.arr);
									strcat(nd_msg13.arr,", Eff. From Date: ");
									strcat(nd_msg13.arr,nd_fm_date.arr);
									disp_message(ERR_MESG,nd_msg13.arr);
									strcpy(nd_msg13.arr,"");
							}
						}
					}

				 if (strcmp(d_oth_reimbursable_ind.arr,"P")==0) 
				 {
				  if (d_oth_reimbursable_amt.arr<=0 || !strlen(d_oth_reimbursable_amt.arr))
				 {
				 	                strcat(nd_msg14.arr,"Amopunt cannot be less than 0 or Null for Outpatient Reimbursable where Reimbursable Indicator is P for the Facility: ");
									strcat(nd_msg14.arr,nd_operating_facility.arr);
									strcat(nd_msg14.arr,", Item: ");
									strcat(nd_msg14.arr,d_item_code.arr);
									strcat(nd_msg14.arr,", Eff. From Date: ");
									strcat(nd_msg14.arr,nd_fm_date.arr);
									disp_message(ERR_MESG,nd_msg14.arr);
									strcpy(nd_msg14.arr,"");
				}
				}
			      if (strcmp(d_oth_override_reimbursable_yn.arr,"Y")!=0)
				   {
				     if (strcmp(d_oth_override_reimbursable_yn.arr,"N")!=0)
					   {  
					      if (strlen(d_oth_override_reimbursable_yn.arr))
						   {
									strcat(nd_msg15.arr,"Invalid value for Outpatient Override Reimbursable for the Facility: ");
									strcat(nd_msg15.arr,nd_operating_facility.arr);
									strcat(nd_msg15.arr,", Item: ");
									strcat(nd_msg15.arr,d_item_code.arr);
									strcat(nd_msg15.arr,", Eff. From Date: ");
									strcat(nd_msg15.arr,nd_fm_date.arr);
									disp_message(ERR_MESG,nd_msg15.arr);
									strcpy(nd_msg15.arr,"");
							}
						}
					}


				}
				else
				{
					proc_exit();
				}
			  }                       //added on 29/01/2008
			  else 
			  {
				strcat(nd_msg8.arr,"Invalid Trade: ");
				strcat(nd_msg8.arr,d_trade_id.arr);
				strcat(nd_msg8.arr," for this Item: ");
				strcat(nd_msg8.arr,d_item_code.arr);
				strcat(nd_msg8.arr," Found in External Table");
 				disp_message(ERR_MESG,nd_msg8.arr);
				strcpy(nd_msg8.arr,"");
			  }                        //added on 29/01/2008
			 }
			 else 
			 {
				strcat(nd_msg9.arr,"Invalid Item: ");
				strcat(nd_msg9.arr,d_item_code.arr);
				strcat(nd_msg9.arr," Found in External Table");
 				disp_message(ERR_MESG,nd_msg9.arr);
				strcpy(nd_msg9.arr,"");

				//disp_message(ERR_MESG,"Invalid Item");
				//disp_message(ERR_MESG,d_item_code.arr);
				//disp_message(ERR_MESG,"Found in External Table");
			 }

				d_item_code.arr[d_item_code.len]				= '\0';
				d_public_price.arr[d_public_price.len]			= '\0';
				d_inpatient_price.arr[d_inpatient_price.len]	= '\0';
				d_outpatient_price.arr[d_outpatient_price.len]	= '\0';
				d_external_price.arr[d_external_price.len]		= '\0';
				d_emergency_price.arr[d_emergency_price.len]	= '\0';
				d_daycare_price.arr[d_daycare_price.len]		= '\0';
		}
	}
}


init_date_temp_var()
{

nd_temp_date.arr[0] =  '\0';
nd_loc_date.arr[0]  =  '\0';
date_convert.arr[0] =  '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;

}

fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date();

}

get_local_date()
{
	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'DD/MM/YYYY'),:nd_lang_id,t_date);

		 :nd_loc_date:= to_char(t_date,'DD/MM/YYYY');


	END;

	END-EXEC;

	     		
		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");


}

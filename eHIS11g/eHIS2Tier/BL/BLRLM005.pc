/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRLM005.PC                                  */
/* AUTHOR                : SENTHIL				            */
/* DATE WRITTEN          : 10-Feb-2009                                  */
/*                                                                      */
/* CALLED FROM           :                                             */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                           
#include <stdio.h>
#include <string.h>
#include "gl.h"

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define INIT_MESG "Report Generation In Progress"
#define ESC     0x1B
#define REP_WIDTH 118
#define VER  "VER : 1.10.01\n"



EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            uid_pwd                                    [132],
            date_time                                  [20],
            user_id       	                             [40],
			date_convert[21],
            nd_session_id                              [16],
			nd_temp_date[21],
			nd_loc_date[21],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
			p_language_id[3];

   

   VARCHAR	bl_patient_id		[21],
            nd_patient_name		[61],
		nd_from_patient_id	[61],
		nd_to_patient_id	      [61],
		nd_regn_from_date		[11],
		nd_regn_to_date		[11],
		nd_adm_date			[11],
            nd_sex                  [1] ,
            nd_dob                  [11],
            nd_start_date		[11],
			nd_facility_id   [3],
		nd_end_date 		[11],
		l_pk_value	[100],
		l_translated_value	        [201];
   
            
			
   
   int		prt_ctr = 0;
   	int i;


   char loc_legend[999][201];    	  
   char		rep_title[40];
      
  
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

int s_lctr = 0,s_pctr = 0;
int d_lctr = 0,d_pctr = 0;
int pctr = 0;

FILE *f1, *f2;

int bill_ctr = 0;


char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1],
     hdr_line4[REP_WIDTH+1];

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0;
	

    if (argc < 6)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }

	strcpy(uid_pwd.arr,argv[1]);
      uid_pwd.len = strlen(uid_pwd.arr);
 
      strcpy(g_pgm_id,"BLRLM005");

  if(sql_connect() == -1)
   {
      disp_message(ERR_MESG,"Error in connecting to Oracle");
      if (uid_pwd.len == 0)
         disp_message(ERR_MESG,"Null oracle uid/pwd");
      proc_exit();
   } 
  
set_meduser_role();

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
	strcpy(p_language_id.arr,l_language_id.arr);
	 p_language_id.len = l_language_id.len;
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

	strcpy(nd_facility_id.arr, argv[4]);
	nd_facility_id.len = strlen(nd_facility_id.arr);

     fetch_legend_value();

    fetch_prog_param();

    strcpy(rep_title,loc_legend[109]);
	//strcpy(rep_title,"List of Provisionally Classified Patients");

    declare_recal_cur();

    fetch_hosp_name();

    open_file();
     
    open_recal_cursor(); 

	print_rep_header();

	print_head();
	

	prt_ctr = 0; 
	
      while(fetch_recal_cursor())
        {
			print_rec();
	    } 
    print_tot();
 
    close_recal_cursor();     
    
    end_of_rep();
    
	    fclose(f2);

    EXEC SQL COMMIT WORK RELEASE;

    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");  
    
    return;
}

fetch_prog_param()
{
   nd_from_patient_id.arr[0]	='\0';
   nd_to_patient_id.arr[0]		='\0';
   nd_regn_from_date.arr[0]		='\0';
   nd_regn_to_date.arr[0]		='\0';

   nd_from_patient_id.len		=0;
   nd_to_patient_id.len			=0;
   nd_regn_from_date.len		=0;
   nd_regn_to_date.len			=0;
   
   EXEC SQL SELECT PARAM1,
		   PARAM2,
		   PARAM3,
		   PARAM4 
         INTO 
            :nd_from_patient_id,
			:nd_to_patient_id,
            :nd_regn_from_date,
            :nd_regn_to_date
  	       FROM SY_PROG_PARAM
             WHERE OPERATING_FACILITY_ID = :nd_facility_id
			   AND PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;    



   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   
   nd_from_patient_id.arr[nd_from_patient_id.len]	= '\0';
   nd_to_patient_id.arr[nd_to_patient_id.len]		= '\0';
   nd_regn_from_date.arr[nd_regn_from_date.len]		= '\0';
   nd_regn_to_date.arr[nd_regn_to_date.len]		= '\0';
   

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");



   
  
   EXEC SQL DELETE SY_PROG_PARAM
             WHERE OPERATING_FACILITY_ID = :nd_facility_id
			 and PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_recal_cur()
{

  //disp_message(ERR_MESG,nd_from_patient_id);

    EXEC SQL DECLARE BL_PATIENT_PROFCLAS_DTLS_CUR CURSOR FOR
		SELECT   	A.PATIENT_ID, 
				TO_CHAR(A.REGN_DATE,'DD/MM/YYYY'), 
				//A.SHORT_NAME, 
				decode(:p_language_id,'en', substr(A.short_name,1,60),substr(A.SHORT_NAME_LOC_LANG,1,60)),
				A.SEX, 
				TO_CHAR(A.DATE_OF_BIRTH,'DD/MM/YYYY'),
				TO_CHAR(B.CLASSIFICATION_START_DATE,'DD/MM/YYYY'),
				TO_CHAR(B.CLASSIFICATION_END_DATE,'DD/MM/YYYY')                     
		FROM  MP_PATIENT_MAST A, BL_PATIENT_FIN_DTLS B, BL_CLASSFCTN_CODE C
		WHERE    A.PATIENT_ID = B.PATIENT_ID 
		AND  B.CLASSIFICATION_CODE = C.CLASSIFICATION_CODE
			  AND C.OPERATING_FACILITY_ID = :nd_facility_id
			  AND  C.CLASSIFICATION_TYPE = 'PV'
			   AND A.PATIENT_ID BETWEEN :nd_from_patient_id AND :nd_to_patient_id 
			   AND TRUNC(A.REGN_DATE) BETWEEN TO_DATE(NVL(:nd_regn_from_date,'01/01/1800'),'DD/MM/YYYY')
			   AND TO_DATE(NVL(:nd_regn_to_date,'01/01/3000'),'DD/MM/YYYY')
			   ORDER BY 2,1;
}


open_recal_cursor()
{
    EXEC SQL OPEN BL_PATIENT_PROFCLAS_DTLS_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_PATIENT_PROFCLAS_DTLS_CUR",0,"");
}



close_recal_cursor()
{
   EXEC SQL CLOSE BL_PATIENT_PROFCLAS_DTLS_CUR;
 
}



fetch_recal_cursor()
{
  bl_patient_id.arr[0]		= '\0';
  nd_patient_name.arr[0]		= '\0';
  nd_adm_date.arr[0]		= '\0';
  nd_sex.arr[0]		= '\0';
  nd_dob.arr[0]		= '\0';
  nd_start_date.arr[0]		= '\0';
  nd_end_date.arr[0]		= '\0';

/*  bl_prov_cls_fn.arr[0]         = '\0';
  bl_episode_id.arr[0]		= '\0';
  bl_visit_id.arr[0]		= '\0';
  bl_visit_date.arr[0]		= '\0';
  bl_blng_grp.arr[0]		= '\0';
  bl_user_id.arr[0]			= '\0';
  bl_remarks.arr[0]			= '\0';  
*/  
  bl_patient_id.len	 	= 0;  
  nd_patient_name.len	 	= 0;  
  nd_adm_date.len	 	= 0;  
  nd_sex.len	 	= 0;  
  nd_dob.len	 	= 0;  
  nd_start_date.len	 	= 0;     
  nd_end_date.len	 	= 0;  
  
  
    EXEC SQL FETCH BL_PATIENT_PROFCLAS_DTLS_CUR   
		INTO	  bl_patient_id,
		  nd_adm_date,
		  nd_patient_name,  
		  nd_sex,
		  nd_dob,
		  nd_start_date,
		  nd_end_date;

  if (LAST_ROW)
       return 0;
  bl_patient_id.arr[bl_patient_id.len] 		= '\0';
  nd_patient_name.arr[nd_patient_name.len] 		= '\0';
  nd_adm_date.arr[nd_adm_date.len] 		= '\0';
  nd_sex.arr[nd_sex.len] 		= '\0';
  nd_dob.arr[nd_dob.len] 		= '\0';
  nd_start_date.arr[nd_start_date.len] 		= '\0';
  nd_end_date.arr[nd_end_date.len] 		= '\0';
  return 1;    
}


print_rec()
{
  
   if (d_lctr > 42) //modify
     print_head();

   get_patient_name();



  /*fprintf(f2,"%-10s  %-10s  %-35s     %3s     %-10s   %-10s   %-10s\n",
		  nd_adm_date.arr,
		  bl_patient_id.arr,
		  nd_patient_name.arr,  
		  nd_sex.arr,
		  nd_dob.arr,
		  nd_start_date.arr,
		  nd_end_date.arr );  */

		  init_date_temp_var();                              
strcpy(date_convert.arr,nd_adm_date.arr);         
fun_change_loc_date(); 

 fprintf(f2,"%-10s",date_convert.arr); 
 fprintf(f2,"  %-20.20s %-35s     %3s",bl_patient_id.arr,nd_patient_name.arr,nd_sex.arr);

init_date_temp_var();                              
strcpy(date_convert.arr,nd_dob.arr);         
fun_change_loc_date(); 


 fprintf(f2,"     %-10s",date_convert.arr);

init_date_temp_var();                              
strcpy(date_convert.arr,nd_start_date.arr);         
fun_change_loc_date(); 

 fprintf(f2,"   %-10s",date_convert.arr);

init_date_temp_var();                              
strcpy(date_convert.arr,nd_end_date.arr);         
fun_change_loc_date(); 


 fprintf(f2,"   %-10s\n",date_convert.arr);
  
 

  d_lctr++;
  prt_ctr++;
 }
  
print_tot()
{
   if (d_lctr > 42)
     print_head();

   //fprintf(f2," \n\nTotal Number of Patients : %-6d \n",prt_ctr);
   fprintf(f2," \n\n%s                         %-6d \n",loc_legend[112],prt_ctr);
   d_lctr++;
	       
}

open_file()
{
char filename[30];

 	strcpy(filename,WORKING_DIR);
	strcat(filename,"BLRLM005.LIS");

    if ((f2 = fopen(filename,"w")) == NULL) 
     {
       disp_message(ERR_MESG,"Error in opening file BLRLM005.lis");
       proc_exit();
      }
 }


print_head()
{ 
    fprintf(f2,"");
    prt_head(f2,&d_pctr);
	fprintf(f2,"%s       %-20.20s %s                                    %s    %s          %s\n",loc_legend[006],loc_legend[005],loc_legend[117],loc_legend[007],loc_legend[100],loc_legend[101]);
	fprintf(f2,"%s        %-20.20s                                                             %s    %s \n",loc_legend[102],loc_legend[103],loc_legend[104],loc_legend[105]);             
   	//fprintf(f2,"Regn.       Patient     Name                                     Sex    DOB          Reclassification     \n");
	//fprintf(f2,"Date        ID                                                                       Start Dt.    End Dt. \n");             

    fprintf(f2,"%s\n",hdr_line4);
	d_lctr = 10;
  
}

print_head1()
{ 
    prt_head(f2,&d_pctr);
	
  
}


prt_head(fp,pctr)
//FILE *fp;
int *pctr;
{

    form_hdr(&pctr);

    fprintf(f2,"%c&l1O",ESC);   /* This will make the orientation as landscape */
    fprintf(f2,"%c&k4S",ESC); /* This makes the font size to increase to 2 */

    fprintf(f2,"\n");
    fprintf(f2,"%s\n",hdr_line1);
	//fprintf(f2,"%s\n",loc_legend[108]);
    fprintf(f2,"%s\n",hdr_line2);
	 //fprintf(f2,"%s\n",loc_legend[110]);
    fprintf(f2,"%s\n",hdr_line3);
	//fprintf(f2,"%s\n",loc_legend[111]);
    fprintf(f2,"%s\n",hdr_line4);
	
	

fflush(f2);

}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    /*EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY
			   WHERE ACC_ENTITY_ID  = :nd_facility_id;*/

      EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY_LANG_VW
			   WHERE ACC_ENTITY_ID  = :nd_facility_id
			   AND language_id=:p_language_id;



       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}



form_hdr(page_no)
int **page_no;
{

    static int first = 1;
    char buf[15];
    int col;
    	
    if(first) {
        memset(hdr_line1,' ',REP_WIDTH+1);
        memset(hdr_line2,' ',REP_WIDTH+1);
		memset(hdr_line4,'-',REP_WIDTH);
		hdr_line4[REP_WIDTH] = '\0';

        //strncpy(hdr_line1,"MDL : BL",8);
		 strncpy(hdr_line1,loc_legend[108],strlen(loc_legend[108]));
        col = (int)(REP_WIDTH-strlen(hosp_name.arr))/2;
        strncpy(hdr_line1+col,hosp_name.arr,strlen(hosp_name.arr));
        col=(REP_WIDTH-strlen(loc_legend[113])-17);

		//col=(REP_WIDTH-strlen(loc_legend[113])-17);
	    
		strncpy(hdr_line1+col,loc_legend[113],strlen(loc_legend[113]));
	    
       

        col = (REP_WIDTH-strlen(date_time.arr));  //modify

		init_date_temp_var();                              
strcpy(date_convert.arr,date_time.arr);         
fun_change_loc_date(); 
        strcpy(hdr_line1+col,date_convert.arr);
    
        //strncpy(hdr_line2,"OPR :",5);


		strncpy(hdr_line2,loc_legend[110],strlen(loc_legend[110]));
		        strcpy(hdr_line2+6,user_id.arr);

	first = 0;
    }

    memset(hdr_line3,' ',REP_WIDTH+1);

    //strncpy(hdr_line3,"REP : BLRLM005",14);
	strncpy(hdr_line3,loc_legend[111],strlen(loc_legend[111]));
    col = (int)(REP_WIDTH-strlen(rep_title))/2;
    
	strncpy(hdr_line3+col,rep_title,strlen(rep_title));
	

    //sprintf(buf,"PAGE : %4d",++*(*page_no));
	sprintf(buf,"%s %4d",loc_legend[114],++*(*page_no));
    strcpy(hdr_line3+(REP_WIDTH-strlen(buf)-1),buf);  //modify


}


sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

end_of_rep()
{

      if (s_lctr > 48)
         print_head();

	//fprintf(f2,"\n\n                                                     ***  END OF REPORT ***\n");
	fprintf(f2,"\n\n                                                     %s\n",loc_legend[115]);

}



get_patient_name()
{

 nd_patient_name.arr[0] = '\0';

 nd_patient_name.len    = 0;

 /*EXEC SQL SELECT short_name
		  INTO  :nd_patient_name
          FROM MP_PATIENT_MAST
          WHERE PATIENT_ID = :bl_patient_id;*/

  EXEC SQL SELECT decode(:p_language_id,'en', substr(short_name,1,60),substr(SHORT_NAME_LOC_LANG,1,60))
		  INTO  :nd_patient_name
          FROM MP_PATIENT_MAST
          WHERE PATIENT_ID = :bl_patient_id;


 if (OERROR)
       disp_message(ERR_MESG,"SELECT failed on table MP_PATIENT_MAST");

 
 nd_patient_name.arr[nd_patient_name.len] = '\0';
 
 return;

}




print_rep_header()
{
  char from_pat_id[11],  to_pat_id[11];
  char from_date[10], to_date[10];
  char from_blng_grp[10], to_blng_grp[10];
  char from_usr_id[21], to_usr_id[21];
  

  if(strcmp(nd_from_patient_id.arr, "!!!!!!!!!!!!!!!!!!!!") == 0)
    //strcpy(from_pat_id, "Lowest");
	 strcpy(from_pat_id,loc_legend[106]);
    else strcpy(from_pat_id, nd_from_patient_id.arr);

  if(strcmp(nd_to_patient_id.arr, "~~~~~~~~~~~~~~~~~~~~") == 0)
    //strcpy(to_pat_id, "Highest");
	//strcpy(to_pat_id, "Highest");
	strcpy(to_pat_id,loc_legend[107]);

    else strcpy(to_pat_id, nd_to_patient_id.arr);

  if(strcmp(nd_regn_from_date.arr, "!!!!!!!!!!") == 0)
    //strcpy(from_date, "Lowest");
	strcpy(from_date, loc_legend[106]);
    else strcpy(from_date, nd_regn_from_date.arr);

  if(strcmp(nd_regn_to_date.arr, "~~~~~~~~~~") == 0)
    //strcpy(to_date, "Highest");
	strcpy(to_date, loc_legend[107]);
    else strcpy(to_date, nd_regn_to_date.arr);
  
  print_head1();
  fprintf(f2,VER);
  fprintf(f2,"\n\n");
  fprintf(f2,"        ");
  //fprintf(f2,"INPUT PARAMETERS :\n");
  fprintf(f2,"%10s\n", loc_legend[001]);
  fprintf(f2,"        ");
  fprintf(f2,"------------------\n\n");
  fprintf(f2,"                              ");
  //fprintf(f2,"PATIENT ID     FROM         : %s\n",from_pat_id);
  fprintf(f2,"%10s %s\n",loc_legend[002], from_pat_id);
  fprintf(f2,"                              ");
  //fprintf(f2,"                TO              : %s\n",to_pat_id);
    fprintf(f2,"               %s %s\n",loc_legend[116],to_pat_id);
  //fprintf(f2,"%30s %s\n",loc_legend[003],to_pat_id);

  fprintf(f2,"\n");
  fprintf(f2,"                              ");
  //fprintf(f2,"REGISTRATION DATE FROM      : %s\n", from_date);
  
 init_date_temp_var();                              
 strcpy(date_convert.arr,from_date);         
 fun_change_loc_date(); 
  
  //fprintf(f2,"%10s %s\n",loc_legend[004], from_date);
  fprintf(f2,"%10s %s\n",loc_legend[004],date_convert.arr);
    fprintf(f2,"                              ");
  //fprintf(f2,"                   TO        : %s\n", to_date);
  //fprintf(f2,"                  %s %s\n",loc_legend[003],to_date);

init_date_temp_var();                              
 strcpy(date_convert.arr,to_date);         
 fun_change_loc_date(); 
fprintf(f2,"                  %s %s\n",loc_legend[003],date_convert.arr);

  fprintf(f2,"\n");
  fprintf(f2,"                              ");
  fprintf(f2,"\n");
  
   }

fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

	EXEC SQL SELECT LTRIM(RTRIM('BLRLM005.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		        INTO :l_pk_value
			   FROM dual;
			
		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
	  
       	get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date);  
      
	   :nd_loc_date := to_char(t_date,'DD/MM/YYYY');
	

	END;

	END-EXEC;
        
		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}



fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}

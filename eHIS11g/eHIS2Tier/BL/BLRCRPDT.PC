/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRCRPDT.PC                                  */
/* AUTHOR                : Jagwinder Kaur                               */  
/* DATE WRITTEN          : 13/07/2004                                   */      
/************************************************************************/
       
	   
	      
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 
#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR     hosp_name                       [120],
			l_acc_name						[120],
			date							[20],
            date_time                       [20],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
			nd_facility				        [3],
			bl_doc_no						[21],
			bl_doc_date						[11],
			old_slmt_type					[3],
			bl_org_doc_no					[20],
			bl_org_doc_date					[11],
			bl_approval_code				[31],
			bl_ref_rcpt_type_code			[3],
			bl_ref_doc_date					[11],
			bl_ref_doc_no					[16],
			bl_ref_instr_num				[31],
			old_ref_instr_num				[31],
			bl_ref_instr_date				[11],
			bl_ref_instr_date1				[11],
			bl_ref_instr_bank				[102],
			nd_fm_date						[11],
			nd_to_date						[11],
			nd_slmt_type					[3],
			bl_slmt_type					[3],
			old_doc_date					[11],
			l_translated_value				[201],
			l_cash_book_acc_desc			[16],
			l_pk_value						[100],
			nd_slmt_desc					[31],
			nd_sales_dft_no					[21],
			tmp_date						[11],
			p_language_id					[3],
			nd_temp_date					[21],
			nd_loc_date						[21];
			
double      bl_org_doc_amt,
			tot_instr_amt,
			bl_ref_slmt_amt,
			tot_org_doc_amt,
			comp_tot_org_doc_amt,
			bl_ref_slmt_amt;
			
int i;
char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200];
char fm_date[11],to_date[11];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;
int    first = 1;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRCRPDT");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
  
	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 

    	strcpy(p_language_id.arr,l_language_id.arr);
		p_language_id.len = l_language_id.len;
		
		strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

		nd_fm_date.arr[0]		= '\0';
		nd_to_date.arr[0]		= '\0';
		nd_slmt_type.arr[0]	= '\0';

		nd_fm_date.len		= 0;
		nd_to_date.len		= 0;
		nd_slmt_type.len	= 0;

        EXEC SQL SELECT	PARAM1,PARAM2,PARAM3
				INTO	:nd_slmt_type,
						:nd_fm_date,
						:nd_to_date
				FROM SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

		nd_slmt_type.arr[nd_slmt_type.len]	= '\0';
		nd_fm_date.arr[nd_fm_date.len]			= '\0';
		nd_to_date.arr[nd_to_date.len]			= '\0';
		

	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   

    	declare_cur();

    	fetch_hosp_name();
		
		//get_language_id();


		fetch_legend_value();

    	open_file();

		open_hdr();
        
	    print_hdr();

	    end_of_rep();


    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

declare_cur()
{
	EXEC SQL DECLARE SLMT_CUR CURSOR FOR 
    select  orig_doc_slmt_type_code,
			doc_date,
			to_char(doc_date,'DD/MM/YYYY'),
			doc_type_code ||'/'||doc_num||'/'||doc_srl_num doc_no,
			to_char(orig_doc_date,'DD/MM/YYYY'),
			orig_doc_type_code||'/'||orig_doc_num||'/'||ORIG_DOC_SRNO orig_doc_no,
    		/*orig_doc_type_code||'/'||orig_doc_num orig_doc_no,*/
			orig_doc_amt,
			approval_code,
			ref_rcpt_type_code,
			to_char(ref_doc_date,'DD/MM/YYYY'),
			ref_doc_type_code||'/'||ref_doc_num,
			ref_slmt_amt,
			ref_instrmnt_num,
			to_char(ref_instrmnt_date,'DD/MM/YYYY'),
			ref_instrmnt_bank
		from bl_credit_card_batch_dtl
		where operating_facility_id=:nd_facility
		and ref_rcpt_type_code is not null
		and cancel_reason_code is null
		and orig_doc_slmt_type_code = nvl(:nd_slmt_type,orig_doc_slmt_type_code)
		and trunc(doc_date) between to_date(nvl(:nd_fm_date,'01/01/1401'),'DD/MM/YYYY') and nvl(to_date(:nd_to_date,'DD/MM/YYYY'),sysdate)
		order by orig_doc_slmt_type_code,ref_instrmnt_date,doc_date;
}

open_hdr() 
{

    EXEC SQL OPEN SLMT_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor SLMT_CUR",0,"");

}

open_dtl() 
{
	EXEC SQL OPEN SLMT_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor SLMT_CUR",0,"");
}

close_dtl() 
{
	EXEC SQL CLOSE SLMT_CUR;    
}

fetch_hdr()
{
		
bl_slmt_type.arr[0]				= '\0';
bl_doc_date.arr[0]				= '\0';
bl_doc_no.arr[0]				= '\0';
bl_org_doc_date.arr[0]			= '\0';
bl_org_doc_no.arr[0]			= '\0';
bl_approval_code.arr[0]			= '\0';
bl_ref_rcpt_type_code.arr[0]	= '\0';
bl_ref_doc_date.arr[0]			= '\0';
bl_ref_doc_no.arr[0]			= '\0';
bl_ref_instr_num.arr[0]			= '\0';
bl_ref_instr_date.arr[0]		= '\0';
bl_ref_instr_bank.arr[0]		= '\0';
					
bl_slmt_type.len			= 0;
bl_doc_date.len				= 0;
bl_doc_no.len				= 0;
bl_org_doc_date.len			= 0;
bl_org_doc_no.len			= 0;
bl_approval_code.len		= 0;
bl_ref_rcpt_type_code.len	= 0;
bl_ref_doc_date.len			= 0;
bl_ref_doc_no.len			= 0;
bl_ref_instr_num.len		= 0;
bl_ref_instr_date.len		= 0;
bl_ref_instr_bank.len		= 0;

bl_ref_slmt_amt = 0;
bl_org_doc_amt  = 0;
bl_ref_slmt_amt	= 0;

		    EXEC SQL FETCH SLMT_CUR
               INTO :bl_slmt_type,
					:tmp_date,
					:bl_doc_date,
					:bl_doc_no,
					:bl_org_doc_date,
					:bl_org_doc_no,
					:bl_org_doc_amt,
					:bl_approval_code,
					:bl_ref_rcpt_type_code,
					:bl_ref_doc_date,
					:bl_ref_doc_no,
					:bl_ref_slmt_amt,
					:bl_ref_instr_num,
					:bl_ref_instr_date,
					:bl_ref_instr_bank;
       if (OERROR)
            err_mesg("FETCH failed on cursor SLMT_CUR",0,"");

bl_slmt_type.arr[bl_slmt_type.len]					= '\0';
bl_doc_date.arr[bl_doc_date.len]					= '\0';
bl_doc_no.arr[bl_doc_no.len]						= '\0';
bl_org_doc_date.arr[bl_org_doc_date.len]			= '\0';
bl_org_doc_no.arr[bl_org_doc_no.len]				= '\0';
bl_ref_rcpt_type_code.arr[bl_ref_rcpt_type_code.len]= '\0';
bl_ref_doc_date.arr[bl_ref_doc_date.len]			= '\0';
bl_ref_doc_no.arr[bl_ref_doc_no.len]				= '\0';
bl_approval_code.arr[bl_approval_code.len]			= '\0';
bl_ref_instr_num.arr[bl_ref_instr_num.len]			= '\0';
bl_ref_instr_date.arr[bl_ref_instr_date.len]		= '\0';
bl_ref_instr_bank.arr[bl_ref_instr_bank.len]		= '\0';


    return(LAST_ROW?0:1);
}


print_hdr()
{
  while(fetch_hdr())
  {
   fetch_slmt_desc();
   fetch_sales_dft();
    if(first)
	 {
	 print_head();
						 
	 check_page_end(3,0);
	 fprintf(fp," %-25s : %-30s              %-30s : %-20s\n",loc_legend[20],bl_ref_instr_num.arr,loc_legend[23],bl_ref_doc_no.arr);
	 
	 	if (bl_ref_instr_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,bl_ref_instr_date.arr);

		get_local_date_convn1();

		strcpy(bl_ref_instr_date.arr,nd_loc_date.arr);

		bl_ref_instr_date.arr[bl_ref_instr_date.len] = '\0';
  
    }

		if (bl_ref_doc_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,bl_ref_doc_date.arr);

		get_local_date_convn1();

		strcpy(bl_ref_doc_date.arr,nd_loc_date.arr);

		bl_ref_doc_date.arr[bl_ref_doc_date.len] = '\0';
  
    }

    
     fprintf(fp," %-25s : %-30s              %-30s : %-10s\n",loc_legend[21],bl_ref_instr_date.arr,loc_legend[24],bl_ref_doc_date.arr);
	 fprintf(fp," %-25s : %-30s              %-30s : ",loc_legend[22],bl_ref_instr_bank.arr,loc_legend[11]);
     print_formated(bl_ref_slmt_amt);
	 fprintf(fp,"\n\n");
	 lctr = lctr + 3;
     
     strcpy(old_slmt_type.arr,bl_slmt_type.arr);
	 old_slmt_type.len=strlen(old_slmt_type.arr);

	 /*strcpy(old_doc_date.arr,bl_doc_date.arr);
	 old_doc_date.len=strlen(old_doc_date.arr);
     */
	 strcpy(old_ref_instr_num.arr,bl_ref_instr_num.arr);
	 old_ref_instr_num.len=strlen(old_ref_instr_num.arr);

	 first = 0;
	 }

	if(strcmp(old_ref_instr_num.arr,bl_ref_instr_num.arr) != 0 || strcmp(old_slmt_type.arr,bl_slmt_type.arr) != 0)
	  print_instr_total();
	
   /* if(strcmp(old_doc_date.arr,bl_doc_date.arr) != 0 || strcmp(old_slmt_type.arr,bl_slmt_type.arr) != 0 ) 
	  print_date_total();
   */
	if(strcmp(old_slmt_type.arr,bl_slmt_type.arr) != 0 )
	  {
	  print_comp_total();
	  fprintf(fp,"\f");
	  print_head();
	  }

    if(strcmp(old_ref_instr_num.arr,bl_ref_instr_num.arr) != 0 || strcmp(old_slmt_type.arr,bl_slmt_type.arr) != 0)
	 {
	  
	  	if (bl_ref_instr_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,bl_ref_instr_date.arr);

		get_local_date_convn1();

		strcpy(bl_ref_instr_date.arr,nd_loc_date.arr);

		bl_ref_instr_date.arr[bl_ref_instr_date.len] = '\0';
  
    }
	 
	  	if (bl_ref_doc_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,bl_ref_doc_date.arr);

		get_local_date_convn1();

		strcpy(bl_ref_doc_date.arr,nd_loc_date.arr);

		bl_ref_doc_date.arr[bl_ref_doc_date.len] = '\0';
  
    }

	
	 
	 check_page_end(3,0);
	 fprintf(fp," %-25s : %-30s              %-30s : %-20s\n",loc_legend[20],bl_ref_instr_num.arr,loc_legend[23],bl_ref_doc_no.arr);
     fprintf(fp," %-25s : %-30s              %-30s : %-10s\n",loc_legend[21],bl_ref_instr_date.arr,loc_legend[24],bl_ref_doc_date.arr);
	 fprintf(fp," %-25s : %-30s              %-30s : ",loc_legend[22],bl_ref_instr_bank.arr,loc_legend[11]);
     print_formated(bl_ref_slmt_amt);
	 fprintf(fp,"\n\n");
	 lctr = lctr + 3;
      }

	check_page_end(1,0);

	if (bl_doc_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,bl_doc_date.arr);

		get_local_date_convn1();

		strcpy(bl_doc_date.arr,nd_loc_date.arr);

		bl_doc_date.arr[bl_doc_date.len] = '\0';
  
    }

		if (bl_org_doc_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,bl_org_doc_date.arr);

		get_local_date_convn1();

		strcpy(bl_org_doc_date.arr,nd_loc_date.arr);

		bl_org_doc_date.arr[bl_org_doc_date.len] = '\0';
  
    }

	fprintf(fp," %-14s %-23s ",bl_doc_date.arr,bl_doc_no.arr); 
	//fprintf(fp," %-10s %-20s",bl_doc_date.arr,bl_doc_no.arr); 
	print_formated(bl_org_doc_amt);
	fprintf(fp,"%-25s %-10s %-20s %-20s\n",bl_approval_code.arr,bl_org_doc_date.arr,bl_org_doc_no.arr,nd_sales_dft_no.arr); 
	//fprintf(fp,"%-30s %-10s %-20s %-20s\n",bl_approval_code.arr,bl_org_doc_date.arr,bl_org_doc_no.arr,nd_sales_dft_no.arr); 
	tot_instr_amt = tot_instr_amt + bl_org_doc_amt;
	lctr = lctr + 1;

	strcpy(old_slmt_type.arr,bl_slmt_type.arr);
	old_slmt_type.len=strlen(old_slmt_type.arr);

	/*strcpy(old_doc_date.arr,bl_doc_date.arr);
	old_doc_date.len=strlen(old_doc_date.arr);*/

	strcpy(old_ref_instr_num.arr,bl_ref_instr_num.arr);
	old_ref_instr_num.len=strlen(old_ref_instr_num.arr);

  }
  if(first)
  {
	if (nd_slmt_type.arr[0] != '\0')
	 {
      strcpy(bl_slmt_type.arr,nd_slmt_type.arr);
      bl_slmt_type.len = strlen(bl_slmt_type.arr);
	  fetch_slmt_desc();
	  }
	 print_head();
    }
  print_instr_total();
  /*print_date_total();*/
  print_comp_total();
 
}   

print_instr_total()
{
	check_page_end(3,0);
	fprintf(fp," %-10s %-27s %-15s \n"," "," ","---------------");
	fprintf(fp," %25s %-10s:  ",loc_legend[19],loc_legend[17]); 
	print_formated(tot_instr_amt);
	fprintf(fp,"\n");
	fprintf(fp," %-10s %-27s %-15s \n"," "," ","---------------"); 
	tot_org_doc_amt = tot_org_doc_amt + tot_instr_amt;
	tot_instr_amt = 0;
	lctr = lctr + 3;
}

print_date_total()
{
	check_page_end(3,0);
	fprintf(fp," %-10s %-27s %-15s \n"," "," ","---------------");
	fprintf(fp," %-10s %-8s %-4s %-5s:"," "," ",loc_legend[13],loc_legend[17]); 
	print_formated(tot_org_doc_amt);
	fprintf(fp,"\n");
	fprintf(fp," %-10s %-27s %-15s \n"," "," ","---------------"); 
	comp_tot_org_doc_amt = comp_tot_org_doc_amt + tot_org_doc_amt;
	tot_org_doc_amt = 0;
	lctr = lctr + 3;
}

print_comp_total()
{
	check_page_end(3,0);
	fprintf(fp," %-10s %-27s %-15s \n"," "," ","---------------"); 
	fprintf(fp," %25s %-10s:  ",loc_legend[18],loc_legend[17]); 
	//fprintf(fp," %-9s%-19s %-9s:"," ",loc_legend[18],loc_legend[17]); 
	print_formated(tot_org_doc_amt);
	fprintf(fp,"\n");
	fprintf(fp," %-10s %-27s %-15s \n"," "," ","---------------"); 
	tot_org_doc_amt = 0;
	lctr = lctr + 3;
}

end_of_rep()
{
	check_page_end(3,0);
	fprintf(fp,"\n\n %75s\n\f",loc_legend[28]);
	fflush(fp);
}

open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLRCRPDT.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLRCRPDT.lis");
       proc_exit();
    }
}



print_head()
{
	print_page_title();
	fprintf(fp,"-------------------------------------------------------------------------------------------------------------------------------------\n");
	
	fprintf(fp," %-14s %-16s%-4s%19s  %-25s %-8s%-3s%-19s  %-18s\n",loc_legend[9],loc_legend[10]," ",loc_legend[11],loc_legend[12],loc_legend[13]," ",loc_legend[14],loc_legend[16]);
	//fprintf(fp," %-10s %-19s %-15s  %-30s %-10s %-20s %-18s \n",loc_legend[9],loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[14],loc_legend[16]);
	fprintf(fp,"-------------------------------------------------------------------------------------------------------------------------------------\n");
	fflush(fp); 
	lctr = 9;
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;


	l_report_width=130;
	l_acc_entity_length = strlen(hosp_name.arr);

	//Code for Line 1

	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	fprintf(fp,"%-13s : BL",loc_legend[25]);
	//fprintf(fp,"%3s           : %2s",loc_legend[25],loc_legend[28]);
	l_start_point=l_start_point-18;
	print_spaces(l_start_point);
	fprintf(fp,"%s",hosp_name.arr);
	l_comp_name_end_point=l_start_point+18+l_acc_entity_length;
	l_start_point=(l_report_width-(15+strlen(date.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	
	if (date.arr[0] != 0)
	
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,date.arr);

		get_local_date_convn1();

		strcpy(date.arr,nd_loc_date.arr);

		date.arr[date.len] = '\0';
  
    }

	fprintf(fp,"%-15.15s : %s\n",loc_legend[3],date.arr);

	//Code for Line 2
	
	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[1]))/2))-((strlen(nd_slmt_desc.arr) + 2)/2);
	fprintf(fp,"%-13s : %s",loc_legend[26],user_id.arr);
	l_start_point=l_start_point-(strlen(user_id.arr)+16);
	print_spaces(l_start_point);
	fprintf(fp,"%s : %s",loc_legend[1],nd_slmt_desc.arr);
	
	l_comp_name_end_point=l_start_point+(strlen(user_id.arr)+16)+strlen(loc_legend[1])+strlen(nd_slmt_desc.arr)+2;
	l_start_point=(l_report_width-(18+strlen(date_time.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp,"%-15.15s : %s\n",loc_legend[4],date_time.arr);
    
	//Code for Line 3
	l_start_point=0;
	l_start_point=ceill(l_report_width/2)-(strlen(loc_legend[8])/2);
	fprintf(fp,"%-14.14s: BLRCRPDT",loc_legend[2]);
	//fprintf(fp,"%-14.14s: %8s",loc_legend[2],loc_legend[29]);
	l_start_point=l_start_point-24;
	print_spaces(l_start_point);
	fprintf(fp,"%s",loc_legend[8]);
	l_comp_name_end_point=l_start_point+24+strlen(loc_legend[8]);
	l_start_point=(l_report_width-(17+9)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp," %-15.15s : %d\n",loc_legend[5],++pctr);
	
	//Code for Line 4
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[6]))/2))-((strlen(nd_fm_date.arr)+strlen(nd_to_date.arr)+strlen(loc_legend[7]) + 2)/2);
	print_spaces(l_start_point);

	
	if (nd_fm_date.arr[0] != 0)
	
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,nd_fm_date.arr);

		get_local_date_convn1();

		strcpy(nd_fm_date.arr,nd_loc_date.arr);

		nd_fm_date.arr[nd_fm_date.len] = '\0';
  
    }
	
   	if (strcmp(nd_to_date.arr,"31/12/4123") == 0)
	strcpy(nd_to_date.arr,loc_legend[30]);
	else	
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,nd_to_date.arr);

		get_local_date_convn1();

		strcpy(nd_to_date.arr,nd_loc_date.arr);

		nd_to_date.arr[nd_to_date.len] = '\0';
  
    }
	
	fprintf(fp,"%s: %s %s %s\n",loc_legend[6],nd_fm_date.arr,loc_legend[7],nd_to_date.arr);
	
}

fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","-");
}

fetch_hosp_name()
{
    l_acc_name.arr[0]= '\0';
	hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	date.arr[0]		 = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
	date.len		 = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACCOUNTING_NAME,
					ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/RRRR'),
					TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    USER
               INTO :l_acc_name,
					:hosp_name, 
					:date,
					:date_time, 
					:user_id
               FROM  SY_ACC_ENTITY_LANG_VW
	           WHERE ACC_ENTITY_ID = :nd_facility
			   AND   LANGUAGE_ID   = :p_language_id;

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	l_acc_name.arr[l_acc_name.len]		   = '\0';
	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	date.arr[date.len]					   = '\0';
	user_id.arr[user_id.len]               = '\0';

}

fetch_slmt_desc()
{
    nd_slmt_desc.arr[0] = '\0';
    nd_slmt_desc.len    = 0;
    
    EXEC SQL SELECT LONG_DESC
               INTO :nd_slmt_desc
               FROM BL_SLMT_TYPE_LANG_VW
	           WHERE SLMT_TYPE_CODE = :bl_slmt_type
			   AND LANGUAGE_ID      = :p_language_id;

    if (OERROR) 
		err_mesg("SELECT failed on table BL_SLMT_TYPE",0,"");

	nd_slmt_desc.arr[nd_slmt_desc.len]           = '\0';
	
}

fetch_sales_dft()
{
    nd_sales_dft_no.arr[0] = '\0';
    nd_sales_dft_no.len    = 0;
    
    EXEC SQL SELECT CC_SALE_DRAFT_NO
               INTO :nd_sales_dft_no
               FROM BL_RECEIPT_REFUND_DTL
	           WHERE OPERATING_FACILITY_ID=:nd_facility
			   AND DOC_TYPE_CODE||'/'||DOC_NUMBER||'/'||DOC_SRNO = :bl_org_doc_no;
/*			   AND DOC_TYPE_CODE||'/'||DOC_NUMBER = :bl_org_doc_no;*/

    if (OERROR) 
		err_mesg("SELECT failed on table BL_RECEIPT_REFUND_DTL",0,"");

	nd_sales_dft_no.arr[nd_sales_dft_no.len]           = '\0';
	
}

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
    }
}                        

check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+10;

	if((lctr+l_lead_lines)> 55) 
	{
		fprintf(fp,"\f");
		print_head();
		lctr = 3;
	}
}

print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}




fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRCRPDT.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

/*get_language_id()
{
	language_id.arr[0] = '\0';
	language_id.len = 0;
	

	EXEC SQL SELECT LANGUAGE_ID INTO :language_id FROM SM_APPL_USER where APPL_USER_ID = :user_id;

	if (OERROR)
        err_mesg("SELECTING LANGUAGE_ID failed",0,"");

}*/

get_local_date_convn1()
{

nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date1();

}


get_local_date1()
{

	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'dd/mm/yyyy'),
													    :p_language_id,
														t_date);

		:nd_loc_date := to_char(t_date,'dd/mm/yyyy');


	END;

	END-EXEC;

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

get_initialize()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
}

/************************************************************************/
/* OCS MEDICOM VER 1.0                                                    */
/************************************************************************/
/* PROGRAM NAME          : ARBINACT.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 23-FEB-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                                              */
/*  FUNCTION             :                                               */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        AR_CUSTOMER               Query/Update/Delete          */
/*         2.        AR_PENDING_DOC            Query                  */
/*         3.        SY_PROG_CONTROL           Update/Lookup            */
/*         4.        SY_PROG_MESG              Insert                 */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <math.h>
#include <string.h>
//#include "winexecc.h"
#include "gl.h"
/*
#define OERROR (sqlca.sqlcode < 0)
*/
#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)

#define RESOURCE_BUSY        (sqlca.sqlcode == -54)

/*
#define DEBUG 0
*/
EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd[132];

   VARCHAR  nd_facility_id   [3],
			nd_session_id    [16],
            nd_pgm_date      [25],
            nd_cutoff_date   [12],
            hosp_name    [120],
            date_time    [20],
            user_id      [40];

   VARCHAR  ar_customer_cust_code[10],
            ar_customer_alpha_code[11],
            ar_customer_long_name[62],
            ar_customer_inv_date[12],
				p_language_id			    [3],
            d_dummy[2];

   

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include "winproc.h"

int recs_deleted = 0;

FILE *fp;
int lctr = 0,pctr = 0;
char filename[150];

void proc_main(argc,argv)
char *argv[];
int argc;
{
   char mesg1[50];
 
  strcpy(filename,WORKING_DIR);
  strcat(filename,"arbinact.lis");

   if (argc != 5)
   {
    int i = 0;
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }
 
   strcpy(g_pgm_id,"ARBINACT");

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

    strcpy(g_facility_id,argv[4]);

   if(sql_connect() == -1)
   {
      disp_message(ERR_MESG,"Error in connecting to Oracle");
      sprintf(mesg1,"Error is %s\n",sqlca.sqlerrm.sqlerrmc);
      disp_message(ERR_MESG,mesg1);
      proc_exit();
   }

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   set_meduser_role();

      	strcpy(p_language_id.arr,l_language_id.arr);
	p_language_id.len = l_language_id.len;

   chk_active();
      
   start_prog_control();
   start_prog_msg();

   nd_cutoff_date.arr[0]    = '\0';
   nd_cutoff_date.len       = 0;

   EXEC SQL SELECT operating_facility_id,
				   PARAM1
              INTO :nd_facility_id,
				   :nd_cutoff_date
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBINACT'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   nd_cutoff_date.arr[nd_cutoff_date.len] = '\0';

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   lock_tables();

   declare_curs();
   fetch_hosp_name();
   open_file();

   recs_deleted = 0;

   while (fetch_ar_cust())
   {
       if (!chk_pending_doc()) 
       {
          delete_ar_customer();
          print_rec();
          recs_deleted++;
       }

/*****
       if (recs_deleted % 500 == 0)
       {
            EXEC SQL COMMIT WORK; 
            if (OERROR)
                err_mesg("COMMIT failed",0,""); 
        }
*****/
   }

   fprintf(fp,"\n                                            ***  END OF REPORT ***\n");

   EXEC SQL COMMIT WORK; 
   if (OERROR)
          err_mesg("COMMIT failed",0,""); 

   end_prog_msg();
   end_prog_control();
   EXEC SQL COMMIT WORK RELEASE;
   if (OERROR)
          err_mesg("COMMIT failed",0,""); 

}

lock_tables()
{
   EXEC SQL LOCK TABLE AR_CUSTOMER
              IN EXCLUSIVE MODE NOWAIT;

   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2190");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_CUSTOMER",0,"");

   EXEC SQL LOCK TABLE AR_PENDING_DOC
              IN EXCLUSIVE MODE NOWAIT;

   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2200");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_PENDING_DOC",0,"");
}

open_file()
{
   if ((fp = fopen(filename,"w")) == NULL)
   {
       disp_message(ERR_MESG,"Error in opening file arbinact.lis ");
       proc_exit();
   }
   print_head();
}
 
print_head() 
{
void print_hospital_name();
/*
	fprintf(fp,"\fMDL : AR                                         %-30s                                        %-16s\n",hosp_name.arr,date_time.arr);
*/ 
    fprintf(fp,"\f");
print_hospital_name(133,"AR",hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                                      %-28s                                          PAGE : %4d\n",
"ARBINACT","  PURGED CUSTOMERS REPORT   ",++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"CUST CODE  ALPHA CODE  NAME                                     LAST INV DATE \n");
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 7;
}

print_rec()
{
   if (lctr > 55)
     print_head();

   fprintf(fp,"%-10s %-11s %-40s %-12s\n",
            ar_customer_cust_code.arr,
            ar_customer_alpha_code.arr,
            ar_customer_long_name.arr,
            ar_customer_inv_date.arr);
   lctr ++;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;


/*-- Y2K correction. Year format changed from YY to YYYY VSK 14/11/1999 */

    EXEC SQL SELECT ACCOUNTING_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY
			  WHERE ACC_ENTITY_ID = :nd_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY");
hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

 

declare_curs()
{

/*-- Y2K corrections. Format change for :nd_cutoff_date VSK 14/11/1999 */

   EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
             SELECT CUST_CODE,
                    CUST_ALPHA_CODE,
                    LONG_NAME,
                    TO_CHAR(LAST_INV_DOC_DATE,'DD/MM/YYYY')
               FROM AR_CUSTOMER
              WHERE NVL(OUTSTANDING_BALANCE_AMT,0) = 0 
                AND TO_DATE(NVL(LAST_INV_DOC_DATE,ADDED_DATE)) <= TO_DATE(:nd_cutoff_date,'DD/MM/YYYY');

   EXEC SQL    OPEN AR_CUSTOMER_CUR;
  
   if (OERROR)
         err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

   EXEC SQL DECLARE AR_PENDING_CUR CURSOR FOR
             SELECT 'X'
               FROM AR_PENDING_DOC
              WHERE CUST_CODE = :ar_customer_cust_code;
} 

fetch_ar_cust()
{
   ar_customer_cust_code.arr[0]  = '\0';
   ar_customer_alpha_code.arr[0] = '\0';
   ar_customer_long_name.arr[0]  = '\0';
   ar_customer_inv_date.arr[0]   = '\0';

   ar_customer_cust_code.len     = 0;
   ar_customer_alpha_code.len    = 0;
   ar_customer_long_name.len     = 0;
   ar_customer_inv_date.len      = 0;

   EXEC SQL FETCH AR_CUSTOMER_CUR
             INTO :ar_customer_cust_code,
                  :ar_customer_alpha_code,
                  :ar_customer_long_name,
                  :ar_customer_inv_date;
 
   if (OERROR)
         err_mesg("FETCH failed on cursor AR_CUSTOMER_CUR",0,"");

  ar_customer_cust_code.arr[ar_customer_cust_code.len]    = '\0';
  ar_customer_alpha_code.arr[ar_customer_alpha_code.len]  = '\0';
  ar_customer_long_name.arr[ar_customer_long_name.len]    = '\0';
  ar_customer_inv_date.arr[ar_customer_inv_date.len]      = '\0';

  if (LAST_ROW)
      return (0);
  else
      return (1);
}

chk_pending_doc()
{
   
    EXEC SQL OPEN AR_PENDING_CUR;

    if (OERROR)
         err_mesg("OPEN failed on cursor AR_PENDING_CUR",0,"");

    EXEC SQL FETCH AR_PENDING_CUR
              INTO :d_dummy;
  
    if (OERROR)
         err_mesg("FETCH failed on cursor AR_PENDING_CUR",0,"");

    return(sqlca.sqlerrd[2]);

}

delete_ar_customer()
{
   EXEC SQL DELETE AR_CUSTOMER
             WHERE CUST_CODE = :ar_customer_cust_code;

   if (OERROR)
         err_mesg("DELETE failed on table AR_CUSTOMER",0,"");


}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}
void print_hospital_name(nd_rep_width    ,
                         nd_mod_id       ,
                         nd_hospital_name,
                         nd_date          )
int  nd_rep_width;
char nd_mod_id[3];
char nd_hospital_name[31]; 
char nd_date[17];
{    
	int i = 0 , pos = 0 , len = 0, len_date = 0 , pos_date = 0,len1 = 0;

    /*Find the length of Hospital Name*/
    for(len = 0; nd_hospital_name[len] != '\0'; len++);

    /*Find the length of Date*/
    for(len_date = 0; nd_date[len_date] != '\0'; len_date++);
    
    len1 = (len % 2 );

	if (len1 == 0)
	  len1=9;
	else 
	   len1=10;
 
	
    len = (len / 2 )  ;

    pos = (nd_rep_width / 2	) - len;

	pos_date = nd_rep_width - len_date;

	fprintf(fp,"MDL : %2s",nd_mod_id);
     
    
	for(i = len1; i < pos ; fprintf(fp," "),i++);

	fprintf(fp,"%s",nd_hospital_name);

	for(i = i + (len * 2) ; i < pos_date + 1; fprintf(fp," "),i++);

    fprintf(fp,"%s\n",nd_date);
}

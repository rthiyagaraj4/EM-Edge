/************************************************************************/
/* OCS MEDICOM VER 2.0                                                    */
/************************************************************************/
/* PROGRAM NAME          : ARBRCPST.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 09-FEB-1993                                      */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                               */
/*                                                                      */
/*  TABLE DETAILS                                                        */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        AR_REC_HDR               Query/Update              */
/*         2.        AR_REC_LINE                 Query                  */
/*         3.        SY_ACC_ENTITY_DOC_TYPE      Lookup                 */
/*         4.        SY_ACC_ENTITY               Lookup                 */
/*         5.        AR_CUSTOMER                 Lookup                 */
/*         6.        AR_PMNT_TERMS               Lookup                 */
/*         7.        BL_BLNG_GRP                 Lookup                 */
/*         8.        MP_PATIENT_MAST             Lookup                 */
/*         9.        AR_PARAMETER                Lookup                 */
/*        10.        GL_ACC_CHART                Lookup                 */
/*        11.        SY_DEPT                     Lookup                 */
/*        12.        GL_PRODUCT_LINE             Lookup                 */
/*        13.        GL_SUBLEDGER_LINE           Lookup                 */
/*        14.        GL_ACC_COMBINATION          Lookup                 */
/*        15.        AR_DOC_ERROR           Query/Insert/Delete         */
/*        16.        SY_DOC_CONTROL            Insert/Lookup            */
/*        17.        SY_PROG_CONTROL           Update/Lookup            */
/*        19.        SY_PROG_MESG                Insert                 */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*         2.        POST                validate_posting_acct          */
/*         3.        POST_DOC            post_doc (GL posting acc val)  */
/*         4.        RC_POST             ar_rec_posting                 */
/*                                              (AR reciepts posting)   */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>        
#include <math.h>    
#include "gl.h"  
/*   
#define OERROR (sqlca.sqlcode < 0)  
*/
#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)

#define RESOURCE_BUSY        (sqlca.sqlcode == -54)

/* extern char OUTPUT_FILE_NAME[75]; */

#define VIEW_LOG_FILE 1

EXEC SQL BEGIN DECLARE SECTION;     

   VARCHAR uid_pwd[132];

    int process_rep_flg, nd_no_of_decimal;

	char	temp_var[100];
	char	temp_var1[100];

   VARCHAR  nd_facility_id   [3],
			nd_session_id    [16],
            nd_pgm_date      [25],
            nd_fm_doc_type   [7],
            nd_to_doc_type   [7],
            nd_fm_doc_num    [10],
            nd_to_doc_num    [10],
            nd_fm_doc_date   [12],
            nd_to_doc_date   [12],
            nd_proc_flag     [2],
            nd_view_print_flg[2],

			nd_acc_entity_code [5],
			p_operational_modules [300],
			d_consolidated_yn[2],


            pmnt_terms_code  [3],
            billing_group    [5],  -- CRF-0120
            patient_id       [11],
            patient_flag     [2],
            bl_instal_flag   [2],
            mp_instal_flag   [2],
            nd_error_flag    [2],
            mast_status      [3],
            d_curr_pgm_name                      [15],
            dummy            [10][5],

			v_dummy   [2],

            d_last_rec_doc_date           [12],

			d_module_valid_id             [3],


            d_sy_acc_bl_instal_flag       [4],
            d_sy_acc_mp_instal_flag       [4],
            d_ar_acc_status               [2],
            d_ar_acc_valid_flag           [2],
            d_customer_status             [2],
            d_customer_patient_flag       [2],
            d_pmnt_terms_status           [2],
            d_bl_blng_grp_status          [2],

            sy_doc_print_flag             [3],
            curr_acc_year                 [5],
            curr_acc_month                [3],
            gl_summ_pro_flag              [2],
            d_sy_num_acc_per              [5],
            prior_post_allow              [3],
            d_chk_amt_local               [19];
   VARCHAR  p_language_id[4];
   VARCHAR  ar_interface_code[2],
             ar_pat_doc_type_code          [7],
           ar_pat_doc_num                [9],
           ar_pat_patient_id             [21],
           ar_pat_bill_doc_type_code     [7],
           ar_pat_bill_num               [9],
           ar_pat_inv_doc_type_code          [7],
           ar_pat_inv_doc_num                [9],
           ar_pat_bill_date              [12],
           ar_pat_rowid                  [31];


 VARCHAR    d_rc_hdr_acc_entity_code               [5],
            d_rc_hdr_doc_type_code                 [7],
            d_rc_hdr_doc_num                       [9],
            d_rc_hdr_last_line_num                 [5],
            d_rc_hdr_doc_date                      [15],
            d_rc_hdr_doc_ref                       [11],
            d_rc_hdr_cust_code                     [9],
            d_rc_hdr_main_acc1_code                [7],
            d_rc_hdr_main_acc2_code                [5],
            d_rc_hdr_sub_group_code          [4],
            d_rc_hdr_sub_line_code           [9],
            d_rc_hdr_dept_code                     [11],
            d_rc_hdr_product_group_code            [4],
            d_rc_hdr_product_line_code             [5],
            d_rc_hdr_amt_foreign                   [17],
            d_rc_hdr_amt_local                     [17],
            d_rc_hdr_narration                     [51],
            d_rc_hdr_post_month                    [3],
            d_rc_hdr_post_year                     [5],
            d_rc_hdr_currency_code                 [7],
            d_rc_hdr_exchg_rate                    [15],
            d_rc_hdr_bank_desc                     [31],
            d_rc_hdr_cheque_num                    [11],
            d_rc_hdr_cheque_date                   [15],
            d_rc_hdr_misc_clong_name           [101],  -- CRF-0120
            d_rc_hdr_misc_cshort_name          [61],  -- CRF-0120
            d_rc_hdr_misc_cadd1_desc           [61],
            d_rc_hdr_misc_cadd2_desc           [61],
            d_rc_hdr_misc_cadd3_desc           [61],
            d_rc_hdr_misc_czip_desc            [31],
            d_rc_hdr_misc_long_name_ch             [101],  -- CRF-0120
            d_rc_hdr_misc_short_name_ch            [101],  -- CRF-0120
            d_rc_hdr_misc_add1_desc_ch             [61],
            d_rc_hdr_misc_add2_desc_ch             [61],
            d_rc_hdr_misc_add3_desc_ch             [61],
            d_rc_hdr_misc_zip_desc_ch              [31],
            d_rc_hdr_tel_num                       [31],
            d_rc_hdr_contact_name                  [101],  -- CRF-0120
            d_rc_hdr_contact_name_title            [61],  -- CRF-0120
            d_rc_hdr_error_flag                    [2],
            d_rc_hdr_print_flag                    [2],
            d_rc_hdr_posted_flag                   [2],
            d_rc_hdr_interface_flag                [2],
            d_rc_hdr_posted_date                   [15],
            d_rc_hdr_posted_by_id                  [21],
            d_rc_hdr_rowid                         [31],

            d_rc_hdr_doc_date_chking               [15],

            d_line_main_acc1_code                  [7],
            d_line_main_acc2_code                  [5],
            d_line_dept_code                       [11],
            d_line_product_group_code              [4],
            d_line_product_line_code               [5],
            d_line_sub_group_code            [4],
            d_line_sub_line_code             [9],
            d_line_amt_local                       [17],
            d_line_line_num                        [5],
            d_line_org_doc_type_code               [7],
            d_line_org_doc_num                     [9],
            d_line_line_type_code                  [2];

   double   nd_dtl_tot_amt,
            ar_pend_pending_amt,
			ar_pend_pending_amt_abs,
			ar_pat_amount,
            ar_pat_tot_amt,
			ar_pat_abs_tot_amount ,
			ar_pat_abs_amount,
			pending_amt,
			l_line_amt_pending; 

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include "winproc.h"
                         
char string_var[100];                         
int g_err_typ;

char g_err_id[10],
     g_err_msg[80];


/* These variables ar used for calling post_doc (Posting acc validation) */

int  d_curr_year;
int  d_curr_month;
int  d_num_of_acc_periods;
char d_summ_flag;

/*                                                                         */

void proc_main(argc,argv)
char *argv[];
int argc;
{

	
   if (argc < 6)
   {
      disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
      proc_exit();
   }

   if (argv[5][0] == 'R')
      {strcpy(g_pgm_id,"ARRRCLST"); 
       strcpy(OUTPUT_FILE_NAME,"ARRRCLST.LIS"); 
      } 
       
   else
     { strcpy(g_pgm_id,"ARBRCPST");      
      strcpy(OUTPUT_FILE_NAME,"ARBRCPST.LIS"); 
     }
   strcpy(d_curr_pgm_name.arr,g_pgm_id); 
   d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr);

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle\n");
      proc_exit();
   }               

#ifdef DEBUG
  disp_message(INFO_MESG,"After connecting to oracle...\n");
#endif
   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);
   strcpy(g_facility_id,argv[4]);
   set_meduser_role();
   strcpy(p_language_id.arr,l_language_id.arr);
   p_language_id.len = l_language_id.len;
   chk_active();

   nd_fm_doc_type.arr[0]    = '\0';
   nd_fm_doc_num.arr[0]     = '\0';
   nd_fm_doc_date.arr[0]    = '\0';
   nd_to_doc_type.arr[0]    = '\0'; 
   nd_to_doc_num.arr[0]     = '\0';
   nd_to_doc_date.arr[0]    = '\0';
   nd_proc_flag.arr[0]      = '\0';
   nd_view_print_flg.arr[0] = '\0';
   nd_facility_id.arr[0] = '\0';

   
   nd_fm_doc_type.len       = 0;
   nd_fm_doc_num.len        = 0;
   nd_fm_doc_date.len       = 0;
   nd_to_doc_type.len       = 0;
   nd_to_doc_num.len        = 0;
   nd_to_doc_date.len       = 0;
   nd_proc_flag.len         = 0;
   nd_view_print_flg.len    = 0;
   nd_facility_id.len       = 0;
   process_rep_flg          = 0;


   EXEC SQL SELECT OPERATING_FACILITY_ID , PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,PARAM6,
                   PARAM8,PARAM9,PARAM10
              INTO :nd_facility_id, :nd_fm_doc_type, :nd_fm_doc_num, :nd_fm_doc_date,
                   :nd_to_doc_type, :nd_to_doc_num, :nd_to_doc_date,
				   :nd_proc_flag,
                   :nd_view_print_flg, :process_rep_flg
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBRCPST'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_fm_doc_type.arr[nd_fm_doc_type.len]    = '\0';
   nd_fm_doc_num.arr[nd_fm_doc_num.len]      = '\0';
   nd_fm_doc_date.arr[nd_fm_doc_date.len]    = '\0';
   nd_to_doc_type.arr[nd_to_doc_type.len]    = '\0';
   nd_to_doc_num.arr[nd_to_doc_num.len]      = '\0';
   nd_to_doc_date.arr[nd_to_doc_date.len]    = '\0';
   nd_proc_flag.arr[nd_proc_flag.len]        = '\0';
   nd_view_print_flg.arr[nd_view_print_flg.len]        = '\0';
    nd_facility_id.arr[nd_facility_id.len]        = '\0';

#ifdef DEBUG
   sprintf(string_var,"fr type is <%d> - <%s>\n",nd_fm_doc_type.len ,nd_fm_doc_type.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to type is <%d> - <%s>\n",nd_to_doc_type.len ,nd_to_doc_type.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"fr num  is <%d> - <%s>\n",nd_fm_doc_num.len ,nd_fm_doc_num.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to num  is <%d> - <%s>\n",nd_to_doc_num.len ,nd_to_doc_num.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"fr dt   is <%d> - <%s>\n",nd_fm_doc_date.len ,nd_fm_doc_date.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to dt   is <%d> - <%s>\n",nd_to_doc_date.len ,nd_to_doc_date.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"prc flg is <%d> - <%s>\n",nd_proc_flag.len ,nd_proc_flag.arr);
   disp_message(INFO_MESG,string_var);
#endif

   start_prog_control();
   start_prog_msg();
   
   delete_records();

   fetch_acc_entity_flag();

   fetch_ar_parameter();
  
   declare_cursor();

   while (fetch_cur())    /* Fetches Hdr recs rowid */
   {
      #ifdef DEBUG
       disp_message(INFO_MESG,"Inside while...\n"); 
      #endif

      strcpy(nd_error_flag.arr,"N");
      nd_error_flag.len = 1;

      nd_dtl_tot_amt    = 0;

      if (!fetch_rec())    /* Fetch all the details & lock Hdr row */
          continue;

      validate_rec_header();

      if (!validate_rec_line())
             continue;

      validate_rec_amt();

      update_err_flg();
      
      if (nd_proc_flag.arr[0] == 'P') 
      {
          #ifdef DEBUG
          disp_message(INFO_MESG,"Processing option\n");
           #endif
          if (nd_error_flag.arr[0] == 'N')
          {
#ifdef DEBUG
    disp_message(INFO_MESG,"Online GL interface\n");
		
		sprintf(string_var," doc_date_chking is <%s> last rec doc <%s>\n",
            d_rc_hdr_doc_date_chking.arr,
            d_last_rec_doc_date.arr);
            disp_message(INFO_MESG,string_var);


		sprintf(string_var," doc_date_chking is <%ld> last rec doc <%ld>\n",
            atol(d_rc_hdr_doc_date_chking.arr),
            atol(d_last_rec_doc_date.arr));
            disp_message(INFO_MESG,string_var);

#endif
                 ar_rec_posting(
            d_rc_hdr_acc_entity_code.arr,
            d_rc_hdr_doc_type_code.arr,
            d_rc_hdr_doc_num.arr,
            d_rc_hdr_last_line_num.arr,
            d_rc_hdr_doc_date.arr,
            d_rc_hdr_doc_ref.arr,
            d_rc_hdr_cust_code.arr,
            d_rc_hdr_main_acc1_code.arr,
            d_rc_hdr_main_acc2_code.arr,
            d_rc_hdr_sub_group_code.arr,
            d_rc_hdr_sub_line_code.arr,
            d_rc_hdr_dept_code.arr,
            d_rc_hdr_product_group_code.arr,
            d_rc_hdr_product_line_code.arr,
            d_rc_hdr_amt_local.arr,
            d_rc_hdr_narration.arr,
            d_rc_hdr_post_month.arr,
            d_rc_hdr_post_year.arr,
            d_rc_hdr_currency_code.arr,
            d_rc_hdr_exchg_rate.arr,
            d_rc_hdr_misc_clong_name.arr,
            d_rc_hdr_misc_cshort_name.arr,
            d_rc_hdr_misc_cadd1_desc.arr,
            d_rc_hdr_misc_cadd2_desc.arr,
            d_rc_hdr_misc_cadd3_desc.arr,
            d_rc_hdr_misc_czip_desc.arr,
            d_rc_hdr_misc_long_name_ch.arr,
            d_rc_hdr_misc_short_name_ch.arr,
            d_rc_hdr_misc_add1_desc_ch.arr,
            d_rc_hdr_misc_add2_desc_ch.arr,
            d_rc_hdr_misc_add3_desc_ch.arr,
            d_rc_hdr_misc_zip_desc_ch.arr,
            d_rc_hdr_tel_num.arr,
            d_rc_hdr_contact_name.arr,
            d_rc_hdr_contact_name_title.arr,
            d_rc_hdr_rowid.arr,
            ar_interface_code.arr,
            d_rc_hdr_doc_date_chking.arr,
            d_last_rec_doc_date.arr,
            d_rc_hdr_cheque_num.arr,
            d_rc_hdr_cheque_date.arr,
			d_rc_hdr_bank_desc.arr,
			nd_facility_id.arr ); /* ADDED BY SARGUNAN FOR GDOH-CRF-0107 */



             if (ar_interface_code.arr[0] == 'O')
             {
                  gl_posting();

				  ins_gl_distrbn(d_rc_hdr_doc_type_code.arr,d_rc_hdr_doc_num.arr,5);


/*    Commented on 15-MAR-93 as per request by GL team 

      if (!  (atoi(d_rc_hdr_post_year.arr) > atoi(curr_acc_year.arr)) ||
            ( atoi(d_rc_hdr_post_year.arr) == atoi(curr_acc_year.arr) && 
              atoi(d_rc_hdr_post_month.arr) > atoi(curr_acc_month.arr) )  )
                     delete_gl_recs();
*/
              }
          } 
       }
       EXEC SQL COMMIT WORK;

       if (OERROR)
         err_mesg("COMMIT failed",0,""); 
   }

if (process_rep_flg == 3)
{
   EXEC SQL COMMIT WORK RELEASE;

   if (OERROR)
        err_mesg("COMMIT failed",0,""); 

   run_report();

   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle 2 time\n");
      proc_exit();
   }
}

/*   delete_records();*/
   end_prog_msg();
   end_prog_control();
   EXEC SQL COMMIT WORK RELEASE;

   return;

}

declare_cursor()
{

#ifdef DEBUG
   disp_message(INFO_MESG,"Before Declaring cursor CUR_REC_HDR...\n");
#endif

/*-- Y2K correction. Format introduced for 'FROM AND TO' Date 
     as DD/MM/YYYY VSK 14/11/1999 */

   EXEC SQL DECLARE CUR_REC_HDR CURSOR FOR
             SELECT DOC_TYPE_CODE, DOC_NUM
               FROM AR_REC_HDR
              WHERE OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
				AND DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'      ')
                AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                AND DOC_NUM       >= NVL(:nd_fm_doc_num,0)
                AND DOC_NUM       <= NVL(:nd_to_doc_num,99999999)
                AND NVL(DOC_DATE,SYSDATE)      >= 
                    NVL(TO_DATE(:nd_fm_doc_date,'DD/MM/YYYY'),to_date('00010101','YYYYDDMM'))
                AND NVL(DOC_DATE,SYSDATE) <= 
                    NVL(TO_DATE(:nd_to_doc_date,'DD/MM/YYYY'),to_date('47123112','YYYYDDMM'))
                AND NVL(POSTED_FLAG,'N') = 'N';

   EXEC SQL OPEN CUR_REC_HDR;

   if (OERROR)
         err_mesg("OPEN failed on cursor CUR_REC_HDR",0,"");

 EXEC SQL DECLARE AR_REC_HDR_CUR CURSOR FOR
           SELECT ACC_ENTITY_CODE,
                  LAST_LINE_NUM,
                  TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                  TO_CHAR(DOC_DATE,'YYYYDDMM'),
                  DOC_REF,
                  CUST_CODE,
                  MAIN_ACC1_CODE,
                  MAIN_ACC2_CODE,
                  SUBLEDGER_GROUP_CODE,
                  SUBLEDGER_LINE_CODE,
                  DEPT_CODE,
                  PRODUCT_GROUP_CODE,
                  PRODUCT_LINE_CODE,
                  AMT_FOREIGN,
                  AMT_LOCAL,
                  NARRATION,
                  POST_MONTH,
                  POST_YEAR,
                  CURRENCY_CODE,
                  EXCHG_RATE,
                  BANK_DESC,
                  CHEQUE_NUM,
                  CHEQUE_DATE,
                  MISC_CUST_LONG_NAME,
                  MISC_CUST_SHORT_NAME,
                  MISC_CUST_ADD1_DESC,
                  MISC_CUST_ADD2_DESC,
                  MISC_CUST_ADD3_DESC,
                  MISC_CUST_ZIP_DESC,
                  MISC_CUST_LONG_NAME_CHINESE,
                  MISC_CUST_SHORT_NAME_CHINESE,
                  MISC_CUST_ADD1_DESC_CHINESE,
                  MISC_CUST_ADD2_DESC_CHINESE,
                  MISC_CUST_ADD3_DESC_CHINESE,
                  MISC_CUST_ZIP_DESC_CHINESE,
                  TEL_NUM,
                  CONTACT_NAME,
                  CONTACT_NAME_TITLE,
                  PRINT_FLAG,
                  ROWID
             FROM AR_REC_HDR
            WHERE OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
			  AND DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
              AND DOC_NUM       = :d_rc_hdr_doc_num
              FOR UPDATE OF ERROR_FLAG NOWAIT;

   EXEC SQL DECLARE CUR_REC_LINE CURSOR FOR
             SELECT AMT_LOCAL,
                    LINE_NUM,
                    MAIN_ACC1_CODE,
                    MAIN_ACC2_CODE,
                    DEPT_CODE,
                    PRODUCT_GROUP_CODE,
                    PRODUCT_LINE_CODE,
                    SUBLEDGER_GROUP_CODE,
                    SUBLEDGER_LINE_CODE,
                    ORG_DOC_TYPE_CODE,
                    ORG_DOC_NUM,
                    LINE_TYPE_CODE,
					CONSOLIDATED_INV_YN
               FROM AR_REC_LINE
              WHERE OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
			    AND DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
                AND DOC_NUM       = :d_rc_hdr_doc_num
                FOR UPDATE OF LINE_NUM NOWAIT;

   EXEC SQL DECLARE AR_TRN_DOC_TYPE_CUR CURSOR FOR
             SELECT 'X'
               FROM AR_TRN_DOC_TYPE
              WHERE DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
                AND TRN_TYPE_CODE = '5';

   EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
             SELECT NVL(STATUS,'X'),
                    PATIENT_FLAG,
                    NVL(TO_CHAR(LAST_REC_DOC_DATE,'DD/MM/YYYY'),0)
               FROM AR_CUSTOMER
              WHERE CUST_CODE        = :d_rc_hdr_cust_code;

   EXEC SQL DECLARE SY_ACC_ENTITY_DOC_TYPE_CUR CURSOR FOR
             SELECT NVL(STATUS,'X'),
                    NVL(AR_VALID_FLAG,'X'),
                    NVL(DOC_PRINT_FLAG,'X')
               FROM GL_ACC_ENTITY_DOC_TYPE_VW
              WHERE DOC_TYPE_CODE   = :d_rc_hdr_doc_type_code;

    EXEC SQL DECLARE SY_DOC_TYPE_MAST_CUR CURSOR FOR
              SELECT NVL(STATUS,'X')
                FROM SY_DOC_TYPE_MASTER
               WHERE DOC_TYPE_CODE = :d_rc_hdr_doc_type_code;
  
    EXEC SQL DECLARE AR_PENDING_CUR CURSOR FOR
              SELECT NVL(PENDING_AMT,0)
                FROM AR_PENDING_DOC   
               WHERE OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
				 AND CUST_CODE     = :d_rc_hdr_cust_code
                 AND DOC_TYPE_CODE = :d_line_org_doc_type_code
                 AND DOC_NUM       = :d_line_org_doc_num;


   EXEC SQL DECLARE AR_PATIENT_DTLS_CUR CURSOR FOR
              SELECT DOC_TYPE_CODE,
                     DOC_NUM,
                     PATIENT_ID,
					 INV_DOC_TYPE_CODE,
					 INV_DOC_NUM       ,     
                     BILL_DOC_TYPE_CODE,
                     BILL_NUM,
                     TO_CHAR(BILL_DATE,'YYYYMMDD'),
                     NVL(AMOUNT,0),
					  ABS(nvl(AMOUNT,0)),
                     ROWID
                FROM AR_PATIENT_ALLOC_DTLS
              WHERE OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
				AND DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
                AND DOC_NUM       = :d_rc_hdr_doc_num
               ORDER BY DOC_TYPE_CODE , DOC_NUM;


 

#ifdef DEBUG
   disp_message(INFO_MESG,"After Declaring  & opening cursor CUR_REC_HDR...\n");
#endif
}
/******************************************************************/


fetch_patient_dtls()
{
ar_pat_doc_type_code.arr[0]       = '\0';
ar_pat_doc_num.arr[0]             = '\0';
ar_pat_patient_id.arr[0]          = '\0';
ar_pat_bill_doc_type_code.arr[0]  = '\0';
ar_pat_bill_num.arr[0]            = '\0';
ar_pat_bill_date.arr[0]           = '\0';
ar_pat_inv_doc_type_code.arr[0] = '\0';
ar_pat_inv_doc_num.arr[0] = '\0';
ar_pat_rowid.arr[0]               = '\0';

ar_pat_doc_type_code.len          = 0;
ar_pat_doc_num.len                = 0;
ar_pat_patient_id.len             = 0;
ar_pat_bill_doc_type_code.len     = 0;
ar_pat_bill_num.len               = 0;
ar_pat_bill_date.len              = 0;
ar_pat_inv_doc_type_code.len = 0;
ar_pat_inv_doc_num.len = 0;

ar_pat_rowid.len                  = 0;

ar_pat_amount                     = 0;
ar_pat_abs_amount  =0;

   EXEC SQL FETCH AR_PATIENT_DTLS_CUR
             INTO :ar_pat_doc_type_code,
                  :ar_pat_doc_num,
                  :ar_pat_patient_id,
				  :ar_pat_inv_doc_type_code,
                  :ar_pat_inv_doc_num,
                  :ar_pat_bill_doc_type_code,
                  :ar_pat_bill_num,
                  :ar_pat_bill_date,
                  :ar_pat_amount,
                  :ar_pat_abs_amount,
                  :ar_pat_rowid;


   if (OERROR)
       err_mesg("FETCH failed on cursor AR_PATIENT_DTLS_CUR",0,"");


ar_pat_doc_type_code.arr[ar_pat_doc_type_code.len]           = '\0';
ar_pat_doc_num.arr[ar_pat_doc_num.len]                       = '\0';
ar_pat_patient_id.arr[ar_pat_patient_id.len]                 = '\0';
ar_pat_bill_doc_type_code.arr[ar_pat_bill_doc_type_code.len] = '\0';
ar_pat_bill_num.arr[ar_pat_bill_num.len]                     = '\0';
ar_pat_bill_date.arr[ar_pat_bill_date.len]                   = '\0';
ar_pat_rowid.arr[ar_pat_rowid.len]                           = '\0';
ar_pat_inv_doc_type_code.arr[ar_pat_inv_doc_type_code.len] = '\0';
ar_pat_inv_doc_num.arr[ar_pat_inv_doc_num.len]= '\0';

ar_pat_tot_amt += ar_pat_amount;
ar_pat_abs_tot_amount  += ar_pat_abs_amount;



   if (LAST_ROW)
       return (0);
   else 
       return (1);
}

/*********************************************************************/

fetch_cur()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Fetch rec...\n");
#endif

   d_rc_hdr_doc_type_code.arr[0]     = '\0';
   d_rc_hdr_doc_num.arr[0]           = '\0';

   d_rc_hdr_doc_type_code.len        = 0;
   d_rc_hdr_doc_num.len              = 0;


   EXEC SQL FETCH CUR_REC_HDR 
             INTO :d_rc_hdr_doc_type_code, :d_rc_hdr_doc_num;

   if (OERROR)
         err_mesg("FETCH failed on cursor CUR_REC_HDR",0,"");

   d_rc_hdr_doc_type_code.arr[d_rc_hdr_doc_type_code.len]     = '\0';
   d_rc_hdr_doc_num.arr[d_rc_hdr_doc_num.len]                 = '\0';

#ifdef DEBUG
    sprintf(string_var," Doc type is <%s> Doc num is <%s>\n",d_rc_hdr_doc_type_code.arr,
                  d_rc_hdr_doc_num.arr);
                  disp_message(INFO_MESG,string_var);
#endif

   if (LAST_ROW)
       return(0);
   else
       return(1);
}

fetch_rec()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Fetch rec...\n");
#endif

d_rc_hdr_acc_entity_code.arr[0]           = '\0';
d_rc_hdr_last_line_num.arr[0]             = '\0';
d_rc_hdr_doc_date.arr[0]                  = '\0';
d_rc_hdr_doc_ref.arr[0]                   = '\0';
d_rc_hdr_cust_code.arr[0]                 = '\0';
d_rc_hdr_main_acc1_code.arr[0]            = '\0';
d_rc_hdr_main_acc2_code.arr[0]            = '\0';
d_rc_hdr_sub_group_code.arr[0]      = '\0';
d_rc_hdr_sub_line_code.arr[0]       = '\0';
d_rc_hdr_dept_code.arr[0]                 = '\0';
d_rc_hdr_product_group_code.arr[0]        = '\0';
d_rc_hdr_product_line_code.arr[0]         = '\0';
d_rc_hdr_amt_foreign.arr[0]               = '\0';
d_rc_hdr_amt_local.arr[0]                 = '\0';
d_rc_hdr_narration.arr[0]                 = '\0';
d_rc_hdr_post_month.arr[0]                = '\0';
d_rc_hdr_post_year.arr[0]                 = '\0';
d_rc_hdr_currency_code.arr[0]             = '\0';
d_rc_hdr_exchg_rate.arr[0]                = '\0';
d_rc_hdr_bank_desc.arr[0]                 = '\0';
d_rc_hdr_cheque_num.arr[0]                = '\0';
d_rc_hdr_cheque_date.arr[0]               = '\0';
d_rc_hdr_misc_clong_name.arr[0]       = '\0';
d_rc_hdr_misc_cshort_name.arr[0]      = '\0';
d_rc_hdr_misc_cadd1_desc.arr[0]       = '\0';
d_rc_hdr_misc_cadd2_desc.arr[0]       = '\0';
d_rc_hdr_misc_cadd3_desc.arr[0]       = '\0';
d_rc_hdr_misc_czip_desc.arr[0]        = '\0';
d_rc_hdr_misc_long_name_ch.arr[0]         = '\0';
d_rc_hdr_misc_short_name_ch.arr[0]        = '\0';
d_rc_hdr_misc_add1_desc_ch.arr[0]         = '\0';
d_rc_hdr_misc_add2_desc_ch.arr[0]         = '\0';
d_rc_hdr_misc_add3_desc_ch.arr[0]         = '\0';
d_rc_hdr_misc_zip_desc_ch.arr[0]          = '\0';
d_rc_hdr_tel_num.arr[0]                   = '\0';
d_rc_hdr_contact_name.arr[0]              = '\0';
d_rc_hdr_contact_name_title.arr[0]        = '\0';
d_rc_hdr_print_flag.arr[0]                = '\0';
d_rc_hdr_rowid.arr[0]                     = '\0';

d_rc_hdr_doc_date_chking.arr[0]           = '\0';

d_rc_hdr_acc_entity_code.len               = 0;
d_rc_hdr_last_line_num.len                 = 0;
d_rc_hdr_doc_date.len                      = 0;
d_rc_hdr_doc_ref.len                       = 0;
d_rc_hdr_cust_code.len                     = 0;
d_rc_hdr_main_acc1_code.len                = 0;
d_rc_hdr_main_acc2_code.len                = 0;
d_rc_hdr_sub_group_code.len          = 0;
d_rc_hdr_sub_line_code.len           = 0;
d_rc_hdr_dept_code.len                     = 0;
d_rc_hdr_product_group_code.len            = 0;
d_rc_hdr_product_line_code.len             = 0;
d_rc_hdr_amt_foreign.len                   = 0;
d_rc_hdr_amt_local.len                     = 0;
d_rc_hdr_narration.len                     = 0;
d_rc_hdr_post_month.len                    = 0;
d_rc_hdr_post_year.len                     = 0;
d_rc_hdr_currency_code.len                 = 0;
d_rc_hdr_exchg_rate.len                    = 0;
d_rc_hdr_bank_desc.len                     = 0;
d_rc_hdr_cheque_num.len                    = 0;
d_rc_hdr_cheque_date.len                   = 0;
d_rc_hdr_misc_clong_name.len           = 0;
d_rc_hdr_misc_cshort_name.len          = 0;
d_rc_hdr_misc_cadd1_desc.len           = 0;
d_rc_hdr_misc_cadd2_desc.len           = 0;
d_rc_hdr_misc_cadd3_desc.len           = 0;
d_rc_hdr_misc_czip_desc.len            = 0;
d_rc_hdr_misc_long_name_ch.len             = 0;
d_rc_hdr_misc_short_name_ch.len            = 0;
d_rc_hdr_misc_add1_desc_ch.len             = 0;
d_rc_hdr_misc_add2_desc_ch.len             = 0;
d_rc_hdr_misc_add3_desc_ch.len             = 0;
d_rc_hdr_misc_zip_desc_ch.len              = 0;
d_rc_hdr_tel_num.len                       = 0;
d_rc_hdr_contact_name.len                  = 0;
d_rc_hdr_contact_name_title.len            = 0;
d_rc_hdr_print_flag.len                    = 0;
d_rc_hdr_rowid.len                         = 0;

d_rc_hdr_doc_date_chking.len               = 0;

   EXEC SQL OPEN AR_REC_HDR_CUR;

   if (RESOURCE_BUSY)
        return (0);
   else if (OERROR)
         err_mesg("OPEN failed on cursor AR_REC_HDR_CUR",0,"");
    
   EXEC SQL FETCH AR_REC_HDR_CUR 
             INTO :d_rc_hdr_acc_entity_code,
                  :d_rc_hdr_last_line_num,
                  :d_rc_hdr_doc_date,
                  :d_rc_hdr_doc_date_chking,
                  :d_rc_hdr_doc_ref,
                  :d_rc_hdr_cust_code,
                  :d_rc_hdr_main_acc1_code,
                  :d_rc_hdr_main_acc2_code,
                  :d_rc_hdr_sub_group_code,
                  :d_rc_hdr_sub_line_code,
                  :d_rc_hdr_dept_code,
                  :d_rc_hdr_product_group_code,
                  :d_rc_hdr_product_line_code,
                  :d_rc_hdr_amt_foreign,
                  :d_rc_hdr_amt_local,
                  :d_rc_hdr_narration,
                  :d_rc_hdr_post_month,
                  :d_rc_hdr_post_year,
                  :d_rc_hdr_currency_code,
                  :d_rc_hdr_exchg_rate,
                  :d_rc_hdr_bank_desc,
                  :d_rc_hdr_cheque_num,
                  :d_rc_hdr_cheque_date,
                  :d_rc_hdr_misc_clong_name,
                  :d_rc_hdr_misc_cshort_name,
                  :d_rc_hdr_misc_cadd1_desc,
                  :d_rc_hdr_misc_cadd2_desc,
                  :d_rc_hdr_misc_cadd3_desc,
                  :d_rc_hdr_misc_czip_desc,
                  :d_rc_hdr_misc_long_name_ch,
                  :d_rc_hdr_misc_short_name_ch,
                  :d_rc_hdr_misc_add1_desc_ch,
                  :d_rc_hdr_misc_add2_desc_ch,
                  :d_rc_hdr_misc_add3_desc_ch,
                  :d_rc_hdr_misc_zip_desc_ch,
                  :d_rc_hdr_tel_num,
                  :d_rc_hdr_contact_name,
                  :d_rc_hdr_contact_name_title,
                  :d_rc_hdr_print_flag,
                  :d_rc_hdr_rowid;

    if (OERROR)
         err_mesg("FETCH failed on cursor AR_REC_HDR_CUR",0,"");

d_rc_hdr_acc_entity_code.arr[d_rc_hdr_acc_entity_code.len]             = '\0';
d_rc_hdr_last_line_num.arr[d_rc_hdr_last_line_num.len]                 = '\0';
d_rc_hdr_doc_date.arr[d_rc_hdr_doc_date.len]                           = '\0';
d_rc_hdr_doc_ref.arr[d_rc_hdr_doc_ref.len]                             = '\0';
d_rc_hdr_cust_code.arr[d_rc_hdr_cust_code.len]                         = '\0';
d_rc_hdr_main_acc1_code.arr[d_rc_hdr_main_acc1_code.len]               = '\0';
d_rc_hdr_main_acc2_code.arr[d_rc_hdr_main_acc2_code.len]               = '\0';
d_rc_hdr_sub_group_code.arr[d_rc_hdr_sub_group_code.len]   = '\0';
d_rc_hdr_sub_line_code.arr[d_rc_hdr_sub_line_code.len]     = '\0';
d_rc_hdr_dept_code.arr[d_rc_hdr_dept_code.len]                         = '\0';
d_rc_hdr_product_group_code.arr[d_rc_hdr_product_group_code.len]       = '\0';
d_rc_hdr_product_line_code.arr[d_rc_hdr_product_line_code.len]         = '\0';
d_rc_hdr_amt_foreign.arr[d_rc_hdr_amt_foreign.len]                     = '\0';
d_rc_hdr_amt_local.arr[d_rc_hdr_amt_local.len]                         = '\0';
d_rc_hdr_narration.arr[d_rc_hdr_narration.len]                         = '\0';
d_rc_hdr_post_month.arr[d_rc_hdr_post_month.len]                       = '\0';
d_rc_hdr_post_year.arr[d_rc_hdr_post_year.len]                         = '\0';
d_rc_hdr_currency_code.arr[d_rc_hdr_currency_code.len]                 = '\0';
d_rc_hdr_exchg_rate.arr[d_rc_hdr_exchg_rate.len]                       = '\0';
d_rc_hdr_bank_desc.arr[d_rc_hdr_bank_desc.len]                         = '\0';
d_rc_hdr_cheque_num.arr[d_rc_hdr_cheque_num.len]                       = '\0';
d_rc_hdr_cheque_date.arr[d_rc_hdr_cheque_date.len]                     = '\0';
d_rc_hdr_misc_clong_name.arr[d_rc_hdr_misc_clong_name.len]     = '\0';
d_rc_hdr_misc_cshort_name.arr[d_rc_hdr_misc_cshort_name.len]   = '\0';
d_rc_hdr_misc_cadd1_desc.arr[d_rc_hdr_misc_cadd1_desc.len]     = '\0';
d_rc_hdr_misc_cadd2_desc.arr[d_rc_hdr_misc_cadd2_desc.len]     = '\0';
d_rc_hdr_misc_cadd3_desc.arr[d_rc_hdr_misc_cadd3_desc.len]     = '\0';
d_rc_hdr_misc_czip_desc.arr[d_rc_hdr_misc_czip_desc.len]       = '\0';
d_rc_hdr_misc_long_name_ch.arr[d_rc_hdr_misc_long_name_ch.len]         = '\0';
d_rc_hdr_misc_short_name_ch.arr[d_rc_hdr_misc_short_name_ch.len]       = '\0';
d_rc_hdr_misc_add1_desc_ch.arr[d_rc_hdr_misc_add1_desc_ch.len]         = '\0';
d_rc_hdr_misc_add2_desc_ch.arr[d_rc_hdr_misc_add2_desc_ch.len]         = '\0';
d_rc_hdr_misc_add3_desc_ch.arr[d_rc_hdr_misc_add3_desc_ch.len]         = '\0';
d_rc_hdr_misc_zip_desc_ch.arr[d_rc_hdr_misc_zip_desc_ch.len]           = '\0';
d_rc_hdr_tel_num.arr[d_rc_hdr_tel_num.len]                             = '\0';
d_rc_hdr_contact_name.arr[d_rc_hdr_contact_name.len]                   = '\0';
d_rc_hdr_contact_name_title.arr[d_rc_hdr_contact_name_title.len]       = '\0';
d_rc_hdr_print_flag.arr[d_rc_hdr_print_flag.len]                       = '\0';
d_rc_hdr_rowid.arr[d_rc_hdr_rowid.len]                                 = '\0';

d_rc_hdr_doc_date_chking.arr[d_rc_hdr_doc_date_chking.len]            = '\0';

   return(sqlca.sqlerrd[2]);
}

validate_rec_header()
{
   char chk1_arr[30],chk2_arr[30];

#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Val inv header...\n");
#endif

   EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;
 
   if (OERROR) err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

   d_ar_acc_status.arr[0]     = '\0';
   d_ar_acc_valid_flag.arr[0] = '\0';
   sy_doc_print_flag.arr[0]   = '\0';

   d_ar_acc_valid_flag.len = 0;
   d_ar_acc_status.len     = 0;
   sy_doc_print_flag.len   = 0;

   EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
             INTO :d_ar_acc_status,
                  :d_ar_acc_valid_flag,
                  :sy_doc_print_flag;
   
   if (OERROR)
        err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 

   d_ar_acc_status.arr[d_ar_acc_status.len]         = '\0';
   d_ar_acc_valid_flag.arr[d_ar_acc_valid_flag.len] = '\0';
   sy_doc_print_flag.arr[sy_doc_print_flag.len]     = '\0';
   
   if (NOT_FOUND)
         error_insert("   0","SY1610");
   else
   {
      if (d_ar_acc_valid_flag.arr[0] != 'Y')
            error_insert("   0","SY1700");
      if (d_ar_acc_status.arr[0] == 'S')
            error_insert("   0","SY1640");

      if (nd_proc_flag.arr[0] == 'P') 
      {
          if (d_rc_hdr_print_flag.arr[0] != 'Y' && sy_doc_print_flag.arr[0] == 'Y')
               error_insert("   0","SY2370");
      }
   } 

   EXEC SQL OPEN SY_DOC_TYPE_MAST_CUR;

   if (OERROR)
       err_mesg("OPEN failed on cursor SY_DOC_TYPE_MAST_CUR",0,""); 

   mast_status.arr[0] = '\0';
   mast_status.len    = 0;

   EXEC SQL FETCH SY_DOC_TYPE_MAST_CUR
             INTO :mast_status;
 
   if (OERROR)
       err_mesg("FETCH failed on cursor SY_DOC_TYPE_MAST_CUR",0,""); 

   mast_status.arr[mast_status.len] = '\0';
   
   if (NOT_FOUND)
        error_insert("   0","SY1610");
   else if (mast_status.arr[0] == 'S')
        error_insert("   0","SY2190");
   
   EXEC SQL OPEN AR_TRN_DOC_TYPE_CUR;

   if (OERROR)
        err_mesg("OPEN failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   EXEC SQL FETCH AR_TRN_DOC_TYPE_CUR
             INTO :dummy;

   if (OERROR)
        err_mesg("FETCH failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   if (NOT_FOUND)
        error_insert("   0","AR1890");

   /****   AR_CUSTOMER Validation   *****/
  
   EXEC SQL OPEN AR_CUSTOMER_CUR;

   if (OERROR)
        err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

   d_customer_status.arr[0]       = '\0';
   d_customer_patient_flag.arr[0] = '\0';
   d_last_rec_doc_date.arr[0]     = '\0';

   d_customer_status.len       = 0;
   d_customer_patient_flag.len = 0;
   d_last_rec_doc_date.len     = 0;

   EXEC SQL FETCH AR_CUSTOMER_CUR
             INTO :d_customer_status,
                  :d_customer_patient_flag,
                  :d_last_rec_doc_date;

   d_customer_status.arr[d_customer_status.len]             = '\0';
   d_customer_patient_flag.arr[d_customer_patient_flag.len] = '\0';
   d_last_rec_doc_date.arr[d_last_rec_doc_date.len]         = '\0';

   if (OERROR)
        err_mesg("FETCH failed on cursor AR_CUSTOMER_CUR",0,"");

   if (NOT_FOUND)
        error_insert("   0","AR1210");
   else
     if (d_customer_status.arr[0] == 'S')
        error_insert("   0","AR1220");

#ifdef DEBUG
   disp_message(INFO_MESG,"Before validate posting\n");
#endif

   validate_posting("   0",0);

#ifdef DEBUG
   disp_message(INFO_MESG,"After validate posting\n");
#endif

      if (atoi(d_rc_hdr_post_month.arr) > atoi(d_sy_num_acc_per.arr))
             error_insert("   0","GL2290");

      if (atoi(d_rc_hdr_post_year.arr) < atoi(curr_acc_year.arr))
             error_insert("   0","GL1595");

      if ( (atoi(d_rc_hdr_post_year.arr) == atoi(curr_acc_year.arr) && 
              atoi(d_rc_hdr_post_month.arr) < atoi(curr_acc_month.arr)) &&
               prior_post_allow.arr[0] != 'Y' )
                  error_insert("   0","GL1310");

      if (atof(d_rc_hdr_amt_local.arr) < 0.00)
                error_insert("   0","AR1970");
  
      if (d_rc_hdr_doc_date.len == 0)
            error_insert_null("   0","SY1470","Field = DOC DATE");
      if (d_rc_hdr_cust_code.len == 0)
            error_insert_null("   0","SY1470","Field = CUST CODE");
      if (d_rc_hdr_amt_local.len == 0)
            error_insert_null("   0","SY1470","Field = AMOUNT");

     if (d_rc_hdr_post_month.len == 0)
            error_insert_null("   0","SY1470","Field = POST MONTH");
     if (d_rc_hdr_post_year.len == 0)
            error_insert_null("   0","SY1470","Field = POST YEAR");

#ifdef DEBUG
   disp_message(INFO_MESG,"After Val inv header...\n");
#endif
}
            
validate_posting(loc_line_num,ind)
char loc_line_num[];
int ind;
{

#ifdef DEBUG
  disp_message(INFO_MESG,"Inside valiate posting acc...\n");
#endif

  if (ind == 0) 
  {
      strcpy(d_module_valid_id.arr , "AR");

      if(validate_posting_acct( d_rc_hdr_main_acc1_code.arr,
                                d_rc_hdr_main_acc2_code.arr,
                                d_rc_hdr_dept_code.arr,
                                d_rc_hdr_product_group_code.arr,
                                d_rc_hdr_product_line_code.arr,
                                d_rc_hdr_sub_group_code.arr,
                                d_rc_hdr_sub_line_code.arr,
                                'Y',   /* For chking Bank Reconcile */
								d_module_valid_id.arr,
                                atol(d_rc_hdr_post_year.arr),
								atol(d_rc_hdr_post_month.arr),
						        &g_err_typ,
                                g_err_id,
                                g_err_msg
                             ) ==  -1)
      {
             if(g_err_typ == 0)
                   err_mesg(g_err_msg,0,"");
             else 
                error_insert(loc_line_num,g_err_id);
       }
  }
  else
  {
      strcpy(d_module_valid_id.arr , "AR");
      if(validate_posting_acct( d_line_main_acc1_code.arr,
                                d_line_main_acc2_code.arr,
                                d_line_dept_code.arr,
                                d_line_product_group_code.arr,
                                d_line_product_line_code.arr,
                                d_line_sub_group_code.arr,
                                d_line_sub_line_code.arr,
                                'Y',   /* For chking Bank Reconcile */
								d_module_valid_id.arr,
                                atol(d_rc_hdr_post_year.arr),
								atol(d_rc_hdr_post_month.arr),
                                &g_err_typ,
                                g_err_id,
                                g_err_msg
                             ) ==  -1)
      {
             if(g_err_typ == 0)
                   err_mesg(g_err_msg,0,"");
             else 
                error_insert(loc_line_num,g_err_id);
       }
   }
}

validate_rec_line()
{

  double l_line_amt_local,l_line_amt_local_abs;
  
#ifdef DEBUG
   sprintf(string_var,"DOC_TYPE_CODE is <%s> - <%d>\n",d_rc_hdr_doc_type_code.arr,
                d_rc_hdr_doc_type_code.len);
                disp_message(INFO_MESG,string_var);
   sprintf(string_var,"DOC_NUM       is <%s> - <%d>\n",d_rc_hdr_doc_num.arr,
                d_rc_hdr_doc_num.len);             
                disp_message(INFO_MESG,string_var);
#endif

   EXEC SQL OPEN CUR_REC_LINE;

   if (RESOURCE_BUSY)
   {
        error_insert("   0","AR2070");
        update_err_flg();
        EXEC SQL COMMIT WORK;
        return (0);
   }
   else if (OERROR)
         err_mesg("OPEN failed on cursor AR_REC_LINE",0,"");

   while (fetch_line())
   {
      nd_dtl_tot_amt += atof(d_line_amt_local.arr);

      if (d_line_line_type_code.arr[0] == 'P')
      {
            EXEC SQL OPEN AR_PENDING_CUR;
 
            if (OERROR)
               err_mesg("OPEN failed on cursor AR_PENDING_CUR",0,"");
               
            ar_pend_pending_amt = 0;

            EXEC SQL FETCH AR_PENDING_CUR
                      INTO :ar_pend_pending_amt;
 
            if (OERROR)
               err_mesg("FETCH failed on cursor AR_PENDING_CUR",0,"");

            l_line_amt_local = atof(d_line_amt_local.arr);

            if (ar_pend_pending_amt < 0)
			    ar_pend_pending_amt_abs = ar_pend_pending_amt * -1 ;
            else 
                ar_pend_pending_amt_abs = ar_pend_pending_amt;
               
			if (l_line_amt_local <0)
			    l_line_amt_local_abs = l_line_amt_local_abs * -1 ;
            else
                l_line_amt_local_abs = l_line_amt_local;

			if (NOT_FOUND)
                error_insert(d_line_line_num.arr,"AR1810");
	        else if (ar_pend_pending_amt < 0 && atof(d_line_amt_local.arr) > 0)
                      error_insert(d_line_line_num.arr,"AR2010");
            else if (l_line_amt_local_abs > ar_pend_pending_amt_abs)
                      error_insert(d_line_line_num.arr,"AR2010");
              
            if (d_line_amt_local.len == 0)
               error_insert_null(d_line_line_num.arr,"SY1470","Field = AMOUNT");

 
/*
            else if ( (atof(d_line_amt_local.arr) < 0) ||
                       (!doubcmp(atof(d_line_amt_local.arr),0)) )
                      error_insert(d_line_line_num.arr,"AR1970");
*/

            validate_posting(d_line_line_num.arr,1);
       }
       else if (d_line_line_type_code.arr[0] == 'A')
       {
            if (d_line_amt_local.len == 0)
               error_insert_null(d_line_line_num.arr,"SY1470","Field = AMOUNT");
            else if ( (atof(d_line_amt_local.arr) < 0) ||
                       (!doubcmp(atof(d_line_amt_local.arr),0)) )
                      error_insert(d_line_line_num.arr,"AR1970");

            validate_posting(d_line_line_num.arr,1);
        }
        else if (d_line_line_type_code.arr[0] == 'D')
        {
            if (d_line_amt_local.len == 0)
               error_insert_null(d_line_line_num.arr,"SY1470","Field = AMOUNT");

            validate_posting(d_line_line_num.arr,1);
        }
		else 
             error_insert(d_line_line_num.arr,"AR1990");


	    if (strcmp(d_consolidated_yn.arr , "Y") == 0) 
		{

            EXEC SQL OPEN AR_PATIENT_DTLS_CUR;
				ar_pat_tot_amt = 0;
				ar_pat_abs_tot_amount = 0;

			 while(fetch_patient_dtls())
			 {
		            pending_amt = 0;
								
			        EXEC SQL SELECT PEND_AMOUNT
					into  :pending_amt
					from   AR_PATIENT_DTLS
					WHERE  DOC_TYPE_CODE = :ar_pat_inv_doc_type_code
					AND    DOC_NUM       = :ar_pat_inv_doc_num
					AND    BILL_DOC_TYPE_CODE = :ar_pat_bill_doc_type_code
					AND    BILL_NUM = :ar_pat_bill_num;
						
				if (OERROR)
					err_mesg("SELECT  failed on   AR_PATIENT_DTLS",0,"");

				if (NOT_FOUND)
					error_insert_null("   0","SY1470","Field = AR PAT DTLS");


				if (( pending_amt < 0) && (ar_pat_amount < 0))
					error_insert("   0","AR2393");
				else
				  {
					 if (( pending_amt > 0) && (ar_pat_amount > 0))
						error_insert("   0","AR2393");
					 else
					   {
						  if (( pending_amt < 0) && (ar_pat_amount + pending_amt > 0))
							 error_insert("   0","AR2393");
						  else
							{
								if ((pending_amt >0 ) &&  (ar_pat_amount + pending_amt < 0))
									error_insert("   0","AR2393");
							}
						}
				   }
		 
			}

		 }  

   }
/*
    l_line_amt_pending = 0; 

	EXEC SQL SELECT SUM(NVL(AMT_LOCAL,0))
               INTO :l_line_amt_pending
               FROM AR_REC_LINE
              WHERE DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
                AND DOC_NUM       = :d_rc_hdr_doc_num
				AND LINE_TYPE_CODE ='P';

			if (OERROR)
				err_mesg("SELECT  failed on AR_REC_LINE2",0,"");
			 
			 if (doubcmp(ar_pat_tot_amt,l_line_amt_pending) != 0) 
                    error_insert_null("   0","AR2180","Mismatch with Line Amt and Bill Amt");
*/

   return (1);
} 

fetch_line()
{
      d_line_main_acc1_code.arr[0]       = '\0';
      d_line_main_acc2_code.arr[0]       = '\0';
      d_line_dept_code.arr[0]            = '\0';
      d_line_product_group_code.arr[0]   = '\0';
      d_line_product_line_code.arr[0]    = '\0';
      d_line_sub_group_code.arr[0] = '\0';
      d_line_sub_line_code.arr[0]  = '\0';
      d_line_amt_local.arr[0]            = '\0';
      d_line_line_num.arr[0]             = '\0';

      d_line_org_doc_type_code.arr[0]    = '\0';
      d_line_org_doc_num.arr[0]          = '\0';
      d_line_line_type_code.arr[0]       = '\0';
	  d_consolidated_yn.arr[0] = '\0';

      d_line_main_acc1_code.len          = 0;
      d_line_main_acc2_code.len          = 0;
      d_line_dept_code.len               = 0;
      d_line_product_group_code.len      = 0;
      d_line_product_line_code.len       = 0;
      d_line_sub_group_code.len    = 0;
      d_line_sub_line_code.len     = 0;
      d_line_amt_local.len               = 0;
      d_line_line_num.len                = 0;

      d_line_org_doc_type_code.len       = 0;
      d_line_org_doc_num.len             = 0;
      d_line_line_type_code.len          = 0;
	  d_consolidated_yn.len = 0;


#ifdef DEBUG
      disp_message(INFO_MESG,"Before fetching rec from ar_rec_line\n");
#endif

      EXEC SQL FETCH CUR_REC_LINE
                INTO :d_line_amt_local,
                     :d_line_line_num,
                     :d_line_main_acc1_code,
                     :d_line_main_acc2_code,
                     :d_line_dept_code,
                     :d_line_product_group_code,
                     :d_line_product_line_code,
                     :d_line_sub_group_code,
                     :d_line_sub_line_code,
                     :d_line_org_doc_type_code,
                     :d_line_org_doc_num,
                     :d_line_line_type_code,
					 :d_consolidated_yn;

      if (OERROR)
         err_mesg("FETCH failed on cursor CUR_REC_LINE",0,"");

d_line_line_num.arr[d_line_line_num.len] = '\0';
d_line_main_acc1_code.arr[d_line_main_acc1_code.len]             = '\0';
d_line_main_acc2_code.arr[d_line_main_acc2_code.len]             = '\0';
d_line_dept_code.arr[d_line_dept_code.len]                       = '\0';
d_line_product_group_code.arr[d_line_product_group_code.len]     = '\0';
d_line_product_line_code.arr[d_line_product_line_code.len]       = '\0';
d_line_sub_group_code.arr[d_line_sub_group_code.len] = '\0';
d_line_sub_line_code.arr[d_line_sub_line_code.len]   = '\0';
d_line_amt_local.arr[d_line_amt_local.len]                       = '\0';

d_line_org_doc_type_code.arr[d_line_org_doc_type_code.len]       = '\0';
d_line_org_doc_num.arr[d_line_org_doc_num.len]                   = '\0';
d_line_line_type_code.arr[d_line_line_type_code.len]             = '\0';
d_consolidated_yn.arr[d_consolidated_yn.len] = '\0';

#ifdef DEBUG
      sprintf(string_var,"After fetching rec count is <%d> \n",sqlca.sqlerrd[2]);
      disp_message(INFO_MESG,string_var);
#endif

  if (LAST_ROW)
      return(0);
  else
      return(1);

}

validate_rec_amt()
{ 
    /*sprintf(string_var,"Inside validate_rec_amt <%f> <%f> \n",nd_dtl_tot_amt,atof(d_rc_hdr_amt_local.arr));*/
	
	sprintf(string_var," ");
    disp_message(INFO_MESG,string_var);     
    if (doubcmp(nd_dtl_tot_amt,atof(d_rc_hdr_amt_local.arr)) != 0)
    {

          error_insert("   0","AR1200");
    }
}     

gl_doc_insert()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside gl_doc_insert...\n");
#endif      
  

   EXEC SQL INSERT INTO GL_TXN_DOC_HDR
          (
           ACC_ENTITY_CODE,
           DOC_TYPE_CODE,
           BATCH_NUM,
           DOC_NUM,
           DOC_DATE,
           DOC_REF,
           NARRATION,
           POST_MONTH,
           POST_YEAR,
           CTRL_AMT,
           DOC_NATURE,
           UNIT_TYPE_CODE,
           CURRENCY_CODE,
           EXCHG_RATE,
           ERROR_FLAG,
           ADDED_BY_ID,
           MODIFIED_BY_ID,
           ADDED_DATE,
           MODIFIED_DATE,
           MAX_LINE_NUM,
           MODULE_ID,
           TXN_TYPE_DESC,
           STD_JV_REF,
           PRINT_FLAG
		   
           )
      VALUES
         (
           :nd_acc_entity_code,
           :d_rc_hdr_doc_type_code,
           0,
           :d_rc_hdr_doc_num,
           to_date(:d_rc_hdr_doc_date,'DD/MM/YYYY'),
           SUBSTR(:d_rc_hdr_doc_ref,1,10),
           :d_rc_hdr_narration,
           :d_rc_hdr_post_month,
           :d_rc_hdr_post_year,
           0,
           NULL,
           NULL,
           NULL,
           NULL, 
           NULL,
           USER,
           USER,
           SYSDATE,
           SYSDATE,
           :d_rc_hdr_last_line_num,
           'AR',
           NULL,
           NULL,
           NULL
		   
         );

    if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_HDR",0,"");

 
            
  EXEC SQL INSERT INTO GL_TXN_DOC_LINE
         (
           ACC_ENTITY_CODE,
           BATCH_NUM,
           DOC_TYPE_CODE,
           DOC_NUM,
           MAIN_ACC1_CODE,
           MAIN_ACC2_CODE,
           SUBLEDGER_GROUP_CODE,
           SUBLEDGER_LINE_CODE,
           DEPT_CODE,
           PRODUCT_GROUP_CODE,
           PRODUCT_LINE_CODE,
           FOREIGN_AMT,
           LOCAL_AMT,
           NARRATION,
           LINE_NUM,
           INTER_ACC_ENTITY,
		   CUST_SUPP_CODE
         )
      VALUES
         (
           :nd_acc_entity_code,
           0,
           :d_rc_hdr_doc_type_code,
           :d_rc_hdr_doc_num,
           :d_rc_hdr_main_acc1_code,
           :d_rc_hdr_main_acc2_code,
           :d_rc_hdr_sub_group_code,
           :d_rc_hdr_sub_line_code,
           :d_rc_hdr_dept_code,
           :d_rc_hdr_product_group_code,
           :d_rc_hdr_product_line_code,
           NULL,
           :d_rc_hdr_amt_local,
           :d_rc_hdr_narration,
           0,
           NULL,
		   :d_rc_hdr_cust_code 
         );

     if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_LINE",0,"");    

  EXEC SQL INSERT INTO GL_TXN_DOC_LINE
         (
           ACC_ENTITY_CODE,
           BATCH_NUM,
           DOC_TYPE_CODE,
           DOC_NUM,
           MAIN_ACC1_CODE,
           MAIN_ACC2_CODE,
           SUBLEDGER_GROUP_CODE,
           SUBLEDGER_LINE_CODE,
           DEPT_CODE,
           PRODUCT_GROUP_CODE,
           PRODUCT_LINE_CODE,
           FOREIGN_AMT,
           LOCAL_AMT,
           NARRATION,
           LINE_NUM,
           INTER_ACC_ENTITY,
		   CUST_SUPP_CODE
         )
         SELECT
           ACC_ENTITY_CODE,
           0,
           DOC_TYPE_CODE,
           DOC_NUM,
           MAIN_ACC1_CODE,
           MAIN_ACC2_CODE,
           SUBLEDGER_GROUP_CODE,
           SUBLEDGER_LINE_CODE,
           DEPT_CODE,
           PRODUCT_GROUP_CODE,
           PRODUCT_LINE_CODE,
           NULL,
           AMT_LOCAL * -1,
           NARRATION,
           LINE_NUM,
           NULL,
		   :d_rc_hdr_cust_code 
     FROM  AR_REC_LINE
    WHERE  DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
      AND  DOC_NUM       = :d_rc_hdr_doc_num;

     if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_LINE - for line",0,"");    

#ifdef DEBUG
   disp_message(INFO_MESG,"After gl_doc_insert...\n");
#endif 
}

gl_posting()
{

 char r_err_msg[100];

#ifdef DEBUG
   disp_message(INFO_MESG,"Inside gl_posting...\n");
#endif


 if (post_doc((long)0,d_rc_hdr_doc_type_code.arr,atol(d_rc_hdr_doc_num.arr),
            r_err_msg) == -1)
        err_mesg(r_err_msg,0,""); 

#ifdef DEBUG
   disp_message(INFO_MESG,"After gl_posting...\n");
#endif
   return (0);
}

delete_gl_recs()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"inside delete_gl_recs...\n");
#endif

 EXEC SQL DELETE FROM GL_TXN_DOC_HDR 
                WHERE DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
                  AND DOC_NUM       = :d_rc_hdr_doc_num;

  if (OERROR)
         err_mesg("DELETE failed on table GL_TXN_DOC_HDR",0,"");

 EXEC SQL DELETE FROM GL_TXN_DOC_LINE
                WHERE DOC_TYPE_CODE = :d_rc_hdr_doc_type_code
                  AND DOC_NUM       = :d_rc_hdr_doc_num;

  if (OERROR)
         err_mesg("DELETE failed on table GL_TXN_DOC_LINE",0,"");

#ifdef DEBUG
   disp_message(INFO_MESG,"After delete_gl_recs...\n");
#endif
}

error_insert(line_no,msg_id)
char line_no[],msg_id[];
{
   EXEC SQL BEGIN DECLARE SECTION;
     VARCHAR ar_line_no[5],
             ar_err_code[7],
             l_ar_doc_error_text[71];
   EXEC SQL END DECLARE SECTION;

   char l_ch_payable_amt[25],
        l_ch_tot_amt[25];

#ifdef DEBUG
    sprintf(string_var,"Inside Error_ins line no is <%s> msg is <%s>\n",line_no,msg_id);
    disp_message(INFO_MESG,string_var);
#endif
   fflush(stdout);

   if (strcmp(line_no,"   0"))
     sprintf(ar_line_no.arr,"%4d",atoi(line_no));
   else
     strcpy(ar_line_no.arr,line_no);

   ar_line_no.len = strlen(ar_line_no.arr);

   strcpy(ar_err_code.arr,msg_id);
   ar_err_code.len = strlen(ar_err_code.arr);

   l_ar_doc_error_text.len = 0;
   l_ar_doc_error_text.arr[0] = '\0';

   if (strcmp(ar_err_code.arr,"AR1200") == 0)
   {
       if (nd_no_of_decimal == 3)
	   {
		   sprintf(l_ch_payable_amt,"%19.3f",atof(d_rc_hdr_amt_local.arr));
		   sprintf(l_ch_tot_amt,"%19.3f",nd_dtl_tot_amt);
       }
	   else
	   {
		   sprintf(l_ch_payable_amt,"%19.2f",atof(d_rc_hdr_amt_local.arr));
		   sprintf(l_ch_tot_amt,"%19.2f",nd_dtl_tot_amt);
       }
 
   	   format_amt(l_ch_payable_amt,nd_no_of_decimal);
	   format_amt(l_ch_tot_amt,nd_no_of_decimal);


       sprintf(l_ar_doc_error_text.arr,"Doc Amt = %s   Sum of Line Amt = %s",
                   l_ch_payable_amt,l_ch_tot_amt);
       l_ar_doc_error_text.len = strlen(l_ar_doc_error_text.arr);

 
   } 
  
/********************************************************************/

if (strcmp(ar_err_code.arr,"AR2393") == 0)
{   

      l_ar_doc_error_text.len = 0;
      l_ar_doc_error_text.arr[0] = '\0';

     #ifdef DEBUG
       disp_message(INFO_MESG,"Error code is AR2393\n");
       fflush(stdout);
     #endif
 

       EXEC SQL SELECT 'Doc Amt = '|| 
                ltrim(rtrim(TO_CHAR(:ar_pat_abs_amount,'999,999,999,990.99')))
                || '   Pending Amt = '||
                ltrim(rtrim(TO_CHAR(:pending_amt,'999,999,999,990.99')))
        INTO :l_ar_doc_error_text
        FROM DUAL;

     l_ar_doc_error_text.arr[l_ar_doc_error_text.len] = '\0';

     if (OERROR)
          err_mesg("SELECT failed on table DUAL",0,"",0,"");
 
}
  
/********************************************************************/
   EXEC SQL INSERT INTO AR_DOC_ERROR
                   (PGM_ID,
                    DOC_TYPE_CODE,    DOC_NUM,
                    LINE_NUM,         ERROR_CODE,
                    ERROR_TEXT)
            VALUES (:d_curr_pgm_name,:d_rc_hdr_doc_type_code,   :d_rc_hdr_doc_num,
                    :ar_line_no,      :ar_err_code,
                    :l_ar_doc_error_text);

   if (OERROR)
   {
     sprintf(string_var,"doc type is <%s> - <%d>\n",d_rc_hdr_doc_type_code.arr,
              d_rc_hdr_doc_type_code.len);
              disp_message(ORA_MESG,string_var);
     sprintf(string_var,"doc num is <%s> - <%d>\n",d_rc_hdr_doc_num.arr,
              d_rc_hdr_doc_num.len);
              disp_message(ORA_MESG,string_var);              

     sprintf(string_var,"line no is <%s> - <%d>\n",d_line_line_num.arr,d_line_line_num.len);
     disp_message(ORA_MESG,string_var);
     sprintf(string_var,"err is <%s> - <%d>\n",ar_err_code.arr,ar_err_code.len);
     disp_message(ORA_MESG,string_var);
     err_mesg("INSERT failed on table AR_DOC_ERROR",0,"");
   }

   strcpy(nd_error_flag.arr,"Y");
   nd_error_flag.len = 1;
}

error_insert_null(line_no,msg_id,msg_txt)
char line_no[],msg_id[],msg_txt[];
{
   EXEC SQL BEGIN DECLARE SECTION;
     VARCHAR ar_line_no[5],
             ar_err_code[7],
             l_ar_doc_error_text[71];
   EXEC SQL END DECLARE SECTION;

   if (strcmp(line_no,"   0"))
     sprintf(ar_line_no.arr,"%4d",atoi(line_no));
   else
     strcpy(ar_line_no.arr,line_no);

   ar_line_no.len = strlen(ar_line_no.arr);

   strcpy(ar_err_code.arr,msg_id);
   ar_err_code.len = strlen(ar_err_code.arr);

   l_ar_doc_error_text.len = 0;
   l_ar_doc_error_text.arr[0] = '\0';

   strcpy(l_ar_doc_error_text.arr,msg_txt);
   l_ar_doc_error_text.len = strlen(l_ar_doc_error_text.arr);


   EXEC SQL INSERT INTO AR_DOC_ERROR
                   (PGM_ID,
                    DOC_TYPE_CODE,    DOC_NUM,
                    LINE_NUM,         ERROR_CODE,
                    ERROR_TEXT
					,OPERATING_FACILITY_ID /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
					)
            VALUES (:d_curr_pgm_name,:d_rc_hdr_doc_type_code,   :d_rc_hdr_doc_num,
                    :ar_line_no,      :ar_err_code,
                    :l_ar_doc_error_text
					,:nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
					);

   if (OERROR)
   {
     sprintf(string_var,"doc type is <%s> - <%d>\n",d_rc_hdr_doc_type_code.arr,
                d_rc_hdr_doc_type_code.len); 
                disp_message(ORA_MESG,string_var);
     sprintf(string_var,"doc num is <%s> - <%d>\n",d_rc_hdr_doc_num.arr,
                     d_rc_hdr_doc_num.len);       
                     disp_message(ORA_MESG,string_var);
     sprintf(string_var,"line no is <%s> - <%d>\n",d_line_line_num.arr,d_line_line_num.len);
     disp_message(ORA_MESG,string_var);
     sprintf(string_var,"err is <%s> - <%d>\n",ar_err_code.arr,ar_err_code.len);
     disp_message(ORA_MESG,string_var);
     err_mesg("INSERT failed on table AR_DOC_ERROR",0,"");
   }

   strcpy(nd_error_flag.arr,"Y");
   nd_error_flag.len = 1;
}
update_err_flg()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Update err flg...");
#endif

   EXEC SQL UPDATE AR_REC_HDR 
               SET ERROR_FLAG = :nd_error_flag
             WHERE ROWID      = :d_rc_hdr_rowid
			 AND OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
			 ;

   if (OERROR)
         err_mesg("UPDATE failed on table AR_REC_HDR",0,"");

}

delete_records()
{
    
    while (1)
    {
       EXEC SQL DELETE FROM AR_DOC_ERROR 
                      WHERE PGM_ID = :d_curr_pgm_name
                        AND ROWNUM < 500
						AND OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
						;

       if (OERROR)
         err_mesg("DELETE failed on table AR_DOC_ERROR",0,"");

       EXEC SQL COMMIT WORK;
       if (OERROR)
            err_mesg("COMMIT failed",0,""); 

       if (NOT_FOUND)
             break;
    }
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

fetch_acc_entity_flag()
{

   
   
   
   /*EXEC SQL SELECT BL_INSTAL_FLAG,  MP_INSTAL_FLAG, NUM_OF_ACC_PERIODS
              INTO :d_sy_acc_bl_instal_flag, :d_sy_acc_mp_instal_flag,
                   :d_sy_num_acc_per
              FROM SY_ACC_ENTITY;*/

  EXEC SQL SELECT  NUM_OF_ACC_PERIODS , ACC_ENTITY_CODE ,
                   NO_OF_DECIMAL
              INTO   :d_sy_num_acc_per, :nd_acc_entity_code ,
			         :nd_no_of_decimal
              FROM SY_ACC_ENTITY
		   where   ACC_ENTITY_ID = :nd_facility_id;

                  
  

   if (OERROR)
        err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");


 
   EXEC SQL EXECUTE 
            BEGIN
	         GET_INSTALLED_MODULES(:p_operational_modules);
            END;
    END-EXEC; 

	EXEC SQL SELECT INSTR(:p_operational_modules , 'BL|')
	         into   :d_sy_acc_bl_instal_flag 
			from dual ;

	EXEC SQL SELECT INSTR(:p_operational_modules , 'MP|')
	         into   :d_sy_acc_mp_instal_flag
			from dual ;

 
   
   d_sy_num_acc_per.arr[d_sy_num_acc_per.len]               = '\0';

   d_num_of_acc_periods = atoi(d_sy_num_acc_per.arr);
}

fetch_ar_parameter()
{
     ar_interface_code.arr[0] = '\0';
     ar_interface_code.len    = 0;

     EXEC SQL SELECT AR_INTERFACE_CODE 
                INTO :ar_interface_code
                FROM AR_PARAMETER
				WHERE OPERATING_FACILITY_ID = :nd_facility_id /* ADDED BY SHIKHA FOR GDOH-CRF-0107 ON 03-01-2017 */
				; 

     if (OERROR)
         err_mesg("SELECT failed on table AR_PARAMETER",0,"");

     ar_interface_code.arr[ar_interface_code.len]='\0';


     EXEC SQL SELECT CURRENT_ACC_YEAR,CURRENT_ACC_MONTH,
                     PRIOR_POSTING_ALLOW_FLAG,
                     NVL(SUMMARY_PROCESS_FLAG,'X') 
                INTO :curr_acc_year,    :curr_acc_month,
                     :prior_post_allow, :gl_summ_pro_flag
                FROM GL_PARAMETER;

     if (OERROR)
         err_mesg("SELECT failed on table GL_PARAMETER",0,"");

     curr_acc_year.arr[curr_acc_year.len]       = '\0';
     curr_acc_month.arr[curr_acc_month.len]     = '\0';
     prior_post_allow.arr[prior_post_allow.len] = '\0';
     gl_summ_pro_flag.arr[gl_summ_pro_flag.len] = '\0';

d_curr_year  = atoi(curr_acc_year.arr);
d_curr_month = atoi(curr_acc_month.arr);
d_summ_flag  = gl_summ_pro_flag.arr[0];
}

run_report()
{
  char l_run_string[300],l_messg_str[132];
  int  l_ret_run_rep;

#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Run report\n");
#endif

  disp_message(INFO_MESG,"Generating report\n");

  sprintf(l_run_string,"r25run %s %s no \
  %s session_id=%s pgm_date=%s %s desname=%s.lis","print_job=no",
  "arrrclst",uid_pwd.arr,
  (nd_view_print_flg.arr[0]=='V')?"batch=no":"batch=yes",
  nd_session_id.arr,g_pgm_date,
  (nd_view_print_flg.arr[0]=='V')?"destype=Screen":"destype=File",
  (nd_proc_flag.arr[0]=='P')?"arbrcpst":"arrrclst");
 
  l_ret_run_rep = WinExec(l_run_string,SW_NORMAL);
  if (l_ret_run_rep<32)
  {disp_message(ERR_MESG,"Error in calling Report Writer Program");
   proc_exit();
  } 

  if (l_ret_run_rep)
  {
     sprintf("%s\n",l_run_string);
     sprintf(l_messg_str,"RUNREP - arrrclst session = %s failed \
return value %d",nd_session_id.arr,l_ret_run_rep);
     err_mesg(l_messg_str,0,"");
  }
#ifdef DEBUG
   disp_message(INFO_MESG,"After run rep...\n");
#endif
}

ltrim(l_str)
char *l_str;
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}

/*put_comma(str)
char *str;
{
  int i,l,m,a,b,c;
  float j,k;
  char arr[120],o_arr[120],l_str1[10];
  strcpy(arr,str);
  strncpy(l_str1,arr + (strlen(arr) - 2),2);
  l_str1[2] = '\0';
  arr[strlen(str)-3] = '\0';
  i = strlen(arr);
  j = i;
  k = j/3;
  l = k;
  m = i - (l*3);
  if (i > 3)
  {
      for (a=0;a<m;a++)
         o_arr[a] = arr[a];
   if (m)
   {
     o_arr[m] = ','; b=m+1;
   }
   else b = m;
  for (c=1,a=m;arr[a]!= '\0';a++,b++)
  {
     o_arr[b] = arr[a]; 
     c++;
     if (c > 3 && arr[a+1] != '\0')
     {
       o_arr[++b] = ','; c = 1;
     }
   }
   o_arr[b] = '\0';
  }
  else
      strcpy(o_arr,arr);
   sprintf(str,"%s.%s",o_arr,l_str1);
} */

doubcmp(_doub1,_doub2)
double _doub1,_doub2;
{
  char _doub_str1[25],_doub_str2[25];
  if (nd_no_of_decimal == 3)
  {
	  sprintf(_doub_str1,"%15.3f",_doub1);
	  sprintf(_doub_str2,"%15.3f",_doub2);
	  if (strcmp(_doub_str1,"-0.000") == 0)
		 strcpy(_doub_str1,"0.000");
	  if (strcmp(_doub_str2,"-0.000") == 0)
		 strcpy(_doub_str2,"0.000");
  }
  else
  {
	  sprintf(_doub_str1,"%15.2f",_doub1);
	  sprintf(_doub_str2,"%15.2f",_doub2);
	  if (strcmp(_doub_str1,"-0.00") == 0)
		 strcpy(_doub_str1,"0.00");
	  if (strcmp(_doub_str2,"-0.00") == 0)
		 strcpy(_doub_str2,"0.00");
  }
   format_amt(_doub_str1,nd_no_of_decimal);
   format_amt(_doub_str2,nd_no_of_decimal);
  return(strcmp(_doub_str1,_doub_str2));
}

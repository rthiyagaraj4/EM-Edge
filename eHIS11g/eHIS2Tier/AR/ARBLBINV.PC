/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : ARBLBINV.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 07-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                               */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*          1.         RL_REQUEST_HEADER         Read/Update            */
/*          2.         RL_REQUEST_DETAIL         Read                   */
/*          3.         RL_PATIENT_MAST           Read                   */
/*          4.         RL_SECTION_CODE           Read                   */
/*          5.         RL_PARAM                  Read                   */
/*          6.         BL_GL_ACCOUNT             Read                   */
/*          7.         BL_BILL_TYPE              Read                   */
/*          8.         AR_INV_HDR                Insert                 */
/*          9.         AR_INV_LINE               Insert                 */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include "gl.h"

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])



#define VIEW_LOG_FILE    1


EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR d_uid_pwd                                  [51],
  	        hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [40],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
            nd_cust_code                               [9],
            nd_billing_grp                             [5],  -- CRF-0120
            nd_fm_doc_date                             [12],
            nd_to_doc_date                             [12],
            nd_fm_doc_type_code                        [7],
            nd_to_doc_type_code                        [7],
            nd_fm_doc_num                              [9],
            nd_to_doc_num                              [9],
            nd_inv_doc_type_code                       [7],
            nd_inv_date                                [12],
            nd_bill_type                               [3],
            nd_credit_ref                              [16],
            nd_doc_num_gen_flag                        [2],

            d_acc_status                               [2],
            d_acc_valid_flag                           [2],
            l_dummy                                    [10][2],
            d_sy_acc_rowid                             [31],
			p_language_id    [3];

      long  nd_inv_start_doc_num,
            nd_new_doc_num;

    VARCHAR 
	    nd_facility_id                             [3],
		d_rowid                                    [26],
	    d_cust_code                                [9],
	    d_prv_cust_code                            [9],
	    d_blng_grp_id                              [5],  -- CRF-0120
	    d_request_num                              [11],
	    d_prv_request_num                          [11],
	    d_ord_regd_date                            [11],
	    d_prv_ord_regd_date                        [11],
	    d_doc_type_code                            [7],
	    d_prv_doc_type_code                        [7],
	    d_doc_num                                  [9],
	    d_prv_doc_num                              [9],
	    d_patient_id                               [21],
	    d_prv_patient_id                           [21],
	    d_patient_name                             [61],

	    d_test_code                                [7],
	    d_section_code                             [2],
	    d_prv_section_code                         [2],
	    d_section_short_name                       [16],
  
           nd_new_doc_type_code                        [7],

           bl_par_post_month                           [3],
           bl_par_post_year                            [5],

           bl_main_acc1_code_mk_inv                    [7],
           bl_main_acc2_code_mk_inv                    [5],
           bl_dept_code_mk_inv                         [11],
           bl_prod_grp_code_mk_inv                     [4],
           bl_prod_line_code_mk_inv                    [5],
           bl_sublgr_grp_code_mk_inv                   [4],
           bl_sublgr_line_code_mk_inv                  [9],
           nd_acc_entity_code                          [5],  

           recv_int_code                               [7],
           bl_recv_acc_int_code                        [7],
           ar_recv_acc_int_code                        [7],
           bl_bill_type_short_desc                     [16],

           bl_rec_main_acc1_code                       [7],
           bl_rec_main_acc2_code                       [5],
           bl_rec_dept_code                            [11],
           bl_rec_subledger_group_code                 [4],
           bl_rec_subledger_line_code                  [9],
           bl_rec_product_group_code                   [4],
           bl_rec_product_line_code                    [5],

           ar_rec_main_acc1_code                       [7],
           ar_rec_main_acc2_code                       [5],
           ar_rec_dept_code                            [11],
           ar_rec_subledger_group_code                 [4],
           ar_rec_subledger_line_code                  [9],
           ar_rec_product_group_code                   [4],
           ar_rec_product_line_code                    [5],

           bl_cust_pmnt_terms_code                     [3],
           ar_pmnt_cred_days_period                    [4],
           ar_pmnt_settl_days_period                   [4],
           ar_pmnt_settl_percent                       [9],

           bl_h_credit_doc_ref_desc                    [16],

           nd_st_patient_id                            [21],
           nd_st_doc_type_code                         [7],
           nd_st_doc_num                               [9],
           nd_st_doc_date                              [12],
           nd_st_blng_grp_id                           [3],
           bl_h_prev_cust_code                         [9];

    double nd_sum_outst_amt = 0,
           nd_sum_outst_amt_sec = 0,
           nd_ar_inv_line_amt = 0,
           nd_sum_drfee_amt = 0,
           d_order_item_debit_value,
		   nd_markup_amt = 0;

      int  nd_ctr = 0,
  	       ar_markup_perc =0,
	       d_line_num;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include "winproc.h"    


void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0;

    if (argc < 5)    
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"ARBLBINV");

    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ERR_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

	set_meduser_role();

strcpy(p_language_id.arr,l_language_id.arr);
p_language_id.len = l_language_id.len;

    start_prog_msg();

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);          
	
	/*set_meduser_role();*/
    fetch_prog_param();
    fetch_ar_param();
    fetch_acc_entity_flag();
    fetch_acc_int_codes();

    declare_cur();
     
    strcpy(nd_new_doc_type_code.arr,nd_inv_doc_type_code.arr);
    nd_new_doc_type_code.len = strlen(nd_new_doc_type_code.arr);

    nd_new_doc_num           = nd_inv_start_doc_num;

    nd_sum_outst_amt = 0;
    nd_sum_drfee_amt = 0;
    nd_ctr = 0;
    d_line_num = 1;

    while(fetch_hdr()) {

       rec_ctr++;

       if(strcmp(d_prv_cust_code.arr, d_cust_code.arr)) {

          if (nd_doc_num_gen_flag.arr[0] == 'Y')
               gen_doc_num();

          if (rec_ctr > 0) {
             fetch_pat_dtls();
             insert_ar_patient();
           //  fetch_dtl_line();
             insert_ar_line();
             fetch_dtl_hdr();
             insert_ar_hdr();
          }
/*
          EXEC SQL COMMIT WORK;

          if (OERROR)
               err_mesg("COMMIT failed",0,""); 
*/
          nd_sum_outst_amt     = 0;
          nd_sum_outst_amt_sec = 0;
          nd_sum_drfee_amt     = 0;
          nd_ar_inv_line_amt   = 0;
          nd_ctr = 0;
          d_line_num           = 1;
          nd_inv_start_doc_num ++;

	  strcpy(d_prv_cust_code.arr, d_cust_code.arr);
	  strcpy(d_prv_request_num.arr, d_request_num.arr);
	  strcpy(d_prv_section_code.arr, d_section_code.arr);

       }
  
       if(strcmp(d_prv_section_code.arr, d_section_code.arr)||
          strcmp(d_prv_request_num.arr, d_request_num.arr)) {
           fetch_pat_dtls();
           insert_ar_patient();
           nd_sum_outst_amt_sec = 0;
           if(strcmp(d_prv_section_code.arr, d_section_code.arr)) {
	     //  fetch_dtl_line();
	       insert_ar_line();
	       nd_ar_inv_line_amt   = 0;
	   }
       }

       update_hdr();

       nd_sum_outst_amt     += d_order_item_debit_value;
       nd_sum_outst_amt_sec += d_order_item_debit_value;
       nd_ar_inv_line_amt   += d_order_item_debit_value;

       strcpy(d_prv_cust_code.arr,d_cust_code.arr);
       strcpy(d_prv_request_num.arr, d_request_num.arr);
       strcpy(d_prv_section_code.arr, d_section_code.arr);
       strcpy(d_prv_patient_id.arr, d_patient_id.arr);
       strcpy(d_prv_ord_regd_date.arr, d_ord_regd_date.arr);
       strcpy(d_prv_doc_type_code.arr, d_doc_type_code.arr);
       strcpy(d_prv_doc_num.arr, d_doc_num.arr);

       d_prv_cust_code.len     = strlen(d_prv_cust_code.arr);
       d_prv_request_num.len   = strlen(d_prv_request_num.arr);
       d_prv_section_code.len  = strlen(d_prv_section_code.arr);
       d_prv_patient_id.len    = strlen(d_prv_patient_id.arr);
       d_prv_ord_regd_date.len = strlen(d_prv_ord_regd_date.arr);
       d_prv_doc_type_code.len = strlen(d_prv_doc_type_code.arr);
       d_prv_doc_num.len       = strlen(d_prv_doc_num.arr);

       nd_ctr++;

       if (nd_ctr == 1)
       {
          strcpy(nd_st_patient_id.arr,d_patient_id.arr);
          strcpy(nd_st_doc_type_code.arr,d_doc_type_code.arr);
          strcpy(nd_st_doc_num.arr,d_doc_num.arr);
          strcpy(nd_st_doc_date.arr,d_ord_regd_date.arr);
          strcpy(nd_st_blng_grp_id.arr,d_blng_grp_id.arr);

          nd_st_patient_id.len    =  strlen(nd_st_patient_id.arr);
          nd_st_doc_type_code.len =  strlen(nd_st_doc_type_code.arr);
          nd_st_doc_num.len       =  strlen(nd_st_doc_num.arr);
          nd_st_doc_date.len      =  strlen(nd_st_doc_date.arr);
          nd_st_blng_grp_id.len   =  strlen(nd_st_blng_grp_id.arr);
       }

    }

    if (rec_ctr > 0)
    {
       if (nd_doc_num_gen_flag.arr[0] == 'Y')
           gen_doc_num();
       fetch_pat_dtls();
       insert_ar_patient();
     //  fetch_dtl_line();
       insert_ar_line();
       fetch_dtl_hdr();
       insert_ar_hdr();
    } 

    end_prog_msg();

    EXEC SQL COMMIT WORK;

    if (OERROR)
         err_mesg("COMMIT failed",0,""); 


    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed REA",0,"");

}


fetch_prog_param()
{

    nd_fm_doc_date.arr[0]               = '\0';
    nd_to_doc_date.arr[0]               = '\0';
    nd_fm_doc_type_code.arr[0]          = '\0';
    nd_to_doc_type_code.arr[0]          = '\0';
    nd_fm_doc_num.arr[0]                = '\0';
    nd_to_doc_num.arr[0]                = '\0';
    nd_inv_doc_type_code.arr[0]         = '\0';
    nd_inv_date.arr[0]                  = '\0';
    nd_billing_grp.arr[0]               = '\0';
    nd_cust_code.arr[0]                 = '\0';
    nd_bill_type.arr[0]                 = '\0';
    nd_credit_ref.arr[0]                = '\0';
	nd_facility_id.arr[0]               = '\0';

    nd_fm_doc_date.len                  = 0;
    nd_to_doc_date.len                  = 0;
    nd_fm_doc_type_code.len             = 0;
    nd_to_doc_type_code.len             = 0;
    nd_fm_doc_num.len                   = 0;
    nd_to_doc_num.len                   = 0;
    nd_inv_doc_type_code.len            = 0;
    nd_inv_date.len                     = 0;
    nd_billing_grp.len                  = 0;
    nd_cust_code.len                    = 0;
    nd_bill_type.len                    = 0;
    nd_credit_ref.len                   = 0;
    nd_facility_id.len                  = 0;

    nd_inv_start_doc_num                = 0;

   EXEC SQL SELECT operating_facility_id,
				   PARAM1, PARAM2, PARAM3, PARAM4,
                   PARAM5, PARAM6
/*				   
				   , PARAM7, PARAM8, PARAM9,
                   PARAM10, PARAM11, PARAM12, PARAM13
*/
              INTO :nd_facility_id,
                   :nd_fm_doc_date,
                   :nd_to_doc_date,
                   :nd_inv_doc_type_code,
                   :nd_inv_start_doc_num,
                   :nd_inv_date,
                   :nd_bill_type
              FROM SY_PROG_PARAM
                   WHERE 
                   PGM_ID     = 'ARBLBINV'
                   AND SESSION_ID = :nd_session_id
                   AND PGM_DATE   = :nd_pgm_date;


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_fm_doc_date.arr[nd_fm_doc_date.len]             = '\0';
   nd_to_doc_date.arr[nd_to_doc_date.len]             = '\0';
   nd_fm_doc_type_code.arr[nd_fm_doc_type_code.len]   = '\0';
   nd_to_doc_type_code.arr[nd_to_doc_type_code.len]   = '\0';
   nd_fm_doc_num.arr[nd_fm_doc_num.len]               = '\0';
   nd_to_doc_num.arr[nd_to_doc_num.len]               = '\0';
   nd_inv_doc_type_code.arr[nd_inv_doc_type_code.len] = '\0';
   nd_inv_date.arr[nd_inv_date.len]                   = '\0';
   nd_facility_id.arr[nd_facility_id.len]             = '\0';
   nd_billing_grp.arr[nd_billing_grp.len] = '\0';
   nd_cust_code.arr[nd_cust_code.len] = '\0';
   nd_bill_type.arr[nd_bill_type.len] = '\0';
   nd_credit_ref.arr[nd_credit_ref.len] = '\0';

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBLBINV'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

   
   val_doc_type();

}

fetch_ar_param()
{

    bl_par_post_month.arr[0]      = '\0';
    bl_par_post_year.arr[0]       = '\0';

	bl_main_acc1_code_mk_inv.arr[0] = '\0';
	bl_main_acc2_code_mk_inv.arr[0] = '\0';
	bl_dept_code_mk_inv.arr[0] = '\0';
	bl_prod_grp_code_mk_inv.arr[0] = '\0';
	bl_prod_line_code_mk_inv.arr[0] = '\0';
	bl_sublgr_grp_code_mk_inv.arr[0] = '\0';
	bl_sublgr_line_code_mk_inv.arr[0] = '\0';

    bl_par_post_month.len         = 0;
    bl_par_post_year.len          = 0;

	bl_main_acc1_code_mk_inv.len = 0;
	bl_main_acc2_code_mk_inv.len = 0;
	bl_dept_code_mk_inv.len = 0;
	bl_prod_grp_code_mk_inv.len = 0;
	bl_prod_line_code_mk_inv.len = 0;
	bl_sublgr_grp_code_mk_inv.len = 0;
	bl_sublgr_line_code_mk_inv.len = 0;


    EXEC SQL SELECT 
                   CURRENT_ACC_MONTH,  CURRENT_ACC_YEAR,
                   MAIN_ACC1_CODE_MK_BILLS, MAIN_ACC2_CODE_MK_BILLS,  
                   DEPT_CODE_MK_BILLS, PROD_GRP_CODE_MK_BILLS,   
                   PROD_LINE_CODE_MK_BILLS, SUBLGR_GRP_CODE_MK_BILLS, 
                   SUBLGR_LINE_CODE_MK_BILLS	
                   INTO 
                   :bl_par_post_month,       :bl_par_post_year,
                   :bl_main_acc1_code_mk_inv,:bl_main_acc2_code_mk_inv,
                   :bl_dept_code_mk_inv, :bl_prod_grp_code_mk_inv,
                   :bl_prod_line_code_mk_inv, :bl_sublgr_grp_code_mk_inv,
                   :bl_sublgr_line_code_mk_inv
                   FROM AR_PARAMETER;

    if (OERROR)
         err_mesg("SELECT failed on table AR_PARAMETER",0,"");

    if (NOT_FOUND)
        err_mesg("Record not found in  AR PARAMETER",0,"");

    bl_par_post_month.arr[bl_par_post_month.len] = '\0';
    bl_par_post_year.arr[bl_par_post_year.len] = '\0';


    bl_main_acc1_code_mk_inv.arr[bl_main_acc1_code_mk_inv.len] = '\0';
	bl_main_acc2_code_mk_inv.arr[bl_main_acc2_code_mk_inv.len] = '\0';
    bl_dept_code_mk_inv.arr[bl_dept_code_mk_inv.len] = '\0';
    bl_prod_grp_code_mk_inv.arr[bl_prod_grp_code_mk_inv.len] = '\0';
    bl_prod_line_code_mk_inv.arr[bl_prod_line_code_mk_inv.len] = '\0';
    bl_sublgr_grp_code_mk_inv.arr[bl_sublgr_grp_code_mk_inv.len] = '\0';
    bl_sublgr_line_code_mk_inv.arr[bl_sublgr_line_code_mk_inv.len] = '\0';


}


fetch_acc_entity_flag()
{

   nd_acc_entity_code.arr[0] = '\0';

   nd_acc_entity_code.len    = 0;


	   EXEC SQL SELECT  ACC_ENTITY_CODE
              INTO     :nd_acc_entity_code
              FROM      SY_ACC_ENTITY
		   where   ACC_ENTITY_ID = :nd_facility_id;

    if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

    if (NOT_FOUND)
        err_mesg("Record not found in  SY_ACC_ENTITY",0,"");

    nd_acc_entity_code.arr[nd_acc_entity_code.len] = '\0';

}

declare_cur()
{
 
     EXEC SQL DECLARE RL_REQ_HDR_CUR CURSOR FOR
	       SELECT C.ROWID,
		      A.CUST_CODE,
		      A.BLNG_GRP_ID,
		      B.TEST_CODE,
		      C.SECTION_CODE,
		      TRUNC(NVL(B.NET_CHARGE,0),2),
		      C.SPECIMEN_NO,
		      TO_CHAR(C.SPEC_REGD_DATE_TIME,'DD/MM/YYYY'),
		      C.DOC_TYPE_CODE,
		      C.DOC_NUM,
  		      C.PATIENT_ID
		 FROM BL_AM_REFERRAL A,
		      RL_REQUEST_DETAIL B,
		      RL_REQUEST_HEADER C
		WHERE SPEC_REGD_DATE_TIME >= TO_DATE(:nd_fm_doc_date||'0000',
						'dd/mm/yyyyhh24mi') 
		  AND SPEC_REGD_DATE_TIME < TO_DATE(:nd_to_doc_date||'0000',
						'dd/mm/yyyyhh24mi')+1 
		  AND NVL(INVOICED_YN,'N')  = 'N'
		  AND NVL(B.CANCELLED_YN,'N') = 'N'
		  AND A.REFERRAL_CODE  = C.SOURCE_CODE
		  AND A.CHARGE_POSTING_MODE = 'A'
		  AND B.SPECIMEN_NO = C.SPECIMEN_NO
		  AND NVL(B.NET_CHARGE,0) > 0
	      ORDER BY A.CUST_CODE, C.SPECIMEN_NO, C.SECTION_CODE;

     EXEC SQL DECLARE BL_BILL_TYPE_CUR CURSOR FOR
               SELECT BL_RECV_ACC_INT_CODE,
                      AR_RECV_ACC_INT_CODE
                 FROM BL_BILL_TYPE
                WHERE BILL_TYPE_CODE = :nd_bill_type;

     EXEC SQL DECLARE BL_GL_ACCOUNT_CUR CURSOR FOR
               SELECT MAIN_ACC1_CODE,
                      MAIN_ACC2_CODE,
                      DEPT_CODE,
                      SUBLEDGER_GROUP_CODE,
                      SUBLEDGER_LINE_CODE,
                      PRODUCT_GROUP_CODE,
                      PRODUCT_LINE_CODE
                 FROM BL_GL_ACCOUNT
                WHERE ACC_INT_CODE = :recv_int_code;
 
     EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
               SELECT PMNT_TERMS_CODE
                 FROM AR_CUSTOMER
                WHERE CUST_CODE = :d_prv_cust_code;

     EXEC SQL DECLARE AR_PMNT_TERMS_CUR CURSOR FOR
               SELECT CREDIT_DAYS_PERIOD,
                      SETTLEMENT_DAYS_PERIOD,
                      SETTLEMENT_PERC,
					  NVL(MARKUP_PERC,0)
                 FROM AR_PMNT_TERMS
                WHERE PMNT_TERMS_CODE = :bl_cust_pmnt_terms_code;

   EXEC SQL DECLARE SY_ACC_ENTITY_DOC_TYPE_CUR CURSOR FOR
             SELECT NVL(STATUS,'X'),
                    NVL(AR_VALID_FLAG,'X'),
                    NVL(DOC_NUM_GEN_FLAG,'X')
               FROM GL_ACC_ENTITY_DOC_TYPE_VW
              WHERE DOC_TYPE_CODE   = :nd_inv_doc_type_code;

   EXEC SQL DECLARE AR_TRN_DOC_TYPE_CUR CURSOR FOR
             SELECT 'X'
               FROM AR_TRN_DOC_TYPE
              WHERE DOC_TYPE_CODE = :nd_inv_doc_type_code
                AND TRN_TYPE_CODE = '1';

    EXEC SQL OPEN RL_REQ_HDR_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor RL_REQ_HDR_CUR",0,"");
}

val_doc_type()
{

   EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;
 
   if (OERROR)
       err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

   d_acc_status.arr[0]     = '\0';
   d_acc_valid_flag.arr[0] = '\0';
   nd_doc_num_gen_flag.arr[0]          = '\0';

   d_acc_valid_flag.len = 0;
   d_acc_status.len     = 0;
   nd_doc_num_gen_flag.len             = 0;

   EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
             INTO :d_acc_status,
                  :d_acc_valid_flag,
                  :nd_doc_num_gen_flag;
   
   if (OERROR)
        err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 

   d_acc_status.arr[d_acc_status.len]         = '\0';
   d_acc_valid_flag.arr[d_acc_valid_flag.len] = '\0';
   nd_doc_num_gen_flag.arr[nd_doc_num_gen_flag.len]   = '\0';

   if (NOT_FOUND)      /* Doc type not existing in SY_ACC_ENTITY_DOC_TYPE */
         err_mesg("",1,"SY2200");
   else
   {
      if (d_acc_valid_flag.arr[0] != 'Y') /* Doc Not valid for AP    */
            err_mesg("Document Type not valid for AR module",0,"");
      if (d_acc_status.arr[0] == 'S')     /* Doc is suspended        */
            err_mesg("",1,"SY2190");
   } 

   EXEC SQL OPEN AR_TRN_DOC_TYPE_CUR;

   if (OERROR)
         err_mesg("OPEN failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   EXEC SQL FETCH AR_TRN_DOC_TYPE_CUR
             INTO :l_dummy;

   if (OERROR)
         err_mesg("FETCH failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   if (NOT_FOUND)
       err_mesg("Trn type Not valid for this document",0,"");

}

fetch_hdr()
{

    static int first = 1;

    d_rowid.arr[0]           = '\0';
    d_cust_code.arr[0]       = '\0';
    d_blng_grp_id.arr[0]     = '\0';
    d_request_num.arr[0]     = '\0';
    d_ord_regd_date.arr[0]   = '\0';
    d_doc_type_code.arr[0]   = '\0';
    d_doc_num.arr[0]         = '\0';
    d_test_code.arr[0]       = '\0';
    d_section_code.arr[0]    = '\0';
    d_patient_id.arr[0]      = '\0';

    d_rowid.len              = 0;
    d_cust_code.len          = 0;
    d_blng_grp_id.len        = 0;
    d_request_num.len        = 0;
    d_ord_regd_date.len      = 0;
    d_doc_type_code.len      = 0;
    d_doc_num.len            = 0;
    d_test_code.len          = 0;
    d_section_code.len       = 0;
    d_patient_id.len         = 0;

    d_order_item_debit_value    = 0;

    EXEC SQL FETCH RL_REQ_HDR_CUR 
	          INTO  :d_rowid,
					:d_cust_code,
					:d_blng_grp_id,
					:d_test_code,
					:d_section_code,
					:d_order_item_debit_value,
                    :d_request_num,
                    :d_ord_regd_date,
                    :d_doc_type_code,
                    :d_doc_num,
					:d_patient_id;

    if(OERROR)
	err_mesg("FETCH failed on cursor RL_REQ_HDR_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    d_cust_code.arr[d_cust_code.len]            = '\0';
    d_blng_grp_id.arr[d_blng_grp_id.len]        = '\0';
    d_test_code.arr[d_test_code.len]            = '\0';
    d_section_code.arr[d_section_code.len]      = '\0';
    d_request_num.arr[d_request_num.len]        = '\0';
    d_ord_regd_date.arr[d_ord_regd_date.len]    = '\0';
    d_doc_type_code.arr[d_doc_type_code.len]    = '\0';
    d_doc_num.arr[d_doc_num.len]                = '\0';
    d_patient_id.arr[d_patient_id.len]          = '\0';

    if(first) 
	{
	strcpy(d_prv_cust_code.arr, d_cust_code.arr);
	strcpy(d_prv_request_num.arr, d_request_num.arr);
	strcpy(d_prv_section_code.arr, d_section_code.arr);
	strcpy(d_prv_patient_id.arr, d_patient_id.arr);
	strcpy(d_prv_ord_regd_date.arr, d_ord_regd_date.arr);
	strcpy(d_prv_doc_type_code.arr, d_doc_type_code.arr);
	strcpy(d_prv_doc_num.arr, d_doc_num.arr);

        d_prv_cust_code.len     = strlen(d_prv_cust_code.arr);
        d_prv_request_num.len   = strlen(d_prv_request_num.arr);
        d_prv_section_code.len  = strlen(d_prv_section_code.arr);
        d_prv_patient_id.len    = strlen(d_prv_patient_id.arr);
        d_prv_ord_regd_date.len = strlen(d_prv_ord_regd_date.arr);
        d_prv_doc_type_code.len = strlen(d_prv_doc_type_code.arr);
        d_prv_doc_num.len       = strlen(d_prv_doc_num.arr);


	first = 0;
    }

    return 1;
}

gen_doc_num()
{
     d_sy_acc_rowid.arr[0]  = '\0';
     d_sy_acc_rowid.len     = 0;

     nd_inv_start_doc_num = 0;

     EXEC SQL SELECT NVL(NEXT_DOC_NO,0),    ROWID
                INTO :nd_inv_start_doc_num, :d_sy_acc_rowid
                FROM SY_ACC_ENTITY_DOC_TYPE
               WHERE DOC_TYPE_CODE = :nd_inv_doc_type_code
                 FOR UPDATE OF NEXT_DOC_NO;

     if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");

     if (NOT_FOUND)
         err_mesg("Record not found in SY ACC ENTITY DOC TYPE",0,"");

     d_sy_acc_rowid.arr[d_sy_acc_rowid.len] = '\0';

     EXEC SQL UPDATE SY_ACC_ENTITY_DOC_TYPE 
                 SET NEXT_DOC_NO = NVL(NEXT_DOC_NO,0) + 1
               WHERE ROWID = :d_sy_acc_rowid;

      if (OERROR)
         err_mesg("UPDATE failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");
}

fetch_acc_int_codes()
{

     EXEC SQL OPEN BL_BILL_TYPE_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_BILL_TYPE_CUR",0,"");

    bl_recv_acc_int_code.arr[0]            = '\0';
    ar_recv_acc_int_code.arr[0]            = '\0';

    bl_recv_acc_int_code.len               = 0;
    ar_recv_acc_int_code.len               = 0;

     EXEC SQL FETCH BL_BILL_TYPE_CUR
               INTO :bl_recv_acc_int_code,
                    :ar_recv_acc_int_code;

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BILL_TYPE_CUR",0,"");
     if (NOT_FOUND)
         err_mesg("Record not found in BL BILL TYPE",0,"");

     bl_recv_acc_int_code.arr[bl_recv_acc_int_code.len] = '\0';
     ar_recv_acc_int_code.arr[ar_recv_acc_int_code.len] = '\0';

     strcpy(recv_int_code.arr,ar_recv_acc_int_code.arr);
     recv_int_code.len = strlen(recv_int_code.arr);

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");

     ar_rec_main_acc1_code.arr[0]             = '\0';
     ar_rec_main_acc2_code.arr[0]             = '\0';
     ar_rec_dept_code.arr[0]                  = '\0';
     ar_rec_subledger_group_code.arr[0]       = '\0';
     ar_rec_subledger_line_code.arr[0]        = '\0';
     ar_rec_product_group_code.arr[0]         = '\0';
     ar_rec_product_line_code.arr[0]          = '\0';

     ar_rec_main_acc1_code.len                = 0;
     ar_rec_main_acc2_code.len                = 0;
     ar_rec_dept_code.len                     = 0;
     ar_rec_subledger_group_code.len          = 0;
     ar_rec_subledger_line_code.len           = 0;
     ar_rec_product_group_code.len            = 0;
     ar_rec_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
               INTO :ar_rec_main_acc1_code,
                    :ar_rec_main_acc2_code,
                    :ar_rec_dept_code,
                    :ar_rec_subledger_group_code,
                    :ar_rec_subledger_line_code,
                    :ar_rec_product_group_code,
                    :ar_rec_product_line_code;

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");

     if (NOT_FOUND)
         err_mesg("Record not found in BL GL ACCOUNT - 2",0,"");

     ar_rec_main_acc1_code.arr[ar_rec_main_acc1_code.len]             = '\0';
     ar_rec_main_acc2_code.arr[ar_rec_main_acc2_code.len]             = '\0';
     ar_rec_dept_code.arr[ar_rec_dept_code.len]                       = '\0';
     ar_rec_subledger_group_code.arr[ar_rec_subledger_group_code.len] = '\0';
     ar_rec_subledger_line_code.arr[ar_rec_subledger_line_code.len]   = '\0';
     ar_rec_product_group_code.arr[ar_rec_product_group_code.len]     = '\0';
     ar_rec_product_line_code.arr[ar_rec_product_line_code.len]       = '\0';


     strcpy(recv_int_code.arr,bl_recv_acc_int_code.arr);
     recv_int_code.len = strlen(recv_int_code.arr);

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     bl_rec_main_acc1_code.arr[0]             = '\0';
     bl_rec_main_acc2_code.arr[0]             = '\0';
     bl_rec_dept_code.arr[0]                  = '\0';
     bl_rec_subledger_group_code.arr[0]       = '\0';
     bl_rec_subledger_line_code.arr[0]        = '\0';
     bl_rec_product_group_code.arr[0]         = '\0';
     bl_rec_product_line_code.arr[0]          = '\0';

     bl_rec_main_acc1_code.len                = 0;
     bl_rec_main_acc2_code.len                = 0;
     bl_rec_dept_code.len                     = 0;
     bl_rec_subledger_group_code.len          = 0;
     bl_rec_subledger_line_code.len           = 0;
     bl_rec_product_group_code.len            = 0;
     bl_rec_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
               INTO :bl_rec_main_acc1_code,
                    :bl_rec_main_acc2_code,
                    :bl_rec_dept_code,
                    :bl_rec_subledger_group_code,
                    :bl_rec_subledger_line_code,
                    :bl_rec_product_group_code,
                    :bl_rec_product_line_code;
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     if (NOT_FOUND)
         err_mesg("Record not found in BL GL ACCOUNT",0,"");
 
     bl_rec_main_acc1_code.arr[bl_rec_main_acc1_code.len]              = '\0';
     bl_rec_main_acc2_code.arr[bl_rec_main_acc2_code.len]              = '\0';
     bl_rec_dept_code.arr[bl_rec_dept_code.len]                        = '\0';
     bl_rec_subledger_group_code.arr[bl_rec_subledger_group_code.len]  = '\0';
     bl_rec_subledger_line_code.arr[bl_rec_subledger_line_code.len]    = '\0';
     bl_rec_product_group_code.arr[bl_rec_product_group_code.len]      = '\0';
     bl_rec_product_line_code.arr[bl_rec_product_line_code.len]        = '\0';

}

fetch_dtl_hdr()
{

     EXEC SQL OPEN AR_CUSTOMER_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

     bl_cust_pmnt_terms_code.arr[0]             = '\0';

     bl_cust_pmnt_terms_code.len                = 0;

     EXEC SQL FETCH AR_CUSTOMER_CUR
               INTO :bl_cust_pmnt_terms_code;

     if (OERROR)
         err_mesg("FETCH failed on cursor AR_CUSTOMER",0,"");

     if (NOT_FOUND)
         err_mesg("Record not found in AR CUSTOMER",0,"");

     bl_cust_pmnt_terms_code.arr[bl_cust_pmnt_terms_code.len] = '\0';
     bl_cust_pmnt_terms_code.arr[bl_cust_pmnt_terms_code.len] = '\0';

     EXEC SQL OPEN AR_PMNT_TERMS_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor AR_PMNT_TERMS_CUR",0,"");

     ar_pmnt_cred_days_period.arr[0]           = '\0';
     ar_pmnt_settl_days_period.arr[0]          = '\0';
     ar_pmnt_settl_percent.arr[0]              = '\0';

     ar_pmnt_cred_days_period.len              = 0;
     ar_pmnt_settl_days_period.len             = 0;
     ar_pmnt_settl_percent.len                 = 0;
	 ar_markup_perc                            = 0;


     EXEC SQL FETCH AR_PMNT_TERMS_CUR
               INTO :ar_pmnt_cred_days_period,
                    :ar_pmnt_settl_days_period,
                    :ar_pmnt_settl_percent,
					:ar_markup_perc;

     if (OERROR)
         err_mesg("FETCH failed on cursor AR_PMNT_TERMS_CUR",0,"");

     if (NOT_FOUND)
         err_mesg("Record not found in AR PMNT TERMS",0,"");

     ar_pmnt_cred_days_period.arr[ar_pmnt_cred_days_period.len]       = '\0';
     ar_pmnt_settl_days_period.arr[ar_pmnt_settl_days_period.len]     = '\0';
     ar_pmnt_settl_percent.arr[ar_pmnt_settl_percent.len]             = '\0';
   
}

fetch_dtl_line()
{
    bl_rec_dept_code.arr[0]  = '\0';
    bl_rec_dept_code.len     = 0;

    EXEC SQL SELECT DEPT_CODE
	           INTO :bl_rec_dept_code
	           //FROM RL_PARAM
			   FROM RL_PARAM_FOR_FACILITY                      //  ADDED ON 08/02/2008
			   WHERE OPERATING_FACILITY_ID =:nd_facility_id;   //  ADDED ON 08/02/2008

    if(OERROR || NO_DATA_FOUND)
	err_mesg("SELECT failed on table RL_PARAM",0,"");

    bl_rec_dept_code.arr[bl_rec_dept_code.len]                        = '\0';

}  

fetch_pat_dtls()
{
    d_patient_name.arr[0]   = '\0';
    d_patient_name.len      = 0;

    EXEC SQL SELECT NVL(SHORT_NAME,SHORT_NAME_LOC_LANG)
	       INTO :d_patient_name
	       FROM RL_PATIENT_MAST
	      WHERE PATIENT_ID = :d_prv_patient_id;

    if(OERROR)
	err_mesg("SELECT failed on table RL_PATIENT_MAST",0,"");

    d_patient_name.arr[d_patient_name.len]   = '\0';

    d_section_short_name.arr[0]  = '\0';
    d_section_short_name.len     = 0;

    EXEC SQL SELECT SHORT_NAME
	       INTO :d_section_short_name
	       FROM RL_SECTION_CODE
	      WHERE SECTION_CODE  = :d_prv_section_code;

    if(OERROR||NO_DATA_FOUND)
	err_mesg("SELECT failed on table RL_SECTION_CODE",0,"");

    d_section_short_name.arr[d_section_short_name.len]  = '\0';

}

insert_ar_patient()
{

     EXEC SQL INSERT INTO AR_PATIENT_DTLS
               (
                 DOC_TYPE_CODE,
                 DOC_NUM,
                 PATIENT_ID,
				 PATIENT_NAME,
                 BILL_DOC_TYPE_CODE,
                 BILL_NUM,
                 BILL_DATE,
                 REMARKS,
				 LAB_TEST,
                 AMOUNT,
				 AMT_PAID,
				 BILL_TYPE_CODE,
				 PEND_AMOUNT,    
				 BILLING_GROUP  
               )
             VALUES
               (
                 :nd_new_doc_type_code,            /* DOC_TYPE_CODE      */
                 :nd_inv_start_doc_num,            /* DOC_NUM            */
                 :d_prv_patient_id,                /* PATIENT_ID         */
				 :d_patient_name,                  /* PATIENT_NAME       */
                 :d_prv_doc_type_code,             /* BILL DOC TYPE CODE */
                 :d_prv_doc_num,                   /* BILL NUM           */
                 TO_DATE(:d_prv_ord_regd_date, 
								'DD/MM/YYYY'),	   /* BILL_DATE*/
                 :d_prv_request_num,               /* REMARKS            */
				 :d_section_short_name,            /* LAB_TEST           */
                 :nd_sum_outst_amt_sec,            /* AMOUNT             */
		         :nd_sum_outst_amt_sec,            /* AMOUNT PAID        */
				 :nd_bill_type,                    /* BILL TYPE CODE     */
		         :nd_sum_outst_amt_sec,            /* AMOUNT OUTSTANDING */
                 :nd_st_blng_grp_id                /* BILLING GROUP      */
               );

     if (OERROR)
         err_mesg("INSERT failed on table AR_PATIENT_DTLS",0,"");
}
/******************************************************/
insert_ar_hdr()
{


if ((ar_markup_perc > 0) && (nd_sum_outst_amt > 0))
   {
     nd_markup_amt = 0;
	 nd_markup_amt = ((nd_sum_outst_amt * ar_markup_perc) / 100 );

        EXEC SQL INSERT INTO AR_INV_LINE
                  (
                    ACC_ENTITY_CODE,
					DOC_TYPE_CODE,
                    DOC_NUM,
                    LINE_NUM,
                    MAIN_ACC1_CODE,
                    MAIN_ACC2_CODE,
                    SUBLEDGER_GROUP_CODE,
                    SUBLEDGER_LINE_CODE,
                    DEPT_CODE,
                    PRODUCT_GROUP_CODE,
                    PRODUCT_LINE_CODE,
                    AMT_LOCAL,
                    NARRATION,
                    MAIN_ACC1_CODE_NEW,
                    MAIN_ACC2_CODE_NEW,
                    SUBLEDGER_GROUP_CODE_NEW,
                    SUBLEDGER_LINE_CODE_NEW,
                    DEPT_CODE_NEW,
                    PRODUCT_GROUP_CODE_NEW,
                    PRODUCT_LINE_CODE_NEW
                  )
                VALUES
                  (
				    :nd_acc_entity_code,
                    :nd_new_doc_type_code,             /* DOC_TYPE_CODE  */
                    :nd_inv_start_doc_num,             /* DOC_NUM       */
                    :d_line_num,                       /* LINE NUM       */
                    :bl_main_acc1_code_mk_inv,            /* -------------- */
                    :bl_main_acc2_code_mk_inv,            /*                */
                    :bl_sublgr_grp_code_mk_inv,        /*    POSTING     */
                    :bl_sublgr_line_code_mk_inv,       /*                */
                    :bl_dept_code_mk_inv,              /*      A/C       */
                    :bl_prod_grp_code_mk_inv,          /*                */
                    :bl_prod_line_code_mk_inv,         /* -------------- */
                    trunc(:nd_markup_amt,2),            /* AMT LOCAL      */
                    NULL,                              /* NARRATION      */
                    :bl_main_acc1_code_mk_inv,          /* -------------- */
                    :bl_main_acc2_code_mk_inv,         /*                */
                    :bl_sublgr_grp_code_mk_inv,        /*    POSTING     */
                    :bl_sublgr_line_code_mk_inv,       /*                */
                    :bl_dept_code_mk_inv,              /*      A/C       */
                    :bl_prod_grp_code_mk_inv,        /*                */
                    :bl_prod_line_code_mk_inv          /* -------------- */
                  );



   
        if (OERROR)
            err_mesg("INSERT failed on table AR_INV_LINE - Markup",0,"");

	d_line_num++;


   }


	 EXEC SQL INSERT INTO AR_INV_HDR
               (
                 ACC_ENTITY_CODE,
				 OPERATING_FACILITY_ID,			//Added on 3/8/2005
				 DOC_TYPE_CODE,
                 DOC_NUM,
                 LAST_LINE_NUM,
                 CUST_CODE,
                 DOC_DATE,
                 NARRATION,
                 BASE_DATE,
                 DUE_DATE,
                 GROSS_AMT,
                 PAYABLE_AMT,
                 DISCOUNT_AMT,
                 PMNT_TERMS_CODE,
                 SETTLEMENT_DATE,
                 SETTLEMENT_PERC,
                 CUST_REF,
//                 PATIENT_ID,
//                 BILLING_GROUP,
//                 BILL_DOC_TYPE_CODE,
//                 BILL_NUM,
//                 BILL_DATE,
                 DOCTOR_FEE_AMT,
                 MAIN_ACC1_CODE,
                 MAIN_ACC2_CODE,
                 SUBLEDGER_GROUP_CODE,
                 SUBLEDGER_LINE_CODE,
                 DEPT_CODE,
                 PRODUCT_GROUP_CODE,
                 PRODUCT_LINE_CODE,
                 POST_MONTH,
                 POST_YEAR,
                 ERROR_FLAG,
                 PRINT_FLAG,
                 POSTED_FLAG,
                 INTERFACE_FLAG,
                 MAIN_ACC1_CODE_NEW,
                 MAIN_ACC2_CODE_NEW,
                 SUBLEDGER_GROUP_CODE_NEW,
                 SUBLEDGER_LINE_CODE_NEW,
                 DEPT_CODE_NEW,
                 PRODUCT_GROUP_CODE_NEW,
                 PRODUCT_LINE_CODE_NEW,
//                 BILL_TYPE_CODE,
				 LAB_INVOICE_YN,
				 MODULE_ID,              
				 CONSOLIDATED_INV_YN,    
				 MARKUP_AMT,             
				 ADDED_BY_ID,            
				 MODIFIED_BY_ID,         
				 ADDED_DATE,             
				 MODIFIED_DATE          
               )
              VALUES
               (
                 :nd_acc_entity_code,             /* ACC ENTITY CODE */
				 :nd_facility_id,
				 :nd_new_doc_type_code,             /* DOC_TYPE_CODE */
                 :nd_inv_start_doc_num,             /* DOC_NUM       */
                 1,                                 /* LAST LINE NUM */
                 :d_prv_cust_code,                  /* CUST CODE     */
                 to_date(:nd_inv_date,'dd/mm/yyyy'),   /* DOC DATE      */
                 NULL,                              /* NARRATION     */
                 to_date(:nd_inv_date,'dd/mm/yyyy'), /* DOC DATE      */
                 to_date(:nd_inv_date,'dd/mm/yyyy') + :ar_pmnt_cred_days_period, 
				                  /*DUE DATE*/
                 :nd_sum_outst_amt,                 /* GROSS AMT     */
                 :nd_sum_outst_amt + trunc(:nd_markup_amt,2), 
				 /* PAYABLE AMT   */
                 0,                                 /* DISCOUNT AMT  */
                 :bl_cust_pmnt_terms_code,          /* PMNT TERMS    */
                 to_date(:nd_inv_date,'dd/mm/yyyy') + :ar_pmnt_settl_days_period,
									 /*STLMT DT*/
                 :ar_pmnt_settl_percent,           /* SETTLEMENT PERC*/
                 :nd_credit_ref,                   /* CUST REF       */
//                 :nd_st_patient_id,                /* PATIENT ID     */
//                 :nd_st_blng_grp_id,               /* BILLING GROUP  */
//                 :nd_st_doc_type_code,             /* BILL DOC TYPE CODE */
//                 :nd_st_doc_num,                   /* BILL NUM       */
//                 to_date(:nd_inv_date,'dd/mm/yyyy'),                    
													 /* BILL DATE      */
                 :nd_sum_drfee_amt,                /* DOCTOR FEE AMT */
                 :ar_rec_main_acc1_code,           /* -------------- */
                 :ar_rec_main_acc2_code,           /*                */
                 :ar_rec_subledger_group_code,     /*    POSTING     */
                 :ar_rec_subledger_line_code,      /*                */
                 :ar_rec_dept_code,                /*      A/C       */
                 :ar_rec_product_group_code,       /*                */
                 :ar_rec_product_line_code,        /* -------------- */
                 :bl_par_post_month,               /* POST MONTH     */
                 :bl_par_post_year,                /* POST YEAR      */
                 NULL,                             /* ERROR FLAG     */
                 'N',                              /* PRINT FLAG     */
                 NULL,                             /* POSTED FLAG    */
                 NULL,                             /* INTERFACE FLAG */
                 :ar_rec_main_acc1_code,           /* -------------- */
                 :ar_rec_main_acc2_code,           /*                */
                 :ar_rec_subledger_group_code,     /*    POSTING     */
                 :ar_rec_subledger_line_code,      /*                */
                 :ar_rec_dept_code,                /*      A/C       */
                 :ar_rec_product_group_code,       /*                */
                 :ar_rec_product_line_code,        /* -------------- */
//                 :nd_bill_type,                    /* BILL TYPE CODE */
				 'Y',                               /* LAB INVOICE YN */
                 'RL',
				 'N',
                 trunc(:nd_markup_amt,2),
                 user,
                 user,
                 sysdate,
                 sysdate   
               );


     

     if (OERROR)
         err_mesg("INSERT failed on table AR_INV_HDR",0,"");

	 ar_markup_perc = 0;
	 nd_markup_amt = 0;

}



/*********************************************************/

insert_ar_line()
{

    EXEC SQL UPDATE AR_INV_LINE
		SET AMT_LOCAL = NVL(AMT_LOCAL,0) + 
                                NVL(:nd_ar_inv_line_amt,0)
	      WHERE DOC_TYPE_CODE         = :nd_new_doc_type_code
				AND DOC_NUM               = :nd_inv_start_doc_num
                AND MAIN_ACC1_CODE        = :bl_rec_main_acc1_code
                AND MAIN_ACC2_CODE        = :bl_rec_main_acc2_code
                AND SUBLEDGER_GROUP_CODE  = :bl_rec_subledger_group_code
                AND SUBLEDGER_LINE_CODE   = :bl_rec_subledger_line_code
                AND DEPT_CODE             = :bl_rec_dept_code
                AND PRODUCT_GROUP_CODE    = :bl_rec_product_group_code
                AND PRODUCT_LINE_CODE     = :bl_rec_product_line_code;

    if(OERROR)
	err_mesg("UPDATE failed on table AR_INV_LINE",0,"");

    /* if no data has been updated then insert new record */

    if(!sqlca.sqlerrd[2]) {
	     
        EXEC SQL INSERT INTO AR_INV_LINE
                  (
                    ACC_ENTITY_CODE,
					DOC_TYPE_CODE,
                    DOC_NUM,
                    LINE_NUM,
                    MAIN_ACC1_CODE,
                    MAIN_ACC2_CODE,
                    SUBLEDGER_GROUP_CODE,
                    SUBLEDGER_LINE_CODE,
                    DEPT_CODE,
                    PRODUCT_GROUP_CODE,
                    PRODUCT_LINE_CODE,
                    AMT_LOCAL,
                    NARRATION,
                    MAIN_ACC1_CODE_NEW,
                    MAIN_ACC2_CODE_NEW,
                    SUBLEDGER_GROUP_CODE_NEW,
                    SUBLEDGER_LINE_CODE_NEW,
                    DEPT_CODE_NEW,
                    PRODUCT_GROUP_CODE_NEW,
                    PRODUCT_LINE_CODE_NEW
                  )
                VALUES
                  (
				    :nd_acc_entity_code,
                    :nd_new_doc_type_code,             /* DOC_TYPE_CODE  */
                    :nd_inv_start_doc_num,             /* DOC_NUM       */
                    :d_line_num,                       /* LINE NUM       */
                    :bl_rec_main_acc1_code,            /* -------------- */
                    :bl_rec_main_acc2_code,            /*                */
                    :bl_rec_subledger_group_code,      /*    POSTING     */
                    :bl_rec_subledger_line_code,       /*                */
                    :bl_rec_dept_code,                 /*      A/C       */
                    :bl_rec_product_group_code,        /*                */
                    :bl_rec_product_line_code,         /* -------------- */
                    NVL(:nd_ar_inv_line_amt,0),        /* AMT LOCAL      */
                    NULL,                              /* NARRATION      */
                    :bl_rec_main_acc1_code,            /* -------------- */
                    :bl_rec_main_acc2_code,            /*                */
                    :bl_rec_subledger_group_code,      /*    POSTING     */
                    :bl_rec_subledger_line_code,       /*                */
                    :bl_rec_dept_code,                 /*      A/C       */
                    :bl_rec_product_group_code,        /*                */
                    :bl_rec_product_line_code          /* -------------- */
                  );
   
        if (OERROR)
            err_mesg("INSERT failed on table AR_INV_LINE",0,"");

	d_line_num++;
    }

}

update_hdr()
{

    EXEC SQL UPDATE RL_REQUEST_HEADER
		SET INVOICED_YN = 'Y'
	      WHERE ROWID       = :d_rowid;

    if(OERROR)
	err_mesg("UPDATE failed on table RL_REQ_HDR",0,"");

}

sql_connect(l_uid_pwd)
char l_uid_pwd[];
{

  strcpy(d_uid_pwd.arr,l_uid_pwd);
  d_uid_pwd.len = strlen(d_uid_pwd.arr);

  EXEC SQL CONNECT :d_uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

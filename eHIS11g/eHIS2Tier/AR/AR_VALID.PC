#include <stdio.h>
#include <math.h>
    
extern long atol();
                  
#define ERROR (sqlca.sqlcode < 0)

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)
/*
#define DEBUG 0
*/

# define abs(x)			(x>=0 ? x : -(x))

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR     l_ar_hdr_doc_type_code                [7], 
            l_ar_hdr_doc_num                      [9],
            l_ar_hdr_cust_code                    [9],

            l_ar_chk_doc_type_code                [7], 

            l_ar_ihdr_doc_type_code              [7],
            l_ar_ihdr_doc_num                    [9],
            l_ar_ihdr_org_doc_type_code          [7],
            l_ar_ihdr_org_doc_num                [9],
            l_ar_ihdr_cust_code                  [8],

            l_ar_ihdr_patient_id                 [21],
            l_ar_ihdr_billing_group              [4],
            l_ar_ihdr_bill_doc_type_code         [7],
            l_ar_ihdr_pmnt_terms_code            [3],

            l_ar_trn_type_code            [3],
            l_ar_acc_status               [2],
            l_ar_acc_valid_flag           [2],
            l_customer_status             [2],
            l_customer_patient_flag       [2],
            l_pmnt_terms_status           [2],
            l_bl_blng_grp_status          [2],
            l_mast_status                 [2],
            l_sy_doc_print_flag           [3],
			l_facility_id            [2],  /*Added by madhusudhan for GDOH-CRF-0107*/

			l_ar_flag   [2],
			l_consolidated_yn             [2],

            l_dummy                       [10][10];

VARCHAR    ar_pat_doc_type_code          [7],
           ar_pat_doc_num                [9],
           ar_pat_patient_id             [21],
           ar_pat_bill_doc_type_code     [7],
           ar_pat_bill_num               [9],
           ar_pat_inv_doc_type_code          [7],
           ar_pat_inv_doc_num                [9],
           ar_pat_bill_date              [12],
           ar_pat_rowid                  [31];


double      d_ar_pending_amt;

double      ar_pat_amount,
            ar_pat_tot_amt,
			ar_pat_abs_tot_amount ,
			ar_pat_abs_amount,
			pending_amt;


EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA;

ar_declare_cursor()
{

#ifdef DEBUG
   printf("Before Declaring cursors ...\n");
#endif

   EXEC SQL DECLARE AR_TRN_DOC_TYPE_CUR CURSOR FOR
             SELECT TRN_TYPE_CODE
               FROM AR_TRN_DOC_TYPE
              WHERE OPERATING_FACILITY_ID=:l_facility_id   /*Added by madhusudhan for GDOH-CRF-0107*/
			    AND DOC_TYPE_CODE = :l_ar_hdr_doc_type_code;

   EXEC SQL DECLARE SY_DOC_CONTROL_CUR CURSOR FOR
             SELECT 'X'
               FROM SY_DOC_CONTROL
              WHERE DOC_TYPE_CODE = :l_ar_hdr_doc_type_code
                AND DOC_NUM       = :l_ar_hdr_doc_num;
  
   EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
             SELECT NVL(STATUS,'X'),
                    PATIENT_FLAG
               FROM AR_CUSTOMER
              WHERE CUST_CODE        = :l_ar_hdr_cust_code;

   EXEC SQL DECLARE AR_PMNT_TERMS_CUR CURSOR FOR
             SELECT NVL(STATUS,'X')
               FROM AR_PMNT_TERMS
              WHERE PMNT_TERMS_CODE = :l_ar_ihdr_pmnt_terms_code;

   EXEC SQL DECLARE AR_PENDING_DOC_CUR CURSOR FOR
             SELECT NVL(PENDING_AMT,0)
               FROM AR_PENDING_DOC
              WHERE OPERATING_FACILITY_ID=:l_facility_id    /*Added by madhusudhan for GDOH-CRF-0107*/
			    AND CUST_CODE        = :l_ar_ihdr_cust_code
                AND DOC_TYPE_CODE    = :l_ar_ihdr_org_doc_type_code
                AND DOC_NUM          = :l_ar_ihdr_org_doc_num;

   EXEC SQL DECLARE SY_ACC_ENTITY_DOC_TYPE_CUR CURSOR FOR
             SELECT NVL(STATUS,'X'),
                    NVL(AR_VALID_FLAG,'X'),
                    NVL(DOC_PRINT_FLAG,'X')
               FROM GL_ACC_ENTITY_DOC_TYPE_VW
              WHERE DOC_TYPE_CODE   = :l_ar_chk_doc_type_code;

    EXEC SQL DECLARE SY_DOC_TYPE_MAST_CUR CURSOR FOR
              SELECT NVL(STATUS,'X')
                FROM SY_DOC_TYPE_MASTER
               WHERE DOC_TYPE_CODE = :l_ar_chk_doc_type_code;

    
	
	
	
    EXEC SQL DECLARE BL_BLNG_GRP_CUR CURSOR FOR
              SELECT NVL(STATUS,'X')
                FROM BL_BLNG_GRP
               WHERE BLNG_GRP_ID  = :l_ar_ihdr_billing_group;

    EXEC SQL DECLARE MP_PATIENT_MAST_CUR CURSOR FOR
              SELECT 'X'
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID  = :l_ar_ihdr_patient_id;


   /***********************************************************/

     EXEC SQL DECLARE AR_PATIENT_DTLS_CUR CURSOR FOR
              SELECT DOC_TYPE_CODE,
                     DOC_NUM,
                     PATIENT_ID,
					 INV_DOC_TYPE_CODE,
					 INV_DOC_NUM       ,     
                     BILL_DOC_TYPE_CODE,
                     BILL_NUM,
                     TO_CHAR(BILL_DATE,'YYYYMMDD'),
                     NVL(AMOUNT,0),
					  ABS(nvl(AMOUNT,0)),
                     ROWID
                FROM AR_PATIENT_ALLOC_DTLS
              WHERE OPERATING_FACILITY_ID=:l_facility_id    /*Added by madhusudhan for GDOH-CRF-0107*/
			    AND DOC_TYPE_CODE = :l_ar_hdr_doc_type_code
                AND DOC_NUM       = :l_ar_hdr_doc_num
               ORDER BY DOC_TYPE_CODE , DOC_NUM;



   /**********************************************************/

#ifdef DEBUG
   printf("After Declaring  & opening cursor CUR_DN_HDR...\n");
#endif
}   /* End od Declare Cusor*/




validate_ar_header(
            l_passed_doc_type_code, 
            l_passed_doc_num,
            l_passed_cust_code,
            l_ar_hdr_doc_date,
            l_ar_hdr_doc_amt_chk,
            l_ar_hdr_post_month,
            l_ar_hdr_post_year,
            l_ar_hdr_print_flag,
            l_curr_acc_year,
            l_curr_acc_month,
            l_sy_num_acc_per,
            l_proc_flag,
            l_prior_post_allow_flag,
            l_cus_pat_flag,         
            l_trn_type ,             /* C -> Credit note D -> Debit note  A -> Adjustments  */
			l_passed_ar_flag,
			l_passed_facility_id   /*Added by madhusudhan for GDOH-CRF-0107*/
)
char l_passed_doc_type_code    [ ], 
     l_passed_doc_num          [ ],
     l_passed_cust_code        [ ],
     l_ar_hdr_doc_date        [  ],
     l_ar_hdr_doc_amt_chk      [  ],
     l_ar_hdr_post_month       [ ],
     l_ar_hdr_post_year        [ ],
     l_ar_hdr_print_flag       [ ],
     l_proc_flag               [ ],
     l_prior_post_allow_flag   [ ],
     *l_cus_pat_flag,
     l_trn_type,
	 l_passed_ar_flag        [ ],
	 l_passed_facility_id        [ ];

int  l_curr_acc_year,
     l_curr_acc_month,
     l_sy_num_acc_per;
{

#ifdef DEBUG
   printf("Inside Val dn header...\n");
   printf("doc type is <%s>\n",l_passed_doc_type_code);
   printf("doc num is <%s>\n",l_passed_doc_num);
   printf("cust cd is <%s>\n",l_passed_cust_code);
   printf("doc date is <%s>\n",l_ar_hdr_doc_date);
   printf("doc amt  is <%s>\n",l_ar_hdr_doc_amt_chk);
   printf("post mnt is <%s>\n",l_ar_hdr_post_month);
   printf("post yr  is <%s>\n",l_ar_hdr_post_year);
   printf("pr  flg  is <%s>\n",l_ar_hdr_print_flag);
   printf("proc flg is <%s>\n",l_proc_flag);
   printf("pr post  is <%s>\n",l_prior_post_allow_flag);
   printf("pat flg  is <%s>\n",l_cus_pat_flag);
   printf("trn type is <%c>\n",l_trn_type);
   printf("cur year is <%d>\n",l_curr_acc_year);
   printf("cur mont is <%d>\n",l_curr_acc_month);
   printf("sy num acc is <%d>\n",l_sy_num_acc_per);
   printf("trn type is <%c>\n",l_trn_type);
   printf("falility id is <%c>\n",l_facility_id);
#endif

     strcpy(l_ar_hdr_doc_type_code.arr,  l_passed_doc_type_code);
     strcpy(l_ar_hdr_doc_num.arr,        l_passed_doc_num);
	 strcpy(l_ar_flag.arr , l_passed_ar_flag);
	 
	 strcpy(l_facility_id.arr , l_passed_facility_id); 

     l_ar_hdr_doc_type_code.len  = strlen(l_ar_hdr_doc_type_code.arr);
     l_ar_hdr_doc_num.len        = strlen(l_ar_hdr_doc_num.arr);
	 l_ar_flag.len = strlen(l_ar_flag.arr);

   strcpy(l_ar_chk_doc_type_code.arr,  l_ar_hdr_doc_type_code.arr);
   l_ar_chk_doc_type_code.len  = strlen(l_ar_chk_doc_type_code.arr);

   EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;
 
   if (ERROR) err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

   l_ar_acc_status.arr[0]     = '\0';
   l_ar_acc_valid_flag.arr[0] = '\0';
   l_sy_doc_print_flag.arr[0]   = '\0';

   l_ar_acc_valid_flag.len = 0;
   l_ar_acc_status.len     = 0;
   l_sy_doc_print_flag.len   = 0;

   EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
             INTO :l_ar_acc_status,
                  :l_ar_acc_valid_flag,
                  :l_sy_doc_print_flag;
   
   if (ERROR)
        err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 

   l_ar_acc_status.arr[l_ar_acc_status.len]         = '\0';
   l_ar_acc_valid_flag.arr[l_ar_acc_valid_flag.len] = '\0';
   l_sy_doc_print_flag.arr[l_sy_doc_print_flag.len]     = '\0';
   
   if (NOT_FOUND)
         error_insert("9999","SY1610");
   else
   {
      if (l_ar_acc_valid_flag.arr[0] != 'Y')
            error_insert("9999","SY1700");
      if (l_ar_acc_status.arr[0] == 'S')
            error_insert("9999","SY1640");

      if (l_proc_flag[0] == 'P') 
      {
           if (l_sy_doc_print_flag.arr[0] == 'Y' &&
                   l_ar_hdr_print_flag[0] != 'Y')
               error_insert("9999","SY2370");
      }
   } 

   EXEC SQL OPEN SY_DOC_TYPE_MAST_CUR;

   if (ERROR)
       err_mesg("OPEN failed on cursor SY_DOC_TYPE_MAST_CUR",0,""); 

   l_mast_status.arr[0] = '\0';
   l_mast_status.len    = 0;

   EXEC SQL FETCH SY_DOC_TYPE_MAST_CUR
             INTO :l_mast_status;
 
   if (ERROR)
       err_mesg("FETCH failed on cursor SY_DOC_TYPE_MAST_CUR",0,""); 

   l_mast_status.arr[l_mast_status.len] = '\0';
   
   if (NOT_FOUND)
        error_insert("9999","SY1610");
   else if (l_mast_status.arr[0] == 'S')
        error_insert("9999","SY2190");
   
   EXEC SQL OPEN AR_TRN_DOC_TYPE_CUR;

   if (ERROR)
        err_mesg("OPEN failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   l_ar_trn_type_code.arr[0] = '\0';
   l_ar_trn_type_code.len    = 0;
 
   EXEC SQL FETCH AR_TRN_DOC_TYPE_CUR
             INTO :l_ar_trn_type_code;

   if (ERROR)
        err_mesg("FETCH failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   l_ar_trn_type_code.arr[l_ar_trn_type_code.len] = '\0';

   if (l_trn_type == 'D' && l_ar_trn_type_code.arr[0] != '2')
        error_insert("9999","AR1890");
   else if (l_trn_type == 'C' && l_ar_trn_type_code.arr[0] != '3')
        error_insert("9999","AR1890");
   else if (l_trn_type == 'A' && l_ar_trn_type_code.arr[0] != '4')
        error_insert("9999","AR1890");

   EXEC SQL OPEN SY_DOC_CONTROL_CUR;

   if (ERROR)
        err_mesg("OPEN failed on cursor SY_DOC_CONTROL_CUR",0,"");

   EXEC SQL FETCH SY_DOC_CONTROL_CUR
             INTO :l_dummy;

   if (ERROR)
        err_mesg("FETCH failed on cursor SY_DOC_CONTROL_CUR",0,"");

   if (!NOT_FOUND)   /*   Record Exists   */
        error_insert("9999","AR1080");
  
   if (l_trn_type != 'A')
   {
      ar_cust_check(l_passed_cust_code,l_cus_pat_flag,"9999");
   }

   if (atoi(l_ar_hdr_post_month) > l_sy_num_acc_per)
          error_insert("9999","GL2290");

   if (atoi(l_ar_hdr_post_year) < l_curr_acc_year)
          error_insert("9999","GL1595");

   if ( (atoi(l_ar_hdr_post_year) == l_curr_acc_year && 
            atoi(l_ar_hdr_post_month) < l_curr_acc_month) &&
             l_prior_post_allow_flag[0] != 'Y' )
          error_insert("9999","GL1310");

     if (strlen(l_ar_hdr_doc_date) == 0)
            error_insert_null("9999","SY1470","Field = DOC DATE");
     if (strlen(l_ar_hdr_doc_amt_chk) == 0)
            error_insert_null("9999","SY1470","Field = DOC AMT");

     if (strlen(l_ar_hdr_post_month) == 0)
            error_insert_null("9999","SY1470","Field = POST MONTH");
     if (strlen(l_ar_hdr_post_year) == 0)
            error_insert_null("9999","SY1470","Field = POST YEAR");

	if ((strcmp(l_ar_flag.arr  , "1") == 0)  || (strcmp(l_ar_flag.arr  , "2") == 0))
    {
         if (strlen(l_ar_hdr_doc_amt_chk) != 0)
	    {
		    error_insert("9999","AR2395");
	     }

     }


#ifdef DEBUG
   printf("pat flg is <%s>\n",l_cus_pat_flag);
   printf("After Val header...\n");
#endif
} /* End of Validate AR_header*/




ar_cust_check(local_cust_code,local_cus_pat_flag,l_error)
char local_cust_code[],
     *local_cus_pat_flag,
     l_error[];
{
     strcpy(l_ar_hdr_cust_code.arr,      local_cust_code);
     l_ar_hdr_cust_code.len      = strlen(l_ar_hdr_cust_code.arr);

     /****   AR_CUSTOMER Validation   *****/
  
     if (l_ar_hdr_cust_code.len == 0)
            error_insert_null(l_error,"SY1470","Field = CUST CODE");

     EXEC SQL OPEN AR_CUSTOMER_CUR;

     if (ERROR)
          err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

     l_customer_status.arr[0]       = '\0';
     l_customer_patient_flag.arr[0] = '\0';

     l_customer_status.len       = 0;
     l_customer_patient_flag.len = 0;

     EXEC SQL FETCH AR_CUSTOMER_CUR
               INTO :l_customer_status,
                    :l_customer_patient_flag;

     l_customer_status.arr[l_customer_status.len]             = '\0';
     l_customer_patient_flag.arr[l_customer_patient_flag.len] = '\0';

     *local_cus_pat_flag = l_customer_patient_flag.arr[0];
     *(local_cus_pat_flag+1) = '\0';

     if (ERROR)
          err_mesg("FETCH failed on cursor AR_CUSTOMER_CUR",0,"");

     if (NOT_FOUND)
          error_insert(l_error,"AR1210");
     else
       if (l_customer_status.arr[0] == 'S')
          error_insert(l_error,"AR1220");
} /* End or ar_check*/


/*************************************************************/

fetch_patient_dtls()
{
ar_pat_doc_type_code.arr[0]       = '\0';
ar_pat_doc_num.arr[0]             = '\0';
ar_pat_patient_id.arr[0]          = '\0';
ar_pat_bill_doc_type_code.arr[0]  = '\0';
ar_pat_bill_num.arr[0]            = '\0';
ar_pat_bill_date.arr[0]           = '\0';
ar_pat_inv_doc_type_code.arr[0] = '\0';
ar_pat_inv_doc_num.arr[0] = '\0';
ar_pat_rowid.arr[0]               = '\0';

ar_pat_doc_type_code.len          = 0;
ar_pat_doc_num.len                = 0;
ar_pat_patient_id.len             = 0;
ar_pat_bill_doc_type_code.len     = 0;
ar_pat_bill_num.len               = 0;
ar_pat_bill_date.len              = 0;
ar_pat_inv_doc_type_code.len = 0;
ar_pat_inv_doc_num.len = 0;

ar_pat_rowid.len                  = 0;

ar_pat_amount                     = 0;
ar_pat_abs_amount  =0;

   EXEC SQL FETCH AR_PATIENT_DTLS_CUR
             INTO :ar_pat_doc_type_code,
                  :ar_pat_doc_num,
                  :ar_pat_patient_id,
				  :ar_pat_inv_doc_type_code,
                  :ar_pat_inv_doc_num,
                  :ar_pat_bill_doc_type_code,
                  :ar_pat_bill_num,
                  :ar_pat_bill_date,
                  :ar_pat_amount,
                  :ar_pat_abs_amount,
                  :ar_pat_rowid;


   if (ERROR)
       err_mesg("FETCH failed on cursor AR_PATIENT_DTLS_CUR",0,"");


ar_pat_doc_type_code.arr[ar_pat_doc_type_code.len]           = '\0';
ar_pat_doc_num.arr[ar_pat_doc_num.len]                       = '\0';
ar_pat_patient_id.arr[ar_pat_patient_id.len]                 = '\0';
ar_pat_bill_doc_type_code.arr[ar_pat_bill_doc_type_code.len] = '\0';
ar_pat_bill_num.arr[ar_pat_bill_num.len]                     = '\0';
ar_pat_bill_date.arr[ar_pat_bill_date.len]                   = '\0';
ar_pat_rowid.arr[ar_pat_rowid.len]                           = '\0';
ar_pat_inv_doc_type_code.arr[ar_pat_inv_doc_type_code.len] = '\0';
ar_pat_inv_doc_num.arr[ar_pat_inv_doc_num.len]= '\0';

ar_pat_tot_amt += ar_pat_amount;
ar_pat_abs_tot_amount  += ar_pat_abs_amount;



   if (LAST_ROW)
       return (0);
   else 
       return (1);
}
 /* End of ar_patient_dtls fetch*/
/************************************************************/



validate_ar_inv_header(
            l_passed_doc_type_code, 
            l_passed_doc_num,
            l_passed_org_doc_type_code, 
            l_passed_org_doc_num,
            l_passed_cust_code,
            l_ar_ihdr_doc_date,
            l_ar_ihdr_due_date,
            l_ar_ihdr_settlement_date,
            l_ar_ihdr_settlement_perc,
            l_ar_ihdr_doc_amt,
            l_ar_ihdr_doc_amt_len,
            l_ar_ihdr_gross_amt,
            l_ar_ihdr_gross_amt_len,
            l_ar_ihdr_payable_amt,
            l_ar_ihdr_payable_amt_len,
            l_ar_ihdr_discount_amt,
            l_ar_ihdr_bill_date,
            l_ar_ihdr_doctor_fee_amt,
            l_passed_pmnt_terms_code,
            l_ar_ihdr_bill_num_len,
            l_bl_instal_flag,
            l_mp_instal_flag,
            l_cus_pat_flag,
            l_passed_bill_doc_type_code,
            l_passed_billing_group,
            l_passed_patient_id,
            l_ar_ihdr_base_date,
            l_trn_type,             /* C -> Credit note D -> Debit note    */
                                    /* A -> Adjustments                    */
            l_adj_type,              /* C -> Credit      D -> Debit         */
			l_passed_consolidated_yn,
			l_passed_facility_id      /*Added by madhusudhan for GDOH-CRF-0107*/
	
)
char        l_passed_doc_type_code        [ ], 
            l_passed_doc_num              [ ],
            l_passed_org_doc_type_code    [ ], 
            l_passed_org_doc_num          [ ],
            l_passed_cust_code            [ ],
            l_ar_ihdr_doc_date            [ ],
            l_ar_ihdr_due_date            [ ],
            l_ar_ihdr_settlement_date     [ ],
            l_ar_ihdr_settlement_perc     [ ],
            l_ar_ihdr_bill_date           [ ],
            l_passed_pmnt_terms_code      [ ],
            l_bl_instal_flag              [ ],
            l_mp_instal_flag              [ ],
            l_cus_pat_flag                [ ],
            l_passed_bill_doc_type_code   [ ],
            l_passed_billing_group        [ ],
            l_passed_patient_id           [ ],
            l_ar_ihdr_base_date           [ ],
            l_trn_type,
            l_adj_type,
			l_passed_consolidated_yn[],
			l_passed_facility_id           [ ];

int         l_ar_ihdr_doc_amt_len,
            l_ar_ihdr_gross_amt_len,
            l_ar_ihdr_payable_amt_len,
            l_ar_ihdr_bill_num_len;

double      l_ar_ihdr_gross_amt,
            l_ar_ihdr_payable_amt,
            l_ar_ihdr_discount_amt,
            l_ar_ihdr_doctor_fee_amt,
            l_ar_ihdr_doc_amt;
{
   char chk1_arr[30],chk2_arr[30];

#ifdef DEBUG
   printf("Inside Val ar inv hdr\n");
   printf("doc type is <%s>\n",l_passed_doc_type_code);
   printf("doc num  is <%s>\n",l_passed_doc_num);
   printf("o doc type is <%s>\n",l_passed_org_doc_type_code);
   printf("o doc num  is <%s>\n",l_passed_org_doc_num);
   printf("pat flg is <%s>\n",l_cus_pat_flag);
   printf("trn typ is <%c>\n",l_trn_type);
   printf("adj typ is <%c>\n",l_adj_type);
#endif
  
     strcpy(l_ar_ihdr_doc_type_code.arr,  l_passed_doc_type_code);
     strcpy(l_ar_ihdr_doc_num.arr,        l_passed_doc_num);
     strcpy(l_ar_ihdr_org_doc_type_code.arr,  l_passed_org_doc_type_code);
     strcpy(l_ar_ihdr_org_doc_num.arr,        l_passed_org_doc_num);
     strcpy(l_ar_ihdr_cust_code.arr,      l_passed_cust_code);
     strcpy(l_ar_ihdr_bill_doc_type_code.arr,l_passed_bill_doc_type_code);
     strcpy(l_ar_ihdr_pmnt_terms_code.arr,l_passed_pmnt_terms_code);
     strcpy(l_ar_ihdr_billing_group.arr,  l_passed_billing_group);
	 strcpy(l_facility_id.arr , l_passed_facility_id); 
     strcpy(l_ar_ihdr_patient_id.arr,      l_passed_patient_id);
	 strcpy(l_consolidated_yn.arr , l_passed_consolidated_yn),
	 

     l_ar_ihdr_doc_type_code.len      = strlen(l_ar_ihdr_doc_type_code.arr);
     l_ar_ihdr_doc_num.len            = strlen(l_ar_ihdr_doc_num.arr);
     l_ar_ihdr_org_doc_type_code.len  = strlen(l_ar_ihdr_org_doc_type_code.arr);
     l_ar_ihdr_org_doc_num.len        = strlen(l_ar_ihdr_org_doc_num.arr);
     l_ar_ihdr_cust_code.len          = strlen(l_ar_ihdr_cust_code.arr);
     l_ar_ihdr_bill_doc_type_code.len = strlen(l_ar_ihdr_bill_doc_type_code.arr);
     l_ar_ihdr_pmnt_terms_code.len    = strlen(l_ar_ihdr_pmnt_terms_code.arr);
     l_ar_ihdr_billing_group.len      = strlen(l_ar_ihdr_billing_group.arr);
     l_ar_ihdr_patient_id.len         = strlen(l_ar_ihdr_patient_id.arr);
	 l_consolidated_yn.len       = strlen(l_consolidated_yn.arr);
	 l_facility_id.len       = strlen(l_facility_id.arr);
     
#ifdef DEBUG
   printf("Inside validate dn inv header\n");
   printf("DOC_TYPE_CODE is <%s> - <%d>\n",l_ar_ihdr_doc_type_code.arr,
                 l_ar_ihdr_doc_type_code.len);
   printf("DOC_NUM       is <%s> - <%d>\n",l_ar_ihdr_doc_num.arr,
                 l_ar_ihdr_doc_num.len);
#endif

   if (l_trn_type == 'A')
   {
      strcpy(l_ar_hdr_cust_code.arr, l_ar_ihdr_cust_code.arr);
      l_ar_hdr_cust_code.len     = strlen(l_ar_hdr_cust_code.arr);

      ar_cust_check(l_passed_cust_code,l_cus_pat_flag,"9998");
   }

   if (l_ar_ihdr_doc_amt_len == 0)
          error_insert_null("9998","SY1470","Field = AMOUNT");

   if ((strcmp(l_ar_ihdr_doc_type_code.arr,l_ar_ihdr_org_doc_type_code.arr)==0)  &&
       (strcmp(l_ar_ihdr_doc_num.arr,l_ar_ihdr_org_doc_num.arr) == 0))
   {

    if (l_adj_type == 'D')
    {
        /****   AR_PMNT_TERMS  Validation   *****/

        if (l_ar_ihdr_pmnt_terms_code.len == 0)
            error_insert_null("9998","SY1470","Field = PAY TERMS");
        else
        {
            EXEC SQL OPEN AR_PMNT_TERMS_CUR;

            if (ERROR)
                err_mesg("OPEN failed on cursor AR_PMNT_TERMS_CUR",0,"");

            l_pmnt_terms_status.arr[0] = '\0';
            l_pmnt_terms_status.len    = 0;

            EXEC SQL FETCH AR_PMNT_TERMS_CUR
                      INTO :l_pmnt_terms_status;

            l_pmnt_terms_status.arr[l_pmnt_terms_status.len] = '\0';

            if (ERROR)
                 err_mesg("FETCH failed on cursor AR_PMNT_TERMS_CUR",0,"");

            if (NOT_FOUND)
                 error_insert("9998","AR1240");
            else
               if (l_pmnt_terms_status.arr[0] == 'S')
                    error_insert("9998","AR1250");
          }

      if (atol(l_ar_ihdr_base_date) <  atol(l_ar_ihdr_doc_date))
                  error_insert("9998","AR1090");

      if (atol(l_ar_ihdr_due_date) <  atol(l_ar_ihdr_base_date))
                  error_insert("9998","AR1100");

      if (strlen(l_ar_ihdr_settlement_date) != 0)
      {
          if (atol(l_ar_ihdr_settlement_date) < atol(l_ar_ihdr_base_date) ||
              atol(l_ar_ihdr_settlement_date) > atol(l_ar_ihdr_due_date))
                  error_insert("9998","AR1110");

          if (strlen(l_ar_ihdr_settlement_perc) == 0)
                  error_insert("9998","AR1130");
      }
      else if (strlen(l_ar_ihdr_settlement_perc) != 0)
              error_insert("9998","AR1120");
       
      if (l_ar_ihdr_gross_amt <= 0)
                error_insert("9998","AR1140");

      if (l_ar_ihdr_payable_amt > l_ar_ihdr_gross_amt)
                error_insert("9998","AR1150");
  
      sprintf(chk1_arr,"%15.3f",l_ar_ihdr_discount_amt);
      sprintf(chk2_arr,"%15.3f",l_ar_ihdr_gross_amt - 
                                l_ar_ihdr_payable_amt);

      if (strcmp(chk1_arr,chk2_arr))
             error_insert("9998","AR1160");

      if (strlen(l_ar_ihdr_base_date) == 0)
            error_insert_null("9998","SY1470","Field = BASE DATE");
      if (strlen(l_ar_ihdr_due_date) == 0)
             error_insert_null("9998","SY1470","Field = DUE DATE");
      if (l_ar_ihdr_gross_amt_len == 0)
             error_insert_null("9998","SY1470","Field = GROSS AMT");
      if (l_ar_ihdr_payable_amt_len == 0)
             error_insert_null("9998","SY1470","Field = PAYABLE AMT");
     }
         /* End of  (l_adj_type == 'D') check  */

     if (l_cus_pat_flag[0] == 'Y')
     {
          if (atol(l_ar_ihdr_bill_date) > atol(l_ar_ihdr_doc_date))
                  error_insert("9998","AR1170");

          if (l_ar_ihdr_doctor_fee_amt != 0.00)
          {
                if (l_adj_type == 'D')
                {
                   if (l_ar_ihdr_doctor_fee_amt > l_ar_ihdr_payable_amt)
                          error_insert("9998","AR1180");
  
                 }
                 else if (l_ar_ihdr_doctor_fee_amt > l_ar_ihdr_doc_amt)
                               error_insert("9998","AR1180");
          }
						
          if (l_ar_ihdr_bill_num_len == 0)
               error_insert_null("9998","SY1470","Field = BILL NUM");
          if (strlen(l_ar_ihdr_bill_date) == 0)
               error_insert_null("9998","SY1470","Field = BILL DATE");
          if (l_ar_ihdr_bill_doc_type_code.len == 0)
               error_insert_null("9998","SY1470","Field = BILL DOC TYPE");
          else
          {
              strcpy(l_ar_chk_doc_type_code.arr,
                         l_ar_ihdr_bill_doc_type_code.arr);
              l_ar_chk_doc_type_code.len  = 
                         strlen(l_ar_chk_doc_type_code.arr);

              EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;
 
             if (ERROR)
              err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

              l_ar_acc_status.arr[0]     = '\0';
              l_ar_acc_valid_flag.arr[0] = '\0';
              l_sy_doc_print_flag.arr[0]   = '\0';

              l_ar_acc_valid_flag.len = 0;
              l_ar_acc_status.len     = 0;
              l_sy_doc_print_flag.len   = 0;

              EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
                        INTO :l_ar_acc_status,
                             :l_ar_acc_valid_flag,
                             :l_sy_doc_print_flag;
   
              if (ERROR)
                   err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 

              l_ar_acc_status.arr[l_ar_acc_status.len]         = '\0';
              l_ar_acc_valid_flag.arr[l_ar_acc_valid_flag.len] = '\0';
              l_sy_doc_print_flag.arr[l_sy_doc_print_flag.len]     = '\0';
   
              if (NOT_FOUND)
                    error_insert_null("9998","SY1610","(BILL DOC TYPE)");
              else
              {
                 if (l_ar_acc_status.arr[0] == 'S')
                       error_insert_null("9998","SY1640","(BILL DOC TYPE)");

              } 

              EXEC SQL OPEN SY_DOC_TYPE_MAST_CUR;

              if (ERROR)
                  err_mesg("OPEN failed on cursor SY_DOC_TYPE_MAST_CUR",0,""); 

              l_mast_status.arr[0] = '\0';
              l_mast_status.len    = 0;

              EXEC SQL FETCH SY_DOC_TYPE_MAST_CUR
                        INTO :l_mast_status;
 
              if (ERROR)
                  err_mesg("FETCH failed on cursor SY_DOC_TYPE_MAST_CUR",0,""); 

              l_mast_status.arr[l_mast_status.len] = '\0';
   
              if (NOT_FOUND)
                   error_insert_null("9998","SY1610","(BILL DOC TYPE)");
              else if (l_mast_status.arr[0] == 'S')
                   error_insert_null("9998","SY2190","(BILL DOC TYPE)");
          }

          if (l_ar_ihdr_patient_id.len == 0)
               error_insert_null("9998","SY1470","Field = PATIENT NO");

   /****   PATIENT_MAST & BL_BLNG_GRP Validation    *****/

          if (l_bl_instal_flag[0] == 'Y')
          {
              l_bl_blng_grp_status.arr[0] = '\0';
              l_bl_blng_grp_status.len    = 0;

              EXEC SQL OPEN BL_BLNG_GRP_CUR;
 
              if (ERROR)
                  err_mesg("OPEN failed on cursor BL_BLNG_GRP_CUR",0,"");

              EXEC SQL FETCH BL_BLNG_GRP_CUR
                        INTO :l_bl_blng_grp_status;

              l_bl_blng_grp_status.arr[l_bl_blng_grp_status.len] = '\0';

              if (ERROR)
                  err_mesg("FETCH failed on cursor BL_BLNG_GRP_CUR",0,"");

              if (NOT_FOUND)
                 error_insert("9998","SY0110");
              else if (l_bl_blng_grp_status.arr[0] == 'S')
                 error_insert("9998","BL0026");

           }
           /*
           if (l_mp_instal_flag[0] == 'Y')
           {
#ifdef DEBUG
   printf("patient id is <%s> - <%d>\n",l_ar_ihdr_patient_id.arr,l_ar_ihdr_patient_id.len);
#endif
               EXEC SQL OPEN MP_PATIENT_MAST_CUR;

               if (ERROR)
                   err_mesg("OPEN failed on cursor MP_PATIENT_MAST_CUR",0,"");

               EXEC SQL FETCH MP_PATIENT_MAST_CUR
                         INTO :l_dummy;

               if (ERROR)
                    err_mesg("FETCH failed on cursor MP_PATIENT_MAST_CUR",0,"");

#ifdef DEBUG
   printf("No of records found in patient mast is <%d>\n",sqlca.sqlerrd[2]);
#endif
               if (NOT_FOUND)
                  error_insert("9998","SY2021");
 
         }
         */

      } /***** If ends Patient check  */
   }     /*****  If ends for Unalloc check  *****/
   else
   {
      d_ar_pending_amt = 0;

      EXEC SQL OPEN AR_PENDING_DOC_CUR;
  
      if (ERROR)
         err_mesg("OPEN failed on cursor AR_PENDING_DOC_CUR",0,"");

      EXEC SQL FETCH AR_PENDING_DOC_CUR
                INTO :d_ar_pending_amt;
      
      if (ERROR)
         err_mesg("FETCH failed on cursor AR_PENDING_DOC_CUR",0,"");

      if (NOT_FOUND)
             error_insert("9998","AR1810");
      else 
	  {

         if (l_adj_type == 'C')
         {
            if (l_ar_ihdr_doc_amt > d_ar_pending_amt && d_ar_pending_amt > 0)
                  error_insert("9998","AR1840");
         }
         else if (l_adj_type == 'D')
         {
            if (l_ar_ihdr_doc_amt > abs(d_ar_pending_amt) &&
                            d_ar_pending_amt < 0)
                  error_insert("9998","AR1840");
         }
      }

     /************************************************************/

 	 if (strcmp(l_consolidated_yn.arr , "Y") == 0) 
	{

            EXEC SQL OPEN AR_PATIENT_DTLS_CUR;

			 while(fetch_patient_dtls())
			 {
		            pending_amt = 0;

                    EXEC SQL SELECT PEND_AMOUNT
					into  :pending_amt
					from   AR_PATIENT_DTLS
					WHERE  OPERATING_FACILITY_ID =:l_facility_id
					AND    DOC_TYPE_CODE = :ar_pat_inv_doc_type_code
					AND    DOC_NUM       = :ar_pat_inv_doc_num
					AND    BILL_DOC_TYPE_CODE = :ar_pat_bill_doc_type_code
					AND    BILL_NUM = :ar_pat_bill_num;


						
				if (ERROR)
					err_mesg("SELECT  failed on   AR_PATIENT_DTLS",0,"");

				if (NOT_FOUND)
					error_insert_null("   0","SY1470","Field = AR PAT DTLS");

              if (l_adj_type == 'C')
              {
                 if (  ar_pat_abs_amount > pending_amt )
			     {
                     error_insert("   0","AR2393");
                  }
			   }
		 
			}

    		 if (doubcmp(ar_pat_abs_tot_amount,l_ar_ihdr_doc_amt) != 0) 
                    error_insert_null("   0","AR2180","Mismatch with Line Amt and Bill Amt");

	  }


     

	 /**************************************************************/

    }
#ifdef DEBUG
   printf("after validate dn inv header\n");
#endif
}   /* end of validate dn inv header*/





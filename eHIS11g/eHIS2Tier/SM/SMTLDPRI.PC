/*****************************************************************************************
*
*	Name			SMTLDPRI.PC
*
*	Author			K S Sundar
*
*	Purpose			To load the printers information into
*					SY_PRINT_DRIVERS table.
*
*   ===============================================================
*	Input Parameters							Mandatory/Optional
*   ===============================================================
*	1. DB Connect String (User/Password@DBName)	M
*	2. Workstation Id							M
*	3. SessionID								M
*	4. DateTime	 								M
*	5. Printer Type								M
*      (Local/Shared/Installed/Remote/All)
*	   Note: Installed = Local + Shared
*
*	Agrument separator is space
*
*   ====================
*	Modification History  
*   ===============================================================
*	Date		Person		Remarks
*   ===============================================================
*	Sep 19,2002	K S Sundar	Created.
*
*	Apr 24,2003	K S Sundar	1. Debug.H and DebugProc.H removed
*							2. Debug.C added
*							3. New Debug.H added
*							4. Calls related to debug renamed as Trace
*							5. Reference to WORKING_DIR removed as it is not being used.
*
*	Apr 26,2003	K S Sundar	1. get_output_directory procedure is removed as
*							   no log file is getting created.
*
*	Oct 7,2003	K S Sundar	1. FileStat values spooled to tracing log.
*							2. Printer Driver is not required anymore.
*							   Hence, all the references to prniter driver is removed.
*****************************************************************************************/

# include <windows.h>
# include <winspool.h>
# include <malloc.h>
# include <assert.h>
# include <stdio.h>
# include <stdlib.h>
# include <conio.h>
#include <ctype.h>
#include <time.h>
#include <sys/types.h>
#include <sys/stat.h>
# include <debug.h>

# if defined (WIN32)
	#define IS_WIN32 TRUE
# else
	#define IS_WIN32 FALSE
# endif

# define IS_NT		IS_WIN32 && (BOOL) (GetVersion() < 0x80000000)
# define IS_WIN32S	IS_WIN32 && (BOOL) (!(IS_NT) && (LOBYTE(LOWORD(GetVersion())) < 4 ))
# define IS_WIN95	(BOOL) (!(IS_NT) && !(IS_WIN32S)) && IS_WIN32


EXEC SQL BEGIN DECLARE SECTION;
	varchar  bv_uid_pwd[132];
	varchar  bv_session_id[20];
	varchar  bv_session_datetime[15];
	varchar  bv_printer_type[4];

	varchar  bv_printer_name[64];
	varchar  bv_routed_printer_name[64];
	varchar  bv_routed_queue_name[64];
	varchar  bv_port_name[64];

	varchar  l_workstation_id[31],
		   l_user_id[31],
		   l_error_text[501];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

/*
*	global decalrations;
*/

DWORD				gv_dwSizeNeeded;		// Used in EnumPrinters().
DWORD				gv_dwNumItems;			// Used in EnumPrinters().
DWORD				gv_dwItem;				// Used in EnumPrinters().
LPPRINTER_INFO_2	gv_lpInfo_2 = NULL;		// Used in EnumPrinters().


int  LoadPrintersInfo(void);			// Load printers info
int  LoadLocalPrintersInfo(void);	// Load local printers info
int  LoadSharedPrintersInfo(void);	// Load shared printers info
int  LoadRemotePrintersInfo(void);	// Load remote printers info
int  LoadIntoMEDICOM(void);					// Load into MEDICOM

/*
* WinMain
*/
int WINAPI WinMain(HINSTANCE  hInstance,HINSTANCE  hPrevInstance,LPSTR  lpCmdLine, int  nShowCmd)
{
	/*
	* Declare local variables.
	*/
	char LVFunctionName[64];
	char sep[3]=" ";
	char *lv_uid_pwd, *lv_session_id, *lv_session_datetime, *lv_printer_type;
	char *lv_ws_no;

	int  v_ret_flag;

	char tmpbuf[500];
	struct _stat LVFileStat;
	int LVResult;
	char *LVStrBuf;


	/*
	* Initialize variables.
	*/
	bv_uid_pwd.arr[0] = '\0';
	bv_uid_pwd.len =0;
	bv_session_id.arr[0] = '\0';
	bv_session_id.len =0;
	bv_session_datetime.arr[0] = '\0';
	bv_session_datetime.len =0;
	bv_printer_type.arr[0] = '\0';
	bv_printer_type.len =0;

	/*
	* Read command line parameters.
	*/
	lv_uid_pwd=strtok(lpCmdLine,sep);
	lv_ws_no=strtok(NULL,sep);
	lv_session_id=strtok(NULL,sep);
	lv_session_datetime=strtok(NULL,sep);
	lv_printer_type=strtok(NULL,sep);

	if (lv_uid_pwd == NULL || lv_ws_no==NULL || lv_session_id==NULL || lv_session_datetime==NULL || lv_printer_type==NULL)
	{
		MessageBox(NULL,"Usage filename uid/pwd sessionid datetime printer_type","MEDICOM: Loading Printer Information",MB_OK );
		exit(0);
	}

	strcpy(bv_uid_pwd.arr,lv_uid_pwd);
	bv_uid_pwd.len = strlen(bv_uid_pwd.arr);

	strcpy(l_workstation_id.arr,lv_ws_no);
	l_workstation_id.len = strlen(l_workstation_id.arr);
	l_workstation_id.arr[l_workstation_id.len]='\0';

	strcpy(bv_session_id.arr,lv_session_id);
	bv_session_id.len = strlen(bv_session_id.arr);
	strcpy(bv_session_datetime.arr,lv_session_datetime);
	bv_session_datetime.len = strlen(bv_session_datetime.arr);
	strcpy(bv_printer_type.arr,lv_printer_type);
	bv_printer_type.len = strlen(bv_printer_type.arr);

	if	(
			(strcmp(bv_printer_type.arr,"L") != 0) &&	// Local Printers
			(strcmp(bv_printer_type.arr,"S") != 0) &&	// Shared Printers
			(strcmp(bv_printer_type.arr,"I") != 0) &&	// Installed (Local + Shared) Printers
			(strcmp(bv_printer_type.arr,"R") != 0) &&	// Remote Printers
			(strcmp(bv_printer_type.arr,"A") != 0)		// All Printers
		)
	{
		MessageBox(NULL,"Invalid printer type. Valid values are (L)ocal (S)hared (R)emote and (A)ll","MEDICOM: Loading Printer Information",MB_OK | MB_ICONINFORMATION);
		exit(0);

	}

	/*
	* Create Window
	*/
	wndclass.style			= CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc    = NULL;
	wndclass.cbClsExtra		= 0;
	wndclass.cbWndExtra		= 0;
	wndclass.hInstance		= hInstance;
	wndclass.hIcon			= LoadIcon ( NULL, IDI_APPLICATION );
	wndclass.hCursor		= LoadCursor ( NULL, IDC_ARROW);
	wndclass.hbrBackground	= GetStockObject (WHITE_BRUSH);
	wndclass.lpszMenuName	= NULL;
	wndclass.lpszClassName	= "Drivers";
	RegisterClass ( &wndclass );

	hwnd = CreateWindow("Read Printer Details",(LPSTR)NULL,
                         WS_POPUP | WS_DLGFRAME,170,190,300,100,
                         (HWND)NULL,(HMENU)NULL,(HANDLE)hInstance,
						 (LPSTR) lpCmdLine);


	strcpy(GVProgramID, "SMTLDPRI");	

	/*
	* Connect to database
	*/
	EXEC SQL CONNECT :bv_uid_pwd;
	if(OERROR)
	{
		MessageBox(hwnd,"Unable to connect to oracle.","Error",MB_OK|MB_ICONSTOP);
		exit(0);
	}

	/*
	* Enable or disable tracing.
	*/
	EnableOrDisableTracing();

	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "WinMain");
		Trace(LVFunctionName,"Begin");

		LVResult = _stat(_pgmptr, &LVFileStat);
		if (LVResult == 0)
		{	
			LVStrBuf = strtok(ctime( &LVFileStat.st_mtime ),"\n");	
			sprintf(GVTraceMsg,"File Name=[%Fs]  TimeStamp=[%s]  Size=[%ld Bytes]", _pgmptr, LVStrBuf , LVFileStat.st_size );
			Trace(LVFunctionName,GVTraceMsg);
		}


		sprintf(GVTraceMsg,"uid_pwd=[%s]    sessionid=[%s]    datetime=[%s]    printertype=[%s]",bv_uid_pwd.arr, bv_session_id.arr, bv_session_datetime.arr, bv_printer_type.arr);
		Trace(LVFunctionName,GVTraceMsg);
	}

	/*	
	* Following code for setting meduser role is added by C. Ganesan on 26/10/2002 at 19:00
	*
	*/
	set_meduser_role();

	v_ret_flag = LoadPrintersInfo();			
	if (v_ret_flag)
	{	
		if (IS_TRACING) Trace(LVFunctionName,"End");
		EXEC SQL COMMIT WORK RELEASE;
	}

	/*
	* Terminate the program
	*/

	return 1;
} /* Winmain */


/*
* Function		LoadPrintersInfo
* Author		K S Sundar
* Purpose		To load printer information
*/
int LoadPrintersInfo()
{
	char LVFunctionName[64];

	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "LoadPrintersInfo()");
		Trace(LVFunctionName,"Begin");
	}
	
	/* Delete records from SY_PRINT_DRVIERS, if any. */
	if (IS_TRACING) Trace(LVFunctionName,"Delete from SY_PRINT_DRIVERS");
	EXEC SQL
	DELETE sy_print_drivers
	WHERE  session_id = :bv_session_id
	AND    add_date_time = :bv_session_datetime;
	if (OERROR)
	{
		sprintf(GVTraceMsg,"Delete from SY_PRINT_DRVIERS failed. : %s",sqlca.sqlerrm.sqlerrmc);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		return 0;
	}

	if (strcmp(bv_printer_type.arr,"L") == 0)
	{
		LoadLocalPrintersInfo();
	}
	else if (strcmp(bv_printer_type.arr,"S") == 0)
	{
		LoadSharedPrintersInfo();
	}
	else if (strcmp(bv_printer_type.arr,"I") == 0)
	{
		LoadLocalPrintersInfo();
		LoadSharedPrintersInfo();
	}
	else if (strcmp(bv_printer_type.arr,"R") == 0)
	{
		LoadRemotePrintersInfo();
	}
	else
	{
		LoadLocalPrintersInfo();
		LoadSharedPrintersInfo();
		LoadRemotePrintersInfo();
	}

	if (IS_TRACING) Trace(LVFunctionName,"End");

	return 1;

} //LoadPrintersInfo


/*
* Function		LoadLocalPrintersInfo
* Author		K S Sundar
* Purpose		To check or load local printers information
*/
int LoadLocalPrintersInfo()
{
	char LVFunctionName[64];

	/*
	*  Spool debug log
	*/
	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "LoadLocalPrintersInfo()");
		Trace(LVFunctionName,"Begin");
	}

	/* Get buffer size */
	if (IS_TRACING) Trace(LVFunctionName,"Get buffer size");
	EnumPrinters 
	( 
		PRINTER_ENUM_LOCAL, 
		NULL, 
		2, 
		NULL, 
		0, 
		&gv_dwSizeNeeded, 
		&gv_dwNumItems 
	);

	/* Allocate memory */
	if (IS_TRACING) Trace(LVFunctionName,"Allocate memory ");
	gv_lpInfo_2 = (LPPRINTER_INFO_2)HeapAlloc ( GetProcessHeap (), HEAP_ZERO_MEMORY, gv_dwSizeNeeded );
	if ( gv_lpInfo_2 == NULL )
	{
		if (IS_TRACING) Trace(LVFunctionName,"Not Enough Memory");
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
		
	}


	/* Enumerate printers */
	if (IS_TRACING) Trace(LVFunctionName,"Enumerate printers ");
	if (EnumPrinters 
		( 
			PRINTER_ENUM_LOCAL,		// what to enumerate
			NULL,					// printer name (NULL for all)
			2,						// level
			(LPBYTE)gv_lpInfo_2,			// buffer
			gv_dwSizeNeeded,			// size of buffer
			&gv_dwSizeNeeded,			// returns size
			&gv_dwNumItems				// return num. items
		) == 0 
	   )
	{
		GetLastErrorMessage();
		sprintf (GVTraceMsg, "EnumPrinters() Failed with error: %s", GVLastErrorMessage);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
	}

	/* Check or Load printers information */
	if (IS_TRACING) Trace(LVFunctionName,"Load printers information");
	for ( gv_dwItem = 0; gv_dwItem < gv_dwNumItems; gv_dwItem++ )
	{
		if (IS_TRACING) 
		{
			sprintf(GVTraceMsg,"PrinterName=[%s] Serverame=[%s] PortName=[%s] ShareName=[%s] Location=[%s]", 
				gv_lpInfo_2[gv_dwItem].pPrinterName, gv_lpInfo_2[gv_dwItem].pServerName, gv_lpInfo_2[gv_dwItem].pPortName, gv_lpInfo_2[gv_dwItem].pShareName, gv_lpInfo_2[gv_dwItem].pLocation);
			Trace(LVFunctionName,GVTraceMsg);
		}

		bv_printer_name.arr[0] = '\0';
		bv_printer_name.len =0;
		bv_port_name.arr[0] = '\0';
		bv_port_name.len =0;

		strcpy(bv_printer_name.arr,gv_lpInfo_2[gv_dwItem].pPrinterName);
		bv_printer_name.len = strlen(bv_printer_name.arr);
		strcpy(bv_port_name.arr,gv_lpInfo_2[gv_dwItem].pPortName);
		bv_port_name.len = strlen(bv_port_name.arr);

	
		if (!LoadIntoMEDICOM())
		{
			if (IS_TRACING) Trace(LVFunctionName,"End");
			return 0;
		}

	}

	/* Free memory */
	HeapFree ( GetProcessHeap (), 0, gv_lpInfo_2 );

	
	if (IS_TRACING) Trace(LVFunctionName,"End");
	return 1;
} //LoadLocalPrintersInfo


/*
* Function		LoadSharedPrintersInfo
* Author		K S Sundar
* Purpose		To load shared printers information
*/
int LoadSharedPrintersInfo()
{
	char LVFunctionName[64];
	char *lv_tmpstr;
	char tmpbuf[500];

	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "LoadSharedPrintersInfo()");
		Trace(LVFunctionName,"Begin");
	}

	/* Get buffer size */
	if (IS_TRACING) Trace(LVFunctionName,"get buffer size");
	EnumPrinters 
	( 
		PRINTER_ENUM_CONNECTIONS, 
		NULL, 
		2, 
		NULL, 
		0, 
		&gv_dwSizeNeeded, 
		&gv_dwNumItems 
	);

	/* Allocate memory */
	if (IS_TRACING) Trace(LVFunctionName,"Allocate memory ");
	gv_lpInfo_2 = (LPPRINTER_INFO_2)HeapAlloc ( GetProcessHeap (), HEAP_ZERO_MEMORY, gv_dwSizeNeeded );
	if ( gv_lpInfo_2 == NULL )
	{
		if (IS_TRACING) Trace(LVFunctionName,"Not Enough Memory");
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
		
	}

	/* Enumerate printers */
	if (IS_TRACING) Trace(LVFunctionName,"Enumerate printers ");
	if (EnumPrinters 
		( 
			PRINTER_ENUM_CONNECTIONS,		// what to enumerate
			NULL,					// printer name (NULL for all)
			2,						// level
			(LPBYTE)gv_lpInfo_2,			// buffer
			gv_dwSizeNeeded,			// size of buffer
			&gv_dwSizeNeeded,			// returns size
			&gv_dwNumItems				// return num. items
		) == 0 
	   )
	{
		GetLastErrorMessage();
		sprintf (GVTraceMsg, "EnumPrinters() Failed with error: %s", GVLastErrorMessage);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
	}

	/* Load printers information */
	if (IS_TRACING) Trace(LVFunctionName,"Load printers information");
	for ( gv_dwItem = 0; gv_dwItem < gv_dwNumItems; gv_dwItem++ )
	{
		if (IS_TRACING) 
		{
			sprintf(GVTraceMsg,"PrinterName=[%s] Serverame=[%s] PortName=[%s] ShareName=[%s] Location=[%s]", 
			gv_lpInfo_2[gv_dwItem].pPrinterName, gv_lpInfo_2[gv_dwItem].pServerName, gv_lpInfo_2[gv_dwItem].pPortName, gv_lpInfo_2[gv_dwItem].pShareName, gv_lpInfo_2[gv_dwItem].pLocation);
			Trace(LVFunctionName,GVTraceMsg);
		}

		bv_printer_name.arr[0] = '\0';
		bv_printer_name.len =0;
		bv_port_name.arr[0] = '\0';
		bv_port_name.len =0;

		//strcpy(bv_printer_name.arr,gv_lpInfo_2[gv_dwItem].pShareName ||' on '|| strstr(gv_lpInfo_2[gv_dwItem].pServerName ,3,strlen(gv_lpInfo_2[gv_dwItem].pServerName)-2));
		

/*
		sprintf (tmpbuf, "Printer Name: %s", gv_lpInfo_2[gv_dwItem].pPrinterName);
   		MessageBox ( hwnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
*/

		
		if ( strncmp (gv_lpInfo_2[gv_dwItem].pPortName, "LPT", 3) ) 
		{
			strcpy(bv_port_name.arr,gv_lpInfo_2[gv_dwItem].pPrinterName);
			bv_port_name.len = strlen(bv_port_name.arr);
		}
		else
		{
			/*
			 * Check whether the printer is shared printer or local printer
			 * by checking the servername
			 *
			 */

			if ( gv_lpInfo_2[gv_dwItem].pServerName == NULL )
			{
				strcpy(bv_port_name.arr,gv_lpInfo_2[gv_dwItem].pPortName);
				bv_port_name.len = strlen(bv_port_name.arr);
			}
			else
			{
				strcpy(bv_port_name.arr,gv_lpInfo_2[gv_dwItem].pServerName);
				strcat(bv_port_name.arr,"\\");
				strcat(bv_port_name.arr,gv_lpInfo_2[gv_dwItem].pShareName);
				bv_port_name.len = strlen(bv_port_name.arr);
			}

		}

		/*
		* K S Sundar on Oct 7, 2003
		* Printer name is always Driver name On Server Name.
		*/
		lv_tmpstr=strtok(gv_lpInfo_2[gv_dwItem].pPrinterName,"\\");
		sprintf(GVTraceMsg, "%s on %s",gv_lpInfo_2[gv_dwItem].pDriverName , lv_tmpstr);
		strcpy(bv_printer_name.arr,GVTraceMsg);
		bv_printer_name.len = strlen(bv_printer_name.arr);


		if (!LoadIntoMEDICOM())
		{
			if (IS_TRACING) Trace(LVFunctionName,"End");
			return 0;
		}

	}


	/* Free memory */
	HeapFree ( GetProcessHeap (), 0, gv_lpInfo_2 );
	

	
	if (IS_TRACING) Trace(LVFunctionName,"End");
	return 1;
} //LoadSharedPrintersInfo


/*
* Function		LoadRemotePrintersInfo
* Author		K S Sundar
* Purpose		To load remote printers information
*/
int LoadRemotePrintersInfo()
{
	LPPRINTER_INFO_1	lpInfo_1 = NULL;		// Used in EnumPrinters().
	char LVFunctionName[64];
	char v_sep[3] = ",";
	char *v_printer_description;
	char *v_driver_name;

	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "LoadRemotePrintersInfo()");
		Trace(LVFunctionName,"Begin");
	}


	/* Get buffer size */
	if (IS_TRACING) Trace(LVFunctionName,"get buffer size");
	EnumPrinters 
	( 
		PRINTER_ENUM_REMOTE, 
		//PRINTER_ENUM_NETWORK, 
		NULL, 
		1, 
		NULL, 
		0, 
		&gv_dwSizeNeeded, 
		&gv_dwNumItems 
	);

	/* Allocate memory */
	if (IS_TRACING) Trace(LVFunctionName,"Allocate memory ");
	lpInfo_1 = (LPPRINTER_INFO_1)HeapAlloc ( GetProcessHeap (), HEAP_ZERO_MEMORY, gv_dwSizeNeeded );
	if ( lpInfo_1 == NULL )
	{
		if (IS_TRACING) Trace(LVFunctionName,"Not enough memory");
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
		
	}

	/* Enumerate printers */
	if (IS_TRACING) Trace(LVFunctionName,"Enumerate printers ");
	if (EnumPrinters 
		( 
			PRINTER_ENUM_REMOTE,		// what to enumerate
			//PRINTER_ENUM_NETWORK, 
			NULL,					// printer name (NULL for all)
			1,						// level
			(LPBYTE)lpInfo_1,			// buffer
			gv_dwSizeNeeded,			// size of buffer
			&gv_dwSizeNeeded,			// returns size
			&gv_dwNumItems				// return num. items
		) == 0 
	   )
	{
		GetLastErrorMessage();
		sprintf (GVTraceMsg, "EnumPrinters() Failed with error: %s", GVLastErrorMessage);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
	}

	/* Load printers information */
	if (IS_TRACING) Trace(LVFunctionName,"Load printers information");
	for ( gv_dwItem = 0; gv_dwItem < gv_dwNumItems; gv_dwItem++ )
	{
		v_printer_description = strtok(lpInfo_1[gv_dwItem].pDescription,v_sep);
		v_driver_name = strtok(NULL,v_sep);

		if (IS_TRACING) 
		{
			sprintf(GVTraceMsg,"pName=[%s]    pDescription=[%s]    DriverName=[%s]    Comment=[%s]", 
				lpInfo_1[gv_dwItem].pName, lpInfo_1[gv_dwItem].pDescription, v_driver_name, lpInfo_1[gv_dwItem].pComment);
			Trace(LVFunctionName,GVTraceMsg);
		}

		/* Load into MEDICOM only if driver name is not null */
		if (v_driver_name != NULL)
		{
			bv_printer_name.arr[0] = '\0';
			bv_printer_name.len =0;
			bv_port_name.arr[0] = '\0';
			bv_port_name.len =0;


			//strcpy(lv_tmpstr,lpInfo_1[gv_dwItem].pName);
			//lv_tmpstr=strtok(lv_tmpstr.pName,"\\");
			//sprintf(GVTraceMsg, "%s on %s",lv_tmpstr, lv_tmpstr);
			//strcpy(bv_printer_name.arr,GVTraceMsg);
			strcpy(bv_printer_name.arr,lpInfo_1[gv_dwItem].pName);
			bv_printer_name.len = strlen(bv_printer_name.arr);
			
			if (!LoadIntoMEDICOM())
			{
				if (IS_TRACING) Trace(LVFunctionName,"End");
				return 0;
			}
		}

	}


	/* Free memory */
	HeapFree ( GetProcessHeap (), 0, lpInfo_1);
	


	if (IS_TRACING) Trace(LVFunctionName,"End");
	return 1;
} //LoadRemotePrintersInfo


/*
*
* Function  LoadIntoMEDICOM
* Author    K S Sundar
* Purpose   Loads printer information into MEDICOM.
*
*/
int LoadIntoMEDICOM()
{
	char LVFunctionName[64];

	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "LoadIntoMEDICOM()");
		Trace(LVFunctionName,"Begin");
	}

	/* Insert into SY_PRINT_DRIVERS */
	if (IS_TRACING) 
	{
		sprintf(GVTraceMsg, "bv_session_id=[%s] bv_session_datetime=[%s] bv_printer_name=[%s] bv_port_name=[%s]",
			bv_session_id.arr,bv_session_datetime.arr,bv_printer_name.arr,bv_port_name.arr);
		Trace(LVFunctionName,GVTraceMsg);
	}
	
	EXEC SQL 
	INSERT INTO SY_PRINT_DRIVERS
	(
		SESSION_ID, ADD_DATE_TIME,	PRINTER_NAME, DEST_PORT_NAME
	)
	VALUES
	( 
		:bv_session_id,:bv_session_datetime, :bv_printer_name,:bv_port_name
	);

	if(OERROR)
	{
		sprintf(GVTraceMsg,"Insert into SY_PRINT_DRVIERS failed. : %s",sqlca.sqlerrm.sqlerrmc);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
	}

	if (IS_TRACING) Trace(LVFunctionName,"End");
	return 1;

} // LoadIntoMEDICOM



/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
/*
-------------------------------------------------------------------------------------------------------------------------------------------
Date		            Edit History	        Name		       Rev.Date		     Rev.Name			     Description
-------------------------------------------------------------------------------------------------------------------------------------------
27/02/2014				42063			        Suresh R           27/02/2014        Suresh R     AMS-CRF-0054(Added Item Based IssueReturn)
21/04/2014				48674			        Suresh R           21/04/2014        Suresh R     Return Batch Query Changes
22/08/2017				64707					Shazana			   22/08/2017		 Shazana	  Added by Shazana for IN:065033
21/05/2019              IN:070369               B Haribabu         21/05/2019        Haribabu     ML-BRU-SCF-1948(Multi facility transaction)
05/02/2021      TFS id:6938                     B Haribabu          05/02/2021       Manickam           MMS-DM-CRF-0174.3 
15/7/2021		TFS : 21516						Shazana												MOHE-CRF-0084.1-US014
--------------------------------------------------------------------------------------------------------------------------------------------
*/
package eST; 

import java.io.Serializable;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Hashtable;
import java.text.ParseException;
import java.text.SimpleDateFormat; //Added for MOHE-CRF-0167
import eST.Acknowledgment.*;
	/**
	* @Name - Mahesh
	* @Date - 21/01/2010
	* @Inc# - IN015496
	* @Desc - Double.parseDouble is used where quantities are been used.
	*/

public class AcknowledgmentBean extends eST.Common.StTransaction implements Serializable{
	private String store_code		=	"";
	private String to_store_code	=	"";
	private String trn_type			=	"ISS";
	private String action_type		=	"A";
	private String doc_type_code	=	"";
	private String barcode_appl_for_ack_yn	=	"N";//Added for TFS id:6938
	private ArrayList alTFRDtlRecords	= new ArrayList();
	private ArrayList alTFRExpRecords	= new ArrayList();
	private HashMap hmTFRExpRecords		= new HashMap();
	private HashMap hmDumTFRExpRecords	= new HashMap();
	private HashMap hmFinalTFRExpRecords= new HashMap();
	
	public void setStore_code(String store_code){
		this.store_code = store_code;
	}
	public String getStore_code(){
		return this.store_code;
	}
	public void setToStore(String to_store_code){
		this.to_store_code = to_store_code;
	}
	public String getToStore(){
		return this.to_store_code;
	}
	public void setTrn_type(String trn_type){
		this.trn_type = trn_type;
	}
	public String getTrn_type(){
		return this.trn_type;
	}
	public void setAction_type(String action_type){
		this.action_type = action_type;
	}
	public String getAction_type(){
		return this.action_type;
	}
	public void setDoc_type_code(String doc_type_code){
		this.doc_type_code = doc_type_code;
	}
	public String getDoc_type_code(){
		return this.doc_type_code;
	}
	public void setTFRDtlRecords(ArrayList alDtlRecords){
		this.alTFRDtlRecords = alDtlRecords;
	}
	public ArrayList getTFRDtlRecords(){
		return this.alTFRDtlRecords;
	}
	public void setTFRExpRecords(String doc_no,ArrayList exp_records){
		hmTFRExpRecords.put(doc_no,exp_records);
		hmFinalTFRExpRecords.put(doc_no,exp_records);
	}
	public void removeTFTExpRecords(String doc_no){
		hmFinalTFRExpRecords.remove(doc_no);
	}
	public ArrayList getTFRExpRecords(String doc_no){
		if(hmTFRExpRecords.containsKey(doc_no))
			return (ArrayList)this.hmTFRExpRecords.get(doc_no);
		else
			return new ArrayList();
	}
	public String getTrn_type_List(String trn_name) {
		String trn_types = "";
		//Added by Sakti against BRU-HIMS-CRF-073.1
		String dflt_trn_type = "ISS";
		if(trn_name.equals("ST_ACK_URA") || trn_name.equals("ST_ACK_URC")) {
			dflt_trn_type = "URG";
		}else if(trn_name.equals("ST_ACK_RTA") || trn_name.equals("ST_ACK_RTC")) {
			dflt_trn_type = "RET";
		}else if(trn_name.equals("ST_ACK_TFA") || trn_name.equals("ST_ACK_TFC")) {
			dflt_trn_type = "TFR";
		}
		//Added ends
		try{
		HashMap hmTemp = (HashMap)fetchRecord("SELECT ISS_ACK_REQ_YN, RET_ACK_REQ_YN, TFR_ACK_REQ_YN FROM ST_FACILITY_PARAM WHERE FACILITY_ID = ?",getLoginFacilityId());
		if((checkForNull((String)hmTemp.get("ISS_ACK_REQ_YN"),"N")).equals("Y")){
			trn_types = trn_types+"'URG','ISS',";
		}
		if((checkForNull((String)hmTemp.get("RET_ACK_REQ_YN"),"N")).equals("Y")){
			trn_types = trn_types+"'RET',";
		}
		if((checkForNull((String)hmTemp.get("TFR_ACK_REQ_YN"),"N")).equals("Y")){
			trn_types = trn_types+"'TFR',";
		}
		trn_types = trn_types.substring(0,trn_types.length()-1);
		}catch(Exception e){
			e.printStackTrace();
		}
		return getListOptionTag(getListOptionArrayList("SELECT   TRN_TYPE, SHORT_DESC FROM ST_TRN_TYPE_LANG_VW TRN WHERE TRN_TYPE IN ("+trn_types+") AND LANGUAGE_ID = ? ORDER BY DECODE (TRN_TYPE, 'ISS', 1, 'URG', 2, 'RET', 3, 'TFR', 4)",getLanguageId()),dflt_trn_type);
	}
	public String getDoc_type_code_List(){
		String chkParameters[] = {getTrn_type(),getLoginFacilityId(),getLanguageId()};
		//return getListOptionTag(getListOptionArrayList(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_DOC_TYPE_CODE_SELECT"),chkParameters));
		return getListOptionTag(getListOptionArrayList("SELECT   DISTINCT DOC.DOC_TYPE_CODE, B.SHORT_DESC FROM ST_TRN_DOC_TYPE DOC,SY_DOC_TYPE_MASTER_LANG_VW B, ST_ACC_ENTITY_PARAM PA WHERE DOC.TRN_TYPE = ? AND DOC.DOC_TYPE_CODE = B.DOC_TYPE_CODE AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR FACILITY_ID = ?) AND B.LANGUAGE_ID = ? ORDER BY 2,1",chkParameters));
	}
	public ArrayList getDocTypeArrayList() throws Exception{ 
		ArrayList arraylist = new ArrayList();
        arraylist.add(getTrn_type());
        arraylist.add(getLoginFacilityId());
        arraylist.add(getLanguageId());
		//return fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_DOC_TYPE_CODE_SELECT1"),arraylist);
		return fetchRecords("SELECT   DISTINCT DOC.DOC_TYPE_CODE, B.SHORT_DESC FROM ST_TRN_DOC_TYPE DOC,SY_DOC_TYPE_MASTER_LANG_VW B, ST_ACC_ENTITY_PARAM PA WHERE DOC.TRN_TYPE = ? AND DOC.DOC_TYPE_CODE = B.DOC_TYPE_CODE AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR FACILITY_ID = ?) AND B.LANGUAGE_ID = ? ORDER BY 2,1",arraylist);
	}
	public String getStore_code_List(){
		ArrayList arraylist = new ArrayList();
        arraylist.add(getLoginFacilityId());
        arraylist.add(getLoginById());
        arraylist.add(getLanguageId());
        arraylist.add(getTrn_type());
		if((getAction_type().equals("A"))){
		arraylist.add(getTrn_type());//Added by Rabbani #Bru-HIMS-CRF-112(INC no:30071) on 13-AUG-2013  
		return getListOptionTag(getListOptionArrayList(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_STORE_LIST_ACK_SELECT"),arraylist));
		}else{
		return getListOptionTag(getListOptionArrayList(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_STORE_LIST_CFM_SELECT"),arraylist));
		}
	}
	public ArrayList getStoreArrayList() throws Exception{ 
		ArrayList arraylist = new ArrayList();
        arraylist.add(getLoginFacilityId());
        arraylist.add(getLoginById());
        arraylist.add(getLanguageId());
        arraylist.add(getTrn_type());
		if((getAction_type().equals("A"))){
		    arraylist.add(getTrn_type());//Added by Rabbani #Bru-HIMS-CRF-112(INC no:30071) on 13-AUG-2013  
			return fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_STORE_LIST_ACK_SELECT"),arraylist);
		   }else{
			return fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_STORE_LIST_CFM_SELECT"),arraylist);
		   }
	}
	public void loadTFRDtlData(String from_doc_date,String to_doc_date,String doc_no){
		//String chkParameters[] = {from_doc_date,to_doc_date,doc_no,getDoc_type_code(),getStore_code(),getLoginFacilityId(),getLanguageId()};
		//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
		String chkParameters[] = {from_doc_date,to_doc_date,getDoc_type_code(),getStore_code(),getLoginFacilityId(),getLanguageId()};
		StringBuffer sql=new StringBuffer(); 
		try{
			if((getAction_type().equals("A"))){
				if(getTrn_type().equals("TFR")){
					//this.alTFRDtlRecords = fetchRecords("SELECT   1 SEQ_NO,DOC_NO, DOC_TYPE_CODE,TO_CHAR (A.DOC_DATE, 'dd/mm/yyyy') DOC_DATE,FM_STORE_CODE, TO_STORE_CODE, B.SHORT_DESC FM_STORE_DESC, C.SHORT_DESC TO_STORE_DESC,A.FACILITY_ID FACILITY_ID FROM     ST_TRANSFER_HDR A, MM_STORE_LANG_VW B, MM_STORE_LANG_VW C, ST_ACC_ENTITY_PARAM PA WHERE    FINALIZED_YN = 'N' AND PROCESS_FOR_ACKNOWLEDGE = 'Y' /*AND TRN_TYPE = ?*/ AND (A.DOC_TYPE_CODE, A.DOC_NO) NOT IN (SELECT   DOC_TYPE_CODE, DOC_NO FROM ST_ACKNOWLEDGE_TRN_DTL WHERE 'A' = 'A' HAVING (  SUM (ISSUE_QTY) - (SUM (NVL(REJECTED_QTY,0)) + SUM (NVL(RECEIVED_QTY,0))+SUM (NVL(TMP_REJECTED_QTY_2,0)) + SUM (NVL(TMP_RECEIVED_QTY_2,0)))) = 0 GROUP BY DOC_TYPE_CODE, DOC_NO) AND DOC_DATE BETWEEN NVL (TO_DATE (?, 'dd/mm/yyyy'),TO_DATE ('01/01/1800', 'dd/mm/yyyy')) AND NVL (TO_DATE (?, 'dd/mm/yyyy'), SYSDATE) AND A.DOC_NO LIKE NVL(?,'%') AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO",chkParameters);
					//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
					sql.append(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TFR_DTL_SELECT"));
					if(!doc_no.equals(""))
						sql.append(" AND A.DOC_NO ='"+doc_no +"' " );
					sql.append(" AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO");
					//this.alTFRDtlRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TFR_DTL_SELECT"),chkParameters);
				}else if(getTrn_type().equals("URG")){
					//this.alTFRDtlRecords = fetchRecords("SELECT   SEQ_NO,DOC_NO, DOC_TYPE_CODE,TO_CHAR (A.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,FM_STORE_CODE, TO_STORE_CODE, B.SHORT_DESC FM_STORE_DESC, C.SHORT_DESC TO_STORE_DESC,A.FACILITY_ID FACILITY_ID FROM     ST_ISSUE_HDR A, MM_STORE_LANG_VW B, MM_STORE_LANG_VW C, ST_ACC_ENTITY_PARAM PA WHERE    FINALIZED_YN = 'N' AND PROCESS_FOR_ACKNOWLEDGE = 'Y' /*AND TRN_TYPE = ? */AND (A.DOC_TYPE_CODE, A.DOC_NO) NOT IN (SELECT   DOC_TYPE_CODE, DOC_NO FROM ST_ACKNOWLEDGE_TRN_DTL WHERE 'A' = 'A' HAVING (  SUM (ISSUE_QTY) - (SUM (NVL(REJECTED_QTY,0)) + SUM (NVL(RECEIVED_QTY,0))+SUM (NVL(TMP_REJECTED_QTY_2,0)) + SUM (NVL(TMP_RECEIVED_QTY_2,0)))) = 0 GROUP BY DOC_TYPE_CODE, DOC_NO) AND DOC_DATE BETWEEN NVL (TO_DATE (?, 'DD/MM/YYYY'),TO_DATE ('01/01/1800', 'DD/MM/YYYY')) AND NVL (TO_DATE (?, 'DD/MM/YYYY'), SYSDATE) AND A.DOC_NO LIKE NVL(?,'%') AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO",chkParameters);
					//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
					sql.append(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_URG_DTL_SELECT"));
					if(!doc_no.equals(""))
						sql.append(" AND A.DOC_NO ='"+doc_no +"' " );
					sql.append(" AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO");
					//this.alTFRDtlRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_URG_DTL_SELECT"),chkParameters);
				}else if(getTrn_type().equals("ISS")){
					//this.alTFRDtlRecords = fetchRecords("SELECT   SEQ_NO,DOC_NO, DOC_TYPE_CODE,TO_CHAR (A.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,FM_STORE_CODE, TO_STORE_CODE, B.SHORT_DESC FM_STORE_DESC, C.SHORT_DESC TO_STORE_DESC ,A.FACILITY_ID FACILITY_ID FROM ST_ISSUE_HDR A, MM_STORE_LANG_VW B, MM_STORE_LANG_VW C, ST_ACC_ENTITY_PARAM PA WHERE FINALIZED_YN = 'N' AND PROCESS_FOR_ACKNOWLEDGE = 'Y' /*AND TRN_TYPE = ?*/ AND (A.DOC_TYPE_CODE, A.DOC_NO,A.SEQ_NO) NOT IN (SELECT   DOC_TYPE_CODE, DOC_NO,SEQ_NO FROM ST_ACKNOWLEDGE_TRN_DTL WHERE 'A' = 'A' HAVING (  SUM (ISSUE_QTY) - (SUM (NVL(REJECTED_QTY,0)) + SUM (NVL(RECEIVED_QTY,0))+SUM (NVL(TMP_REJECTED_QTY_2,0)) + SUM (NVL(TMP_RECEIVED_QTY_2,0)))) = 0 GROUP BY DOC_TYPE_CODE, DOC_NO, SEQ_NO) AND DOC_DATE BETWEEN NVL (TO_DATE (?, 'DD/MM/YYYY'),TO_DATE ('01/01/1800', 'DD/MM/YYYY')) AND NVL (TO_DATE (?, 'DD/MM/YYYY'), SYSDATE) AND A.DOC_NO LIKE NVL(?,'%') AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO",chkParameters);
					//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
					sql.append(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ISS_DTL_SELECT"));
					if(!doc_no.equals(""))
						sql.append(" AND A.DOC_NO ='"+doc_no +"' " );
					sql.append(" AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO ");
					//this.alTFRDtlRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ISS_DTL_SELECT"),chkParameters);
				}else if(getTrn_type().equals("RET")){
					//this.alTFRDtlRecords = fetchRecords("SELECT   1 SEQ_NO,DOC_NO, DOC_TYPE_CODE,TO_CHAR (A.DOC_DATE, 'dd/mm/yyyy') DOC_DATE,FM_STORE_CODE, TO_STORE_CODE, B.SHORT_DESC FM_STORE_DESC, C.SHORT_DESC TO_STORE_DESC,A.FACILITY_ID FACILITY_ID FROM ST_ISSUE_RET_HDR A, MM_STORE_LANG_VW B, MM_STORE_LANG_VW C, ST_ACC_ENTITY_PARAM PA WHERE FINALIZED_YN = 'N' AND PROCESS_FOR_ACKNOWLEDGE = 'Y' /*AND TRN_TYPE = ?*/ AND (A.DOC_TYPE_CODE, A.DOC_NO) NOT IN (SELECT   DOC_TYPE_CODE, DOC_NO FROM ST_ACKNOWLEDGE_TRN_DTL WHERE 'A' = 'A' HAVING (  SUM (ISSUE_QTY) - (SUM (NVL(REJECTED_QTY,0)) + SUM (NVL(RECEIVED_QTY,0))+SUM (NVL(TMP_REJECTED_QTY_2,0)) + SUM (NVL(TMP_RECEIVED_QTY_2,0)))) = 0 GROUP BY DOC_TYPE_CODE, DOC_NO) AND DOC_DATE BETWEEN NVL (TO_DATE (?, 'dd/mm/yyyy'),TO_DATE ('01/01/1800', 'dd/mm/yyyy')) AND NVL (TO_DATE (?, 'dd/mm/yyyy'), SYSDATE) AND A.DOC_NO LIKE NVL(?,'%') AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO",chkParameters);
					//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
					sql.append(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_RET_DTL_SELECT"));
					if(!doc_no.equals(""))
						sql.append(" AND A.DOC_NO ='"+doc_no +"' " );
					sql.append(" AND A.DOC_TYPE_CODE = ? AND A.TO_STORE_CODE = ? AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) /*AND A.FACILITY_ID = 'DF'*/ AND B.LANGUAGE_ID = ? AND FM_STORE_CODE = B.STORE_CODE AND TO_STORE_CODE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO");
					//this.alTFRDtlRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_RET_DTL_SELECT"),chkParameters);
				}
				this.alTFRDtlRecords = fetchRecords(sql.toString(),chkParameters);//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
			}
			else{
			//String chkParameters1[] = {from_doc_date,to_doc_date,doc_no,getDoc_type_code(),getStore_code(),getLanguageId()};
				//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
				String chkParameters1[] = {from_doc_date,to_doc_date,getDoc_type_code(),getStore_code(),getLanguageId()};

				//this.alTFRDtlRecords = fetchRecords("SELECT SEQ_NO,DOC_NO, DOC_TYPE_CODE,TO_CHAR (DOC_DATE, 'DD/MM/YYYY') DOC_DATE,ISSUING_STORE FM_STORE_CODE, RECEIVING_STORE,RECEIVING_STORE TO_STORE_CODE, B.SHORT_DESC FM_STORE_DESC, C.SHORT_DESC TO_STORE_DESC,CONFIRM_YN FROM ST_ACKNOWLEDGE_TRN_HDR A, MM_STORE_LANG_VW B, MM_STORE_LANG_VW C WHERE A.ACKNOWLEDGE_YN = 'Y' AND CONFIRM_YN = 'N' /*AND TRN_TYPE = ?*/ AND	   DOC_DATE BETWEEN NVL (TO_DATE (?, 'DD/MM/YYYY'),TO_DATE ('01/01/1800', 'DD/MM/YYYY')) AND NVL (TO_DATE (?, 'DD/MM/YYYY'), SYSDATE) AND A.DOC_NO LIKE NVL(?,'%') AND A.DOC_TYPE_CODE = ? AND A.ISSUING_STORE = ? /*AND A.FACILITY_ID = ? */AND B.LANGUAGE_ID = ? AND ISSUING_STORE = B.STORE_CODE AND RECEIVING_STORE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID ORDER BY DOC_NO",chkParameters1);
				//this.alTFRDtlRecords = fetchRecords("SELECT   A.SEQ_NO, A.DOC_NO, A.DOC_TYPE_CODE,TO_CHAR (A.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,ISSUING_STORE FM_STORE_CODE, RECEIVING_STORE,RECEIVING_STORE TO_STORE_CODE, B.SHORT_DESC FM_STORE_DESC,C.SHORT_DESC TO_STORE_DESC, CONFIRM_YN FROM ST_ACKNOWLEDGE_TRN_HDR A, MM_STORE_LANG_VW B, MM_STORE_LANG_VW C,ST_ACKNOWLEDGE_TRN_DTL D WHERE A.DOC_DATE BETWEEN NVL (TO_DATE (?, 'DD/MM/YYYY'),TO_DATE ('01/01/1800', 'DD/MM/YYYY')) AND NVL (TO_DATE (?, 'DD/MM/YYYY'), SYSDATE) AND A.DOC_NO LIKE NVL (?, '%') AND A.DOC_TYPE_CODE = ? AND A.ISSUING_STORE = ? /*AND A.FACILITY_ID = '' */ AND B.LANGUAGE_ID = ? AND ISSUING_STORE = B.STORE_CODE AND RECEIVING_STORE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND A.CONFIRM_YN = 'N' HAVING SUM(D.TMP_REJECTED_QTY_2) > 0 GROUP BY A.SEQ_NO, A.DOC_NO, A.DOC_TYPE_CODE,A.DOC_DATE,ISSUING_STORE,RECEIVING_STORE,B.SHORT_DESC,C.SHORT_DESC,CONFIRM_YN ORDER BY DOC_NO",chkParameters1);
				//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
				sql.append(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_CFM_DTL_SELECT"));
				if(!doc_no.equals(""))
					sql.append(" AND A.DOC_NO ='"+doc_no +"' " );
				sql.append("AND A.DOC_TYPE_CODE = ? AND A.ISSUING_STORE = ? /*AND A.FACILITY_ID = '' */ AND B.LANGUAGE_ID = ? AND ISSUING_STORE = B.STORE_CODE AND RECEIVING_STORE = C.STORE_CODE AND B.LANGUAGE_ID = C.LANGUAGE_ID AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND A.CONFIRM_YN = 'N' HAVING SUM(D.TMP_REJECTED_QTY_2) > 0 GROUP BY A.SEQ_NO, A.DOC_NO, A.DOC_TYPE_CODE,A.DOC_DATE,ISSUING_STORE,RECEIVING_STORE,B.SHORT_DESC,C.SHORT_DESC,CONFIRM_YN ORDER BY DOC_NO");
				//this.alTFRDtlRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_CFM_DTL_SELECT"),chkParameters);
				this.alTFRDtlRecords = fetchRecords(sql.toString(),chkParameters1);//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
			}
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public void loadTFRExpData(String doc_no,String seq_no){
		ArrayList alParameters = new ArrayList();
		alParameters.add(getAction_type());
		alParameters.add(doc_no);
		alParameters.add(getDoc_type_code());
		alParameters.add(getLoginFacilityId());
		alParameters.add(getLanguageId());
		alParameters.add(getLanguageId());
		HashMap hmTemp = new HashMap();
		try{
			if(getTrn_type().equals("TFR")){
					//this.alTFRExpRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TFR_EXP_SELECT"),alParamaters);
					//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,1 SEQ_NO,HDR.FACILITY_ID, STSTR1.STOCK_ITEM_YN,TO_CHAR(HDR.DOC_DATE,'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE,EXP.DOC_NO,EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC,EXP.BATCH_ID, TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE, EXP.TRADE_ID, MM.SHORT_DESC ITEM_DESC, ITEM_QTY QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM,ACK.RECEIVED_QTY, (ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ITEM_QTY ISSUE_QTY,ROUND ((DECODE (STSTR.QTY_ON_HAND, 0, 0, STSTR.ITEM_VALUE)/ DECODE (STSTR.QTY_ON_HAND,0, 1,STSTR.QTY_ON_HAND)),3) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE) AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS,EXP.BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 FROM ST_TRANSFER_HDR HDR,ST_TRANSFER_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE 	HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND 	TRUNC (EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND 		STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE  AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
					/**
					 * @Name - Priya
					 * @Date - 03/06/2010
					 * @Inc# - 
					 * @Desc -    To get the Unit Cost from the function 'ST_DISPLAY_COST_DECIMALS' the above query is modified 
					 */
					 // commented  by Rabbani #Inc no:40697(GHL-SCF-750) on  13-JUN-2013
					//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,1 SEQ_NO,HDR.FACILITY_ID, STSTR1.STOCK_ITEM_YN,TO_CHAR(HDR.DOC_DATE,'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE,EXP.DOC_NO,EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC,EXP.BATCH_ID, TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE, EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ITEM_QTY QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM,ACK.RECEIVED_QTY, (ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_COST_DECIMALS (STSTR.ITEM_CODE, STSTR.STORE_CODE )) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE) AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS,EXP.BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 FROM ST_TRANSFER_HDR HDR,ST_TRANSFER_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE 	HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND 	TRUNC (EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND 		STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE  AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
					
					// Added  by Rabbani #Inc no:40697(GHL-SCF-750) on  17-JUN-2013
					//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,1 SEQ_NO,HDR.FACILITY_ID, STSTR1.STOCK_ITEM_YN,TO_CHAR(HDR.DOC_DATE,'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE,EXP.DOC_NO,EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC,EXP.BATCH_ID, TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE, EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ITEM_QTY QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM,ACK.RECEIVED_QTY, (ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_COST_DECIMALS (STSTR.ITEM_CODE, STSTR.STORE_CODE )) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE) AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS,EXP.BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2,EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE FROM ST_TRANSFER_HDR HDR,ST_TRANSFER_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE 	HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND 	TRUNC (EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND 		STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE  AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
				//Modified by suresh.r on 14-08-2014 against Inc#50616
				//Modified by suresh.r on 13-11-2014 against Inc 52256(Added 2 args to ST_DISPLAY_UNIT_COST)
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,1 SEQ_NO,HDR.FACILITY_ID, STSTR1.STOCK_ITEM_YN,TO_CHAR(HDR.DOC_DATE,'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE,EXP.DOC_NO,EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC,EXP.BATCH_ID, TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE, EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ITEM_QTY QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM,ACK.RECEIVED_QTY, (ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_UNIT_COST (STSTR.ITEM_CODE,SYSDATE,'CURRENT_STOCK')) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE) AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS,EXP.BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2,EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE FROM ST_TRANSFER_HDR HDR,ST_TRANSFER_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE 	HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND 	TRUNC (EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND 		STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE  AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
				//Modified against KDAH-SCF-0401
				this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,1 SEQ_NO,HDR.FACILITY_ID, STSTR1.STOCK_ITEM_YN,TO_CHAR(HDR.DOC_DATE,'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE,EXP.DOC_NO,EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC,EXP.BATCH_ID, TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE, EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ITEM_QTY QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM,ACK.RECEIVED_QTY, (ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_UNIT_COST (STSTR.ITEM_CODE,SYSDATE,'CURRENT_STOCK')) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT DISTINCT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE) AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS,EXP.BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2,EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE FROM ST_TRANSFER_HDR HDR,ST_TRANSFER_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE 	HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND 	TRUNC (EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND 		STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE  AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
			}else if(getTrn_type().equals("ISS")||getTrn_type().equals("URG")){
				alParameters.add(seq_no);
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,STSTR1.STOCK_ITEM_YN,EXP.FACILITY_ID,TO_CHAR (HDR.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE, EXP.DOC_NO, EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.SEQ_NO, EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC, EXP.BATCH_ID,TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,EXP.TRADE_ID, MM.SHORT_DESC ITEM_DESC, ISS_ITEM_QTY QTY,RET_ITEM_QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM, ACK.RECEIVED_QTY, (ISS_ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ISS_ITEM_QTY ISSUE_QTY,ROUND ((  DECODE (STSTR.QTY_ON_HAND, 0, 0, STSTR.ITEM_VALUE)/ DECODE (STSTR.QTY_ON_HAND, 0, 1, STSTR.QTY_ON_HAND)),3) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO  AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_NO=ACK.DOC_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, EXP.BIN_LOCATION_CODE, ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,HDR.SEQ_NO,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 FROM ST_ISSUE_HDR HDR,ST_ISSUE_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.SEQ_NO = EXP.SEQ_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.SEQ_NO = ACK.SEQ_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND TRUNC(EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ISS_ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND HDR.SEQ_NO = ? AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
				//this.alTFRExpRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_URG_ISS_EXP_SELECT"),alParamaters);
					/**
					 * @Name - Priya
					 * @Date - 03/06/2010
					 * @Inc# - 
					 * @Desc -    To get the Unit Cost from the function 'ST_DISPLAY_COST_DECIMALS' the above query is modified 
					 */
					 // Commented  by Rabbani #Inc no:40697(GHL-SCF-750) on  16-JUN-2013
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,STSTR1.STOCK_ITEM_YN,EXP.FACILITY_ID,TO_CHAR (HDR.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE, EXP.DOC_NO, EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.SEQ_NO, EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC, EXP.BATCH_ID,TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ISS_ITEM_QTY QTY,RET_ITEM_QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM, ACK.RECEIVED_QTY, (ISS_ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ISS_ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_COST_DECIMALS (STSTR.ITEM_CODE, STSTR.STORE_CODE )) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO  AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_NO=ACK.DOC_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, EXP.BIN_LOCATION_CODE, ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,HDR.SEQ_NO,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 FROM ST_ISSUE_HDR HDR,ST_ISSUE_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.SEQ_NO = EXP.SEQ_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.SEQ_NO = ACK.SEQ_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND TRUNC(EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ISS_ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND HDR.SEQ_NO = ? AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
				
				// Added  by Rabbani #Inc no:40697(GHL-SCF-750) on  16-JUN-2013
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,STSTR1.STOCK_ITEM_YN,EXP.FACILITY_ID,TO_CHAR (HDR.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE, EXP.DOC_NO, EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.SEQ_NO, EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC, EXP.BATCH_ID,TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ISS_ITEM_QTY QTY,RET_ITEM_QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM, ACK.RECEIVED_QTY, (ISS_ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ISS_ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_COST_DECIMALS (STSTR.ITEM_CODE, STSTR.STORE_CODE )) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO  AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_NO=ACK.DOC_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, EXP.BIN_LOCATION_CODE, ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,HDR.SEQ_NO,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 , EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE FROM ST_ISSUE_HDR HDR,ST_ISSUE_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.SEQ_NO = EXP.SEQ_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.SEQ_NO = ACK.SEQ_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND TRUNC(EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ISS_ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND HDR.SEQ_NO = ? AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
				//added barcode id,REQ QTY and condition is the query for RUT-CRF-0079

				if(isBarCodeApplicableForValidation("VALIDATEBARCODE",getTrn_type())){
					//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,STSTR1.STOCK_ITEM_YN,EXP.FACILITY_ID,TO_CHAR (HDR.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE, EXP.DOC_NO, EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.SEQ_NO, EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC, EXP.BATCH_ID,TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ISS_ITEM_QTY QTY,RET_ITEM_QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM, ACK.RECEIVED_QTY, (ISS_ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ISS_ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_COST_DECIMALS (STSTR.ITEM_CODE, STSTR.STORE_CODE )) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO  AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_NO=ACK.DOC_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, EXP.BIN_LOCATION_CODE, ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,HDR.SEQ_NO,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 , EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE,EXP.BARCODE_ID, (select REQ_ITEM_QTY FROM st_request_dtl where doc_type_code=hdr.doc_type_code and (pa.trn_across_facility_yn = 'Y' OR facility_id = hdr.facility_id )  and doc_no = hdr.doc_no and item_code = exp.item_code)REQ_ITEM_QTY,(SELECT short_desc  FROM mm_bin_location_lang_vw  WHERE store_code = hdr.fm_store_code  AND bin_location_code = ststr.bin_location_code  AND language_id = mm.language_id) bin_locn_desc, (SELECT short_desc   FROM mm_item_class_lang_vw  WHERE item_class_code = mm.item_class_code  AND language_id = mm.language_id) item_class_desc, (SELECT short_desc  FROM mm_item_analysis_lang_vw  WHERE item_anal_code = mm.item_anal1_code    AND language_id = mm.language_id) item_anal1_desc, (SELECT short_desc  FROM mm_item_analysis_lang_vw  WHERE item_anal_code = mm.item_anal2_code  AND language_id = mm.language_id) item_anal2_desc,(SELECT short_desc   FROM mm_item_analysis_lang_vw  WHERE item_anal_code = mm.item_anal3_code  AND language_id = mm.language_id) item_anal3_desc  FROM ST_ISSUE_HDR HDR,ST_ISSUE_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.SEQ_NO = EXP.SEQ_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.SEQ_NO = ACK.SEQ_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND TRUNC(EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ISS_ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND HDR.SEQ_NO = ? AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY 39,40,41,42,43,11",alParameters);
					//Modified by suresh.r added st_display_unit_cost for item_unit_cost
					//Modified by suresh.r on 13-11-2014 against Inc 52256(Added 2 args to ST_DISPLAY_UNIT_COST)					
					this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,STSTR1.STOCK_ITEM_YN,EXP.FACILITY_ID,TO_CHAR (HDR.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE, EXP.DOC_NO, EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.SEQ_NO, EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC, EXP.BATCH_ID,TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ISS_ITEM_QTY QTY,RET_ITEM_QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM, ACK.RECEIVED_QTY, (ISS_ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ISS_ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_UNIT_COST(STSTR.ITEM_CODE,SYSDATE,'CURRENT_STOCK')* ST_GET_UOM_CONV_FAC_SING_STR(STSTR.ITEM_CODE, STSTR.STORE_CODE)) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO  AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_NO=ACK.DOC_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, EXP.BIN_LOCATION_CODE, ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,HDR.SEQ_NO,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 , EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE,EXP.BARCODE_ID, (select REQ_ITEM_QTY FROM st_request_dtl where doc_type_code=hdr.doc_type_code and (pa.trn_across_facility_yn = 'Y' OR facility_id = hdr.facility_id )  and doc_no = hdr.doc_no and item_code = exp.item_code)REQ_ITEM_QTY,(SELECT short_desc  FROM mm_bin_location_lang_vw  WHERE store_code = hdr.fm_store_code  AND bin_location_code = ststr.bin_location_code  AND language_id = mm.language_id) bin_locn_desc, (SELECT short_desc   FROM mm_item_class_lang_vw  WHERE item_class_code = mm.item_class_code  AND language_id = mm.language_id) item_class_desc, (SELECT short_desc  FROM mm_item_analysis_lang_vw  WHERE item_anal_code = mm.item_anal1_code    AND language_id = mm.language_id) item_anal1_desc, (SELECT short_desc  FROM mm_item_analysis_lang_vw  WHERE item_anal_code = mm.item_anal2_code  AND language_id = mm.language_id) item_anal2_desc,(SELECT short_desc   FROM mm_item_analysis_lang_vw  WHERE item_anal_code = mm.item_anal3_code  AND language_id = mm.language_id) item_anal3_desc  FROM ST_ISSUE_HDR HDR,ST_ISSUE_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.SEQ_NO = EXP.SEQ_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.SEQ_NO = ACK.SEQ_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND TRUNC(EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ISS_ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND HDR.SEQ_NO = ? AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY 39,40,41,42,43,11",alParameters);
				}
				else{
					//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,STSTR1.STOCK_ITEM_YN,EXP.FACILITY_ID,TO_CHAR (HDR.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE, EXP.DOC_NO, EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.SEQ_NO, EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC, EXP.BATCH_ID,TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ISS_ITEM_QTY QTY,RET_ITEM_QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM, ACK.RECEIVED_QTY, (ISS_ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ISS_ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_COST_DECIMALS (STSTR.ITEM_CODE, STSTR.STORE_CODE )) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO  AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_NO=ACK.DOC_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, EXP.BIN_LOCATION_CODE, ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,HDR.SEQ_NO,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 , EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE,EXP.BARCODE_ID, (select REQ_ITEM_QTY FROM st_request_dtl where doc_type_code=hdr.doc_type_code and (pa.trn_across_facility_yn = 'Y' OR facility_id = hdr.facility_id )  and doc_no = hdr.doc_no and item_code = exp.item_code)REQ_ITEM_QTY FROM ST_ISSUE_HDR HDR,ST_ISSUE_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.SEQ_NO = EXP.SEQ_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.SEQ_NO = ACK.SEQ_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND TRUNC(EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ISS_ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND HDR.SEQ_NO = ? AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
					//Modified by suresh.r added st_display_unit_cost for item_unit_cost against inc#50521
					//Modified by suresh.r on 13-11-2014 against Inc 52256(Added 2 args to ST_DISPLAY_UNIT_COST)
					this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,STSTR1.STOCK_ITEM_YN,EXP.FACILITY_ID,TO_CHAR (HDR.DOC_DATE, 'DD/MM/YYYY') DOC_DATE,HDR.FM_STORE_CODE STORE_CODE, EXP.DOC_NO, EXP.DOC_TYPE_CODE,EXP.DOC_SRL_NO,EXP.SEQ_NO, EXP.ITEM_CODE, MM.SHORT_DESC ITEM_DESC, EXP.BATCH_ID,TO_CHAR (EXP.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,EXP.TRADE_ID,NVL (TRD.LONG_NAME, EXP.TRADE_ID) TRADE_NAME, MM.SHORT_DESC ITEM_DESC, ISS_ITEM_QTY QTY,RET_ITEM_QTY,STSTR.DEF_ISSUE_UOM UOM_CODE, AM.SHORT_DESC UOM, ACK.RECEIVED_QTY, (ISS_ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY,ISS_ITEM_QTY ISSUE_QTY,TRIM(ST_DISPLAY_UNIT_COST(STSTR.ITEM_CODE,SYSDATE,'CURRENT_STOCK')* ST_GET_UOM_CONV_FAC_SING_STR(STSTR.ITEM_CODE, STSTR.STORE_CODE)) ITEM_UNIT_COST,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO  AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_SRL_NO= ACK.DOC_SRL_NO AND DOC_NO=ACK.DOC_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, EXP.BIN_LOCATION_CODE, ACK.NEW_BIN_LOCATION_CODE NEW_BIN_LOCATION_CODE,ACK.NEW_BIN_LOCATION_CODE TO_BIN_LOCATION_CODE,HDR.SEQ_NO,STSTR1.DEF_ISSUE_UOM TO_UOM_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 , EXP.TO_BIN_LOCATION_CODE DFLT_BINLOCATION_CODE,EXP.BARCODE_ID, (select REQ_ITEM_QTY FROM st_request_dtl where doc_type_code=hdr.doc_type_code and (pa.trn_across_facility_yn = 'Y' OR facility_id = hdr.facility_id )  and doc_no = hdr.doc_no and item_code = exp.item_code)REQ_ITEM_QTY FROM ST_ISSUE_HDR HDR,ST_ISSUE_DTL_EXP EXP,AM_TRADE_NAME_LANG_VW TRD,MM_ITEM_LANG_VW MM,AM_UOM_LANG_VW AM,ST_ACKNOWLEDGE_TRN_DTL ACK,ST_ITEM_STORE STSTR,ST_ITEM_STORE STSTR1, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE HDR.FACILITY_ID = EXP.FACILITY_ID AND HDR.DOC_TYPE_CODE = EXP.DOC_TYPE_CODE AND HDR.DOC_NO = EXP.DOC_NO AND HDR.SEQ_NO = EXP.SEQ_NO AND HDR.DOC_NO = ? AND HDR.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR HDR.FACILITY_ID = ?) AND TRD.TRADE_ID(+) = EXP.TRADE_ID AND TRD.LANGUAGE_ID(+) = ? AND MM.ITEM_CODE = EXP.ITEM_CODE AND MM.LANGUAGE_ID = ? AND AM.LANGUAGE_ID = MM.LANGUAGE_ID AND AM.UOM_CODE = MM.GEN_UOM_CODE /*AND EXP.FACILITY_ID = ACK.FACILITY_ID(+)*/ AND EXP.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND EXP.DOC_NO = ACK.DOC_NO(+) AND EXP.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND EXP.SEQ_NO = ACK.SEQ_NO(+) AND EXP.ITEM_CODE = ACK.ITEM_CODE(+) AND EXP.BATCH_ID = ACK.BATCH_ID(+) AND TRUNC(EXP.EXPIRY_DATE_OR_RECEIPT_DATE) = TRUNC (ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+)) AND STSTR.STORE_CODE = EXP.STORE_CODE AND STSTR.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.ITEM_CODE = EXP.ITEM_CODE AND STSTR1.STORE_CODE = HDR.TO_STORE_CODE  AND EXP.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ISS_ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND HDR.SEQ_NO = ? AND N.ITEM_CODE = EXP.ITEM_CODE ORDER BY EXP.DOC_SRL_NO",alParameters);
				}
				
			}if(getTrn_type().equals("RET")){
				//alParameters.add(getLanguageId());
/* Keep this Query for reference if any failures in Issue Return.
SELECT a.doc_no ret_doc_no, k.fm_store_code to_store_code,
       k.to_store_code store_code, a.item_code, f.short_desc item_desc,
       a.batch_id, a.bin_location_code issue_to_bin_location_code,
       (CASE
           WHEN a.bin_location_code IS NULL
              THEN NULL
           ELSE (SELECT short_desc
                   FROM mm_bin_location_lang_vw
                  WHERE bin_location_code = a.bin_location_code
                    AND store_code = a.store_code
                    AND language_id = f.language_id)
        END
       ) to_bin_desc,
       a.to_bin_location_code issue_fm_bin_location_code,
       a.to_bin_location_code new_bin_location_code, e.short_desc bin_desc,
       TO_CHAR (a.expiry_date_or_receipt_date,
                'DD/MM/YYYY') expiry_receipt_dt,
       TO_CHAR (a.expiry_date_or_receipt_date, 'DD/MM/YYYY') expiry_date,
       a.trade_id, NVL (long_name, a.trade_id) trade_name, c.iss_item_qty,
       NVL (c.ret_item_qty, 0) ret_item_qty, a.item_qty qty,
       (c.iss_item_qty - c.ret_item_qty) + a.item_qty avail_qty,
       a.org_doc_type_code doc_type_code, a.org_doc_no doc_no,
       a.org_seq_no seq_no, i.item_unit_cost, c.doc_srl_no,
       TO_CHAR (k.doc_date, 'DD/MM/YYYY') doc_date, ack.received_qty,
       (a.item_qty - ack.received_qty) rejected_qty, a.item_qty issue_qty,
       l.def_issue_uom uom_code, m.def_issue_uom to_uom_code, ack.remarks,
       am.short_desc uom, a.bin_location_code
  FROM st_issue_ret_dtl_exp a,
       st_issue_dtl_exp c,
       st_issue_ret_hdr d,
       mm_bin_location_lang_vw e,
       mm_item_lang_vw f,
       am_trade_name_lang_vw h,
       st_issue_ret_dtl i,
       st_issue_hdr k,
       st_acknowledge_trn_dtl ack,
       am_uom_lang_vw am,
       st_item_store l,
       st_item_store m,
       st_acc_entity_param pa
 WHERE a.item_code = f.item_code
   AND a.trade_id = h.trade_id(+)
   AND a.facility_id = c.facility_id
   AND a.org_doc_type_code = c.doc_type_code
   AND a.org_doc_no = c.doc_no
   AND a.org_seq_no = c.seq_no
   AND a.item_code = c.item_code
   AND a.batch_id = c.batch_id
   AND a.expiry_date_or_receipt_date = c.expiry_date_or_receipt_date
   AND a.facility_id = d.facility_id
   AND a.doc_type_code = d.doc_type_code
   AND a.doc_no = d.doc_no
   AND d.to_store_code = e.store_code
   AND a.to_bin_location_code = e.bin_location_code
   AND a.facility_id =
                                                                 i.facility_id
   AND a.doc_type_code = i.doc_type_code
   AND a.doc_no = i.doc_no
   AND a.item_code = i.item_code
   AND a.doc_no = '82'
   AND a.doc_type_code = 'HSISRN' /*AND HDR.FACILITY_ID = 'DF'--
   AND ((pa.trn_across_facility_yn = 'Y') OR a.facility_id = 'HS')
   AND (    c.facility_id = k.facility_id
        AND c.doc_type_code = k.doc_type_code
        AND c.doc_no = k.doc_no
        AND c.seq_no = k.seq_no
       )
   AND e.language_id = 'en'
   AND f.language_id = 'en'
   AND h.language_id(+) = 'en'
   AND a.item_code = ack.item_code(+)
   AND a.trade_id = ack.trade_id(+)
   AND a.batch_id = ack.batch_id(+)
   AND a.doc_no = ack.doc_no(+)
   AND a.doc_type_code = ack.doc_type_code(+)
   AND a.expiry_date_or_receipt_date = ack.expiry_date_or_receipt_date(+)
   AND am.uom_code = f.gen_uom_code
   AND am.language_id = f.language_id
   AND a.item_code = l.item_code
   AND a.store_code = l.store_code
   AND k.fm_store_code = m.store_code
   AND a.item_code = m.item_code
   AND a.bin_location_code = ack.bin_location_code(+)   
*/
				//this.alTFRExpRecords = fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_RET_EXP_SELECT"),alParamaters);
				//its is commented due to duplicates record added binlocation on 18/04/12
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,A.FACILITY_ID,M.STOCK_ITEM_YN,A.DOC_NO RET_DOC_NO,K.FM_STORE_CODE TO_STORE_CODE, K.TO_STORE_CODE STORE_CODE, A.ITEM_CODE,F.SHORT_DESC ITEM_DESC, A.BATCH_ID,A.BIN_LOCATION_CODE ISSUE_TO_BIN_LOCATION_CODE,(CASE WHEN A.BIN_LOCATION_CODE IS NULL THEN NULL ELSE (SELECT SHORT_DESC FROM MM_BIN_LOCATION_LANG_VW WHERE BIN_LOCATION_CODE = A.BIN_LOCATION_CODE AND STORE_CODE = A.STORE_CODE AND LANGUAGE_ID = F.LANGUAGE_ID) END) TO_BIN_DESC,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) ISSUE_FM_BIN_LOCATION_CODE,       NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) NEW_BIN_LOCATION_CODE, TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_RECEIPT_DT,TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,A.TRADE_ID, NVL (H.LONG_NAME, A.TRADE_ID) TRADE_NAME, C.ISS_ITEM_QTY,NVL (C.RET_ITEM_QTY, 0) RET_ITEM_QTY, A.ITEM_QTY QTY,(C.ISS_ITEM_QTY - C.RET_ITEM_QTY) + A.ITEM_QTY AVAIL_QTY,A.ORG_DOC_TYPE_CODE ORG_DOC_TYPE_CODE, A.ORG_DOC_NO ISS_DOC_NO,A.ORG_SEQ_NO SEQ_NO, A.DOC_TYPE_CODE DOC_TYPE_CODE,A.DOC_NO DOC_NO,I.ITEM_UNIT_COST, C.DOC_SRL_NO,TO_CHAR (K.DOC_DATE, 'DD/MM/YYYY') DOC_DATE, ACK.RECEIVED_QTY,(A.ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY, A.ITEM_QTY ISSUE_QTY,L.DEF_ISSUE_UOM UOM_CODE,M.DEF_ISSUE_UOM TO_UOM_CODE,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, AM.SHORT_DESC UOM,A.BIN_LOCATION_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 FROM ST_ISSUE_RET_DTL_EXP A,ST_ISSUE_DTL_EXP C,ST_ISSUE_RET_HDR D,MM_ITEM_LANG_VW F,AM_TRADE_NAME_LANG_VW H,ST_ISSUE_RET_DTL I,ST_ISSUE_HDR K,ST_ACKNOWLEDGE_TRN_DTL ACK,AM_UOM_LANG_VW AM,ST_ITEM_STORE L,ST_ITEM_STORE M, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE A.ITEM_CODE = F.ITEM_CODE AND A.TRADE_ID = H.TRADE_ID(+) AND a.facility_id =  decode(pa.TRN_ACROSS_FACILITY_YN,'Y',a.facility_id, c.facility_id) AND A.ORG_DOC_TYPE_CODE = C.DOC_TYPE_CODE AND A.ORG_DOC_NO = C.DOC_NO AND A.ORG_SEQ_NO = C.SEQ_NO AND A.ITEM_CODE = C.ITEM_CODE AND A.BATCH_ID = C.BATCH_ID AND A.EXPIRY_DATE_OR_RECEIPT_DATE = C.EXPIRY_DATE_OR_RECEIPT_DATE AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND /* (C.ISS_ITEM_QTY-C.RET_ITEM_QTY) > 0 AND */ A.FACILITY_ID = I.FACILITY_ID AND A.DOC_TYPE_CODE = I.DOC_TYPE_CODE AND A.DOC_NO = I.DOC_NO AND A.ITEM_CODE = I.ITEM_CODE AND A.DOC_NO = ? AND A.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) AND (C.FACILITY_ID = K.FACILITY_ID AND C.DOC_TYPE_CODE = K.DOC_TYPE_CODE AND C.DOC_NO = K.DOC_NO AND C.SEQ_NO = K.SEQ_NO ) AND F.LANGUAGE_ID = ? AND H.LANGUAGE_ID(+) = ? AND A.ITEM_CODE = ACK.ITEM_CODE(+) AND A.TRADE_ID = ACK.TRADE_ID(+) AND A.BATCH_ID = ACK.BATCH_ID(+) AND A.DOC_NO = ACK.DOC_NO(+) AND A.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND A.EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+) AND AM.UOM_CODE = F.GEN_UOM_CODE AND AM.LANGUAGE_ID = F.LANGUAGE_ID AND A.ITEM_CODE = L.ITEM_CODE AND A.STORE_CODE = L.STORE_CODE AND K.FM_STORE_CODE = M.STORE_CODE AND A.ITEM_CODE = M.ITEM_CODE AND A.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = A.ITEM_CODE ORDER BY A.DOC_SRL_NO",alParameters);
				
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,A.FACILITY_ID,M.STOCK_ITEM_YN,A.DOC_NO RET_DOC_NO,K.FM_STORE_CODE TO_STORE_CODE, K.TO_STORE_CODE STORE_CODE, A.ITEM_CODE,F.SHORT_DESC ITEM_DESC, A.BATCH_ID,A.BIN_LOCATION_CODE ISSUE_TO_BIN_LOCATION_CODE,(CASE WHEN A.BIN_LOCATION_CODE IS NULL THEN NULL ELSE (SELECT SHORT_DESC FROM MM_BIN_LOCATION_LANG_VW WHERE BIN_LOCATION_CODE = A.BIN_LOCATION_CODE AND STORE_CODE = A.STORE_CODE AND LANGUAGE_ID = F.LANGUAGE_ID) END) TO_BIN_DESC,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) ISSUE_FM_BIN_LOCATION_CODE,       NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) NEW_BIN_LOCATION_CODE, TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_RECEIPT_DT,TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,A.TRADE_ID, NVL (H.LONG_NAME, A.TRADE_ID) TRADE_NAME, C.ISS_ITEM_QTY,NVL (C.RET_ITEM_QTY, 0) RET_ITEM_QTY, A.ITEM_QTY QTY,(C.ISS_ITEM_QTY - C.RET_ITEM_QTY) + A.ITEM_QTY AVAIL_QTY,A.ORG_DOC_TYPE_CODE ORG_DOC_TYPE_CODE, A.ORG_DOC_NO ISS_DOC_NO,A.ORG_SEQ_NO SEQ_NO, A.DOC_TYPE_CODE DOC_TYPE_CODE,A.DOC_NO DOC_NO,I.ITEM_UNIT_COST, C.DOC_SRL_NO,TO_CHAR (K.DOC_DATE, 'DD/MM/YYYY') DOC_DATE, ACK.RECEIVED_QTY,(A.ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0)+NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY, A.ITEM_QTY ISSUE_QTY,L.DEF_ISSUE_UOM UOM_CODE,M.DEF_ISSUE_UOM TO_UOM_CODE,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, AM.SHORT_DESC UOM,A.BIN_LOCATION_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 FROM ST_ISSUE_RET_DTL_EXP A,ST_ISSUE_DTL_EXP C,ST_ISSUE_RET_HDR D,MM_ITEM_LANG_VW F,AM_TRADE_NAME_LANG_VW H,ST_ISSUE_RET_DTL I,ST_ISSUE_HDR K,ST_ACKNOWLEDGE_TRN_DTL ACK,AM_UOM_LANG_VW AM,ST_ITEM_STORE L,ST_ITEM_STORE M, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE A.ITEM_CODE = F.ITEM_CODE AND A.TRADE_ID = H.TRADE_ID(+) AND a.facility_id =  decode(pa.TRN_ACROSS_FACILITY_YN,'Y',a.facility_id, c.facility_id) AND A.ORG_DOC_TYPE_CODE = C.DOC_TYPE_CODE AND A.ORG_DOC_NO = C.DOC_NO AND A.ORG_SEQ_NO = C.SEQ_NO AND A.ITEM_CODE = C.ITEM_CODE AND A.BATCH_ID = C.BATCH_ID AND A.EXPIRY_DATE_OR_RECEIPT_DATE = C.EXPIRY_DATE_OR_RECEIPT_DATE  AND  A.to_bin_location_code = C.bin_location_code  AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND /* (C.ISS_ITEM_QTY-C.RET_ITEM_QTY) > 0 AND */ A.FACILITY_ID = I.FACILITY_ID AND A.DOC_TYPE_CODE = I.DOC_TYPE_CODE AND A.DOC_NO = I.DOC_NO AND A.ITEM_CODE = I.ITEM_CODE AND A.DOC_NO = ? AND A.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) AND (C.FACILITY_ID = K.FACILITY_ID AND C.DOC_TYPE_CODE = K.DOC_TYPE_CODE AND C.DOC_NO = K.DOC_NO AND C.SEQ_NO = K.SEQ_NO ) AND F.LANGUAGE_ID = ? AND H.LANGUAGE_ID(+) = ? AND A.ITEM_CODE = ACK.ITEM_CODE(+) AND A.TRADE_ID = ACK.TRADE_ID(+) AND A.BATCH_ID = ACK.BATCH_ID(+) AND A.DOC_NO = ACK.DOC_NO(+) AND A.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND A.EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+) AND AM.UOM_CODE = F.GEN_UOM_CODE AND AM.LANGUAGE_ID = F.LANGUAGE_ID AND A.ITEM_CODE = L.ITEM_CODE AND A.STORE_CODE = L.STORE_CODE AND K.FM_STORE_CODE = M.STORE_CODE AND A.ITEM_CODE = M.ITEM_CODE AND A.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = A.ITEM_CODE ORDER BY A.DOC_SRL_NO",alParameters);
				
				 // commented by Rabbani #Inc no:40697(GHL-SCF-750) on  16-JUN-2013
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,A.FACILITY_ID,M.STOCK_ITEM_YN,A.DOC_NO RET_DOC_NO,K.FM_STORE_CODE TO_STORE_CODE, K.TO_STORE_CODE STORE_CODE, A.ITEM_CODE,F.SHORT_DESC ITEM_DESC, A.BATCH_ID,A.BIN_LOCATION_CODE ISSUE_TO_BIN_LOCATION_CODE,(CASE WHEN A.BIN_LOCATION_CODE IS NULL THEN NULL ELSE (SELECT SHORT_DESC FROM MM_BIN_LOCATION_LANG_VW WHERE BIN_LOCATION_CODE = A.BIN_LOCATION_CODE AND STORE_CODE = A.STORE_CODE AND LANGUAGE_ID = F.LANGUAGE_ID) END) TO_BIN_DESC,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) ISSUE_FM_BIN_LOCATION_CODE,       NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) NEW_BIN_LOCATION_CODE, TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_RECEIPT_DT,TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,A.TRADE_ID, NVL (H.LONG_NAME, A.TRADE_ID) TRADE_NAME, C.ISS_ITEM_QTY,NVL (C.RET_ITEM_QTY, 0) RET_ITEM_QTY, A.ITEM_QTY QTY,(C.ISS_ITEM_QTY - C.RET_ITEM_QTY) + A.ITEM_QTY AVAIL_QTY,A.ORG_DOC_TYPE_CODE ORG_DOC_TYPE_CODE, A.ORG_DOC_NO ISS_DOC_NO,A.ORG_SEQ_NO SEQ_NO, A.DOC_TYPE_CODE DOC_TYPE_CODE,A.DOC_NO DOC_NO,TRIM(ST_DISPLAY_COST_DECIMALS (L.ITEM_CODE, L.STORE_CODE )) ITEM_UNIT_COST, C.DOC_SRL_NO,TO_CHAR (K.DOC_DATE, 'DD/MM/YYYY') DOC_DATE, ACK.RECEIVED_QTY,(A.ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0) +NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY, A.ITEM_QTY ISSUE_QTY,L.DEF_ISSUE_UOM UOM_CODE,M.DEF_ISSUE_UOM TO_UOM_CODE,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, AM.SHORT_DESC UOM,A.BIN_LOCATION_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 FROM ST_ISSUE_RET_DTL_EXP A,ST_ISSUE_DTL_EXP C,ST_ISSUE_RET_HDR D,MM_ITEM_LANG_VW F,AM_TRADE_NAME_LANG_VW H,ST_ISSUE_RET_DTL I,ST_ISSUE_HDR K,ST_ACKNOWLEDGE_TRN_DTL ACK,AM_UOM_LANG_VW AM,ST_ITEM_STORE L,ST_ITEM_STORE M, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE A.ITEM_CODE = F.ITEM_CODE AND A.TRADE_ID = H.TRADE_ID(+) AND a.facility_id =  decode(pa.TRN_ACROSS_FACILITY_YN,'Y',a.facility_id, c.facility_id) AND A.ORG_DOC_TYPE_CODE = C.DOC_TYPE_CODE AND A.ORG_DOC_NO = C.DOC_NO AND A.ORG_SEQ_NO = C.SEQ_NO AND A.ITEM_CODE = C.ITEM_CODE AND A.BATCH_ID = C.BATCH_ID AND A.EXPIRY_DATE_OR_RECEIPT_DATE = C.EXPIRY_DATE_OR_RECEIPT_DATE  AND  A.to_bin_location_code = C.bin_location_code  AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND /* (C.ISS_ITEM_QTY-C.RET_ITEM_QTY) > 0 AND */ A.FACILITY_ID = I.FACILITY_ID AND A.DOC_TYPE_CODE = I.DOC_TYPE_CODE AND A.DOC_NO = I.DOC_NO AND A.ITEM_CODE = I.ITEM_CODE AND A.DOC_NO = ? AND A.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) AND (C.FACILITY_ID = K.FACILITY_ID AND C.DOC_TYPE_CODE = K.DOC_TYPE_CODE AND C.DOC_NO = K.DOC_NO AND C.SEQ_NO = K.SEQ_NO ) AND F.LANGUAGE_ID = ? AND H.LANGUAGE_ID(+) = ? AND A.ITEM_CODE = ACK.ITEM_CODE(+) AND A.TRADE_ID = ACK.TRADE_ID(+) AND A.BATCH_ID = ACK.BATCH_ID(+) AND A.DOC_NO = ACK.DOC_NO(+) AND A.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND A.EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+) AND AM.UOM_CODE = F.GEN_UOM_CODE AND AM.LANGUAGE_ID = F.LANGUAGE_ID AND A.ITEM_CODE = L.ITEM_CODE AND A.STORE_CODE = L.STORE_CODE AND K.FM_STORE_CODE = M.STORE_CODE AND A.ITEM_CODE = M.ITEM_CODE AND A.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = A.ITEM_CODE ORDER BY A.DOC_SRL_NO",alParameters);
				
				 // Added by Rabbani #Inc no:40697(GHL-SCF-750) on  16-JUN-2013
				//Added by suresh.r on 24-02-2014 against AMS-CRF-0054 beg
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,A.FACILITY_ID,M.STOCK_ITEM_YN,A.DOC_NO RET_DOC_NO,K.FM_STORE_CODE TO_STORE_CODE, K.TO_STORE_CODE STORE_CODE, A.ITEM_CODE,F.SHORT_DESC ITEM_DESC, A.BATCH_ID,A.BIN_LOCATION_CODE ISSUE_TO_BIN_LOCATION_CODE,(CASE WHEN A.BIN_LOCATION_CODE IS NULL THEN NULL ELSE (SELECT SHORT_DESC FROM MM_BIN_LOCATION_LANG_VW WHERE BIN_LOCATION_CODE = A.BIN_LOCATION_CODE AND STORE_CODE = A.STORE_CODE AND LANGUAGE_ID = F.LANGUAGE_ID) END) TO_BIN_DESC,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) ISSUE_FM_BIN_LOCATION_CODE,       NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) NEW_BIN_LOCATION_CODE, TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_RECEIPT_DT,TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,A.TRADE_ID, NVL (H.LONG_NAME, A.TRADE_ID) TRADE_NAME, C.ISS_ITEM_QTY,NVL (C.RET_ITEM_QTY, 0) RET_ITEM_QTY, A.ITEM_QTY QTY,(C.ISS_ITEM_QTY - C.RET_ITEM_QTY) + A.ITEM_QTY AVAIL_QTY,A.ORG_DOC_TYPE_CODE ORG_DOC_TYPE_CODE, A.ORG_DOC_NO ISS_DOC_NO,A.ORG_SEQ_NO SEQ_NO, A.DOC_TYPE_CODE DOC_TYPE_CODE,A.DOC_NO DOC_NO,TRIM(ST_DISPLAY_COST_DECIMALS (L.ITEM_CODE, L.STORE_CODE )) ITEM_UNIT_COST, C.DOC_SRL_NO,TO_CHAR (K.DOC_DATE, 'DD/MM/YYYY') DOC_DATE, ACK.RECEIVED_QTY,(A.ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0) +NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY, A.ITEM_QTY ISSUE_QTY,L.DEF_ISSUE_UOM UOM_CODE,M.DEF_ISSUE_UOM TO_UOM_CODE,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, AM.SHORT_DESC UOM,A.BIN_LOCATION_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 ,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE)DFLT_BINLOCATION_CODE FROM ST_ISSUE_RET_DTL_EXP A,ST_ISSUE_DTL_EXP C,ST_ISSUE_RET_HDR D,MM_ITEM_LANG_VW F,AM_TRADE_NAME_LANG_VW H,ST_ISSUE_RET_DTL I,ST_ISSUE_HDR K,ST_ACKNOWLEDGE_TRN_DTL ACK,AM_UOM_LANG_VW AM,ST_ITEM_STORE L,ST_ITEM_STORE M, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE A.ITEM_CODE = F.ITEM_CODE AND A.TRADE_ID = H.TRADE_ID(+) AND a.facility_id =  decode(pa.TRN_ACROSS_FACILITY_YN,'Y',a.facility_id, c.facility_id) AND A.ORG_DOC_TYPE_CODE = C.DOC_TYPE_CODE AND A.ORG_DOC_NO = C.DOC_NO AND A.ORG_SEQ_NO = C.SEQ_NO AND A.ITEM_CODE = C.ITEM_CODE AND A.BATCH_ID = C.BATCH_ID AND A.EXPIRY_DATE_OR_RECEIPT_DATE = C.EXPIRY_DATE_OR_RECEIPT_DATE  AND  A.to_bin_location_code = C.bin_location_code  AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND /* (C.ISS_ITEM_QTY-C.RET_ITEM_QTY) > 0 AND */ A.FACILITY_ID = I.FACILITY_ID AND A.DOC_TYPE_CODE = I.DOC_TYPE_CODE AND A.DOC_NO = I.DOC_NO AND A.ITEM_CODE = I.ITEM_CODE AND A.DOC_NO = ? AND A.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) AND (C.FACILITY_ID = K.FACILITY_ID AND C.DOC_TYPE_CODE = K.DOC_TYPE_CODE AND C.DOC_NO = K.DOC_NO AND C.SEQ_NO = K.SEQ_NO ) AND F.LANGUAGE_ID = ? AND H.LANGUAGE_ID(+) = ? AND A.ITEM_CODE = ACK.ITEM_CODE(+) AND A.TRADE_ID = ACK.TRADE_ID(+) AND A.BATCH_ID = ACK.BATCH_ID(+) AND A.DOC_NO = ACK.DOC_NO(+) AND A.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND A.EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+) AND AM.UOM_CODE = F.GEN_UOM_CODE AND AM.LANGUAGE_ID = F.LANGUAGE_ID AND A.ITEM_CODE = L.ITEM_CODE AND A.STORE_CODE = L.STORE_CODE AND K.FM_STORE_CODE = M.STORE_CODE AND A.ITEM_CODE = M.ITEM_CODE AND A.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = A.ITEM_CODE ORDER BY A.DOC_SRL_NO",alParameters);
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,A.FACILITY_ID,M.STOCK_ITEM_YN,A.DOC_NO RET_DOC_NO,K.FM_STORE_CODE TO_STORE_CODE, K.TO_STORE_CODE STORE_CODE, A.ITEM_CODE,F.SHORT_DESC ITEM_DESC, A.BATCH_ID,A.BIN_LOCATION_CODE ISSUE_TO_BIN_LOCATION_CODE,(CASE WHEN A.BIN_LOCATION_CODE IS NULL THEN NULL ELSE (SELECT SHORT_DESC FROM MM_BIN_LOCATION_LANG_VW WHERE BIN_LOCATION_CODE = A.BIN_LOCATION_CODE AND STORE_CODE = A.STORE_CODE AND LANGUAGE_ID = F.LANGUAGE_ID) END) TO_BIN_DESC,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) ISSUE_FM_BIN_LOCATION_CODE,       NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) NEW_BIN_LOCATION_CODE, TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_RECEIPT_DT,TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,A.TRADE_ID, NVL (H.LONG_NAME, A.TRADE_ID) TRADE_NAME, C.ISS_ITEM_QTY,NVL (C.RET_ITEM_QTY, 0) RET_ITEM_QTY, A.ITEM_QTY QTY,(C.ISS_ITEM_QTY - C.RET_ITEM_QTY) + A.ITEM_QTY AVAIL_QTY,A.ORG_DOC_TYPE_CODE ORG_DOC_TYPE_CODE, A.ORG_DOC_NO ISS_DOC_NO,A.ORG_SEQ_NO SEQ_NO, A.DOC_TYPE_CODE DOC_TYPE_CODE,A.DOC_NO DOC_NO,TRIM(ST_DISPLAY_COST_DECIMALS (L.ITEM_CODE, L.STORE_CODE )) ITEM_UNIT_COST, A.DOC_SRL_NO,TO_CHAR (K.DOC_DATE, 'DD/MM/YYYY') DOC_DATE, ACK.RECEIVED_QTY,(A.ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0) +NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY, A.ITEM_QTY ISSUE_QTY,L.DEF_ISSUE_UOM UOM_CODE,M.DEF_ISSUE_UOM TO_UOM_CODE,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, AM.SHORT_DESC UOM,A.BIN_LOCATION_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 ,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE)DFLT_BINLOCATION_CODE FROM ST_ISSUE_RET_DTL_EXP A,ST_ISSUE_DTL_EXP C,ST_ISSUE_RET_HDR D,MM_ITEM_LANG_VW F,AM_TRADE_NAME_LANG_VW H,ST_ISSUE_RET_DTL I,ST_ISSUE_HDR K,ST_ACKNOWLEDGE_TRN_DTL ACK,AM_UOM_LANG_VW AM,ST_ITEM_STORE L,ST_ITEM_STORE M, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE A.ITEM_CODE = F.ITEM_CODE AND A.TRADE_ID = H.TRADE_ID(+) AND a.facility_id =  decode(pa.TRN_ACROSS_FACILITY_YN,'Y',a.facility_id, c.facility_id) AND A.ORG_DOC_TYPE_CODE = C.DOC_TYPE_CODE AND A.ORG_DOC_NO = C.DOC_NO AND A.ORG_SEQ_NO = C.SEQ_NO AND A.ITEM_CODE = C.ITEM_CODE AND A.BATCH_ID = C.BATCH_ID AND A.EXPIRY_DATE_OR_RECEIPT_DATE = C.EXPIRY_DATE_OR_RECEIPT_DATE  AND  A.to_bin_location_code = C.bin_location_code  AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND /* (C.ISS_ITEM_QTY-C.RET_ITEM_QTY) > 0 AND */ A.FACILITY_ID = I.FACILITY_ID AND A.DOC_TYPE_CODE = I.DOC_TYPE_CODE AND A.DOC_NO = I.DOC_NO AND A.ITEM_CODE = I.ITEM_CODE AND A.DOC_NO = ? AND A.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) AND (C.FACILITY_ID = K.FACILITY_ID AND C.DOC_TYPE_CODE = K.DOC_TYPE_CODE AND C.DOC_NO = K.DOC_NO AND C.SEQ_NO = K.SEQ_NO ) AND F.LANGUAGE_ID = ? AND H.LANGUAGE_ID(+) = ? AND A.ITEM_CODE = ACK.ITEM_CODE(+) AND A.TRADE_ID = ACK.TRADE_ID(+) AND A.BATCH_ID = ACK.BATCH_ID(+) AND A.DOC_NO = ACK.DOC_NO(+) AND A.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+) AND A.EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+) AND AM.UOM_CODE = F.GEN_UOM_CODE AND AM.LANGUAGE_ID = F.LANGUAGE_ID AND A.ITEM_CODE = L.ITEM_CODE AND A.STORE_CODE = L.STORE_CODE AND K.FM_STORE_CODE = M.STORE_CODE AND A.ITEM_CODE = M.ITEM_CODE AND A.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = A.ITEM_CODE ORDER BY A.DOC_SRL_NO",alParameters);
				//Added by suresh.r on 18-04-2014 against #Inc 48674
				//this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,A.FACILITY_ID,M.STOCK_ITEM_YN,A.DOC_NO RET_DOC_NO,K.FM_STORE_CODE TO_STORE_CODE, K.TO_STORE_CODE STORE_CODE, A.ITEM_CODE,F.SHORT_DESC ITEM_DESC, A.BATCH_ID,A.BIN_LOCATION_CODE ISSUE_TO_BIN_LOCATION_CODE,(CASE WHEN A.BIN_LOCATION_CODE IS NULL THEN NULL ELSE (SELECT SHORT_DESC FROM MM_BIN_LOCATION_LANG_VW WHERE BIN_LOCATION_CODE = A.BIN_LOCATION_CODE AND STORE_CODE = A.STORE_CODE AND LANGUAGE_ID = F.LANGUAGE_ID) END) TO_BIN_DESC,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) ISSUE_FM_BIN_LOCATION_CODE,       NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) NEW_BIN_LOCATION_CODE, TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_RECEIPT_DT,TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,A.TRADE_ID, NVL (H.LONG_NAME, A.TRADE_ID) TRADE_NAME, C.ISS_ITEM_QTY,NVL (C.RET_ITEM_QTY, 0) RET_ITEM_QTY, A.ITEM_QTY QTY,(C.ISS_ITEM_QTY - C.RET_ITEM_QTY) + A.ITEM_QTY AVAIL_QTY,A.ORG_DOC_TYPE_CODE ORG_DOC_TYPE_CODE, A.ORG_DOC_NO ISS_DOC_NO,A.ORG_SEQ_NO SEQ_NO, A.DOC_TYPE_CODE DOC_TYPE_CODE,A.DOC_NO DOC_NO,TRIM(ST_DISPLAY_COST_DECIMALS (L.ITEM_CODE, L.STORE_CODE )) ITEM_UNIT_COST, A.DOC_SRL_NO,TO_CHAR (K.DOC_DATE, 'DD/MM/YYYY') DOC_DATE, ACK.RECEIVED_QTY,(A.ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0) +NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY, A.ITEM_QTY ISSUE_QTY,L.DEF_ISSUE_UOM UOM_CODE,M.DEF_ISSUE_UOM TO_UOM_CODE,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND DOC_SRL_NO = ACK.DOC_SRL_NO AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND DOC_SRL_NO = ACK.DOC_SRL_NO AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, AM.SHORT_DESC UOM,A.BIN_LOCATION_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 ,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE)DFLT_BINLOCATION_CODE FROM ST_ISSUE_RET_DTL_EXP A,ST_ISSUE_DTL_EXP C,ST_ISSUE_RET_HDR D,MM_ITEM_LANG_VW F,AM_TRADE_NAME_LANG_VW H,ST_ISSUE_RET_DTL I,ST_ISSUE_HDR K,ST_ACKNOWLEDGE_TRN_DTL ACK,AM_UOM_LANG_VW AM,ST_ITEM_STORE L,ST_ITEM_STORE M, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE A.ITEM_CODE = F.ITEM_CODE AND A.TRADE_ID = H.TRADE_ID(+) AND a.facility_id =  decode(pa.TRN_ACROSS_FACILITY_YN,'Y',a.facility_id, c.facility_id) AND A.ORG_DOC_TYPE_CODE = C.DOC_TYPE_CODE AND A.ORG_DOC_NO = C.DOC_NO AND A.ORG_SEQ_NO = C.SEQ_NO AND A.ITEM_CODE = C.ITEM_CODE AND A.BATCH_ID = C.BATCH_ID AND A.EXPIRY_DATE_OR_RECEIPT_DATE = C.EXPIRY_DATE_OR_RECEIPT_DATE  AND  A.to_bin_location_code = C.bin_location_code  AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND /* (C.ISS_ITEM_QTY-C.RET_ITEM_QTY) > 0 AND */ A.FACILITY_ID = I.FACILITY_ID AND A.DOC_TYPE_CODE = I.DOC_TYPE_CODE AND A.DOC_NO = I.DOC_NO AND A.ITEM_CODE = I.ITEM_CODE AND A.DOC_NO = ? AND A.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) AND (C.FACILITY_ID = K.FACILITY_ID AND C.DOC_TYPE_CODE = K.DOC_TYPE_CODE AND C.DOC_NO = K.DOC_NO AND C.SEQ_NO = K.SEQ_NO ) AND F.LANGUAGE_ID = ? AND H.LANGUAGE_ID(+) = ? AND A.ITEM_CODE = ACK.ITEM_CODE(+) AND A.TRADE_ID = ACK.TRADE_ID(+) AND A.BATCH_ID = ACK.BATCH_ID(+) AND A.DOC_NO = ACK.DOC_NO(+) AND A.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+)  AND A.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND A.EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+) AND AM.UOM_CODE = F.GEN_UOM_CODE AND AM.LANGUAGE_ID = F.LANGUAGE_ID AND A.ITEM_CODE = L.ITEM_CODE AND A.STORE_CODE = L.STORE_CODE AND K.FM_STORE_CODE = M.STORE_CODE AND A.ITEM_CODE = M.ITEM_CODE AND A.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = A.ITEM_CODE ORDER BY A.ITEM_CODE",alParameters);
				//Added by suresh.r on 24-02-2014 against AMS-CRF-0054 end
				//Modified by Sakti added st_display_unit_cost for item_unit_cost against inc#50521
				//Modified by suresh.r on 13-11-2014 against Inc 52256(Added 2 args to ST_DISPLAY_UNIT_COST)
				this.alTFRExpRecords = fetchRecords("SELECT NVL(N.ALLOW_DECIMALS_YN,'N') ALLOW_DECIMALS_YN,A.FACILITY_ID,M.STOCK_ITEM_YN,A.DOC_NO RET_DOC_NO,K.FM_STORE_CODE TO_STORE_CODE, K.TO_STORE_CODE STORE_CODE, A.ITEM_CODE,F.SHORT_DESC ITEM_DESC, A.BATCH_ID,A.BIN_LOCATION_CODE ISSUE_TO_BIN_LOCATION_CODE,(CASE WHEN A.BIN_LOCATION_CODE IS NULL THEN NULL ELSE (SELECT SHORT_DESC FROM MM_BIN_LOCATION_LANG_VW WHERE BIN_LOCATION_CODE = A.BIN_LOCATION_CODE AND STORE_CODE = A.STORE_CODE AND LANGUAGE_ID = F.LANGUAGE_ID) END) TO_BIN_DESC,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) ISSUE_FM_BIN_LOCATION_CODE,       NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE) NEW_BIN_LOCATION_CODE, TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_RECEIPT_DT,TO_CHAR (A.EXPIRY_DATE_OR_RECEIPT_DATE, 'DD/MM/YYYY') EXPIRY_DATE,A.TRADE_ID, NVL (H.LONG_NAME, A.TRADE_ID) TRADE_NAME, C.ISS_ITEM_QTY,NVL (C.RET_ITEM_QTY, 0) RET_ITEM_QTY, A.ITEM_QTY QTY,(C.ISS_ITEM_QTY - C.RET_ITEM_QTY) + A.ITEM_QTY AVAIL_QTY,A.ORG_DOC_TYPE_CODE ORG_DOC_TYPE_CODE, A.ORG_DOC_NO ISS_DOC_NO,A.ORG_SEQ_NO SEQ_NO, A.DOC_TYPE_CODE DOC_TYPE_CODE,A.DOC_NO DOC_NO,/*TRIM(ST_DISPLAY_COST_DECIMALS (L.ITEM_CODE, L.STORE_CODE )) ITEM_UNIT_COST*/ TRIM(ST_DISPLAY_UNIT_COST(L.ITEM_CODE,SYSDATE,'CURRENT_STOCK')* ST_GET_UOM_CONV_FAC_SING_STR(L.ITEM_CODE, L.STORE_CODE)) ITEM_UNIT_COST, A.DOC_SRL_NO,TO_CHAR (K.DOC_DATE, 'DD/MM/YYYY') DOC_DATE, ACK.RECEIVED_QTY,(A.ITEM_QTY - (NVL(ACK.RECEIVED_QTY,0)+NVL(ACK.REJECTED_QTY,0)+NVL(ACK.TMP_RECEIVED_QTY_1,0) +NVL(ACK.TMP_REJECTED_QTY_1,0)+NVL(ACK.TMP_RECEIVED_QTY_2,0)+NVL(ACK.TMP_REJECTED_QTY_2,0))) PEN_RCD_QTY,ACK.REJECTED_QTY, A.ITEM_QTY ISSUE_QTY,L.DEF_ISSUE_UOM UOM_CODE,M.DEF_ISSUE_UOM TO_UOM_CODE,DECODE(?,'A', ACK.REMARKS,(SELECT REMARKS FROM ST_ACKNOWLEDGE_TRN_DTL_LOG ACK1 WHERE ACK1.MODIFIED_DATE = (SELECT MAX (MODIFIED_DATE) FROM ST_ACKNOWLEDGE_TRN_DTL_LOG WHERE DOC_NO = ACK.DOC_NO AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND DOC_SRL_NO = ACK.DOC_SRL_NO AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)AND REJECTED_QTY > 0 AND ITEM_CODE = ACK.ITEM_CODE AND SEQ_NO = ACK.SEQ_NO AND DOC_TYPE_CODE = ACK.DOC_TYPE_CODE AND DOC_SRL_NO = ACK.DOC_SRL_NO AND BATCH_ID = ACK.BATCH_ID AND BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE AND EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE)) REMARKS, AM.SHORT_DESC UOM,A.BIN_LOCATION_CODE,ACK.TMP_RECEIVED_QTY_1,ACK.TMP_RECEIVED_QTY_2,ACK.TMP_REJECTED_QTY_1,ACK.TMP_REJECTED_QTY_2 ,NVL(ACK.NEW_BIN_LOCATION_CODE,C.BIN_LOCATION_CODE)DFLT_BINLOCATION_CODE FROM ST_ISSUE_RET_DTL_EXP A,ST_ISSUE_DTL_EXP C,ST_ISSUE_RET_HDR D,MM_ITEM_LANG_VW F,AM_TRADE_NAME_LANG_VW H,ST_ISSUE_RET_DTL I,ST_ISSUE_HDR K,ST_ACKNOWLEDGE_TRN_DTL ACK,AM_UOM_LANG_VW AM,ST_ITEM_STORE L,ST_ITEM_STORE M, ST_ACC_ENTITY_PARAM PA,ST_ITEM N WHERE A.ITEM_CODE = F.ITEM_CODE AND A.TRADE_ID = H.TRADE_ID(+) AND a.facility_id =  decode(pa.TRN_ACROSS_FACILITY_YN,'Y',a.facility_id, c.facility_id) AND A.ORG_DOC_TYPE_CODE = C.DOC_TYPE_CODE AND A.ORG_DOC_NO = C.DOC_NO AND A.ORG_SEQ_NO = C.SEQ_NO AND A.ITEM_CODE = C.ITEM_CODE AND A.BATCH_ID = C.BATCH_ID AND A.EXPIRY_DATE_OR_RECEIPT_DATE = C.EXPIRY_DATE_OR_RECEIPT_DATE  AND  A.to_bin_location_code = C.bin_location_code  AND A.FACILITY_ID = D.FACILITY_ID AND A.DOC_TYPE_CODE = D.DOC_TYPE_CODE AND A.DOC_NO = D.DOC_NO AND /* (C.ISS_ITEM_QTY-C.RET_ITEM_QTY) > 0 AND */ A.FACILITY_ID = I.FACILITY_ID AND A.DOC_TYPE_CODE = I.DOC_TYPE_CODE AND A.DOC_NO = I.DOC_NO AND A.ITEM_CODE = I.ITEM_CODE AND A.DOC_NO = ? AND A.DOC_TYPE_CODE = ? /*AND HDR.FACILITY_ID = 'DF'*/ AND ((PA.TRN_ACROSS_FACILITY_YN='Y') OR A.FACILITY_ID = ?) AND (C.FACILITY_ID = K.FACILITY_ID AND C.DOC_TYPE_CODE = K.DOC_TYPE_CODE AND C.DOC_NO = K.DOC_NO AND C.SEQ_NO = K.SEQ_NO ) AND F.LANGUAGE_ID = ? AND H.LANGUAGE_ID(+) = ? AND A.ITEM_CODE = ACK.ITEM_CODE(+) AND A.TRADE_ID = ACK.TRADE_ID(+) AND A.BATCH_ID = ACK.BATCH_ID(+) AND A.DOC_NO = ACK.DOC_NO(+) AND A.DOC_TYPE_CODE = ACK.DOC_TYPE_CODE(+)  AND A.DOC_SRL_NO = ACK.DOC_SRL_NO(+) AND A.EXPIRY_DATE_OR_RECEIPT_DATE = ACK.EXPIRY_DATE_OR_RECEIPT_DATE(+) AND AM.UOM_CODE = F.GEN_UOM_CODE AND AM.LANGUAGE_ID = F.LANGUAGE_ID AND A.ITEM_CODE = L.ITEM_CODE AND A.STORE_CODE = L.STORE_CODE AND K.FM_STORE_CODE = M.STORE_CODE AND A.ITEM_CODE = M.ITEM_CODE AND A.BIN_LOCATION_CODE = ACK.BIN_LOCATION_CODE(+) AND NVL(ISSUE_QTY,ITEM_QTY) - (  NVL (ACK.RECEIVED_QTY, 0) + NVL (ACK.REJECTED_QTY, 0)) > 0 AND N.ITEM_CODE = A.ITEM_CODE ORDER BY A.ITEM_CODE",alParameters);
			
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		ArrayList<HashMap> alExpRecords = new ArrayList();
		ArrayList<HashMap> alDumExpRecords = new ArrayList();
		for(int i=0,j=0;i<alTFRExpRecords.size();i++){
			hmTemp = (HashMap)alTFRExpRecords.get(i);
			hmTemp.put("doc_srl_no",(String)hmTemp.get("DOC_SRL_NO"));
			hmTemp.put("uom_code",(String)hmTemp.get("UOM_CODE"));
			hmTemp.put("item_unit_cost",(String)hmTemp.get("ITEM_UNIT_COST"));
			if(getAction_type().equals("A")){
				double pending_qty = Double.parseDouble(checkForNull((String)hmTemp.get("PEN_RCD_QTY"),"0"))+Double.parseDouble(checkForNull((String)hmTemp.get("TMP_RECEIVED_QTY_1"),"0"))+Double.parseDouble(checkForNull((String)hmTemp.get("TMP_REJECTED_QTY_1"),"0"));
				if(pending_qty>0){
					alExpRecords.add(j++,hmTemp);
				}else{
					alDumExpRecords.add(hmTemp);
				}
			}else if(getAction_type().equals("C")){
				double pending_qty = Double.parseDouble(checkForNull((String)hmTemp.get("TMP_RECEIVED_QTY_2"),"0"))+Double.parseDouble(checkForNull((String)hmTemp.get("TMP_REJECTED_QTY_2"),"0"));
				if(pending_qty>0){
					alExpRecords.add(j++,hmTemp);
				}else{
					alDumExpRecords.add(hmTemp);
				}
			}else{
				alExpRecords.add(i,hmTemp);
			}
		}
		hmTFRExpRecords.put(doc_no+"~"+seq_no,alExpRecords);
		hmDumTFRExpRecords.put(doc_no+"~"+seq_no,alDumExpRecords);
	}
	public void setAll(Hashtable hashtable) {
    }
	public void  clear() {
		super.clear();
		alTFRDtlRecords= new ArrayList();
		alTFRExpRecords= new ArrayList();
		hmTFRExpRecords = new HashMap();
		hmFinalTFRExpRecords = new HashMap();
		hmDumTFRExpRecords	 = new HashMap();
	}
	public HashMap validate() throws Exception{
		HashMap hmReturn = getMessageHashMap(true);	
		String adj_doc_type_code = (String)fetchRecord("SELECT DEF_ADJ_DOC_TYPE_CODE DOC_TYPE_CODE FROM ST_FACILITY_PARAM WHERE FACILITY_ID = ? AND MATERIAL_GROUP_CODE = 'ALL'", getLoginFacilityId()).get("DOC_TYPE_CODE");
		if (checkForNull(adj_doc_type_code).equals("")) {
			hmReturn.put(RESULT, FALSE);
			hmReturn.put(MESSAGE, getSTMessage(getLanguageId(),"DEF_ADJ_DOC_TYPE_CODE_NOT_SELECTED","ST"));
			return hmReturn;
		}
		HashMap hmRecord	=	fetchRecord(getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT"),adj_doc_type_code);
		if (checkForNull((String)hmRecord.get("NEXT_DOC_NO")).equals("")) {
			hmReturn.put(RESULT, FALSE);
			hmReturn.put(MESSAGE, getSTMessage(getLanguageId(),"SYS_GEN_DOC_NO_NOT_SELECTED","ST"));
		}
		return hmReturn;
	}
	public HashMap insert(){

		String doc_no				=   "";
		String confirm				=   "Y";
		String confirm_date			=   "";
		Boolean exist				=	true;
		HashMap hmSQLMap			=	new HashMap();
		HashMap hmTableData			=	new HashMap();
		HashMap hmDtlRecords		=	new HashMap();
		HashMap hmTemp				=	new HashMap();
		HashMap hmTemp2				=	new HashMap();  //Added for AMS-SCF-0692
		HashMap hmDtlTemp			=	new HashMap();

		ArrayList alAckHdrData		=	new ArrayList();
		ArrayList alAckDTLData		=	new ArrayList();
		ArrayList alHdrData			=	new ArrayList();
		ArrayList alDtlData			=	new ArrayList();
		ArrayList alCommonData		=	new ArrayList();
		ArrayList alDtlExpRecords	=	new ArrayList();
		ArrayList allanguageData	=	new ArrayList();
		ArrayList alTmpDtlRecords	=	new ArrayList();
		ArrayList alTmpExpRecords	=	new ArrayList();
		ArrayList alTemp			=	new ArrayList();
		ArrayList alTmpExp			=	new ArrayList();
		ArrayList alParam			=	new ArrayList();
		ArrayList alParam2			=	new ArrayList();   //Added for AMS-SCF-0692
		ArrayList alModAckHdrData	=	new ArrayList();
		ArrayList alModAckDtlData	=	new ArrayList();
		ArrayList alReverseFinalYN	=	new ArrayList();
		ArrayList alReverseYN		=	new ArrayList();
		hmSQLMap=stockSQL();

		allanguageData.add(getLanguageId());

		alCommonData.add(getLoginById()			);
		alCommonData.add(getLoginAtWsNo()		);
		alCommonData.add(getLoginFacilityId()	);
		alCommonData.add(getDoc_type_code()		);
		alCommonData.add(getTrn_type()			);
		HashMap hmResult = new HashMap();
		try{
			for(int i=0;i<alTFRDtlRecords.size();i++){
				hmDtlRecords = (HashMap)alTFRDtlRecords.get(i);
				if(hmFinalTFRExpRecords.containsKey((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))){
					/*Dummy exp records are added*/
					if(hmDumTFRExpRecords.containsKey((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))){
						ArrayList alTempExp = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
						ArrayList alDumTempExp = (ArrayList)hmDumTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
						for(int x=0;x<alDumTempExp.size();x++){
							alTempExp.add(alDumTempExp.get(x));
						}
						hmFinalTFRExpRecords.put(((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO")),alTempExp);
					}
					/*Dummy Exp add ends*/
					String chkParameters[] = {getLoginFacilityId(),(String)hmDtlRecords.get("DOC_NO"),getDoc_type_code()};
					if(getTrn_type().equals("TFR")){
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ORG_TFR_DTL_SELECT"),chkParameters);
					}else if(getTrn_type().equals("URG")||getTrn_type().equals("ISS")){
						String chkParameters1[] = {getLoginFacilityId(),(String)hmDtlRecords.get("DOC_NO"),getDoc_type_code(),(String)hmDtlRecords.get("SEQ_NO")};
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ORG_URG_ISS_DTL_SELECT"),chkParameters1);
					}else if(getTrn_type().equals("RET")){
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ORG_RET_DTL_SELECT"),chkParameters);
					}
					for(int j=0;j<alTemp.size();j++){
						if(!doc_no.equals((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))){
							confirm = "Y";
							confirm_date = com.ehis.util.DateUtils.getCurrentDate("DMY","en");
							hmTemp = (HashMap)alTemp.get(j);
							alParam = new ArrayList();
							alParam2 = new ArrayList(); //Added for AMS-SCF-0692
							alParam.add(getLoginFacilityId());
							alParam2.add((String)hmTemp.get("FACILITY_ID")); //Added for AMS-SCF-0692//modified for IN070369
							alParam.add((String)hmDtlRecords.get("DOC_NO"));
							alParam2.add((String)hmDtlRecords.get("DOC_NO")); //Added for AMS-SCF-0692
							alParam.add(getDoc_type_code());
							alParam2.add(getDoc_type_code()); //Added for AMS-SCF-0692
							if(hmDtlRecords.containsKey("SEQ_NO")){
								alParam.add((String)hmDtlRecords.get("SEQ_NO"));
								alParam2.add((String)hmDtlRecords.get("SEQ_NO")); //Added for AMS-SCF-0692
							}else{
								alParam.add("1");
								alParam2.add("1"); //Added for AMS-SCF-0692
							}
							int count = Integer.parseInt((String)(((HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_HDR_COUNT_SELECT"),alParam)).get("COUNT")));
                                        alCommonData.add((String)hmTemp.get("FACILITY_ID"));                       alCommonData.add(getAction_type()); //Added by Rabbani #inc no:33205  						
                                                        if(count>0){
								
								alTmpDtlRecords = new ArrayList();
								alTmpExp = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
								alTmpDtlRecords.add("");
								alTmpDtlRecords.add("");
								for(int k=0;k<alTmpExp.size();k++){
								//Added for AMS-SCF-0692 start
									String doc_sl_no =((String)((HashMap)alTmpExp.get(k)).get("DOC_SRL_NO"));
									String item_code =((String)((HashMap)alTmpExp.get(k)).get("ITEM_CODE"));
									String batch_id =((String)((HashMap)alTmpExp.get(k)).get("BATCH_ID"));
									String expiry_date =((String)((HashMap)alTmpExp.get(k)).get("EXPIRY_DATE"));
									String bin_location_code =((String)((HashMap)alTmpExp.get(k)).get("BIN_LOCATION_CODE"));
									alParam2.add(doc_sl_no);
									alParam2.add(item_code);
									alParam2.add(batch_id);
									alParam2.add(expiry_date);
									alParam2.add(bin_location_code);
									hmTemp2 = (HashMap)fetchRecord(getStRepositoryValue("SQL_ST_MULTIUSER"),alParam2);
									double iss_qty = Double.parseDouble((String)(hmTemp2.get("ISSUE_QTY")));
									double ack_qty = Double.parseDouble((String)(hmTemp2.get("ACK_QTY")));
									alParam2.remove(8);
									alParam2.remove(7);
									alParam2.remove(6);
									alParam2.remove(5);
									alParam2.remove(4);
									//double rej_qty = Double.parseDouble((checkForNull((String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_1"))).equals("")?"0":(String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_1"))+Double.parseDouble((checkForNull((String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_2"))).equals("")?"0":(String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_2"));
									double pen_qty = Double.parseDouble((String)((HashMap)alTmpExp.get(k)).get("PEN_RCD_QTY"));
									double recv_qty = Double.parseDouble((String)((HashMap)alTmpExp.get(k)).get("TMP_RECEIVED_QTY_1"));
									double rej_qty = Double.parseDouble((String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_1"));
									double total = pen_qty + recv_qty + rej_qty;
									double cut_off =iss_qty - ack_qty - total;
									if(cut_off < 0){
										throw new Exception("RECORD_UPDATED_BY_OTH_USER1");
									}
									//Added for AMS-SCF-0692 end	
									if((pen_qty > 0) ||(rej_qty > 0)){
										confirm = "N";
										confirm_date = "";
										break;
									}
								}
								if(((String)((HashMap)alTmpExp.get(0)).get("ENTRY_COMPLETED")).equals("Y")){
									alTmpDtlRecords.add((String)((HashMap)alTmpExp.get(0)).get("ENTRY_COMPLETED"));
									alTmpDtlRecords.add(confirm);
									if(confirm.equals("Y"))
										alTmpDtlRecords.add(confirm_date);
									else
										alTmpDtlRecords.add("");
								}else{
									alTmpDtlRecords.add("");
									alTmpDtlRecords.add("N");
									alTmpDtlRecords.add("");
								}
																
								alTmpDtlRecords.add(getLoginById());
								alTmpDtlRecords.add(getLoginAtWsNo());
								alTmpDtlRecords.add(getLoginFacilityId());
								alTmpDtlRecords.add(hmTemp.get("DOC_NO"));
								alTmpDtlRecords.add(getDoc_type_code());
								if(hmTemp.containsKey("SEQ_NO"))
									alTmpDtlRecords.add(hmTemp.get("SEQ_NO"));
								else
									alTmpDtlRecords.add("1");
								alModAckHdrData.add(alTmpDtlRecords);
							}else{
								alTmpDtlRecords = new ArrayList();
								//alTmpDtlRecords.add(getLoginFacilityId()); FACILITY_ID
								alTmpDtlRecords.add(hmTemp.get("FACILITY_ID"));
								alTmpDtlRecords.add(getDoc_type_code());
								alTmpDtlRecords.add(hmTemp.get("DOC_NO"));
								alTmpDtlRecords.add((String)hmDtlRecords.get("DOC_DATE"));
								alTmpDtlRecords.add(getTrn_type());
								alTmpDtlRecords.add((String)hmDtlRecords.get("FM_STORE_CODE"));
								alTmpDtlRecords.add((String)hmDtlRecords.get("TO_STORE_CODE"));
								alTmpExp = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
								alTmpDtlRecords.add((String)((HashMap)alTmpExp.get(0)).get("ENTRY_COMPLETED"));
								alTmpDtlRecords.add("");
								alTmpDtlRecords.add("");
								for(int k=0;k<alTmpExp.size();k++){
									//String rej_qty = (checkForNull((String)((HashMap)alTmpExp.get(k)).get("REJECTED_QTY"))).equals("")?"0":(String)((HashMap)alTmpExp.get(k)).get("REJECTED_QTY");
									double rej_qty = Double.parseDouble((checkForNull((String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_1"))).equals("")?"0":(String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_1"))+Double.parseDouble((checkForNull((String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_2"))).equals("")?"0":(String)((HashMap)alTmpExp.get(k)).get("TMP_REJECTED_QTY_2"));
									double pen_qty = Double.parseDouble((String)((HashMap)alTmpExp.get(k)).get("PEN_RCD_QTY"));
									if( (pen_qty > 0) ||(rej_qty > 0)){
										confirm = "N";
										confirm_date = "";
										break;
									}
								}
								if(((String)((HashMap)alTmpExp.get(0)).get("ENTRY_COMPLETED")).equals("Y")){
									alTmpDtlRecords.add(confirm);
									if(confirm.equals("Y"))
										alTmpDtlRecords.add(confirm_date);
									else
										alTmpDtlRecords.add("");
								}else{
									alTmpDtlRecords.add("N");
									alTmpDtlRecords.add("");
								}
								alTmpDtlRecords.add(getLoginById());
								alTmpDtlRecords.add(getLoginAtWsNo());
								alTmpDtlRecords.add(getLoginFacilityId());
								alTmpDtlRecords.add(getLoginById());
								alTmpDtlRecords.add(getLoginAtWsNo());
								alTmpDtlRecords.add(getLoginFacilityId());
								if(hmTemp.containsKey("SEQ_NO"))
									alTmpDtlRecords.add(hmTemp.get("SEQ_NO"));
								else
									alTmpDtlRecords.add("1");
								
								alAckHdrData.add(alTmpDtlRecords);

							}
							doc_no = (String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO");
						}
					}
					alTmpExpRecords = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
					exist = true;
					for(int k=0;k<alTmpExpRecords.size();k++){
						
					double rejected_qty		= Double.parseDouble(checkForNull((String)((HashMap)alTmpExpRecords.get(k)).get("REJECTED_QTY"),"0"));
					if(rejected_qty > 0){
								exist = false;
						}else if((checkForNull((String)((HashMap)alTmpExpRecords.get(k)).get("ENTRY_COMPLETED"),"Y")).equals("N")){
							exist = false;
						}
						double pen_rcd_qty		= Double.parseDouble((String)((HashMap)alTmpExpRecords.get(k)).get("PEN_RCD_QTY"));
						if(pen_rcd_qty > 0 && exist){
							if(!alReverseFinalYN.contains((String)((HashMap)alTmpExpRecords.get(k)).get("DOC_NO"))){
								alReverseFinalYN.add((String)((HashMap)alTmpExpRecords.get(k)).get("DOC_TYPE_CODE"));
								alReverseFinalYN.add((String)((HashMap)alTmpExpRecords.get(k)).get("DOC_NO"));
							}
						}
					}
					if(!exist){
						for (int j = 0; j < alReverseFinalYN.size() ; j++) {
							if(((String)alReverseFinalYN.get(j)).equals((String)hmDtlRecords.get("DOC_NO"))){
								alReverseFinalYN.remove(j);
								alReverseFinalYN.remove(j-1);
							}
						}
					}
					for(int j=0;j<alTmpExpRecords.size();j++){
						hmTemp = (HashMap)alTmpExpRecords.get(j);
						alParam = new ArrayList();
						alParam.add(getLoginFacilityId());
						alParam.add((String)hmDtlRecords.get("DOC_NO"));
						alParam.add(getDoc_type_code());
						if(hmDtlRecords.containsKey("SEQ_NO")){
							alParam.add((String)hmDtlRecords.get("SEQ_NO"));
						}else{
							alParam.add("1");
						}
						if(((String)hmTemp.get("TMP_REJECTED_QTY_1")).equals("")){
							hmTemp.put("TMP_REJECTED_QTY_1","0");
						}
						int count = Integer.parseInt((String)(((HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_DTL_COUNT_SELECT"),alParam)).get("COUNT")));
						if(count>0){
							alTemp = new ArrayList();
							if(exist){
								alTemp.add((String)hmTemp.get("RECEIVED_QTY"));
							}else{
								alTemp.add("0");
							}
							alTemp.add((String)hmTemp.get("REMARKS"));
							alTemp.add(checkForNull((String)hmTemp.get("NEW_BIN_LOCATION_CODE")));
							alTemp.add("0");
							if(exist){
								alTemp.add("0");
								alTemp.add("0");
								alTemp.add("0");
								alTemp.add("0");
							}else if(((String)((HashMap)alTmpExp.get(0)).get("ENTRY_COMPLETED")).equals("Y")&& !exist){
								alTemp.add("0");
								alTemp.add((String)hmTemp.get("TMP_RECEIVED_QTY_1"));
								alTemp.add("0");
								alTemp.add((String)hmTemp.get("TMP_REJECTED_QTY_1"));
							}else{
								alTemp.add((String)hmTemp.get("TMP_RECEIVED_QTY_1"));
								alTemp.add("0");
								alTemp.add((String)hmTemp.get("TMP_REJECTED_QTY_1"));
								alTemp.add("0");
							}
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							alTemp.add((String)hmDtlRecords.get("DOC_NO"));
							alTemp.add(getDoc_type_code());
							alTemp.add((String)hmTemp.get("DOC_SRL_NO"));
							alTemp.add((String)hmTemp.get("BATCH_ID"));
							alTemp.add((String)hmTemp.get("EXPIRY_DATE"));
							alTemp.add((String)hmTemp.get("TRADE_ID"));
							if(hmDtlRecords.containsKey("SEQ_NO")){
								alTemp.add((String)hmDtlRecords.get("SEQ_NO"));
							}else{
								alTemp.add("1");
							}
							alTemp.add((String)hmTemp.get("BIN_LOCATION_CODE"));//Added by Shazana for IN:065033
							alModAckDtlData.add(alTemp);
						}else{
							alTemp = new ArrayList();
							//alTemp.add(getLoginFacilityId());
							alTemp.add((String)hmDtlRecords.get("FACILITY_ID"));
							alTemp.add(getDoc_type_code());
							alTemp.add((String)hmDtlRecords.get("DOC_NO"));
							alTemp.add((String)hmTemp.get("DOC_SRL_NO"));
							alTemp.add((String)hmDtlRecords.get("DOC_DATE"));
							alTemp.add((String)hmTemp.get("BATCH_ID"));
							alTemp.add((String)hmTemp.get("EXPIRY_DATE"));
							alTemp.add((String)hmTemp.get("TRADE_ID"));
							alTemp.add((String)hmTemp.get("ITEM_CODE"));
							alTemp.add((String)hmTemp.get("QTY"));
							alTemp.add((String)hmTemp.get("UOM_CODE"));
							if(exist){
								alTemp.add((String)hmTemp.get("RECEIVED_QTY"));
							}else{
								alTemp.add("0");
							}
							alTemp.add((String)hmTemp.get("BIN_LOCATION_CODE"));
							/*to handle non stock item bin location  ---COMMENT AGAIN BY GANGA FOR PENDING QTY ISSUE
							String bin_location = (String)hmTemp.get("BIN_LOCATION_CODE");							
							if((bin_location.trim()).equals("")){
							alTemp.add(""+j);
							}else{
							alTemp.add((String)hmTemp.get("BIN_LOCATION_CODE"));
							}*/
							alTemp.add(checkForNull((String)hmTemp.get("NEW_BIN_LOCATION_CODE")));
							alTemp.add((String)hmTemp.get("REMARKS"));
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							if(hmDtlRecords.containsKey("SEQ_NO")){
								alTemp.add((String)hmDtlRecords.get("SEQ_NO"));
							}else{
								alTemp.add("1");
							}
							alTemp.add("0");
							if(exist){
								alTemp.add("0");
								alTemp.add("0");
								alTemp.add("0");
								alTemp.add("0");
							}else if(((String)((HashMap)alTmpExp.get(0)).get("ENTRY_COMPLETED")).equals("Y")&& !exist) {
								alTemp.add("0");
								alTemp.add((String)hmTemp.get("TMP_RECEIVED_QTY_1"));
								alTemp.add("0");
								alTemp.add((String)hmTemp.get("TMP_REJECTED_QTY_1"));
							}else{
								alTemp.add((String)hmTemp.get("TMP_RECEIVED_QTY_1"));
								alTemp.add("0");
								alTemp.add((String)hmTemp.get("TMP_REJECTED_QTY_1"));
								alTemp.add("0");
							}
							alAckDTLData.add(alTemp);
						}
					}
				}
			//}
			/*Main Detail records for the internal EJBs...*/
			if(exist){
				/*for(int j=0;j<alTmpExpRecords.size();j++){
					alDtlExpRecords.add((HashMap)alTmpExpRecords.get(j));
				}*/
				//for(int i=0;i<alTFRDtlRecords.size();i++){
					//hmDtlRecords = (HashMap)alTFRDtlRecords.get(i);
					if(hmFinalTFRExpRecords.containsKey((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))){
						for(int j=0;j<alTmpExpRecords.size();j++){				
	        //Added by Rabbani #inc no:31269 on 17/04/12 Starts
	       String sql_multi_user_chk = "Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy') ";		 
			     
   				 ArrayList temp;
			      HashMap hmExpRecord = (HashMap)alTmpExpRecords.get(j);
			      temp=new ArrayList();
			      temp.add((String)hmExpRecord.get("STORE_CODE")); //curr_store_code
			      temp.add((String)hmExpRecord.get("ITEM_CODE"));	// ITEM_CODE
			      temp.add((String)hmExpRecord.get("BATCH_ID"));  //BATCH_ID
			      temp.add((String)hmExpRecord.get("BIN_LOCATION_CODE")); //BIN_LOCATION_CODE
			      temp.add((String)hmExpRecord.get("EXPIRY_DATE"));	//EXPIRY_DATE
				  //System.out.println("temp..663 bean.."+temp);
			      hmExpRecord.put("modified_date",(String)((HashMap)fetchRecord(sql_multi_user_chk,temp)).get("MODIFIED_DATE"));
			      alTmpExpRecords.set(j,hmExpRecord);
				  alDtlExpRecords.add((HashMap)alTmpExpRecords.get(j));
				   System.out.println("alDtlExpRecords..664 bean.."+alDtlExpRecords);
					//ends		
						}
						alParam = new ArrayList();
						alParam.add(getLoginFacilityId());
						alParam.add((String)hmDtlRecords.get("DOC_NO"));
						alParam.add(getDoc_type_code());
						if(getTrn_type().equals("TFR")){
							hmTemp = (HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_TFR_HDR_SELECT"),alParam);
							alTemp = new ArrayList();
							alTemp.add((String)hmTemp.get("DOC_DATE"));
							alTemp.add(checkForNull((String)hmTemp.get("DOC_REF")));
							alTemp.add((String)hmTemp.get("FM_STORE_CODE"));
							alTemp.add((String)hmTemp.get("TO_STORE_CODE"));
							alTemp.add("Y");//Finalized_YN
							alTemp.add("Y");//PROCESS FOR ACK
							alTemp.add((String)hmTemp.get("GL_INTERFACED_YN"));
							alTemp.add((String)hmTemp.get("TRN_TYPE"));
							alTemp.add((String)hmTemp.get("ENTRY_COMPLETED_YN"));
							alTemp.add(checkForNull((String)hmTemp.get("ITEM_CLASS_CODE")));
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							//alTemp.add(getLoginFacilityId());
							alTemp.add((String)hmTemp.get("FACILITY_ID"));
							alTemp.add((String)hmTemp.get("DOC_TYPE_CODE"));
							alTemp.add((String)hmTemp.get("DOC_NO"));
							alHdrData.add(alTemp);
							alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_TFR_DTL_SELECT"),alParam);
							for(int j=0;j<alTemp.size();j++){
								hmDtlTemp = new HashMap();
								hmTemp = (HashMap)alTemp.get(j);
								hmDtlTemp.put("doc_date",hmTemp.get("DOC_DATE"));
								hmDtlTemp.put("doc_type_code",hmTemp.get("DOC_TYPE_CODE"));
								hmDtlTemp.put("doc_no",hmTemp.get("DOC_NO"));
								hmDtlTemp.put("doc_srl_no",hmTemp.get("DOC_SRL_NO"));
								hmDtlTemp.put("store_code",hmTemp.get("STORE_CODE"));
								hmDtlTemp.put("item_code",hmTemp.get("ITEM_CODE"));
								hmDtlTemp.put("stock_item_yn",hmTemp.get("STOCK_ITEM_YN"));
								double mm_trn_qty = 0;
								double item_qty	= 0;
								ArrayList al = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
								for(int m=0;m<al.size();m++){
									HashMap hm = (HashMap)al.get(m);
									if(((String)hm.get("ITEM_CODE")).equals((String)hmTemp.get("ITEM_CODE"))){
										mm_trn_qty	= mm_trn_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"));
										item_qty	= item_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"))+ Double.parseDouble(((String)hm.get("REJECTED_QTY")).equals("")?"0":(String)hm.get("REJECTED_QTY"));
									}
								}
								hmDtlTemp.put("tmp_item_qty",""+item_qty);
								item_qty = item_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("STORE_CODE"));
								hmDtlTemp.put("item_qty",""+item_qty);
								//Modified by suresh.r on 18-08-2014 against Inc#50616 beg
								int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
								//hmDtlTemp.put("item_unit_cost",hmTemp.get("ITEM_UNIT_COST"));
								hmDtlTemp.put("item_unit_cost",""+setNumber((String)hmTemp.get("ITEM_UNIT_COST"),noOfDecimalsForCost));
								//Modified by suresh.r on 18-08-2014 against Inc#50616 end
								double dtl_trn_val= Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))*Double.parseDouble(""+item_qty);
								/**
								 * @Name - Priya
								 * @Date - 03/06/2010
								 * @Inc# - 
								 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost
								 */
							//int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
								hmDtlTemp.put("item_cost_value",""+setNumber(""+dtl_trn_val,noOfDecimalsForCost));
								double to_str_qty = mm_trn_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("TO_STORE_CODE"));
								hmDtlTemp.put("mm_trn_qty",""+mm_trn_qty);
								hmDtlTemp.put("to_str_qty",""+to_str_qty);
								alDtlData.add(hmDtlTemp);
							}
						}
						else if(getTrn_type().equals("ISS")||getTrn_type().equals("URG")){
							alParam.add((String)hmDtlRecords.get("SEQ_NO"));
							hmTemp = (HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_URG_ISS_HDR_SELECT"),alParam);
							alTemp = new ArrayList();
							alTemp.add((String)hmTemp.get("DOC_DATE"));
							alTemp.add(checkForNull((String)hmTemp.get("DOC_REF")));
							alTemp.add("Y");//Finalized_YN
							alTemp.add("Y");//PROCESS FOR ACK
							alTemp.add((String)hmTemp.get("CLOSE_REQ_AFTER_ISSUE_YN"));
							alTemp.add(checkForNull((String)hmTemp.get("REMARKS")));
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							alTemp.add((String)hmTemp.get("FACILITY_ID"));
							alTemp.add((String)hmTemp.get("DOC_TYPE_CODE"));
							alTemp.add((String)hmTemp.get("DOC_NO"));
							alTemp.add((String)hmTemp.get("SEQ_NO"));
							alHdrData.add(alTemp);
							alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_URG_ISS_DTL_SELECT"),alParam);
							for(int j=0;j<alTemp.size();j++){
								hmDtlTemp = new HashMap();
								hmTemp = (HashMap)alTemp.get(j);
								hmDtlTemp.put("facility_id",hmTemp.get("FACILITY_ID"));
								hmDtlTemp.put("doc_date",hmTemp.get("DOC_DATE"));
								hmDtlTemp.put("doc_type_code",hmTemp.get("DOC_TYPE_CODE"));
								hmDtlTemp.put("doc_no",hmTemp.get("DOC_NO"));
								hmDtlTemp.put("doc_srl_no",hmTemp.get("DOC_SRL_NO"));
								hmDtlTemp.put("store_code",hmTemp.get("STORE_CODE"));
								hmDtlTemp.put("to_store_code",hmTemp.get("TO_STORE_CODE"));
								hmDtlTemp.put("item_code",hmTemp.get("ITEM_CODE"));
								hmDtlTemp.put("stock_item_yn",hmTemp.get("STOCK_ITEM_YN"));
								double mm_trn_qty = 0;
								double item_qty	= 0;
								ArrayList al = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
								for(int m=0;m<al.size();m++){
									HashMap hm = (HashMap)al.get(m);
									if(((String)hm.get("ITEM_CODE")).equals((String)hmTemp.get("ITEM_CODE"))){
										mm_trn_qty	= mm_trn_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"));
										item_qty	= item_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"))+ Double.parseDouble(((String)hm.get("REJECTED_QTY")).equals("")?"0":(String)hm.get("REJECTED_QTY"));
									}
								}
								hmDtlTemp.put("tmp_item_qty",""+item_qty);
								item_qty = item_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("STORE_CODE"));
								hmDtlTemp.put("item_qty",""+item_qty);
								hmDtlTemp.put("item_unit_cost",hmTemp.get("ITEM_UNIT_COST"));
								double dtl_trn_val= Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))*Double.parseDouble(""+item_qty);
								/**
								 * @Name - Priya
								 * @Date - 03/06/2010
								 * @Inc# - 
								 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost
								 */
							int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
								hmDtlTemp.put("item_cost_value",""+setNumber(""+dtl_trn_val,noOfDecimalsForCost));
								hmDtlTemp.put("ret_item_qty",hmTemp.get("RET_ITEM_QTY"));
								hmDtlTemp.put("issue_uom_conv",hmTemp.get("ISSUE_UOM_CONV"));
								hmDtlTemp.put("issue_uom",hmTemp.get("ISSUE_UOM"));
								hmDtlTemp.put("issue_uom_qty",hmTemp.get("ISSUE_UOM_QTY"));
								hmDtlTemp.put("remarks",hmTemp.get("REMARKS"));
								hmDtlTemp.put("seq_no",hmTemp.get("SEQ_NO"));
								hmDtlTemp.put("language_id",getLanguageId());
								hmDtlTemp.put("mode","2");
								double to_str_qty = mm_trn_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("TO_STORE_CODE"));
								hmDtlTemp.put("mm_trn_qty",""+mm_trn_qty);
								hmDtlTemp.put("to_str_qty",""+to_str_qty);
								alDtlData.add(hmDtlTemp);
							}
						}else if(getTrn_type().equals("RET")){
							hmTemp = (HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_RET_HDR_SELECT"),alParam);
							alTemp = new ArrayList();
							alTemp.add((String)hmTemp.get("DOC_DATE"));
							alTemp.add(checkForNull((String)hmTemp.get("DOC_REF")));
							alTemp.add("Y");//Finalized_YN
							alTemp.add("Y");//PROCESS FOR ACK
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							//alTemp.add(getLoginFacilityId());
							alTemp.add((String)hmTemp.get("FACILITY_ID"));
							alTemp.add((String)hmTemp.get("DOC_TYPE_CODE"));
							alTemp.add((String)hmTemp.get("DOC_NO"));
							alHdrData.add(alTemp);
							alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_RET_DTL_SELECT"),alParam);
							for(int j=0;j<alTemp.size();j++){
								hmDtlTemp = new HashMap();
								hmTemp = (HashMap)alTemp.get(j);
								hmDtlTemp.put("doc_date",hmTemp.get("DOC_DATE"));
								hmDtlTemp.put("doc_type_code",hmTemp.get("DOC_TYPE_CODE"));
								hmDtlTemp.put("doc_no",hmTemp.get("DOC_NO"));
								hmDtlTemp.put("doc_srl_no",hmTemp.get("DOC_SRL_NO"));
								hmDtlTemp.put("from_store_code",hmTemp.get("FM_STORE_CODE"));
								hmDtlTemp.put("to_store_code",hmTemp.get("TO_STORE_CODE"));
								hmDtlTemp.put("item_code",hmTemp.get("ITEM_CODE"));
								hmDtlTemp.put("stock_item_yn",hmTemp.get("STOCK_ITEM_YN"));
								double mm_trn_qty = 0;
								double item_qty	= 0;
								double item_unit_cost_trn_dtl = 0;
								ArrayList al = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
								for(int m=0;m<al.size();m++){
									HashMap hm = (HashMap)al.get(m);
									if(((String)hm.get("ITEM_CODE")).equals((String)hmTemp.get("ITEM_CODE"))){
										mm_trn_qty	= mm_trn_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"));
										item_qty	= item_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"))+ Double.parseDouble(((String)hm.get("REJECTED_QTY")).equals("")?"0":(String)hm.get("REJECTED_QTY"));
									}
								}
								hmDtlTemp.put("tmp_item_qty",""+item_qty);
								item_qty = item_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("FM_STORE_CODE"));
								hmDtlTemp.put("item_qty",""+item_qty);
								hmDtlTemp.put("item_unit_cost",hmTemp.get("ITEM_UNIT_COST"));
								//Added to pass unit cost as base to st_item_trn_dtl against inc#50521
								item_unit_cost_trn_dtl = Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))/ getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("FM_STORE_CODE"));
								
								//Added ends

								double dtl_trn_val= Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))*Double.parseDouble(""+item_qty);
								/**
								 * @Name - Priya
								 * @Date - 03/06/2010
								 * @Inc# - 
								 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost
								 */
							int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
								hmDtlTemp.put("item_unit_cost_trn_dtl",""+setNumber(""+item_unit_cost_trn_dtl,noOfDecimalsForCost));//Added to pass unit cost as base to st_item_trn_dtl against inc#50521
								hmDtlTemp.put("item_cost_value",""+setNumber(""+dtl_trn_val,noOfDecimalsForCost));
								double to_str_qty = mm_trn_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("TO_STORE_CODE"));
								hmDtlTemp.put("mm_trn_qty",""+mm_trn_qty);
								hmDtlTemp.put("to_str_qty",""+to_str_qty);
								hmDtlTemp.put("remarks",checkForNull((String)hmTemp.get("REMARKS"),""));
								hmDtlTemp.put("uom_code",hmTemp.get("UOM_CODE"));
								hmDtlTemp.put("mode","2");
								alDtlData.add(hmDtlTemp);
							}
						}
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
			//Added for AMS-SCF-0692 start
			hmResult.put( "message", e.getMessage()) ;
			String message = (String)hmResult.get("message");
		if(message.contains("RECORD_UPDATED_BY_OTH_USER1"))
		{
			System.out.println("Multi user Acess");//dont remove
			hmResult.put("result", FALSE);
			hmResult.put("msgid","RECORD_UPDATED_BY_OTH_USER1");
			hmResult.put("message","APP-ST0242 The Record Already  Used By Other User.Please Try again...");
			return hmResult;
		}
		//Added for AMS-SCF-0692 end
		}
		for(int i=0;i<alReverseFinalYN.size();i=i+2){
			alTemp = new ArrayList();
			alTemp.add(alReverseFinalYN.get(i));
			alTemp.add(alReverseFinalYN.get(i+1));
			alReverseYN.add(alTemp);
		}
		hmTableData.put("properties",	getProperties());
		hmTableData.put("ACK_HDR_DATA",	alAckHdrData);
		hmTableData.put("ACK_DTL_DATA",	alAckDTLData);
		hmTableData.put("ACK_HDR_MOD_DATA",	alModAckHdrData);
		hmTableData.put("ACK_DTL_MOD_DATA",	alModAckDtlData);
		hmTableData.put("ACK_DTL_REV_DATA",	alReverseYN);
		hmTableData.put("HDR_DATA",		alHdrData);
		hmTableData.put("DTL_DATA",		alDtlData);
		hmTableData.put("DTL_EXP_DATA",	alDtlExpRecords);
		//System.out.println("alCommonData...."+alCommonData);
		hmTableData.put("COMMON_DATA",	alCommonData);
		hmTableData.put("LANGUAGE_DATA",allanguageData);
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_INSERT",getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_INSERT"));
		//hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_INSERT",getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_INSERT"));
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_INSERT","INSERT INTO ST_ACKNOWLEDGE_TRN_DTL(FACILITY_ID, DOC_TYPE_CODE, DOC_NO, DOC_SRL_NO, DOC_DATE, BATCH_ID, EXPIRY_DATE_OR_RECEIPT_DATE, TRADE_ID, ITEM_CODE, ISSUE_QTY, ISS_RCVD_UOM, RECEIVED_QTY, BIN_LOCATION_CODE, NEW_BIN_LOCATION_CODE, REMARKS, ADDED_BY_ID, ADDED_DATE, ADDED_AT_WS_NO, ADDED_FACILITY_ID, MODIFIED_BY_ID, MODIFIED_DATE, MODIFIED_AT_WS_NO, MODIFIED_FACILITY_ID,SEQ_NO,REJECTED_QTY,TMP_RECEIVED_QTY_1,TMP_RECEIVED_QTY_2,TMP_REJECTED_QTY_1,TMP_REJECTED_QTY_2) VALUES(?,?,?,?,TO_DATE(?,'DD/MM/YYYY'),?,TO_DATE(?,'DD/MM/YYYY'),?,?,?,?,?,?,?,?,?,SYSDATE,?,?,?,SYSDATE,?,?,?,NVL(?,0),?,?,?,?)");

		//hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_UPDATE",getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_UPDATE_1"));
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_UPDATE","UPDATE ST_ACKNOWLEDGE_TRN_HDR SET ADJUST_DOC_TYPE_CODE=?, ADJUST_DOC_NO=?,ACKNOWLEDGE_YN = NVL(?,ACKNOWLEDGE_YN), ACKNOWLEDGE_DATE = SYSDATE, CONFIRM_YN = ?, CONFIRM_DATE = NVL(TO_DATE(?,'DD/MM/YYYY'),'') ,MODIFIED_BY_ID=?, MODIFIED_DATE=SYSDATE, MODIFIED_AT_WS_NO=?, MODIFIED_FACILITY_ID=? WHERE DOC_NO = ? AND DOC_TYPE_CODE=? AND SEQ_NO = ?");
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_UPDATE","UPDATE ST_ACKNOWLEDGE_TRN_DTL SET RECEIVED_QTY = NVL(RECEIVED_QTY,0)+?, REMARKS = ?, NEW_BIN_LOCATION_CODE = ?, REJECTED_QTY = NVL(REJECTED_QTY,0 )+ NVL(?,0),TMP_RECEIVED_QTY_1 = ?,TMP_RECEIVED_QTY_2 = NVL(TMP_RECEIVED_QTY_2,0)+?,TMP_REJECTED_QTY_1 = ?,TMP_REJECTED_QTY_2 = NVL(TMP_REJECTED_QTY_2,0)+?,MODIFIED_BY_ID=?, MODIFIED_DATE=SYSDATE, MODIFIED_AT_WS_NO=?, MODIFIED_FACILITY_ID=? WHERE DOC_NO = ? AND DOC_TYPE_CODE=? AND DOC_SRL_NO = ? AND BATCH_ID =? AND TO_CHAR(EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY')=? AND TRADE_ID =? AND SEQ_NO = ? AND BIN_LOCATION_CODE = ?");//Added by Shazana for IN:065033  
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_UPDATE_FLAG","UPDATE ST_ACKNOWLEDGE_TRN_HDR SET /*ACKNOWLEDGE_YN='N', */CONFIRM_YN = 'N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		if(getTrn_type().equals("TFR")){
			hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_UPDATE_FLAG","UPDATE ST_TRANSFER_HDR SET FINALIZED_YN='N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		}else if(getTrn_type().equals("ISS")||getTrn_type().equals("URG")){
			hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_UPDATE_FLAG","UPDATE ST_ISSUE_HDR SET FINALIZED_YN='N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		}else if(getTrn_type().equals("RET")){
			hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_UPDATE_FLAG","UPDATE ST_ISSUE_RET_HDR SET FINALIZED_YN='N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		}
		try{
			Object home = com.ehis.eslp.ServiceLocator.getInstance().getHome(getStRepositoryValue("JNDI_ST_ACKNOWLEDGMENT"),AcknowledgmentLocalHome.class,getLocalEJB());
			Object busObj = (home.getClass().getMethod("create",null)).invoke(home,null);
			Object argArray[] = new Object[2];
			argArray[0] = hmTableData;
			argArray[1] = hmSQLMap;

			Class [] paramArray = new Class[2];
			paramArray[0] = hmTableData.getClass(); 
			//System.out.println("AcknowledgementBean.java,hmTableData = > "+hmTableData);
			paramArray[1] = hmSQLMap.getClass();
			//System.out.println("AcknowledgementBean.java,hmSQLMap = > "+hmSQLMap);
			hmResult = (HashMap)(busObj.getClass().getMethod("insert",paramArray)).invoke(busObj,argArray);
			(busObj.getClass().getMethod("remove",null)).invoke(busObj,null);

			if( ((Boolean) hmResult.get("result")).booleanValue() )	
				hmResult.put( "message", getSTMessage(getLanguageId(),(String) hmResult.get( "msgid" ),"ST") ) ;
			else{
				if( hmResult.get("msgid")!=null  )
					hmResult.put( "message", getSTMessage(getLanguageId(),(String) hmResult.get( "msgid" ),"ST") ) ;
					//hmResult.put( "message", (String) hmResult.get( "msgid" )) ;
				 else
					hmResult.put( "message", (String) hmResult.get( "msgid" ) ) ;
				if(hmResult.get("flag") != null)
					hmResult.put( "flag", replaceNewLineChar((String)hmResult.get("flag")) ) ;
				clear();
			}
		}catch(Exception e){
			e.printStackTrace();
			hmResult.put( "message", "Bean 393: "+e.toString()) ;
		}
		return hmResult;
	}
	public HashMap modify(){
		String doc_no				=   "";
		String confirm				=   "Y";
		String confirm_date			=   "";
		HashMap hmSQLMap			=	new HashMap();
		HashMap hmTableData			=	new HashMap();
		HashMap hmDtlRecords		=	new HashMap();
		HashMap hmTemp				=	new HashMap();
		HashMap hmTemp1				=	new HashMap(); //Added for AMS-SCF-0692
		HashMap hmDtlTemp			=	new HashMap();

		ArrayList alAckHdrData		=	new ArrayList();
		ArrayList alAckDTLData		=	new ArrayList();
		ArrayList alHdrData			=	new ArrayList();
		ArrayList alDtlData			=	new ArrayList();
		ArrayList alCommonData		=	new ArrayList();
		ArrayList alDtlExpRecords	=	new ArrayList();
		ArrayList allanguageData	=	new ArrayList();
		ArrayList alTmpDtlRecords	=	new ArrayList();
		ArrayList alTmpExpRecords	=	new ArrayList();
		ArrayList alTemp			=	new ArrayList();
		ArrayList alTmpExp			=	new ArrayList();
		ArrayList alParam			=	new ArrayList();
		ArrayList alParam1			=	new ArrayList(); //Added for AMS-SCF-0692
		ArrayList alModAckHdrData	=	new ArrayList();
		ArrayList alModAckDtlData	=	new ArrayList();
		ArrayList alReverseFinalYN	=	new ArrayList();
		ArrayList alReverseYN		=	new ArrayList();
		allanguageData.add(getLanguageId());
		hmSQLMap=stockSQL();

		alCommonData.add(getLoginById()			);
		alCommonData.add(getLoginAtWsNo()		);
		alCommonData.add(getLoginFacilityId()	);
		alCommonData.add(getDoc_type_code()		);
		alCommonData.add(getTrn_type()			);
		HashMap hmResult = new HashMap();
		try{
			for(int i=0;i<alTFRDtlRecords.size();i++){
				hmDtlRecords = (HashMap)alTFRDtlRecords.get(i);
				if(hmFinalTFRExpRecords.containsKey((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))){
					/*Dummy exp records are added*/
					if(hmDumTFRExpRecords.containsKey((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))){
						ArrayList alTempExp = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
						ArrayList alDumTempExp = (ArrayList)hmDumTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
						for(int x=0;x<alDumTempExp.size();x++){
							alTempExp.add(alDumTempExp.get(x));
						}
						hmFinalTFRExpRecords.put(((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO")),alTempExp);
					}
					/*Dummy Exp add ends*/
					String chkParameters[] = {getLoginFacilityId(),(String)hmDtlRecords.get("DOC_NO"),getDoc_type_code()};
					if(getTrn_type().equals("TFR")){
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ORG_TFR_DTL_SELECT"),chkParameters);
					}else if(getTrn_type().equals("URG")||getTrn_type().equals("ISS")){
						String chkParameters1[] = {getLoginFacilityId(),(String)hmDtlRecords.get("DOC_NO"),getDoc_type_code(),(String)hmDtlRecords.get("SEQ_NO")};
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ORG_URG_ISS_DTL_SELECT"),chkParameters1);
					}else if(getTrn_type().equals("RET")){
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_ORG_RET_DTL_SELECT"),chkParameters);
					}
					for(int j=0;j<alTemp.size();j++){
						if(!doc_no.equals((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))){
							confirm = "Y";
							confirm_date = "";
							hmTemp = (HashMap)alTemp.get(j);
				 			alParam = new ArrayList();
							alParam.add(getLoginFacilityId());
							alParam.add((String)hmDtlRecords.get("DOC_NO"));
							alParam.add(getDoc_type_code());
							if(hmDtlRecords.containsKey("SEQ_NO")){
								alParam.add((String)hmDtlRecords.get("SEQ_NO"));
							}else{
								alParam.add("1");
							}
							int count = Integer.parseInt((String)(((HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_HDR_COUNT_SELECT"),alParam)).get("COUNT")));
							//Added by Rabbani for stockTransfer in confirmation function pass the facility id , index:5 on 20/10/11
							alCommonData.add((String)hmTemp.get("FACILITY_ID"));
							alCommonData.add(getAction_type()); //Added by Rabbani #inc no:33205  
							if(count>0){
								alTmpDtlRecords = new ArrayList();
								alTmpExp = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
								//alTmpDtlRecords.add("Y");Acknowledge_YN
								alTmpDtlRecords.add("");
								alTmpDtlRecords.add("");
								alTmpDtlRecords.add("Y");
								alTmpDtlRecords.add(com.ehis.util.DateUtils.getCurrentDate("DMY","en"));
								alTmpDtlRecords.add(getLoginById());
								alTmpDtlRecords.add(getLoginAtWsNo());
								alTmpDtlRecords.add(getLoginFacilityId());
								alTmpDtlRecords.add(hmTemp.get("DOC_NO"));
								alTmpDtlRecords.add(getDoc_type_code());
								if(hmTemp.containsKey("SEQ_NO"))
									alTmpDtlRecords.add(hmTemp.get("SEQ_NO"));
								else
									alTmpDtlRecords.add("1");
								alModAckHdrData.add(alTmpDtlRecords);
							}else{
								alTmpDtlRecords = new ArrayList();
								alTmpDtlRecords.add(getLoginFacilityId());
								alTmpDtlRecords.add(getDoc_type_code());
								alTmpDtlRecords.add(hmTemp.get("DOC_NO"));
								alTmpDtlRecords.add((String)hmDtlRecords.get("DOC_DATE"));
								alTmpDtlRecords.add(getTrn_type());
								alTmpDtlRecords.add((String)hmDtlRecords.get("FM_STORE_CODE"));
								alTmpDtlRecords.add((String)hmDtlRecords.get("TO_STORE_CODE"));
								alTmpExp = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
								alTmpDtlRecords.add((String)((HashMap)alTmpExp.get(0)).get("ENTRY_COMPLETED"));
								alTmpDtlRecords.add("");
								alTmpDtlRecords.add("");
								alTmpDtlRecords.add("Y");
								alTmpDtlRecords.add(com.ehis.util.DateUtils.getCurrentDate("DMY","en"));
								if(hmTemp.containsKey("SEQ_NO"))
									alTmpDtlRecords.add(hmTemp.get("SEQ_NO"));
								else
									alTmpDtlRecords.add("1");
								alTmpDtlRecords.add(getLoginById());
								alTmpDtlRecords.add(getLoginAtWsNo());
								alTmpDtlRecords.add(getLoginFacilityId());
								alTmpDtlRecords.add(getLoginById());
								alTmpDtlRecords.add(getLoginAtWsNo());
								alTmpDtlRecords.add(getLoginFacilityId());
								if(hmTemp.containsKey("SEQ_NO"))
									alTmpDtlRecords.add(hmTemp.get("SEQ_NO"));
								else
									alTmpDtlRecords.add("1");
								alAckHdrData.add(alTmpDtlRecords);
							}
							doc_no = (String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO");
						}
					}
					alTmpExpRecords = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
					for(int j=0;j<alTmpExpRecords.size();j++){
						//alDtlExpRecords.add((HashMap)alTmpExpRecords.get(j));
						hmTemp = (HashMap)alTmpExpRecords.get(j);
						//Added by Rabbani #inc no:31269 on 17/04/12 Starts
	                String sql_multi_user_chk = "Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy') ";
						 		 
			        ArrayList temp;
			        temp=new ArrayList();
			        temp.add((String)hmTemp.get("STORE_CODE")); //curr_store_code
			        temp.add((String)hmTemp.get("ITEM_CODE"));	// ITEM_CODE
			        temp.add((String)hmTemp.get("BATCH_ID"));  //BATCH_ID
			        temp.add((String)hmTemp.get("BIN_LOCATION_CODE")); //BIN_LOCATION_CODE
			        temp.add((String)hmTemp.get("EXPIRY_DATE"));	//EXPIRY_DATE
				   
			        hmTemp.put("modified_date",(String)((HashMap)fetchRecord(sql_multi_user_chk,temp)).get("MODIFIED_DATE"));
			        alTmpExpRecords.set(j,hmTemp);
		            alDtlExpRecords.add((HashMap)alTmpExpRecords.get(j));
				    System.out.println("alDtlExpRecords..1083 bean.."+alDtlExpRecords);
				 //ends	
				   
						alParam = new ArrayList();
						alParam1 = new ArrayList(); //Added for AMS-SCF-0692
						alParam.add(getLoginFacilityId());
						alParam1.add(getLoginFacilityId()); //Added for AMS-SCF-0692
						alParam.add((String)hmDtlRecords.get("DOC_NO"));
						alParam1.add((String)hmDtlRecords.get("DOC_NO")); //Added for AMS-SCF-0692
						alParam.add(getDoc_type_code());
						alParam1.add(getDoc_type_code()); //Added for AMS-SCF-0692
						if(hmDtlRecords.containsKey("SEQ_NO")){
							alParam.add((String)hmDtlRecords.get("SEQ_NO"));
							alParam1.add((String)hmDtlRecords.get("SEQ_NO")); //Added for AMS-SCF-0692
						}else{
							alParam.add("1");
							alParam1.add("1"); //Added for AMS-SCF-0692
						}
						int count = Integer.parseInt((String)(((HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_DTL_COUNT_SELECT"),alParam)).get("COUNT")));
						if(count>0){
							if(((String)hmTemp.get("TMP_REJECTED_QTY_2")).equals("")){
								hmTemp.put("TMP_REJECTED_QTY_2","0");
							}
							alTemp = new ArrayList();
							alTemp.add((String)hmTemp.get("TMP_RECEIVED_QTY_2"));
							//Added for AMS-SCF-0692 start
							String doc_sl_no =((String)hmTemp.get("DOC_SRL_NO"));
							String item_code =((String)hmTemp.get("ITEM_CODE"));
							String batch_id =((String)hmTemp.get("BATCH_ID"));
							String expiry_date =((String)hmTemp.get("EXPIRY_DATE"));
							String bin_location_code =((String)hmTemp.get("BIN_LOCATION_CODE"));
							alParam1.add(doc_sl_no);
							alParam1.add(item_code);
							alParam1.add(batch_id);
							alParam1.add(expiry_date);
							alParam1.add(bin_location_code);
							hmTemp1 = (HashMap)fetchRecord(getStRepositoryValue("SQL_ST_MULTIUSER1"),alParam1);
							double cnfm_qty = Double.parseDouble((String)(hmTemp1.get("CNFM_QTY")));
							alParam1.remove(8);
							alParam1.remove(7);
							alParam1.remove(6);
							alParam1.remove(5);
							alParam1.remove(4);
							double rec_qty=Double.parseDouble((String)hmTemp.get("TMP_RECEIVED_QTY_2"));
							double rej_qty=Double.parseDouble((String)hmTemp.get("TMP_REJECTED_QTY_2"));
							double total =rec_qty + rej_qty;
							double cut_off =cnfm_qty - total;
							if(cut_off < 0){
								System.out.println("Multiuser Scenario");//dont remove
								throw new Exception("RECORD_UPDATED_BY_OTH_USER1");
							}
							alTemp.add(checkForNull((String)hmTemp.get("REMARKS")));
							alTemp.add(checkForNull((String)hmTemp.get("NEW_BIN_LOCATION_CODE")));
							alTemp.add((String)hmTemp.get("TMP_REJECTED_QTY_2"));
							alTemp.add("0");
							alTemp.add("0");
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							alTemp.add((String)hmDtlRecords.get("DOC_NO"));
							alTemp.add((String)hmTemp.get("DOC_TYPE_CODE"));
							alTemp.add((String)hmTemp.get("DOC_SRL_NO"));
							alTemp.add((String)hmTemp.get("BATCH_ID"));
							alTemp.add((String)hmTemp.get("EXPIRY_DATE"));
							alTemp.add((String)hmTemp.get("TRADE_ID"));
							if(hmDtlRecords.containsKey("SEQ_NO")){
								alTemp.add((String)hmDtlRecords.get("SEQ_NO"));
							}else{
								alTemp.add("1");
							}
							alTemp.add((String)hmTemp.get("BIN_LOCATION_CODE"));//Added by Shazana for IN:065033
							alModAckDtlData.add(alTemp);
						}else{
							alTemp = new ArrayList();
							alTemp.add(getLoginFacilityId());
							alTemp.add(getDoc_type_code());
							alTemp.add((String)hmDtlRecords.get("DOC_NO"));
							alTemp.add((String)hmTemp.get("DOC_SRL_NO"));
							alTemp.add((String)hmDtlRecords.get("DOC_DATE"));
							alTemp.add((String)hmTemp.get("BATCH_ID"));
							alTemp.add((String)hmTemp.get("EXPIRY_DATE"));
							alTemp.add((String)hmTemp.get("TRADE_ID"));
							alTemp.add((String)hmTemp.get("ITEM_CODE"));
							alTemp.add((String)hmTemp.get("QTY"));
							alTemp.add((String)hmTemp.get("UOM_CODE"));
							alTemp.add((String)hmTemp.get("RECEIVED_QTY"));
							alTemp.add((String)hmTemp.get("BIN_LOCATION_CODE"));
							/*String bin_location = (String)hmTemp.get("BIN_LOCATION_CODE");							
							if((bin_location.trim()).equals("")){
							alTemp.add(""+j);
							}else{
							alTemp.add((String)hmTemp.get("BIN_LOCATION_CODE"));
							}*/
							alTemp.add(checkForNull((String)hmTemp.get("NEW_BIN_LOCATION_CODE")));
							alTemp.add((String)hmTemp.get("REMARKS"));
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							alTemp.add(getLoginById());
							alTemp.add(getLoginAtWsNo());
							alTemp.add(getLoginFacilityId());
							if(hmDtlRecords.containsKey("SEQ_NO")){
								alTemp.add((String)hmDtlRecords.get("SEQ_NO"));
							}else{
								alTemp.add("1");
							}
							alTemp.add("0");
							alTemp.add("0");
							alTemp.add("0");
							alTemp.add("0");
							alTemp.add("0");
							alAckDTLData.add(alTemp);
						}
						double pen_rcd_qty		= Double.parseDouble((String)((HashMap)alTmpExpRecords.get(j)).get("PEN_RCD_QTY"));
						if(pen_rcd_qty > 0){
							if(!alReverseFinalYN.contains((String)((HashMap)alTmpExpRecords.get(j)).get("DOC_NO"))){
								alReverseFinalYN.add(getDoc_type_code());
								alReverseFinalYN.add((String)((HashMap)alTmpExpRecords.get(j)).get("DOC_NO"));
							}
						}
					}
				}
			}
			//*Main Detail records for the internal EJBs...
			for(int i=0;i<alTFRDtlRecords.size();i++){
				hmDtlRecords = (HashMap)alTFRDtlRecords.get(i);
				if(hmFinalTFRExpRecords.containsKey((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"))&&(((String)hmDtlRecords.get("CONFIRM_YN")).equals("Y"))){
					alParam = new ArrayList();
					alParam.add(getLoginFacilityId());
					alParam.add((String)hmDtlRecords.get("DOC_NO"));
					alParam.add(getDoc_type_code());
					if(getTrn_type().equals("TFR")){
						hmTemp = (HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_TFR_HDR_SELECT"),alParam);
						alTemp = new ArrayList();
						alTemp.add((String)hmTemp.get("DOC_DATE"));
						alTemp.add(checkForNull((String)hmTemp.get("DOC_REF")));
						alTemp.add((String)hmTemp.get("FM_STORE_CODE"));
						alTemp.add((String)hmTemp.get("TO_STORE_CODE"));
						alTemp.add("Y");//Finalized_YN
						alTemp.add("Y");//Process
						alTemp.add((String)hmTemp.get("GL_INTERFACED_YN"));
						alTemp.add((String)hmTemp.get("TRN_TYPE"));
						alTemp.add((String)hmTemp.get("ENTRY_COMPLETED_YN"));
						alTemp.add(checkForNull((String)hmTemp.get("ITEM_CLASS_CODE")));
						alTemp.add(getLoginById());
						alTemp.add(getLoginAtWsNo());
						alTemp.add(getLoginFacilityId());
						alTemp.add(getLoginFacilityId());
						alTemp.add((String)hmTemp.get("DOC_TYPE_CODE"));
						alTemp.add((String)hmTemp.get("DOC_NO"));
						alHdrData.add(alTemp);
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_TFR_DTL_SELECT"),alParam);
						for(int j=0;j<alTemp.size();j++){
							hmDtlTemp = new HashMap();
							hmTemp = (HashMap)alTemp.get(j);
							hmDtlTemp.put("doc_date",hmTemp.get("DOC_DATE"));
							hmDtlTemp.put("doc_type_code",hmTemp.get("DOC_TYPE_CODE"));
							hmDtlTemp.put("doc_no",hmTemp.get("DOC_NO"));
							hmDtlTemp.put("doc_srl_no",hmTemp.get("DOC_SRL_NO"));
							hmDtlTemp.put("store_code",hmTemp.get("STORE_CODE"));
							hmDtlTemp.put("item_code",hmTemp.get("ITEM_CODE"));
							hmDtlTemp.put("stock_item_yn",hmTemp.get("STOCK_ITEM_YN"));
							double mm_trn_qty	= 0;
							double item_qty	= 0;
							ArrayList al = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
							for(int m=0;m<al.size();m++){
								HashMap hm = (HashMap)al.get(m);
								if(((String)hm.get("ITEM_CODE")).equals((String)hmTemp.get("ITEM_CODE"))){
									mm_trn_qty	= mm_trn_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"));
									item_qty	= item_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"))+ Double.parseDouble(((String)hm.get("REJECTED_QTY")).equals("")?"0":(String)hm.get("REJECTED_QTY"));
								}
							}
							hmDtlTemp.put("tmp_item_qty",""+item_qty);
							item_qty = item_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("STORE_CODE"));
							hmDtlTemp.put("item_qty",""+item_qty);
							//Modified by suresh.r on 18-08-2014 against Inc#50616 beg
							int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
							//hmDtlTemp.put("item_unit_cost",hmTemp.get("ITEM_UNIT_COST"));
							hmDtlTemp.put("item_unit_cost",""+setNumber((String)hmTemp.get("ITEM_UNIT_COST"),noOfDecimalsForCost));
							//Modified by suresh.r on 18-08-2014 against Inc#50616 end
							double dtl_trn_val= Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))*Double.parseDouble(""+item_qty);
							/**
								 * @Name - Priya
								 * @Date - 03/06/2010
								 * @Inc# - 
								 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost
								 */
							//int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
							hmDtlTemp.put("item_cost_value",""+setNumber(""+dtl_trn_val,noOfDecimalsForCost));
							double to_str_qty = mm_trn_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("TO_STORE_CODE"));
							hmDtlTemp.put("mm_trn_qty",""+mm_trn_qty);
							hmDtlTemp.put("to_str_qty",""+to_str_qty);
							alDtlData.add(hmDtlTemp);
						}
					}
					else if(getTrn_type().equals("ISS")||getTrn_type().equals("URG")){
						alParam.add((String)hmDtlRecords.get("SEQ_NO"));
						hmTemp = (HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_URG_ISS_HDR_SELECT"),alParam);
						alTemp = new ArrayList();
						alTemp.add((String)hmTemp.get("DOC_DATE"));
						alTemp.add(checkForNull((String)hmTemp.get("DOC_REF")));
						alTemp.add("Y");//Finalized_YN
						alTemp.add("Y");//PROCESSS
						alTemp.add((String)hmTemp.get("CLOSE_REQ_AFTER_ISSUE_YN"));
						alTemp.add(checkForNull((String)hmTemp.get("REMARKS")));
						alTemp.add(getLoginById());
						alTemp.add(getLoginAtWsNo());
						alTemp.add(getLoginFacilityId());
						alTemp.add(getLoginFacilityId());
						alTemp.add((String)hmTemp.get("DOC_TYPE_CODE"));
						alTemp.add((String)hmTemp.get("DOC_NO"));
						alTemp.add((String)hmTemp.get("SEQ_NO"));
						alHdrData.add(alTemp);
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_URG_ISS_DTL_SELECT"),alParam);
						for(int j=0;j<alTemp.size();j++){
							hmDtlTemp = new HashMap();
							hmTemp = (HashMap)alTemp.get(j);
							hmDtlTemp.put("facility_id",hmTemp.get("FACILITY_ID"));
							hmDtlTemp.put("doc_date",hmTemp.get("DOC_DATE"));
							hmDtlTemp.put("doc_type_code",hmTemp.get("DOC_TYPE_CODE"));
							hmDtlTemp.put("doc_no",hmTemp.get("DOC_NO"));
							hmDtlTemp.put("doc_srl_no",hmTemp.get("DOC_SRL_NO"));
							hmDtlTemp.put("store_code",hmTemp.get("STORE_CODE"));
							hmDtlTemp.put("to_store_code",hmTemp.get("TO_STORE_CODE"));
							hmDtlTemp.put("item_code",hmTemp.get("ITEM_CODE"));
							hmDtlTemp.put("stock_item_yn",hmTemp.get("STOCK_ITEM_YN"));
							double mm_trn_qty = 0;
							double item_qty	= 0;
							ArrayList al = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
							for(int m=0;m<al.size();m++){
								HashMap hm = (HashMap)al.get(m);
								if(((String)hm.get("ITEM_CODE")).equals((String)hmTemp.get("ITEM_CODE"))){
									mm_trn_qty	= mm_trn_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"));
									item_qty	= item_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"))+ Double.parseDouble(((String)hm.get("REJECTED_QTY")).equals("")?"0":(String)hm.get("REJECTED_QTY"));
								}
							}
							hmDtlTemp.put("tmp_item_qty",""+item_qty);
							item_qty = item_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("STORE_CODE"));
							hmDtlTemp.put("item_qty",""+item_qty);
							hmDtlTemp.put("item_unit_cost",hmTemp.get("ITEM_UNIT_COST"));
							double dtl_trn_val= Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))*Double.parseDouble(""+item_qty);
							/**
								 * @Name - Priya
								 * @Date - 03/06/2010
								 * @Inc# - 
								 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost
								 */
							int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
							hmDtlTemp.put("item_cost_value",""+setNumber(""+dtl_trn_val,noOfDecimalsForCost));
							hmDtlTemp.put("ret_item_qty",hmTemp.get("RET_ITEM_QTY"));
							hmDtlTemp.put("issue_uom_conv",hmTemp.get("ISSUE_UOM_CONV"));
							hmDtlTemp.put("issue_uom",hmTemp.get("ISSUE_UOM"));
							hmDtlTemp.put("issue_uom_qty",hmTemp.get("ISSUE_UOM_QTY"));
							hmDtlTemp.put("remarks",hmTemp.get("REMARKS"));
							hmDtlTemp.put("seq_no",hmTemp.get("SEQ_NO"));
							hmDtlTemp.put("language_id",getLanguageId());
							hmDtlTemp.put("mode","2");
							double to_str_qty = mm_trn_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("TO_STORE_CODE"));
							hmDtlTemp.put("mm_trn_qty",""+mm_trn_qty);
							hmDtlTemp.put("to_str_qty",""+to_str_qty);
							alDtlData.add(hmDtlTemp);
						}
					}else if(getTrn_type().equals("RET")){
						hmTemp = (HashMap)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_RET_HDR_SELECT"),alParam);
						alTemp = new ArrayList();
						alTemp.add((String)hmTemp.get("DOC_DATE"));
						alTemp.add(checkForNull((String)hmTemp.get("DOC_REF")));
						alTemp.add("Y");//Finalized_YN
						alTemp.add("Y");//PROCESS FOR ACK
						alTemp.add(getLoginById());
						alTemp.add(getLoginAtWsNo());
						alTemp.add(getLoginFacilityId());
						alTemp.add(getLoginFacilityId());
						alTemp.add((String)hmTemp.get("DOC_TYPE_CODE"));
						alTemp.add((String)hmTemp.get("DOC_NO"));
						alHdrData.add(alTemp);
						alTemp = (ArrayList)fetchRecords(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_FINAL_RET_DTL_SELECT"),alParam);
						for(int j=0;j<alTemp.size();j++){
							hmDtlTemp = new HashMap();
							hmTemp = (HashMap)alTemp.get(j);
							hmDtlTemp.put("doc_date",hmTemp.get("DOC_DATE"));
							hmDtlTemp.put("doc_type_code",hmTemp.get("DOC_TYPE_CODE"));
							hmDtlTemp.put("doc_no",hmTemp.get("DOC_NO"));
							hmDtlTemp.put("doc_srl_no",hmTemp.get("DOC_SRL_NO"));
							hmDtlTemp.put("from_store_code",hmTemp.get("FM_STORE_CODE"));
							hmDtlTemp.put("to_store_code",hmTemp.get("TO_STORE_CODE"));
							hmDtlTemp.put("item_code",hmTemp.get("ITEM_CODE"));
							hmDtlTemp.put("stock_item_yn",hmTemp.get("STOCK_ITEM_YN"));
							double mm_trn_qty = 0;
							double item_qty	= 0;
							double item_unit_cost_trn_dtl = 0;
							ArrayList al = (ArrayList)hmFinalTFRExpRecords.get((String)hmDtlRecords.get("DOC_NO")+"~"+(String)hmDtlRecords.get("SEQ_NO"));
							for(int m=0;m<al.size();m++){
								HashMap hm = (HashMap)al.get(m);
								if(((String)hm.get("ITEM_CODE")).equals((String)hmTemp.get("ITEM_CODE"))){
									mm_trn_qty	= mm_trn_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"));
									item_qty	= item_qty + Double.parseDouble(((String)hm.get("RECEIVED_QTY")).equals("")?"0":(String)hm.get("RECEIVED_QTY"))+ Double.parseDouble(((String)hm.get("REJECTED_QTY")).equals("")?"0":(String)hm.get("REJECTED_QTY"));
								}
							}
							hmDtlTemp.put("tmp_item_qty",""+item_qty);
							item_qty = item_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("FM_STORE_CODE"));
							hmDtlTemp.put("item_qty",""+item_qty);
							hmDtlTemp.put("item_unit_cost",hmTemp.get("ITEM_UNIT_COST"));

							//Added to pass unit cost as base to st_item_trn_dtl against inc#50521
								item_unit_cost_trn_dtl = Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))/ getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("FM_STORE_CODE"));
							//Added ends

							double dtl_trn_val= Double.parseDouble((String)hmTemp.get("ITEM_UNIT_COST"))*Double.parseDouble(""+item_qty);
							/**
								 * @Name - Priya
								 * @Date - 03/06/2010
								 * @Inc# - 
								 * @Desc -  To get no of decimals for cost and round up item_cost_value with noOfDecimalsForCost
								 */
							int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost());
							hmDtlTemp.put("item_unit_cost_trn_dtl",""+setNumber(""+item_unit_cost_trn_dtl,noOfDecimalsForCost));//Added to pass unit cost as base to st_item_trn_dtl against inc#50521
							hmDtlTemp.put("item_cost_value",""+setNumber(""+dtl_trn_val,noOfDecimalsForCost));
							double to_str_qty = mm_trn_qty / getConvFactTemp((String)hmTemp.get("ITEM_CODE"),(String)hmTemp.get("TO_STORE_CODE"));
							hmDtlTemp.put("mm_trn_qty",""+mm_trn_qty);
							hmDtlTemp.put("to_str_qty",""+to_str_qty);
							hmDtlTemp.put("remarks",checkForNull((String)hmTemp.get("REMARKS"),""));
							hmDtlTemp.put("uom_code",hmTemp.get("UOM_CODE"));
							hmDtlTemp.put("mode","2");
							alDtlData.add(hmDtlTemp);
						}
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
			//Added for AMS-SCF-0692 start
			hmResult.put( "message", e.getMessage()) ;
			String message = (String)hmResult.get("message");
		if(message.contains("RECORD_UPDATED_BY_OTH_USER1"))
		{
			//System.out.println("inside catch");
			hmResult.put("result", TRUE);
			hmResult.put("msgid","RECORD_UPDATED_BY_OTH_USER1");
			hmResult.put("message","APP-ST0242 The Record Already  Used By Other User.Please Try again...");
			return hmResult;
		}
		}
		//Added for AMS-SCF-0692 end
		for(int i=0;i<alReverseFinalYN.size();i=i+2){
			alTemp = new ArrayList();
			alTemp.add(alReverseFinalYN.get(i));
			alTemp.add(alReverseFinalYN.get(i+1));
			alReverseYN.add(alTemp);
		}
		hmTableData.put("properties",	getProperties());
		hmTableData.put("ACK_HDR_DATA",	alAckHdrData);
		hmTableData.put("ACK_DTL_DATA",	alAckDTLData);
		hmTableData.put("ACK_HDR_MOD_DATA",	alModAckHdrData);
		hmTableData.put("ACK_DTL_MOD_DATA",	alModAckDtlData);
		hmTableData.put("ACK_DTL_REV_DATA",	alReverseYN);
		hmTableData.put("HDR_DATA",		alHdrData);
		hmTableData.put("DTL_DATA",		alDtlData);
		hmTableData.put("DTL_EXP_DATA",	alDtlExpRecords);
		hmTableData.put("COMMON_DATA",	alCommonData);
		hmTableData.put("LANGUAGE_DATA",allanguageData);
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_INSERT",getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_INSERT"));
		//hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_INSERT",getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_INSERT"));
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_INSERT","INSERT INTO ST_ACKNOWLEDGE_TRN_DTL(FACILITY_ID, DOC_TYPE_CODE, DOC_NO, DOC_SRL_NO, DOC_DATE, BATCH_ID, EXPIRY_DATE_OR_RECEIPT_DATE, TRADE_ID, ITEM_CODE, ISSUE_QTY, ISS_RCVD_UOM, RECEIVED_QTY, BIN_LOCATION_CODE, NEW_BIN_LOCATION_CODE, REMARKS, ADDED_BY_ID, ADDED_DATE, ADDED_AT_WS_NO, ADDED_FACILITY_ID, MODIFIED_BY_ID, MODIFIED_DATE, MODIFIED_AT_WS_NO, MODIFIED_FACILITY_ID,SEQ_NO,REJECTED_QTY,TMP_RECEIVED_QTY_1,TMP_RECEIVED_QTY_2,TMP_REJECTED_QTY_1,TMP_REJECTED_QTY_2) VALUES(?,?,?,?,TO_DATE(?,'DD/MM/YYYY'),?,TO_DATE(?,'DD/MM/YYYY'),?,?,?,?,?,?,?,?,?,SYSDATE,?,?,?,SYSDATE,?,?,?,NVL(?,0),?,?,?,?)");

		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_UPDATE",getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_UPDATE"));
		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_DTL_UPDATE","UPDATE ST_ACKNOWLEDGE_TRN_DTL SET RECEIVED_QTY = NVL(RECEIVED_QTY,0)+?, REMARKS = ?, NEW_BIN_LOCATION_CODE = ?, REJECTED_QTY = NVL(REJECTED_QTY ,0)+ NVL(?,0),TMP_RECEIVED_QTY_2 = ?,TMP_REJECTED_QTY_2 = ?, MODIFIED_BY_ID=?, MODIFIED_DATE=SYSDATE, MODIFIED_AT_WS_NO=?, MODIFIED_FACILITY_ID=? WHERE DOC_NO = ? AND DOC_TYPE_CODE=? AND DOC_SRL_NO = ? AND BATCH_ID =? AND TO_CHAR(EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY')=? AND TRADE_ID =? AND SEQ_NO = ? AND BIN_LOCATION_CODE = ?");//Added by Shazana for IN:065033

		hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_TRN_HDR_UPDATE_FLAG","UPDATE ST_ACKNOWLEDGE_TRN_HDR SET /*ACKNOWLEDGE_YN='N', */CONFIRM_YN = 'N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		if(getTrn_type().equals("TFR")){
			hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_UPDATE_FLAG","UPDATE ST_TRANSFER_HDR SET FINALIZED_YN='N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		}else if(getTrn_type().equals("ISS")||getTrn_type().equals("URG")){
			hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_UPDATE_FLAG","UPDATE ST_ISSUE_HDR SET FINALIZED_YN='N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		}else if(getTrn_type().equals("RET")){
			hmSQLMap.put("ST_SQL_ST_ACKNOWLEDGE_UPDATE_FLAG","UPDATE ST_ISSUE_RET_HDR SET FINALIZED_YN='N' WHERE DOC_TYPE_CODE = ? AND DOC_NO = ?");
		}
		try{
			Object home = com.ehis.eslp.ServiceLocator.getInstance().getHome(getStRepositoryValue("JNDI_ST_ACKNOWLEDGMENT"),AcknowledgmentLocalHome.class,getLocalEJB());
			Object busObj = (home.getClass().getMethod("create",null)).invoke(home,null);
			Object argArray[] = new Object[2];
			argArray[0] = hmTableData;
			argArray[1] = hmSQLMap;

			Class [] paramArray = new Class[2];
			paramArray[0] = hmTableData.getClass(); 
			paramArray[1] = hmSQLMap.getClass();
			hmResult = (HashMap)(busObj.getClass().getMethod("insert",paramArray)).invoke(busObj,argArray);
			(busObj.getClass().getMethod("remove",null)).invoke(busObj,null);

			if( ((Boolean) hmResult.get("result")).booleanValue() )	
				hmResult.put( "message", getSTMessage(getLanguageId(),(String) hmResult.get( "msgid" ),"ST") ) ;
			else{
				if( hmResult.get("msgid")!=null  )
					//hmResult.put( "message", (String) hmResult.get( "msgid" ) ) ;
					  hmResult.put( "message", getSTMessage(getLanguageId(),(String) hmResult.get( "msgid" ),"ST") ) ;
				 else
					hmResult.put( "message", (String) hmResult.get( "msgid" )) ;
				if(hmResult.get("flag") != null)
					hmResult.put( "flag", replaceNewLineChar((String)hmResult.get("flag")) ) ;
				clear();
			}
		}catch(Exception e){
			e.printStackTrace();
			hmResult.put( "message", "Bean 393: "+e.toString()) ;
		}
		return hmResult;
	}
	public HashMap stockSQL(){

	HashMap hmSQLMap		=	new HashMap();

	/*
	 * sql for Stock Transfer
	 */
		hmSQLMap.put("sql_sy_acc_entity_doc_type_select", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT"));
		if(getTrn_type().equals("TFR")){
			hmSQLMap.put("stSQLHdrUpdate", getStRepositoryValue("SQL_ST_TRANSFER_HDR_UPDATE"));
			hmSQLMap.put("stSQLHdrInsert", getStRepositoryValue("SQL_ST_TRANSFER_HDR_INSERT"));
			hmSQLMap.put("stSQLHdrDelete", getStRepositoryValue("SQL_ST_TRANSFER_HDR_DELETE"));
			hmSQLMap.put("stSQLDtlUpdate", getStRepositoryValue("SQL_ST_TRANSFER_DTL_UPDATE"));
			hmSQLMap.put("stSQLDtlInsert", getStRepositoryValue("SQL_ST_TRANSFER_DTL_INSERT"));
			hmSQLMap.put("stSQLDtlDeleteAll", getStRepositoryValue("SQL_ST_TRANSFER_DTL_DELETE_ALL"));
			hmSQLMap.put("stSQLDtlDelete", getStRepositoryValue("SQL_ST_TRANSFER_DTL_DELETE"));
			hmSQLMap.put("stSQLExpUpdate", getStRepositoryValue("SQL_ST_TRANSFER_DTL_EXP_UPDATE"));
			hmSQLMap.put("stSQLExpInsert", getStRepositoryValue("SQL_ST_TRANSFER_DTL_EXP_INSERT"));
			hmSQLMap.put("stSQLExpDeleteAll", getStRepositoryValue("SQL_ST_TRANSFER_DTL_EXP_DELETE_ALL"));
			hmSQLMap.put("stSQLExpDelete", getStRepositoryValue("SQL_ST_TRANSFER_DTL_EXP_DELETE"));
			hmSQLMap.put("sql_sy_acc_entity_doc_type_select", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT"));
			hmSQLMap.put("sql_sy_acc_entity_doc_type_update", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE"));
			hmSQLMap.put("sql_sy_acc_entity_doc_type_select_flag", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG"));
			hmSQLMap.put("ItemBatchInsertSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_INSERT"));
			hmSQLMap.put("ItemBatchUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_UPDATE"));
			hmSQLMap.put("BatchExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_BATCH_EXISTS"));
			hmSQLMap.put("ItemBatchDeleteSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_DELETE"));
			hmSQLMap.put("BatchControlInsertSQL", getStRepositoryValue("SQL_ST_BATCH_CONTROL_INSERT"));
			hmSQLMap.put("ItemBatchStcPosSelectSQL", getStRepositoryValue("SQL_ST_GET_ITEM_BATCH_STOCK_POS"));
			hmSQLMap.put("ItemBatchExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_ITEM_BATCH_EXISTS")); 
			hmSQLMap.put("ItemStoreStkPosSelectSQL", getStRepositoryValue("SQL_ST_GET_ITEM_STORE_STOCK_POS"));
			hmSQLMap.put("ItemStoreQtyUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_STORE_QTY_UPDATE"));
			hmSQLMap.put("ItemCostValueSelectSQL", getStRepositoryValue("SQL_ST_ITEM_VALUE_SELECT"));
			hmSQLMap.put("ItemMasterUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_MASTER_UPDATE"));
			hmSQLMap.put("SQL_TRADE_ID_APPLICABLE_SELECT", getStRepositoryValue("SQL_TRADE_ID_APPLICABLE_SELECT"));
			hmSQLMap.put("SQL_DFLT_TRADE_ID_SELECT", getStRepositoryValue("SQL_DFLT_TRADE_ID_SELECT"));
			hmSQLMap.put("SQL_ITEM_TRADE_SELECT", getStRepositoryValue("SQL_ITEM_TRADE_SELECT"));
			hmSQLMap.put("SQL_ITEM_CODE_TRADE_ID_INSERT", getStRepositoryValue("SQL_ITEM_CODE_TRADE_ID_INSERT")); 
			hmSQLMap.put("SQLBatchBlockRelease", getStRepositoryValue("SQL_ST_ITEM_BATCH_ISS_AUTH_UPDATE"));
			hmSQLMap.put("GetMonthAndYear", getStRepositoryValue("SQL_ST_GET_MONTH_AND_YEAR"));
			hmSQLMap.put("SummaryExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_SUMMARY_EXISTS"));
			hmSQLMap.put("ItemMovSumInsertSQL", getStRepositoryValue("SQL_STOCK_TRANSFER_ST_ITEM_MOVE_SUMM_INSERT"));
			hmSQLMap.put("ItemMovSumFromUpdateSQL", getStRepositoryValue("SQL_ST_STOCK_TRANSFER_FROM_ITEM_MOVE_SUMM_UPDATE"));
			hmSQLMap.put("ItemMovSumToUpdateSQL", getStRepositoryValue("SQL_ST_STOCK_TRANSFER_TO_ITEM_MOVE_SUMM_UPDATE"));
			hmSQLMap.put("FmItemMovSumInsertSQL", getStRepositoryValue("SQL_FM_STOCK_TRANSFER_ST_ITEM_MOVE_SUMM_INSERT"));
			hmSQLMap.put("ToItemMovSumInsertSQL", getStRepositoryValue("SQL_TO_STOCK_TRANSFER_ST_ITEM_MOVE_SUMM_INSERT"));
			hmSQLMap.put("FmItemMovSumFromUpdateSQL", getStRepositoryValue("SQL_FM_STOCK_TRANSFER_FROM_ITEM_MOVE_SUMM_UPDATE"));
			hmSQLMap.put("ToItemMovSumFromUpdateSQL", getStRepositoryValue("SQL_TO_STOCK_TRANSFER_FROM_ITEM_MOVE_SUMM_UPDATE"));
			hmSQLMap.put("TrnDtlInsertSQL", getStRepositoryValue("SQL_ST_STOCK_TRANSFER_ITEM_TRN_DTL_INSERT"));
			hmSQLMap.put("sql_st_transfer_dtl_exp_select_for_block_rel", getStRepositoryValue("SQL_ST_TRANSFER_DTL_EXP_SELECT_FOR_BLOCK_REL"));
			hmSQLMap.put("sql_st_records_per_trn_select", getStRepositoryValue("SQL_ST_RECORDS_PER_TRN_SELECT"));
			hmSQLMap.put("SQL_ST_CONV_FACTOR_SELECT", getStRepositoryValue("SQL_ST_CONV_FACTOR_SELECT"));
			hmSQLMap.put("SQL_ST_GEN_UOM_CODE_SELECT", getStRepositoryValue("SQL_ST_GEN_UOM_CODE_SELECT"));
		}else if(getTrn_type().equals("URG")||getTrn_type().equals("ISS")){
	/* Queries For Issue(URG/ISS)*/
//			hmSQLMap.put("RequestStatusUpdateSQL", getStRepositoryValue("SQL_ST_REQUEST_HDR_ISS_AUTH_UPDATE")); commented by Badmavathi against ML-BRU-SCF-1555
			hmSQLMap.put("RequestStatusUpdateSQL", getStRepositoryValue("SQL_ST_REQUEST_HDR_STATUS_ISS_AUTH_UPDATE"));
			hmSQLMap.put("IssueHdrUpdateSQL", getStRepositoryValue("SQL_ST_ISSUE_HDR_UPDATE"));
			String SQL_ST_ISSUE_DTL_QTY_UPDATE="UPDATE st_issue_dtl SET iss_item_qty	= NVL(?,0) , item_unit_cost = ? ,item_cost_value = ?,	modified_by_id = ?,	modified_date =	sysdate, modified_at_ws_no = ?,	modified_facility_id = ? , issue_uom = ? ,  issue_uom_conv = ? , issue_uom_qty = ?,remarks=? WHERE facility_id = ? AND doc_type_code = ? AND doc_no	= ?	AND	seq_no = ? AND doc_srl_no =	?";
		
			hmSQLMap.put("IssueQtyUpdateSQL", SQL_ST_ISSUE_DTL_QTY_UPDATE);
			hmSQLMap.put("RequestQtyUpdateSQL", getStRepositoryValue("SQL_ST_REQUEST_DTL_QTY_UPDATE"));
			hmSQLMap.put("RequestStatusSelect", getStRepositoryValue("SQL_ST_REQUEST_STATUS_SELECT"));
			hmSQLMap.put("ItemMovSumInsertSQL", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_INSERT"));
			hmSQLMap.put("ItemMovSumUpdateSQL", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE"));
			hmSQLMap.put("ItemTrnDtlInsertSQL", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_ITEM_TRN_DTL_INSERT"));
			hmSQLMap.put("GetStockItemYNFlag", getStRepositoryValue("SQL_ST_STOCK_ITEM_YN_FLAG"));
			hmSQLMap.put("CommitedQtySelect", getStRepositoryValue("SQL_ST_COMMITTED_QTY_SELECT"));
			hmSQLMap.put("expForDelSQL", getStRepositoryValue("SQL_ST_ISS_EXP_SELECT_FOR_DEL"));
			hmSQLMap.put("expForBlockRel", getStRepositoryValue("SQL_ST_DTL_EXP_SELECT_FOR_BLOCK_REL"));
			hmSQLMap.put("InsertDTLSQL", eST.Common.StRepository.getStKeyValue("SQL_ST_ISSUE_DTL_INSERT")); 
			hmSQLMap.put("InsertDTLEXPSQL", eST.Common.StRepository.getStKeyValue("SQL_ST_ISSUE_DTL_EXP_INSERT")); 
			hmSQLMap.put("stSQLHdrUpdate", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_HDR_UPDATE"));
			hmSQLMap.put("stSQLHdrInsert", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_HDR_INSERT"));
			hmSQLMap.put("stSQLHdrDelete", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_HDR_DELETE"));
			hmSQLMap.put("stSQLDtlUpdate", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_UPDATE"));
			hmSQLMap.put("stSQLDtlInsert", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_INSERT"));
			hmSQLMap.put("stSQLDtlDeleteAll", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_DELETE_ALL"));
			hmSQLMap.put("stSQLDtlDelete", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_DELETE"));
			hmSQLMap.put("stSQLExpUpdate", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_EXP_UPDATE"));
			hmSQLMap.put("stSQLExpInsert", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_EXP_INSERT"));
			hmSQLMap.put("stSQLExpDeleteAll", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_EXP_DELETE_ALL"));
			hmSQLMap.put("stSQLExpDelete", getStRepositoryValue("SQL_ST_ISSUE_REQ_URG_DTL_EXP_DELETE"));
			hmSQLMap.put("sql_sy_acc_entity_doc_type_select", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT"));
			hmSQLMap.put("sql_sy_acc_entity_doc_type_update", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE"));
			hmSQLMap.put("sql_sy_acc_entity_doc_type_select_flag", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG"));
			hmSQLMap.put("ItemBatchInsertSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_INSERT"));
			hmSQLMap.put("ItemBatchUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_UPDATE"));
			hmSQLMap.put("BatchExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_BATCH_EXISTS"));
			hmSQLMap.put("ItemBatchDeleteSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_DELETE"));
			hmSQLMap.put("BatchControlInsertSQL", getStRepositoryValue("SQL_ST_BATCH_CONTROL_INSERT"));
			hmSQLMap.put("ItemBatchStcPosSelectSQL", getStRepositoryValue("SQL_ST_GET_ITEM_BATCH_STOCK_POS"));
			hmSQLMap.put("ItemBatchExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_ITEM_BATCH_EXISTS")); 
			hmSQLMap.put("ItemStoreStkPosSelectSQL", getStRepositoryValue("SQL_ST_GET_ITEM_STORE_STOCK_POS"));
			hmSQLMap.put("ItemStoreQtyUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_STORE_QTY_UPDATE"));
			hmSQLMap.put("ItemCostValueSelectSQL", getStRepositoryValue("SQL_ST_ITEM_VALUE_SELECT"));
			hmSQLMap.put("ItemMasterUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_MASTER_UPDATE"));
			hmSQLMap.put("SQL_TRADE_ID_APPLICABLE_SELECT", getStRepositoryValue("SQL_TRADE_ID_APPLICABLE_SELECT"));
			hmSQLMap.put("SQL_DFLT_TRADE_ID_SELECT", getStRepositoryValue("SQL_DFLT_TRADE_ID_SELECT"));
			hmSQLMap.put("SQL_ITEM_TRADE_SELECT", getStRepositoryValue("SQL_ITEM_TRADE_SELECT"));
			hmSQLMap.put("SQL_ITEM_CODE_TRADE_ID_INSERT", getStRepositoryValue("SQL_ITEM_CODE_TRADE_ID_INSERT")); 
			hmSQLMap.put("GetStockItemYNFlag", getStRepositoryValue("SQL_ST_STOCK_ITEM_YN_FLAG"));
			hmSQLMap.put("SQLBatchBlockRelease", getStRepositoryValue("SQL_ST_ITEM_BATCH_ISS_AUTH_UPDATE"));
			hmSQLMap.put("GetMonthAndYear", getStRepositoryValue("SQL_ST_GET_MONTH_AND_YEAR"));
			hmSQLMap.put("SummaryExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_SUMMARY_EXISTS"));
			hmSQLMap.put("ItemMovSumFromUpdateSQL", getStRepositoryValue("SQL_ST_STOCK_TRANSFER_FROM_ITEM_MOVE_SUMM_UPDATE"));
			hmSQLMap.put("ItemMovSumToUpdateSQL", getStRepositoryValue("SQL_ST_STOCK_TRANSFER_TO_ITEM_MOVE_SUMM_UPDATE"));

			hmSQLMap.put("Fm_ST_ItemMovSumFromUpdateSQL", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_FROM_ST"));
			hmSQLMap.put("Fm_NS_ItemMovSumFromUpdateSQL", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_FROM_NS"));
			hmSQLMap.put("To_ST_ItemMovSumFromUpdateSQL", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_TO_ST"));
			hmSQLMap.put("To_NS_ItemMovSumFromUpdateSQL", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_TO_NS"));

			hmSQLMap.put("ItemMovSumInsertSQL_URG", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_INSERT_URG"));
			hmSQLMap.put("Fm_ST_ItemMovSumFromUpdateSQL_URG", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_FROM_ST_URG"));
			hmSQLMap.put("Fm_NS_ItemMovSumFromUpdateSQL_URG", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_FROM_NS_URG"));
			hmSQLMap.put("To_ST_ItemMovSumFromUpdateSQL_URG", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_TO_ST_URG"));
			hmSQLMap.put("To_NS_ItemMovSumFromUpdateSQL_URG", getStRepositoryValue("ST_SQL_ISSUE_ITEM_MOV_SUM_UPDATE_TO_NS_URG"));
			hmSQLMap.put("SQL_ST_ISSUE_REQ_UPDATE_PENDING_REQ_QTY", getStRepositoryValue("SQL_ST_ISSUE_REQ_UPDATE_PENDING_REQ_QTY"));
			hmSQLMap.put("sql_st_transfer_dtl_exp_select_for_block_rel", getStRepositoryValue("SQL_ST_TRANSFER_DTL_EXP_SELECT_FOR_BLOCK_REL"));
			hmSQLMap.put("sql_st_records_per_trn_select", getStRepositoryValue("SQL_ST_RECORDS_PER_TRN_SELECT"));
		}else if(getTrn_type().equals("RET")){
/*Issue Return Entries....*/
			hmSQLMap.put("HdrInsertSQL","INSERT INTO ST_ISSUE_RET_HDR ( facility_id,doc_type_code,doc_no,doc_date,doc_ref,fm_store_code,to_store_code,finalized_yn,gl_interfaced_yn,trn_type,added_by_id,added_date,added_at_ws_no,added_facility_id,modified_by_id,modified_date,modified_at_ws_no,modified_facility_id,ITEM_CLASS_CODE,ISS_DOC_TYPE_CODE, ISS_DOC_NO) values( ?,?,?,TO_DATE(?, 'dd/mm/yyyy'),?,?,?,?,?,?,?,SYSDATE,?,?,?,SYSDATE,?,?,?,?,? )");
			hmSQLMap.put("stSQLHdrUpdate", getStRepositoryValue("SQL_ST_ISSUE_RETURN_HDR_UPDATE"));
			hmSQLMap.put("stSQLHdrDelete", getStRepositoryValue("SQL_ST_ISSUE_RETURN_HDR_DELETE"));
			hmSQLMap.put("DtlInsertSQL", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_INSERT"));
			hmSQLMap.put("stSQLDtlUpdate", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_UPDATE"));
			hmSQLMap.put("stSQLDtlDelete", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_DELETE"));
			hmSQLMap.put("stSQLDtlDeleteALL", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_DELETE_ALL"));
			hmSQLMap.put("DtlExpInsertSQL", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_EXP_INSERT"));
			hmSQLMap.put("stSQLExpUpdate", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_EXP_UPDATE"));
			hmSQLMap.put("stSQLExpDelete", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_EXP_DELETE"));
			hmSQLMap.put("stSQLExpDeleteAll", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_EXP_DELETE_ALL"));
			hmSQLMap.put("sql_st_issue_ret_dtl_exp_select_for_block_rel", getStRepositoryValue("SQL_ST_ISSUE_RETURN_DTL_EXP_SELECT_FOR_BLOCK_REL"));
			hmSQLMap.put("TrnDtlInsertSQL", getStRepositoryValue("SQL_ST_ISSUE_RET_ITEM_TRN_DTL_INSERT"));
			hmSQLMap.put("TrnIssDtlExpUpdateSQL", getStRepositoryValue("SQL_ST_ISSUE_RET_DTL_EXP_UPDATE"));
			hmSQLMap.put("TrnIssDtlUpdateSQL", getStRepositoryValue("SQL_ST_ISSUE_RET_DTL_UPDATE"));
			hmSQLMap.put("NextDocNoUpdateSQL", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE"));
			hmSQLMap.put("SQLBatchBlockRelease", getStRepositoryValue("SQL_ST_ITEM_BATCH_ISSUE_RET_UPDATE"));
			hmSQLMap.put("ItemMovSumInsertSQLST", getStRepositoryValue("SQL_ISSUE_RETURN_ST_ITEM_MOVE_SUMM_INSERT_ST"));
			hmSQLMap.put("ItemMovSumInsertSQLNS", getStRepositoryValue("SQL_ISSUE_RETURN_ST_ITEM_MOVE_SUMM_INSERT_NS"));
			hmSQLMap.put("ItemMovSumFromUpdateSQLST", getStRepositoryValue("SQL_ST_ISSUE_RETURN_FROM_STORE_ITEM_MOVE_SUMM_UPDATE_ST"));
			hmSQLMap.put("ItemMovSumToUpdateSQLST", getStRepositoryValue("SQL_ST_ISSUE_RETURN_TO_STORE_ITEM_MOVE_SUMM_UPDATE_ST"));
			hmSQLMap.put("ItemMovSumFromUpdateSQLNS", getStRepositoryValue("SQL_ST_ISSUE_RETURN_FROM_STORE_ITEM_MOVE_SUMM_UPDATE_NS"));
			hmSQLMap.put("SQL_ST_ISSUE_RET_DTL_EXP_SELECT_MULTIPLE", getStRepositoryValue("SQL_ST_ISSUE_RET_DTL_EXP_SELECT_MULTIPLE"));
			hmSQLMap.put("SQL_ST_CONV_FACTOR_SELECT", getStRepositoryValue("SQL_ST_CONV_FACTOR_SELECT"));
			hmSQLMap.put("SQL_ST_GEN_UOM_CODE_SELECT", getStRepositoryValue("SQL_ST_GEN_UOM_CODE_SELECT"));
			hmSQLMap.put("GetStockItemYNFlag", getStRepositoryValue("SQL_ST_STOCK_ITEM_YN_FLAG"));
			hmSQLMap.put("ItemBatchInsertSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_INSERT"));
			hmSQLMap.put("ItemBatchUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_UPDATE"));
			hmSQLMap.put("BatchExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_BATCH_EXISTS"));
			hmSQLMap.put("ItemBatchDeleteSQL", getStRepositoryValue("SQL_ST_ITEM_BATCH_DELETE"));
			hmSQLMap.put("BatchControlInsertSQL", getStRepositoryValue("SQL_ST_BATCH_CONTROL_INSERT"));
			hmSQLMap.put("ItemBatchStcPosSelectSQL", getStRepositoryValue("SQL_ST_GET_ITEM_BATCH_STOCK_POS"));
			hmSQLMap.put("ItemBatchExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_ITEM_BATCH_EXISTS")); 
			hmSQLMap.put("ItemStoreStkPosSelectSQL", getStRepositoryValue("SQL_ST_GET_ITEM_STORE_STOCK_POS"));
			hmSQLMap.put("ItemStoreQtyUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_STORE_QTY_UPDATE"));
			hmSQLMap.put("ItemCostValueSelectSQL", getStRepositoryValue("SQL_ST_ITEM_VALUE_SELECT"));
			hmSQLMap.put("ItemMasterUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_MASTER_UPDATE"));
			hmSQLMap.put("sql_st_records_per_trn_select", getStRepositoryValue("SQL_ST_RECORDS_PER_TRN_SELECT"));
			hmSQLMap.put("SQL_TRADE_ID_APPLICABLE_SELECT", getStRepositoryValue("SQL_TRADE_ID_APPLICABLE_SELECT"));
			hmSQLMap.put("SQL_DFLT_TRADE_ID_SELECT", getStRepositoryValue("SQL_DFLT_TRADE_ID_SELECT"));
			hmSQLMap.put("SQL_ITEM_TRADE_SELECT", getStRepositoryValue("SQL_ITEM_TRADE_SELECT"));
			hmSQLMap.put("SQL_ITEM_CODE_TRADE_ID_INSERT", getStRepositoryValue("SQL_ITEM_CODE_TRADE_ID_INSERT")); 
			hmSQLMap.put("GetMonthAndYear", getStRepositoryValue("SQL_ST_GET_MONTH_AND_YEAR"));
			hmSQLMap.put("SummaryExistsCheckSQL", getStRepositoryValue("SQL_ST_CHECK_SUMMARY_EXISTS"));
			hmSQLMap.put("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG"));
			hmSQLMap.put("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT"));
		}
			hmSQLMap.put("DtlAdjInsertSQL", getStRepositoryValue("SQL_ST_ADJ_DTL_INSERT"));
			hmSQLMap.put("GetStockItemYNFlag", getStRepositoryValue("SQL_ST_STOCK_ITEM_YN_FLAG"));
			hmSQLMap.put("ExpInsertSQL", getStRepositoryValue("SQL_ST_ADJ_DTL_EXP_INSERT"));
			hmSQLMap.put("NextDocNoUpdateSQL", getStRepositoryValue("SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE"));

			hmSQLMap.put("ItemTrnDtlAdjInsertSQL", getStRepositoryValue("SQL_ST_ITEM_TRN_DTL_INSERT"));
			hmSQLMap.put("ItemMovSumAdjInsertSQL", getStRepositoryValue("SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_ADJ"));

			hmSQLMap.put("ItemMovSumAdjUpdateSQL", getStRepositoryValue("SQL_ST_ITEM_MOVE_SUMM_UPDATE"));

			hmSQLMap.put("HeaderCheckSQL", getStRepositoryValue("SQL_ST_ADJ_HEADER_SELECT"));
			hmSQLMap.put("HeaderUpdateSQL", getStRepositoryValue("SQL_ST_ADJ_HEADER_UPDATE"));

			hmSQLMap.put("DtlUpdateSQL", getStRepositoryValue("SQL_ST_ADJ_DTL_UPDATE"));

			hmSQLMap.put("DtlDeleteSQL", getStRepositoryValue("SQL_ST_ADJ_DETAIL_DELETE"));
			hmSQLMap.put("DtlExpDeleteSQL", getStRepositoryValue("SQL_ST_ADJ_DETAIL_EXP_DELETE"));
			hmSQLMap.put("SQL_ST_CONV_FACTOR_SELECT", getStRepositoryValue("SQL_ST_CONV_FACTOR_SELECT"));
			hmSQLMap.put("SQL_ST_GEN_UOM_CODE_SELECT", getStRepositoryValue("SQL_ST_GEN_UOM_CODE_SELECT"));
			// //added by Rabbani and Ganga #inc no:27426 on 08/08/11 
			hmSQLMap.put("sql_st_issue_dtl_for_auth_qty", getStRepositoryValue("SQL_ST_ISSUE_DTL_FOR_AUTH_QTY"));

			//hmSQLMap.put("expForDelSQL", getStRepositoryValue("SQL_ST_SELECT_BATCH_FOR_DELETE"));
			hmSQLMap.put("sql_st_facility_id_select", getStRepositoryValue("SQL_ST_FACILITY_ID_SELECT")); //Added by Rabbani on 15/04/2014
		return hmSQLMap;
    }

	public String getBin_Location_List(String default_bin,String doc_no,String item_code,String stock_item_yn,String seq_no){
		int count = 0;
		ArrayList alParam		=	new ArrayList();
		ArrayList alParamTemp	=	new ArrayList();
		ArrayList alTmpParam	=	new ArrayList();
		try{
			alTmpParam.add(doc_no);
			alTmpParam.add(getDoc_type_code());
			alTmpParam.add(seq_no);
			//count = Integer.parseInt((String)fetchRecord("SELECT COUNT(*) COUNT FROM ST_ACKNOWLEDGE_TRN_DTL WHERE DOC_NO = ? AND DOC_TYPE_CODE = ? AND SEQ_NO = ? OR (RECEIVED_QTY IS NULL AND REJECTED_QTY IS NULL AND TMP_RECEIVED_QTY_1 IS NULL AND TMP_REJECTED_QTY_1 IS NULL)", alTmpParam).get("COUNT"));
			//Added by suresh.r on 16-09-2014 against Perf tuning Inc 51157
			count = Integer.parseInt((String)fetchRecord(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_COUNT_QUERY"), alTmpParam).get("COUNT"));
			if((getAction_type()).equals("A")){
				alParam.add(getStore_code());
				alParamTemp.add(getStore_code());
				alParamTemp.add(item_code);
				if(count<=0 && (stock_item_yn.equals("Y"))){
					default_bin = checkForNull((String)fetchRecord("SELECT NVL (SIS.BIN_LOCATION_CODE, ST.DFLT_BIN_LOCATION_CODE) DEFAULT_BIN FROM ST_ITEM_STORE SIS, ST_STORE ST WHERE SIS.STORE_CODE = ? AND ITEM_CODE = ? AND SIS.STORE_CODE = ST.STORE_CODE",alParamTemp).get("DEFAULT_BIN"));
				}
			}
			else{
				alParam.add(getToStore());
				alParamTemp.add(getToStore());
				alParamTemp.add(item_code);
				if(count<=0){
					default_bin = checkForNull((String)fetchRecord("SELECT NVL (SIS.BIN_LOCATION_CODE, ST.DFLT_BIN_LOCATION_CODE) DEFAULT_BIN FROM ST_ITEM_STORE SIS, ST_STORE ST WHERE SIS.STORE_CODE = ? AND ITEM_CODE = ? AND SIS.STORE_CODE = ST.STORE_CODE",alParamTemp).get("DEFAULT_BIN"));
				}
			}
			alParam.add(getLanguageId());
			//return getListOptionTag(getListOptionArrayList(getStRepositoryValue("ST_SQL_ST_ACKNOWLEDGE_TRN_TYPE_SELECT"),param),"ISS");
		}catch(Exception e){
			e.printStackTrace();
		}
		return getListOptionTag(getListOptionArrayList("SELECT BIN_LOCATION_CODE, SHORT_DESC FROM  MM_BIN_LOCATION_LANG_VW MMBIN WHERE MMBIN.STORE_CODE = ? AND MMBIN.EFF_STATUS = 'E' AND MMBIN.LANGUAGE_ID = ?",alParam),default_bin);
	}
	public double lcmConvFactor(double frm_tmp, double to_tmp) {
		double lowest = frm_tmp < to_tmp ? frm_tmp : to_tmp;
		double hcd = 1;
		for (double i = lowest; i > 1; i--) {
			if (frm_tmp % i == 0 && to_tmp % i == 0) {
				hcd = i;
				break;
			}
		}
		double lcm = (frm_tmp * to_tmp) / hcd;
		return lcm;
	}
	public Boolean getAckReqd(){
		String ack_reqd = "N";
		try{
			HashMap hmTemp = (HashMap)fetchRecord("SELECT ISS_ACK_REQ_YN, RET_ACK_REQ_YN, TFR_ACK_REQ_YN FROM ST_FACILITY_PARAM WHERE FACILITY_ID = ?", getLoginFacilityId());
			if((checkForNull((String)hmTemp.get("ISS_ACK_REQ_YN"),"N")).equals("Y")){
				return true;
			}
			if((checkForNull((String)hmTemp.get("RET_ACK_REQ_YN"),"N")).equals("Y")){
				return true;
			}
			if((checkForNull((String)hmTemp.get("TFR_ACK_REQ_YN"),"N")).equals("Y")){
				return true;
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return checkForNull(ack_reqd,"N").equals("Y");
	}
	
	//Added by Rabbani #inc no:29537  on 15/11/11
	//Starts Here
	public String ProcessSuspendedYN() throws Exception{ 
		String chkdefaultParameters[] = {getLoginById(),getToStore()};	
		String Process_Suspended_yn			  = "N";	
		HashMap pr_suspended_yn	  = new HashMap();
		try{
		pr_suspended_yn = fetchRecord(getStRepositoryValue("PROCESS_SUSPENDED_YN"),chkdefaultParameters);			
		}catch(Exception e){
			 e.printStackTrace();
		}
		if(pr_suspended_yn.size() > 0){
		  Process_Suspended_yn = checkForNull((String)pr_suspended_yn.get("PROCESS_SUSPENDED_ITEMS_YN"),"N"); 
		}
		return Process_Suspended_yn;
	}
	
 public ArrayList getBatchStatus(String stItem_code,String stBatch_id,String stExpiry_date) throws Exception{
		String chkParameters[] = {stItem_code,stBatch_id,stExpiry_date};
		ArrayList result = new ArrayList();
		result = fetchRecords(getStRepositoryValue("SQL_ST_BATCH_STATUS_SELECT_QUERY"),chkParameters);
        return result;
	}	
	
	//Ends Here
	//Added for TFS id:6938 start
 public String getBarcodeApplForAckYN() {
		return this.barcode_appl_for_ack_yn;
	}
	
	public void setBarcodeApplForAckYN() throws Exception{
		String chkParameters[] = {getLoginFacilityId()};
		ArrayList result = new ArrayList();
		result = fetchRecords("SELECT BARCODE_FOR_ACK_REQ_YN FROM ST_FACILITY_PARAM WHERE facility_id = ?" ,chkParameters);
		this.barcode_appl_for_ack_yn = (String)(((HashMap)result.get(0)).get("BARCODE_FOR_ACK_REQ_YN"))==null?"N": (String)(((HashMap)result.get(0)).get("BARCODE_FOR_ACK_REQ_YN"));	
		}
//Added for TFS id:6938 end
//MOHE-CRF-0084.1
public String getRestrictUserAccessStore(){
    	String []stParameters=	{getLoginFacilityId()};
		HashMap hmRecord	=	null;
		try{
			hmRecord	=	(HashMap)fetchRecord("SELECT	RESTRICT_USER_ACCESS_STORE_YN FROM	st_facility_param WHERE facility_id=?", stParameters);
		}catch(Exception e){
			e.printStackTrace();
			return "";
		}
		return (String)hmRecord.get("RESTRICT_USER_ACCESS_STORE_YN"); 
    	
    }

public String dateConv2dBarcode(String date){
	if (!date.equals("")){
	SimpleDateFormat inputFormat = new SimpleDateFormat("yymmdd");
	SimpleDateFormat outputFormat = new SimpleDateFormat("dd/mm/yyyy");
	java.util.Date inputDate = null;
	try {
		inputDate = inputFormat.parse(date);
	} catch (ParseException e) {
		e.printStackTrace();
	} 
	String temp_exp_date = outputFormat.format(inputDate);
	return temp_exp_date;
	}
	return date;
}
}

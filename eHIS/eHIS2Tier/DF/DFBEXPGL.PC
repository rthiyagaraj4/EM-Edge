
/* ACC_ENTITY_CODE comparision is removed due to AH backward compatability */


#include <stdio.h>
#include <stdlib.h>           
#include <string.h>
#include <bl.h>

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])

/*
#define DEBUG 0   
*/

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR	    hosp_name                                  [120],
	    date_time                                  [20],
	    uid_pwd	 			       [100],
	    user_id                                    [40],
	    nd_session_id                              [16],
	    nd_pgm_date                                [25],
	    d_curr_pgm_name                            [15],

	    nd_proc_month                              [3],
	    nd_proc_year                               [5],

	    nd_doc_type_code                           [7],
	    nd_doc_date                                [12],
	    nd_fm_trx_date                             [13],
	    nd_to_trx_date                             [13],
	    dummy                                      [2],
	    nd_doc_num                                 [9],
	    nd_operating_facility_id		       [3],
	    nd_ws_no			               [31],
	    nd_acc_entity_code			       [5],
	    d_module_valid_id			       [3];
 

VARCHAR    df_gl_main_acc1_code                         [100][7],
	   df_gl_main_acc2_code				[100][5],
	   df_gl_dept_code				[100][11],
	   df_gl_product_group_code			[100][4],
	   df_gl_product_line_code			[100][5],
	   df_gl_subledger_group_code			[100][4],
	   df_gl_subledger_line_code			[100][9],
	   df_gl_rowid					[100][31],
	   nd_cust_code			       		[100][9];


   VARCHAR t_rowid                                 [31],
	   t_main_acc1_code                        [7],
	   t_main_acc2_code                        [5],
	   t_dept_code                             [11],
	   t_product_group_code                    [4],
	   t_product_line_code                     [5],
	   t_subledger_group_code                  [4],
	   t_subledger_line_code                   [9],
	   t_concat_post_acc_code                  [41],
	   t_concat_post_acc_desc                  [64],	   
	   nd_cust_code1			   [9];

   VARCHAR df_cr_main_acc1_code                        [7],
	   df_cr_main_acc2_code                        [5],
	   df_cr_dept_code                             [11],
	   df_cr_product_group_code                    [4],
	   df_cr_product_line_code                     [5],
	   df_cr_subledger_group_code                  [4],
	   df_cr_subledger_line_code                   [9];

    VARCHAR d_message_id[7],
	    d_message_text[81];

    double df_gl_distribution_amt[100];

    double df_cr_distribution_amt;
    double t_distribution_amt;

    int  d_curr_year;
int  d_curr_month;

int nd_cal_month;
int nd_cal_year;

    long   d_gl_run_line_num = 0,
	   d_gl_run_line_num_sum = 0;

/* These variables are used for calling post_doc */

int  d_num_of_acc_periods;

char d_summ_flag, nd_rep_only,nd_trn_type;

char filename[150];
 
 int l_rec_cnt = 0;


long rec_cnt = 0;
char string_var [1000];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>


char msg_str[132];

long  hdr_ctr = 0;

char r_err_msg[100];

FILE *fp_sum;

int i, g_err_typ, 
    g_invalid_acc;

char g_err_id[10],
     g_err_msg[80];

long  num_ret = 0;

  int lctr2 = 0,pctr2 = 0;

struct tnode {
    char   *acct_code;
    double dr_amt;
    double cr_amt;
    char   *l_main_acc1_code;
    char   *l_main_acc2_code;
    char   *l_dept_code;
    char   *l_product_group_code;
    char   *l_product_line_code;
    char   *l_subledger_group_code;
    char   *l_subledger_line_code;		

    struct tnode *left;
    struct tnode *right;
};

double g_tot_dr_amt = 0,
       g_tot_cr_amt = 0;

struct tnode *root;
char *strdup();
struct tnode *addtree();

void proc_main(argc,argv)
char *argv[];
int argc;
{

    long n;

    if (argc < 6)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"DFBEXPGL");

    strcpy(uid_pwd.arr,argv[1]);
    uid_pwd.len = strlen(uid_pwd.arr);

    EXEC SQL CONNECT :uid_pwd;

    if(OERROR) {
		disp_message(ORA_MESG,"Unable to connect to oracle.");
		proc_exit();
    }
    set_meduser_role();

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    strcpy(nd_operating_facility_id.arr,argv[5]);
    nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr);
    strcpy(g_facility_id,nd_operating_facility_id.arr);

    strcpy(d_module_valid_id.arr , "DF");
    d_module_valid_id.len = strlen(d_module_valid_id.arr);

    fetch_prog_param();

    start_prog_msg();

    EXEC SQL SELECT acc_entity_code INTO :nd_acc_entity_code
    FROM sy_acc_entity 
    WHERE  acc_entity_id = :nd_operating_facility_id;

    nd_acc_entity_code.len = strlen(nd_acc_entity_code.arr);
    
    if(nd_rep_only != 'Y')
	start_prog_control();

    declare_cur();

    EXEC SQL SELECT CURRENT_ACC_YEAR,CURRENT_ACC_MONTH,
		NVL(SUMMARY_PROCESS_FLAG,'X')
	   INTO :d_curr_year,    :d_curr_month,
		:d_summ_flag
	   FROM GL_PARAMETER
	   /*WHERE ACC_ENTITY_CODE = :nd_acc_entity_code*/  //AH
	   ;

      if (OERROR)
          err_mesg("SELECT failed on table GL_PARAMETER",0,"");

      if (NOT_FOUND)
       err_mesg("Record not maintained in GL_PARAMETER",0,"");

	

    open_cur();
    i=0;


    root = NULL;

    do_updt();

    if(nd_rep_only == 'Y')
    {
		do_report(root);
     }
    else 
	{
	strcpy(OUTPUT_FILE_NAME,"dfbexpgl.log");	  
    
      if (nd_trn_type == 'O' || nd_trn_type == 'A') 
	   {fetch_doc_no();}

		export_gl(root);
	
	if(d_gl_run_line_num_sum) 
	{	    
    
		if (nd_trn_type == 'O' || nd_trn_type == 'A')
		{    
		  ins_hdr_rec_summary();

		  if (post_doc((long)0,nd_doc_type_code.arr,
		    atol(nd_doc_num.arr),r_err_msg) == -1)
			 err_mesg(r_err_msg,0,""); 
	      upd_doc_num();
		}		
		
	
	} 
    

   }
	
    close_cur();

    end_prog_msg();
    
    if(nd_rep_only != 'Y')
	end_prog_control();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
	 err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

fetch_prog_param()
{
    nd_proc_month.arr[0]      = '\0';
    nd_proc_year.arr[0]       = '\0';
    nd_doc_type_code.arr[0]   = '\0';
    nd_doc_date.arr[0]        = '\0';
    nd_fm_trx_date.arr[0]     = '\0';
    nd_to_trx_date.arr[0]     = '\0';
    nd_ws_no.arr[0]	      = '\0';


    nd_proc_month.len         = 0;
    nd_proc_year.len          = 0;
    nd_doc_type_code.len      = 0;
    nd_doc_date.len           = 0;
    nd_fm_trx_date.len        = 0;
    nd_to_trx_date.len        = 0;
    nd_ws_no.len	      = 0;

    nd_rep_only = '\0';
    nd_trn_type = '\0';

   EXEC SQL SELECT PARAM1,
		   PARAM2,PARAM3,PARAM4,PARAM5,PARAM6,NVL(PARAM7,'Y'),
		   PARAM8,NVL(PARAM9,'A'),PARAM10,PARAM11
	      INTO :nd_proc_month,
		   :nd_proc_year,
		   :nd_doc_type_code,
		   :nd_doc_date,
		   :nd_fm_trx_date,
		   :nd_to_trx_date,
		   :nd_rep_only,
		   :nd_ws_no,
		   :nd_trn_type,
		   :nd_cal_month,
		   :nd_cal_year
	      FROM SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_name
	       AND OPERATING_FACILITY_ID = :nd_operating_facility_id
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;    

   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_proc_month.arr[nd_proc_month.len]       = '\0';
   nd_proc_year.arr[nd_proc_year.len]         = '\0';
   nd_doc_type_code.arr[nd_doc_type_code.len] = '\0';
   nd_doc_date.arr[nd_doc_date.len]           = '\0';
   nd_fm_trx_date.arr[nd_fm_trx_date.len]     = '\0';
   nd_to_trx_date.arr[nd_to_trx_date.len]     = '\0';
   nd_ws_no.arr[nd_ws_no.len]		      = '\0';
}

declare_cur()
{
     EXEC SQL DECLARE df_GL_DISTRIBUTION_CUR CURSOR FOR
	       SELECT ROWID,
		      MAIN_ACC1_CODE,
		      MAIN_ACC2_CODE,
		      DEPT_CODE,
		      PRODUCT_GROUP_CODE,
		      PRODUCT_LINE_CODE,
		      SUBLEDGER_GROUP_CODE,
		      SUBLEDGER_LINE_CODE,
		      NVL(DISTRIBUTION_AMT,0),
		      CUST_CODE
		 FROM DF_GL_DISTRIBUTION
		WHERE POST_MONTH = :nd_proc_month
		  AND POST_YEAR  = :nd_proc_year
		  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		  AND NVL(GL_INTERFACE_FLAG,'N') = 'N';		  	  


     

     EXEC SQL DECLARE GL_POSTING_ACC_CUR CURSOR FOR
	       SELECT CONCAT_POST_ACC_DESC
		 FROM GL_POSTING_ACC
		WHERE MAIN_ACC1_CODE       = :t_main_acc1_code
		  AND MAIN_ACC2_CODE       = :t_main_acc2_code
		  AND DEPT_CODE            = :t_dept_code
		  AND PRODUCT_GROUP_CODE   = :t_product_group_code
		  AND PRODUCT_LINE_CODE    = :t_product_line_code
		  AND SUBLEDGER_GROUP_CODE = :t_subledger_group_code
		  AND SUBLEDGER_LINE_CODE  = :t_subledger_line_code;
	   /*       AND ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
				          WHERE ACC_ENTITY_ID = :nd_operating_facility_id);*/ //AH 
}

open_cur()
{
    EXEC SQL OPEN df_GL_DISTRIBUTION_CUR;

    if (RESOURCE_BUSY)
	 err_mesg("df_GL_DISTRIBUTION records can't be locked",0,"");
    else if (OERROR)
	 err_mesg("OPEN failed on cursor df_GL_DISTRIBUTION_CUR",0,"");


}

close_cur()
{
    EXEC SQL CLOSE df_GL_DISTRIBUTION_CUR;

    if (OERROR)
	 err_mesg("CLOSE failed on cursor df_GL_DISTRIBUTION_CUR",0,"");


}

do_updt()
{
    long n_recs;

	for(;;) 
	{
	 n_recs = 0;
     EXEC SQL WHENEVER NOT FOUND GOTO err_exit;

	for(i=0;i<100;i++)
	{
		df_gl_dept_code[i].arr[0] = '\0';
		df_gl_dept_code[i].len = 0;
	}

     EXEC SQL FETCH df_GL_DISTRIBUTION_CUR
	       INTO :df_gl_rowid,
		    :df_gl_main_acc1_code,
		    :df_gl_main_acc2_code,
		    :df_gl_dept_code,
		    :df_gl_product_group_code,
		    :df_gl_product_line_code,
		    :df_gl_subledger_group_code,
		    :df_gl_subledger_line_code,
		    :df_gl_distribution_amt,
		    :nd_cust_code;

    if (OERROR)
	 err_mesg("FETCH failed on cursor df_GL_DISTRIBUTION_CUR",0,"");

    for(i=0;i<100;i++)
	{
		df_gl_dept_code[i].arr[df_gl_dept_code[i].len] = '\0';		
	}
        
    n_recs = sqlca.sqlerrd[2];
    process_recs(sqlca.sqlerrd[2] - num_ret);
    num_ret = n_recs;
}


err_exit:
    EXEC SQL WHENEVER NOT FOUND CONTINUE;
	
    if((sqlca.sqlerrd[2] - num_ret) > 0);
	process_recs(sqlca.sqlerrd[2] - num_ret);
 }
 

process_recs(n)
long n;
{
    char aMesg[80];
    long i;
    char posting_acc[36];

    rec_cnt += n;

    for(i=0; i<n; i++) {

       strcpy(t_rowid.arr, df_gl_rowid[i].arr);
       strcpy(t_main_acc1_code.arr, df_gl_main_acc1_code[i].arr);
       strcpy(t_main_acc2_code.arr, df_gl_main_acc2_code[i].arr);
       strcpy(t_dept_code.arr, df_gl_dept_code[i].arr);
       strcpy(t_product_group_code.arr, df_gl_product_group_code[i].arr);
       strcpy(t_product_line_code.arr, df_gl_product_line_code[i].arr);
       strcpy(t_subledger_group_code.arr, df_gl_subledger_group_code[i].arr);
       strcpy(t_subledger_line_code.arr, df_gl_subledger_line_code[i].arr);
       strcpy(nd_cust_code1.arr,nd_cust_code[i].arr);       
  
       t_rowid.len                  = strlen(t_rowid.arr);
       t_main_acc1_code.len         = strlen(t_main_acc1_code.arr);
       t_main_acc2_code.len         = strlen(t_main_acc2_code.arr);
       t_dept_code.len              = strlen(t_dept_code.arr);
       t_product_group_code.len     = strlen(t_product_group_code.arr);
       t_product_line_code.len      = strlen(t_product_line_code.arr);
       t_subledger_group_code.len   = strlen(t_subledger_group_code.arr);
       t_subledger_line_code.len    = strlen(t_subledger_line_code.arr);
       nd_cust_code1.len	    = strlen(nd_cust_code1.arr);       

       t_distribution_amt = df_gl_distribution_amt[i];

       sprintf(posting_acc,"%s-%s %s %s-%s %s-%s",
	   t_main_acc1_code.arr,
	   t_main_acc2_code.arr,
	   t_dept_code.arr,
	   t_product_group_code.arr,
	   t_product_line_code.arr,
	   t_subledger_group_code.arr,
	   t_subledger_line_code.arr);

	   root = addtree(root, posting_acc, t_distribution_amt,
			  t_main_acc1_code.arr,
			  t_main_acc2_code.arr,
			  t_dept_code.arr,
			  t_product_group_code.arr,
			  t_product_line_code.arr,
			  t_subledger_group_code.arr,
			  t_subledger_line_code.arr);
		
    if(nd_rep_only != 'Y') 
	{
     

	EXEC SQL UPDATE DF_GL_DISTRIBUTION
		 SET    GL_INTERFACE_FLAG = 'Y',
			GL_INTERFACE_BY_ID = USER,     
			GL_INTERFACE_DATE = SYSDATE,      
			MODIFIED_BY_ID = USER ,
			MODIFIED_DATE  = SYSDATE,       
			MODIFIED_AT_WS_NO = :nd_ws_no,     
			MODIFIED_FACILITY_ID = :nd_operating_facility_id
		 WHERE  ROWID = :t_rowid;    // :df_gl_rowid;



       
	if(OERROR)
	    err_mesg("UPDATE failed on table df_GL_DISTRIBUTION",0,"");


    }
	}

    sprintf(aMesg,"Processed %ld Records.\n",rec_cnt);
    disp_message(INFO_MESG,aMesg);

    if(nd_rep_only != 'Y')
    {
	EXEC SQL SELECT count(*) INTO :l_rec_cnt 
	FROM DF_GL_DISTRIBUTION
	WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND POST_MONTH = :nd_proc_month
	AND POST_YEAR  = :nd_proc_year
	AND GL_INTERFACE_REQD_YN = 'Y'
	AND NVL(GL_INTERFACE_FLAG,'N') = 'N';

	if (l_rec_cnt > 0)
	{
	    //err_mesg("Error Encountered during Export Process, Use Report Option to Rectify",0,"");
	    disp_message(ERR_MESG,"Error Encountered during Export Process, Use Report Option to Rectify");
	    proc_exit();
	}
	else
	{
		EXEC SQL UPDATE df_parameters
		SET EXP_TO_GL_COMPLTD_MONTH = :nd_cal_month,       
		    EXP_TO_GL_COMPLTD_YEAR = :nd_cal_year
		WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id;		
	}
    }
}

struct tnode *addtree(p, w, n,main1,main2,dept,prod1,prod2,sleg1,sleg2)
struct tnode *p;
double n;
char *w,*main1,*main2,*dept,*prod1,*prod2,*sleg1,*sleg2;
{
    int cond;

    if(p==NULL) {
	p=(struct tnode *) malloc(sizeof(struct tnode));
	if(p==NULL) {
	    disp_message(ERR_MESG,"Unable to allocate memory");
	    proc_exit();
	}
	p->acct_code = strdup(w);
	p->l_main_acc1_code        = strdup(main1);
	p->l_main_acc2_code        = strdup(main2);
	p->l_dept_code             = strdup(dept);
	p->l_product_group_code    = strdup(prod1);
	p->l_product_line_code     = strdup(prod2);
	p->l_subledger_group_code  = strdup(sleg1);
	p->l_subledger_line_code   = strdup(sleg2);
	

	if(n < (double)0) {
	    p->cr_amt = -n;
	    p->dr_amt = 0;
	}
	else {
	    p->dr_amt = n;
	    p->cr_amt = 0;
	}
	p->left = p->right = NULL;
    }
    else if ((cond = strcmp(w,p->acct_code)) == 0) {
	if(n < (double)0)
	    p->cr_amt += -n;
	else
	    p->dr_amt += n;
    }
    else if(cond < 0)
	p->left = addtree(p->left, w, n,
			  main1,main2,dept,prod1,prod2,sleg1,sleg2);
    else 
	p->right = addtree(p->right, w,n,
			   main1,main2,dept,prod1,prod2,sleg1,sleg2);

    return p;
}
      
char *strdup(s)
char *s;
{
    char * p;
    p = (char *) malloc(strlen(s)+1);
    if (p != NULL)
	strcpy(p,s);
    else {
	disp_message(ERR_MESG,"unable to allocate memory");
	proc_exit();
    }

    return p;
}

do_report(p)
struct tnode* p;
{
    strcpy(filename,WORKING_DIR);
    strcat(filename,"dfrgldsu.lis");
	
	strcpy(OUTPUT_FILE_NAME,"dfrgldsu.lis");
    
    if ((fp_sum = fopen(filename,"w")) == NULL)
    {
	disp_message(ERR_MESG,"Error in opening file dfrgldsu.lis");
	proc_exit();
    }	


    fetch_hosp_name();

    print_title2();

    print_head2();

    treeprint(root);

    if (p) {
	print_total();
	fprintf(fp_sum,"\n\n                                         \
	     ***  END OF REPORT ***\n");
    fclose(fp_sum);
    }

}

treeprint(p)
struct tnode *p;
{
    int cnt = 0;

    if(p != NULL) {
	treeprint(p->left);
       g_invalid_acc = 0;

       
       get_post_desc(p);

       fprintf(fp_sum,"%-75s", p->acct_code);
       print_formated(p->dr_amt,fp_sum);fprintf(fp_sum," ");
       print_formated(p->cr_amt,fp_sum);fprintf(fp_sum," ");
       print_formated(p->dr_amt-p->cr_amt,fp_sum);
       g_tot_dr_amt += p->dr_amt;
       g_tot_cr_amt += p->cr_amt;
       fprintf(fp_sum,"\n");
       fprintf(fp_sum,"        %s\n",t_concat_post_acc_desc.arr);


/* Validate the posting account *****************************************/
       if(!g_invalid_acc) {
	 strcpy(t_main_acc1_code.arr,       p->l_main_acc1_code);
	 strcpy(t_main_acc2_code.arr,       p->l_main_acc2_code);
	 strcpy(t_dept_code.arr,            p->l_dept_code);
	 strcpy(t_product_group_code.arr,   p->l_product_group_code);
	 strcpy(t_product_line_code.arr,    p->l_product_line_code);
	 strcpy(t_subledger_group_code.arr, p->l_subledger_group_code);
	 strcpy(t_subledger_line_code.arr,  p->l_subledger_line_code);
  
	 t_main_acc1_code.len         = strlen(t_main_acc1_code.arr);
	 t_main_acc2_code.len         = strlen(t_main_acc2_code.arr);
	 t_dept_code.len              = strlen(t_dept_code.arr);
	 t_product_group_code.len     = strlen(t_product_group_code.arr);
	 t_product_line_code.len      = strlen(t_product_line_code.arr);
	 t_subledger_group_code.len   = strlen(t_subledger_group_code.arr);
	 t_subledger_line_code.len    = strlen(t_subledger_line_code.arr);
    
	 if(validate_posting_acct( t_main_acc1_code.arr,
				   t_main_acc2_code.arr,
				   t_dept_code.arr,
				   t_product_group_code.arr,
				   t_product_line_code.arr,
				   t_subledger_group_code.arr,
				   t_subledger_line_code.arr,
				   'Y',   /* For chking Bank Reconcile */
			           d_module_valid_id.arr,
				   nd_proc_year.arr,
				   nd_proc_month.arr,				   
				   &g_err_typ,
				   g_err_id,
				   g_err_msg
				 ) ==  -1)
	  {
	      if(g_err_typ)
		  fetch_msg(g_err_id);
	      else
		  strcpy(d_message_text.arr,g_err_msg);
  
	      fprintf(fp_sum,"****ERROR: %s\n",d_message_text.arr);
	      lctr2++;
  
	  }


	}

/************************************************************************/

       lctr2+= 2;
       cnt ++;
       if (lctr2 > 52)
	    print_head2();
       treeprint(p->right);
    }

}

print_total()
{
    fprintf(fp_sum,"%75s--------------- --------------- ---------------\n"," ");
    fprintf(fp_sum,"%65s TOTAL    "," ");
    print_formated(g_tot_dr_amt,fp_sum);fprintf(fp_sum," ");
    print_formated(g_tot_cr_amt,fp_sum);fprintf(fp_sum," ");
    print_formated(g_tot_dr_amt-g_tot_cr_amt,fp_sum);
    fprintf(fp_sum,"\n");
    fprintf(fp_sum,"%75s--------------- --------------- ---------------\n"," ");
    lctr2+= 4;
}

print_title2()   /* Title for Summary */
{
#ifdef DEBUG
  printf("In print title2\n");
#endif
fprintf(fp_sum,
"\fMDL : DF                                         %-30s                                      %-16s\n",
hosp_name.arr,date_time.arr);
fprintf(fp_sum,"OPR : %-30s \n", user_id.arr);
fprintf(fp_sum,
"REP : %-8s                       %s                                    PAGE : %4d\n",
"DFBEXPGL","GENERAL LEDGER DISTRIBUTION REPORT - SUMMARY     ", ++pctr2);
fprintf(fp_sum,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp_sum,"VER : 4.1\n");
fflush(fp_sum);

fprintf(fp_sum,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
fprintf(fp_sum,"                  TRANSACTION DATE  FROM : %10s\n",
					       nd_fm_trx_date.arr);
fprintf(fp_sum,"                                      TO : %10s\n\n",
					       nd_to_trx_date.arr);
fprintf(fp_sum,"                       PROCESSING PERIOD : %02d/%04d\n\n",
			 atoi(nd_proc_month.arr),atoi(nd_proc_year.arr));
}

print_head2()   /* Heading for Summary */
{
fprintf(fp_sum,
"\fMDL : DF                                         %-30s                                      %-16s\n",
hosp_name.arr,date_time.arr);
fprintf(fp_sum,"OPR : %-30s \n", user_id.arr);
fprintf(fp_sum,
"REP : %-8s                       %s                                    PAGE : %4d\n",
"DFBEXPGL","GENERAL LEDGER DISTRIBUTION REPORT - SUMMARY     ", ++pctr2);
fprintf(fp_sum,"                                         (FOR THE PERIOD %02d/%04d to %02d/%04d)\n",
atoi(nd_proc_month.arr),atoi(nd_proc_year.arr),
atoi(nd_proc_month.arr),atoi(nd_proc_year.arr));
fprintf(fp_sum,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp_sum,
"POSTING A/C & DESCRIPTION                                                            DEBIT          CREDIT         BALANCE\n");
fprintf(fp_sum,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp_sum);
lctr2 = 11;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
		    USER
	     INTO :hosp_name, :date_time, :user_id
	     FROM SY_ACC_ENTITY
	     WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

get_post_desc(p)
struct tnode *p;
{
      t_concat_post_acc_desc.arr[0]  = '\0';
      t_concat_post_acc_desc.len     = 0;

       strcpy(t_main_acc1_code.arr, p->l_main_acc1_code);
       strcpy(t_main_acc2_code.arr, p->l_main_acc2_code);
       strcpy(t_dept_code.arr, p->l_dept_code);
       strcpy(t_product_group_code.arr, p->l_product_group_code);
       strcpy(t_product_line_code.arr, p->l_product_line_code);
       strcpy(t_subledger_group_code.arr, p->l_subledger_group_code);
       strcpy(t_subledger_line_code.arr, p->l_subledger_line_code);

	   
       t_main_acc1_code.len         = strlen(t_main_acc1_code.arr);
       t_main_acc2_code.len         = strlen(t_main_acc2_code.arr);
       t_dept_code.len              = strlen(t_dept_code.arr);
       t_product_group_code.len     = strlen(t_product_group_code.arr);
       t_product_line_code.len      = strlen(t_product_line_code.arr);
       t_subledger_group_code.len   = strlen(t_subledger_group_code.arr);
       t_subledger_line_code.len    = strlen(t_subledger_line_code.arr);

	   

      EXEC SQL OPEN GL_POSTING_ACC_CUR;

      if (OERROR)
	   err_mesg("OPEN failed on cursor GL_POSTING_ACC_CUR",0,"");

      EXEC SQL FETCH GL_POSTING_ACC_CUR
		INTO :t_concat_post_acc_desc;

      if (OERROR)
	 err_mesg("FETCH failed on cursor GL_POSTING_ACC_CUR",0,"");

      t_concat_post_acc_desc.arr[t_concat_post_acc_desc.len]  = '\0';


	

      if(NO_DATA_FOUND) {
	 strcpy(t_concat_post_acc_desc.arr,"**** INVALID POSTING ACCOUNT ****"); 

	 g_invalid_acc = 1;
      }
}



print_formated(loc_amount,fp)
double loc_amount;
FILE *fp;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
        //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
          //      ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }


}


export_gl(p)
struct tnode *p;
{

    if(p != NULL) {

	export_gl(p->left);

	strcpy(t_main_acc1_code.arr,       p->l_main_acc1_code);
	strcpy(t_main_acc2_code.arr,       p->l_main_acc2_code);
	strcpy(t_dept_code.arr,            p->l_dept_code);
	strcpy(t_product_group_code.arr,   p->l_product_group_code);
	strcpy(t_product_line_code.arr,    p->l_product_line_code);
	strcpy(t_subledger_group_code.arr, p->l_subledger_group_code);
	strcpy(t_subledger_line_code.arr,  p->l_subledger_line_code);

	t_main_acc1_code.len         = strlen(t_main_acc1_code.arr);
	t_main_acc2_code.len         = strlen(t_main_acc2_code.arr);
	t_dept_code.len              = strlen(t_dept_code.arr);
	t_product_group_code.len     = strlen(t_product_group_code.arr);
	t_product_line_code.len      = strlen(t_product_line_code.arr);
	t_subledger_group_code.len   = strlen(t_subledger_group_code.arr);
	t_subledger_line_code.len    = strlen(t_subledger_line_code.arr);

	t_distribution_amt           = p->dr_amt - p->cr_amt;

	val_post_acc();
	
	ins_line_rec_summary();   

	export_gl(p->right);
    }

}

ins_line_rec_summary()
{
	d_gl_run_line_num_sum++;

	EXEC SQL INSERT INTO GL_TXN_DOC_LINE
	       (
		 ACC_ENTITY_CODE,
		 BATCH_NUM,
		 DOC_TYPE_CODE,
		 DOC_NUM,
		 MAIN_ACC1_CODE,
		 MAIN_ACC2_CODE,
		 DEPT_CODE,
		 PRODUCT_GROUP_CODE,
		 PRODUCT_LINE_CODE,
		 SUBLEDGER_GROUP_CODE,
		 SUBLEDGER_LINE_CODE,
		 LOCAL_AMT,
		 NARRATION,
		 LINE_NUM,
		 CUST_SUPP_CODE
	       )
	     VALUES
	       (
		 :nd_acc_entity_code,
		 0,
		 :nd_doc_type_code,
		 :nd_doc_num,
		 :t_main_acc1_code,
		 :t_main_acc2_code,
		 :t_dept_code,
		 :t_product_group_code,
		 :t_product_line_code,
		 :t_subledger_group_code,
		 :t_subledger_line_code,
		 :t_distribution_amt,
		 NULL,
		 :d_gl_run_line_num_sum,
		 :nd_cust_code1
	       );

       if (OERROR)
	   err_mesg("INSERT failed on table GL_TXN_DOC_LINE - SUMMARY",0,"");

}

ins_hdr_rec_summary()
{

       EXEC SQL INSERT INTO GL_TXN_DOC_HDR
	      (
		BATCH_NUM,
		DOC_TYPE_CODE,
		DOC_NUM,
		DOC_DATE,
		DOC_REF,
		NARRATION,
		POST_MONTH,
		POST_YEAR,
		CTRL_AMT,   
		ADDED_BY_ID,
		MODIFIED_BY_ID,
		ADDED_DATE,          
		MODIFIED_DATE,
		MAX_LINE_NUM,
		MODULE_ID,
		ADDED_FACILITY_ID   ,
		MODIFIED_FACILITY_ID,   
		ADDED_AT_WS_NO      ,   
		MODIFIED_AT_WS_NO,
		ACC_ENTITY_CODE 
	//	POSTED_FLAG
	      )
	    VALUES
	      (
		0,
				 						                
		:nd_doc_type_code,
		:nd_doc_num,
		to_date(:nd_doc_date,'DD/MM/YYYY'),
		NULL,
		NULL,
		:nd_proc_month,
		:nd_proc_year,
		0,
		USER,
		USER,
		SYSDATE,
		SYSDATE,
		:d_gl_run_line_num_sum,
		'DF',
		:nd_operating_facility_id   ,
		:nd_operating_facility_id,   
		:nd_ws_no      ,   
		:nd_ws_no,
		 :nd_acc_entity_code      
		// 'Y'
	     );

    if (OERROR)
	 err_mesg("INSERT failed on table GL_TXN_DOC_HDR - 2",0,"");
}

fetch_doc_no()
{

    d_num_of_acc_periods = 0;

    EXEC SQL SELECT NUM_OF_ACC_PERIODS
	       INTO :d_num_of_acc_periods
	       FROM SY_ACC_ENTITY
	       WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

    if (OERROR)
	 err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

     nd_doc_num.arr[0] = '\0';
     nd_doc_num.len    = 0;
	 
	 

     EXEC SQL SELECT NVL(NEXT_DOC_NO,1)
		INTO :nd_doc_num
		FROM SY_ACC_ENTITY_DOC_TYPE
	       WHERE DOC_TYPE_CODE = :nd_doc_type_code
	       /*
	       AND ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
				          WHERE ACC_ENTITY_ID = :nd_operating_facility_id)*/  //DF
 	       FOR UPDATE OF NEXT_DOC_NO NOWAIT;

     if (RESOURCE_BUSY)
	 err_mesg("SY_ACC_ENTITY_DOC_TYPE record can't be locked",0,"");

     if (OERROR)
	 err_mesg("SELECT failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");

     if (NOT_FOUND)
	 err_mesg("RECORD not found in SY_ACC_ENTITY_DOC_TYPE",0,"");

     nd_doc_num.arr[nd_doc_num.len]           = '\0';
}

upd_doc_num()
{
     EXEC SQL UPDATE SY_ACC_ENTITY_DOC_TYPE 
		 SET NEXT_DOC_NO = :nd_doc_num + 1,
			MODIFIED_BY_ID = USER ,
			MODIFIED_DATE  = SYSDATE   
	       WHERE DOC_TYPE_CODE = :nd_doc_type_code
	       /*
	       AND ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
	       WHERE ACC_ENTITY_ID = :nd_operating_facility_id)*/ //AH
	       ;

      if (OERROR)
	 err_mesg("UPDATE failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");
}

val_post_acc()
{
    char aMesg[80];
      if(validate_posting_acct( t_main_acc1_code.arr,
				t_main_acc2_code.arr,
				t_dept_code.arr,
				t_product_group_code.arr,
				t_product_line_code.arr,
				t_subledger_group_code.arr,
				t_subledger_line_code.arr,
				'Y',   /* For chking Bank Reconcile */
				d_module_valid_id.arr,
				nd_proc_year.arr,
				nd_proc_month.arr,
				&g_err_typ,
				g_err_id,
				g_err_msg
			     ) ==  -1)
      {
	     sprintf(aMesg,"Error in posting account %s-%s %s %s-%s %s-%s\n",
		      t_main_acc1_code.arr,
		      t_main_acc2_code.arr,
		      t_dept_code.arr,
		      t_product_group_code.arr,
		      t_product_line_code.arr,
		      t_subledger_group_code.arr,
		      t_subledger_line_code.arr);
	 disp_message(ERR_MESG,aMesg);
	     if(g_err_typ == 0)
		   err_mesg(g_err_msg,0,"");
	     else 
		err_mesg("",1,g_err_id);
       }
}

fetch_msg(l_message_id)
char *l_message_id;
{
    strcpy(d_message_id.arr, l_message_id);
    d_message_id.len = strlen(d_message_id.arr);

    d_message_text.arr[0] = '\0';
    d_message_text.len    = 0; 

    EXEC SQL SELECT SUBSTR(MESSAGE_TEXT,1,80)    
	     INTO   :d_message_text
	     FROM   MESSAGE
	     WHERE  MESSAGE_ID = :d_message_id;

    if(OERROR)
	err_mesg("SELECT failed on table MESSAGE",0,"");

    if(NO_DATA_FOUND)
	strcpy(d_message_text.arr,"ERROR in posting Account");
    else
	d_message_text.arr[d_message_text.len]  = '\0';
}

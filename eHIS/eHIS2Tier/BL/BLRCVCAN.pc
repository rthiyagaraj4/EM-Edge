/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRCVCAN.PC                                  */
/* AUTHOR                : Deepali Gosavi                               */  
/* DATE WRITTEN          : 04/10/2005                                   */      
/************************************************************************/
        
		  
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define OERROR          (sqlca.sqlcode < 0)
#define MAX_LINES 44
#define REP_WIDTH 165
#define VER  "VER : 4.10\n"
#define ESC  0x1B
/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;


VARCHAR     hosp_name                       [120],
			date							[21],
            date_time                       [21],
			d_acc_entity_name				[61],
			d_user							[31],
			d_head_name						[31],
			d_sysdate						[21],
			d_curr_date						[21],
			nd_facility_id					[3],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
            nd_facility				        [3],
			nd_module_id					[3],    
			nd_cov_date_from				[15], 
			nd_cov_date_to					[15], 
			nd_blng_grp_from				[5],
			nd_blng_grp_to					[5], 
			nd_cust_from					[9],    
			nd_cust_to						[9], 
			nd_patient_from					[21], 
			nd_patient_to					[21],
			nd_doc_type_from				[7],
			nd_doc_num_from					[9],
			nd_doc_type_to					[7],  
			nd_doc_num_to					[9],
			nd_episode_from					[9], 
			nd_episode_to					[9],
			nd_visit_from					[5],   
			nd_visit_to						[5],
			nd_episode_type					[2],
			nd_sort_order					[2],
			d_episode_type					[20],
			d_sort_order					[50],
			d_patient_id					[21],
			d_patient_name					[61],
			nd_patient_id                   [21],
			d_doc_type_code					[6],
			l_translated_value				[201],	
			l_pk_value						[100],
			d_receipt_no					[17],
			d_rcpt_date						[21],
			d_bill_no						[17],
			d_refund_no						[17],
			d_bill_date						[21],
			d_blng_grp						[5],
			d_cust							[9],
			d_episode						[20],
			d_doc_ref_num					[40],		//24/11/2005
			d_module_id						[50],
			d_cancelled_by					[31],
			d_cancelled_date				[21],
			d_detail_canc					[2],		//27/11/2005
			d_header_canc					[2],
			d_head_doc_ref					[31],
			p_language_id					[3],
			nd_temp_date					[21],
			nd_loc_date						[21],
			nd_cov_date_from1				[7],
			nd_cov_date_to1					[7],
			nd_blng_grp_from1				[7],
			nd_blng_grp_to1					[7],
			nd_cust_from1					[7],
			nd_cust_to1						[7],
			nd_patient_from1				[7],
			nd_patient_to1					[7],
			nd_doc_type_from1				[7],
			nd_doc_num_from1				[7],
			nd_doc_type_to1					[7],
			nd_doc_num_to1					[7],
			nd_episode_from1				[7],
			nd_episode_to1					[7],
			nd_visit_from1					[7],
			nd_visit_to1					[7];


	int i,sl_no=1,page_no=0;
	
	double d_episode_id,d_visit_id,d_doc_num ;

    double  d_patient_dep_amt=0,d_bill_amt=0, d_bill_outst_amt=0, d_tot_bill_outst_amt=0,
			d_patient_dep_amt_tot=0, d_bill_amt_tot=0,
			d_refund_amt=0, d_amt_adjusted=0, d_refund_amt_tot=0, d_amt_adjusted_tot=0;

	char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char string_var [100];

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0, recctr = 1, ftime = 0, bgftime = 0;


FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }

	strcpy(g_pgm_id,"BLRCVCAN");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);
	 
    EXEC sql connect :nd_pwd;
  	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

		set_meduser_role(); 

    	strcpy(p_language_id.arr,l_language_id.arr);
		p_language_id.len = l_language_id.len;
		
		strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);



	nd_module_id.arr[0]		= '\0';	
	nd_cov_date_from.arr[0]	= '\0';	
	nd_cov_date_to.arr[0]	= '\0';	 
	nd_blng_grp_from.arr[0]	= '\0';	
	nd_blng_grp_to.arr[0]	= '\0';	 
	nd_cust_from.arr[0]		= '\0';	
	nd_cust_to.arr[0]		= '\0';	 
	nd_patient_from.arr[0]	= '\0';	
	nd_patient_to.arr[0]	= '\0';	
	nd_doc_type_from.arr[0]	= '\0';	
	nd_doc_num_from.arr[0]	= '\0';	
	nd_doc_type_to.arr[0]	= '\0';	
	nd_doc_num_to.arr[0]	= '\0';	
	nd_episode_from.arr[0]	= '\0';	
	nd_episode_to.arr[0]	= '\0';	
	nd_visit_from.arr[0]	= '\0';	
	nd_visit_to.arr[0]		= '\0';	
	nd_episode_type.arr[0]	= '\0';	
	nd_sort_order.arr[0]	= '\0';	

    EXEC SQL SELECT	PARAM1, PARAM2, PARAM3, 
					PARAM4, PARAM5, 
					PARAM6, PARAM7, 
					PARAM8, PARAM9, 
					PARAM10,PARAM11, 
					PARAM12,PARAM13, 
					PARAM14,PARAM15,
					PARAM16,PARAM17, 
					PARAM18,PARAM19
			 INTO :nd_module_id,    :nd_cov_date_from, :nd_cov_date_to, 
				  :nd_blng_grp_from,:nd_blng_grp_to, 
				  :nd_cust_from,    :nd_cust_to, 
				  :nd_patient_from, :nd_patient_to,
				  :nd_doc_type_from,:nd_doc_num_from,
				  :nd_doc_type_to,  :nd_doc_num_to,
				  :nd_episode_from, :nd_episode_to,
				  :nd_visit_from,   :nd_visit_to,
				  :nd_episode_type, :nd_sort_order
			 FROM SY_PROG_PARAM
			 WHERE PGM_ID     = :d_curr_pgm_name
			 AND   SESSION_ID = :nd_session_id
			 AND   PGM_DATE   = :nd_pgm_date;

	/*sprintf(string_var , "nd fromdays %4d" , nd_from_days);
	disp_message(ERR_MESG, string_var);

	sprintf(string_var , "nd to days %4d" , nd_to_days);
	disp_message(ERR_MESG, string_var);*/


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");


	nd_module_id.arr[nd_module_id.len]			= '\0';	
	nd_cov_date_from.arr[nd_cov_date_from.len]	= '\0';	
	nd_cov_date_to.arr[nd_cov_date_to.len]		= '\0';	 
	nd_blng_grp_from.arr[nd_blng_grp_from.len]	= '\0';	
	nd_blng_grp_to.arr[nd_blng_grp_to.len]		= '\0';	 
	nd_cust_from.arr[nd_cust_from.len]			= '\0';	
	nd_cust_to.arr[nd_cust_to.len]				= '\0';	 
	nd_patient_from.arr[nd_patient_from.len]	= '\0';	
	nd_patient_to.arr[nd_patient_to.len]		= '\0';	
	nd_doc_type_from.arr[nd_doc_type_from.len]	= '\0';	
	nd_doc_num_from.arr[nd_doc_num_from.len]	= '\0';	
	nd_doc_type_to.arr[nd_doc_type_to.len]		= '\0';	
	nd_doc_num_to.arr[nd_doc_num_to.len]		= '\0';	
	nd_episode_from.arr[nd_episode_from.len]	= '\0';	
	nd_episode_to.arr[nd_episode_to.len]		= '\0';	
	nd_visit_from.arr[nd_visit_from.len]		= '\0';	
	nd_visit_to.arr[nd_visit_to.len]			= '\0';	
	nd_episode_type.arr[nd_episode_type.len]	= '\0';	
	nd_sort_order.arr[nd_sort_order.len]		= '\0';	

         
   EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
    open_files();

    declare_cur();

	get_header_dtls();
	//get_language_id();

	fetch_legend_value();

	fprintf(fp,"%c&l1O",ESC);				/* Set Landscape*/ 
 	fprintf(fp, "%c(s17H", ESC);			/* Reduce the font size*/
	fprintf(fp,"%c&a4L",ESC); 				/* To Set the Left margin  		*/
	fprintf(fp,"\n");
    print_param();
    open_det_cur();

    while(fetch_det_cur())
    {										
		print_rec();  								
    }	

    print_tot();
    print_end();

	fprintf(fp,"%cE",ESC); /* To Reset the Printer */
 }


open_files()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLRCVCAN.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLRCVCAN.lis");
       proc_exit();
    }

}

declare_cur()
{
	
	EXEC SQL DECLARE DET_CUR CURSOR FOR
		SELECT A.BLNG_GRP_ID, A.CUST_CODE, A.PATIENT_ID, 
			   DECODE(A.EPISODE_TYPE, 'I', A.EPISODE_TYPE||'/'||to_char(A.EPISODE_ID),
									  'D', A.EPISODE_TYPE||'/'||to_char(A.EPISODE_ID),
								   	  'E', A.EPISODE_TYPE||'/'||to_char(A.EPISODE_ID)||'/'||to_char(A.VISIT_ID),		
									  'O', A.EPISODE_TYPE||'/'||to_char(A.EPISODE_ID)||'/'||to_char(A.VISIT_ID),		
									  'R', A.EPISODE_TYPE)	EPISODE,	
			   A.DOC_TYPE_CODE||'-'||to_char(A.DOC_NUMBER), to_char(A.DOC_DATE, 'DD/MM/YYYY'),
			   A.BILL_AMT, A.DOC_OUTST_AMT, A.DOC_REF_NUM||'/'||to_char(A.DOC_REF_SLNO),
			   nvl(A.CANCELLED_YN, 'N') detail_canc, NVL(B.CANCELLED_YN, 'N') header_canc,
			   A.DOC_REF_NUM
		FROM   BL_COVERING_LET_DETAIL A, BL_COVERING_LET_HEADER B
		WHERE  A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
		AND    A.DOC_REF_NUM = B.DOC_REF_NUM
		AND    A.OPERATING_FACILITY_ID = :nd_facility
		AND    A.MODULE_ID   = DECODE(:nd_module_id, 'BL', 'BL', 'AR', 'AR', '**', MODULE_ID)	
		AND    to_char(A.DOC_REF_DATE,'DD/MM/YYYY') BETWEEN NVL(to_char(TO_DATE(:nd_cov_date_from,'DD/MM/YYYY'), 'DD/MM/YYYY'), '01/01/1000') 
												    AND     NVL(to_char(TO_DATE(:nd_cov_date_to,'DD/MM/YYYY'), 'DD/MM/YYYY') , '31/12/5000')
		AND    A.BLNG_GRP_ID BETWEEN NVL(:nd_blng_grp_from,'!!')
						   AND     NVL(:nd_blng_grp_to, '~~') 
		AND    nvl(A.CUST_CODE, '!!!!!!!!') BETWEEN NVL(:nd_cust_from, '!!!!!!!!')    
										  AND     NVL(:nd_cust_to, '~~~~~~~~')
		AND    A.EPISODE_TYPE = DECODE(:nd_episode_type, 'I', 'I',
													   'D', 'D',
													   'O', 'O',
													   'E', 'E',
													   'R', 'R',
													   'A', EPISODE_TYPE)	
		AND    A.PATIENT_ID BETWEEN NVL(:nd_patient_from, '!!!!!!!!!!!!!!!!!!!!')
						    AND     NVL(:nd_patient_to, '~~~~~~~~~~~~~~~~~~~~')
		AND    ((A.EPISODE_TYPE = 'R') or
				(A.EPISODE_TYPE IN ('I', 'D', 'O', 'E') AND 
				to_char(A.EPISODE_ID) BETWEEN NVL(:nd_episode_from, '!!!!!!!!')
								      AND     NVL(:nd_episode_to, '~~~~~~~~')
				)
			   )	
		AND    ( A.EPISODE_TYPE IN ('R', 'I', 'D') or
                (A.EPISODE_TYPE IN ('O', 'E') AND
				 to_char(A.VISIT_ID) BETWEEN NVL(:nd_visit_from, '!!!!')
						             AND     NVL(:nd_visit_to, '~~~~')
			    ) 	
			   )
		AND   RPAD(A.DOC_TYPE_CODE,6,' ')|| LPAD(A.DOC_NUMBER,8,'0') BETWEEN
              RPAD(NVL(:nd_doc_type_from,' '),6,' ')||LPAD(NVL(:nd_doc_num_from,0),8,'0') AND
              RPAD(NVL(:nd_doc_type_to,'~~~~~~'),6,' ')||LPAD(NVL(:nd_doc_num_to,99999999),8,'0')   
		AND   (NVL(A.CANCELLED_YN, 'N') = 'Y' OR
			   NVL(B.CANCELLED_YN, 'N') = 'Y' 
			  )
		ORDER BY DECODE(:nd_sort_order, 'B', A.BLNG_GRP_ID,
										'C', A.CUST_CODE,
										'P', A.PATIENT_ID,
										'E', A.EPISODE_ID);				     
}


open_det_cur()
{
   EXEC SQL OPEN DET_CUR;
	if (OERROR)
        err_mesg("OPEN failed on cursor DET_CUR",0,"");
}

close_det_cur()
{
	EXEC SQL CLOSE DET_CUR;   
}

fetch_det_cur()
{ 

		d_blng_grp.arr[0]		= '\0';	  
		d_cust.arr[0]			= '\0';	  
		d_patient_id.arr[0]		= '\0';	  
		d_episode.arr[0]		= '\0';	  
		d_bill_no.arr[0]		= '\0';	  
		d_bill_date.arr[0]		= '\0';	  
		d_doc_ref_num.arr[0]	= '\0';	 
		d_detail_canc.arr[0]    = '\0';
		d_header_canc.arr[0]    = '\0';
		d_head_doc_ref.arr[0]   = '\0';

		d_blng_grp.len			= 0;
		d_cust.len				= 0;
		d_patient_id.len		= 0;
		d_episode.len			= 0;
		d_bill_no.len			= 0;
		d_bill_date.len  		= 0;
		d_doc_ref_num.len		= 0;
		d_detail_canc.len		= 0;
		d_header_canc.len		= 0;
		d_head_doc_ref.len      = 0;

		d_bill_amt				= 0;
		d_bill_outst_amt		= 0;
		

	EXEC SQL FETCH  DET_CUR INTO 
		:d_blng_grp,
		:d_cust,
		:d_patient_id,
		:d_episode,
		:d_bill_no,
		:d_bill_date,		
		:d_bill_amt,
		:d_bill_outst_amt,
		:d_doc_ref_num,
		:d_detail_canc,
		:d_header_canc,
		:d_head_doc_ref;

	if (OERROR)
		err_mesg("FETCH failed on cursor DET_CUR ",0,"");	
    

    d_blng_grp.arr[d_blng_grp.len]					= '\0';
	d_cust.arr[d_cust.len]							= '\0';
	d_patient_id.arr[d_patient_id.len]				= '\0';
	d_episode.arr[d_episode.len]					= '\0';
    d_bill_no.arr[d_bill_no.len]					= '\0';
	d_bill_date.arr[d_bill_date.len]				= '\0';
	d_doc_ref_num.arr[d_doc_ref_num.len]			= '\0';
	d_detail_canc.arr[d_detail_canc.len]			= '\0';
	d_header_canc.arr[d_header_canc.len]			= '\0';
	d_head_doc_ref.arr[d_head_doc_ref.len]			= '\0';
	

	return(LAST_ROW?0:1);   
}

declare_can_cur()
{
	
	EXEC SQL DECLARE CAN_CUR CURSOR FOR
		SELECT ADDED_BY_ID, to_char(ADDED_DATE, 'DD/MM/YYYY HH24:MI')
		FROM   BL_COVERING_LET_DETAIL_LOG
		WHERE  OPERATING_FACILITY_ID = :nd_facility
		AND    DOC_REF_NUM||'/'||to_char(DOC_REF_SLNO) = :d_doc_ref_num
		AND    NVL(AUDIT_IND, 'X') = 'C'
		ORDER BY ADDED_DATE;				     
}

open_can_cur()
{
   EXEC SQL OPEN CAN_CUR;
	if (OERROR)
        err_mesg("OPEN failed on cursor CAN_CUR",0,"");
}

close_can_cur()
{
	EXEC SQL CLOSE CAN_CUR;   
}

fetch_can_cur()
{ 

		d_cancelled_by.arr[0]		= '\0';	  
		d_cancelled_date.arr[0]		= '\0';	  

		d_cancelled_by.len			= 0;
		d_cancelled_date.len		= 0;
		

	EXEC SQL FETCH  CAN_CUR INTO 
		:d_cancelled_by,
		:d_cancelled_date;

	if (OERROR)
		err_mesg("FETCH failed on cursor CAN_CUR ",0,"");	
    

    d_cancelled_by.arr[d_cancelled_by.len]			= '\0';
	d_cancelled_date.arr[d_cancelled_date.len]		= '\0';

	return(LAST_ROW?0:1);   
}

//Header cancelled
declare_can_cur_head()
{
	
	EXEC SQL DECLARE CAN_CUR_HEAD CURSOR FOR
		SELECT ADDED_BY_ID, to_char(ADDED_DATE, 'DD/MM/YYYY HH24:MI')
		FROM   BL_COVERING_LET_HEADER_LOG
		WHERE  OPERATING_FACILITY_ID = :nd_facility
		AND    DOC_REF_NUM = :d_head_doc_ref
		AND    NVL(AUDIT_IND, 'X') = 'C'
		ORDER BY ADDED_DATE;				     
}

open_can_cur_head()
{
   EXEC SQL OPEN CAN_CUR_HEAD;
	if (OERROR)
        err_mesg("OPEN failed on cursor CAN_CUR_HEAD",0,"");
}

close_can_cur_head()
{
	EXEC SQL CLOSE CAN_CUR_HEAD;   
}

fetch_can_cur_head()
{ 

		d_cancelled_by.arr[0]		= '\0';	  
		d_cancelled_date.arr[0]		= '\0';	  

		d_cancelled_by.len			= 0;
		d_cancelled_date.len		= 0;
		

	EXEC SQL FETCH  CAN_CUR_HEAD INTO 
		:d_cancelled_by,
		:d_cancelled_date;

	if (OERROR)
		err_mesg("FETCH failed on cursor CAN_CUR_HEAD ",0,"");	
    

    d_cancelled_by.arr[d_cancelled_by.len]			= '\0';
	d_cancelled_date.arr[d_cancelled_date.len]		= '\0';

	return(LAST_ROW?0:1);   
}



print_rec()
{


    int first_ref=1;
		 
		if (d_bill_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,d_bill_date.arr);

		get_local_date_convn1();

		strcpy(d_bill_date.arr,nd_loc_date.arr);

		d_bill_date.arr[d_bill_date.len] = '\0';
  
    }
		  	if (d_cancelled_date.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,d_cancelled_date.arr);

		get_local_date_convn2();

		strcpy(d_cancelled_date.arr,nd_loc_date.arr);

		d_cancelled_date.arr[d_cancelled_date.len] = '\0';
  
    }


    if (lctr > 40)
	   next_page();

    fprintf(fp,"%6d  ",recctr);
	fprintf(fp,"%-8s %-8s  ",d_blng_grp.arr,d_cust.arr);
	fprintf(fp,"%-19s  %-15s%-3s%-18s %-14s%-5s",d_patient_id.arr,d_episode.arr," ",d_bill_no.arr,d_bill_date.arr," ");
	
    //fprintf(fp,"%-20s %-18s %-17s %-15s ",d_patient_id.arr,d_episode.arr,d_bill_no.arr, d_bill_date.arr);
	
	fprintf(fp,"  ");
	print_formated(d_bill_amt);
	fprintf(fp," ");
	print_formated(d_bill_outst_amt);
	fprintf(fp,"%-30s ",d_doc_ref_num.arr);
    fprintf(fp,"\n");
	
	lctr++;
	recctr++;

	d_tot_bill_outst_amt    += d_bill_outst_amt;
	d_bill_amt_tot          += d_bill_amt;

    declare_can_cur();

    if (strcmp(d_detail_canc.arr, "Y")==0)
	{
	open_can_cur();
	while(fetch_can_cur())
	{
		fprintf(fp,"%-27s%-19s%-20s%-20s\n"," ",d_cancelled_by.arr," ",d_cancelled_date.arr);
		lctr++;	
	}

	close_can_cur();
	}

    if (strcmp(d_header_canc.arr, "Y")==0)
	{
	open_can_cur_head();
	while(fetch_can_cur_head())
	{
		fprintf(fp,"%-27s%-19s%-20s%-20s\n"," ",d_cancelled_by.arr," ",d_cancelled_date.arr);
		lctr++;	
	}

	close_can_cur_head();
	}


}

print_tot()
{
   fprintf(fp,"%91s                --------------   --------------\n"," ");
   fprintf(fp,"%94s            ",loc_legend[17]);
   print_formated(d_bill_amt_tot);    
   fprintf(fp, " ");
   print_formated(d_tot_bill_outst_amt);    
   next_line(1);
   fprintf(fp,"%91s                --------------   --------------\n"," ");
   next_line(1);
}

get_header_dtls()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    d_acc_entity_name.arr[0] ='\0';
    d_curr_date.arr[0]   ='\0';
	d_user.arr[0] ='\0';
    d_sysdate.arr[0] ='\0';
	d_head_name.arr[0] ='\0';
    d_acc_entity_name.len =0;
    d_curr_date.len   =0;
	d_user.len =0;
    d_sysdate.len =0;
	d_head_name.len=0;

	EXEC SQL SELECT upper(ACC_ENTITY_NAME), /* description of the institution */
				    USER, 
					TO_CHAR(SYSDATE, 'DD/MM/YYYY'),
					TO_CHAR(SYSDATE, 'HH24:MI:SS'),
					HEAD_OF_COMPANY_NAME
             INTO  :d_acc_entity_name,
				   :d_user, 
				   :d_sysdate,
				   :d_curr_date,
				   :d_head_name
			 FROM SY_ACC_ENTITY_LANG_VW
			 WHERE acc_entity_id = :nd_facility
			 AND   LANGUAGE_ID   = :p_language_id;
    
	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
	d_curr_date.arr[d_curr_date.len]			 = '\0';
	d_head_name.arr[d_head_name.len]			 = '\0';

   
	return;
	err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	proc_exit();
}


print_page_title()
{

	int hosp_nm_len,date1_len, rep_title_len = 10,v_title_len,v_title1_len, s1, s2,date_len,user_len,pgm_len,sub_title_len;
	char v_rep_title[200],v_as_on_date[12],v_sub_title[200],v_title[200],v_title1[200];
   
    //Line 1
		
	fprintf(fp,"%-13.13s : BL",loc_legend[20]);//loc_legend[21]
	hosp_nm_len  =  d_acc_entity_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-11);
	fprintf(fp,"%s   ", d_acc_entity_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);
	//date1_len=strlen(loc_legend[3]);
	horz_skip(s2-31);
	fprintf(fp,"%-8.8s :   %s", loc_legend[3],d_sysdate.arr);
	next_line(1);
	
    //Line 2

	fprintf(fp,"%-13.13s : %s",loc_legend[21],d_user.arr);//loc_legend[22]
    user_len=strlen(d_user.arr);
	strcpy(v_rep_title,loc_legend[1]);
	rep_title_len = strlen(v_rep_title);
	s1 = (REP_WIDTH-rep_title_len)/2;
	//strcpy(v_as_on_date,nd_as_on_date.arr);
	//date_len= strlen(v_as_on_date);
	horz_skip(s1-user_len-6);
	fprintf(fp,"%s    ",v_rep_title);
   	s2 = (REP_WIDTH-s1-rep_title_len);
	horz_skip(s2-36);
	fprintf(fp," %-8.8s :   %-10.10s",loc_legend[2],d_curr_date.arr);
	next_line(1);

	//Line 3

	  fprintf(fp,"%-13.13s : %s",loc_legend[53],d_curr_pgm_name.arr);//loc_legend[20]
	  pgm_len=strlen(d_curr_pgm_name.arr);
	//sprintf(v_sub_title, "PERIOD FROM  : %2d - %2d year",nd_from_year,nd_to_year); 
	//strcpy(v_sub_title,d_head_name.arr);
	//sub_title_len = strlen(v_sub_title);
	//s1 = (REP_WIDTH-sub_title_len)/2;
   	//horz_skip(s1-pgm_len-6);
    //fprintf(fp,"%s",v_sub_title);

      s2 = (REP_WIDTH-5);
	  horz_skip(s2-43);
	  fprintf(fp,"%-11.11s :  %9d",loc_legend[4],++page_no);
      next_line(1);
	//fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/
    //fprintf(fp,"%c(s-3B",ESC); /* release bold style */
   
	  lctr = 6;
	  print_line('-',REP_WIDTH); 
	  fprintf(fp,"--");
	  next_line(1);

	
}

print_column_title()
 {

  //no.ID, name
  
  fprintf(fp,"%7.7s %-8.8s %-8.8s  %-20.20s %-17.17s %-18.18s %-17.17s %-5.5s%12.12s  %15.15s  %-20.20s",loc_legend[5],loc_legend[6],loc_legend[8],loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[13]," ",loc_legend[14],loc_legend[15],loc_legend[16]);
  //fprintf(fp, "%4s %4s %4s %15s %17s%20s    %15s       %15s  %15s  %15s",loc_legend[5],loc_legend[6],loc_legend[8],loc_legend[10],loc_legend[11], loc_legend[12],loc_legend[13],loc_legend[14], loc_legend[15], loc_legend[16]);
  next_line(1);

  fprintf(fp,"%-8.8s%-8.8s %-8.8s  %-16.16s%-23.23s%-18.18s"," ",loc_legend[7],loc_legend[9],loc_legend[18]," ",loc_legend[19]);
  //fprintf(fp, "     %-4s %-9s %-39s %-20s",loc_legend[7], loc_legend[9], loc_legend[18],loc_legend[19]);
  next_line(1);

  print_line('-',REP_WIDTH);
  fprintf(fp,"--");
  next_line(1);

 }


print_param()
{  	

if (nd_cov_date_from.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,nd_cov_date_from.arr);

		get_local_date_convn1();

		strcpy(nd_cov_date_from.arr,nd_loc_date.arr);

		nd_cov_date_from.arr[nd_cov_date_from.len] = '\0';
  
    }

  	if (nd_cov_date_to.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,nd_cov_date_to.arr);

		get_local_date_convn1();

		strcpy(nd_cov_date_to.arr,nd_loc_date.arr);

		nd_cov_date_to.arr[nd_cov_date_to.len] = '\0';
  
    }

  	if (d_sysdate.arr[0] != 0)
	{ 
		get_initialize();

		strcpy(nd_temp_date.arr,d_sysdate.arr);

		get_local_date_convn1();

		strcpy(d_sysdate.arr,nd_loc_date.arr);

		d_sysdate.arr[d_sysdate.len] = '\0';
  
    }



  print_page_title();

  fprintf(fp,"VER 4.1\n");
 
  fprintf(fp,"\n\n\n\n");
  fprintf(fp,"        ");
  fprintf(fp,"%s :\n",loc_legend[26]);
  fprintf(fp,"        ");
  fprintf(fp,"------------------\n\n");

  d_episode_type.arr[0]		= '\0';	  
  d_episode_type.len		= 0;

  if (strcmp(nd_episode_type.arr,"I")==0)
	 strcpy(d_episode_type.arr, "Inpatient");
  else if (strcmp(nd_episode_type.arr,"D")==0)
	 strcpy(d_episode_type.arr, "DayCare");	
  else if (strcmp(nd_episode_type.arr,"O")==0)
	 strcpy(d_episode_type.arr, "Outpatient");	
  else if (strcmp(nd_episode_type.arr,"E")==0)
	 strcpy(d_episode_type.arr, "Emergency");	
  else if (strcmp(nd_episode_type.arr,"R")==0)
	 strcpy(d_episode_type.arr, "External");	
  else if (strcmp(nd_episode_type.arr,"A")==0)
	 strcpy(d_episode_type.arr, "All");	

  d_episode_type.len = strlen(d_episode_type.arr);


  d_sort_order.arr[0]		= '\0';	  
  d_sort_order.len			= 0;

  if (strcmp(nd_sort_order.arr,"B")==0)
	 strcpy(d_sort_order.arr, "Billing Group");
  else if (strcmp(nd_sort_order.arr,"C")==0)
	 strcpy(d_sort_order.arr, "Customer");	
  else if (strcmp(nd_sort_order.arr,"P")==0)
	 strcpy(d_sort_order.arr, "Patient ID");	
  else if (strcmp(nd_sort_order.arr,"E")==0)
	 strcpy(d_sort_order.arr, "Episode ID");	

  d_sort_order.len = strlen(d_sort_order.arr);

  d_module_id.arr[0]		= '\0';	  
  d_module_id.len			= 0;

  if (strcmp(nd_module_id.arr,"BL")==0)
	 strcpy(d_module_id.arr, "Patient Billing");
  else if (strcmp(nd_module_id.arr,"AR")==0)
	 strcpy(d_module_id.arr, "Accounts Receivable");	
  else if (strcmp(nd_module_id.arr,"**")==0)
	 strcpy(d_module_id.arr, "Patient Billing & Accounts Receivable");	

  d_module_id.len = strlen(d_module_id.arr);

  fprintf(fp,"%-12.12s%-33.33s : %s\n"," ",loc_legend[37],d_module_id.arr);  //loc_legend[27]
 

  if(nd_cov_date_from.arr[0] != 0)
  strcpy(nd_cov_date_from1.arr,nd_cov_date_from.arr);
  else
  strcpy(nd_cov_date_from1.arr,loc_legend[55]);

  if(nd_cov_date_to.arr[0]!=0)
  strcpy(nd_cov_date_to1.arr,nd_cov_date_to.arr);
  else
  strcpy(nd_cov_date_to1.arr,loc_legend[54]);//loc_legend[23]

  if(nd_blng_grp_from.arr[0]!=0)
  strcpy(nd_blng_grp_from1.arr,nd_blng_grp_from.arr);
  else
  strcpy(nd_blng_grp_from1.arr,loc_legend[55]);

  if(nd_blng_grp_to.arr[0]!=0)
  strcpy(nd_blng_grp_to1.arr,nd_blng_grp_to.arr);
  else
  strcpy(nd_blng_grp_to1.arr,loc_legend[54]);

  if(nd_cust_from.arr[0]!=0)
  strcpy(nd_cust_from1.arr,nd_cust_from.arr);
  else
  strcpy(nd_cust_from1.arr,loc_legend[55]);

  if(nd_cust_to.arr[0]!=0)
  strcpy(nd_cust_to1.arr,nd_cust_to.arr);
  else
  strcpy(nd_cust_to1.arr,loc_legend[54]);

  if(nd_patient_from.arr[0]!=0)
  strcpy(nd_patient_from1.arr,nd_patient_from.arr);
  else
  strcpy(nd_patient_from1.arr,loc_legend[55]);

  if(nd_patient_to.arr[0]!=0)
  strcpy(nd_patient_to1.arr,nd_patient_to.arr);
  else
  strcpy(nd_patient_to1.arr,loc_legend[54]);

  if(nd_doc_type_from.arr[0]!=0)
  strcpy(nd_doc_type_from1.arr,nd_doc_type_from.arr);
  else
  strcpy(nd_doc_type_from1.arr,loc_legend[55]);

  if(nd_doc_type_to.arr[0]!=0)
  strcpy(nd_doc_type_to1.arr,nd_doc_type_to.arr);
  else
  strcpy(nd_doc_type_to1.arr,loc_legend[54]);

  if(nd_doc_num_from.arr[0]!=0)
  strcpy(nd_doc_num_from1.arr,nd_doc_num_from.arr);
  else
  strcpy(nd_doc_num_from1.arr,loc_legend[55]);

  if(nd_doc_num_to.arr[0]!=0)
  strcpy(nd_doc_num_to1.arr,nd_doc_num_to.arr);
  else
  strcpy(nd_doc_num_to1.arr,loc_legend[54]);

  if(nd_episode_from.arr[0]!=0)
  strcpy(nd_episode_from1.arr,nd_episode_from.arr);
  else
  strcpy(nd_episode_from1.arr,loc_legend[55]);

  if(nd_episode_to.arr[0]!=0)
  strcpy(nd_episode_to1.arr,nd_episode_to.arr);
  else
  strcpy(nd_episode_to1.arr,loc_legend[54]);

  if(nd_visit_from.arr[0]!=0)
  strcpy(nd_visit_from1.arr,nd_visit_from.arr);
  else
  strcpy(nd_visit_from1.arr,loc_legend[55]);

  if(nd_visit_to.arr[0]!=0)
  strcpy(nd_visit_to1.arr,nd_visit_to.arr);
  else
  strcpy(nd_visit_to1.arr,loc_legend[54]);

  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[38],loc_legend[40],nd_cov_date_from1.arr); //loc_legend[28]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_cov_date_to1.arr);
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[33],loc_legend[40],nd_blng_grp_from1.arr); //loc_legend[29]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_blng_grp_to1.arr);
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[42],loc_legend[40],nd_cust_from1.arr); //loc_legend[30]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_cust_to1.arr);
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[43],loc_legend[40],nd_patient_from1.arr); //loc_legend[31]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_patient_to1.arr);
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[44],loc_legend[40],nd_doc_type_from1.arr); //loc_legend[32]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_doc_type_to1.arr);
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[45],loc_legend[40],nd_doc_num_from1.arr); //loc_legend[33]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_doc_num_to1.arr);
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[46],loc_legend[40],nd_episode_from1.arr); //loc_legend[34]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_episode_to1.arr);    
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," ",loc_legend[47],loc_legend[40],nd_visit_from1.arr); //loc_legend[35]
  fprintf(fp,"%-12.12s%-24.24s %-8.8s : %s\n"," "," ",loc_legend[41],nd_visit_to1.arr); 
  fprintf(fp,"%-12.12s%-33.33s : %s\n"," ",loc_legend[48],d_episode_type.arr); //loc_legend[36]
  fprintf(fp,"%-12.12s%-33.33s : %s\n"," ",loc_legend[49],d_sort_order.arr); 
       
  next_page();
}


check_line(skip) /* will check for MAX LINE before printing totals */
int skip;
{
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
}

next_line(skip) /* will check for MAX LINE before printing totals */		
int skip;
{
	if ((lctr + skip) > MAX_LINES)
	{
		next_page(); 
	}
	else
	{
		fprintf(fp,"\n"); ++lctr; 
	}
}

next_page() /* will move the cursor to next page */
{
  
	fprintf(fp,"\n");
	fprintf(fp,"\f");
	lctr=0;
	fprintf(fp,"\n"); 
	 
	print_page_title();
	print_column_title();  	
}

print_line(ch,n) /* this is to obtain required characters */
  char ch;
  int n;
{
	int i;
	for(i=0;i<n;i++)
	fprintf(fp,"%c",ch);  
}

horz_skip(num) /* this is to obtain required blank space */
int num;
{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
}

print_end()
{
  fprintf(fp,"\n \n");
  fprintf(fp,"%80.80s",loc_legend[23]);//loc_legend[25]
  //next_line(1);
  fflush(fp);
  fclose(fp);
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s  ",str_amt);
    }
}  



fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRCVCAN.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

/*get_language_id()
{
	language_id.arr[0] = '\0';
	language_id.len = 0;
	

	EXEC SQL SELECT LANGUAGE_ID INTO :language_id FROM SM_APPL_USER where APPL_USER_ID = :d_user;

	if (OERROR)
        err_mesg("SELECTING LANGUAGE_ID failed",0,"");
}*/


get_local_date_convn1()
{

nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date1();

}

get_local_date1()
{

	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'DD/MM/YYYY'),
													    :p_language_id,
														t_date);

		:nd_loc_date := to_char(t_date,'DD/MM/YYYY');


	END;

	END-EXEC;

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

get_local_date_convn2()
{

nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date2();

}

get_local_date2()
{

	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),
													    :p_language_id,
														t_date);

		:nd_loc_date := to_char(t_date,'DD/MM/YYYY HH24:MI');


	END;

	END-EXEC;

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

get_initialize()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
}


/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR00066.PC                                  */
/* AUTHOR                : Deepali Gosavi                               */  
/* DATE WRITTEN          : 19/06/2005                                   */      
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define OERROR          (sqlca.sqlcode < 0)
#define MAX_LINES 44
#define REP_WIDTH 218				//132
//#define VER  "VER : 4.10\n"
#define ESC  0x1B
/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;


VARCHAR     hosp_name                       [120],
			date							[20],
            date_time                       [20],
			d_acc_entity_name				[61],
			d_user							[31],
			d_head_name						[31],
			d_sysdate						[20],
			d_curr_date						[20],
			nd_facility_id					[3],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
            nd_facility				        [3],
			nd_period_from					[15],
			nd_period_to					[15],
			nd_episode_type					[2],
			d_episode_type					[20],
			d_patient_id					[21],
			d_patient_name					[61],
			nd_patient_id                   [21],
			d_doc_type_code					[6],
			l_translated_value				[201],	
			l_pk_value						[100],
			d_receipt_no					[17],
			d_rcpt_date						[20],
			d_bill_no						[17],
			d_refund_no						[17],
			d_refund_date					[20],
			d_episode_type1					[2],
			d_adm_visit_date				[20],
			p_language_id                   [3];

	int i,sl_no=1,page_no=0;
	
	double d_episode_id,d_visit_id,d_doc_num ;

    double  d_patient_dep_amt=0,d_bill_amt=0,
			d_patient_dep_amt_tot=0, d_bill_amt_tot=0,
			d_refund_amt=0, d_dep_balance=0, d_refund_amt_tot=0, d_dep_balance_tot=0, d_refund_amt_tot_tot=0;

	char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char string_var [100];

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0, recctr = 1, ftime = 0, bgftime = 0;


FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }

	strcpy(g_pgm_id,"BLR00066");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);
	 
    EXEC sql connect :nd_pwd;
  	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

		set_meduser_role(); 

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

		strcpy(p_language_id.arr,l_language_id.arr);
	    p_language_id.len = l_language_id.len;


	nd_period_from.arr[0]	= '\0';	
	nd_period_to.arr[0]		= '\0';	
	nd_episode_type.arr[0]  = '\0';
	nd_facility_id.arr[0]  = '\0';
						
    EXEC SQL SELECT	OPERATING_FACILITY_ID, PARAM1, PARAM2, PARAM3
			 INTO :nd_facility_id, :nd_period_from, :nd_period_to, :nd_episode_type
			 FROM SY_PROG_PARAM
			 WHERE PGM_ID   = :d_curr_pgm_name
			 AND   SESSION_ID = :nd_session_id
			 AND   PGM_DATE   = :nd_pgm_date;

    
	/*sprintf(string_var , "nd fromdays %4d" , nd_from_days);
	disp_message(ERR_MESG, string_var);

	sprintf(string_var , "nd to days %4d" , nd_to_days);
	disp_message(ERR_MESG, string_var);*/


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");


   nd_period_from.arr[nd_period_from.len]	='\0';			
   nd_period_to.arr[nd_period_from.len]		='\0';			
   nd_episode_type.arr[nd_episode_type.len]	='\0';			
   nd_facility_id.arr[nd_facility_id.len]	='\0';			
         
   EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
    open_files();
    declare_cur();
	get_header_dtls();
	fetch_legend_value();

	fprintf(fp,"%c&l1O",ESC); /* Set Landscape*/ 
 	fprintf(fp, "%c(s20H", ESC);/* Reduce the font size*/
	fprintf(fp,"%c&a4L",ESC); 	/* To Set the Left margin  		*/

    print_param();
    open_det_cur();
   
    while(fetch_det_cur())
    {		
		print_rec();  
    }	
    /*if(bgftime != 0)
	  print_bg_catg_tot();*/

    print_tot();
    print_end();

	fprintf(fp,"%cE",ESC); /* To Reset the Printer */
 }


open_files()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00066.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00066.lis");
       proc_exit();
    }

}

declare_cur()
{
	
	EXEC SQL DECLARE DET_CUR CURSOR FOR
		SELECT a.patient_id, c.short_name patient_name,						//a.ext_acct_code, 
			   a.doc_type_code||'-'||to_char(a.doc_number)  rcpt_no,
			   to_char(a.doc_date, 'DD/MM/YYYY') rcpt_date,
			   a.doc_amt Deposit_paid,
			   a.EPISODE_TYPE, a.EPISODE_ID, a.VISIT_ID       
		//B.DOC_OUTST_AMT Deposit_Outstanding
		FROM BL_RECEIPT_REFUND_HDRDTL_VW a, BL_PATIENT_LEDGER B, MP_PATIENT_MAST C
		WHERE a.RECPT_REFUND_IND='R'
		AND   B.ORG_DOC_TYPE_CODE =A.DOC_TYPE_CODE
		AND   B.ORG_DOC_NUM=A.DOC_NUMBER
		and   A.RECPT_NATURE_CODE in ('AD','PR') and B.AD_PR_ADJ_BILL_DOC_TYPE is null
		and   B.DOC_OUTST_AMT < 0
		and   to_char(a.DOC_DATE, 'YYYY/MM/DD') BETWEEN to_char(TO_DATE(:nd_period_from,'DD/MM/YYYY'), 'YYYY/MM/DD') 
												AND     to_char(TO_DATE(:nd_period_to,'DD/MM/YYYY'), 'YYYY/MM/DD') 
		and   a.EPISODE_TYPE = decode(:nd_episode_type, 'A', a.episode_type, :nd_episode_type)
		and   NVL(a.CANCELLED_IND, 'N') != 'Y'
		and   a.PATIENT_ID = c.PATIENT_ID
		order by 1,2;

	EXEC SQL DECLARE REF_CUR CURSOR FOR
	    SELECT DOC_TYPE_CODE||'-'||to_char(DOC_NUMBER) refund_doc, 
			   to_char(DOC_DATE, 'DD/MM/YYYY') refund_date, ABS(DOC_AMT) REFUND_AMT           
		FROM BL_RECEIPT_REFUND_HDRDTL_VW
		WHERE RECPT_REFUND_IND = 'F'
		AND   BILL_DOC_TYPE_CODE||'-'||TO_CHAR(BILL_DOC_NUMBER) = :d_receipt_no
		AND   NVL(CANCELLED_IND, 'N') != 'Y'
		order by 1;
}

open_det_cur()
{
   EXEC SQL OPEN DET_CUR;
		if (OERROR)
        err_mesg("OPEN failed on cursor DET_CUR",0,"");
}

open_ref_cur()
{
   EXEC SQL OPEN REF_CUR;
		if (OERROR)
        err_mesg("OPEN failed on cursor REF_CUR",0,"");
}

close_det_cur()
{
	EXEC SQL CLOSE DET_CUR;   
}

close_ref_cur()
{
	EXEC SQL CLOSE REF_CUR;    
}

fetch_det_cur()
{ 

        d_patient_id.arr[0]		= '\0';	  
		d_patient_name.arr[0]   = '\0';
		d_receipt_no.arr[0]		= '\0';
		d_rcpt_date.arr[0]		= '\0';
		d_episode_type1.arr[0]  = '\0';

		d_patient_id.len		= 0;
		d_patient_name.len		= 0;
		d_receipt_no.len		= 0;
		d_rcpt_date.len  		= 0;
		d_episode_type1.len		= 0;

		d_patient_dep_amt		= 0;
	

	EXEC SQL FETCH  DET_CUR INTO 
		:d_patient_id,
		:d_patient_name,
		:d_receipt_no,	
		:d_rcpt_date,		
		:d_patient_dep_amt,
		:d_episode_type1,
		:d_episode_id,
		:d_visit_id;

	if (OERROR)
		err_mesg("FETCH failed on cursor DET_CUR ",0,"");	
    

	d_patient_id.arr[d_patient_id.len]				= '\0';
	d_patient_name.arr[d_patient_name.len]			= '\0';
	d_receipt_no.arr[d_receipt_no.len]				= '\0';
	d_rcpt_date.arr[d_rcpt_date.len]				= '\0';
	d_episode_type1.arr[d_episode_type1.len]		= '\0';

	
	return(LAST_ROW?0:1);   
}

fetch_ref_cur()
{ 

		d_refund_no.arr[0]		= '\0';
		d_refund_date.arr[0]	= '\0';

		d_refund_no.len			= 0;
		d_refund_date.len  		= 0;

		d_refund_amt			= 0;		

	EXEC SQL FETCH  REF_CUR INTO 
		:d_refund_no,	
		:d_refund_date,		
		:d_refund_amt;

	if (OERROR)
		err_mesg("FETCH failed on cursor REF_CUR ",0,"");	
    
	d_refund_no.arr[d_refund_no.len]		= '\0';
	d_refund_date.arr[d_refund_date.len]	= '\0';

	return(LAST_ROW?0:1);   
}


print_rec()
{

    int first_ref=1, refund_yn=0;
    if (lctr > 40)
	   next_page();

	get_adm_visit_date();
    fprintf(fp,"%4d ",recctr);
    fprintf(fp,"%-20s %-60s %-15s",d_patient_id.arr,d_patient_name.arr, d_adm_visit_date.arr);
	fprintf(fp,"  ");
	print_formated(d_patient_dep_amt);
	fprintf(fp," ");

	//lctr++;

    fprintf(fp,"%16s(%10s) ",d_receipt_no.arr, d_rcpt_date.arr);

	open_ref_cur();
	d_refund_amt_tot = 0;



    while(fetch_ref_cur())
	{
	      if (first_ref==1)
		     fprintf(fp,"%16s(%10s)     ",d_refund_no.arr,d_refund_date.arr);
	      else	
		  {
		     fprintf(fp,"\n");  
		     fprintf(fp,"%161s(%10s)     ",d_refund_no.arr,d_refund_date.arr);		     
		  }
	      first_ref++;
	      print_formated(d_refund_amt);
         
		  d_refund_amt_tot += d_refund_amt;	
		  refund_yn++;      
	}


	close_ref_cur();
	first_ref=0;

	EXEC SQL SELECT :d_patient_dep_amt-:d_refund_amt_tot
			 into   :d_dep_balance
			 from   DUAL;
	
	if (refund_yn==0)
	horz_skip(54);
	else
     horz_skip(5);

	  // fprintf(fp,"                                                     ");
	print_formated(d_dep_balance);	

	fprintf(fp,"\n");
	lctr++;
	
	recctr++;

	d_patient_dep_amt_tot   += d_patient_dep_amt;
	d_dep_balance_tot		+= d_dep_balance;
	d_refund_amt_tot_tot    += d_refund_amt_tot;
}

print_tot()
{
   fprintf(fp,"%69s                                   --------------                                                                ---------------      ---------------\n"," ");
   fprintf(fp,"%99s     ",loc_legend[15]);
   print_formated(d_patient_dep_amt_tot); fprintf(fp,"%63s"," ");
   print_formated(d_refund_amt_tot_tot);horz_skip(5);
   print_formated(d_dep_balance_tot); 
   next_line(1);
   fprintf(fp,"%69s                                   --------------                                                                ---------------      ---------------\n"," ");
   next_line(1);
}

get_header_dtls()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    d_acc_entity_name.arr[0] ='\0';
    d_curr_date.arr[0]   ='\0';
	d_user.arr[0] ='\0';
    d_sysdate.arr[0] ='\0';
	d_head_name.arr[0] ='\0';
    d_acc_entity_name.len =0;
    d_curr_date.len   =0;
	d_user.len =0;
    d_sysdate.len =0;
	d_head_name.len=0;

	EXEC SQL SELECT upper(ACC_ENTITY_NAME), /* description of the institution */
				   USER, TO_CHAR(SYSDATE, 'DD/MM/YYYY'),TO_CHAR(SYSDATE, 'HH24:MI:SS'),HEAD_OF_COMPANY_NAME
             INTO :d_acc_entity_name,
				  :d_user, :d_sysdate,:d_curr_date,d_head_name
			 FROM SY_ACC_ENTITY
			 WHERE acc_entity_id = :nd_facility;
    
	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
	d_curr_date.arr[d_curr_date.len]			 = '\0';
	d_head_name.arr[d_head_name.len]			 = '\0';

   
	return;
	err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	proc_exit();
}


print_page_title()
{

	int hosp_nm_len,date1_len, rep_title_len = 10,v_title_len,v_title1_len, s1, s2,date_len,user_len,pgm_len,sub_title_len;
	char v_rep_title[200],v_as_on_date[12],v_sub_title[200],v_title[200],v_title1[200];
   
	fprintf(fp,"MDL : BL");
	hosp_nm_len  =  d_acc_entity_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-8);
	fprintf(fp,"%s", d_acc_entity_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);
	date1_len=strlen(loc_legend[3]);
	horz_skip(s2-date1_len-12);
	fprintf(fp,"%s : %s", loc_legend[3],d_sysdate.arr);
    
	next_line(1);
	
	fprintf(fp,"OPR : %s", d_user.arr); 	
    user_len=strlen(d_user.arr);
	strcpy(v_rep_title,loc_legend[1]);
	rep_title_len = strlen(v_rep_title);
	s1 = (REP_WIDTH-rep_title_len)/2;
	//strcpy(v_as_on_date,nd_as_on_date.arr);
	//date_len= strlen(v_as_on_date);
	horz_skip(s1-user_len-6);
	fprintf(fp,"%s",v_rep_title);
   	s2 = (REP_WIDTH-s1-rep_title_len);
	horz_skip(s2-17);
	fprintf(fp," %-4s :   %-10s",loc_legend[2],d_curr_date.arr);
	next_line(1);

	fprintf(fp,"REP : %s",d_curr_pgm_name.arr);
        pgm_len=strlen(d_curr_pgm_name.arr);
	
	//sprintf(v_sub_title, "PERIOD FROM  : %2d - %2d year",nd_from_year,nd_to_year); 
	//strcpy(v_sub_title,d_head_name.arr);
	//sub_title_len = strlen(v_sub_title);
	//s1 = (REP_WIDTH-sub_title_len)/2;
   	//horz_skip(s1-pgm_len-6);
    //fprintf(fp,"%s",v_sub_title);

        s2 = (REP_WIDTH-5);
	    horz_skip(s2-28);
		fprintf(fp,"%5s :  %9d",loc_legend[4],++page_no);
	next_line(1);
	//fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/

    //fprintf(fp,"%c(s-3B",ESC); /* release bold style */
   
	lctr = 6;
	print_line('-',REP_WIDTH); next_line(1);

	
}


print_column_title()
 {

  //no.ID, name
  fprintf(fp, "%-4s%-22s%-60s %-15s%16s  %28s %48s %20s",loc_legend[5],loc_legend[6],loc_legend[7],loc_legend[10],loc_legend[8],loc_legend[9],loc_legend[11],loc_legend[13]);
  next_line(1);

  fprintf(fp, "%178s",loc_legend[12]);
  next_line(1);

  print_line('-',REP_WIDTH);
  next_line(1);

 }


print_param()
{
  print_page_title();

 // fprintf(fp,"VER 4.1\n");
 
  fprintf(fp,"\n\n\n\n");
  fprintf(fp,"        ");
  fprintf(fp,"INPUT PARAMETERS :\n");
  fprintf(fp,"        ");
  fprintf(fp,"------------------\n\n");

  d_episode_type.arr[0]		= '\0';	  
  d_episode_type.len		= 0;

  if (strcmp(nd_episode_type.arr,"I")==0)
	 strcpy(d_episode_type.arr, "Inpatient");
  else if (strcmp(nd_episode_type.arr,"D")==0)
	 strcpy(d_episode_type.arr, "DayCare");	
  else if (strcmp(nd_episode_type.arr,"O")==0)
	 strcpy(d_episode_type.arr, "Outpatient");	
  else if (strcmp(nd_episode_type.arr,"E")==0)
	 strcpy(d_episode_type.arr, "Emergency");	
  else if (strcmp(nd_episode_type.arr,"R")==0)
	 strcpy(d_episode_type.arr, "External");	
  else if (strcmp(nd_episode_type.arr,"A")==0)
	 strcpy(d_episode_type.arr, "All");	

  d_episode_type.len = strlen(d_episode_type.arr);

  fprintf(fp,"                EPISODE_TYPE : %s\n",d_episode_type.arr);  
  fprintf(fp,"                PERIOD_FROM  : %s\n",nd_period_from.arr);  
  fprintf(fp,"                PERIOD TO    : %s",nd_period_to.arr);

  next_page();
}


check_line(skip) /* will check for MAX LINE before printing totals */
int skip;
{
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
}

next_line(skip) /* will check for MAX LINE before printing totals */		
int skip;
{
	if ((lctr + skip) > MAX_LINES)
	{
		next_page(); 
	}
	else
	{
		fprintf(fp,"\n"); ++lctr; 
	}
}

next_page() /* will move the cursor to next page */
{
  
	fprintf(fp,"\n");
	fprintf(fp,"\f");
	lctr=0;
	fprintf(fp,"\n"); 
	 
	print_page_title();
	print_column_title();  	
}

print_line(ch,n) /* this is to obtain required characters */
  char ch;
  int n;
{
	int i;
	for(i=0;i<n;i++)
	fprintf(fp,"%c",ch);  
}

horz_skip(num) /* this is to obtain required blank space */
int num;
{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
}

print_end()
{
  fprintf(fp,"\n \n");
  horz_skip(98);

  fprintf(fp,"**   END  OF  REPORT   **");
  //next_line(1);
  fflush(fp);
  fclose(fp);
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s  ",str_amt);
    }
}  


fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00066.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


get_adm_visit_date()
{

   d_adm_visit_date.arr[0] = '\0';
   d_adm_visit_date.len    = 0;

   if ((strcmp(d_episode_type1.arr, "I")==0)||(strcmp(d_episode_type1.arr, "D")==0))
   {
      
	  EXEC SQL select to_char(ADMISSION_DATE_TIME, 'DD/MM/YYYY')
			   into   :d_adm_visit_date
			   from   BL_EPISODE_FIN_DTLS
			   where  operating_facility_id = :nd_facility_id
			   and    episode_type = :d_episode_type1
			   and    episode_id   = :d_episode_id;			   
   }
   else if ((strcmp(d_episode_type1.arr, "O")==0)||(strcmp(d_episode_type1.arr, "E")==0))
   {
	  EXEC SQL select to_char(VISIT_REGN_DATE_TIME, 'DD/MM/YYYY')
			   into   :d_adm_visit_date
			   from   OP_VISIT
			   where  facility_id = :nd_facility_id
			   and    episode_id  = :d_episode_id
			   and    visit_id    = :d_visit_id;			   

   }

   d_adm_visit_date.arr[d_adm_visit_date.len]	= '\0';

}
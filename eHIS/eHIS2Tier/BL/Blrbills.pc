/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRBILLS.PC                                  */
/* AUTHOR                : M.NITIN KUMAR                                */
/* DATE WRITTEN          : 10-JUL-1993                                  */
/*                                                                      */
/* MODIFIED              : PVSS PRASAD/21-JUL-97/FOR AMH                */  
/* MODIFIED              : VSK / 14/12/2000 / BLENH PURPOSE             */
/*                                                                      */
/* CALLED FROM            :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*                                                                      */
/************************************************************************/
      

/*   All reference to HK$ change to Dhs
   -  For American Hospital Implementation. -- G. Viswanath/31/7/1996
*/   

#include <stdio.h>
#include <string.h>      
#include <bl.h>

#define OERROR (sqlca.sqlcode < 0)
#define NO_DATA_FOUND (sqlca.sqlcode == 1403)
#define RESOURCE_BUSY (sqlca.sqlcode == -54)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define HSKIP_10 2
#define HSKIP_11 68
#define HSKIP_12 94
#define HSKIP_13 111

#define VSKIP_1 2
#define VSKIP_2 3
#define VSKIP_3 5

#define MAX_LINES 50

#define LEGEND 1

#define LENGTH_WORDS 65 

/*
#define DEBUG 
*/

EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd      [132],
	   hosp_name    [31],
	   cur_str      [8],
	   sub_cur_str  [8],
	   date_time    [20],
	   user_id      [91],
	   nd_pgm_date  [35],
	   nd_session_id[16],
	   nd_operating_facility_id [3],
	   l_pk_value		    [100],
	    l_translated_value	    [201],
	    nd_facility_id	    [3];

   VARCHAR nd_episode_id              [11],
	   nd_visit_id                [5],
	   nd_fm_date                 [13],
	   nd_to_date                 [13],
/*            Modified by Madesh--------->        */
	   nd_doc_type                            [7],
//	   nd_doc_num [9],  VSK ON 14/03/2000 CONVERTED TO long
		   nd_stat                                        [2],
/*  <---------Modified by Madesh                */           
	   prt_grp_fm                 [3],
	   prt_line_fm                [3],
	   prt_grp_to                 [3],
	   prt_line_to                [3],	
	   p_language_id [3],
	   		   			date_convert				[21],
			nd_loc_date					[21],
			nd_temp_date				[21];

   char    nd_episode_type,nd_ins_pat,
	   nd_rep_opt,                        
/*            Modified by Madesh--------->        */               
	   nd_canc_chrg;                            
/*  <---------Modified by Madesh                */                                 
	   

   VARCHAR d_doc_type_code         [7],
	   d_doc_date                 [13],
	   nd_sys_date                 [13],
	   d_admission_date           [13],
	   d_ward_code                [5],
	   d_room_num                 [5],
	   d_bed_num                  [9],
	   d_physician_id             [16],
	   d_physician_name           [31],   
	   d_blng_grp_id              [3],
	   d_prt_grp_hdr_code         [3],
	   d_prt_grp_line_code        [3],  
	   d_blng_grp_desc            [31],
	   d_patient_id               [21],
	   d_patient_short_name       [61],
	   d_patient_short_name1      [61],
	   d_short_name_loc_lang      [61],
         d_short_name_full          [61],
	   d_sex                      [2],
	   d_hdr_long_desc            [41],
	   d_hdr_loc_lang_short_desc  [17],
	   d_line_long_desc           [41],
	   d_line_loc_lang_short_desc [17],
	   d_doc_num_prt              [9],
	   d_episode_id_prt           [9],
	   d_prv_doc_type_code        [7],
	   d_prv_doc_num              [9],
	   d_prv_doc_date             [13],
	   d_bill_fm_date             [13],
	   d_bill_to_date             [13],
	   d_last_doc_type_code       [7],
	   d_last_doc_num             [9],
	   d_last_doc_date            [13],
	   d_pkg_serv_code            [11],
	   d_pkg_serv_desc            [41],
	   d_pkg_serv_desc_loc_lang   [17],
	   d_blng_serv_code           [11],
	   d_blng_serv_desc           [41],
	   d_blng_serv_desc_loc_lang  [16],
	   d_clinic_code              [5],
	   d_visit_date_time          [17],
	   d_serv_item_desc           [41],
 	   v_package_bill_doc_type	  [7],
	   v_package_bill_doc_num	  [9],
	   v_non_ins_blng_grp_id	  [3],
	   v_blng_grp_id			  [3],
	   v_cust_code				  [9],
	   w_cust_code				  [9],
	   v_ins_pkg_pat_ind		  [2],
 	   v_package_code			  [11],
	   v_pkg_long_desc			  [41],
	   v_cust_long_name			  [41],
	   d_ins_pkg_pat_ind		  [2];

char       d_package_ind;

int        d_num_of_deps_paid;
float      d_qty;

long       d_doc_num,nd_doc_num,
	   d_episode_id;

double     d_serv_disc_amt,
	   d_man_disc_amt,
	   d_overall_disc_amt,
	   d_prepay_adj_amt,
	   d_deposit_adj_amt,
/*            Modified by Madesh--------->        */
	   d_man_disc,
	   d_dep_amt,
	   d_pre_amt,
	   d_bill_amt,
/*  <---------Modified by Madesh                */                                                 

	   d_bill_paid_amt,
	   d_gross_amt,
	   d_prv_amt,
	   d_prv_outst_amt,
	   d_tot_dep_paid_amt,
	   v_package_price,
	   v_patient_payable,
	   v_insurance_payable,
	   v_ins_amt,
	   v_pat_amt,
     	   bl_hdr_bill_tot_adjust_amt             , //EPNH 28/10/2004
	   bl_hdr_bill_tot_exempt_amt             ,
           bl_hdr_bill_tot_write_off_amt               ; 


char string_var[150];
int i;
	
	char g_facility_id[3];

    char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];

EXEC SQL END DECLARE SECTION;


// EXEC ORACLE OPTION(HOLD_CURSOR = YES);
// EXEC ORACLE OPTION(REBIND = NO);

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>
     
char g_prt_grp_hdr_code[3];
char g_prt_grp_line_code[3];

int  g_first_break ;
int  g_print_line_desc;
int g_print_subtot;
int lno = 0, pno = 0;

double g_cum_amt = 0,g_sub_tot = 0;
double tot_disc_amt = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
   if (argc != 5)
   {
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(g_pgm_id,"BLRBILL1");

    strcpy(nd_facility_id.arr,argv[4]);
    nd_facility_id.len = strlen(nd_facility_id.arr);
    strcpy(g_facility_id,nd_facility_id.arr);


   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle");
      if (uid_pwd.len == 0)
	 disp_message(ERR_MESG,"Null oracle uid/pwd");
      proc_exit();
   }

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);


   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   set_meduser_role();
   strcpy(p_language_id.arr,l_language_id.arr);
   p_language_id.len = l_language_id.len;
   fetch_legend_value();

   nd_episode_id.arr[0]    = '\0';
   d_episode_id_prt.arr[0] = '\0';
   nd_visit_id.arr[0]      = '\0';
   d_patient_id.arr[0]     = '\0';
   nd_fm_date.arr[0]       = '\0';
   nd_to_date.arr[0]       = '\0';
   prt_grp_fm.arr[0]       = '\0';
   prt_line_fm.arr[0]      = '\0';
   prt_grp_to.arr[0]       = '\0';
   prt_line_to.arr[0]      = '\0';
   d_doc_date.arr[0]       = '\0';
   nd_sys_date.arr[0]       = '\0';
   nd_operating_facility_id.arr[0] = '\0';


   nd_episode_id.len       = 0;
   d_episode_id_prt.len    = 0;
   nd_visit_id.len         = 0;
   d_patient_id.len        = 0;
   nd_fm_date.len          = 0;
   nd_to_date.len          = 0;
   prt_grp_fm.len          = 0;
   prt_line_fm.len         = 0;
   prt_grp_to.len          = 0;
   prt_line_to.len         = 0;
   d_doc_date.len          = 0;
   nd_sys_date.len          = 0;
   nd_operating_facility_id.len = 0;

   nd_episode_type = '\0';
   nd_rep_opt      = '\0';
   nd_ins_pat      = '\0';

   
   nd_doc_num = 0;

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,
				   LTRIM(TO_CHAR(TO_NUMBER(PARAM2),'00000009')),
				   PARAM3,PARAM4,PARAM5,PARAM6,
				   PARAM7,PARAM8,PARAM9,PARAM10,PARAM11,
				   PARAM14,PARAM15,PARAM16,PARAM17,PARAM18,PARAM19,     
				   PARAM20,PARAM21,PARAM22,
				   TO_CHAR(SYSDATE,'DD/MM/YYYY')
	      INTO 
			:nd_operating_facility_id,
			:nd_episode_type,
			:nd_episode_id,
			:d_episode_id_prt,
			:nd_visit_id,
			:d_patient_id,
			:nd_fm_date,
			:nd_to_date,
			:prt_grp_fm,
			:prt_line_fm,
			:prt_grp_to,
			:prt_line_to,
			:nd_rep_opt,
/*            Modified by Madesh--------->        */                   
			:nd_canc_chrg,
			:nd_doc_type,
			:nd_doc_num,
			:nd_stat,                        
/*  <---------Modified by Madesh                */                                                                    
			:d_doc_date,
			:nd_ins_pat,   /* BLENH */
			:bl_hdr_bill_tot_adjust_amt             , //EPNH 28/10/2004
                        :bl_hdr_bill_tot_exempt_amt             ,
                        :bl_hdr_bill_tot_write_off_amt  ,
			:nd_sys_date
	      FROM SY_PROG_PARAM
	     WHERE PGM_ID     = 'BLRBILL1'
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;
 


   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_episode_id.arr[nd_episode_id.len]  = '\0';
   d_episode_id_prt.arr[d_episode_id_prt.len]  = '\0';
   nd_visit_id.arr[nd_visit_id.len]  = '\0';
   d_patient_id.arr[d_patient_id.len]  = '\0';
   nd_fm_date.arr[nd_fm_date.len]  = '\0';
   nd_to_date.arr[nd_to_date.len]  = '\0';
   prt_grp_fm.arr[prt_grp_fm.len]  = '\0';
   prt_line_fm.arr[prt_line_fm.len]  = '\0';
   prt_grp_to.arr[prt_grp_to.len]  = '\0';
   prt_line_to.arr[prt_line_to.len]  = '\0';
   d_doc_date.arr[d_doc_date.len]  = '\0';          
   nd_sys_date.arr[nd_sys_date.len]  = '\0';          
/*            Modified by Madesh--------->        */                      
   nd_doc_type.arr[nd_doc_type.len]= '\0';
//   nd_doc_num.arr[nd_doc_num.len]= '\0'; VSK on 14/03/2000
   nd_stat.arr[nd_stat.len]='\0';
/*  <---------Modified by Madesh                */                                                 

   strcpy(g_facility_id, nd_operating_facility_id.arr);

/*
   EXEC SQL SELECT PARAM1,PARAM2,
		   LTRIM(TO_CHAR(TO_NUMBER(PARAM2),'00000009')),
		   PARAM3,PARAM4,PARAM5,PARAM6,
		   PARAM7,PARAM8,PARAM9,PARAM10,PARAM11,
		   TO_CHAR(SYSDATE,'DD/MM/YYYY')
	      INTO :nd_episode_type,
		   :nd_episode_id,
				   :d_episode_id_prt,
		   :nd_visit_id,
				   :d_patient_id,
		   :nd_fm_date,
		   :nd_to_date,
		   :prt_grp_fm,
		   :prt_line_fm,
		   :prt_grp_to,
		   :prt_line_to,
		   :nd_rep_opt,
		   :d_doc_date
	      FROM SY_PROG_PARAM
	     WHERE PGM_ID     = 'BLRBILL1'
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_episode_id.arr[nd_episode_id.len]  = '\0';
   d_episode_id_prt.arr[d_episode_id_prt.len]  = '\0';
   nd_visit_id.arr[nd_visit_id.len]  = '\0';
   d_patient_id.arr[d_patient_id.len]  = '\0';
   nd_fm_date.arr[nd_fm_date.len]  = '\0';
   nd_to_date.arr[nd_to_date.len]  = '\0';
   prt_grp_fm.arr[prt_grp_fm.len]  = '\0';
   prt_line_fm.arr[prt_line_fm.len]  = '\0';
   prt_grp_to.arr[prt_grp_to.len]  = '\0';
   prt_line_to.arr[prt_line_to.len]  = '\0';
   d_doc_date.arr[d_doc_date.len]  = '\0';
*/
   start_prog_msg();

   hosp_name.arr[0]  = '\0';
   hosp_name.len     = 0;
   cur_str.arr[0]    = '\0';
   cur_str.len       = 0;
   sub_cur_str.arr[0]   = '\0';
   sub_cur_str.len      = 0;


   EXEC SQL SELECT ACC_ENTITY_NAME,
			BASE_CURRENCY,
			BASE_CURRENCY_DEC
	    INTO   :hosp_name,
				cur_str,
				sub_cur_str
	    FROM   SY_ACC_ENTITY
		WHERE  ACC_ENTITY_ID = :nd_operating_facility_id;

    if(OERROR)
	err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]  = '\0';
   cur_str.arr[cur_str.len]      = '\0';
   sub_cur_str.arr[sub_cur_str.len] = '\0';


   prt_bill();

   EXEC SQL DELETE FROM SY_PROG_PARAM
		  WHERE PGM_ID     = 'BLRBILL1'
		    AND SESSION_ID = :nd_session_id
		    AND PGM_DATE   = :nd_pgm_date;
   if (OERROR)   
	err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");


   end_prog_msg();
   EXEC SQL COMMIT WORK RELEASE;
   return ;
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

declare_cursors()
{

    EXEC SQL DECLARE IP_EPISODE_CUR CURSOR FOR
	     SELECT  TO_CHAR(ADMISSION_DATE_TIME,'DD/MM/YYYY'),
		     CUR_WARD_CODE,
		     CUR_ROOM_NUM,
		     CUR_BED_NUM,
		     CUR_PHYSICIAN_ID
	     FROM    IP_EPISODE
	     WHERE   EPISODE_ID = :nd_episode_id
		 AND     FACILITY_ID = :nd_operating_facility_id;

if(nd_ins_pat == 'S')    
   {
    EXEC SQL DECLARE BL_PAT_FOLIO_CUR_S CURSOR FOR
	     SELECT  PRT_GRP_HDR_CODE,
		     PRT_GRP_LINE_CODE,
		     DECODE(PACKAGE_IND,'P','P',
			  DECODE(SERV_ITEM_CODE,NULL,'S',
				 SERV_ITEM_DESC)),
		     DECODE(PACKAGE_IND,'P',PACKAGE_SERVICE_CODE,
			  DECODE(SERV_ITEM_CODE,NULL,BLNG_SERV_CODE,
				 SERV_ITEM_CODE)),
		     SUM(NVL(UPD_GROSS_CHARGE_AMT,0)),
/**********************MODIFIED BY VSK FOR BLENH**********************
 The qty field modified to take the qty of the seq no 0 and not 1. The 
 seq no 1 will come only on split case. All other case 0 will be there
 defenitely. So only seq no 0, qty is picked up for displaying in the
 report.
 *********************************************************************/
		     SUM(DECODE(PACKAGE_IND,'P',
			   DECODE(TRX_DOC_REF_SEQ_NUM,1,NVL(SERV_QTY,0),0.00),
			   DECODE(TRX_DOC_REF_SEQ_NUM,0,NVL(SERV_QTY,0),
										  1,NVL(SERV_QTY,0),
										  2,NVL(SERV_QTY,0),0.00))),
		     SUM(NVL(UPD_DISC_AMT,0)),
			 	 NULL 
	     FROM    BL_PATIENT_CHARGES_FOLIO
	     WHERE   EPISODE_TYPE = :nd_episode_type
	     AND     PATIENT_ID   = :d_patient_id
	     AND     EPISODE_ID   = :nd_episode_id
	     AND     VISIT_ID     = DECODE(:nd_episode_type,
					   'I',VISIT_ID,'D',VISIT_ID,:nd_visit_id) // EPNH 28/10/2004
	     AND     trunc(TRX_DATE) BETWEEN
		     TO_DATE(NVL(:nd_fm_date,'01/01/1000'),'DD/MM/YYYY')
			AND
		     TO_DATE(NVL(:nd_to_date,'01/01/3000'),'DD/MM/YYYY')
	     AND     RPAD(PRT_GRP_HDR_CODE,2,' ')||PRT_GRP_LINE_CODE BETWEEN 
		     RPAD(NVL(:prt_grp_fm,'!!'),2,' ')||NVL(:prt_line_fm,'!!')
			AND
		     RPAD(NVL(:prt_grp_to,'~~'),2,' ')||NVL(:prt_line_to,'~~')
/*  AND    NVL(INS_PKG_PAT_IND,'X') = DECODE(:nd_ins_pat,'I','I','P','P','A',NVL(INS_PKG_PAT_IND,'X')) */
/* BLENH */  AND     NVL(INS_PKG_PAT_IND,'X') != 'K'
	     AND     NVL(TRX_FINALIZE_IND,'X') = 'Y'
/*            Modified by Madesh--------->        */                                 
	     AND ((TRX_STATUS IS NULL AND :nd_canc_chrg = 'N')
					   OR
			 ((TRX_STATUS LIKE '%' OR TRX_STATUS IS NULL) AND :nd_canc_chrg = 'Y'))
	     AND ((:nd_stat = 'B' AND BILL_DOC_TYPE_CODE = :nd_doc_type AND 
		 		 BILL_DOC_NUM = :nd_doc_num AND BILLED_FLAG = 'Y')
//				 to_char(BILL_DOC_NUM) = :nd_doc_num AND BILLED_FLAG = 'Y')
				       OR
		     (:nd_stat is null and nvl(billed_flag,'N') in ('N','Y')))      
/*  <---------Modified by Madesh                */                                                                                          
	     AND     NVL(PACKAGE_TRX_IND,'X')  = 'N'
		 AND    OPERATING_FACILITY_ID = :nd_operating_facility_id
	     GROUP BY PRT_GRP_HDR_CODE, PRT_GRP_LINE_CODE,
		     DECODE(PACKAGE_IND,'P','P',
			  DECODE(SERV_ITEM_CODE,NULL,'S',
				 SERV_ITEM_DESC)),
		     DECODE(PACKAGE_IND,'P',PACKAGE_SERVICE_CODE,
			  DECODE(SERV_ITEM_CODE,NULL,BLNG_SERV_CODE,
				 SERV_ITEM_CODE));
    }
 else
    {
	    EXEC SQL DECLARE BL_PAT_FOLIO_CUR CURSOR FOR
	     SELECT  PRT_GRP_HDR_CODE,
				 PRT_GRP_LINE_CODE,
			     DECODE(PACKAGE_IND,'P','P',
				 DECODE(SERV_ITEM_CODE,NULL,'S',
				 SERV_ITEM_DESC)),
				 DECODE(PACKAGE_IND,'P',PACKAGE_SERVICE_CODE,
				 DECODE(SERV_ITEM_CODE,NULL,BLNG_SERV_CODE,
				 SERV_ITEM_CODE)),
				 SUM(NVL(UPD_GROSS_CHARGE_AMT,0)),
/**********************MODIFIED BY VSK FOR BLENH**********************
 The qty field modified to take the qty of the seq no 0 and not 1. The 
 seq no 1 will come only on split case. All other case 0 will be there
 defenitely. So only seq no 0, qty is picked up for displaying in the
 report.
 *********************************************************************/
		     SUM(DECODE(PACKAGE_IND,'P',
			   DECODE(TRX_DOC_REF_SEQ_NUM,1,NVL(SERV_QTY,0),0.00),
			   DECODE(TRX_DOC_REF_SEQ_NUM,0,NVL(SERV_QTY,0),
										  1,NVL(SERV_QTY,0),
										  2,NVL(SERV_QTY,0),0.00))),
		     SUM(NVL(UPD_DISC_AMT,0)),
			 NVL(INS_PKG_PAT_IND,'N')
	     FROM    BL_PATIENT_CHARGES_FOLIO
	     WHERE   EPISODE_TYPE = :nd_episode_type
	     AND     PATIENT_ID   = :d_patient_id
	     AND     EPISODE_ID   = :nd_episode_id
		 AND     OPERATING_FACILITY_ID = :nd_operating_facility_id
	     AND     VISIT_ID     = DECODE(:nd_episode_type,
					   'I',VISIT_ID,'D',VISIT_ID,:nd_visit_id)  // EPNH 28/10/2004
	     AND     TRUNC(TRX_DATE) BETWEEN
		     TO_DATE(NVL(:nd_fm_date,'01/01/1000'),'DD/MM/YYYY')
			AND
		     TO_DATE(NVL(:nd_to_date,'01/01/3000'),'DD/MM/YYYY')
	     AND     RPAD(PRT_GRP_HDR_CODE,2,' ')||PRT_GRP_LINE_CODE BETWEEN 
		     RPAD(NVL(:prt_grp_fm,'!!'),2,' ')||NVL(:prt_line_fm,'!!')
			AND
		     RPAD(NVL(:prt_grp_to,'~~'),2,' ')||NVL(:prt_line_to,'~~')
/* BLENH */	 AND    NVL(INS_PKG_PAT_IND,'X') = DECODE(:nd_ins_pat,'I','I','P','P','A',NVL(INS_PKG_PAT_IND,'X'))
/* BLENH */  AND     NVL(INS_PKG_PAT_IND,'X') != 'K'
	     AND     NVL(TRX_FINALIZE_IND,'X') = 'Y'
/*            Modified by Madesh--------->        */                                 
	     AND ((TRX_STATUS IS NULL AND :nd_canc_chrg = 'N')
					   OR
			 ((TRX_STATUS LIKE '%' OR TRX_STATUS IS NULL) AND :nd_canc_chrg = 'Y'))
	     AND ((:nd_stat = 'B' AND BILL_DOC_TYPE_CODE = :nd_doc_type AND 
		 		 BILL_DOC_NUM = :nd_doc_num AND BILLED_FLAG = 'Y')
//				 to_char(BILL_DOC_NUM) = :nd_doc_num AND BILLED_FLAG = 'Y')
				       OR
		     (:nd_stat is null and nvl(billed_flag,'N') in ('N','Y')))      
/*  <---------Modified by Madesh                */                                                                                          
	     AND     NVL(PACKAGE_TRX_IND,'X')  = 'N'
	     GROUP BY PRT_GRP_HDR_CODE, PRT_GRP_LINE_CODE,
		     DECODE(PACKAGE_IND,'P','P',
			  DECODE(SERV_ITEM_CODE,NULL,'S',
				 SERV_ITEM_DESC)),
		     DECODE(PACKAGE_IND,'P',PACKAGE_SERVICE_CODE,
			  DECODE(SERV_ITEM_CODE,NULL,BLNG_SERV_CODE,
				 SERV_ITEM_CODE)),NVL(INS_PKG_PAT_IND,'N');
         } //err_mesg("error1",0,"");

    EXEC SQL DECLARE BL_BLNG_GRP_CUR CURSOR FOR
	     SELECT  LONG_DESC
	     FROM    BL_BLNG_GRP
	     WHERE   BLNG_GRP_ID = :d_blng_grp_id;

    EXEC SQL DECLARE MP_PATIENT_MAST_CUR CURSOR FOR
	     SELECT /* substr(SHORT_NAME,1,30),
		         decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname1,
				 */
				 SUBSTR(SHORT_NAME_LOC_LANG,1,16),
		         SEX,short_name
	     FROM    MP_PATIENT_MAST
	     WHERE   PATIENT_ID = :d_patient_id;

    EXEC SQL DECLARE SY_PHYSICIAN_MAST_CUR CURSOR FOR
	     SELECT  FULL_NAME
	     FROM    SY_PHYSICIAN_MAST
	     WHERE   PHYSICIAN_ID = :d_physician_id;

    EXEC SQL DECLARE PRT_GRP_HDR_CUR CURSOR FOR
	     SELECT  LONG_DESC,
		     LOC_LANG_SHORT_DESC
	     FROM   BL_BLNG_PRT_GRP_HDR
	     WHERE  PRT_GRP_HDR_CODE = :d_prt_grp_hdr_code;

    EXEC SQL DECLARE PRT_GRP_LINE_CUR CURSOR FOR
	     SELECT  LONG_DESC,
		     LOC_LANG_SHORT_DESC
	     FROM   BL_BLNG_PRT_GRP_LINE
	     WHERE  PRT_GRP_HDR_CODE  = :d_prt_grp_hdr_code
	     AND    PRT_GRP_LINE_CODE = :d_prt_grp_line_code;

}


prt_bill()
{

    open_files();
    declare_cursors();
  
    EXEC SQL OPEN IP_EPISODE_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor IP_EPISODE_CUR",0,"");

	print_page_head();

    if(fetch_ip_episode()) {

	pno = 1;
	g_cum_amt = 0;
	tot_disc_amt = 0;

	fetch_blng_grp_desc();
	fetch_patient_name();
	fetch_physician_name();
//	print_page_head();


	if(nd_ins_pat == 'S') 
		EXEC SQL OPEN BL_PAT_FOLIO_CUR_S;
    else
		EXEC SQL OPEN BL_PAT_FOLIO_CUR;	

	if(OERROR)
	    err_mesg("OPEN failed on cursor BL_PAT_FOLIO_CUR",0,"");

	g_prt_grp_line_code[0] = '\0';
	g_first_break = 1;
	g_print_subtot = 0;

	while(fetch_folio()) {


/*
	    if(strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr)) 
		print_break_hdr();
*/

	    if ((strcmp(g_prt_grp_line_code,d_prt_grp_line_code.arr) != 0) || (strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr) != 0))
		print_break_line();

	    if(g_print_subtot) {
	       fprintf(fp,"\n");
	       lno++;
	    }
	    print_line();
	    strcpy(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr);
	    strcpy(g_prt_grp_line_code,d_prt_grp_line_code.arr);

	    g_cum_amt += d_gross_amt;
	    g_sub_tot += d_gross_amt;
	    tot_disc_amt += d_serv_disc_amt;

//sprintf(string_var,"%lf --%lf",g_cum_amt,tot_disc_amt);
//disp_message(ERR_MESG,string_var);
	    g_print_subtot = 1;

	} /* end of while fetch_folio() */

	if(g_print_subtot)
	    print_subtot();

	print_balance_due();

		v_ins_amt	= 0;
		v_pat_amt	= 0;

		v_package_bill_doc_type.arr[0]  = '\0';
		v_package_bill_doc_num.arr[0]   = '\0';
		v_non_ins_blng_grp_id.arr[0]    = '\0';
		
		v_package_bill_doc_type.len     = 0;
		v_package_bill_doc_num.len      = 0;
		v_non_ins_blng_grp_id.len       = 0;

		EXEC SQL select package_bill_doc_type,package_bill_doc_num,non_ins_blng_grp_id
		into  :v_package_bill_doc_type,:v_package_bill_doc_num,:v_non_ins_blng_grp_id
		from  bl_episode_fin_dtls
		where patient_id   =   :d_patient_id
		and   episode_id   =   :nd_episode_id
		and   episode_type  in ('I','D') // EPNH 28/10/2004
		and   operating_facility_id = :nd_operating_facility_id;

		v_package_bill_doc_type.arr[v_package_bill_doc_type.len]       = '\0';
		v_package_bill_doc_num.arr[v_package_bill_doc_num.len]         = '\0';
		v_non_ins_blng_grp_id.arr[v_non_ins_blng_grp_id.len]           = '\0';

		
   if (v_package_bill_doc_type.arr[0] != '\0' && v_package_bill_doc_num.arr[0] != '\0')
	   {    
	v_ins_pkg_pat_ind.arr[0]  = '\0';
		v_ins_pkg_pat_ind.len     = 0;
		
		v_package_code.arr[0]  = '\0';
		v_package_code.len     = 0;

		w_cust_code.arr[0]  = '\0';
		w_cust_code.len     = 0;

		v_package_price		= 0;
		v_patient_payable	= 0;
		v_insurance_payable = 0;
		 
		EXEC SQL select package_code,nvl(package_price,0),nvl(patient_payable,0),nvl(insurance_payable,0),ins_pkg_pat_ind,cust_code
		into  :v_package_code,:v_package_price,:v_patient_payable,:v_insurance_payable,:v_ins_pkg_pat_ind,:w_cust_code
		from   bl_package_trn_hdr
		where  patient_id =  :d_patient_id
		and    package_bill_doc_type  = :v_package_bill_doc_type 
		and    package_bill_doc_num   = :v_package_bill_doc_num
		and    nvl(bill_status,'X')  != 'C'
		and    OPERATING_FACILITY_ID = :nd_operating_facility_id;

		v_ins_pkg_pat_ind.arr[v_ins_pkg_pat_ind.len]       = '\0';
		v_package_code.arr[v_package_code.len]			   = '\0';
		w_cust_code.arr[w_cust_code.len]				   = '\0';
		

		if (v_package_code.arr[0]  != '\0')		

			v_pkg_long_desc.arr[0]  = '\0';
			v_pkg_long_desc.len     = 0; 
           
			EXEC SQL select long_desc into :v_pkg_long_desc
			from  bl_package_codes
			where  package_code = :v_package_code;

			v_pkg_long_desc.arr[v_pkg_long_desc.len]	   = '\0';
	

		if (w_cust_code.arr[0]  != '\0')		
		   {
			v_cust_long_name.arr[0]  = '\0';
			v_cust_long_name.len     = 0; 
           
			EXEC SQL select long_name into :v_cust_long_name
			from  ar_customer
			where  cust_code = :w_cust_code;

			v_cust_long_name.arr[v_cust_long_name.len]				   = '\0';
			}
	
	//if (nd_doc_type == '\0' && nd_doc_num == '\0')
	if (nd_doc_type.arr[0]  != '\0')		
		{
			v_blng_grp_id.arr[0] = '\0';
			v_cust_code.arr[0]   = '\0';
			
			v_blng_grp_id.len    = 0;
			v_cust_code.len      = 0;
			
		    EXEC SQL select blng_grp_id,cust_code 
			into   :v_blng_grp_id,:v_cust_code 
			from   bl_bill_hdr
			where  doc_type_code = :nd_doc_type
			and    doc_num       = :nd_doc_num
			and    operating_facility_id = :nd_operating_facility_id;
		
			v_blng_grp_id.arr[v_blng_grp_id.len]     = '\0';
			v_cust_code .arr[v_cust_code .len]       = '\0';

		if (v_blng_grp_id.arr[0]  != '\0' && v_cust_code.arr[0] != '\0' && v_ins_pkg_pat_ind.arr[0]  == 'I')
		     {
			   if (v_insurance_payable > 0) 
			      { v_ins_amt = v_insurance_payable;
				    v_pat_amt = 0;
				  }
			  
			  if (v_insurance_payable == 0) 
				 { v_ins_amt = v_package_price;
				   v_pat_amt = 0;
				 }

			 }

		if (v_blng_grp_id.arr[0]  != '\0' && v_cust_code.arr[0] == '\0' && v_ins_pkg_pat_ind.arr[0]  == 'P') 
			{
			   if (v_patient_payable > 0) 
			      { v_pat_amt = v_patient_payable;
				    v_ins_amt = 0;
				  }
			  
			  if (v_insurance_payable == 0) 
				 { v_pat_amt = v_package_price;
				   v_ins_amt = 0;
				 }
			 }

		if (v_blng_grp_id.arr[0]  != '\0' && v_cust_code.arr[0] != '\0' && v_ins_pkg_pat_ind.arr[0]  == 'P') 
			 {v_pat_amt = v_package_price;
			  v_ins_amt = 0;
			 }
			
	  }

	if (nd_doc_type.arr[0]  == '\0')
		 { if (v_ins_pkg_pat_ind.arr[0]  == 'P' && v_patient_payable == 0)
		       {v_pat_amt = v_package_price;
			    v_ins_amt = 0;
			   }
		   if (v_ins_pkg_pat_ind.arr[0]  == 'P' && v_patient_payable > 0)
		       {v_pat_amt = v_patient_payable;
			    v_ins_amt = v_insurance_payable;
			   }
		      
		   if (v_ins_pkg_pat_ind.arr[0]  == 'I' && v_patient_payable == 0)
		       {v_ins_amt = v_package_price;
			    v_pat_amt = 0;
			   }
		   if (v_ins_pkg_pat_ind.arr[0] == 'I' && v_insurance_payable > 0)
		       {v_pat_amt = v_patient_payable;
			    v_ins_amt = v_insurance_payable;
			   }

		}

	if (v_ins_amt >0 || v_pat_amt >0)
		print_pkg();

	 } 


    } /* end of while fetch_bill_hdr()  */

    fflush(fp);
    fclose(fp);
    return 1;

}

open_files()
{
   strcpy(filename,WORKING_DIR);
   strcat(filename,"blrbills.lis");
   if ((fp = fopen(filename,"w")) == NULL)
   {
	err_mesg("\nError while opening File blripdin1.lis\n",0,"");
	proc_exit();
   }

}

fetch_ip_episode()
{

    if(nd_episode_type == 'R')
	return 1;

    if(nd_episode_type == 'I' || nd_episode_type == 'D' ) { // EPNH 28/10/2004

	d_admission_date.arr[0]    = '\0';
	d_ward_code.arr[0]         = '\0';
	d_room_num.arr[0]          = '\0';
	d_bed_num.arr[0]           = '\0';
	d_physician_id.arr[0]      = '\0';
    
	d_admission_date.len       = 0;
	d_ward_code.len            = 0;
	d_room_num.len             = 0;
	d_bed_num.len              = 0;
	d_physician_id.len         = 0;

	EXEC SQL OPEN IP_EPISODE_CUR;
    
	if(OERROR)
	    err_mesg("OPEN failed on cursor IP_EPISODE_CUR",0,"");
    
	EXEC SQL FETCH IP_EPISODE_CUR INTO 
		       :d_admission_date,
		       :d_ward_code,
		       :d_room_num,
		       :d_bed_num,
		       :d_physician_id;
    
	if(OERROR)
	    err_mesg("FETCH failed on cursor IP_EPISODE_CUR",0,"");
    
	if(NO_DATA_FOUND)
	    return 0;
    
	d_admission_date.arr[d_admission_date.len]            = '\0';
	d_ward_code.arr[d_ward_code.len]              = '\0';
	d_room_num.arr[d_room_num.len]                = '\0';
	d_bed_num.arr[d_bed_num.len]                  = '\0';
	d_physician_id.arr[d_physician_id.len]        = '\0';
    
	return 1;
    }
    else if(nd_episode_type == 'O' || nd_episode_type == 'E') { // EPNH 28/10/2004

	d_clinic_code.arr[0]       = '\0';
	d_physician_id.arr[0]      = '\0';
	d_visit_date_time.arr[0]   = '\0';

	d_clinic_code.len          = 0;
	d_physician_id.len         = 0;
	d_visit_date_time.len      = 0;

	EXEC SQL SELECT CLINIC_CODE,
			PHYSICIAN_ID,
			TO_CHAR(VISIT_REGN_DATE_TIME,'DD/MM/YYYY HH24:MI')
		   INTO :d_clinic_code,
			:d_physician_id,
			:d_visit_date_time
		   FROM OP_VISIT
		  WHERE EPISODE_ID = :nd_episode_id
		    AND PATIENT_ID = :d_patient_id
		    AND VISIT_ID   = :nd_visit_id
			AND FACILITY_ID = :nd_operating_facility_id;

	if(OERROR)
	    err_mesg("FETCH failed on cursor IP_EPISODE_CUR",0,"");
    
	if(NO_DATA_FOUND)
	    return 0;

	d_clinic_code.arr[d_clinic_code.len]           = '\0';
	d_physician_id.arr[d_physician_id.len]         = '\0';
	d_visit_date_time.arr[d_visit_date_time.len]   = '\0';

	return 1;

    }

}

fetch_folio()
{

    d_prt_grp_hdr_code.arr[0]  = '\0';
    d_prt_grp_line_code.arr[0] = '\0';
    d_blng_serv_code.arr[0]    = '\0';
    d_serv_item_desc.arr[0]    = '\0';

    d_prt_grp_hdr_code.len     = 0;
    d_prt_grp_line_code.len    = 0;
    d_blng_serv_code.len       = 0;
    d_serv_item_desc.len       = 0;

    d_gross_amt     = 0;
    d_qty           = 0;
    d_serv_disc_amt = 0;

	if(nd_ins_pat == 'S') 
       { EXEC SQL FETCH BL_PAT_FOLIO_CUR_S
	     INTO  :d_prt_grp_hdr_code,
		   :d_prt_grp_line_code,
		   :d_serv_item_desc,
		   :d_blng_serv_code,
		   :d_gross_amt,
		   :d_qty,
		   :d_serv_disc_amt,
		   :d_ins_pkg_pat_ind;
		 }

	else	
	   { EXEC SQL FETCH BL_PAT_FOLIO_CUR
		 INTO  :d_prt_grp_hdr_code,
			:d_prt_grp_line_code,
			:d_serv_item_desc,
			:d_blng_serv_code,
			:d_gross_amt,
			:d_qty,
			:d_serv_disc_amt,
			:d_ins_pkg_pat_ind;
		 }

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_PAT_FOLIO_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    d_prt_grp_hdr_code.arr[d_prt_grp_hdr_code.len]   = '\0';
    d_prt_grp_line_code.arr[d_prt_grp_line_code.len] = '\0';
    d_blng_serv_code.arr[d_blng_serv_code.len]       = '\0';
    d_serv_item_desc.arr[d_serv_item_desc.len]       = '\0';

    d_blng_serv_desc.arr[0]  = '\0';
    d_blng_serv_desc_loc_lang.arr[0]  = '\0';

    d_blng_serv_desc.len     = 0;
    d_blng_serv_desc_loc_lang.len     = 0;

    if (strlen(d_serv_item_desc.arr) == 1) {
	if (d_serv_item_desc.arr[0] == 'S') {
	    EXEC SQL SELECT LONG_DESC,
			    LOC_LANG_SHORT_DESC
		     INTO   :d_blng_serv_desc,
			    :d_blng_serv_desc_loc_lang
		     FROM   BL_BLNG_SERV
		     WHERE  BLNG_SERV_CODE = :d_blng_serv_code;
	
	    if(OERROR)
		err_mesg("SELECT failed on table BL_BLNG_SERV",0,"");
	}
	else {
	    EXEC SQL SELECT LONG_DESC,
			    LOC_LANG_SHORT_DESC
		     INTO   :d_blng_serv_desc,
			    :d_blng_serv_desc_loc_lang
		     FROM   BL_PACKAGE_HDR
		     WHERE  PACKAGE_CODE = :d_blng_serv_code;
	
	    if(OERROR)
		err_mesg("SELECT failed on table BL_BLNG_SERV",0,"");
	}

	d_blng_serv_desc.arr[d_blng_serv_desc.len]  = '\0';
	d_blng_serv_desc_loc_lang.arr[d_blng_serv_desc_loc_lang.len]  = '\0';
    }
    else {
	strcpy(d_blng_serv_desc.arr, d_serv_item_desc.arr);
    }

    return 1;

}

fetch_blng_grp_desc()
{

    EXEC SQL OPEN BL_BLNG_GRP_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor BL_BLNG_GRP_CUR",0,"");

    d_blng_grp_desc.arr[0] = '\0';

    EXEC SQL FETCH BL_BLNG_GRP_CUR INTO
		   :d_blng_grp_desc;

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_BLNG_GRP_CUR",0,"");

    d_blng_grp_desc.arr[d_blng_grp_desc.len] = '\0';

}

fetch_patient_name()
{  

    EXEC SQL OPEN MP_PATIENT_MAST_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor MP_PATIENT_MAST_CUR",0,"");

    d_patient_short_name.arr[0]   = '\0';
	d_patient_short_name1.arr[0]   = '\0';  
    d_short_name_loc_lang.arr[0]  = '\0';
    d_sex.arr[0]                  = '\0';

    d_patient_short_name.len    = 0;
	d_patient_short_name1.len    = 0;
    d_short_name_loc_lang.len   = 0;
    d_sex.len                   = 0;

    EXEC SQL FETCH MP_PATIENT_MAST_CUR
	     INTO  /*:d_patient_short_name,
			   :d_patient_short_name1,*/
			   :d_short_name_loc_lang,
		         :d_sex,
                     :d_short_name_full;

    if(OERROR)
	err_mesg("FETCH failed on cursor MP_PATIENT_MAST_CUR",0,"");

    d_patient_short_name.arr[d_patient_short_name.len]    = '\0';
	d_patient_short_name1.arr[d_patient_short_name1.len]    = '\0';
    d_short_name_loc_lang.arr[d_short_name_loc_lang.len]  = '\0';
    d_sex.arr[d_sex.len]                                  = '\0';
    d_short_name_full.arr[d_short_name_full.len]          = '\0';
    

 EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :d_patient_short_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :d_patient_short_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :d_patient_short_name1    := :d_patient_short_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       d_patient_short_name.arr[d_patient_short_name.len]  = '\0';
       d_patient_short_name1.arr[d_patient_short_name1.len]  = '\0';
}

fetch_physician_name()
{

    EXEC SQL OPEN SY_PHYSICIAN_MAST_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor SY_PHYSICIAN_MAST_CUR",0,"");

    d_physician_name.arr[0] = '\0';

    d_physician_name.len    = 0;

    EXEC SQL FETCH SY_PHYSICIAN_MAST_CUR
	     INTO  :d_physician_name;

    if(OERROR)
	err_mesg("FETCH failed on cursor SY_PHYSICIAN_MAST_CUR",0,"");

    d_physician_name.arr[d_physician_name.len] = '\0';

}


fetch_prt_grp_hdr_desc()
{

    d_hdr_long_desc.arr[0]           = '\0';
    d_hdr_loc_lang_short_desc.arr[0] = '\0';

    d_hdr_long_desc.len              = 0;
    d_hdr_loc_lang_short_desc.len    = 0;

    EXEC SQL OPEN PRT_GRP_HDR_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor PRT_GRP_HDR_CUR",0,"");

    EXEC SQL FETCH PRT_GRP_HDR_CUR INTO
	     :d_hdr_long_desc,
	     :d_hdr_loc_lang_short_desc;

    if(OERROR)
	err_mesg("FETCH failed on cursor PRT_GRP_HDR_CUR",0,"");

    d_hdr_long_desc.arr[d_hdr_long_desc.len]                     = '\0';
    d_hdr_loc_lang_short_desc.arr[d_hdr_loc_lang_short_desc.len] = '\0';


}

fetch_prt_grp_line_desc()
{

    d_line_long_desc.arr[0]           = '\0';
    d_line_loc_lang_short_desc.arr[0] = '\0';

    d_line_long_desc.len              = 0;
    d_line_loc_lang_short_desc.len    = 0;

    EXEC SQL OPEN PRT_GRP_LINE_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor PRT_GRP_LINE_CUR",0,"");

    EXEC SQL FETCH PRT_GRP_LINE_CUR INTO
	     :d_line_long_desc,
	     :d_line_loc_lang_short_desc;

    if(OERROR)
	err_mesg("FETCH failed on cursor PRT_GRP_LINE_CUR",0,"");

    d_line_long_desc.arr[d_line_long_desc.len]                     = '\0';
    d_line_loc_lang_short_desc.arr[d_line_loc_lang_short_desc.len] = '\0';


}

print_page_head()
{
    int i;
    static int g_first = 1;

    if(!g_first) 
	fprintf(fp,"\f");

    g_first = 0;

    for(i = 0; i < VSKIP_1; i++) fprintf(fp,"\n");

fprintf(fp,"%-30s%60s%7S        : %-3d\n",hosp_name.arr," ",loc_legend[30],pno);


/*fprintf(fp,"%-15s : %-18s%50s%14s : %10s - %10s\n",
	loc_legend[370],loc_legend[100]," ",loc_legend[400],nd_fm_date.arr,
						    nd_to_date.arr);*/

		 	init_date_temp_var();
			if (nd_fm_date.arr[0]!='\0')
			{
			  strcpy(date_convert.arr,nd_fm_date.arr);
			  fun_change_loc_date();
			fprintf(fp,"%-15s : %-18s%50s%14s : %10s - ",
				loc_legend[370],loc_legend[100]," ",loc_legend[400],date_convert.arr);
			}

		 	init_date_temp_var();
			if (nd_to_date.arr[0]!='\0')
			{
			  strcpy(date_convert.arr,nd_to_date.arr);
			  fun_change_loc_date();
			fprintf(fp,"%10s\n",date_convert.arr);
			}

// nd_sys_date instead of d_doc_date  vsk 17/10/1998
/*fprintf(fp,"%90s%4s           : %s\n\n"," ",loc_legend[260],nd_sys_date.arr);*/

		 	init_date_temp_var();
			if (nd_sys_date.arr[0]!='\0')
			{
			  strcpy(date_convert.arr,nd_sys_date.arr);
			  fun_change_loc_date();
			fprintf(fp,"%90s%4s           : %s\n\n"," ",loc_legend[260],date_convert.arr);
			}

fprintf(fp,"%10s : %-20s  %4s : %-30.30s  %-16.16s\n",loc_legend[110],
	    d_patient_id.arr,loc_legend[120], d_patient_short_name.arr,
	    d_short_name_loc_lang.arr);

if(strlen(d_patient_short_name1.arr) > 2)
{
 fprintf(fp,"%42s %s \n\n"," ",d_patient_short_name1.arr);
}
else
{
  fprintf(fp,"\n");
}

if(nd_episode_type == 'I' || nd_episode_type == 'D' ) // EPNH 28/10/2004
    fprintf(fp,"%8s   : %-8s    %4s : %-4s    %4s : %-4s  %3s : %-8s\n\n",loc_legend[130],
		d_episode_id_prt.arr,loc_legend[140], d_ward_code.arr,loc_legend[160], d_room_num.arr, 
		loc_legend[170],d_bed_num.arr);
else if(nd_episode_type == 'O' || nd_episode_type == 'E') // EPNH 28/10/2004
    fprintf(fp,"%11s   : %-8s    %8s : %-4s              %6s : %-4s \n\n",loc_legend[180],
		nd_episode_id.arr,loc_legend[190], nd_visit_id.arr,loc_legend[200], d_clinic_code.arr);
/*      Modified By Madesh -----------> */
if (strcmp(nd_stat.arr,"B")==0) 
{
    //fprintf(fp,"%11s   : %-4s / %d / %-4s\n",loc_legend[230], nd_doc_type.arr, nd_doc_num, d_doc_date.arr);
	 fprintf(fp,"%11s   : %-4s / %d",loc_legend[230], nd_doc_type.arr, nd_doc_num);

		 	init_date_temp_var();
			if (d_doc_date.arr[0]!='\0')
			{
			  strcpy(date_convert.arr,d_doc_date.arr);
			  fun_change_loc_date();
	          fprintf(fp," / %-4s\n",date_convert.arr);
			}	
	
    fprintf(fp,"%s :",loc_legend[510]);
    print_formated(bl_hdr_bill_tot_adjust_amt,0);
    fprintf(fp," %s :",loc_legend[240]);
    print_formated(bl_hdr_bill_tot_exempt_amt,0);
    fprintf(fp," %s :",loc_legend[250]);
    print_formated(bl_hdr_bill_tot_write_off_amt,0);
    fprintf(fp,"\n");
}
/*      <----------- Modified By Madesh  */             

fprintf(fp,"            %7s     %7s                                                                \n",loc_legend[270],loc_legend[270]);
fprintf(fp,"            %4s        %11s                                                         %3s              %s                %s\n",loc_legend[280],loc_legend[290],loc_legend[300],cur_str.arr,cur_str.arr);
fprintf(fp,"------------------------------------------------------------------------------------------------------------------------------------\n");

if(nd_episode_type == 'R')
    lno = 11;
else
    lno = 13;

}

print_break_hdr()
{

    int i;
    char s_amt[20];

    fetch_prt_grp_hdr_desc();

    if(lno > MAX_LINES)  print_next_page();

    for(i = 0; i < HSKIP_10; i++) fprintf(fp," ");
    fprintf(fp,"%-2s        %-40s  %10s%-16s\n",d_prt_grp_hdr_code.arr,
	       d_hdr_long_desc.arr, " ",d_hdr_loc_lang_short_desc.arr);

    lno++;
    /*
    g_prt_grp_line_code[0] = '\0';
    */

}

print_break_line()
{

    int i;
    char s_amt[20];

    fetch_prt_grp_line_desc();

    if(!g_first_break) {
       print_subtot();
       fprintf(fp,"\n\n");
       lno=lno+2;
    }

    if(strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr)) 
	print_break_hdr();
 
    g_first_break = 0;
    if(lno > MAX_LINES)  print_next_page();

    for(i = 0; i < HSKIP_10; i++) fprintf(fp," ");
    fprintf(fp,"      %-2s  %-40s  %10s%-16s  \n",d_prt_grp_line_code.arr,
		 d_line_long_desc.arr, " ",d_line_loc_lang_short_desc.arr);
    lno++;

}

print_line()
{
    int i;

    if(lno > MAX_LINES) print_next_page();

    for(i = 0; i < HSKIP_10; i++) fprintf(fp," ");
    fprintf(fp,"          %-10s  %-40s  %-16s  ", d_blng_serv_code.arr,
		d_blng_serv_desc.arr, d_blng_serv_desc_loc_lang.arr);
  /*
    if(equal(d_gross_amt,(double)0)) 
	print_formated((double)0,0);
    else
    {
	if (d_qty)
	   print_formated(d_gross_amt/d_qty,0);
	else
	   print_formated(d_gross_amt,0);
    }
  */

if (strcmp(d_ins_pkg_pat_ind.arr,"N")==0)
    fprintf(fp,"  ");
   else
    fprintf(fp,"%1s ",d_ins_pkg_pat_ind.arr); 
 
	fprintf(fp,"%9.2f",d_qty);
    
	print_formated(d_gross_amt, 0);

}

print_next_page()
{
    int i;

    pno++;

    print_page_head();

}

print_balance_due()
{

    int i;
    int no_of_lines;
    char out_str[10][133];
    void calc_disc();

    for(i=0; i<10; i++) out_str[i][0] = '\0';
	
	fprintf(fp,"   ");
    for(i = 0; i < 18; i++) fprintf(fp,"-"); fprintf(fp,"\n");

    if(lno+6 > MAX_LINES) print_next_page();

    
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%9s                                       ",loc_legend[320]);
    print_formated(g_cum_amt,1);


/*    Modified By Madesh   --------------> */
	calc_disc();

    if ( d_man_disc !=0 ) {
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                            ",loc_legend[330]);
    print_formated(d_man_disc,1);
    g_cum_amt -= d_man_disc; 
    }

    if ( d_dep_amt !=0 ) {
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                          ",loc_legend[340]);
    print_formated(d_dep_amt,1);
    g_cum_amt -= d_dep_amt; 
    }

    if ( d_pre_amt !=0 ) {
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                       ",loc_legend[350]);
    print_formated(d_pre_amt,1);
    g_cum_amt -= d_pre_amt; 
    }
    
/*
    if ( d_bill_amt !=0 ) {
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                      ",loc_legend[210]);
    print_formated(d_bill_amt,1);
    g_cum_amt -= d_bill_amt; 
    }
*/
/*   <------------- Modified By Madesh    */      


/*    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                               ",loc_legend[490]);
    print_formated(tot_disc_amt,1);
    g_cum_amt -= tot_disc_amt;
*/
/*
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                             ",loc_legend[390]);
    print_formated(d_prepay_adj_amt,1);
    g_cum_amt -= d_prepay_adj_amt;

    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                            ",loc_legend[70]);
    print_formated(g_cum_amt,1);

    for(i = 0; i < HSKIP_13; i++) fprintf(fp," ");
    for(i = 0; i < 18; i++) fprintf(fp,"-"); fprintf(fp,"\n");
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                         ",loc_legend[80]);
    print_formated(d_prv_outst_amt,1);
    g_cum_amt += d_prv_outst_amt;
*/

    for(i = 0; i < HSKIP_13; i++) fprintf(fp," ");
	fprintf(fp,"   ");
    for(i = 0; i < 18; i++) fprintf(fp,"-"); fprintf(fp,"\n");
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s                               ",loc_legend[360]);
    print_formated(g_cum_amt,1);

    for(i = 0; i < HSKIP_13; i++) fprintf(fp," ");
	fprintf(fp,"   ");
    for(i = 0; i < 18; i++) fprintf(fp,"="); fprintf(fp,"\n");

    g_cum_amt = (g_cum_amt < 0) ? g_cum_amt * -1 : g_cum_amt;
/*
    if(equal(g_cum_amt,0.00)) 
	no_of_lines=0;

*/

/****** MODIFIED BY VENKAT ON 27/04/1998 FOR PRINTING SUB CURRENCY ****/

no_of_lines = print_in_words(g_cum_amt,LENGTH_WORDS,sub_cur_str.arr,out_str);

/**********************************************************************/


   if (g_cum_amt != 0)
    fprintf(fp,"%-6s",cur_str.arr);

    for (i =0;i<no_of_lines;i++)
	fprintf(fp,"%s\n      ",out_str[i]);

}

print_subtot()
{
    int i;

    fprintf(fp,"    ");
    print_formated(g_sub_tot,1);

    for(i = 0; i < HSKIP_12; i++) fprintf(fp," ");
	fprintf(fp,"  ");
    for(i = 0; i < 15; i++) fprintf(fp,"-");

/*
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"%s             :  ",loc_legend[380]);
    print_formated(g_sub_tot,1);
    fprintf(fp,"\n");
*/
    g_sub_tot = 0;
    g_print_subtot = 0;
    lno += 1;
}


print_pkg()
{
    int i;



	fprintf(fp,"\n");

	

	fprintf(fp,"%s",loc_legend[420]);
    fprintf(fp,"\n");

	fprintf(fp,"----------------");
    fprintf(fp,"\n");

	fprintf(fp,"%12s / %4s : %-10s %-42s",loc_legend[430],loc_legend[220],v_package_code.arr,v_pkg_long_desc.arr);

    fprintf(fp,"\n");
    fprintf(fp,"\n");
   

	if (v_ins_amt > 0) 
       {fprintf(fp,"%10s :%-10s/%-42s   : ",loc_legend[440],w_cust_code.arr,v_cust_long_name.arr);
	    fprintf(fp," ");
        print_formated(v_ins_amt,1);
		fprintf(fp,"\n");
	   }

	if (v_pat_amt > 0) 
       { if (w_cust_code.arr[0]  != '\0' && v_ins_pkg_pat_ind.arr[0]  == 'P')		
	         {fprintf(fp,"%10s :%-10s/%-42s   : ",loc_legend[440],w_cust_code.arr,v_cust_long_name.arr);
			 fprintf(fp," ");
			 }
		 else 
			 {fprintf(fp,"%10s :%7s  ",loc_legend[440],loc_legend[450]);	 
			  fprintf(fp,"                                               :  ");
		     }
		print_formated(v_pat_amt,1);
		fprintf(fp,"\n");
	   }


/*
    if (v_ins_amt > 0) 
       {fprintf(fp,"%s     : ",loc_legend[460]);
	    fprintf(fp," ");
        print_formated(v_ins_amt,1);
		fprintf(fp,"\n");
	   }

	if (v_pat_amt > 0) 
       {fprintf(fp,"%s      : ",loc_legend[470]);
	    fprintf(fp," ");
		print_formated(v_pat_amt,1);
		fprintf(fp,"\n");
	   } */

		  
/*
	 g_cum_amt = g_cum_amt + v_pat_amt + v_ins_amt;

  if (v_ins_amt >0 || v_pat_amt >0)
	 {if (g_cum_amt > 0) 
       {fprintf(fp,"%s  : ",loc_legend[480]);
	    fprintf(fp," ");
		print_formated(g_cum_amt,1);
	   }
	  }

	*/

	   
    //r(i = 0; i < HSKIP_12 + 1; i++) fprintf(fp," ");
    //for(i = 0; i < 15; i++) fprintf(fp,"-");

    
    lno += 1;
}


print_formated(loc_amount,flg)
double loc_amount;
int flg;
{
   char s_amt[20];

   sprintf(s_amt,"%15.2f",loc_amount);
   format_amt(s_amt);

   if (loc_amount < 0)
      fprintf(fp," %15s",s_amt);
   else
      fprintf(fp," %15s ",s_amt);
 
   if(flg)
       fprintf(fp,"\n");
}


/*   Added By Madesh  ------------->  */  
void calc_disc()
{
	if (strcmp(nd_stat.arr,"B")==0) 
	{
		EXEC SQL SELECT NVL(SERV_DISC_AMT,0)+NVL(MAN_DISC_AMT,0)+NVL(OVERALL_DISC_AMT,0),NVL(DEPOSIT_ADJ_AMT,0),
				  NVL(PREPAY_ADJ_AMT,0),NVL(BILL_TOT_AMT,0) - NVL(BILL_TOT_OUTST_AMT,0) INTO
				  d_man_disc,d_dep_amt,d_pre_amt,d_bill_amt
				 FROM BL_BILL_HDR 
				 WHERE DOC_TYPE_CODE = :nd_doc_type and
				     operating_facility_id = :nd_operating_facility_id and
				 	DOC_NUM       = :nd_doc_num;
//					   to_char(DOC_NUM)       = :nd_doc_num;
					   
    if(OERROR)
	err_mesg("SELECT failed on BL_BILL_HDR",0,"");
	}
	else 
	{
		d_man_disc=0;
		d_bill_amt=0;
		/*-- for unbilled trx, disc should come from folio. Only for 
		     I and all case prepayment and deposits should come. */
		d_man_disc = tot_disc_amt;

		if ((nd_ins_pat == 'A')||(nd_ins_pat == 'I'))
		{
		if (nd_episode_type == 'O' || nd_episode_type == 'E' ) // EPNH 28/10/2004
		{
		EXEC SQL SELECT /* NVL(TOT_BUS_DISC_AMT,0)+NVL(TOT_BUS_MAN_DISC_AMT,0), blenh vsk */
				NVL(TOT_UNADJ_DEP_AMT,0),
				NVL(TOT_UNADJ_PREP_AMT,0) 
				 INTO /* d_man_disc, */ d_dep_amt,d_pre_amt FROM
			 BL_VISIT_FIN_DTLS
				 WHERE EPISODE_ID = :nd_episode_id and
					   VISIT_ID   = :nd_visit_id and
					   EPISODE_TYPE = :nd_episode_type
					   and operating_facility_id = :nd_operating_facility_id;
	if(OERROR)
	err_mesg("SELECT failed on BL_VISIT_FIN_DTLS",0,"");
		}         
		if (nd_episode_type == 'I' || nd_episode_type == 'D' ) // EPNH 28/10/2004
		{
		EXEC SQL SELECT /* NVL(TOT_BUS_DISC_AMT,0)+NVL(TOT_BUS_MAN_DISC_AMT,0), blenh vsk*/
				NVL(TOT_UNADJ_DEP_AMT,0),
				NVL(TOT_UNADJ_PREP_AMT,0) 
				 INTO /* d_man_disc,*/ d_dep_amt,d_pre_amt FROM
			 BL_EPISODE_FIN_DTLS
				 WHERE EPISODE_ID = :nd_episode_id and
				       EPISODE_TYPE = :nd_episode_type
		   		   and operating_facility_id = :nd_operating_facility_id;
	if(OERROR)
	err_mesg("SELECT failed on BL_EPISODE_FIN_DTLS",0,"");
		}
		}         
		if (nd_episode_type == 'R')
		{
		EXEC SQL SELECT NVL(TOT_UNADJ_DEP_REF_AMT,0),NVL(TOT_UNADJ_PREP_REF_AMT,0) 
				 INTO d_dep_amt,d_pre_amt FROM
			 BL_PATIENT_FIN_DTLS
				 WHERE PATIENT_ID = :d_patient_id;
	if(OERROR)
	err_mesg("SELECT failed on BL_EPISODE_FIN_DTLS",0,"");
		}           
	 }      
		
}       
				
fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRCASPR.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}		  
/*   <-----------------Added By Madesh         */                                         

init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}


fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}
get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
	  
 
	:nd_loc_date :=sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/RRRR HH24:MI'),:p_language_id);  

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");
}

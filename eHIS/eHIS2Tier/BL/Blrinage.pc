/************************************************************************/
/* OCS MEDICOM VER 4.1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRINAGE.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 15-AUG-1993                                  */
/* DATE MODIFIED         : 14-DEC-1995                                   */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                                */
/*                                                                      */ 
/*  TABLE DETAILS                                                        */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                      
#include <stdio.h>    
#include <string.h>
#include "bl.h"
  
#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define INIT_MESG "Report Generation In Progress"

/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [91],
			nd_pwd                                     [91],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
            nd_from_adm_no                             [9],
            nd_to_adm_no                               [9],
            nd_age_date                                [12],
            nd_age_date_prn                            [12],
            nd_print_tel_no_yn                         [2],
            row_id                                     [20],
			nd_operating_facility_id                   [3];

  
    int     nd_age_slot1, nd_age_slot2, nd_age_slot3, nd_age_slot4;

   VARCHAR bl_ip_open_patient_id                       [21],
           bl_ip_open_episode_id                       [9],

           bl_ip_admission_date_time                   [20],  
           d_short_name_full                           [61],
           bl_patient_name_loc_lang                    [61],
           bl_patient_name                             [61],
		   bl_patient_nam1                             [61],
           bl_res_tel_num                              [19],
           bl_other_contact_num                        [19],
           bl_office_tel_num                           [19],
           bl_contact_tel_num                          [19];

   VARCHAR bl_pat_org_doc_type_code                    [7],
           bl_pat_org_doc_num                          [9],
           bl_pat_org_doc_date                         [13],
           bl_pat_doc_outst_amt_prn                    [23];

  double   bl_pat_doc_outst_amt,
           bl_doc_outst_amt,   
           bl_pat_doc_amt,
           bl_tot_bill_paid_amt;

  int      bl_pat_sign_amt,
           bl_pat_date_diff;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

  double adm_amt_tot,
         adm_amt_slot1,
         adm_amt_slot2,
         adm_amt_slot3,
         adm_amt_slot4,
         adm_amt_slot5,
		 
         amt_slot1_db,
         amt_slot2_db,
         amt_slot3_db,
         amt_slot4_db,
         amt_slot5_db,


         grand_amt_tot,
         grand_amt_slot1,
         grand_amt_slot2,
         grand_amt_slot3,
         grand_amt_slot4,
         grand_amt_slot5;

  char   amt_slot1 [23],
         amt_slot2 [23],
         amt_slot3 [23],
         amt_slot4 [23],
         amt_slot5 [23];

  int    tot_admissions = 0;

  int    lctr = 0,pctr = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    double bl_bill_paid_rem_amt, bl_pat_outst_amt ; 
    int rec_ctr = 0;

    if (argc < 4)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRINAGE");
/*
    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }
*/
	 strcpy(nd_pwd.arr,argv[1]);
	 nd_pwd.len = strlen(nd_pwd.arr);

	 EXEC sql connect :nd_pwd;
	  
	  if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }
	set_meduser_role(); 
    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    start_prog_msg();

    
    fetch_prog_param();
	
    declare_cur();
	
	fetch_hosp_name();
	
    open_file();
    
    open_ip_open_episode();
    

    while(fetch_ip_open_episode())
    {
       fetch_ip_episode();
       fetch_financial_dtl();
       bl_bill_paid_rem_amt = bl_tot_bill_paid_amt;
         
       open_pat_ledger();

       adm_amt_tot   = 0;
       adm_amt_slot1 = 0;
       adm_amt_slot2 = 0;
       adm_amt_slot3 = 0;
       adm_amt_slot4 = 0;
       adm_amt_slot5 = 0;
       rec_ctr = 0;

       while(fetch_pat_ledger())
       {
           bl_pat_outst_amt = bl_pat_doc_amt;
           bl_doc_outst_amt = bl_pat_outst_amt;
           if (bl_bill_paid_rem_amt > 0) 
           {
             if (bl_pat_outst_amt < bl_bill_paid_rem_amt) 
             {
               bl_doc_outst_amt = 0;
               bl_bill_paid_rem_amt -= bl_pat_outst_amt;
              }
             else
             {
               bl_doc_outst_amt = bl_pat_outst_amt-bl_bill_paid_rem_amt;
               bl_bill_paid_rem_amt -= bl_pat_outst_amt;
             }
           }
           
		   // update_inhouse_bill_outst();

           if (bl_doc_outst_amt != 0)
           {
             if (!rec_ctr) print_rec(0);
             rec_ctr++;
             process_det(); 
             print_rec(1);
           }
       }
       if (rec_ctr)
           print_adm_tot();
    }

    print_grand_tot();

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

fetch_prog_param()
{
   nd_from_adm_no.arr[0]     = '\0';
   nd_to_adm_no.arr[0]       = '\0';
   nd_age_date.arr[0]        = '\0';
   nd_print_tel_no_yn.arr[0] = '\0';

   nd_from_adm_no.len      = 0;
   nd_to_adm_no.len        = 0;
   nd_age_date.len         = 0;
   nd_print_tel_no_yn.len  = 0;

   nd_age_slot1            = 0;
   nd_age_slot2            = 0;
   nd_age_slot3            = 0;
   nd_age_slot4            = 0;

/*-- Y2K correction. Format introduced for 'FROM AND TO' Date prn variable
     as DD/MM/YYYY in form itself. So, no need to format again below also
	 VSK 15/11/1999 */

   EXEC SQL SELECT   OPERATING_FACILITY_ID,
					 PARAM1,PARAM2,PARAM3,PARAM3,
//                   TO_CHAR(TO_DATE(PARAM3,'DD-MON-YY'),'DD/MM/YYYY'),
                   PARAM4,PARAM5,PARAM6,PARAM7,PARAM8
              INTO  :nd_operating_facility_id,
					:nd_from_adm_no,
                   :nd_to_adm_no,
                   :nd_age_date,
                   :nd_age_date_prn,
                   :nd_age_slot1,
                   :nd_age_slot2,
                   :nd_age_slot3,
                   :nd_age_slot4,
                   :nd_print_tel_no_yn
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   nd_from_adm_no.arr[nd_from_adm_no.len]         = '\0';
   nd_to_adm_no.arr[nd_to_adm_no.len]             = '\0';
   nd_age_date.arr[nd_age_date.len]               = '\0';
   nd_print_tel_no_yn.arr[nd_print_tel_no_yn.len] = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

     EXEC SQL DECLARE IP_OPEN_EPISODE_CUR CURSOR FOR
                SELECT A.OPEN_EPISODE_ID,
                       A.PATIENT_ID
                FROM  BL_EPISODE_FIN_DTLS B,
                      IP_OPEN_EPISODE A
                WHERE A.OPEN_EPISODE_ID BETWEEN
                      NVL(:nd_from_adm_no,0) AND NVL(:nd_to_adm_no,99999999)
				AND   B.EPISODE_TYPE  in ('I','D')  
                AND   NVL(B.DISCHARGE_BILL_GEN_IND,'N') != 'Y'
				AND   B.OPERATING_FACILITY_ID  = :nd_operating_facility_id
				AND   A.FACILITY_ID  =  :nd_operating_facility_id
				AND   A.OPEN_EPISODE_ID = B.EPISODE_ID
				AND   A.PATIENT_ID      = B.PATIENT_ID
                AND   NVL(B.SETTLEMENT_IND,'Z') = 'C'
                ORDER BY A.OPEN_EPISODE_ID;

     EXEC SQL DECLARE IP_EPISODE_CUR CURSOR FOR
               SELECT TO_CHAR(ADMISSION_DATE_TIME,'DD/MM/YYYY')
               FROM   IP_EPISODE
               WHERE  EPISODE_ID = :bl_ip_open_episode_id
			   AND    FACILITY_ID = :nd_operating_facility_id;

/*-- Y2K correction :nd_age_date format changed from DD-MON-YY to 
     DD/MM/YYYY VSK 13/11/1999 */

     EXEC SQL DECLARE BL_INHOUSE_BILL_CUR CURSOR FOR
               SELECT A.DOC_TYPE_CODE,
                      A.DOC_NUMBER,
                      TO_CHAR(A.DOC_DATE,'DD/MM/YYYY'),
                      TO_CHAR(A.DOC_OUTST_AMT,'999,999,990.99'),
                      SIGN(NVL(A.DOC_OUTST_AMT,0)),
                      CEIL(NVL(TO_DATE(:nd_age_date,'DD/MM/YYYY'),SYSDATE) 
                           - A.DOC_DATE),  
                      NVL(A.DOC_AMT,0) + NVL(B.PREPAY_ADJ_AMT,0) ,
                      A.ROWID
                 FROM BL_INHOUSE_BILL A, BL_BILL_HDR B
                WHERE A.DOC_TYPE_CODE = B.DOC_TYPE_CODE
				AND A.DOC_NUMBER    = B.DOC_NUM
				AND A.OPERATING_FACILITY_ID  = :nd_operating_facility_id
				AND B.OPERATING_FACILITY_ID  = :nd_operating_facility_id
				AND A.EPISODE_TYPE in ('I','D')  
                  AND A.PATIENT_ID = :bl_ip_open_patient_id
                  AND A.EPISODE_ID = :bl_ip_open_episode_id
                  AND NVL(A.DOC_DATE,TO_DATE(:nd_age_date,'DD/MM/YYYY')) 
									<= TO_DATE(:nd_age_date,'DD/MM/YYYY')
                AND NVL(A.DOC_OUTST_AMT,0) > 0          
                ORDER BY A.DOC_DATE, A.DOC_TYPE_CODE, A.DOC_NUMBER;

    EXEC SQL DECLARE BL_PAT_DTLS_CUR CURSOR FOR
              SELECT SUBSTR(A.SHORT_NAME_LOC_LANG,1,16),
                     /*substr(A.SHORT_NAME,1,30),
					 substr(A.SHORT_NAME,31,60),*/
                      a.short_name,
                     A.RES_TEL_NUM,
                     A.OTHER_CONTACT_NUM,
                     B.OFFICE_TEL_NUM,
                     B.CONTACT_TEL_NUM
                FROM MP_PATIENT_MAST A, MP_PAT_OTHER_DTLS B
               WHERE A.PATIENT_ID = :bl_ip_open_patient_id
                 AND A.PATIENT_ID = B.PATIENT_ID;  

    EXEC SQL DECLARE BL_EPISODE_FIN_CUR CURSOR FOR
              SELECT NVL(TOT_BILLS_PAID_AMT,0) +
                     NVL(TOT_PREP_PAID_AMT,0)
                FROM BL_EPISODE_FIN_DTLS
               WHERE EPISODE_TYPE in ('I','D')   
                 AND EPISODE_ID   = :bl_ip_open_episode_id
				 and OPERATING_FACILITY_ID=:nd_operating_facility_id;

}

open_ip_open_episode()
{
    EXEC SQL OPEN IP_OPEN_EPISODE_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor IP_OPEN_EPISODE_CUR",0,"");
}

open_ip_episode()
{
    EXEC SQL OPEN IP_EPISODE_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor IP_EPISODE_CUR",0,"");
}

open_pat_ledger()
{
    EXEC SQL OPEN BL_INHOUSE_BILL_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_INHOUSE_BILL_CUR",0,"");
}

fetch_ip_open_episode()
{
   bl_ip_open_episode_id.len     = 0;
   bl_ip_open_patient_id.len     = 0;

    EXEC SQL FETCH IP_OPEN_EPISODE_CUR
              INTO :bl_ip_open_episode_id,
                   :bl_ip_open_patient_id;

    if (OERROR)
         err_mesg("FETCH failed on cursor IP_OPEN_EPISODE_CUR",0,"");

    bl_ip_open_episode_id.arr[bl_ip_open_episode_id.len] = '\0';
    bl_ip_open_patient_id.arr[bl_ip_open_patient_id.len] = '\0';

    return(LAST_ROW?0:1);
}

fetch_ip_episode()
{
     open_ip_episode();

bl_ip_admission_date_time.arr[0]            = '\0';
bl_ip_admission_date_time.len               = 0;

     EXEC SQL FETCH IP_EPISODE_CUR
               INTO :bl_ip_admission_date_time;

     if (OERROR)
         err_mesg("FETCH failed on cursor IP_EPISODE_CUR",0,"");

bl_ip_admission_date_time.arr[bl_ip_admission_date_time.len]             = '\0';

return(ROW_COUNT);
}

fetch_financial_dtl()
{
bl_tot_bill_paid_amt     = 0;

     EXEC SQL OPEN BL_EPISODE_FIN_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor BL_EPISODE_FIN_CUR",0,"");

     EXEC SQL FETCH BL_EPISODE_FIN_CUR
               INTO :bl_tot_bill_paid_amt ;   
 
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_EPISODE_FIN_CUR",0,"");
     
}

update_inhouse_bill_outst()
{
/*   row_id.arr[0]     = '\0';
     row_id.len        = 0;    */

     EXEC SQL SELECT ROWID
                into :row_id
                FROM BL_INHOUSE_BILL       
                WHERE ROWID = :row_id   
                 FOR UPDATE OF DOC_OUTST_AMT;

     if (OERROR)
         err_mesg("SELECT failed on table BL_INHOUSE_BILL",0,"");

     if (NOT_FOUND)
         err_mesg("Record not found in BL_INHOUSE_BILL",0,"");

     row_id.arr[row_id.len] = '\0';

     EXEC SQL UPDATE BL_INHOUSE_BILL 
                 SET DOC_OUTST_AMT = :bl_doc_outst_amt   
               WHERE ROWID = :row_id;

      if (OERROR)
         err_mesg("UPDATE failed on table BL_INHOUSE_BILL",0,"");
}

fetch_pat_ledger()
{

bl_pat_org_doc_type_code.arr[0]                                   = '\0';
bl_pat_org_doc_num.arr[0]                                         = '\0';
bl_pat_org_doc_date.arr[0]                                        = '\0';
bl_pat_doc_outst_amt_prn.arr[0]                                   = '\0';
row_id.arr[0]                                                     = '\0';

bl_pat_org_doc_type_code.len                                      = 0;
bl_pat_org_doc_num.len                                            = 0;
bl_pat_org_doc_date.len                                           = 0;
bl_pat_doc_outst_amt_prn.len                                      = 0;
row_id.len                                                        = 0;

bl_pat_doc_outst_amt                                              = 0;
bl_pat_sign_amt                                                   = 0;
bl_pat_date_diff                                                  = 0;
bl_pat_doc_amt                                                    = 0;

     EXEC SQL FETCH BL_INHOUSE_BILL_CUR
               INTO :bl_pat_org_doc_type_code,
                    :bl_pat_org_doc_num,
                    :bl_pat_org_doc_date,
                    :bl_pat_doc_outst_amt_prn,
                    :bl_pat_sign_amt,
                    :bl_pat_date_diff,
                    :bl_pat_doc_amt,
                    :row_id;
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_INHOUSE_BILL_CUR",0,"");

bl_pat_org_doc_type_code.arr[bl_pat_org_doc_type_code.len]               = '\0';
bl_pat_org_doc_num.arr[bl_pat_org_doc_num.len]                           = '\0';
bl_pat_org_doc_date.arr[bl_pat_org_doc_date.len]                         = '\0';
bl_pat_doc_outst_amt_prn.arr[bl_pat_doc_outst_amt_prn.len]               = '\0';
row_id.arr[row_id.len]                                                   = '\0';

    return(LAST_ROW?0:1);
}

fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_DTLS_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_DTLS_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_nam1.arr[0]                    = '\0';
   bl_res_tel_num.arr[0]                     = '\0';
   bl_other_contact_num.arr[0]               = '\0';
   bl_office_tel_num.arr[0]                  = '\0';
   bl_contact_tel_num.arr[0]                 = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_nam1.len                       = 0;
   bl_res_tel_num.len                        = 0;
   bl_other_contact_num.len                  = 0;
   bl_office_tel_num.len                     = 0;
   bl_contact_tel_num.len                    = 0;

    EXEC SQL FETCH BL_PAT_DTLS_CUR
              INTO :bl_patient_name_loc_lang,
                   :bl_patient_name,
				   :bl_res_tel_num,   
                   :bl_other_contact_num,
                   :bl_office_tel_num,
                   :bl_contact_tel_num;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_DTLS_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len]                   = '\0';
	bl_patient_nam1.arr[bl_patient_nam1.len]                   = '\0';
    bl_res_tel_num.arr[bl_res_tel_num.len]                     = '\0';
    bl_other_contact_num.arr[bl_other_contact_num.len]         = '\0';
    bl_office_tel_num.arr[bl_office_tel_num.len]               = '\0';
    bl_contact_tel_num.arr[bl_contact_tel_num.len]             = '\0';
    d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
   EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_nam1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_nam1    := :bl_patient_nam1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_nam1.arr[bl_patient_nam1.len]  = '\0';

}

print_rec(ind)
int ind;
{
   if (lctr > 53)
       print_head();

  fetch_dtls();

  if (ind == 0)
  {
      tot_admissions++;
      fprintf(fp,"%8s %-18s %-20s %-20.20s %-30.30s\n",
           bl_ip_open_episode_id.arr,
           bl_ip_admission_date_time.arr,
           bl_ip_open_patient_id.arr,
           bl_patient_name_loc_lang.arr,
           bl_patient_name.arr);
     lctr+=1;

    if(strlen(bl_patient_nam1.arr) > 2)
	{
	fprintf(fp,"%69s %s \n"," ",bl_patient_nam1.arr);
	lctr++;
	}


     if (nd_print_tel_no_yn.arr[0] == 'Y')
     {
        if (lctr > 53)
           print_head();

        fprintf(fp,"(Res)%-18s (Oth)%-18s (Off)%-18s (Kin)%-18s\n",
              bl_res_tel_num.arr,
              bl_other_contact_num.arr,
              bl_office_tel_num.arr,
              bl_contact_tel_num.arr);
        lctr+=1;
     }
     fprintf(fp,"\n");
     lctr++;
  }
  else
  {
      fprintf(fp,"        %-6s %8s %-10s",
	  // %s %s %s %s %s %s\n",
              bl_pat_org_doc_type_code.arr,
              bl_pat_org_doc_num.arr,
              bl_pat_org_doc_date.arr);
			  print_formated(bl_doc_outst_amt);
              //bl_pat_doc_outst_amt_prn.arr,
              print_formated(amt_slot1_db);
              print_formated(amt_slot2_db);
              print_formated(amt_slot3_db);
              print_formated(amt_slot4_db);
              print_formated(amt_slot5_db);
	 fprintf(fp,"\n");
     lctr++;
  }
  fflush(fp);
}

print_adm_tot()
{
   if (lctr > 50)
       print_head();

      fprintf(fp,"\n                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n");
      fprintf(fp,"                      Total       ");
      print_formated(adm_amt_tot); //fprintf(fp," ");
      print_formated(adm_amt_slot1);//fprintf(fp," ");
      print_formated(adm_amt_slot2);//fprintf(fp," ");
      print_formated(adm_amt_slot3);//fprintf(fp," ");
      print_formated(adm_amt_slot4);//fprintf(fp," ");
      print_formated(adm_amt_slot5);fprintf(fp,"\n");
      fprintf(fp,"                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n\n");
      lctr +=5;
      grand_amt_tot   += adm_amt_tot;
      grand_amt_slot1 += adm_amt_slot1;
      grand_amt_slot2 += adm_amt_slot2;
      grand_amt_slot3 += adm_amt_slot3;
      grand_amt_slot4 += adm_amt_slot4;
      grand_amt_slot5 += adm_amt_slot5;

}
print_grand_tot()
{
   if (lctr > 50)
       print_head();

      fprintf(fp,"\n              Number of Admissions ");
      fprintf(fp,"   %12d\n",tot_admissions);
      fprintf(fp,"\n                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n");
      fprintf(fp,"              Grand Total         ");      print_formated(grand_amt_tot);//fprintf(fp," ");
      print_formated(grand_amt_slot1);//fprintf(fp," ");
      print_formated(grand_amt_slot2);//fprintf(fp," ");
      print_formated(grand_amt_slot3);//fprintf(fp," ");
      print_formated(grand_amt_slot4);//fprintf(fp," ");
      print_formated(grand_amt_slot5);fprintf(fp,"\n");
      fprintf(fp,"                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n\n");
      lctr +=5;

}
  
process_det()
{
   int age_days = 0;

      age_days = bl_pat_date_diff;

      adm_amt_tot += bl_doc_outst_amt;  /* bl_pat_doc_outst_amt; */

      strcpy(amt_slot1,"               ");
      strcpy(amt_slot2,"               ");
      strcpy(amt_slot3,"               ");
      strcpy(amt_slot4,"               ");
      strcpy(amt_slot5,"               ");

      EXEC SQL SELECT TO_CHAR(:bl_doc_outst_amt,'999,999,999.99')
      INTO :bl_pat_doc_outst_amt_prn
      FROM DUAL;
     
      if (OERROR) err_mesg("SELECT failed on table DUAL",0,"");
      
      if (age_days <= nd_age_slot1)
      {
            strcpy(amt_slot1,bl_pat_doc_outst_amt_prn.arr);  
			amt_slot1_db = bl_doc_outst_amt;
            adm_amt_slot1   += bl_doc_outst_amt;  /* bl_pat_doc_outst_amt;*/
      }
      else if (age_days >= nd_age_slot1 + 1 && age_days <= nd_age_slot2)
      {
            strcpy(amt_slot2,bl_pat_doc_outst_amt_prn.arr);
			amt_slot2_db = bl_doc_outst_amt;
            adm_amt_slot2   += bl_doc_outst_amt;  /* bl_pat_doc_outst_amt;*/
      }
      else if (age_days >= nd_age_slot2 + 1 && age_days <= nd_age_slot3)
      {
            strcpy(amt_slot3,bl_pat_doc_outst_amt_prn.arr);
			amt_slot3_db = bl_doc_outst_amt;
            adm_amt_slot3   += bl_doc_outst_amt;  /* bl_pat_doc_outst_amt;*/
      }
      else if (age_days >= nd_age_slot3 + 1 && age_days <= nd_age_slot4)
      {
            strcpy(amt_slot4,bl_pat_doc_outst_amt_prn.arr);
			amt_slot4_db = bl_doc_outst_amt;
            adm_amt_slot4   += bl_doc_outst_amt;  /* bl_pat_doc_outst_amt;*/
      }
      else 
      {
            strcpy(amt_slot5,bl_pat_doc_outst_amt_prn.arr);
			amt_slot5_db = bl_doc_outst_amt;
            adm_amt_slot5   += bl_doc_outst_amt;  /* bl_pat_doc_outst_amt;*/
      }
}

end_of_rep()
{
fprintf(fp,"\n\n                                                      ***  END OF REPORT ***\n");
fflush(fp);
}

open_file()
{
char filename[30];
	strcpy(filename,WORKING_DIR);
    strcat(filename,"blrinage.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrinage.lis");
       proc_exit();
    }
    print_title();
    print_head();
}

print_title()
{
fprintf(fp,
"MDL : BL                                         %-30s                                        %-18s\n",
hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                        %-50s                                  PAGE : %4d\n",
"BLRINAGE","       AGEING ANALYSIS REPORT OF INHOUSE BILLS",
++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
fprintf(fp,"                  ADMISSION NO    FROM : %s\n",nd_from_adm_no.arr);
fprintf(fp,"                                   TO  : %s\n\n",nd_to_adm_no.arr);
fprintf(fp,"                  AGEING CUT OFF DATE  : %s\n\n",nd_age_date_prn.arr);
fprintf(fp,"               PRINT TELEPHONE NO(S) ? : %1s\n\n",nd_print_tel_no_yn.arr);

}
print_head()
{
fprintf(fp,
"\fMDL : BL                                         %-30s                                        %-18s\n",
hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                        %-50s                                  PAGE : %4d\n",
"BLRINAGE","       AGEING ANALYSIS REPORT OF INHOUSE BILLS",
++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,
"ADM  NO. ADM DATE   PATIENT NO LOCAL   NAME     NAME\n");
fprintf(fp,
"        BILL NUMBER     BILL DATE        OUTST AMT    %-3d-%3d DAYS    %-3d-%3d DAYS    %-3d-%3d DAYS    %-3d-%3d DAYS      > %-3d DAYS\n",
    0,nd_age_slot1,
    nd_age_slot1+1,nd_age_slot2,
    nd_age_slot2+1,nd_age_slot3,
    nd_age_slot3+1,nd_age_slot4,
    nd_age_slot4+1);    
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 10;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM  SY_ACC_ENTITY
			   WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}
/*
print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
//      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
//      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}

*/

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
        //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
                //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }
}
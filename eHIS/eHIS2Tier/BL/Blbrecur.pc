/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLBRECUR.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 27-AUG-1993                                  */   
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/* UPGRADED TO 4.1                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include <gl.h>
#include <bl.h>

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
/*
#define DEBUG 0
*/
#define VIEW_LOG_FILE    1

extern double l_floor(),l_ceil();


EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [40],
			nd_user				                       [31],
            nd_session_id                              [26],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],

			nd_ws_no			 					   [31],
			nd_facility_id  						   [3],

            nd_process_date                            [16],
            nd_service_time                            [21],
            nd_day_type                                [3],
            nd_time_type                               [3],
			nd_panel_code			                   [11],
            nd_sysdate                                 [21],
	        nd_pwd 				                       [95],  
	        dummy                                      [2],
	        m_service_panel_ind                        [2];         /* Added on 31-JAN-2007 */


	   VARCHAR  m_str							[21],
				m_charge_based_yn				[2],	
				m_excl_incl_action_ind			[2],
				m_action_reason_code			[5],
				m_language_id					[3],
				m_error_level					[10],
				m_sys_message_id				[21],
				m_charged_yn					[2],		
				m_pat_billed_yn                 [2];


   VARCHAR  nd_error_id				       [10],
	    nd_error_code		               [11],
	    nd_error_text		               [100];

   VARCHAR bl_param_prt_grp_hdr_code                   [6],
           bl_param_prt_grp_line_code                  [4];

   VARCHAR bl_hdr_recur_trn_ref                        [21],
           bl_hdr_recur_trn_date                       [13],
           bl_hdr_episode_type                         [2],
           bl_hdr_episode_id                           [9],
           bl_hdr_patient_id                           [21],
	       bl_reln_code								   [30];


   VARCHAR bl_line_blng_serv_code                      [11],
	       nd_bl_serv_code			                   [11];

   VARCHAR blng_serv_code_old                          [11],
           blng_serv_code_spl                          [11];

   double  bl_line_charge_amt;

   char    p_levy_appl_yn;

  VARCHAR  p_char1[100],
	   p_char2[100];
	   
  double   p_levy_amt,	
	   p_num2;


   double  bl_line_serv_qty;

   VARCHAR bl_adt_blng_class_code                      [3],
           bl_adt_to_physician_id                      [16],
           bl_adt_to_bed_class_code                    [3],
           bl_adt_bill_type_code                       [3],
           bl_adt_orig_dept_code                       [11],
           bl_adt_trn_srl_num                          [5],
	   bl_bed_type_code			       [5],
	   bl_blng_class_code			       [3],
           bl_epi_status                               [2],
           bl_epi_disch_bill                           [2],
           bl_epi_disch_yn                             [2],
           bl_epi_blng_grp_id                          [3];

   VARCHAR bl_srv_prt_grp_hdr_code                     [3],
           bl_srv_prt_grp_line_code                    [3],
           bl_srv_source_module_dpt_flg                [2],
           bl_srv_dept_code                            [11],
           bl_srv_rate_entry_by_usr_flg                [2],
           bl_srv_serv_locn_code                       [5];

   double  bl_srv_def_charge,
           bl_srv_min_charge_amt;

   double  bl_srv_ip_rate,
           bl_srv_base_qty;

   double  bl_rule_addl_factor_num;

   VARCHAR bl_blng_settlement_ind                      [2];

   double  bl_blng_ip_disc_perc;

   long    bl_pat_run_line_num = 0;

   VARCHAR store_patient_id                            [21],
           store_episode_type                          [2],
           store_episode_id                            [9];

  double   nd_base_charge,
           nd_gross_charge,
	   net_charge_amt,
	   gross_charge_amt,
	   disc_amt,
	   base_charge_amt,
           nd_disc_amt,
           nd_net_amt,

           epi_tot_gross_charge,
           epi_tot_disc_amt,
           epi_tot_net_amt;

double	   m_pat_base_qty,
	   m_pat_min_charge_amt,
	   m_base_rate,
	   m_pat_serv_price,
	   m_cust_base_charge_amt,
	   m_base_charge_amt,
	   m_pat_serv_disc;

double	   bedcls_dly_charge,
	   m_addl_factor_num,	   
	   m_pat_min_charge_amt,
	   epfndt_bed_bill_rate,
	   copay_perc,
	   m_pat_serv_disc,
	   m_pat_base_charge_amt,
	   m_disc_perc;


VARCHAR	   epfndt_blng_grp_id            [3],
	   epfndt_slmt_type_code         [3],
	   epfndt_bill_doc_type_code     [7],
	   epfndt_bill_doc_number        [9],
	   epfndt_bill_doc_date          [13],
	   epfndt_trx_doc_ref            [21],
	   patfolio_trx_doc_ref          [21];

VARCHAR    mpi_date[30],
	   m_pat_cust_code[10],
	   m_pat_ins_cust_code[10];

VARCHAR	  epfndt_cust_code			[9],
	  epfndt_pkg_bill_doc_type		[7],
	  epfndt_policy_type_code		[21],
	  epfndt_policy_exp_date		[11],
	  epfndt_credit_auth_ref		[20],
	  epfndt_credit_auth_date		[11],
	  epfndt_effective_date			[11],
	  epfndt_emp_code			[9],
	  epfndt_non_ins_blng_grp_id		[3],
	  epfndt_non_ins_cust_code		[9],
	  epfndt_employer_code			[9],	  
	  m_copay_yn				[2],
	  pkg_qv_ind				[3],
	  pkg_addl_qty_flag			[3],
	  pkg_apply_to				[3],
	  pkg_serv_code				[11],
	  pkg_exp_date_ymd			[9],
	  pkg_closed_yn				[3],
	  pkg_bill_date				[11],
	  pkg_flag				[3],
	  cust_yn				[3],
	  pc_yn					[3],
	  std_yn				[3], 
	  m_pc_code				[9],
	  m_excl_incl_ind			[2],
	  m_copay_ind				[2],
	  m_prepay_yn				[2],
	  m_preapp_status			[2],
	  ins_flag				[2],
	  m_rate_flag				[2],
	  m_apply_disc_yn			[2],
	  m_df_flag				[2],
	  m_misc_flag				[2],
	  m_app_rate_ind			[2],
	  ins_pkg_pat_ind			[2],
	  epfndt_policy_number			[31],
	  m_preapp_yn				[2],
	  m_uom_code                [5];

double	  m_pat_base_amt			[16],
	  m_pat_gross_amt			[16],
	  m_pat_dis_amt				[16],
	  m_pat_net_amt 			[16],
	  m_cust_base_amt			[16],
	  m_cust_gross_amt			[16],
	  m_cust_dis_amt			[16],
	  m_cust_net_amt 			[16];
	  

double	  epfndt_app_amt,
	  epfndt_ill_ded_amt,
	  epfndt_vst_ded_amt,
	  pkg_serv_price,
	  pkg_serv_disc,
	  pkg_qv_val,
	  pkg_qv_availed,
	  pkg_addl_qty,
	  pkg_addl_qty_availed,
	  pkg_addl_serv_price,
	  copay_perc,
	  m_copay_val,
	  m_availed_amt,
	  m_approved_amt,
	  m_ca_diff,
	  m_curr_availed,
	  m_def_charge,
	  m_ip_rate,
	  m_min_charge_amt,
	  m_base_qty,
	  m_serv_price,
	  m_ip_disc,
	  m_serv_disc,
	  m_serv_qty,
	  m_diff_qty,
	  m_addl_diff_qty,
	  m_req_pkg_qty,
	  m_req_addl_qty,
	  m_req_std_qty,
	  m_pat_base_qty,
	  m_pat_base_rate,
	  m_pat_serv_qty,
	  m_pat_gross_charge_amt,
	  m_pat_disc_amt,
	  m_pat_net_charge_amt,
	  m_cust_base_qty,
	  m_cust_base_rate,
	  m_cust_serv_qty,
	  m_cust_gross_charge_amt,
	  m_cust_disc_amt,
	  m_cust_net_charge_amt,
	  m_pkg_price,				
	  m_pkg_val,
	  m_pkg_price_availed;

int	  epfndt_app_days,
  	  epfndt_pkg_bill_doc_num,
	  err_flg,
	  m_flag,
	  m_canadj,
	  split,
	  k_flag,
	  m_stat,
	  m_cur_acct_seq_no,  /* Added on 31-JAN-2007 */
	  m_encounter_id,      
	  l_trx_doc_ref_line_num,
	  m_tot_amt,
	  m_pat_payable_amt,
	  m_pat_paid_amt;
/*	  bl_hdr_episode_id;*/

char      m_split_ind,
	  pkg_ind,
	  auto_confirm_yn = 'N',
	  m_app_dic_ind,
	  m_op_cover,
	  m_pkg_ins_pat_ind,
	  m_canadj_alert_ind,
	  nd_package_ind,
	  d_hosp_transfer;

char	  m_serv_status,
	  m_pat_app_rate_ind,
	  m_pat_app_dic_ind;

char	  v_msg[100];
char	  string_var[1000];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int hdr_ctr = 0, hdr1_ctr = 0, dtl_ctr = 0, skip_flag = 0;

int err_ctr = 0;

char msg_str[132];

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
     disp_message(ERR_MESG,"Not enough Parameters for running this program");
     proc_exit();
    }
 
    strcpy(g_pgm_id,"BLBRECUR");

	strcpy(nd_pwd.arr,argv[1]); 
	nd_pwd.len = strlen(nd_pwd.arr); 

    //disp_message(ORA_MESG,"connecting to Oracle");
	EXEC SQL CONNECT :nd_pwd;

	if (OERROR)
	{
        disp_message(ERR_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

    /*if (sql_connect(argv[1]) == -1)
    {
        disp_message(ERR_MESG,"Error in connecting to Oracle");
        proc_exit();
    }*/

     set_meduser_role();

	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    strcpy(nd_facility_id.arr,argv[4]);
    nd_facility_id.len = strlen(nd_facility_id.arr);
    strcpy(g_facility_id,nd_facility_id.arr);    

    fetch_prog_param();

    start_prog_msg();
    
    fetch_bl_param();

    declare_cur();

    hdr1_ctr  = 0;
    skip_flag = 0;

    open_hdr1();

	//disp_message(ERR_MESG,"Opened fetch hdr1........");

         
    while (fetch_hdr1())
    {
      
     // disp_message(ERR_MESG,bl_hdr_episode_id.arr);
	  hdr1_ctr++;
     
         if (!fetch_on_episode_change())

	  {  
	     //disp_message(ERR_MESG,"Not fetch_on_episode_change ");
          skip_flag = 1;	  	
	  }

      else
	   {
	   //disp_message(ERR_MESG,"fetch_on_episode_change ");
	     skip_flag = 0;
	   }
       
      if (skip_flag)
      {
          EXEC SQL COMMIT WORK;
          if (OERROR)
              err_mesg("COMMIT failed - 1",0,"");
          continue;
      }
  
      /*epi_tot_gross_charge = epi_tot_disc_amt = epi_tot_net_amt = 0;*/

      bl_pat_run_line_num = 1;
      hdr_ctr = 0;
      err_ctr = 0;
      open_hdr();

      while(fetch_hdr())
      {	
         hdr_ctr++;
         if (hdr_ctr == 1)
         {
             EXEC SQL SAVEPOINT LAST_EPISODE;

             if (OERROR)
                  err_mesg("SAVEPOINT LAST_EPISODE failed",0,""); 

            strcpy(store_patient_id.arr,bl_hdr_patient_id.arr);
            store_patient_id.len = strlen(store_patient_id.arr);
            strcpy(store_episode_type.arr,bl_hdr_episode_type.arr);
            store_episode_type.len = strlen(store_episode_type.arr);
            strcpy(store_episode_id.arr,bl_hdr_episode_id.arr);
            store_episode_id.len  = strlen(store_episode_id.arr);
         }
         open_line();
         while (fetch_line())
         {

	          insert_patient_charges_folio();
         }
      }
      if (!skip_flag)
      {
         do_episode_change();
      }
      EXEC SQL COMMIT WORK;
      if (OERROR)
          err_mesg("COMMIT failed",0,"");
    }

    EXEC SQL UPDATE BL_PARAMETERS 
	     SET LAST_RECUR_CHARGE_DATETIME = TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS')
	     WHERE OPERATING_FACILITY_ID = :nd_facility_id;	     
      if (OERROR)
         err_mesg("UPDATE failed on table BL_PARAMETERS",0,"");

    end_prog_msg();



    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

/* Main  closes here */

fetch_prog_param()
{
    nd_process_date.arr[0]        = '\0';
    nd_service_time.arr[0]        = '\0';
    nd_day_type.arr[0]            = '\0';
    nd_time_type.arr[0]           = '\0';
    nd_sysdate.arr[0]             = '\0';
    nd_ws_no.arr[0]		  = '\0';
    nd_user.arr[0]		  = '\0';    

    nd_process_date.len           = 0;
    nd_service_time.len           = 0;
    nd_day_type.len               = 0;
    nd_time_type.len              = 0;
    nd_sysdate.len                = 0;
    nd_ws_no.len		  = 0;       
    nd_user.len			  = 0;

   EXEC SQL SELECT PARAM1,
                   PARAM2,
		   PARAM3,
		   PARAM4,
           TO_CHAR(SYSDATE,'MMDDHH24MI'),
		   PARAM7,
		   PARAM8		  
              INTO :nd_process_date,
                   :nd_service_time,
                   :nd_day_type,
                   :nd_time_type,
                   :nd_sysdate,
		   :nd_ws_no,		   
		   :nd_user
           FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_process_date.arr[nd_process_date.len] = '\0';
   nd_service_time.arr[nd_service_time.len] = '\0';
   nd_day_type.arr[nd_day_type.len]         = '\0';
   nd_time_type.arr[nd_time_type.len]       = '\0';
   nd_sysdate.arr[nd_sysdate.len]           = '\0';
   nd_ws_no.arr[nd_ws_no.len]	            = '\0';
   nd_user.arr[nd_user.len]		    = '\0';

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

fetch_bl_param()
{

bl_param_prt_grp_hdr_code.arr[0]        = '\0';
bl_param_prt_grp_line_code.len           = 0;

    EXEC SQL SELECT DEF_PRT_GRP_HDR_CODE,
                    DEF_PRT_GRP_LINE_CODE
               INTO :bl_param_prt_grp_hdr_code,
                    :bl_param_prt_grp_line_code
               FROM BL_PARAMETERS
	       WHERE OPERATING_FACILITY_ID = :nd_facility_id;

    if (OERROR)
         err_mesg("SELECT failed on table BL_PARAMETERS",0,"");

    if (NOT_FOUND)
         err_mesg("SELECT failed on table BL_PARAMETERS",1,"BL0020");
bl_param_prt_grp_hdr_code.arr[bl_param_prt_grp_hdr_code.len] = '\0';
bl_param_prt_grp_line_code.arr[bl_param_prt_grp_line_code.len] = '\0';

}

declare_cur()
{


     EXEC SQL DECLARE BL_RECUR_HDR_CUR1 CURSOR FOR
               SELECT DISTINCT EPISODE_TYPE,
                      EPISODE_ID
                 FROM BL_RECURRING_HDR
                WHERE NVL(RECUR_TRN_STATUS,'X') != 'Z'
		AND OPERATING_FACILITY_ID = :nd_facility_id
                ORDER BY EPISODE_TYPE,EPISODE_ID;

     EXEC SQL DECLARE BL_RECURRING_HDR_CUR CURSOR FOR
               SELECT RECUR_TRN_REF,
                      TO_CHAR(RECUR_TRN_DATE,'DD/MM/YYYY'),
                      PATIENT_ID
                 FROM BL_RECURRING_HDR
                WHERE EPISODE_TYPE = :bl_hdr_episode_type
                  AND EPISODE_ID   = :bl_hdr_episode_id
                  AND NVL(LAST_GEN_DATE,RECUR_TRN_DATE) <    TO_date(:nd_process_date,'DD/MM/YYYY')
		  AND ((TRUNC(LAST_GEN_DATE) <    TRUNC(TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS'))
			AND LAST_GEN_DATE IS NOT NULL ) OR 
		(LAST_GEN_DATE IS NULL AND TRUNC(RECUR_TRN_DATE) <= TRUNC(TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS'))))
		  AND OPERATING_FACILITY_ID = :nd_facility_id
                ORDER BY RECUR_TRN_REF
                FOR UPDATE OF RECUR_TRN_REF;

     EXEC SQL DECLARE BL_RECURRING_LINE_CUR CURSOR FOR
               SELECT BLNG_SERV_CODE,
		      PANEL_CODE,
		      NVL(SERV_QTY,1),
                      NVL(CHARGE_AMT,0),
		      NVL(SERVICE_PANEL_IND,'N')
                 FROM BL_RECURRING_LINE
                WHERE RECUR_TRN_REF = :bl_hdr_recur_trn_ref
                  AND TRUNC(TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS')) 
                      BETWEEN trunc(START_DATE) AND END_DATE
		  AND OPERATING_FACILITY_ID = :nd_facility_id
                ORDER BY BLNG_SERV_CODE;

     EXEC SQL DECLARE IP_OPEN_EPISODE_CUR CURSOR FOR
               SELECT 'X'
                 FROM IP_OPEN_EPISODE
                WHERE OPEN_EPISODE_ID   = :bl_hdr_episode_id
		AND   FACILITY_ID = :nd_facility_id;
 
     EXEC SQL DECLARE BL_EPISODE_FIN_DTLS_CUR CURSOR FOR
               SELECT BLNG_GRP_ID, 
		      EPISODE_STATUS, 
                      NVL(DISCHARGE_BILL_GEN_IND,'N'),
                      NVL(DISCHARGED_YN,'N'),
		      CUST_CODE,	
		      NON_INS_BLNG_GRP_ID,
		      NON_INS_CUST_CODE,
		      PACKAGE_BILL_DOC_TYPE,	
		      PACKAGE_BILL_DOC_NUM,	
		      POLICY_TYPE_CODE,
		      CREDIT_AUTH_REF,
		      EFFECTIVE_DATE,
		      NVL(APPROVED_DAYS,0),
		      CUR_ACCT_SEQ_NO,            /* Added on 31-JAN-2007 */
		      ENCOUNTER_ID                /* Added on 31-JAN-2007 */ 
                 FROM BL_EPISODE_FIN_DTLS
                WHERE EPISODE_TYPE = :bl_hdr_episode_type
                  AND EPISODE_ID   = :bl_hdr_episode_id
		  AND OPERATING_FACILITY_ID = :nd_facility_id
                FOR UPDATE OF BLNG_GRP_ID;

      EXEC SQL DECLARE IP_ADT_TRN_CUR CURSOR FOR
               SELECT B.BLNG_CLASS_CODE,
                      A.TO_PHYSICIAN_ID,
                      A.TO_BED_CLASS_CODE,
                      C.BILL_TYPE_CODE,
                      A.ORIG_DEPT_CODE,
                      A.TRN_SRL_NUM,
		              A.TO_BED_TYPE_CODE
               FROM BL_IP_ADT_TRN_VW A, BL_IP_BED_TYPE B,  BL_IP_NURSING_UNIT C
               WHERE A.TRN_SRL_NUM = 
                      (SELECT MAX(TRN_SRL_NUM) 
                       FROM BL_IP_ADT_TRN_VW
                       WHERE NVL(ADT_TRN_STATUS,'0') != '9'
                       AND NVL(TRN_CODE,'X') != 'D'
                       AND EPISODE_ID = :bl_hdr_episode_id
		       AND FACILITY_ID =  :nd_facility_id  
		       AND trn_date_time <= TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS'))                      
		  AND B.BED_TYPE_CODE = A.TO_BED_TYPE_CODE
		  AND C.NURSING_UNIT_CODE = A.TO_WARD_CODE
                  AND C.FACILITY_ID =  :nd_facility_id  
		  AND A.FACILITY_ID =  C.FACILITY_ID
                  AND A.EPISODE_ID = :bl_hdr_episode_id;

     EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR
               SELECT NVL(PRT_GRP_HDR_CODE,:bl_param_prt_grp_hdr_code),
                      NVL(PRT_GRP_LINE_CODE,:bl_param_prt_grp_line_code),
                      NVL(SOURCE_MODULE_DEPT_FLAG,'N') ,
                      DEPT_CODE,
                      RATE_ENTRY_BY_USER_FLAG,
                      DEF_CHARGE,
                      /*IP_RATE,*/
                      MIN_CHARGE_AMT,
                      /*NVL(BASE_QTY,1.00),*/
                      SERV_LOCN_CODE,
					  UOM_CODE 
                 FROM BL_BLNG_SERV
                WHERE BLNG_SERV_CODE = :bl_line_blng_serv_code;

/*     EXEC SQL DECLARE BL_BLNG_SERV_FOR_GRP_CUR CURSOR FOR
               SELECT NVL(IP_DISC_PERC,0.00),
                      SETTLEMENT_IND
                 FROM BL_BLNG_SERV_FOR_GRP
                WHERE BLNG_GRP_ID = :bl_epi_blng_grp_id
                  AND BLNG_SERV_CODE = :bl_line_blng_serv_code;
		  */

     EXEC SQL DECLARE BL_BLNG_RULE_CUR CURSOR FOR
               SELECT NVL(ADDL_FACTOR_NUM,1.0000)
                 FROM BL_BLNG_RULE
                WHERE BLNG_CLASS_CODE = :bl_adt_blng_class_code
                  AND DAY_TYPE_CODE   = :nd_day_type
                  AND TIME_SLAB_CODE  = :nd_time_type
                  AND BLNG_SERV_CODE  = :bl_line_blng_serv_code;
}


open_hdr1()
{

    
    EXEC SQL OPEN BL_RECUR_HDR_CUR1;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_RECUR_HDR_CUR1",0,"");
}

open_hdr()
{
    EXEC SQL OPEN BL_RECURRING_HDR_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_RECURRING_HDR_CUR",0,"");
}

open_line()
{

    //disp_message(ERR_MESG,bl_hdr_recur_trn_ref.arr);
	//disp_message(ERR_MESG,nd_service_time.arr);
	
    EXEC SQL OPEN BL_RECURRING_LINE_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_RECURRING_LINE_CUR",0,"");
}

fetch_hdr1()
{
bl_hdr_episode_type.arr[0]                                        = '\0';
bl_hdr_episode_id.arr[0]                                          = '\0';

bl_hdr_episode_type.len                                           = 0;
bl_hdr_episode_id.len                                             = 0;

     EXEC SQL FETCH BL_RECUR_HDR_CUR1
               INTO :bl_hdr_episode_type,
                    :bl_hdr_episode_id;	
					
         if (OERROR)
         err_mesg("FETCH failed on cursor BL_RECUR_HDR_CUR1",0,"");

bl_hdr_episode_type.arr[bl_hdr_episode_type.len]                         = '\0';
bl_hdr_episode_id.arr[bl_hdr_episode_id.len]                             = '\0';

/*disp_message(ERR_MESG,"In fetch_hdr1()");
disp_message(ERR_MESG,bl_hdr_episode_id.arr);*/

    return(LAST_ROW?0:1);
}

fetch_hdr()
{
bl_hdr_recur_trn_ref.arr[0]                                       = '\0';
bl_hdr_recur_trn_date.arr[0]                                      = '\0';
bl_hdr_patient_id.arr[0]                                          = '\0';

bl_hdr_recur_trn_ref.len                                          = 0;
bl_hdr_recur_trn_date.len                                         = 0;
bl_hdr_patient_id.len                                             = 0;

     EXEC SQL FETCH BL_RECURRING_HDR_CUR
               INTO :bl_hdr_recur_trn_ref,
                    :bl_hdr_recur_trn_date,
                    :bl_hdr_patient_id;	
	

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_RECURRING_HDR_CUR",0,"");

bl_hdr_recur_trn_ref.arr[bl_hdr_recur_trn_ref.len]                       = '\0';
bl_hdr_recur_trn_date.arr[bl_hdr_recur_trn_date.len]                     = '\0';
bl_hdr_patient_id.arr[bl_hdr_patient_id.len]                             = '\0';

if (bl_hdr_patient_id.arr[0])
{
	EXEC SQL EXECUTE
	BEGIN
		:bl_reln_code := blcommon.get_reln_code(:bl_hdr_patient_id);
	END;
	END-EXEC;

	if (bl_reln_code.arr[0] == '\0')
	{
		err_mesg("Invalid Nationality",0,"");

	}
}


return(LAST_ROW?0:1);

}

fetch_line()
{
bl_line_blng_serv_code.arr[0]                                     = '\0';
nd_panel_code.arr[0]						  = '\0';

bl_line_blng_serv_code.len                                        = 0;
nd_panel_code.len						  = 0;

bl_line_charge_amt                                                = 0;
bl_line_serv_qty                                                  = 0;


     EXEC SQL FETCH BL_RECURRING_LINE_CUR
               INTO :bl_line_blng_serv_code,
		    :nd_panel_code,
		    :bl_line_serv_qty,
                    :bl_line_charge_amt,
		    :m_service_panel_ind;
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_RECURRING_LINE_CUR",0,"");

      bl_line_blng_serv_code.arr[bl_line_blng_serv_code.len]                   = '\0';      
      nd_panel_code.arr[nd_panel_code.len]	     		               = '\0';      
      

    return(LAST_ROW?0:1);
}

fetch_on_episode_change()
{

     
     EXEC SQL OPEN IP_OPEN_EPISODE_CUR;

	 if (OERROR)
         err_mesg("OPEN failed on cursor IP_OPEN_EPISODE_CUR",0,"");

		 			   //disp_message(ERR_MESG,"Before IP_OPEN_EPISODE_CUR");


     EXEC SQL FETCH IP_OPEN_EPISODE_CUR
               INTO :dummy;
			   //disp_message(ERR_MESG,"After IP_OPEN_EPISODE_CUR");

     if (OERROR)
	 {
	      err_mesg("FETCH failed on cursor IP_OPEN_EPISODE_CUR",0,"");
		 }
     if (NOT_FOUND)
     {
         sprintf(msg_str,"Record not found in IP OPEN EPISODE for %s",
                 bl_hdr_episode_id.arr);
         log_err_mesg(msg_str,0,"");
         err_ctr++;
         return (0);

     }

//disp_message(ERR_MESG,"After IP_OPEN_EPISODE_CUR before fin_cur");

  /*   EXEC SQL OPEN BL_EPISODE_FIN_DTLS_CUR;

     if (OERROR)
	 {
    	 //disp_message(ERR_MESG,"After IP_OPEN_EPISODE_CUR before fin_cur1");
         err_mesg("OPEN failed on cursor BL_EPISODE_FIN_DTLS_CUR",0,"");
}
     bl_epi_blng_grp_id.arr[0]		= '\0';
     bl_epi_blng_grp_id.len		= 0;
     bl_epi_status.arr[0]		= '\0';
     bl_epi_status.len			= 0;
     bl_epi_disch_bill.arr[0]		= '\0';
     bl_epi_disch_bill.len		= 0;
     bl_epi_disch_yn.arr[0]		= '\0';
     bl_epi_disch_yn.len		= 0;
     epfndt_cust_code.arr[0]		= '\0';
     epfndt_cust_code.len		= 0;
     epfndt_non_ins_blng_grp_id.arr[0]	= '\0';
     epfndt_non_ins_blng_grp_id.len	= 0;
     epfndt_non_ins_cust_code.arr[0]	= '\0';
     epfndt_non_ins_cust_code.len	= 0;
     epfndt_bill_doc_type_code.arr[0]	= '\0';
     epfndt_bill_doc_type_code.len	= 0;
     epfndt_bill_doc_number.arr[0]	= '\0';
     epfndt_bill_doc_number.len		= 0;
     epfndt_policy_type_code.arr[0]	= '\0';
     epfndt_policy_type_code.len	= 0;
     epfndt_credit_auth_ref.arr[0]	= '\0';
     epfndt_credit_auth_ref.len		= 0;
     epfndt_effective_date.arr[0]	= '\0';
     epfndt_effective_date.len		= 0;
     epfndt_app_days			= 0;
     m_cur_acct_seq_no                  = 0;

//disp_message(ERR_MESG,"After IP_OPEN_EPISODE_CUR before fin_cur2");
	
     EXEC SQL FETCH BL_EPISODE_FIN_DTLS_CUR
               INTO :bl_epi_blng_grp_id,
                    :bl_epi_status,
                    :bl_epi_disch_bill,
                    :bl_epi_disch_yn,
		    :epfndt_cust_code,
		    :epfndt_non_ins_blng_grp_id,
		    :epfndt_non_ins_cust_code,
		    :epfndt_bill_doc_type_code,
		    :epfndt_bill_doc_number,
		    :epfndt_policy_type_code,
		    :epfndt_credit_auth_ref,
		    :epfndt_effective_date,
		    :epfndt_app_days,
		    :m_cur_acct_seq_no,
		    :m_encounter_id;
			

     if (OERROR)
	 {
	 //disp_message(ERR_MESG,"After IP_OPEN_EPISODE_CUR before fin_cur3");
      err_mesg("FETCH failed on cursor BL_EPISODE_FIN_DTLS_CUR",0,"");
	  }

     bl_epi_blng_grp_id.arr[bl_epi_blng_grp_id.len] = '\0';
     bl_epi_status.arr[bl_epi_status.len]           = '\0';
     bl_epi_disch_bill.arr[bl_epi_disch_bill.len]   = '\0';
     bl_epi_disch_yn.arr[bl_epi_disch_yn.len]       = '\0';
     epfndt_cust_code.arr[epfndt_cust_code.len] = '\0';
     epfndt_non_ins_blng_grp_id.arr[epfndt_non_ins_blng_grp_id.len] = '\0';
     epfndt_non_ins_cust_code.arr[epfndt_non_ins_cust_code.len] = '\0';
     epfndt_bill_doc_type_code.arr[epfndt_bill_doc_type_code.len] = '\0';
     epfndt_bill_doc_number.arr[epfndt_bill_doc_number.len] = '\0';
     epfndt_policy_type_code.arr[epfndt_policy_type_code.len] = '\0';
     epfndt_credit_auth_ref.arr[epfndt_credit_auth_ref.len] = '\0';
     epfndt_effective_date.arr[epfndt_effective_date.len] = '\0';

     if (NOT_FOUND)
     {//disp_message(ERR_MESG,"After IP_OPEN_EPISODE_CUR before fin_cur4");

          sprintf(msg_str,"Record not found in BL EPISODE FIN DTLS for %s - %s EPISODE",
                         bl_hdr_episode_type.arr,
                         bl_hdr_episode_id.arr);
          log_err_mesg(msg_str,0,"");
          err_ctr++;
          return (0);
     }


     if (bl_epi_status.arr[0] == '9')
     {
          sprintf(msg_str,"Episode Status is Cancelled for %s - %s EPISODE",
                         bl_hdr_episode_type.arr,
                         bl_hdr_episode_id.arr);
          log_err_mesg(msg_str,0,"");
          err_ctr++;
          return (0);
     }
     if (bl_epi_disch_bill.arr[0] == 'Y')
     {
          sprintf(msg_str,"Active Discharge Bill exist for %s - %s EPISODE",
                         bl_hdr_episode_type.arr,
                         bl_hdr_episode_id.arr);
          log_err_mesg(msg_str,0,"");
          err_ctr++;
          return (0);
     }
	 
     if (bl_epi_disch_yn.arr[0] == 'Y')
     {
          sprintf(msg_str,"Discharge process done for %s - %s EPISODE",
                         bl_hdr_episode_type.arr,
                         bl_hdr_episode_id.arr);
          log_err_mesg(msg_str,0,"");
          err_ctr++;
          return (0);
     }

*/	

   //disp_message(ERR_MESG,"before");
 /*disp_message(ERR_MESG,bl_hdr_episode_id.arr);

    disp_message(ERR_MESG,"In Fetch_on_episode_change");
	disp_message(ERR_MESG,bl_hdr_episode_id.arr);
    disp_message(ERR_MESG,nd_facility_id .arr);
	disp_message(ERR_MESG,nd_service_time.arr);*/

	 EXEC SQL OPEN IP_ADT_TRN_CUR;

     if (OERROR)
	     		 
         err_mesg("OPEN failed on cursor IP_ADT_TRN_CUR",0,"");

bl_adt_blng_class_code.arr[0]                                     = '\0';
bl_adt_to_physician_id.arr[0]                                     = '\0';
bl_adt_to_bed_class_code.arr[0]                                   = '\0';
bl_adt_bill_type_code.arr[0]                                      = '\0';
bl_adt_orig_dept_code.arr[0]                                      = '\0';
bl_adt_trn_srl_num.arr[0]                                         = '\0';
bl_bed_type_code.arr[0]						  = '\0';

bl_adt_blng_class_code.len                                        = 0;
bl_adt_to_physician_id.len                                        = 0;
bl_adt_to_bed_class_code.len                                      = 0;
bl_adt_bill_type_code.len                                         = 0;
bl_adt_orig_dept_code.len                                         = 0;
bl_adt_trn_srl_num.len                                            = 0;
bl_bed_type_code.len						  = 0;

	EXEC SQL FETCH IP_ADT_TRN_CUR
        INTO :bl_adt_blng_class_code,
	:bl_adt_to_physician_id,
	:bl_adt_to_bed_class_code,
	:bl_adt_bill_type_code,
	:bl_adt_orig_dept_code,
	:bl_adt_trn_srl_num,
	:bl_bed_type_code;



     if (OERROR)
	 {
	  err_mesg("FETCH failed on cursor IP_ADT_TRN_CUR",0,"");
      }

bl_adt_blng_class_code.arr[bl_adt_blng_class_code.len]                   = '\0';
bl_adt_to_physician_id.arr[bl_adt_to_physician_id.len]                   = '\0';
bl_adt_to_bed_class_code.arr[bl_adt_to_bed_class_code.len]               = '\0';
bl_adt_bill_type_code.arr[bl_adt_bill_type_code.len]                     = '\0';
bl_adt_orig_dept_code.arr[bl_adt_orig_dept_code.len]                     = '\0';
bl_adt_trn_srl_num.arr[bl_adt_trn_srl_num.len]                           = '\0';
bl_bed_type_code.arr[bl_bed_type_code.len]				 = '\0';

//disp_message(ERR_MESG,"Before displaying Values...");

/*disp_message(ERR_MESG,bl_adt_to_physician_id.arr);
disp_message(ERR_MESG,bl_adt_to_bed_class_code.arr);
disp_message(ERR_MESG,bl_bed_type_code.arr);
disp_message(ERR_MESG,bl_adt_blng_class_code.arr);
disp_message(ERR_MESG,bl_adt_orig_dept_code.arr);
disp_message(ERR_MESG,bl_bed_type_code.arr);
disp_message(ERR_MESG,"Before if not found");
*/

 if (NOT_FOUND)
  
  {
     sprintf(msg_str,"Record not found in IP_ADT_TRN for %s - %s EPISODE",
                         bl_hdr_episode_type.arr,
                         bl_hdr_episode_id.arr);
     log_err_mesg(msg_str,0,"");
     err_ctr++;
     return (0);
  }

/*disp_message(ERR_MESG,"Before INVALID ED TYPE");*/
if (bl_bed_type_code.arr[0] == '\0')
	err_mesg("Invalid Bed Type",0,"");

if (bl_bed_type_code.arr[0])
{
	EXEC SQL EXECUTE
	BEGIN
		:bl_blng_class_code := null;
		:bl_blng_class_code :=  BLVALID.GET_BED_BLNG_CLASS(:bl_bed_type_code);
	END;
	END-EXEC;
	if (bl_blng_class_code.arr[0] == '\0')
	{
		err_mesg("Invalid billing class code",0,"");
 	 }
}	

  return (1);
}

fetch_blng_service()
{
     EXEC SQL OPEN BL_BLNG_SERV_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_SERV_CUR",0,"");

bl_srv_prt_grp_hdr_code.arr[0]                                    = '\0';
bl_srv_prt_grp_line_code.arr[0]                                   = '\0';
bl_srv_source_module_dpt_flg.arr[0]                             = '\0';
bl_srv_dept_code.arr[0]                                           = '\0';
bl_srv_rate_entry_by_usr_flg.arr[0]                             = '\0';
bl_srv_serv_locn_code.arr[0]                                      = '\0';

bl_srv_prt_grp_hdr_code.len                                       = 0;
bl_srv_prt_grp_line_code.len                                      = 0;
bl_srv_source_module_dpt_flg.len                                = 0;
bl_srv_dept_code.len                                              = 0;
bl_srv_rate_entry_by_usr_flg.len                                = 0;
bl_srv_serv_locn_code.len                                         = 0;

bl_srv_def_charge                                                 = 0;
bl_srv_min_charge_amt                                             = 0;
bl_srv_ip_rate                                                    = 0;
bl_srv_base_qty                                                   = 0;


/* Using PL/SQL PKG to get MPI	*/

     EXEC SQL FETCH BL_BLNG_SERV_CUR
               INTO :bl_srv_prt_grp_hdr_code,
                    :bl_srv_prt_grp_line_code,
                    :bl_srv_source_module_dpt_flg,
                    :bl_srv_dept_code,
                    :bl_srv_rate_entry_by_usr_flg,					
		            :bl_srv_serv_locn_code,
					:m_uom_code;

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_SERV_CUR",0,"");

bl_srv_prt_grp_hdr_code.arr[bl_srv_prt_grp_hdr_code.len]                 = '\0';
bl_srv_prt_grp_line_code.arr[bl_srv_prt_grp_line_code.len]               = '\0';
bl_srv_source_module_dpt_flg.arr[bl_srv_source_module_dpt_flg.len]   = '\0';
bl_srv_dept_code.arr[bl_srv_dept_code.len]                               = '\0';
bl_srv_rate_entry_by_usr_flg.arr[bl_srv_rate_entry_by_usr_flg.len]   = '\0';
bl_srv_serv_locn_code.arr[bl_srv_serv_locn_code.len]                     = '\0';

   if (NOT_FOUND)
   {
       sprintf(msg_str,"Record not found in BL BLNG SERV %s ",
                         bl_line_blng_serv_code.arr);
       loc_log_msg(msg_str,0,"");
       return(0);
   }
   else
   {  /*get_ser_amt();       Added for MPI */
      bl_srv_def_charge		= m_def_charge;
      bl_srv_ip_rate		= m_serv_price;
      bl_srv_min_charge_amt	= m_min_charge_amt;
      bl_srv_base_qty		= m_base_qty;

      return(1);
    }
}

fetch_blng_serv_for_grp()
{
bl_blng_ip_disc_perc	= 0;
bl_blng_ip_disc_perc	= m_disc_perc;
 
}

/*

fetch_blng_serv_for_grp()
{
 
     EXEC SQL OPEN BL_BLNG_SERV_FOR_GRP_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_SERV_FOR_GRP_CUR",0,"");

bl_blng_settlement_ind.arr[0]                                     = '\0';
bl_blng_settlement_ind.len                                        = 0;

bl_blng_ip_disc_perc                                              = 0;

     EXEC SQL FETCH BL_BLNG_SERV_FOR_GRP_CUR
               INTO :bl_blng_ip_disc_perc,
                    :bl_blng_settlement_ind;

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_SERV_FOR_GRP_CUR",0,"");
	 

// Code introduced on 22/01/94 for billing rules change 

     if (NOT_FOUND)
      {
       strcpy(blng_serv_code_old.arr, bl_line_blng_serv_code.arr);
       blng_serv_code_old.len = strlen(blng_serv_code_old.arr);
       blng_serv_code_spl.arr[0] = bl_line_blng_serv_code.arr[0];
       blng_serv_code_spl.arr[1] = bl_line_blng_serv_code.arr[1];
       blng_serv_code_spl.arr[2] = '\0';
       blng_serv_code_spl.len = strlen(blng_serv_code_spl.arr);
       strcpy(bl_line_blng_serv_code.arr, blng_serv_code_spl.arr);
       bl_line_blng_serv_code.len = strlen(bl_line_blng_serv_code.arr);
       EXEC SQL OPEN BL_BLNG_SERV_FOR_GRP_CUR;

        if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_SERV_FOR_GRP_CUR",0,"");

       EXEC SQL FETCH BL_BLNG_SERV_FOR_GRP_CUR
               INTO :bl_blng_ip_disc_perc,
                    :bl_blng_settlement_ind;

        if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_SERV_FOR_GRP_CUR",0,"");

        if (NOT_FOUND)
         {
          strcpy(blng_serv_code_spl.arr, "ALL");
          blng_serv_code_spl.len = strlen(blng_serv_code_spl.arr);
          strcpy(bl_line_blng_serv_code.arr, blng_serv_code_spl.arr);
          bl_line_blng_serv_code.len = strlen(bl_line_blng_serv_code.arr);
          EXEC SQL OPEN BL_BLNG_SERV_FOR_GRP_CUR;

           if (OERROR)
            err_mesg("OPEN failed on cursor BL_BLNG_SERV_FOR_GRP_CUR",0,"");

          EXEC SQL FETCH BL_BLNG_SERV_FOR_GRP_CUR
               INTO :bl_blng_ip_disc_perc,
                    :bl_blng_settlement_ind;

           if (OERROR)
            err_mesg("FETCH failed on cursor BL_BLNG_SERV_FOR_GRP_CUR",0,"");
         }
       strcpy(bl_line_blng_serv_code.arr, blng_serv_code_old.arr);
       bl_line_blng_serv_code.len = strlen(bl_line_blng_serv_code.arr);
      }
// End of Code on 22/01/94 

bl_blng_settlement_ind.arr[bl_blng_settlement_ind.len]                   = '\0';

   if (NOT_FOUND)
   {
       bl_blng_ip_disc_perc = 0;
       return (0);
   }
   else
       return (1);
}
*/


fetch_addl_factor()
{
	bl_rule_addl_factor_num = m_addl_factor_num;
}


/*
fetch_addl_factor()
{
     EXEC SQL OPEN BL_BLNG_RULE_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_RULE_CUR",0,"");

     bl_rule_addl_factor_num                                           = 0;

     EXEC SQL FETCH BL_BLNG_RULE_CUR
               INTO :bl_rule_addl_factor_num;

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_RULE_CUR",0,"");

// Code introduced on 22/01/94 for billing rules change

     if (NOT_FOUND)
      {
       strcpy(blng_serv_code_old.arr, bl_line_blng_serv_code.arr);
       blng_serv_code_old.len = strlen(blng_serv_code_old.arr);
       blng_serv_code_spl.arr[0] = bl_line_blng_serv_code.arr[0];
       blng_serv_code_spl.arr[1] = bl_line_blng_serv_code.arr[1];
       blng_serv_code_spl.arr[2] = '\0';
       blng_serv_code_spl.len = strlen(blng_serv_code_spl.arr);
       strcpy(bl_line_blng_serv_code.arr, blng_serv_code_spl.arr);
       bl_line_blng_serv_code.len = strlen(bl_line_blng_serv_code.arr);
       EXEC SQL OPEN BL_BLNG_RULE_CUR;

       if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_RULE_CUR",0,"");
       EXEC SQL FETCH BL_BLNG_RULE_CUR
               INTO :bl_rule_addl_factor_num;

       if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_RULE_CUR",0,"");

        if (NOT_FOUND)
         {
          strcpy(blng_serv_code_spl.arr, "ALL");
          blng_serv_code_spl.len = strlen(blng_serv_code_spl.arr);
          strcpy(bl_line_blng_serv_code.arr, blng_serv_code_spl.arr);
          bl_line_blng_serv_code.len = strlen(bl_line_blng_serv_code.arr);
          EXEC SQL OPEN BL_BLNG_RULE_CUR;

          if (OERROR)
           err_mesg("OPEN failed on cursor BL_BLNG_RULE_CUR",0,"");
          EXEC SQL FETCH BL_BLNG_RULE_CUR
               INTO :bl_rule_addl_factor_num;

          if (OERROR)
           err_mesg("FETCH failed on cursor BL_BLNG_RULE_CUR",0,"");
         }
       strcpy(bl_line_blng_serv_code.arr, blng_serv_code_old.arr);
       bl_line_blng_serv_code.len = strlen(bl_line_blng_serv_code.arr);
      }
// End of code on 22/01/94 

     if (NOT_FOUND)
     {
        bl_rule_addl_factor_num                                = 1.0000;
        return(0);
     } 
     return(1);
}
*/

compute_charges()
{	nd_gross_charge = gross_charge_amt;
	nd_disc_amt	= disc_amt;
	nd_net_amt	= net_charge_amt;
}

/*
compute_charges(base_qty,base_rate,disc_perc,addl_factor,min_chg_amt)
double base_qty,base_rate,disc_perc,addl_factor,min_chg_amt;
{
   nd_base_charge =  base_rate * bl_line_serv_qty / base_qty;
   nd_gross_charge = nd_base_charge * addl_factor;
   if (nd_gross_charge < min_chg_amt)
      nd_gross_charge = min_chg_amt;
   nd_disc_amt     = nd_gross_charge * (disc_perc/(double)100);
   nd_net_amt      = nd_gross_charge - nd_disc_amt;
}
*/




do_episode_change()
{
/*
      EXEC SQL UPDATE BL_EPISODE_FIN_DTLS
                  SET TOT_BUS_GEN_AMT   = NVL(TOT_BUS_GEN_AMT,0) +
                              :epi_tot_gross_charge,
                      TOT_BUS_DISC_AMT  = NVL(TOT_BUS_DISC_AMT,0) +
                              :epi_tot_disc_amt,
                      TOT_UNBLD_AMT     = NVL(TOT_UNBLD_AMT,0) +
                              :epi_tot_net_amt,
				   MODIFIED_BY_ID = USER ,
				   MODIFIED_DATE  = SYSDATE ,       
				   MODIFIED_AT_WS_NO = :nd_ws_no,     
				   MODIFIED_FACILITY_ID = :nd_facility_id 
                WHERE EPISODE_TYPE = :store_episode_type
                  AND EPISODE_ID   = :store_episode_id
				  AND OPERATING_FACILITY_ID = :nd_facility_id;

     if (OERROR)
         err_mesg("UPDATE failed on table BL_EPISODE_FIN_DTLS",0,"");

      EXEC SQL UPDATE BL_PATIENT_FIN_DTLS
                  SET TOT_BUSINESS_IP_AMT = NVL(TOT_BUSINESS_IP_AMT,0) +
                               :epi_tot_gross_charge,
                      TRX_PROCESSED_IND   = 'Y',
                      TOT_UNBLD_IP_AMT    = NVL(TOT_UNBLD_IP_AMT,0) +
                               :epi_tot_net_amt,
				   MODIFIED_BY_ID = USER ,
				   MODIFIED_DATE  = SYSDATE ,       
				   MODIFIED_AT_WS_NO = :nd_ws_no,     
				   MODIFIED_FACILITY_ID = :nd_facility_id 
                WHERE PATIENT_ID = :store_patient_id;

      if (OERROR)
         err_mesg("UPDATE failed on table BL_PATIENT_FIN_DTLS",0,"");
 */

      EXEC SQL UPDATE BL_RECURRING_HDR
                  SET LAST_GEN_DATE = TRUNC(TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS')),
				  MODIFIED_BY_ID = USER ,
				   MODIFIED_DATE  = SYSDATE ,       
				   MODIFIED_AT_WS_NO = :nd_ws_no,     
				   MODIFIED_FACILITY_ID = :nd_facility_id 
                WHERE EPISODE_TYPE  = :store_episode_type
                  AND EPISODE_ID    = :store_episode_id
				  AND OPERATING_FACILITY_ID = :nd_facility_id;

      if (OERROR)
         err_mesg("UPDATE failed on table BL_RECURRING_HDR",0,"");

      EXEC SQL COMMIT WORK;
      if (OERROR)
         err_mesg("COMMIT failed",0,"");
}

loc_log_msg(str)
char str[];
{
  if (strlen(str) > 70)
      str[70] = '\0';
  if (err_ctr == 0)
       continue_to_next_ref();

  disp_message(INFO_MESG,str);
  log_err_mesg(str,0,"");
  err_ctr++;
}

continue_to_next_ref()
{
    EXEC SQL ROLLBACK WORK TO SAVEPOINT LAST_EPISODE;
    if (OERROR)
         err_mesg("ROLLBACK TO LAST_EPISODE failed",0,""); 
}

/*get_ser_amt()
{

EXEC SQL EXECUTE    
BEGIN
	:nd_error_id := null;
	:nd_error_code := null;
	:nd_error_text := null;		

BLCORE.BL_MPI_PKG_INS_CHECK
	(:bl_hdr_patient_id,
	 :bl_hdr_episode_id,
	 'I',
	 :bl_adt_trn_srl_num,
	 :bl_epi_blng_grp_id,	 
	 TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS'),
	 :bl_line_blng_serv_code,
	 :epfndt_cust_code,
	 :epfndt_non_ins_blng_grp_id,
	 :epfndt_non_ins_cust_code,
	 :bl_blng_class_code,
	 :bl_reln_code,
	 :pkg_serv_code,
	 :epfndt_pkg_bill_doc_type,
	 :epfndt_pkg_bill_doc_num,
	 :pkg_bill_date,
	 :pkg_serv_price,
	 :pkg_serv_disc,
	 :pkg_qv_ind,
	 :pkg_qv_val,
	 :pkg_qv_availed,
	 :pkg_addl_qty_flag,
	 :pkg_addl_qty,
	 :pkg_addl_qty_availed,
	 :pkg_addl_serv_price,
	 :pkg_flag,
	 :ins_flag,
	 :m_df_flag,
	 :m_misc_flag,
	 :m_rate_flag,
	 :m_def_charge,
	 :m_base_qty,
	 :m_min_charge_amt,
	 :m_serv_price,
	 :m_serv_disc,
	 :m_pat_base_qty,
	 :m_pat_min_charge_amt,
	 :m_pat_serv_price,
	 :m_pat_serv_disc,
	 :m_serv_status,
	 :epfndt_policy_type_code,
	 :epfndt_effective_date,
	 :epfndt_credit_auth_ref,
	 :m_approved_amt,
	 :m_availed_amt,
	 :epfndt_app_days,
	 :copay_perc,
	 :m_op_cover,
	 :m_excl_incl_ind,
	 :m_copay_ind,
	 :m_copay_val,
	 :m_preapp_yn,
	 :m_copay_yn,
	 :m_app_rate_ind,
	 :m_app_dic_ind,
	 :m_pat_app_rate_ind,
	 :m_pat_app_dic_ind,
	 :m_pat_cust_code,
	 :m_pat_ins_cust_code,
	 :m_addl_factor_num,
	 '0',
	 :nd_facility_id,
	 'BL',
	 :m_pc_code,
	 :p_levy_appl_yn,
	 :p_char1,
	 :p_char2,
	 :p_levy_amt,
	 :p_num2,
	 :nd_error_id,
	 :nd_error_code,
	 :nd_error_text);

END;
END-EXEC;

     if (nd_error_code.arr[0])		
        err_mesg("SELECT failed on BLCORE.BL_MPI_PKG_INS_CHECK",1,nd_error_code.arr);

     if (nd_error_text.arr[0] && strcmp(nd_error_id.arr,'10') == 0 )
	err_mesg(nd_error_text.arr,0,"");




EXEC SQL EXECUTE
BEGIN
	:nd_error_id := null;
	:nd_error_code := null;
	:nd_error_text := null;
//START OLD COMT

IF :m_rate_flag = 'R' then

BLVALID.BLRUL_GET_BLNG_FCTR(
			  :bl_adt_blng_class_code,
			  :nd_day_type,
                          :nd_time_type,
                          :bl_line_blng_serv_code,
                          :m_addl_factor_num,
                          :nd_error_id,
                          :nd_error_code,
                          :nd_error_text);

End if;
//END OLD COMMENT

END;
END-EXEC;

     if (nd_error_code.arr[0])		
        err_mesg("SELECT failed on BLVALID.BLRUL_GET_BLNG_FCTR",1,nd_error_code.arr);

     if (nd_error_text.arr[0] && strcmp(nd_error_id.arr,'10') == 0 )
	err_mesg(nd_error_text.arr,0,"");


EXEC SQL EXECUTE
BEGIN

	:nd_error_id := null;
	:nd_error_code := null;
	:nd_error_text := null;


IF :epfndt_pkg_bill_doc_type IS NOT NULL THEN
	IF :pkg_qv_ind = 'Q' THEN              
		:m_pkg_price := NVL(:pkg_serv_price / :pkg_qv_val,0);
		:m_pkg_val   := NVL(:pkg_serv_price,0);
	ELSE
		:m_pkg_price := NVL(:m_serv_price,0);
		:m_pkg_val   := NVL(:pkg_serv_price,0);
	END IF;	      
END IF;

:m_serv_qty := nvl(:m_base_qty,1);

IF :m_rate_flag = 'C' then 	

	    if nvl(:m_def_charge,0) < nvl(:m_min_charge_amt,0) then 
		:m_def_charge := :m_min_charge_amt;
	    end if;   	    

            :m_base_rate        := NVL(:m_def_charge,0);
            :m_base_charge_amt  := NVL(:m_def_charge,0);
	    
	    if nvl(:m_def_charge,0) < nvl(:bl_line_charge_amt,0) then 
	        :m_def_charge := nvl(:bl_line_charge_amt,0);
	    end if;

            :net_charge_amt     := NVL(:m_def_charge,0);
            :gross_charge_amt   := NVL(:m_def_charge,0);
            :disc_amt	        := 0.00;
            :m_serv_qty         := nvl(:m_base_qty,1);
END IF;


IF :m_rate_flag = 'C' then 
            :m_serv_qty        :=  :m_base_qty;
            :m_addl_factor_num := 1.0000;
            :m_disc_perc := 0.00;

   BLCORE.BL_MPI_CHARGE_INS (  
	      'I',
	      :epfndt_pkg_bill_doc_type, 
	      :ins_flag,			      
	      :pkg_flag, 
	      :pkg_serv_price,
	      :pkg_serv_disc,
	      :m_pkg_price,
	      :m_pkg_val, 
	      :pkg_qv_ind,
	      :pkg_qv_val, 
	      :pkg_qv_availed,
	      :pkg_addl_qty_flag,
	      :pkg_addl_qty,
	      :pkg_addl_qty_availed,
	      :pkg_addl_serv_price,
	      :m_addl_factor_num,
	      :m_serv_price,
	      :m_serv_disc,
 	      :epfndt_policy_type_code,
	      :m_approved_amt, 
	      :m_availed_amt,
	      :copay_perc, 
	      :m_excl_incl_ind, 
	      :m_copay_ind,   
	      :m_copay_val,
	      :m_preapp_yn,
	      :m_serv_qty,
  	      :m_base_qty,
	      :m_base_rate,
	      :m_base_charge_amt,
	      :m_min_charge_amt,
	      :gross_charge_amt,
	      :disc_amt,
	      :net_charge_amt,
	      :m_pat_base_qty,
	      :m_pat_base_rate,
	      :m_pat_serv_qty,
	      :m_pat_base_charge_amt,
	      :m_pat_gross_charge_amt,
	      :m_pat_disc_amt,
	      :m_pat_net_charge_amt,
	      :m_cust_base_qty,
	      :m_cust_base_rate,
	      :m_cust_serv_qty,
	      :m_cust_base_charge_amt,
	      :m_cust_gross_charge_amt,
	      :m_cust_disc_amt,
	      :m_cust_net_charge_amt,
	      :m_split_ind,
	      :m_pkg_ins_pat_ind,
	      :m_canadj_alert_ind,
	      :m_curr_availed,
	      :m_req_pkg_qty,
	      :m_req_addl_qty,
	      :m_req_std_qty,
	      :nd_facility_id,
	      :p_levy_appl_yn,
	      :p_char1,
	      :p_char2,
	      :p_levy_amt,
	      :p_num2,
	      :nd_error_id,
	      :nd_error_code,
	      :nd_error_text) ;
ELSE  

	:m_disc_perc := :m_serv_disc; 

	IF :pkg_qv_val is null THEN
		:pkg_qv_val := 0;
	 END IF;

	 BLCORE.BL_MPI_CALCULATION(
		 'I', 
		 :epfndt_pkg_bill_doc_type,
		 :pkg_flag,
	         :ins_flag,
		 :m_serv_qty,
		 :m_addl_factor_num,	
		 :pkg_serv_price,
		 :pkg_serv_disc,
		 :m_pkg_price,
	         :m_pkg_val,
		 :pkg_qv_ind,
		 :pkg_qv_val,
		 :m_availed_amt,
		 :pkg_addl_qty_flag,
		 :pkg_addl_qty,
	         :pkg_addl_qty_availed,
		 :pkg_addl_serv_price,
		 :m_base_qty,
	         :m_min_charge_amt,
		 :m_serv_price,
		 :m_serv_disc,
		 :m_pat_base_qty,
		 :m_pat_min_charge_amt,
		 :m_pat_serv_price,
	         :m_pat_serv_disc,
		 :epfndt_policy_type_code,
		 :m_approved_amt,
	         :m_availed_amt,
		 :copay_perc,
		 :m_excl_incl_ind,
		 :m_copay_ind,
		 :m_copay_val,
		 :m_preapp_yn,
	         :m_base_qty,
		 :m_base_rate,
		 :m_base_charge_amt,
		 :gross_charge_amt,
		 :disc_amt,
		 :net_charge_amt,			      
		 :m_pat_base_qty,
		 :m_pat_base_rate,
		 :m_pat_serv_qty,
		 :m_pat_base_charge_amt,
		 :m_pat_gross_charge_amt,
		 :m_pat_disc_amt,
		 :m_pat_net_charge_amt,
		 :m_cust_base_qty,
		 :m_cust_base_rate,
		 :m_cust_serv_qty,
		 :m_cust_base_charge_amt,
		 :m_cust_gross_charge_amt,
	         :m_cust_disc_amt,
		 :m_cust_net_charge_amt,
		 :m_split_ind,
	         :m_pkg_ins_pat_ind,
		 :m_req_pkg_qty,
		 :m_req_addl_qty,
	         :m_req_std_qty,
		 :m_curr_availed,
		 :m_canadj_alert_ind,
	         :nd_facility_id,
		 :p_levy_appl_yn,
		 :p_char1,
		 :p_char2,
		 :p_levy_amt,
		 :p_num2,
		 :nd_error_id,
		 :nd_error_code,
		 :nd_error_text) ;
END IF;
END;
END-EXEC;

	if (nd_error_code.arr[0])	
	 err_mesg("SELECT failed on BL_MPI_CHARGE_INS/BL_MPI_CALCULATION",1,nd_error_code.arr);

	if (nd_error_text.arr[0] && strcmp(nd_error_id.arr,'10') == 0 )
	err_mesg(nd_error_text.arr,0,"");

}
*/

insert_patient_charges_folio()
{ 

//disp_message(ERR_MESG,"Inside patient folio........");

EXEC SQL EXECUTE    
BEGIN
	:nd_error_id := null;
	:nd_error_code := null;
	:nd_error_text := null;
		   
	:patfolio_trx_doc_ref := null;

	BLCORE.GENERATE_SEQUENCE_COMMON_PROC
	(:nd_facility_id,'RECU_IP','BL'||'-'||'RECU', :patfolio_trx_doc_ref,:nd_error_text);	
END;
END-EXEC;

  /*l_trx_doc_ref_line_num = 0;*/

  l_trx_doc_ref_line_num = 1;

/*disp_message(ERR_MESG,"PROCESSING........");
disp_message(ERR_MESG,m_service_panel_ind.arr);*/

if (strcmp(m_service_panel_ind.arr,"L") == 0)

{

/*disp_message(ERR_MESG,"Inside the L condition"); */

EXEC SQL EXECUTE   
BEGIN
BL_PROC_FOR_EXT_SERVICE_MP.GET_SERV_PANEL_DTLS(:nd_facility_id,				/*P_FACILITY_ID		IN VARCHAR2,*/
												'BL',								/*P_MODULE_ID		IN VARCHAR2,*/
												NULL,								/*'key',*/
												NULL,								/*'key ln no,*/
												:bl_hdr_episode_type,				/*P_EPISODE_TYPE		IN VARCHAR2,*/
												:bl_hdr_patient_id	,				/*P_PATIENT_ID		IN VARCHAR2,*/
												:bl_hdr_episode_id	,				/*P_EPISODE_ID		IN NUMBER,*/
												NULL				,				/*P_VISIT_ID		IN NUMBER,*/
												:m_encounter_id		,				/*P_ENCOUNTER_ID		IN NUMBER,*/
												:m_cur_acct_seq_no	,				/*P_ACCT_SEQ_NO		IN NUMBER,*/
												TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS'),							/*P_SERVICE_DATE		IN DATE,*/
												NULL,
												:m_service_panel_ind,				/*P_SERV_PANEL_IND	IN VARCHAR2,*/
												:bl_line_blng_serv_code	,			/*P_SERV_PANEL_CODE	IN VARCHAR2,*/
												:bl_line_serv_qty,					/*P_SERV_QTY		IN NUMBER,*/
												NULL,                                                   /*P_CHARGE_BASED_AMT*/
												'P'		,							/*P_PRACT_STAFF_IND	IN VARCHAR2,*/
												NULL	,							/*P_PRACT_STAFF_ID	IN VARCHAR2,*/
												:m_str	,							/*P_STR			OUT VARCHAR2,*/
												:m_charge_based_yn	,
												:m_tot_amt ,	
												:m_pat_payable_amt	,
												:m_excl_incl_ind		,
												:m_preapp_yn		,
												:m_excl_incl_action_ind	,
												:m_action_reason_code	,
												:m_pat_paid_amt		,
												:m_charged_yn,							/*P_CHARGED_YN		OUT VARCHAR2,*/
												:m_pat_billed_yn,						/*P_PAT_BILLED_YN		OUT VARCHAR2,*/
												:m_language_id		,
												:m_error_level		,
												:m_sys_message_id	,
												:nd_error_text	) ;


	if :nd_error_code is not null then 
			:nd_error_id := '10';
			:nd_error_text := blcommon.get_error_text(:nd_error_code);		
		    end if;


			END;
END-EXEC;

	 if (nd_error_text.arr[0] && strcmp(nd_error_code.arr,"10") == 0 )
	    err_mesg(nd_error_text.arr,0,"");	



}
/*disp_message(ERR_MESG,"Fetched the string");

disp_message(ERR_MESG,m_str.arr);*/


EXEC SQL EXECUTE    
BEGIN
BL_PROC_FOR_EXT_SERVICE_MP.POPULATE_INTERFACED_RECS
					('DCF',
					:nd_facility_id,        /*Changed*/
					:bl_hdr_episode_type,   /*Changed*/
					:bl_hdr_patient_id,     /*Changed*/
					:bl_hdr_episode_id,     /*Changed*/
					NULL,                     /*P_TRN_SRL_NO,*/
					:m_encounter_id,         /* Not defined */
					:m_cur_acct_seq_no,       /*Not defined */ 
					NULL,
					NULL,
					'BL',
					:patfolio_trx_doc_ref,
					:l_trx_doc_ref_line_num,             /* Hard coded line No for increment */
					:m_service_panel_ind,                 /* NVL(P_RDNG_SERVICE_PANEL_IND,'S') */
					:bl_line_blng_serv_code,             /* P_RDNG_BLNG_SERV_CODE */
					'DCF',
					NULL,
					NULL,
					:bl_line_serv_qty,
					:bl_line_charge_amt,
					:bl_adt_to_physician_id,    /* P_PHYSICIAN_ID Taken from FETCH_BED_BLNG_SERV */
					TO_DATE(:nd_service_time,'DD/MM/YYYY HH24:MI:SS'),                     /* L_SERV_DATE, Last Bed time or Admsn Time */
					NULL,
					:m_uom_code,                 /* P_UOM_CODE */
					'P',
					NULL,
					NULL,
					:nd_user,
					:nd_ws_no,
					'N',
					'N',
					'RECURRING CHARGES',       /*P_FOLIO_REMARKS*/
					'S',
					'R',
					NULL,
					NULL,
					NULL,
					NULL,
					:nd_error_code,             /*P_ERROR_LEVEL,*/
					:nd_error_id,               /*P_SYS_MESSAGE_ID,*/
					:nd_error_text              /*P_ERROR_TEXT*/
					);
			if :nd_error_code is not null then 
			:nd_error_id := '10';
			:nd_error_text := blcommon.get_error_text(:nd_error_code);		
		    end if;


			END;
END-EXEC;

	 if (nd_error_text.arr[0] && strcmp(nd_error_id.arr,"10") == 0 )
	    err_mesg(nd_error_text.arr,0,"");	



//disp_message(ERR_MESG,"PROCESSED........");

	if (nd_error_text.arr[0])
	err_mesg(nd_error_text.arr,0,"");

/*	disp_message(ERR_MESG,"Starting PROCESS_INTERFACED_REC........");
disp_message(ERR_MESG,"Before displng variable values........");
disp_message(ERR_MESG,nd_facility_id.arr);
disp_message(ERR_MESG,bl_hdr_patient_id.arr);
disp_message(ERR_MESG,bl_hdr_episode_type.arr);
disp_message(ERR_MESG,bl_hdr_episode_id.arr);
disp_message(ERR_MESG,patfolio_trx_doc_ref.arr);
disp_message(ERR_MESG,nd_user.arr);
disp_message(ERR_MESG,nd_ws_no.arr);
disp_message(ERR_MESG,"After displng variable values........");*/


nd_error_code.arr[0] = '\0';
nd_error_id.arr[0] = '\0';
nd_error_text.arr[0] = '\0';


nd_error_code.len = 0;
nd_error_id.len = 0;
nd_error_text.len = 0;


EXEC SQL EXECUTE   
BEGIN

BL_PROC_FOR_EXT_SERVICE_MP.PROCESS_INTERFACED_REC
     (
			:nd_facility_id     ,		/*p_facility_id		in varchar2,*/
			:bl_hdr_patient_id	,		/*p_patient_id		in varchar2,*/
			:bl_hdr_episode_type,		/*p_episode_type		in varchar2,*/
			:bl_hdr_episode_id  ,		/*p_episode_id		in number,*/
			NULL				,		/*p_visit_id		in number,*/
			NULL	,	                /*p_order_id		in varchar2,*/
			'BL'				,		/*p_subs_module_id	in varchar2,*/
			:patfolio_trx_doc_ref,		/*p_subs_regn_num		in varchar2,*/
			:nd_user,
			:nd_ws_no			,		/*p_ws_no			in varchar2,*/
			:nd_error_code,      /*P_ERROR_LEVEL,*/
			:nd_error_id		,      /*P_SYS_MESSAGE_ID,*/
			:nd_error_text      );	   /*P_ERROR_TEXT*/

			if :nd_error_code is not null then 
			:nd_error_id := '10';
			:nd_error_text := blcommon.get_error_text(:nd_error_code);		
		    end if;


			END;
END-EXEC;

	 if (nd_error_text.arr[0] && strcmp(nd_error_code.arr,"10") == 0 )
	   { 
		disp_message(ERR_MESG,nd_error_code.arr);	
		disp_message(ERR_MESG,nd_error_text.arr);	}

}


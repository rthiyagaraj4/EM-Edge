/************************************************************************/
/* OCS MEDICOM VER 1.0                                                */
/************************************************************************/
/* PROGRAM NAME           : BLRPTFOL.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 22-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */  
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                           
#include <stdio.h>
#include <string.h>      
#include "gl.h"             
#include "bl.h"

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define INIT_MESG "Report Generation In Progress"
/*
#define DEBUG 0
*/
#define ESC 0x1B    
#define REP_WIDTH 122 

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [40],
            nd_epi_type                                [2],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15], 
			nd_admission_type						   [3],
            nd_fm_date                                 [21],
            nd_to_date                                 [21],
            nd_fm_epi_no                               [9],
            nd_to_epi_no                               [9],
            nd_fm_visit_no                             [5],
            nd_to_visit_no                             [5],
			nd_temp_date                               [21],
			p_language_id							   [3],
			date_convert							   [21],
			nd_loc_date								   [21],
			nd_temp_date1                              [21],
			date_convert1							   [21],
			nd_loc_date1							   [21],
			nd_facility_id							   [3],
            nd_fm_patient_id                           [21],
            nd_to_patient_id                           [21],
			d_facility_id							   [10],
			nd_episode_type								[10],
			l_added_by_id							   [30],
			l_added_by_date							   [30],
			l_modified_by_id						   [30],
			l_modified_by_date						   [30],
            
			bl_patient_name_loc_lang                   [61],
            bl_patient_name                            [61],
            d_short_name_full                           [61],
			bl_patient_name1						   [31],  
            bl_blng_long_desc                          [31],  
            bl_pkg_long_desc                           [41],
            bl_blng_class_desc                         [16];

   VARCHAR bl_pat_episode_type                         [2], 
           bl_pat_episode_id                           [9],
           bl_pat_visit_id                             [5],
           bl_pat_patient_id                           [21],
           bl_pat_blng_grp_id                          [5],
           bl_pat_package_ind                          [2],
           bl_pat_package_service_code                 [11],
           bl_pat_trx_date                             [13],
           bl_pat_trx_doc_ref                          [21],
           bl_pat_trx_doc_ref_line_num                 [5],
           bl_pat_trx_doc_ref_seq_num                  [5],
           bl_pat_service_date                         [21],
           bl_pat_base_charge_amt                      [23],
           bl_pat_upd_gross_charge_amt                 [23],
           bl_pat_upd_disc_amt                         [23],
           bl_pat_upd_net_charge_amt                   [23],
           bl_pat_module_id                            [3],
           bl_pat_source_doc_ref                       [21],
           bl_pat_source_doc_date                      [13],
		   bl_pat_serv_item_desc                       [41],
           bl_pat_trx_status                           [2],
           bl_pat_rev_adj_trx_ind                      [2],
           bl_pat_blng_class_code                      [3],
           bl_pat_canadj_reason_text                   [51],
		   l_pk_value								   [100],
		   l_translated_value						   [201],
           bl_pat_concat_visit                         [26],
           bl_pat_concat_pkg                           [10];

 double    bl_pat_base_charge_amt_db,
           bl_pat_gross_charge_amt_db,
           bl_pat_disc_amt_db,
           bl_pat_net_charge_amt_db,

           bl_pkg_tot_base_charge_amt,
           bl_pkg_tot_gross_charge_amt,
           bl_pkg_tot_disc_amt,
           bl_pkg_tot_net_charge_amt,

           bl_vis_tot_base_charge_amt,
           bl_vis_tot_gross_charge_amt,
           bl_vis_tot_disc_amt,
           bl_vis_tot_net_charge_amt,
		   
           bl_grn_tot_base_charge_amt,
           bl_grn_tot_gross_charge_amt,
           bl_grn_tot_disc_amt,
           bl_grn_tot_net_charge_amt;



		char loc_legend[999][201];
		int i;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

char       store_concat_visit                          [26],
           store_concat_pkg                            [10];

int    lctr = 0,pctr = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0, trn_ctr = 0, page_skip = 0;

    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRPTFOL");

    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ORA_MESG,"Error in connecting to Oracle\n");
        proc_exit();
    }

	set_meduser_role();
	strcpy(p_language_id.arr,l_language_id.arr);
    p_language_id.len = l_language_id.len;

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    start_prog_msg();

    fetch_prog_param();
	fetch_legend_value();
    declare_cur();
    fetch_hosp_name();
    open_file();
     
    open_cur();

    while(fetch_cur())
    {
       if (rec_ctr == 0)
       {
          print_rec(0);
          print_rec(1);
          strcpy(store_concat_visit,bl_pat_concat_visit.arr);
          strcpy(store_concat_pkg,bl_pat_concat_pkg.arr);
       }
       if (strcmp(store_concat_visit,bl_pat_concat_visit.arr))
       {
            print_epi_vis_tot(1);
            strcpy(store_concat_visit,bl_pat_concat_visit.arr);
            strcpy(store_concat_pkg,bl_pat_concat_pkg.arr);
       }
       else if (strcmp(store_concat_pkg,bl_pat_concat_pkg.arr))
       {
            print_pak_tot(1);
            strcpy(store_concat_pkg,bl_pat_concat_pkg.arr);
       }

       rec_ctr++;
       print_rec(2);
     }
     if (rec_ctr)
        print_grand_tot();

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;

    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

fetch_prog_param() 
{
    nd_epi_type.arr[0]          = '\0';
    nd_fm_date.arr[0]           = '\0';
    nd_to_date.arr[0]           = '\0';
    nd_fm_epi_no.arr[0]         = '\0';
    nd_to_epi_no.arr[0]         = '\0';
    nd_fm_visit_no.arr[0]       = '\0';
    nd_to_visit_no.arr[0]       = '\0';
    nd_fm_patient_id.arr[0]     = '\0';
    nd_to_patient_id.arr[0]     = '\0';
	nd_admission_type.arr[0]	= '\0';

    nd_epi_type.len             = 0;
    nd_fm_date.len              = 0;
    nd_to_date.len              = 0;
    nd_fm_epi_no.len            = 0;
    nd_to_epi_no.len            = 0;
    nd_fm_visit_no.len          = 0;
    nd_to_visit_no.len          = 0;
    nd_fm_patient_id.len        = 0;
    nd_to_patient_id.len        = 0;
	nd_admission_type.len		= 0;

   EXEC SQL SELECT PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,
                   PARAM6,PARAM7,PARAM8,PARAM9, PARAM10,operating_facility_id
              INTO :nd_epi_type,
                   :nd_fm_epi_no,
                   :nd_to_epi_no,
                   :nd_fm_visit_no,
                   :nd_to_visit_no,
                   :nd_fm_patient_id,
                   :nd_to_patient_id,
                   :nd_fm_date,
                   :nd_to_date,
				   :nd_admission_type,
				   :d_facility_id
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;
 

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

    nd_epi_type.arr[nd_epi_type.len]              = '\0';
    nd_fm_date.arr[nd_fm_date.len]                = '\0';
    nd_to_date.arr[nd_to_date.len]                = '\0';
    nd_fm_epi_no.arr[nd_fm_epi_no.len]            = '\0';
    nd_to_epi_no.arr[nd_to_epi_no.len]            = '\0';
    nd_fm_visit_no.arr[nd_fm_visit_no.len]        = '\0';
    nd_to_visit_no.arr[nd_to_visit_no.len]        = '\0';
    nd_fm_patient_id.arr[nd_fm_patient_id.len]    = '\0';
    nd_to_patient_id.arr[nd_to_patient_id.len]    = '\0';

	d_facility_id.arr[d_facility_id.len]		  = '\0';
	strcpy(g_facility_id, d_facility_id.arr);


   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

     /*EXEC SQL DECLARE BL_PAT_CHG_FOLIO_CUR CURSOR FOR
               SELECT EPISODE_TYPE,
                      EPISODE_ID,
                      VISIT_ID,
                      PATIENT_ID,
                      BLNG_GRP_ID,
                      PACKAGE_IND,
                      PACKAGE_SERVICE_CODE,
                      TO_CHAR(TRX_DATE,'DD/MM/YYYY'),
                      TRX_DOC_REF,
                      TRX_DOC_REF_LINE_NUM,
                      TRX_DOC_REF_SEQ_NUM,
                      TO_CHAR(SERVICE_DATE,'DD/MM/YYYY HH24:MI'),
                      TO_CHAR(NVL(BASE_CHARGE_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_GROSS_CHARGE_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_DISC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_NET_CHARGE_AMT,0),'999,999,990.99'),
                      MODULE_ID,
                      SOURCE_DOC_REF,
                      TO_CHAR(SOURCE_DOC_DATE,'DD/MM/YYYY'),
                      BLNG_CLASS_CODE,
                      PACKAGE_IND||PACKAGE_SERVICE_CODE,
                      EPISODE_TYPE||EPISODE_ID||VISIT_ID||PATIENT_ID,
                      NVL(BASE_CHARGE_AMT,0),
                      NVL(UPD_GROSS_CHARGE_AMT,0),
                      NVL(UPD_DISC_AMT,0),
                      NVL(UPD_NET_CHARGE_AMT,0),
					  SERV_ITEM_DESC,
                      TRX_STATUS,
                      REV_ADJ_TRX_IND,
                      CANADJ_REASON_TEXT,  
					  added_by_id,
					  to_char(added_date,'DD/MM/YYYY HH24:MI'),
					  decode(trx_status,'C',modified_by_id,NULL),
					  decode(trx_status,'C',to_char(modified_date,'DD/MM/YYYY HH24:MI'),NULL)
                 FROM BL_PATIENT_CHARGES_FOLIO
                WHERE TRX_DATE >=  TO_DATE(:nd_fm_date,'DD/MM/YYYY')
				  AND TRX_DATE <=  TO_DATE(:nd_to_date,'DD/MM/YYYY')
				  AND    (
					 ( EPISODE_TYPE = :nd_epi_type and :nd_admission_type='N') //is null
				  or ( :nd_epi_type = 'I' and :nd_admission_type is not null and 
	   				episode_id in (select episode_id from ip_episode   b
	  			 			where admission_type_code = :nd_admission_type))
					)
				  AND EPISODE_ID >= NVL(:nd_fm_epi_no,0) 
                  AND EPISODE_ID <= NVL(:nd_to_epi_no,99999999)     
				  AND VISIT_ID	 >= NVL(:nd_fm_visit_no,0) 
                  AND VISIT_ID	 <= NVL(:nd_to_visit_no,9999)
				  AND PATIENT_ID >= NVL(:nd_fm_patient_id,'!!!!!!!!!!') 
                  AND PATIENT_ID <= NVL(:nd_to_patient_id,'~~~~~~~~~~')
				  AND TRX_FINALIZE_IND = 'Y'
				  AND NVL(operating_facility_id,'X') = NVL(:d_facility_id,'X')
                  AND ((PACKAGE_IND = 'P' AND PACKAGE_TRX_IND = 'Y') OR PACKAGE_IND = 'S')
                ORDER 
				   BY EPISODE_TYPE,	
					  EPISODE_ID,
					  VISIT_ID,
					  PATIENT_ID,
                      PACKAGE_IND,
					  PACKAGE_SERVICE_CODE,
					  TRUNC(TRX_DATE),TRX_DOC_REF,
                      TRX_DOC_REF_LINE_NUM,
					  TRX_DOC_REF_SEQ_NUM;*/



		EXEC SQL DECLARE BL_PAT_CHG_FOLIO_CUR CURSOR FOR
               SELECT EPISODE_TYPE,
                      EPISODE_ID,
                      VISIT_ID,
                      PATIENT_ID,
                      BLNG_GRP_ID,
                      PACKAGE_IND,
                      PACKAGE_SERVICE_CODE,
                      TO_CHAR(TRX_DATE,'DD/MM/YYYY'),
                      TRX_DOC_REF,
                      TRX_DOC_REF_LINE_NUM,
                      TRX_DOC_REF_SEQ_NUM,
                      TO_CHAR(SERVICE_DATE,'DD/MM/YYYY HH24:MI'),
                      TO_CHAR(NVL(BASE_CHARGE_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_GROSS_CHARGE_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_DISC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(UPD_NET_CHARGE_AMT,0),'999,999,990.99'),
                      MODULE_ID,
                      SOURCE_DOC_REF,
                      TO_CHAR(SOURCE_DOC_DATE,'DD/MM/YYYY'),
                      BLNG_CLASS_CODE,
                      PACKAGE_IND||PACKAGE_SERVICE_CODE,
                      EPISODE_TYPE||EPISODE_ID||VISIT_ID||PATIENT_ID,
                      NVL(BASE_CHARGE_AMT,0),
                      NVL(UPD_GROSS_CHARGE_AMT,0),
                      NVL(UPD_DISC_AMT,0),
                      NVL(UPD_NET_CHARGE_AMT,0),
					  SERV_ITEM_DESC,
                      TRX_STATUS,
                      REV_ADJ_TRX_IND,
                      CANADJ_REASON_TEXT,  
					  added_by_id,
					  to_char(added_date,'DD/MM/YYYY HH24:MI'),
					  decode(trx_status,'C',modified_by_id,NULL),
					  decode(trx_status,'C',to_char(modified_date,'DD/MM/YYYY HH24:MI'),NULL)
                 FROM BL_PATIENT_CHARGES_FOLIO
                WHERE TRX_DATE >=  TO_DATE(:nd_fm_date,'DD/MM/YYYY')
				  AND TRX_DATE <=  TO_DATE(:nd_to_date,'DD/MM/YYYY')
				  AND (
						( EPISODE_TYPE = :nd_epi_type and nvl(:nd_admission_type,'N') ='N')
							or ( :nd_epi_type = 'I' and :nd_admission_type ='Y' and 
								package_trx_ind is not null and 
	   						episode_id in (select distinct episode_id from BL_PATIENT_CHARGES_FOLIO   b
	  			 			where TRX_DATE >=  TO_DATE(:nd_fm_date,'DD/MM/YYYY')
							AND TRX_DATE <=  TO_DATE(:nd_to_date,'DD/MM/YYYY')
							AND EPISODE_ID >= NVL(:nd_fm_epi_no,0) 
							AND EPISODE_ID <= NVL(:nd_to_epi_no,99999999)     
							AND VISIT_ID	 >= NVL(:nd_fm_visit_no,0) 
							AND VISIT_ID	 <= NVL(:nd_to_visit_no,9999)
							AND PATIENT_ID >= NVL(:nd_fm_patient_id,'!!!!!!!!!!') 
							AND PATIENT_ID <= NVL(:nd_to_patient_id,'~~~~~~~~~~')
				  			AND TRX_FINALIZE_IND = 'Y'
							AND TRX_STATUS IS NULL 
				  			AND NVL(operating_facility_id,'X') = NVL(:d_facility_id,'X'))))
				  AND (EPISODE_ID >= NVL(:nd_fm_epi_no,0) 
                  AND EPISODE_ID <= NVL(:nd_to_epi_no,99999999) )    
				  AND (VISIT_ID	 >= NVL(:nd_fm_visit_no,0) 
                  AND VISIT_ID	 <= NVL(:nd_to_visit_no,9999))
				  AND (PATIENT_ID >= NVL(:nd_fm_patient_id,'!!!!!!!!!!') 
                  AND PATIENT_ID <= NVL(:nd_to_patient_id,'~~~~~~~~~~'))
				  AND TRX_FINALIZE_IND = 'Y'
				  AND NVL(operating_facility_id,'X') = NVL(:d_facility_id,'X')
                  AND ((PACKAGE_IND = 'P' AND PACKAGE_TRX_IND = 'Y') OR PACKAGE_IND = 'S')
                ORDER 
				   BY EPISODE_TYPE,	
					  EPISODE_ID,
					  VISIT_ID,
					  PATIENT_ID,
                      PACKAGE_IND,
					  PACKAGE_SERVICE_CODE,
					  TRUNC(TRX_DATE),TRX_DOC_REF,
                      TRX_DOC_REF_LINE_NUM,
					  TRX_DOC_REF_SEQ_NUM;


    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              //SELECT SUBSTR(SHORT_NAME_LOC_LANG,1,16),   prad
                   /*  substr(SHORT_NAME,1,30),
					 decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname2 ,
                     */
				//	  short_name   prad
		SELECT 
			decode(:p_language_id,'en', substr(short_name,1,30),substr(SHORT_NAME_LOC_LANG,1,30)),
			null
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_pat_patient_id;

    EXEC SQL DECLARE BL_BLNG_GRP_CUR CURSOR FOR
              SELECT LONG_DESC
                FROM BL_BLNG_GRP_lang_vw
               WHERE BLNG_GRP_ID = :bl_pat_blng_grp_id
			   and language_id=:p_language_id;

    EXEC SQL DECLARE BL_PACKAGE_HDR_CUR CURSOR FOR
              SELECT LOC_LANG_LONG_DESC
                FROM BL_PACKAGE_HDR
               WHERE PACKAGE_CODE = :bl_pat_package_service_code;
			   

    EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR
              SELECT LONG_DESC
                FROM BL_BLNG_SERV_lang_vw
               WHERE BLNG_SERV_CODE = :bl_pat_package_service_code
			   and language_id=:p_language_id;

    EXEC SQL DECLARE BL_BLNG_CLASS_CUR CURSOR FOR
              SELECT SHORT_DESC
                FROM BL_BLNG_CLASS_lang_vw
               WHERE BLNG_CLASS_CODE = :bl_pat_blng_class_code
			   and language_id=:p_language_id;
}

open_cur()
{
    EXEC SQL OPEN BL_PAT_CHG_FOLIO_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");
}

fetch_cur()
{
	bl_pat_episode_type.arr[0]                                        = '\0';
	bl_pat_episode_id.arr[0]                                          = '\0';
	bl_pat_visit_id.arr[0]                                            = '\0';
	bl_pat_patient_id.arr[0]                                          = '\0';
	bl_pat_blng_grp_id.arr[0]                                         = '\0';
	bl_pat_package_ind.arr[0]                                         = '\0';
	bl_pat_package_service_code.arr[0]                                = '\0';
	bl_pat_trx_date.arr[0]                                            = '\0';
	bl_pat_trx_doc_ref.arr[0]                                         = '\0';
	bl_pat_trx_doc_ref_line_num.arr[0]                                = '\0';
	bl_pat_trx_doc_ref_seq_num.arr[0]                                 = '\0';
	bl_pat_service_date.arr[0]                                        = '\0';
	bl_pat_base_charge_amt.arr[0]                                     = '\0';
	bl_pat_upd_gross_charge_amt.arr[0]                                = '\0';
	bl_pat_upd_disc_amt.arr[0]                                        = '\0';
	bl_pat_upd_net_charge_amt.arr[0]                                  = '\0';
	bl_pat_module_id.arr[0]                                           = '\0';
	bl_pat_source_doc_ref.arr[0]                                      = '\0';
	bl_pat_source_doc_date.arr[0]                                     = '\0';
	bl_pat_blng_class_code.arr[0]                                     = '\0';
	bl_pat_concat_visit.arr[0]                                        = '\0';
	bl_pat_concat_pkg.arr[0]                                          = '\0';
	bl_pat_serv_item_desc.arr[0]                                      = '\0';
	bl_pat_trx_status.arr[0]                                          = '\0';
	bl_pat_rev_adj_trx_ind.arr[0]                                     = '\0';
	bl_pat_canadj_reason_text.arr[0]                                  = '\0';

	bl_pat_episode_type.len                                           = 0;
	bl_pat_episode_id.len                                             = 0;
	bl_pat_visit_id.len                                               = 0;
	bl_pat_patient_id.len                                             = 0;
	bl_pat_blng_grp_id.len                                            = 0;
	bl_pat_package_ind.len                                            = 0;
	bl_pat_package_service_code.len                                   = 0;
	bl_pat_trx_date.len                                               = 0;
	bl_pat_trx_doc_ref.len                                            = 0;
	bl_pat_trx_doc_ref_line_num.len                                   = 0;
	bl_pat_trx_doc_ref_seq_num.len                                    = 0;
	bl_pat_service_date.len                                           = 0;
	bl_pat_base_charge_amt.len                                        = 0;
	bl_pat_upd_gross_charge_amt.len                                   = 0;
	bl_pat_upd_disc_amt.len                                           = 0;
	bl_pat_upd_net_charge_amt.len                                     = 0;
	bl_pat_module_id.len                                              = 0;
	bl_pat_source_doc_ref.len                                         = 0;
	bl_pat_source_doc_date.len                                        = 0;
	bl_pat_blng_class_code.len                                        = 0;
	bl_pat_concat_visit.len                                           = 0;
	bl_pat_concat_pkg.len                                             = 0;
	bl_pat_serv_item_desc.len                                         = 0;
	bl_pat_trx_status.len                                             = 0;
	bl_pat_rev_adj_trx_ind.len                                        = 0;
	bl_pat_canadj_reason_text.len                                     = 0;

	bl_pat_base_charge_amt_db                                         = 0;
	bl_pat_gross_charge_amt_db                                        = 0;
	bl_pat_disc_amt_db                                                = 0;
	bl_pat_net_charge_amt_db                                          = 0;

     EXEC SQL FETCH BL_PAT_CHG_FOLIO_CUR
               INTO :bl_pat_episode_type,
                    :bl_pat_episode_id,
                    :bl_pat_visit_id,
                    :bl_pat_patient_id,
                    :bl_pat_blng_grp_id,
                    :bl_pat_package_ind,
                    :bl_pat_package_service_code,
                    :bl_pat_trx_date,
                    :bl_pat_trx_doc_ref,
                    :bl_pat_trx_doc_ref_line_num,
                    :bl_pat_trx_doc_ref_seq_num,
                    :bl_pat_service_date,
                    :bl_pat_base_charge_amt,
                    :bl_pat_upd_gross_charge_amt,
                    :bl_pat_upd_disc_amt,
                    :bl_pat_upd_net_charge_amt,
                    :bl_pat_module_id,
                    :bl_pat_source_doc_ref,
                    :bl_pat_source_doc_date,
                    :bl_pat_blng_class_code,
                    :bl_pat_concat_pkg,
                    :bl_pat_concat_visit,
                    :bl_pat_base_charge_amt_db,
                    :bl_pat_gross_charge_amt_db,
                    :bl_pat_disc_amt_db,
                    :bl_pat_net_charge_amt_db,
                    :bl_pat_serv_item_desc,
                    :bl_pat_trx_status,
                    :bl_pat_rev_adj_trx_ind,
                    :bl_pat_canadj_reason_text,
					:l_added_by_id,
					:l_added_by_date,
					:l_modified_by_id,
					:l_modified_by_date;

      if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");

	bl_pat_episode_type.arr[bl_pat_episode_type.len]                         = '\0';
	bl_pat_episode_id.arr[bl_pat_episode_id.len]                             = '\0';
	bl_pat_visit_id.arr[bl_pat_visit_id.len]                                 = '\0';
	bl_pat_patient_id.arr[bl_pat_patient_id.len]                             = '\0';
	bl_pat_blng_grp_id.arr[bl_pat_blng_grp_id.len]                           = '\0';
	bl_pat_package_ind.arr[bl_pat_package_ind.len]                           = '\0';
	bl_pat_package_service_code.arr[bl_pat_package_service_code.len]         = '\0';
	bl_pat_trx_date.arr[bl_pat_trx_date.len]                                 = '\0';
	bl_pat_trx_doc_ref.arr[bl_pat_trx_doc_ref.len]                           = '\0';
	bl_pat_trx_doc_ref_line_num.arr[bl_pat_trx_doc_ref_line_num.len]         = '\0';
	bl_pat_service_date.arr[bl_pat_service_date.len]                         = '\0';
	bl_pat_trx_doc_ref_seq_num.arr[bl_pat_trx_doc_ref_seq_num.len]           = '\0';
	bl_pat_base_charge_amt.arr[bl_pat_base_charge_amt.len]                   = '\0';
	bl_pat_upd_gross_charge_amt.arr[bl_pat_upd_gross_charge_amt.len]         = '\0';
	bl_pat_upd_disc_amt.arr[bl_pat_upd_disc_amt.len]                         = '\0';
	bl_pat_upd_net_charge_amt.arr[bl_pat_upd_net_charge_amt.len]             = '\0';
	bl_pat_module_id.arr[bl_pat_module_id.len]                               = '\0';
	bl_pat_source_doc_ref.arr[bl_pat_source_doc_ref.len]                     = '\0';
	bl_pat_source_doc_date.arr[bl_pat_source_doc_date.len]                   = '\0';
	bl_pat_blng_class_code.arr[bl_pat_blng_class_code.len]                   = '\0';
	bl_pat_concat_visit.arr[bl_pat_concat_visit.len]                         = '\0';
	bl_pat_concat_pkg.arr[bl_pat_concat_pkg.len]                             = '\0';
	bl_pat_serv_item_desc.arr[bl_pat_serv_item_desc.len]                     = '\0';
	bl_pat_trx_status.arr[bl_pat_trx_status.len]                             = '\0';
	bl_pat_rev_adj_trx_ind.arr[bl_pat_rev_adj_trx_ind.len]                   = '\0';
	bl_pat_canadj_reason_text.arr[bl_pat_canadj_reason_text.len]             = '\0';
	l_added_by_id.arr[l_added_by_id.len]									 = '\0';	
	l_added_by_date.arr[l_added_by_date.len]								 = '\0';
	l_modified_by_id.arr[l_modified_by_id.len]								 = '\0';
	l_modified_by_date.arr[l_modified_by_date.len]							 = '\0';
    
	return(LAST_ROW?0:1);
}

fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_name1.arr[0]                    = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_name1.len                       = 0;

    EXEC SQL FETCH BL_PAT_NAME_CUR
              INTO :bl_patient_name_loc_lang,
                   /*:bl_patient_name,
				   :bl_patient_name1,*/
                   :d_short_name_full;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_name1.arr[bl_patient_name1.len] = '\0';
      d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
      str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name1    := :bl_patient_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_name1.arr[bl_patient_name1.len]  = '\0';


    EXEC SQL OPEN BL_BLNG_GRP_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_GRP_CUR",0,"");

    bl_blng_long_desc.arr[0]                                          = '\0';
    bl_blng_long_desc.len                                             = 0;

    EXEC SQL FETCH BL_BLNG_GRP_CUR
              INTO :bl_blng_long_desc;

   if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_GRP_CUR",0,"");

   bl_blng_long_desc.arr[bl_blng_long_desc.len]                       = '\0';


}

fetch_serv_desc()  
{

    bl_pkg_long_desc.arr[0]                                           = '\0';
    bl_pkg_long_desc.len                                              = 0;

    if (bl_pat_package_ind.arr[0] == 'P')  //  if its panel 
    {
        EXEC SQL OPEN BL_PACKAGE_HDR_CUR;
        if (OERROR)
             err_mesg("OPEN failed on cursor BL_PACKAGE_HDR_CUR",0,"");
   
        EXEC SQL FETCH BL_PACKAGE_HDR_CUR
                  INTO :bl_pkg_long_desc;

        if (OERROR)
             err_mesg("FETCH failed on cursor BL_PACKAGE_HDR_CUR",0,"");
   }
   else if (bl_pat_package_ind.arr[0] == 'S')   //if its service 
   {
        EXEC SQL OPEN BL_BLNG_SERV_CUR;
        if (OERROR)
             err_mesg("OPEN failed on cursor BL_BLNG_SERV_CUR",0,"");
   
        EXEC SQL FETCH BL_BLNG_SERV_CUR
                  INTO :bl_pkg_long_desc;

        if (OERROR)
             err_mesg("FETCH failed on cursor BL_BLNG_SERV_CUR",0,"");
   }

   bl_pkg_long_desc.arr[bl_pkg_long_desc.len]                      = '\0';

}

fetch_dtls1()
{
    EXEC SQL OPEN BL_BLNG_CLASS_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_CLASS_CUR",0,"");

    bl_blng_class_desc.arr[0]                                          = '\0';
    bl_blng_class_desc.len                                             = 0;

    EXEC SQL FETCH BL_BLNG_CLASS_CUR
              INTO :bl_blng_class_desc;

   if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_CLASS_CUR",0,"");

   bl_blng_class_desc.arr[bl_blng_class_desc.len]                       = '\0';
}

print_rec(ind)
int ind;
{

  if (ind == 0)
  {
      fetch_dtls(); //to fetch the patient name  and bliing desc 
      if (lctr > 35) //51
          print_head();

      fprintf(fp,"%-16.16s   :  %1s ",loc_legend[220],bl_pat_episode_type.arr);
      switch (bl_pat_episode_type.arr[0])
      {
         case 'I' : fprintf(fp,"%-6.6s",loc_legend[360]);
                    break;

         case 'D' : fprintf(fp,"%-6.6s",loc_legend[350]);
                    break;

         case 'O' : fprintf(fp,"%-6.6s",loc_legend[340]);
                    break;

         case 'E' : fprintf(fp,"%-6.6s",loc_legend[330]);
                     break;

         case 'R' : fprintf(fp,"%-6.6s",loc_legend[430]);
                    break;

         default  : fprintf(fp,"   ");
                    break;
      }  
	  if(bl_pat_episode_type.arr[0] =='O' ||bl_pat_episode_type.arr[0] =='E')
	  {
      fprintf(fp,"               %-15.15s : %-8s        %-13.13s : %-4s\n",loc_legend[100],bl_pat_episode_id.arr,loc_legend[110],bl_pat_visit_id.arr);
      }
	  else if(bl_pat_episode_type.arr[0] =='I' ||bl_pat_episode_type.arr[0] =='D')
	  {
      fprintf(fp,"               %-15.15s : %-8s        \n",loc_legend[100],bl_pat_episode_id.arr);
      }

	  fprintf(fp,"%-15.15s    :  %-20s %-16.16s %-30.30s\n",loc_legend[90],
				bl_pat_patient_id.arr,
                bl_patient_name_loc_lang.arr,
                bl_patient_name.arr);
      if(strlen(bl_patient_name1.arr) > 2)
		{
		 fprintf(fp,"%55s %s \n"," ",bl_patient_name1.arr);
		 lctr++;
        }

  
     fprintf(fp,"%-18.18s :  %-4s %-30s\n",loc_legend[420],
                bl_pat_blng_grp_id.arr, bl_blng_long_desc.arr);
     lctr+=5;
   }
   else if (ind == 1)
   {
     if (lctr > 37) //53
          print_head();

     fetch_serv_desc();  //fetch the desc of  panel or Service 

     fprintf(fp,"%-19.19s:  %1s %-10s %-40s\n\n",loc_legend[410],
                bl_pat_package_ind.arr,
                bl_pat_package_service_code.arr,
                bl_pkg_long_desc.arr);
     lctr+=2;
   }
   else if (ind == 2)
   {
      if (lctr > 36) //52
          print_head();

     fetch_dtls1();            //to fetch the Billing class desc 
	 /*fprintf(fp,"   %-10s %-20s/%-4s/%-4s  %-16s             ",
	 //%s %s %s %s 
                date_convert.arr,
                bl_pat_trx_doc_ref.arr,
                bl_pat_trx_doc_ref_line_num.arr,
                bl_pat_trx_doc_ref_seq_num.arr,
                bl_pat_service_date.arr);*/
	
	if(bl_pat_trx_date.arr[0]!='\0')
	{
	   init_date_temp_var();
       strcpy(date_convert.arr,bl_pat_trx_date.arr);
	   fun_change_loc_date();
	  
	   }
	   fprintf(fp,"   %-10s %-20s/%-4s/%-4s  ",
	            date_convert.arr,
                bl_pat_trx_doc_ref.arr,
                bl_pat_trx_doc_ref_line_num.arr,
                bl_pat_trx_doc_ref_seq_num.arr);
				
	if(bl_pat_service_date.arr[0]!='\0')
	{
	   init_date_temp_var();
       strcpy(date_convert1.arr,bl_pat_service_date.arr);
	   fun_change_loc_date1();

	   }
       fprintf(fp,"%-16s%-13s",  date_convert1.arr,"");
	   
				print_formated(bl_pat_base_charge_amt_db);
				//fprintf(fp," ");
				print_formated(bl_pat_gross_charge_amt_db);
				//fprintf(fp," ");
                print_formated(bl_pat_disc_amt_db);
				//fprintf(fp," ");
                print_formated(bl_pat_net_charge_amt_db);
				
	fprintf(fp,"   %1s   %1s\n\
               %-2s  %-40.40s  %-2s %-15.15s      %-50.50s\n",
                bl_pat_trx_status.arr,
                bl_pat_rev_adj_trx_ind.arr,
                bl_pat_module_id.arr,
                bl_pat_serv_item_desc.arr,
                bl_pat_blng_class_code.arr,
                bl_blng_class_desc.arr,
                bl_pat_canadj_reason_text.arr);

 //fprintf(fp,"   %-30s             %-25s                   %-30s %-25s\n\n",l_added_by_id.arr,l_added_by_date.arr,l_modified_by_id.arr, l_modified_by_date.arr);
	 init_date_temp_var();
     strcpy(date_convert1.arr,l_added_by_date.arr);
	 fun_change_loc_date1();
	 fprintf(fp,"   %-30s             %-25s ",l_added_by_id.arr,date_convert1.arr);
	if(l_modified_by_date.arr[0]!='\0')
	{
	 init_date_temp_var();
     strcpy(date_convert1.arr,l_modified_by_date.arr);
	 fun_change_loc_date1();
	 }
	 fprintf(fp,"                   %-30s %-25s\n\n",l_modified_by_id.arr, date_convert1.arr);
	 lctr+=4;

     bl_pkg_tot_base_charge_amt  += bl_pat_base_charge_amt_db;
     bl_pkg_tot_gross_charge_amt += bl_pat_gross_charge_amt_db;
     bl_pkg_tot_disc_amt         += bl_pat_disc_amt_db;
     bl_pkg_tot_net_charge_amt   += bl_pat_net_charge_amt_db;
   }

   fflush(fp);
}

print_pak_tot(l_flg)
int l_flg;
{
    if (lctr > 36) //52
       print_head();

    fprintf(fp,"%74s    --------------- ----------------- ----------------- -----------------\n"," ");
    fprintf(fp,"%38s%-19.19s                  "," ",loc_legend[210]);
	//fprintf(fp,"%38s                %-19.19s  "," ",loc_legend[210]);
    print_formated(bl_pkg_tot_base_charge_amt);// fprintf(fp," ");
    print_formated(bl_pkg_tot_gross_charge_amt);// fprintf(fp," ");
    print_formated(bl_pkg_tot_disc_amt);// fprintf(fp," ");
    print_formated(bl_pkg_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%74s    --------------- ----------------- ----------------- -----------------\n"," ");
    lctr +=3;

     bl_vis_tot_base_charge_amt  += bl_pkg_tot_base_charge_amt;
     bl_vis_tot_gross_charge_amt += bl_pkg_tot_gross_charge_amt;
     bl_vis_tot_disc_amt         += bl_pkg_tot_disc_amt;
     bl_vis_tot_net_charge_amt   += bl_pkg_tot_net_charge_amt;

     bl_pkg_tot_base_charge_amt = 0;
     bl_pkg_tot_gross_charge_amt = 0;
     bl_pkg_tot_disc_amt = 0;
     bl_pkg_tot_net_charge_amt = 0;

    if (l_flg)
       print_rec(1);
}

print_epi_vis_tot(l_flg)
int l_flg;
{
    print_pak_tot(0);

    if (lctr > 36) //52
       print_head();

    fprintf(fp,"%74s    --------------- ----------------- ----------------- -----------------\n"," ");
    fprintf(fp,"%38s%-19.19s                  "," ",loc_legend[200]);
    print_formated(bl_vis_tot_base_charge_amt);// fprintf(fp," ");
    print_formated(bl_vis_tot_gross_charge_amt);// fprintf(fp," ");
    print_formated(bl_vis_tot_disc_amt);// fprintf(fp," ");
    print_formated(bl_vis_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%74s    --------------- ----------------- ----------------- -----------------\n"," ");
    lctr +=3;

    bl_grn_tot_base_charge_amt  += bl_vis_tot_base_charge_amt;
    bl_grn_tot_gross_charge_amt += bl_vis_tot_gross_charge_amt;
    bl_grn_tot_disc_amt         += bl_vis_tot_disc_amt;
    bl_grn_tot_net_charge_amt   += bl_vis_tot_net_charge_amt;

    bl_vis_tot_base_charge_amt = 0;
    bl_vis_tot_gross_charge_amt = 0;
    bl_vis_tot_disc_amt = 0;
    bl_vis_tot_net_charge_amt = 0;

    if (l_flg)
    {
       print_head();
       print_rec(0);
    }
}

print_grand_tot()
{
    print_epi_vis_tot(0);

    if (lctr > 36) //52
       print_head();

    fprintf(fp,"%74s    --------------- ----------------- ----------------- -----------------\n"," ");
    fprintf(fp,"%38s%-16.16s                     "," ",loc_legend[190]);
    print_formated(bl_grn_tot_base_charge_amt); //fprintf(fp," ");
    print_formated(bl_grn_tot_gross_charge_amt);// fprintf(fp," ");
    print_formated(bl_grn_tot_disc_amt);// fprintf(fp," ");
    print_formated(bl_grn_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%74s    --------------- ----------------- ----------------- -----------------\n"," ");
    lctr +=3;
}

end_of_rep()
{
fprintf(fp,"\n\n                                                      ***  %-18s ***\n",loc_legend[480]);
fflush(fp);
}

open_file()
{
	char filename[150];
    strcpy(filename,WORKING_DIR);
    strcat(filename,"blrptfol.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrptfol.lis");
       proc_exit();
    }

    print_title();
    print_head();
}

print_title()
{
nd_episode_type.arr[0] ='\0';
nd_episode_type.len =0;

 	init_date_temp_var();
    strcpy(date_convert1.arr,date_time.arr);
	fun_change_loc_date1();

fprintf(fp,"%c&l1O",ESC);   /* To Print Landscape           */
fprintf(fp,"%c(s14H",ESC); 	/* To set the font size			*/

EXEC SQL SELECT DECODE(:nd_epi_type,'I','Inpatient','O','Outpatient','R','External','E','Emergency','D','Daycare') 
    into :nd_episode_type from dual;


	fprintf(fp,"%6.6s : %-5.5s%45s%-32s                      %20s\n",loc_legend[270],loc_legend[150],"  ",hosp_name.arr,date_convert1.arr);
	fprintf(fp,"%6.6s : %-10s \n",loc_legend[460], user_id.arr);
	fprintf(fp,"%6.6s : %-12.12s                           %40s                       %15.15s : %4d\n",loc_legend[470],loc_legend[40],loc_legend[50],loc_legend[30],++pctr);
	fprintf(fp,"-------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp,"%6.6s : 4.1\n",loc_legend[500]);
	fflush(fp);

	fprintf(fp,"\n\n\n\n        %22s :\n        -----------------------\n\n",loc_legend[450]);
	fprintf(fp,"                  %-20.20s                   : %s\n\n",loc_legend[220],nd_episode_type.arr);

  
	if(nd_epi_type.arr[0] =='I' ||nd_epi_type.arr[0] =='O'||nd_epi_type.arr[0] =='D'||nd_epi_type.arr[0] =='E')
	{
	if(nd_fm_epi_no.arr[0] == '\0')
	fprintf(fp,"                  %-20.20s        %-10.10s : %-10s\n",loc_legend[100],loc_legend[60],loc_legend[510]);
	else
	fprintf(fp,"                  %-20.20s        %-10.10s : %s\n",loc_legend[100],loc_legend[60],nd_fm_epi_no.arr);
	if(nd_to_epi_no.arr[0] == '\0')
    fprintf(fp,"                                              %-10.10s : %-12s\n\n",loc_legend[70],loc_legend[520]);
	else
	fprintf(fp,"                                              %-10.10s : %s\n\n",loc_legend[70],nd_to_epi_no.arr);
    }
	if(nd_epi_type.arr[0] =='O' ||nd_epi_type.arr[0] =='E')
	{
	if(nd_fm_visit_no.arr[0] == '\0')
	fprintf(fp,"                  %-20.20s        %-10.10s : %-10s\n",loc_legend[110],loc_legend[60],loc_legend[510]);
	else
	fprintf(fp,"                  %-20.20s        %-10.10s : %s\n",loc_legend[110],loc_legend[60],nd_fm_visit_no.arr);
	if(nd_to_visit_no.arr[0] == '\0')
	fprintf(fp,"                                              %-10.10s : %-12s\n\n",loc_legend[70],loc_legend[520]);
	else
	fprintf(fp,"                                              %-10.10s : %s\n\n",loc_legend[70],nd_to_visit_no.arr);
    }
	if(nd_fm_patient_id.arr[0] == '\0')
	fprintf(fp,"                  %-20.20s        %-10.10s : %-10s\n",loc_legend[90],loc_legend[60],loc_legend[510]);
	else
	fprintf(fp,"                  %-20.20s        %-10.10s : %s\n",loc_legend[90],loc_legend[60],nd_fm_patient_id.arr);
	if(nd_to_patient_id.arr[0] == '\0')
	fprintf(fp,"                                              %-10.10s : %-12s\n\n",loc_legend[70],loc_legend[520]);
	else
	fprintf(fp,"                                              %-10.10s : %s\n\n",loc_legend[70],nd_to_patient_id.arr);
	if(nd_fm_date.arr[0] != '\0')
	{
	 init_date_temp_var();
     strcpy(date_convert.arr,nd_fm_date.arr);
	 fun_change_loc_date();
	fprintf(fp,"                  %-10.10s                  %-10.10s : %s\n",loc_legend[80],loc_legend[60],date_convert.arr);
	}

	else

	fprintf(fp,"                  %-10.10s                  %-10.10s : %s\n",loc_legend[80],loc_legend[60],loc_legend[510]);

	 if(nd_to_date.arr[0] != '\0')
	 {
	 init_date_temp_var();
     strcpy(date_convert.arr,nd_to_date.arr);
	 fun_change_loc_date();
	fprintf(fp,"                                              %-10.10s : %s\n\n",loc_legend[70],date_convert.arr);
	}

	else

	fprintf(fp,"                                              %-10.10s : %s\n\n",loc_legend[70],loc_legend[520]);
nd_episode_type.arr[nd_episode_type.len] = '\0';
}


print_head()
{
/*fprintf(fp,"   %10.10s TRX DOC REF/LINE                SERVICE DATE TIME               BASE CHARGE    GROSS CHARGE        DISC AMT      NET CHARGE  STAT REV/\n");
	fprintf(fp,"              MDL  SERVICE ITEM DESC                         BILLING CLASS      CANCEL/ADJUSTMENT  REMARKS                                      ADJ\n");
	fprintf(fp,"   SERVICE REQUESTED BY                       SERVICE REQUEST DATE TIME       CANCELLED BY                       CANCELLED DATE TIME               \n");*/
	init_date_temp_var();
    strcpy(date_convert1.arr,date_time.arr);
	fun_change_loc_date1();
	fprintf(fp,"\f%6.6s : %-5.5s                                                           %-30s                                        %-15s\n",loc_legend[270],loc_legend[150],hosp_name.arr,date_convert1.arr);
	fprintf(fp,"%6.6s : %-10s \n",loc_legend[460], user_id.arr);
	fprintf(fp,"%6.6s : %-12.12s                                   %46s                                          %-8.8s : %4d\n",loc_legend[470],loc_legend[40],loc_legend[50],loc_legend[30],++pctr);
	fprintf(fp,"-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp,"   %-10.10s %-15.15s%-15.15s  %-11.11s%-7.7s%-7.7s  %20.20s %17.17s %17.17s %17.17s %9.9s/  \n",loc_legend[120],loc_legend[130],loc_legend[140],loc_legend[160],loc_legend[80],loc_legend[170],loc_legend[180],loc_legend[230],loc_legend[240],loc_legend[250],loc_legend[260]);
	fprintf(fp,"              %4.4s %-11.11s %-25.25s    %-20.20s %21.21s  %-25.25s   %23.23s\n",loc_legend[270],loc_legend[160],loc_legend[280],loc_legend[290],loc_legend[300],loc_legend[310],loc_legend[320]);
	fprintf(fp,"   %-11.11s %-20.20s           %-9.9s %-10.10s %-6.6s %-6.6s     %15.15s %-5.5s              %12.12s %-6.6s %-6.6s       \n",loc_legend[160],loc_legend[370],loc_legend[160],loc_legend[380],loc_legend[80],loc_legend[170],loc_legend[390],loc_legend[400],loc_legend[390],loc_legend[80],loc_legend[170]);
	fprintf(fp,"-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
	fflush(fp);
	lctr = 11;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, 
					:date_time, 
					:user_id
               FROM SY_ACC_ENTITY_LANG_VW
			  WHERE acc_entity_id = :d_facility_id
			  and language_id=:p_language_id;

    if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	user_id.arr[user_id.len]               = '\0';
}

print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      /*sprintf(out_str,"%15.2f",loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);*/

      put_val(out_str1,loc_amount);
      format_amt(out_str1);
      fprintf(fp,"%18s",out_str1);
   }
   else
   {
      /*sprintf(out_str,"%15.2f",-loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);*/

      put_val(out_str1,-loc_amount);
      format_amt(out_str1);
	  fprintf(fp,"%17s-",out_str1);
   }
}

fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRPTFOL.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

get_local_date()
{

		
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
		
		:nd_loc_date :=sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id);
	  
       	//get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date);  
      
	   //:nd_loc_date := to_char(t_date,'DD/MM/YYYY');
	
	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';
date_convert1.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
date_convert1.len = 0;

}


fun_change_loc_date()
{
//date_convert.arr[date_convert.len]='\0';
strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 
//date_convert.arr[date_convert.len]='\0';
}






get_local_date1()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date1  date;
	
	BEGIN
	
	  
	  :nd_loc_date1 :=sm_convert_datetime_2t(to_date(:nd_temp_date1,'DD/MM/YYYY HH24:MI'),:p_language_id);
       	//get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date1,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date1);  
      
	   //:nd_loc_date1 := to_char(t_date1,'DD/MM/YYYY HH24:MI');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

                     



fun_change_loc_date1()
{

strcpy(nd_temp_date1.arr,date_convert1.arr);
nd_temp_date1.len = strlen(nd_temp_date1.arr);


get_local_date1();

strcpy(date_convert1.arr,nd_loc_date1.arr); 

}





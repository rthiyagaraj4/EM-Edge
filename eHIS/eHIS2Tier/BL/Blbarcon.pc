/*************************************************************************/
/* OCS MEDICOM VER 1.0                                                   */
/************************************************************************/
/* PROGRAM NAME          : BLBARCON.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 07-AUG-1993                                  */
/*                                                                      */  
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*          1.         BL_BILL_HDR               Read                   */
/*          2.         BL_BILL_LINE              Read                   */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :             -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*  UPGRADED TO 4.1                                                     */
/************************************************************************/
          
#include <stdio.h>     
#include <string.h>
#include <gl.h>
#include <bl.h>

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define VIEW_LOG_FILE     1

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
	    date_time                                  [20],
	    user_id                                    [40],
	    nd_session_id                              [16],
	    nd_pgm_date                                [25],
	    d_curr_pgm_id                              [15],
	    nd_cust_code                               [9],
	    nd_billing_grp                             [3],
	    nd_fm_doc_date                             [12],
	    nd_to_doc_date                             [12],
	    nd_fm_doc_type_code                        [7],
	    nd_to_doc_type_code                        [7],
	    nd_fm_doc_num                              [9],
	    nd_to_doc_num                              [9],
	    nd_inv_doc_type_code                       [7],
	    nd_inv_date                                [12],
	    nd_bill_type                               [3],
	    nd_credit_ref                              [16],
	    nd_doc_num_gen_flag                        [2],
	    nd_p_month                                 [3],
	    nd_p_year                                  [5],
	    nd_operating_facility_id		       [3],
	    nd_facility_id			       [3],
	    nd_ws_no				       [31],
	    nd_module_id			       [3],
	    nd_inv_status			       [2],
	    nd_acc_entity_code			       [5],
	    nd_dr_cnt_acc                              [2],
	    nd_fm_cust				       [9],
	    nd_to_cust				       [9],
	    d_acc_status                               [2],
	    d_acc_valid_flag                           [2],
	    nd_pat_name				       [100],
	    l_dummy                                    [10][2],
	    d_sy_acc_rowid                             [31];

      long  nd_inv_start_doc_num,
	    nd_new_doc_num;

   VARCHAR bl_h_doc_type_code                          [7],
	   bl_h_doc_num                                [9],
	   bl_h_doc_date                               [13],
	   bl_h_bill_trx_type_code                     [2],
	   bl_h_serv_locn_code                         [5],
	   bl_h_bill_from_date                         [13],
	   bl_h_bill_to_date                           [13],
	   bl_h_gross_amt                              [23],
	   bl_h_serv_disc_amt                          [23],
	   bl_h_man_disc_amt                           [23],
	   bl_h_overall_disc_perc                      [6],
	   bl_h_overall_disc_amt                       [23],
	   bl_h_ovr_disc_acc_int_code                  [7],
	   bl_h_prepay_adj_amt                         [23],
	   bl_h_deposit_adj_amt                        [23],
	   bl_h_bill_amt                               [23],
	   bl_h_bill_hosp_amt                          [23],
	   bl_h_bill_drfee_amt                         [23],
	   bl_h_bill_prv_doc_type_code                 [7],
	   bl_h_bill_prv_doc_number                    [23],
	   bl_h_bill_prv_doc_date                      [13],
	   bl_h_bill_prv_bill_amt                      [23],
	   bl_h_bill_prv_bill_paid_amt                 [23],
	   bl_h_bill_prv_outst_amt                     [23],
	   bl_h_bill_hosp_prv_outst_amt                [23],
	   bl_h_bill_drfee_prv_os_amt                  [23],
	   bl_h_bill_tot_amt                           [23],
	   bl_h_bill_hosp_tot_amt                      [23],
	   bl_h_bill_drfee_tot_amt                     [23],
	   bl_h_bill_tot_outst_amt                     [23],
	   bl_h_bill_hosp_tot_outst_amt                [23],
	   bl_h_bill_drfee_tot_os_amt                  [23],
	   bl_h_bill_paid_amt                          [23],
	   bl_h_episode_type                           [2],
	   bl_h_patient_id                             [21],
	   bl_h_episode_id                             [9],
	   bl_h_visit_id                               [5],
	   bl_h_admission_date                         [13],
	   bl_h_ward_code                              [5],
	   bl_h_bed_class_code                         [3],
	   bl_h_room_num                               [5],
	   bl_h_bed_num                                [9],
	   bl_h_physician_id                           [16],
	   bl_h_clinic_code                            [5],
	   bl_h_cust_code                              [9],
	   bl_h_blng_grp_id                            [3],
	   bl_h_bill_type_code                         [3],
	   bl_h_cons_invoice_ind                       [2],
	   bl_h_bill_status                            [2],
	   bl_h_bill_print_flag                        [2],
	   bl_h_drfee_bill_upd_flag                    [2],
	   bl_h_drfee_rec_upd_flag                     [2],
	   bl_h_drfee_receipt_amt                      [23],
	   bl_h_ar_inv_doc_type_code                   [7],
	   bl_h_ar_inv_doc_number                      [9],
	   bl_h_ar_inv_doc_date                        [13],
	   bl_h_last_recpt_doc_ty_cd                   [7],
	   bl_h_last_recpt_doc_num                     [23],
	   bl_h_last_recpt_doc_date                    [13],
	   bl_h_bill_nature_code                       [2],
	   bl_h_tot_paid_amt                           [23],
	   bl_h_bill_posted_flag                       [2],
	   bl_h_added_by_id                            [21],
	   bl_h_modified_by_id                         [21],
	   bl_h_added_date                             [13],
	   bl_h_modified_date                          [13],
	   bl_h_rowid                                  [31],
	   p_gl_acc1_code	  		       [31],	
	   p_gl_acc2_code                              [31],
	   nd_new_doc_type_code                        [7],
	   nd_narration				       [51],
	   bl_par_post_month                           [3],
	   bl_par_post_year                            [5],

	   recv_int_code                               [7],
	   bl_recv_acc_int_code                        [7],
	   ar_recv_acc_int_code                        [7],
	   bl_bill_type_short_desc                     [16],

	   bl_rec_main_acc1_code                       [7],
	   bl_rec_main_acc2_code                       [5],
	   bl_rec_dept_code                            [7],
	   bl_rec_subledger_group_code                 [4],
	   bl_rec_subledger_line_code                  [9],
	   bl_rec_product_group_code                   [4],
	   bl_rec_product_line_code                    [5],

	   ar_rec_main_acc1_code                       [7],
	   ar_rec_main_acc2_code                       [5],
	   ar_rec_dept_code                            [7],
	   ar_rec_subledger_group_code                 [4],
	   ar_rec_subledger_line_code                  [9],
	   ar_rec_product_group_code                   [4],
	   ar_rec_product_line_code                    [5],

	   bl_cust_pmnt_terms_code                     [3],
	   ar_pmnt_cred_days_period                    [4],
	   ar_pmnt_settl_days_period                   [4],
	   ar_pmnt_settl_percent                       [9],

	   bl_h_credit_doc_ref_desc                    [16],

	   nd_st_patient_id                            [21],
	   nd_st_doc_type_code                         [7],
	   nd_st_doc_num                               [9],
	   nd_st_doc_date                              [12],
	   bl_h_prev_cust_code                         [9];

    double nd_sum_outst_amt = 0,
	   nd_sum_drfee_amt = 0;

      int  nd_ctr = 0;
      int  nd_first = 1;

EXEC SQL END DECLARE SECTION;
EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0;

    if (argc < 6)
    {
     int i = 0;
       disp_message(ERR_MESG,"USAGE : BLBARCON USER/PWD@DB SESSION PGM_DATE FACILITY PGM_ID");
       proc_exit();
    }
 
    
    if (sql_connect(argv[1]) == -1)
    {
	disp_message(ORA_MESG,"Error in connecting to Oracle");
	proc_exit();
    }

    set_meduser_role();

    start_prog_msg();        

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    strcpy(nd_facility_id.arr,argv[4]);
    nd_facility_id.len = strlen(nd_facility_id.arr);
    strcpy(g_facility_id,nd_facility_id.arr);

    strcpy(d_curr_pgm_id.arr,argv[5]);
    d_curr_pgm_id.len = strlen(d_curr_pgm_id.arr);
    strcpy(g_pgm_id,d_curr_pgm_id.arr);    

    nd_acc_entity_code.arr[0] = '\0';
    nd_acc_entity_code.len = 0;

    EXEC SQL select acc_entity_code into :nd_acc_entity_code from sy_acc_entity
	 where acc_entity_id = :nd_facility_id;

   if (OERROR||LAST_ROW)
	err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

    nd_acc_entity_code.len = strlen(nd_acc_entity_code.arr);


    fetch_prog_param();
    fetch_bl_param();

    declare_cur();
     
    open_cur_hdr();

    strcpy(nd_new_doc_type_code.arr,nd_inv_doc_type_code.arr);
    nd_new_doc_type_code.len = strlen(nd_new_doc_type_code.arr);

    nd_new_doc_num           = nd_inv_start_doc_num;

    nd_sum_outst_amt = 0;
    nd_sum_drfee_amt = 0;
    nd_ctr = 0;
    nd_first = 1;

    while(fetch_cur())
    {
       /*
       if (nd_doc_num_gen_flag.arr[0] == 'Y' && rec_ctr == 1)
	    gen_doc_num();
       */
	   
       if (!lock_record())
  	        continue;

       if (nd_first == 1) {
	   strcpy(bl_h_prev_cust_code.arr,bl_h_cust_code.arr);
	   bl_h_prev_cust_code.len = strlen(bl_h_prev_cust_code.arr);
	   nd_first = 0;
	   }

       rec_ctr++;

       if(strcmp(bl_h_prev_cust_code.arr, bl_h_cust_code.arr)) {

	  if (nd_doc_num_gen_flag.arr[0] == 'Y')
	       gen_doc_num();
          

	  if (rec_ctr > 0)
	  {
	     fetch_dtls();
	     insert_ar_rec();
	  }

	  EXEC SQL COMMIT WORK;

	  if (OERROR)
	       err_mesg("COMMIT failed",0,""); 

	  strcpy(bl_h_prev_cust_code.arr,bl_h_cust_code.arr);
	  bl_h_prev_cust_code.len = strlen(bl_h_prev_cust_code.arr);

	  nd_sum_outst_amt = 0;
	  nd_sum_drfee_amt = 0;
	  nd_ctr = 0;	  
	  nd_inv_start_doc_num ++;
       }

       fetch_pat_dtls();
       insert_ar_patient();
       update_bl_hdr();

       nd_sum_outst_amt += atof(bl_h_bill_tot_outst_amt.arr);
       nd_sum_drfee_amt += atof(bl_h_bill_drfee_tot_os_amt.arr);
/*
       strcpy(bl_h_prev_cust_code.arr,bl_h_cust_code.arr);
       bl_h_prev_cust_code.len = strlen(bl_h_prev_cust_code.arr);
*/
       nd_ctr++;

       if (nd_ctr == 1)
       {
	  strcpy(nd_st_patient_id.arr,bl_h_patient_id.arr);
	  strcpy(nd_st_doc_type_code.arr,bl_h_doc_type_code.arr);
	  strcpy(nd_st_doc_num.arr,bl_h_doc_num.arr);
	  strcpy(nd_st_doc_date.arr,bl_h_doc_date.arr);

	  nd_st_patient_id.len    =  strlen(nd_st_patient_id.arr);
	  nd_st_doc_type_code.len =  strlen(nd_st_doc_type_code.arr);
	  nd_st_doc_num.len       =  strlen(nd_st_doc_num.arr);
	  nd_st_doc_date.len      =  strlen(nd_st_doc_date.arr);
       }

    }

    if (rec_ctr > 0)
    {
       fetch_dtls();
       insert_ar_rec();
       gen_doc_num();
    }

    EXEC SQL COMMIT WORK;

    if (OERROR)
	err_mesg("COMMIT failed",0,""); 

    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
	 err_mesg("COMMIT WORK RELEASE failed REA",0,"");

   return;
}


fetch_prog_param()
{

    nd_fm_doc_date.arr[0]               = '\0';
    nd_to_doc_date.arr[0]               = '\0';
    nd_fm_doc_type_code.arr[0]          = '\0';
    nd_to_doc_type_code.arr[0]          = '\0';
    nd_fm_doc_num.arr[0]                = '\0';
    nd_to_doc_num.arr[0]                = '\0';
    nd_inv_doc_type_code.arr[0]         = '\0';
    nd_inv_date.arr[0]                  = '\0';
    nd_billing_grp.arr[0]               = '\0';
    nd_cust_code.arr[0]                 = '\0';
    nd_bill_type.arr[0]                 = '\0';
    nd_credit_ref.arr[0]                = '\0'; 
    nd_p_month.arr[0]                   = '\0';
    nd_p_year.arr[0]                    = '\0';
    nd_dr_cnt_acc.arr[0]                = '\0';
    nd_ws_no.arr[0]			= '\0';
    nd_module_id.arr[0]			= '\0';
    nd_inv_status.arr[0]		= '\0';
    nd_fm_cust.arr[0]			= '\0';
    nd_to_cust.arr[0]			= '\0';

    

    nd_fm_doc_date.len                  = 0;
    nd_to_doc_date.len                  = 0;
    nd_fm_doc_type_code.len             = 0;
    nd_to_doc_type_code.len             = 0;
    nd_fm_doc_num.len                   = 0;
    nd_to_doc_num.len                   = 0;
    nd_inv_doc_type_code.len            = 0;
    nd_inv_date.len                     = 0;
    nd_billing_grp.len                  = 0;
    nd_cust_code.len                    = 0;
    nd_bill_type.len                    = 0;
    nd_credit_ref.len                   = 0;
    nd_inv_start_doc_num                = 0;
    nd_p_month.len                      = 0;
    nd_p_year.len                       = 0;
    nd_dr_cnt_acc.len                   = 0;
    nd_ws_no.len			= 0;
    nd_module_id.len			= 0;
    nd_inv_status.len			= 0;
    nd_fm_cust.len			= 0;
    nd_to_cust.len			= 0;
    

   EXEC SQL SELECT PARAM1, PARAM2, 
		   PARAM3, PARAM4,
		   PARAM5, PARAM6, 
		   PARAM7, PARAM8, 
		   PARAM9, PARAM10, 
		   PARAM11,PARAM12, 
		   PARAM13,PARAM14, 
		   PARAM15, PARAM16,
		   PARAM17,PARAM18,
		   PARAM19,PARAM20,
		   PARAM21
	      INTO :nd_billing_grp,      :nd_cust_code,
		   :nd_fm_doc_date,      :nd_to_doc_date,
		   :nd_fm_doc_type_code, :nd_to_doc_type_code,
		   :nd_fm_doc_num,       :nd_to_doc_num,
		   :nd_inv_doc_type_code,:nd_inv_start_doc_num,
		   :nd_inv_date,         :nd_bill_type,
		   :nd_credit_ref,       :nd_p_month,
		   :nd_p_year, 	         :nd_dr_cnt_acc,
		   :nd_ws_no,	         :nd_module_id,
		   :nd_inv_status,       :nd_fm_cust,
		   :nd_to_cust 
	     FROM SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_id
	      AND SESSION_ID = :nd_session_id
	      AND PGM_DATE   = :nd_pgm_date;


   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_fm_doc_date.arr[nd_fm_doc_date.len]             = '\0';
   nd_to_doc_date.arr[nd_to_doc_date.len]             = '\0';
   nd_fm_doc_type_code.arr[nd_fm_doc_type_code.len]   = '\0';
   nd_to_doc_type_code.arr[nd_to_doc_type_code.len]   = '\0';
   nd_fm_doc_num.arr[nd_fm_doc_num.len]               = '\0';
   nd_to_doc_num.arr[nd_to_doc_num.len]               = '\0';
   nd_inv_doc_type_code.arr[nd_inv_doc_type_code.len] = '\0';
   nd_inv_date.arr[nd_inv_date.len]                   = '\0';
   nd_billing_grp.arr[nd_billing_grp.len] 	      = '\0';
   nd_cust_code.arr[nd_cust_code.len] 		      = '\0';
   nd_bill_type.arr[nd_bill_type.len] 		      = '\0';
   nd_credit_ref.arr[nd_credit_ref.len]		      = '\0';
   nd_p_month.arr[nd_p_month.len]                     = '\0';
   nd_p_year.arr[nd_p_year.len]                       = '\0';
   nd_dr_cnt_acc.arr[nd_dr_cnt_acc.len]               = '\0';
   nd_ws_no.arr[nd_ws_no.len]			      = '\0';
   nd_module_id.arr[nd_module_id.len]		      = '\0';
   nd_inv_status.arr[nd_inv_status.len]		      = '\0';
   nd_fm_cust.arr[nd_fm_cust.len]		      = '\0';
   nd_to_cust.arr[nd_to_cust.len]		      = '\0';
   
   EXEC SQL DELETE SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_id
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
	 err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
   val_doc_type();

}

fetch_bl_param()
{


    bl_par_post_month.arr[0]      = '\0';
    bl_par_post_year.arr[0]       = '\0';

    bl_par_post_month.len         = 0;
    bl_par_post_year.len          = 0;

    EXEC SQL SELECT CURRENT_PROC_ACC_MONTH,  CURRENT_PROC_ACC_YEAR
	     INTO :bl_par_post_month, :bl_par_post_year
	     FROM BL_PARAMETERS
     	     WHERE OPERATING_FACILITY_ID = :nd_facility_id;

    if (OERROR)
	 err_mesg("SELECT failed on table BL_PARAMETERS",0,"");

    if (NOT_FOUND)
	err_mesg("Record not found in BL PARAMETERS",0,"");

    bl_par_post_month.arr[bl_par_post_month.len] = '\0';
    bl_par_post_year.arr[bl_par_post_year.len] = '\0';     
    
   
   /*This following reassignment is to cater the inputs we have given in
    the form ( the month and year for which the posting has to be done).*/    
    
    strcpy(bl_par_post_month.arr,nd_p_month.arr);
    strcpy(bl_par_post_year.arr,nd_p_year.arr);    

    bl_par_post_month.len = strlen(bl_par_post_month.arr);
    bl_par_post_year.len  = strlen(bl_par_post_year.arr);     
    
}

declare_cur()
{
     EXEC SQL DECLARE BL_HDR_CUR CURSOR FOR
	       SELECT DOC_TYPE_CODE,
		      DOC_NUM,
		      OPERATING_FACILITY_ID
		 FROM BL_BILL_HDR
		WHERE 
		      //BLNG_GRP_ID = :nd_billing_grp AND 

	    	      RPAD(cust_code,8) BETWEEN
		      RPAD(NVL(:nd_fm_cust,' '),8,' ')   AND
		      RPAD(NVL(:nd_to_cust,'~~~~~~~~'),8,' ') AND 
		      TRUNC(DOC_DATE) BETWEEN
		      NVL(TO_DATE(:nd_fm_doc_date,'DD/MM/YYYY'),TRUNC(DOC_DATE)) AND 
		      NVL(TO_DATE(:nd_to_doc_date,'DD/MM/YYYY'),TRUNC(DOC_DATE)) 

		      AND 
		      ((
		      RPAD(DOC_TYPE_CODE,6,' ')|| LPAD(DOC_NUM,8,'0')  BETWEEN
		      RPAD(NVL(:nd_fm_doc_type_code,' '),6,' ')||
		      LPAD(NVL(:nd_fm_doc_num,0),8,'0')   AND
		      RPAD(NVL(:nd_to_doc_type_code,'~~~~~~'),6,' ')||
		      LPAD(NVL(:nd_to_doc_num,99999999),8,'0')		      
		      AND OPERATING_FACILITY_ID = :nd_facility_id 
		      AND :d_curr_pgm_id = 'BLBARCON')
		      OR
		      ((DOC_TYPE_CODE,DOC_NUM) IN 
				(SELECT DOC_TYPE_CODE,DOC_NUM FROM AR_DOC_ERROR
			         WHERE PGM_ID = 'ARTGNINV')
  				 AND :d_curr_pgm_id = 'ARTGNINV'))
		  AND BILL_NATURE_CODE = 'A'
		  AND BILL_POSTED_FLAG = 'Y'
		  AND BILL_STATUS IS NULL
		  AND CUST_CODE IS NOT NULL
		  AND NVL(BILL_TOT_OUTST_AMT,0) != 0		  
		  ORDER BY CUST_CODE;

     EXEC SQL DECLARE BL_HDR_REC_CUR CURSOR FOR
	       SELECT 
		      TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
		      BILL_TRX_TYPE_CODE,
		      SERV_LOCN_CODE,
		      TO_CHAR(BILL_FROM_DATE,'DD/MM/YYYY'),
		      TO_CHAR(BILL_TO_DATE,'DD/MM/YYYY'),
		      GROSS_AMT,
		      SERV_DISC_AMT,
		      MAN_DISC_AMT,
		      OVERALL_DISC_PERC,
		      OVERALL_DISC_AMT,
		      OVR_DISC_ACC_INT_CODE,
		      PREPAY_ADJ_AMT,
		      DEPOSIT_ADJ_AMT,
		      BILL_AMT,
		      BILL_HOSP_AMT,
		      BILL_DRFEE_AMT,
		      BILL_PRV_DOC_TYPE_CODE,
		      BILL_PRV_DOC_NUMBER,
		      TO_CHAR(BILL_PRV_DOC_DATE,'DD/MM/YYYY'),
		      BILL_PRV_BILL_AMT,
		      BILL_PRV_BILL_PAID_AMT,
		      BILL_PRV_OUTST_AMT,
		      BILL_HOSP_PRV_OUTST_AMT,
		      BILL_DRFEE_PRV_OUTST_AMT,
		      BILL_TOT_AMT,
		      BILL_HOSP_TOT_AMT,
		      BILL_DRFEE_TOT_AMT,
		      NVL(BILL_TOT_OUTST_AMT,0),
		      BILL_HOSP_TOT_OUTST_AMT,
		      NVL(BILL_DRFEE_TOT_OUTST_AMT,0),
		      BILL_PAID_AMT,
		      EPISODE_TYPE,
		      PATIENT_ID,
		      EPISODE_ID,
		      VISIT_ID,
		      TO_CHAR(ADMISSION_DATE,'DD/MM/YYYY'),
		      WARD_CODE,
		      BED_CLASS_CODE,
		      ROOM_NUM,
		      BED_NUM,
		      PHYSICIAN_ID,
		      CLINIC_CODE,
		      CUST_CODE,
		      BLNG_GRP_ID,
		      BILL_TYPE_CODE,
		      CONS_INVOICE_IND,
		      BILL_STATUS,
		      BILL_PRINT_FLAG,
		      DRFEE_BILL_UPD_FLAG,
		      DRFEE_REC_UPD_FLAG,
		      DRFEE_RECEIPT_AMT,
		      AR_INV_DOC_TYPE_CODE,
		      AR_INV_DOC_NUMBER,
		      TO_CHAR(AR_INV_DOC_DATE,'DD/MM/YYYY'),
		      LAST_RECPT_DOC_TYPE_CODE,
		      LAST_RECPT_DOC_NUM,
		      TO_CHAR(LAST_RECPT_DOC_DATE,'DD/MM/YYYY'),
		      BILL_NATURE_CODE,
		      TOT_PAID_AMT,
		      BILL_POSTED_FLAG,
		      ADDED_BY_ID,
		      MODIFIED_BY_ID,
		      ADDED_DATE,
		      MODIFIED_DATE,
		      ROWID
		 FROM BL_BILL_HDR
		WHERE DOC_TYPE_CODE = :bl_h_doc_type_code
		  AND DOC_NUM       = :bl_h_doc_num  		  
		  FOR UPDATE OF DOC_TYPE_CODE NOWAIT;

     EXEC SQL DECLARE BL_BILL_TYPE_PAT_CUR CURSOR FOR
	       SELECT SHORT_DESC
		 FROM BL_BILL_TYPE
		WHERE BILL_TYPE_CODE = :bl_h_bill_type_code
		AND   ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_facility_id );

     EXEC SQL DECLARE BL_BILL_TYPE_CUR CURSOR FOR
	       SELECT BL_RECV_ACC_INT_CODE,
		      AR_RECV_ACC_INT_CODE
		 FROM BL_BILL_TYPE
		WHERE BILL_TYPE_CODE = :nd_bill_type
		AND   ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_facility_id );
     EXEC SQL DECLARE BL_GL_ACCOUNT_CUR CURSOR FOR
	       SELECT MAIN_ACC1_CODE,
		      MAIN_ACC2_CODE,
		      DEPT_CODE,
		      SUBLEDGER_GROUP_CODE,
		      SUBLEDGER_LINE_CODE,
		      PRODUCT_GROUP_CODE,
		      PRODUCT_LINE_CODE
		 FROM BL_GL_ACCOUNT
		WHERE ACC_INT_CODE = :recv_int_code
		AND   ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_facility_id  );
 
     EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
	       SELECT PMNT_TERMS_CODE, GL_MAIN_ACC1_CODE,
	       		  GL_MAIN_ACC2_CODE
		 FROM AR_CUSTOMER
		WHERE CUST_CODE = :bl_h_prev_cust_code
		AND   ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_facility_id );

     EXEC SQL DECLARE AR_PMNT_TERMS_CUR CURSOR FOR
	       SELECT CREDIT_DAYS_PERIOD,
		      SETTLEMENT_DAYS_PERIOD,
		      SETTLEMENT_PERC
		 FROM AR_PMNT_TERMS
		WHERE PMNT_TERMS_CODE = :bl_cust_pmnt_terms_code
		AND   ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_facility_id );

     EXEC SQL DECLARE BL_EPI_FIN_DTLS_CUR CURSOR FOR
	       SELECT CREDIT_DOC_REF_DESC
		 FROM BL_EPISODE_FIN_DTLS
		WHERE EPISODE_TYPE = DECODE(:bl_h_bill_trx_type_code,
					    'E','O','D','I','A','I')
		  AND EPISODE_ID   = :bl_h_episode_id
		  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

     EXEC SQL DECLARE BL_VISIT_FIN_DTLS_CUR CURSOR FOR
	       SELECT CREDIT_DOC_REF_DESC
		 FROM BL_VISIT_FIN_DTLS
		WHERE EPISODE_TYPE = 'O'
		  AND EPISODE_ID   = :bl_h_episode_id
		  AND VISIT_ID     = :bl_h_visit_id
		  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

   EXEC SQL DECLARE SY_ACC_ENTITY_DOC_TYPE_CUR CURSOR FOR
	     SELECT NVL(STATUS,'X'),
		    'Y',  --NVL(AR_VALID_FLAG,'X'),
		    NVL(DOC_NUM_GEN_FLAG,'X')
	       FROM SY_ACC_ENTITY_DOC_TYPE
	      WHERE DOC_TYPE_CODE   = :nd_inv_doc_type_code
		AND ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_facility_id );

   EXEC SQL DECLARE AR_TRN_DOC_TYPE_CUR CURSOR FOR
	     SELECT 'X'
	       FROM AR_TRN_DOC_TYPE
	      WHERE DOC_TYPE_CODE = :nd_inv_doc_type_code
		AND TRN_TYPE_CODE = '1'
		AND ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_facility_id );
}

val_doc_type()
{

   EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;
 
   if (OERROR)
       err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

   d_acc_status.arr[0]     = '\0';
   d_acc_valid_flag.arr[0] = '\0';
   nd_doc_num_gen_flag.arr[0]          = '\0';

   d_acc_valid_flag.len = 0;
   d_acc_status.len     = 0;
   nd_doc_num_gen_flag.len             = 0;

   EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
	     INTO :d_acc_status,
		  :d_acc_valid_flag,
		  :nd_doc_num_gen_flag;
   
   if (OERROR)
	err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 

   d_acc_status.arr[d_acc_status.len]         = '\0';
   d_acc_valid_flag.arr[d_acc_valid_flag.len] = '\0';
   nd_doc_num_gen_flag.arr[nd_doc_num_gen_flag.len]   = '\0';

   if (NOT_FOUND)      /* Doc type not existing in SY_ACC_ENTITY_DOC_TYPE */
	 err_mesg("",1,"SY2200");
   else
   {
      if (d_acc_valid_flag.arr[0] != 'Y') /* Doc Not valid for AP    */
	    err_mesg("Document Type not valid for AR module",0,"");
      if (d_acc_status.arr[0] == 'S')     /* Doc is suspended        */
	    err_mesg("",1,"SY2190");
   } 

   EXEC SQL OPEN AR_TRN_DOC_TYPE_CUR;

   if (OERROR)
	 err_mesg("OPEN failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   EXEC SQL FETCH AR_TRN_DOC_TYPE_CUR
	     INTO :l_dummy;

   if (OERROR)
	 err_mesg("FETCH failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   if (NOT_FOUND)
       err_mesg("Trn type Not valid for this document",0,"");

}

open_cur_hdr()
{
     EXEC SQL OPEN BL_HDR_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_HDR_CUR",0,"");
	 

}

fetch_cur()
{
	bl_h_doc_type_code.arr[0]                                         = '\0';
	bl_h_doc_num.arr[0]                                               = '\0';
	nd_operating_facility_id.arr[0]					  = '\0';

	bl_h_doc_type_code.len                                            = 0;
	bl_h_doc_num.len                                                  = 0;
	nd_operating_facility_id.len					  = 0;

	EXEC SQL FETCH BL_HDR_CUR
	         INTO :bl_h_doc_type_code,
		      :bl_h_doc_num,
		      :nd_operating_facility_id;

	if (OERROR)
	 err_mesg("FETCH failed on cursor BL_HDR_CUR",0,"");


	bl_h_doc_type_code.arr[bl_h_doc_type_code.len]                    = '\0';
	bl_h_doc_num.arr[bl_h_doc_num.len]                                = '\0';
	nd_operating_facility_id.arr[nd_operating_facility_id.len]        = '\0';
	

	return(LAST_ROW?0:1);
}

lock_record()
{
   static int first = 1;
   char l_str[100];

bl_h_doc_date.arr[0]                                              = '\0';
bl_h_bill_trx_type_code.arr[0]                                    = '\0';
bl_h_serv_locn_code.arr[0]                                        = '\0';
bl_h_bill_from_date.arr[0]                                        = '\0';
bl_h_bill_to_date.arr[0]                                          = '\0';
bl_h_gross_amt.arr[0]                                             = '\0';
bl_h_serv_disc_amt.arr[0]                                         = '\0';
bl_h_man_disc_amt.arr[0]                                          = '\0';
bl_h_overall_disc_perc.arr[0]                                     = '\0';
bl_h_overall_disc_amt.arr[0]                                      = '\0';
bl_h_ovr_disc_acc_int_code.arr[0]                                 = '\0';
bl_h_prepay_adj_amt.arr[0]                                        = '\0';
bl_h_deposit_adj_amt.arr[0]                                       = '\0';
bl_h_bill_amt.arr[0]                                              = '\0';
bl_h_bill_hosp_amt.arr[0]                                         = '\0';
bl_h_bill_drfee_amt.arr[0]                                        = '\0';
bl_h_bill_prv_doc_type_code.arr[0]                                = '\0';
bl_h_bill_prv_doc_number.arr[0]                                   = '\0';
bl_h_bill_prv_doc_date.arr[0]                                     = '\0';
bl_h_bill_prv_bill_amt.arr[0]                                     = '\0';
bl_h_bill_prv_bill_paid_amt.arr[0]                                = '\0';
bl_h_bill_prv_outst_amt.arr[0]                                    = '\0';
bl_h_bill_hosp_prv_outst_amt.arr[0]                               = '\0';
bl_h_bill_drfee_prv_os_amt.arr[0]                                 = '\0';
bl_h_bill_tot_amt.arr[0]                                          = '\0';
bl_h_bill_hosp_tot_amt.arr[0]                                     = '\0';
bl_h_bill_drfee_tot_amt.arr[0]                                    = '\0';
bl_h_bill_tot_outst_amt.arr[0]                                    = '\0';
bl_h_bill_hosp_tot_outst_amt.arr[0]                               = '\0';
bl_h_bill_drfee_tot_os_amt.arr[0]                                 = '\0';
bl_h_bill_paid_amt.arr[0]                                         = '\0';
bl_h_episode_type.arr[0]                                          = '\0';
bl_h_patient_id.arr[0]                                            = '\0';
bl_h_episode_id.arr[0]                                            = '\0';
bl_h_visit_id.arr[0]                                              = '\0';
bl_h_admission_date.arr[0]                                        = '\0';
bl_h_ward_code.arr[0]                                             = '\0';
bl_h_bed_class_code.arr[0]                                        = '\0';
bl_h_room_num.arr[0]                                              = '\0';
bl_h_bed_num.arr[0]                                               = '\0';
bl_h_physician_id.arr[0]                                          = '\0';
bl_h_clinic_code.arr[0]                                           = '\0';
bl_h_cust_code.arr[0]                                             = '\0';
bl_h_blng_grp_id.arr[0]                                           = '\0';
bl_h_bill_type_code.arr[0]                                        = '\0';
bl_h_cons_invoice_ind.arr[0]                                      = '\0';
bl_h_bill_status.arr[0]                                           = '\0';
bl_h_bill_print_flag.arr[0]                                       = '\0';
bl_h_drfee_bill_upd_flag.arr[0]                                   = '\0';
bl_h_drfee_rec_upd_flag.arr[0]                                    = '\0';
bl_h_drfee_receipt_amt.arr[0]                                     = '\0';
bl_h_ar_inv_doc_type_code.arr[0]                                  = '\0';
bl_h_ar_inv_doc_number.arr[0]                                     = '\0';
bl_h_ar_inv_doc_date.arr[0]                                       = '\0';
bl_h_last_recpt_doc_ty_cd.arr[0]                                  = '\0';
bl_h_last_recpt_doc_num.arr[0]                                    = '\0';
bl_h_last_recpt_doc_date.arr[0]                                   = '\0';
bl_h_bill_nature_code.arr[0]                                      = '\0';
bl_h_tot_paid_amt.arr[0]                                          = '\0';
bl_h_bill_posted_flag.arr[0]                                      = '\0';
bl_h_added_by_id.arr[0]                                           = '\0';
bl_h_modified_by_id.arr[0]                                        = '\0';
bl_h_added_date.arr[0]                                            = '\0';
bl_h_modified_date.arr[0]                                         = '\0';
bl_h_rowid.arr[0]                                                 = '\0';

bl_h_doc_date.len                                                 = 0;
bl_h_bill_trx_type_code.len                                       = 0;
bl_h_serv_locn_code.len                                           = 0;
bl_h_bill_from_date.len                                           = 0;
bl_h_bill_to_date.len                                             = 0;
bl_h_gross_amt.len                                                = 0;
bl_h_serv_disc_amt.len                                            = 0;
bl_h_man_disc_amt.len                                             = 0;
bl_h_overall_disc_perc.len                                        = 0;
bl_h_overall_disc_amt.len                                         = 0;
bl_h_ovr_disc_acc_int_code.len                                    = 0;
bl_h_prepay_adj_amt.len                                           = 0;
bl_h_deposit_adj_amt.len                                          = 0;
bl_h_bill_amt.len                                                 = 0;
bl_h_bill_hosp_amt.len                                            = 0;
bl_h_bill_drfee_amt.len                                           = 0;
bl_h_bill_prv_doc_type_code.len                                   = 0;
bl_h_bill_prv_doc_number.len                                      = 0;
bl_h_bill_prv_doc_date.len                                        = 0;
bl_h_bill_prv_bill_amt.len                                        = 0;
bl_h_bill_prv_bill_paid_amt.len                                   = 0;
bl_h_bill_prv_outst_amt.len                                       = 0;
bl_h_bill_hosp_prv_outst_amt.len                                  = 0;
bl_h_bill_drfee_prv_os_amt.len                                 = 0;
bl_h_bill_tot_amt.len                                             = 0;
bl_h_bill_hosp_tot_amt.len                                        = 0;
bl_h_bill_drfee_tot_amt.len                                       = 0;
bl_h_bill_tot_outst_amt.len                                       = 0;
bl_h_bill_hosp_tot_outst_amt.len                                  = 0;
bl_h_bill_drfee_tot_os_amt.len                                 = 0;
bl_h_bill_paid_amt.len                                            = 0;
bl_h_episode_type.len                                             = 0;
bl_h_patient_id.len                                               = 0;
bl_h_episode_id.len                                               = 0;
bl_h_visit_id.len                                                 = 0;
bl_h_admission_date.len                                           = 0;
bl_h_ward_code.len                                                = 0;
bl_h_bed_class_code.len                                           = 0;
bl_h_room_num.len                                                 = 0;
bl_h_bed_num.len                                                  = 0;
bl_h_physician_id.len                                             = 0;
bl_h_clinic_code.len                                              = 0;
bl_h_cust_code.len                                                = 0;
bl_h_blng_grp_id.len                                              = 0;
bl_h_bill_type_code.len                                           = 0;
bl_h_cons_invoice_ind.len                                         = 0;
bl_h_bill_status.len                                              = 0;
bl_h_bill_print_flag.len                                          = 0;
bl_h_drfee_bill_upd_flag.len                                      = 0;
bl_h_drfee_rec_upd_flag.len                                       = 0;
bl_h_drfee_receipt_amt.len                                        = 0;
bl_h_ar_inv_doc_type_code.len                                     = 0;
bl_h_ar_inv_doc_number.len                                        = 0;
bl_h_ar_inv_doc_date.len                                          = 0;
bl_h_last_recpt_doc_ty_cd.len                                 = 0;
bl_h_last_recpt_doc_num.len                                       = 0;
bl_h_last_recpt_doc_date.len                                      = 0;
bl_h_bill_nature_code.len                                         = 0;
bl_h_tot_paid_amt.len                                             = 0;
bl_h_bill_posted_flag.len                                         = 0;
bl_h_added_by_id.len                                              = 0;
bl_h_modified_by_id.len                                           = 0;
bl_h_added_date.len                                               = 0;
bl_h_modified_date.len                                            = 0;
bl_h_rowid.len                                                    = 0;

     EXEC SQL OPEN BL_HDR_REC_CUR;

sprintf(l_str,"BL BILL HDR Document %s - %s busy",
	     bl_h_doc_type_code.arr,bl_h_doc_num.arr);

     if (RESOURCE_BUSY)
     {
	 log_err_mesg(l_str,0,"");
	 return(0);
     }
     else if (OERROR)
	 err_mesg("OPEN failed on cursor BL_HDR_REC_CUR",0,"");


     EXEC SQL FETCH BL_HDR_REC_CUR
	       INTO :bl_h_doc_date,
		    :bl_h_bill_trx_type_code,
		    :bl_h_serv_locn_code,
		    :bl_h_bill_from_date,
		    :bl_h_bill_to_date,
		    :bl_h_gross_amt,
		    :bl_h_serv_disc_amt,
		    :bl_h_man_disc_amt,
		    :bl_h_overall_disc_perc,
		    :bl_h_overall_disc_amt,
		    :bl_h_ovr_disc_acc_int_code,
		    :bl_h_prepay_adj_amt,
		    :bl_h_deposit_adj_amt,
		    :bl_h_bill_amt,
		    :bl_h_bill_hosp_amt,
		    :bl_h_bill_drfee_amt,
		    :bl_h_bill_prv_doc_type_code,
		    :bl_h_bill_prv_doc_number,
		    :bl_h_bill_prv_doc_date,
		    :bl_h_bill_prv_bill_amt,
		    :bl_h_bill_prv_bill_paid_amt,
		    :bl_h_bill_prv_outst_amt,
		    :bl_h_bill_hosp_prv_outst_amt,
		    :bl_h_bill_drfee_prv_os_amt,
		    :bl_h_bill_tot_amt,
		    :bl_h_bill_hosp_tot_amt,
		    :bl_h_bill_drfee_tot_amt,
		    :bl_h_bill_tot_outst_amt,
		    :bl_h_bill_hosp_tot_outst_amt,
		    :bl_h_bill_drfee_tot_os_amt,
		    :bl_h_bill_paid_amt,
		    :bl_h_episode_type,
		    :bl_h_patient_id,
		    :bl_h_episode_id,
		    :bl_h_visit_id,
		    :bl_h_admission_date,
		    :bl_h_ward_code,
		    :bl_h_bed_class_code,
		    :bl_h_room_num,
		    :bl_h_bed_num,
		    :bl_h_physician_id,
		    :bl_h_clinic_code,
		    :bl_h_cust_code,
		    :bl_h_blng_grp_id,
		    :bl_h_bill_type_code,
		    :bl_h_cons_invoice_ind,
		    :bl_h_bill_status,
		    :bl_h_bill_print_flag,
		    :bl_h_drfee_bill_upd_flag,
		    :bl_h_drfee_rec_upd_flag,
		    :bl_h_drfee_receipt_amt,
		    :bl_h_ar_inv_doc_type_code,
		    :bl_h_ar_inv_doc_number,
		    :bl_h_ar_inv_doc_date,
		    :bl_h_last_recpt_doc_ty_cd,
		    :bl_h_last_recpt_doc_num,
		    :bl_h_last_recpt_doc_date,
		    :bl_h_bill_nature_code,
		    :bl_h_tot_paid_amt,
		    :bl_h_bill_posted_flag,
		    :bl_h_added_by_id,
		    :bl_h_modified_by_id,
		    :bl_h_added_date,
		    :bl_h_modified_date,
		    :bl_h_rowid;

      if (OERROR)
	 err_mesg("FETCH failed on cursor BL_HDR_CUR",0,"");

bl_h_doc_date.arr[bl_h_doc_date.len]                                     = '\0';
bl_h_bill_trx_type_code.arr[bl_h_bill_trx_type_code.len]                 = '\0';
bl_h_serv_locn_code.arr[bl_h_serv_locn_code.len]                         = '\0';
bl_h_bill_from_date.arr[bl_h_bill_from_date.len]                         = '\0';
bl_h_bill_to_date.arr[bl_h_bill_to_date.len]                             = '\0';
bl_h_gross_amt.arr[bl_h_gross_amt.len]                                   = '\0';
bl_h_serv_disc_amt.arr[bl_h_serv_disc_amt.len]                           = '\0';
bl_h_man_disc_amt.arr[bl_h_man_disc_amt.len]                             = '\0';
bl_h_overall_disc_perc.arr[bl_h_overall_disc_perc.len]                   = '\0';
bl_h_overall_disc_amt.arr[bl_h_overall_disc_amt.len]                     = '\0';
bl_h_ovr_disc_acc_int_code.arr[bl_h_ovr_disc_acc_int_code.len]           = '\0';
bl_h_prepay_adj_amt.arr[bl_h_prepay_adj_amt.len]                         = '\0';
bl_h_deposit_adj_amt.arr[bl_h_deposit_adj_amt.len]                       = '\0';
bl_h_bill_amt.arr[bl_h_bill_amt.len]                                     = '\0';
bl_h_bill_hosp_amt.arr[bl_h_bill_hosp_amt.len]                           = '\0';
bl_h_bill_drfee_amt.arr[bl_h_bill_drfee_amt.len]                         = '\0';
bl_h_bill_prv_doc_type_code.arr[bl_h_bill_prv_doc_type_code.len]         = '\0';
bl_h_bill_prv_doc_number.arr[bl_h_bill_prv_doc_number.len]               = '\0';
bl_h_bill_prv_doc_date.arr[bl_h_bill_prv_doc_date.len]                   = '\0';
bl_h_bill_prv_bill_amt.arr[bl_h_bill_prv_bill_amt.len]                   = '\0';
bl_h_bill_prv_bill_paid_amt.arr[bl_h_bill_prv_bill_paid_amt.len]         = '\0';
bl_h_bill_prv_outst_amt.arr[bl_h_bill_prv_outst_amt.len]                 = '\0';
bl_h_bill_hosp_prv_outst_amt.arr[bl_h_bill_hosp_prv_outst_amt.len]       = '\0';
bl_h_bill_drfee_prv_os_amt.arr[bl_h_bill_drfee_prv_os_amt.len]     = '\0';
bl_h_bill_tot_amt.arr[bl_h_bill_tot_amt.len]                             = '\0';
bl_h_bill_hosp_tot_amt.arr[bl_h_bill_hosp_tot_amt.len]                   = '\0';
bl_h_bill_drfee_tot_amt.arr[bl_h_bill_drfee_tot_amt.len]                 = '\0';
bl_h_bill_tot_outst_amt.arr[bl_h_bill_tot_outst_amt.len]                 = '\0';
bl_h_bill_hosp_tot_outst_amt.arr[bl_h_bill_hosp_tot_outst_amt.len]       = '\0';
bl_h_bill_drfee_tot_os_amt.arr[bl_h_bill_drfee_tot_os_amt.len]     = '\0';
bl_h_bill_paid_amt.arr[bl_h_bill_paid_amt.len]                           = '\0';
bl_h_episode_type.arr[bl_h_episode_type.len]                             = '\0';
bl_h_patient_id.arr[bl_h_patient_id.len]                                 = '\0';
bl_h_episode_id.arr[bl_h_episode_id.len]                                 = '\0';
bl_h_visit_id.arr[bl_h_visit_id.len]                                     = '\0';
bl_h_admission_date.arr[bl_h_admission_date.len]                         = '\0';
bl_h_ward_code.arr[bl_h_ward_code.len]                                   = '\0';
bl_h_bed_class_code.arr[bl_h_bed_class_code.len]                         = '\0';
bl_h_room_num.arr[bl_h_room_num.len]                                     = '\0';
bl_h_bed_num.arr[bl_h_bed_num.len]                                       = '\0';
bl_h_physician_id.arr[bl_h_physician_id.len]                             = '\0';
bl_h_clinic_code.arr[bl_h_clinic_code.len]                               = '\0';
bl_h_cust_code.arr[bl_h_cust_code.len]                                   = '\0';
bl_h_blng_grp_id.arr[bl_h_blng_grp_id.len]                               = '\0';
bl_h_bill_type_code.arr[bl_h_bill_type_code.len]                         = '\0';
bl_h_cons_invoice_ind.arr[bl_h_cons_invoice_ind.len]                     = '\0';
bl_h_bill_status.arr[bl_h_bill_status.len]                               = '\0';
bl_h_bill_print_flag.arr[bl_h_bill_print_flag.len]                       = '\0';
bl_h_drfee_bill_upd_flag.arr[bl_h_drfee_bill_upd_flag.len]               = '\0';
bl_h_drfee_rec_upd_flag.arr[bl_h_drfee_rec_upd_flag.len]                 = '\0';
bl_h_drfee_receipt_amt.arr[bl_h_drfee_receipt_amt.len]                   = '\0';
bl_h_ar_inv_doc_type_code.arr[bl_h_ar_inv_doc_type_code.len]             = '\0';
bl_h_ar_inv_doc_number.arr[bl_h_ar_inv_doc_number.len]                   = '\0';
bl_h_ar_inv_doc_date.arr[bl_h_ar_inv_doc_date.len]                       = '\0';
bl_h_last_recpt_doc_ty_cd.arr[bl_h_last_recpt_doc_ty_cd.len]     = '\0';
bl_h_last_recpt_doc_num.arr[bl_h_last_recpt_doc_num.len]                 = '\0';
bl_h_last_recpt_doc_date.arr[bl_h_last_recpt_doc_date.len]               = '\0';
bl_h_bill_nature_code.arr[bl_h_bill_nature_code.len]                     = '\0';
bl_h_tot_paid_amt.arr[bl_h_tot_paid_amt.len]                             = '\0';
bl_h_bill_posted_flag.arr[bl_h_bill_posted_flag.len]                     = '\0';
bl_h_added_by_id.arr[bl_h_added_by_id.len]                               = '\0';
bl_h_modified_by_id.arr[bl_h_modified_by_id.len]                         = '\0';
bl_h_added_date.arr[bl_h_added_date.len]                                 = '\0';
bl_h_modified_date.arr[bl_h_modified_date.len]                           = '\0';
bl_h_rowid.arr[bl_h_rowid.len]                                           = '\0';
/*
    if(first) {
	strcpy(bl_h_prev_cust_code.arr, bl_h_cust_code.arr);
	bl_h_prev_cust_code.len = strlen(bl_h_prev_cust_code.arr);
	first = 0;
    } */

   return(ROW_COUNT);
}

gen_doc_num()
{
     d_sy_acc_rowid.arr[0]  = '\0';
     d_sy_acc_rowid.len     = 0;

     nd_inv_start_doc_num = 0;

     EXEC SQL SELECT NVL(NEXT_DOC_NO,0),    ROWID
		INTO :nd_inv_start_doc_num, :d_sy_acc_rowid
		FROM SY_ACC_ENTITY_DOC_TYPE
	        WHERE DOC_TYPE_CODE = :nd_inv_doc_type_code
		AND  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
		     			  WHERE ACC_ENTITY_ID = :nd_facility_id)
		FOR UPDATE OF NEXT_DOC_NO;

     if (OERROR)
	 err_mesg("SELECT failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in SY ACC ENTITY DOC TYPE",0,"");

     d_sy_acc_rowid.arr[d_sy_acc_rowid.len] = '\0';    

     EXEC SQL UPDATE SY_ACC_ENTITY_DOC_TYPE 
	      SET NEXT_DOC_NO = NVL(NEXT_DOC_NO,0) + 1,
		MODIFIED_BY_ID  = USER,
		MODIFIED_DATE   = SYSDATE
	        WHERE ROWID = :d_sy_acc_rowid;

      if (OERROR)
	 err_mesg("UPDATE failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");
}

fetch_pat_dtls()
{


     EXEC SQL OPEN BL_BILL_TYPE_PAT_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_BILL_TYPE_PAT_CUR",0,"");

    bl_bill_type_short_desc.arr[0]         = '\0';

    bl_bill_type_short_desc.len            = 0;

     EXEC SQL FETCH BL_BILL_TYPE_PAT_CUR
	       INTO :bl_bill_type_short_desc;

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_BILL_TYPE_PAT_CUR",0,"");
     if (NOT_FOUND)
	 err_mesg("Record not found in BL BILL TYPE",0,"");

     bl_bill_type_short_desc.arr[bl_bill_type_short_desc.len] = '\0';

}

fetch_dtls()
{    
     
     EXEC SQL OPEN BL_BILL_TYPE_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_BILL_TYPE_CUR",0,"");

    bl_recv_acc_int_code.arr[0]            = '\0';
    ar_recv_acc_int_code.arr[0]            = '\0';

    bl_recv_acc_int_code.len               = 0;
    ar_recv_acc_int_code.len               = 0;

     EXEC SQL FETCH BL_BILL_TYPE_CUR
	       INTO :bl_recv_acc_int_code,
		    :ar_recv_acc_int_code;

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_BILL_TYPE_CUR",0,"");
     if (NOT_FOUND)
	 err_mesg("Record not found in BL BILL TYPE",0,"");

     bl_recv_acc_int_code.arr[bl_recv_acc_int_code.len] = '\0';
     ar_recv_acc_int_code.arr[ar_recv_acc_int_code.len] = '\0';

     strcpy(recv_int_code.arr,bl_recv_acc_int_code.arr);
     recv_int_code.len = strlen(recv_int_code.arr);

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     bl_rec_main_acc1_code.arr[0]             = '\0';
     bl_rec_main_acc2_code.arr[0]             = '\0';
     bl_rec_dept_code.arr[0]                  = '\0';
     bl_rec_subledger_group_code.arr[0]       = '\0';
     bl_rec_subledger_line_code.arr[0]        = '\0';
     bl_rec_product_group_code.arr[0]         = '\0';
     bl_rec_product_line_code.arr[0]          = '\0';

     bl_rec_main_acc1_code.len                = 0;
     bl_rec_main_acc2_code.len                = 0;
     bl_rec_dept_code.len                     = 0;
     bl_rec_subledger_group_code.len          = 0;
     bl_rec_subledger_line_code.len           = 0;
     bl_rec_product_group_code.len            = 0;
     bl_rec_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :bl_rec_main_acc1_code,
		    :bl_rec_main_acc2_code,
		    :bl_rec_dept_code,
		    :bl_rec_subledger_group_code,
		    :bl_rec_subledger_line_code,
		    :bl_rec_product_group_code,
		    :bl_rec_product_line_code;
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in BL GL ACCOUNT",0,"");
 
     bl_rec_main_acc1_code.arr[bl_rec_main_acc1_code.len]              = '\0';
     bl_rec_main_acc2_code.arr[bl_rec_main_acc2_code.len]              = '\0';
     bl_rec_dept_code.arr[bl_rec_dept_code.len]                        = '\0';
     bl_rec_subledger_group_code.arr[bl_rec_subledger_group_code.len]  = '\0';
     bl_rec_subledger_line_code.arr[bl_rec_subledger_line_code.len]    = '\0';
     bl_rec_product_group_code.arr[bl_rec_product_group_code.len]      = '\0';
     bl_rec_product_line_code.arr[bl_rec_product_line_code.len]        = '\0';

     strcpy(recv_int_code.arr,ar_recv_acc_int_code.arr);
     recv_int_code.len = strlen(recv_int_code.arr);

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");

     ar_rec_main_acc1_code.arr[0]             = '\0';
     ar_rec_main_acc2_code.arr[0]             = '\0';
     ar_rec_dept_code.arr[0]                  = '\0';
     ar_rec_subledger_group_code.arr[0]       = '\0';
     ar_rec_subledger_line_code.arr[0]        = '\0';
     ar_rec_product_group_code.arr[0]         = '\0';
     ar_rec_product_line_code.arr[0]          = '\0';

     ar_rec_main_acc1_code.len                = 0;
     ar_rec_main_acc2_code.len                = 0;
     ar_rec_dept_code.len                     = 0;
     ar_rec_subledger_group_code.len          = 0;
     ar_rec_subledger_line_code.len           = 0;
     ar_rec_product_group_code.len            = 0;
     ar_rec_product_line_code.len             = 0; 
     p_gl_acc1_code.len			              = 0;
     p_gl_acc2_code.len                       = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :ar_rec_main_acc1_code,
		    :ar_rec_main_acc2_code,
		    :ar_rec_dept_code,
		    :ar_rec_subledger_group_code,
		    :ar_rec_subledger_line_code,
		    :ar_rec_product_group_code,
		    :ar_rec_product_line_code;

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in BL GL ACCOUNT - 2",0,"");
 
     ar_rec_main_acc1_code.arr[ar_rec_main_acc1_code.len]             = '\0';
     ar_rec_main_acc2_code.arr[ar_rec_main_acc2_code.len]             = '\0';
     ar_rec_dept_code.arr[ar_rec_dept_code.len]                       = '\0';
     ar_rec_subledger_group_code.arr[ar_rec_subledger_group_code.len] = '\0';
     ar_rec_subledger_line_code.arr[ar_rec_subledger_line_code.len]   = '\0';
     ar_rec_product_group_code.arr[ar_rec_product_group_code.len]     = '\0';
     ar_rec_product_line_code.arr[ar_rec_product_line_code.len]       = '\0';

     EXEC SQL OPEN AR_CUSTOMER_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

     bl_cust_pmnt_terms_code.arr[0]             = '\0';
     p_gl_acc1_code.arr[0]			            = '\0';
     p_gl_acc2_code.arr[0]			            = '\0';

     bl_cust_pmnt_terms_code.len                = 0;

     EXEC SQL FETCH AR_CUSTOMER_CUR
	       INTO :bl_cust_pmnt_terms_code, 
                    :p_gl_acc1_code,
		    :p_gl_acc2_code;

     if (OERROR)
	 err_mesg("FETCH failed on cursor AR_CUSTOMER",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in AR CUSTOMER",0,"");     
     
     bl_cust_pmnt_terms_code.arr[bl_cust_pmnt_terms_code.len] = '\0';
     bl_cust_pmnt_terms_code.arr[bl_cust_pmnt_terms_code.len] = '\0';
     p_gl_acc1_code.arr[p_gl_acc1_code.len] 				  = '\0';
     p_gl_acc2_code.arr[p_gl_acc2_code.len] 				  = '\0';     
     
	 if (nd_dr_cnt_acc.arr[0] == 'N')
	 {                                                                       
	 	strcpy(ar_rec_main_acc1_code.arr,p_gl_acc1_code.arr);
	 	strcpy(ar_rec_main_acc2_code.arr,p_gl_acc2_code.arr);
	 }	
	 	
	 	     
     

     EXEC SQL OPEN AR_PMNT_TERMS_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor AR_PMNT_TERMS_CUR",0,"");

     ar_pmnt_cred_days_period.arr[0]           = '\0';
     ar_pmnt_settl_days_period.arr[0]          = '\0';
     ar_pmnt_settl_percent.arr[0]              = '\0';

     ar_pmnt_cred_days_period.len              = 0;
     ar_pmnt_settl_days_period.len             = 0;
     ar_pmnt_settl_percent.len                 = 0;

     EXEC SQL FETCH AR_PMNT_TERMS_CUR
	       INTO :ar_pmnt_cred_days_period,
		    :ar_pmnt_settl_days_period,
		    :ar_pmnt_settl_percent;

     if (OERROR)
	 err_mesg("FETCH failed on cursor AR_PMNT_TERMS_CUR",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in AR PMNT TERMS",0,"");

     ar_pmnt_cred_days_period.arr[ar_pmnt_cred_days_period.len]       = '\0';
     ar_pmnt_settl_days_period.arr[ar_pmnt_settl_days_period.len]     = '\0';
     ar_pmnt_settl_percent.arr[ar_pmnt_settl_percent.len]             = '\0';

}

insert_ar_patient()
{

     pat_dtls();

     EXEC SQL INSERT INTO AR_PATIENT_DTLS
	       (
		 DOC_TYPE_CODE,
		 DOC_NUM,
		 PATIENT_ID,
		 PATIENT_NAME,
		 BILL_DOC_TYPE_CODE,
		 BILL_NUM,
		 BILL_DATE,
	         BILL_TYPE_CODE,         
		 BILLING_GROUP,          
		 REMARKS,
		 AMOUNT,
		 PEND_AMOUNT
	       )
	     VALUES
	       (
		 :nd_new_doc_type_code,            /* DOC_TYPE_CODE      */
		 :nd_inv_start_doc_num,            /* DOC_NUM       */
		 :bl_h_patient_id,                 /* PATIENT_ID         */
		 SUBSTR(:nd_pat_name,1,30),
		 :bl_h_doc_type_code,              /* BILL DOC TYPE CODE */
		 :bl_h_doc_num,                    /* BILL NUM           */
		 TO_DATE(:bl_h_doc_date,'DD/MM/YYYY'),                   /* BILL_DATE          */
		 :bl_h_bill_type_code,	
		 :bl_h_blng_grp_id,
		 :bl_bill_type_short_desc,         /* REMARKS            */
		 NVL(:bl_h_bill_tot_outst_amt,0),   /* AMOUNT             */
		 NVL(:bl_h_bill_tot_outst_amt,0)
	       );

     if (OERROR)
	 err_mesg("INSERT failed on table AR_PATIENT_DTLS",0,"");
}

pat_dtls()
{
nd_pat_name.arr[0] = '\0';
nd_pat_name.len = 0;

EXEC SQL SELECT short_name INTO :nd_pat_name FROM MP_PATIENT_MAST
WHERE patient_id = :bl_h_patient_id;

bl_h_patient_id.arr[bl_h_patient_id.len] = '\0';

if (OERROR)
 err_mesg("SELECT failed on table MP_PATIENT_MAST",0,"");

}


insert_ar_rec()
{

/*-- The narration modified by prefixing customer code along with the 
     current narration as per AH requirement VSK 01/05/1999 
	 current narration as of now is NULL in this. */

nd_narration.arr[0] = '\0';
nd_narration.len = 0;
sprintf(nd_narration.arr,"%-10s",bl_h_prev_cust_code.arr);
nd_narration.len = strlen(nd_narration.arr);
nd_narration.arr[nd_narration.len] = '\0';



     EXEC SQL INSERT INTO AR_INV_HDR
	       (
		 DOC_TYPE_CODE,
		 DOC_NUM,
		 LAST_LINE_NUM,
		 CUST_CODE,
		 DOC_DATE,
		 NARRATION,
		 BASE_DATE,
		 DUE_DATE,
		 GROSS_AMT,
		 PAYABLE_AMT,
		 DISCOUNT_AMT,
		 PMNT_TERMS_CODE,
		 SETTLEMENT_DATE,
		 SETTLEMENT_PERC,
		 CUST_REF,
		 PATIENT_ID,
		 BILLING_GROUP,
		 BILL_DOC_TYPE_CODE,
		 BILL_NUM,
		 BILL_DATE,
		 DOCTOR_FEE_AMT,
		 MAIN_ACC1_CODE,
		 MAIN_ACC2_CODE,
		 SUBLEDGER_GROUP_CODE,
		 SUBLEDGER_LINE_CODE,
		 DEPT_CODE,
		 PRODUCT_GROUP_CODE,
		 PRODUCT_LINE_CODE,
		 POST_MONTH,
		 POST_YEAR,
		 ERROR_FLAG,
		 PRINT_FLAG,
		 POSTED_FLAG,
		 INTERFACE_FLAG,
		 MAIN_ACC1_CODE_NEW,
		 MAIN_ACC2_CODE_NEW,
		 SUBLEDGER_GROUP_CODE_NEW,
		 SUBLEDGER_LINE_CODE_NEW,
		 DEPT_CODE_NEW,
		 PRODUCT_GROUP_CODE_NEW,
		 PRODUCT_LINE_CODE_NEW,
		 BILL_TYPE_CODE,
		 ADDED_BY_ID,                    
		 MODIFIED_BY_ID,                 
		 ADDED_DATE,                     
		 MODIFIED_DATE,                  
		 OPERATING_FACILITY_ID,
		 ACC_ENTITY_CODE,
		 MODULE_ID,              
		 CONSOLIDATED_INV_YN              
	       )
	      VALUES
	       (
		 :nd_new_doc_type_code,             /* DOC_TYPE_CODE */
		 :nd_inv_start_doc_num,             /* DOC_NUM       */
		 1,                                 /* LAST LINE NUM */
		 :bl_h_prev_cust_code,              /* CUST CODE     */
		 TO_DATE(:nd_inv_date,'DD/MM/YYYY'),                      /* DOC DATE      */
		 :nd_narration,                              /* NARRATION     */
		 TO_DATE(:nd_inv_date,'DD/MM/YYYY'),                      /* DOC DATE      */
		 to_date(:nd_inv_date,'DD/MM/YYYY') + :ar_pmnt_cred_days_period, /*DUE DATE*/
		 :nd_sum_outst_amt,                 /* GROSS AMT     */
		 :nd_sum_outst_amt,                 /* PAYABLE AMT   */
		 0,                                 /* DISCOUNT AMT  */
		 :bl_cust_pmnt_terms_code,          /* PMNT TERMS    */
		 to_date(:nd_inv_date,'DD/MM/YYYY') + :ar_pmnt_settl_days_period,/*STLMT DT*/
		 :ar_pmnt_settl_percent,           /* SETTLEMENT PERC*/
		 :nd_credit_ref,                   /* CUST REF       */
		 :nd_st_patient_id,                /* PATIENT ID     */
		 :bl_h_blng_grp_id,	/*:nd_billing_grp,        BILLING GROUP  */
		 :nd_st_doc_type_code,             /* BILL DOC TYPE CODE */
		 :nd_st_doc_num,                   /* BILL NUM       */
		 TO_DATE(:nd_inv_date,'DD/MM/YYYY'),                     /* BILL DATE      */
		 :nd_sum_drfee_amt,                /* DOCTOR FEE AMT */
		 :ar_rec_main_acc1_code,           /* -------------- */
		 :ar_rec_main_acc2_code,           /*                */
		 :ar_rec_subledger_group_code,     /*    POSTING     */
		 :ar_rec_subledger_line_code,      /*                */
		 :ar_rec_dept_code,                /*      A/C       */
		 :ar_rec_product_group_code,       /*                */
		 :ar_rec_product_line_code,        /* -------------- */
		 :bl_par_post_month,               /* POST MONTH     */
		 :bl_par_post_year,                /* POST YEAR      */
		 NULL,                             /* ERROR FLAG     */
		 'N',                              /* PRINT FLAG     */
		 NULL,                             /* POSTED FLAG    */
		 NULL,                             /* INTERFACE FLAG */
		 :ar_rec_main_acc1_code,           /* -------------- */
		 :ar_rec_main_acc2_code,           /*                */
		 :ar_rec_subledger_group_code,     /*    POSTING     */
		 :ar_rec_subledger_line_code,      /*                */
		 :ar_rec_dept_code,                /*      A/C       */
		 :ar_rec_product_group_code,       /*                */
		 :ar_rec_product_line_code,        /* -------------- */
		 :nd_bill_type,                     /* BILL TYPE CODE */
		 USER,                    
		 USER,                 
		 SYSDATE,                     
		 SYSDATE,                  
		 :nd_operating_facility_id,
		 :nd_acc_entity_code,
		 :nd_module_id,
		 :nd_inv_status
	       );

     if (OERROR)
	 err_mesg("INSERT failed on table AR_INV_HDR",0,"");

     EXEC SQL INSERT INTO AR_INV_LINE
	       (
		 DOC_TYPE_CODE,
		 DOC_NUM,
		 LINE_NUM,
		 MAIN_ACC1_CODE,
		 MAIN_ACC2_CODE,
		 SUBLEDGER_GROUP_CODE,
		 SUBLEDGER_LINE_CODE,
		 DEPT_CODE,
		 PRODUCT_GROUP_CODE,
		 PRODUCT_LINE_CODE,
		 AMT_LOCAL,
		 NARRATION,
		 MAIN_ACC1_CODE_NEW,
		 MAIN_ACC2_CODE_NEW,
		 SUBLEDGER_GROUP_CODE_NEW,
		 SUBLEDGER_LINE_CODE_NEW,
		 DEPT_CODE_NEW,
		 PRODUCT_GROUP_CODE_NEW,
		 PRODUCT_LINE_CODE_NEW,
		 ACC_ENTITY_CODE
	       )
	     VALUES
	       (
		 :nd_new_doc_type_code,             /* DOC_TYPE_CODE  */
		 :nd_inv_start_doc_num,             /* DOC_NUM       */
		 1,                                 /* LINE NUM       */
		 :bl_rec_main_acc1_code,            /* -------------- */
		 :bl_rec_main_acc2_code,            /*                */
		 :bl_rec_subledger_group_code,      /*    POSTING     */
		 :bl_rec_subledger_line_code,       /*                */
		 :bl_rec_dept_code,                 /*      A/C       */
		 :bl_rec_product_group_code,        /*                */
		 :bl_rec_product_line_code,         /* -------------- */
		 NVL(:nd_sum_outst_amt,0),          /* AMT LOCAL      */
		 :nd_narration,                              /* NARRATION      */
		 :bl_rec_main_acc1_code,            /* -------------- */
		 :bl_rec_main_acc2_code,            /*                */
		 :bl_rec_subledger_group_code,      /*    POSTING     */
		 :bl_rec_subledger_line_code,       /*                */
		 :bl_rec_dept_code,                 /*      A/C       */
		 :bl_rec_product_group_code,        /*                */
		 :bl_rec_product_line_code,          /* -------------- */
		 :nd_acc_entity_code
	       );

     if (OERROR)
	 err_mesg("INSERT failed on table AR_INV_LINE",0,"");
}

update_bl_hdr()
{

    EXEC SQL UPDATE BL_PATIENT_FIN_DTLS
    SET
      TOT_OUTST_IP_AMT      =  NVL(TOT_OUTST_IP_AMT,0) -
			       DECODE(:bl_h_episode_type,'I',:bl_h_bill_tot_outst_amt,0),
      TOT_OUTST_OP_AMT      =  NVL(TOT_OUTST_OP_AMT,0) -
			       DECODE(:bl_h_episode_type,'O',:bl_h_bill_tot_outst_amt,0),
      TOT_OUTST_REF_AMT     =  NVL(TOT_OUTST_REF_AMT,0) -
			       DECODE(:bl_h_episode_type,'R',:bl_h_bill_tot_outst_amt,0),
      MODIFIED_BY_ID        =  USER,         
      MODIFIED_DATE         =  SYSDATE,          
      MODIFIED_AT_WS_NO     =  :nd_ws_no,         
      MODIFIED_FACILITY_ID  =  :nd_facility_id         
    WHERE  PATIENT_ID     = :bl_h_patient_id;

    if(OERROR || NO_DATA_FOUND)
	err_mesg("UPDATE failed on table BL_PATIENT_FIN_DTLS",0,"");

    if(bl_h_episode_type.arr[0] != 'R') {
      EXEC SQL UPDATE BL_EPISODE_FIN_DTLS
	       SET    TOT_OUTST_AMT = NVL(TOT_OUTST_AMT,0) - :bl_h_bill_tot_outst_amt,
	        MODIFIED_BY_ID        =  USER,         
	        MODIFIED_DATE         =  SYSDATE,          
      		MODIFIED_AT_WS_NO     =  :nd_ws_no,         
	        MODIFIED_FACILITY_ID  =  :nd_facility_id         
	     WHERE  EPISODE_TYPE  = :bl_h_episode_type
	     AND    EPISODE_ID    = :bl_h_episode_id;

      if(OERROR || NO_DATA_FOUND)
	 err_mesg("UPDATE failed on table BL_EPISODE_FIN_DTLS",0,"");
      }

   if(bl_h_episode_type.arr[0] == 'O') {
     EXEC SQL UPDATE BL_VISIT_FIN_DTLS
	    SET TOT_OUTST_AMT = NVL(TOT_OUTST_AMT,0) - :bl_h_bill_tot_outst_amt,
	        MODIFIED_BY_ID        =  USER,         
	        MODIFIED_DATE         =  SYSDATE,          
      		MODIFIED_AT_WS_NO     =  :nd_ws_no,         
	        MODIFIED_FACILITY_ID  =  :nd_facility_id         
	    WHERE EPISODE_TYPE = :bl_h_episode_type
	    AND   EPISODE_ID   = :bl_h_episode_id
	    AND   VISIT_ID     = :bl_h_visit_id
	     ;

     if(OERROR || NO_DATA_FOUND)
	err_mesg("UPDATE failed on table BL_VISIT_FIN_DTLS",0,"");
     }
        
        
   EXEC SQL UPDATE BL_BILL_HDR
	       SET BILL_STATUS = 'A',
		   AR_INV_DOC_TYPE_CODE = :nd_new_doc_type_code,
		   AR_INV_DOC_NUMBER    = :nd_inv_start_doc_num,
		   AR_INV_DOC_DATE      = TO_DATE(NVL(:nd_inv_date,:bl_h_doc_date),'DD/MM/YYYY'),
		   BILL_TOT_OUTST_AMT   = NVL(BILL_TOT_OUTST_AMT,0) -
				            :bl_h_bill_tot_outst_amt,
		   AMT_TRANSFERRED	= nvl(AMT_TRANSFERRED,0) + :bl_h_bill_tot_outst_amt,
		   CONS_INVOICE_IND	= 'Y',
		   BILL_HOSP_TOT_OUTST_AMT  = NVL(BILL_HOSP_TOT_OUTST_AMT,0)-  :bl_h_bill_hosp_tot_outst_amt,
		   BILL_DRFEE_TOT_OUTST_AMT = NVL(BILL_DRFEE_TOT_OUTST_AMT,0)-
	                                       :bl_h_bill_drfee_tot_os_amt,
                   MODIFIED_BY_ID        =  USER,         
	           MODIFIED_DATE         =  SYSDATE,          
      		   MODIFIED_AT_WS_NO     =  :nd_ws_no,         
	           MODIFIED_FACILITY_ID  =  :nd_facility_id         
	     WHERE ROWID = :bl_h_rowid;

   if (OERROR)
	 err_mesg("UPDATE failed on table BL_BILL_HDR",0,"");
}


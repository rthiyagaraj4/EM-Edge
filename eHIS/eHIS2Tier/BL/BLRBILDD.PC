/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRBILL2.PC                                  */
/* AUTHOR                : M.NITIN KUMAR                                */
/* Converted To Windows  : Prasad B G S       4/7/96                    */
/* DATE WRITTEN          : 10-JUL-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*  PARAMETERS           :            -                                 */   
/*                                                                      */
/*  SUBROUTINES          :                                               */
/*                                                                      */
/*                                                                      */
/************************************************************************/


/*   All reference to HK$ change to Dhs
   -  For American Hospital Implementation. -- G. Viswanath/31/7/1996
*/   

#include <stdio.h>   
#include <string.h>
#include <bl.h>

#define INIT_MESG "Report Generation In Progress"
#define OERROR (sqlca.sqlcode < 0)
#define NO_DATA_FOUND (sqlca.sqlcode == 1403)
#define RESOURCE_BUSY (sqlca.sqlcode == -54)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define DEST_NAME "blrbildd.lis"

#define HSKIP_10 2
#define HSKIP_11 75
#define HSKIP_12 101
#define HSKIP_13 118

#define VSKIP_1 2
#define VSKIP_2 3
#define VSKIP_3 5

#define MAX_LINES 50

#define LEGEND 1

#define LENGTH_WORDS 65 

/*
#define DEBUG 
*/

EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd      [132],
           hosp_name    [31],
           date_time    [20],
           user_id      [20],
           nd_pgm_date  [35],
		   nd_session_id[16];

   VARCHAR nd_blng_grp                [3],
		   nd_fm_episode_id           [9],
		   nd_to_episode_id           [9],
		   nd_fm_patient_id           [21],
		   nd_to_patient_id           [21],
		   nd_visit_id                [5],
           nd_fm_date                 [11],
           nd_to_date                 [11],
		   prt_grp_fm                 [3],
		   prt_line_fm                [3],
		   prt_grp_to                 [3],
		   prt_line_to                [3],
		   nd_operating_facility_id	  [3],
		   prt_grp_line_fm            [5],
		   prt_grp_line_to			  [5];

   char    nd_episode_type,
		   nd_rep_opt,
		   explode_pkg,
		   item_print_yn,
		   d_misc_serv_yn,
		   d_package_ind;

   VARCHAR d_doc_type_code            [7],
		   d_doc_date                 [11], 
		   d_admission_date           [11],
		   d_ward_code                [5],
		   d_room_num                 [5],
		   d_bed_num                  [9],
		   d_physician_id             [16],
		   d_physician_name           [31],
		   d_blng_grp_id              [3],
		   d_prt_grp_hdr_code         [3],
		   d_prt_grp_line_code        [3],
		   d_blng_grp_desc            [31],
		   d_patient_id               [21],
		   d_patient_short_name       [61],
               d_short_name_full          [61],
		   d_patient_short_name1      [61],
		   d_short_name_loc_lang      [61],
		   d_sex                      [2],
		   d_disch_date_time          [17],
		   d_hdr_long_desc            [61],
		   d_hdr_loc_lang_short_desc  [17],
		   d_line_long_desc           [61],
		   d_line_loc_lang_short_desc [17],
		   d_doc_num_prt              [9],
		   d_episode_id               [9],
		   d_prv_doc_type_code        [7],
		   d_prv_doc_num              [9],
		   d_prv_doc_date             [11],
		   d_bill_fm_date             [11],
		   d_bill_to_date             [11],
		   d_last_doc_type_code       [7],
		   d_last_doc_num             [9],
		   d_last_doc_date            [11],
		   d_pkg_serv_code            [11],
           d_pkg_serv_desc            [41],
           d_pkg_serv_desc_loc_lang   [17],
		   d_blng_serv_code           [11],
		   d_blng_serv_desc           [41],
		   d_serv_item_desc           [41],
		   d_serv_item_code           [11],
		   d_blng_serv_desc_loc_lang  [16],
		   d_service_date             [11],
		   d_clinic_code              [5],
		   sub_cur					  [10],
		   currency					  [10],
		   d_visit_date_time          [17];

char       d_package_ind;

int        d_num_of_deps_paid,
           d_qty;

long       d_doc_num;

double     d_serv_disc_amt,
		   d_man_disc_amt,
		   d_overall_disc_amt,
		   d_prepay_adj_amt,
		   d_deposit_adj_amt,
		   d_bill_paid_amt,
		   d_gross_amt,
		   d_prv_amt,
		   d_prv_outst_amt,
		   d_tot_dep_paid_amt;

 char filename[150];

EXEC SQL END DECLARE SECTION;
 

// EXEC ORACLE OPTION(HOLD_CURSOR = YES);
// EXEC ORACLE OPTION(REBIND = NO);

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

char g_prt_grp_hdr_code[3];
char g_prt_grp_line_code[3];

int  g_first_break ;
int  g_print_line_desc;
int g_print_subtot;
int lno = 0, pno = 0;

double g_cum_amt = 0,g_sub_tot = 0;
double tot_disc_amt = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];

int argc;
{
   if (argc < 4)
   {
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(g_pgm_id,"BLRBILL2");

   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle");
      if (uid_pwd.len == 0)
         disp_message(ERR_MESG,"Null oracle uid/pwd");
      proc_exit();
   }

   set_meduser_role();

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);


   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   nd_blng_grp.arr[0]      = '\0';
   nd_fm_episode_id.arr[0] = '\0';
   nd_to_episode_id.arr[0] = '\0';
   nd_fm_patient_id.arr[0] = '\0';
   nd_to_patient_id.arr[0] = '\0';
   nd_fm_date.arr[0]       = '\0';
   nd_to_date.arr[0]       = '\0';
   prt_grp_fm.arr[0]       = '\0';
   prt_line_fm.arr[0]      = '\0';
   prt_grp_to.arr[0]       = '\0';
   prt_line_to.arr[0]      = '\0';
   d_doc_date.arr[0]       = '\0';

   prt_grp_line_fm.arr[0]  = '\0';
   prt_grp_line_to.arr[0]  = '\0';	

   nd_blng_grp.len         = 0;
   nd_fm_episode_id.len    = 0;
   nd_to_episode_id.len    = 0;
   nd_fm_patient_id.len    = 0;
   nd_to_patient_id.len    = 0;
   nd_fm_date.len          = 0;
   nd_to_date.len          = 0;
   prt_grp_fm.len          = 0;
   prt_line_fm.len         = 0;
   prt_grp_to.len          = 0;
   prt_line_to.len         = 0;
   d_doc_date.len          = 0;

   prt_grp_line_fm.len     = 0;
   prt_grp_line_to.len     = 0;

   nd_episode_type = '\0';

   nd_rep_opt      = '\0';
   explode_pkg     = '\0';
   item_print_yn   = '\0';

   EXEC SQL SELECT 
		   OPERATING_FACILITY_ID,
		   PARAM1,PARAM2,
		   PARAM3,PARAM4,PARAM5,PARAM6,
		   PARAM7,PARAM8,PARAM9,
		   PARAM10,PARAM11,PARAM12,PARAM13,PARAM14,
		   TO_CHAR(SYSDATE,'DD/MM/YYYY'),
		   LPAD(nvl(PARAM8, '!!'), 2, ' ')||LPAD(nvl(PARAM9, '!!'), '2', ' '),
		   LPAD(nvl(PARAM10, '~~'), 2, ' ')||LPAD(nvl(PARAM11, '~~'), '2', ' ')
              INTO :nd_operating_facility_id,
				   :nd_blng_grp,
                   :nd_fm_episode_id,
                   :nd_to_episode_id,
                   :nd_fm_patient_id,
                   :nd_to_patient_id,
                   :nd_fm_date,
                   :nd_to_date,
                   :prt_grp_fm,
                   :prt_line_fm,
                   :prt_grp_to,
                   :prt_line_to,
		   :nd_rep_opt,
                   :explode_pkg,
                   :item_print_yn,
                   :d_doc_date,
				   :prt_grp_line_fm,
				   :prt_grp_line_to
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'BLRBILL2'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;	

   	

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_blng_grp.arr[nd_blng_grp.len]              = '\0';
   nd_fm_episode_id.arr[nd_fm_episode_id.len]    = '\0';
   nd_to_episode_id.arr[nd_to_episode_id.len]    = '\0';
   nd_fm_patient_id.arr[nd_fm_patient_id.len]    = '\0';
   nd_to_patient_id.arr[nd_to_patient_id.len]    = '\0';
   nd_fm_date.arr[nd_fm_date.len]  = '\0';
   nd_to_date.arr[nd_to_date.len]  = '\0';
   prt_grp_fm.arr[prt_grp_fm.len]  = '\0';
   prt_line_fm.arr[prt_line_fm.len]  = '\0';
   prt_grp_to.arr[prt_grp_to.len]  = '\0';
   prt_line_to.arr[prt_line_to.len]  = '\0';
   d_doc_date.arr[d_doc_date.len]  = '\0';

   prt_grp_line_fm.arr[prt_grp_line_fm.len] = '\0';
   prt_grp_line_to.arr[prt_grp_line_to.len] = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);

   nd_episode_type = 'I';

   start_prog_msg();

   hosp_name.arr[0]  = '\0';
   currency.arr[0]	 = '\0';
   sub_cur.arr[0]	 = '\0';
   hosp_name.len     = 0;
   currency.len		 = 0;
   sub_cur.len		 = 0;

   EXEC SQL SELECT ACC_ENTITY_NAME, BASE_CURRENCY, BASE_CURRENCY_DEC
	    INTO   :hosp_name, :currency, :sub_cur
	    FROM   SY_ACC_ENTITY
		WHERE  ACC_ENTITY_ID = :nd_operating_facility_id;

    if(OERROR)
	err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]  = '\0';
   currency.arr[currency.len] = '\0';
   sub_cur.arr[sub_cur.len] = '\0';

   prt_bill();

   EXEC SQL DELETE FROM SY_PROG_PARAM
                  WHERE PGM_ID     = 'BLRBILL2'
                    AND SESSION_ID = :nd_session_id
                    AND PGM_DATE   = :nd_pgm_date;
   if (OERROR)   
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");


   end_prog_msg();
   EXEC SQL COMMIT WORK RELEASE;
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

declare_cursors()
{

    EXEC SQL DECLARE BL_EPISODE_CUR CURSOR FOR
	      SELECT to_char(EPISODE_ID),	//3/8/2004
		     PATIENT_ID,
		     BLNG_GRP_ID,
		     TO_CHAR(DISCHARGE_DATE_TIME,'DD/MM/YYYY HH24:MI')
		FROM BL_EPISODE_FIN_DTLS
	       WHERE EPISODE_TYPE in ('I','D') //EPNH 04012005 :nd_episode_type
	         AND EPISODE_ID BETWEEN
		         NVL(:nd_fm_episode_id,'0') AND
		         NVL(:nd_to_episode_id,'99999999')
	         AND PATIENT_ID BETWEEN
		         NVL(:nd_fm_patient_id,'!!!!!!!!!!') AND
			 NVL(:nd_to_patient_id,'~~~~~~~~~~')
	         AND BLNG_GRP_ID = NVL(:nd_blng_grp,BLNG_GRP_ID)
			 AND DISCHARGE_DATE_TIME between to_date(:nd_fm_date||'00:00:00', 'DD/MM/YYYY HH24:MI:SS')		//added this condition 3/8/2004
									 AND     to_date(:nd_to_date||'23:59:59', 'DD/MM/YYYY HH24:MI:SS')			
			 AND NVL(DISCHARGED_YN, 'N') = 'Y'
	        /*AND DISCHARGE_DATE_TIME >=
		     TO_DATE(NVL(:nd_fm_date,'01/01/1000'),'DD/MM/YYYY')     
			 AND DISCHARGE_DATE_TIME <
		         TO_DATE(NVL(:nd_to_date,'01/01/3000'),'DD/MM/YYYY')+1*/
			 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
	       ORDER BY EPISODE_ID;

    EXEC SQL DECLARE IP_EPISODE_CUR CURSOR FOR
             SELECT  TO_CHAR(ADMISSION_DATE_TIME,'DD/MM/YYYY'),
                     CUR_WARD_CODE,
                     CUR_ROOM_NUM,
                     CUR_BED_NUM,
                     CUR_PHYSICIAN_ID
	     FROM    IP_EPISODE
	     WHERE   EPISODE_ID = :d_episode_id
		 AND     FACILITY_ID = :nd_operating_facility_id;

    EXEC SQL DECLARE BL_PAT_FOLIO_CUR CURSOR FOR
             SELECT  PRT_GRP_HDR_CODE,
                     PRT_GRP_LINE_CODE,
                     TO_CHAR(SERVICE_DATE,'DD/MM/YYYY'),
                     BLNG_SERV_CODE,
                     NVL(UPD_GROSS_CHARGE_AMT,0),
                     NVL(SERV_QTY,0),
                     NVL(UPD_DISC_AMT,0),
                     SUBSTR(SERV_ITEM_CODE,1,10),
                     SERV_ITEM_DESC,
                     PACKAGE_IND
             FROM    BL_PATIENT_CHARGES_FOLIO
             WHERE   EPISODE_TYPE in ('I','D') //EPNH 04012005  :nd_episode_type
	     AND     PATIENT_ID   = :d_patient_id
	     AND     EPISODE_ID   = :d_episode_id
		 AND     NVL(TRX_FINALIZE_IND,'X') = 'Y'
		 AND	 OPERATING_FACILITY_ID = :nd_operating_facility_id
	     AND     LPAD(PRT_GRP_HDR_CODE,2,' ')||LPAD(PRT_GRP_LINE_CODE, 2, ' ')
		           BETWEEN 
				   :prt_grp_line_fm AND :prt_grp_line_to
		 /*AND     ( (:explode_pkg = 'Y' AND NVL(PACKAGE_TRX_IND,'X')  = 'N')
	                                     OR        
		       (:explode_pkg = 'N' AND 
			   ( NVL(PACKAGE_IND,'X')      = 'S' OR
			    ( NVL(PACKAGE_TRX_IND,'X')  = 'Y' AND
			       NVL(PACKAGE_IND,'X')      = 'P'
			     )
			   )
		       )
		     )*/
             ORDER BY PRT_GRP_HDR_CODE, PRT_GRP_LINE_CODE,SERVICE_DATE,
		   BLNG_SERV_CODE;

    EXEC SQL DECLARE BL_BLNG_GRP_CUR CURSOR FOR
	     SELECT  LONG_DESC
	     FROM    BL_BLNG_GRP
	     WHERE   BLNG_GRP_ID = :d_blng_grp_id;

    EXEC SQL DECLARE MP_PATIENT_MAST_CUR CURSOR FOR
	     SELECT  /*substr(SHORT_NAME,1,30),
		         decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname1,*/
				 SUBSTR(SHORT_NAME_LOC_LANG,1,16),
				 SEX ,short_name
	     FROM    MP_PATIENT_MAST
	     WHERE   PATIENT_ID = :d_patient_id;

    EXEC SQL DECLARE SY_PHYSICIAN_MAST_CUR CURSOR FOR
	     SELECT  FULL_NAME
	     FROM    SY_PHYSICIAN_MAST
	     WHERE   PHYSICIAN_ID = :d_physician_id;

    EXEC SQL DECLARE PRT_GRP_HDR_CUR CURSOR FOR
	     SELECT  LONG_DESC,
		     LOC_LANG_SHORT_DESC
	     FROM   BL_BLNG_PRT_GRP_HDR
	     WHERE  PRT_GRP_HDR_CODE = :d_prt_grp_hdr_code;

    EXEC SQL DECLARE PRT_GRP_LINE_CUR CURSOR FOR
	     SELECT  LONG_DESC,
		     LOC_LANG_SHORT_DESC
	     FROM   BL_BLNG_PRT_GRP_LINE
	     WHERE  PRT_GRP_HDR_CODE  = :d_prt_grp_hdr_code
	     AND    PRT_GRP_LINE_CODE = :d_prt_grp_line_code;

}


prt_bill()
{
    int print_header = 1;

    open_files();
	
    declare_cursors();
	

    EXEC SQL OPEN BL_EPISODE_CUR;
    if(OERROR)
	err_mesg("OPEN failed on cursor BL_EPISODE_CUR",0,"");

    while(fetch_episode()) {

        EXEC SQL OPEN IP_EPISODE_CUR;
    
        if(OERROR)
	    err_mesg("OPEN failed on cursor IP_EPISODE_CUR",0,"");

	
		EXEC SQL OPEN BL_PAT_FOLIO_CUR;

        if(OERROR)
            err_mesg("OPEN failed on cursor BL_PAT_FOLIO_CUR",0,"");

        fetch_ip_episode();
	
		pno = 1;
		g_cum_amt = 0;
		tot_disc_amt = 0;

		fetch_blng_grp_desc();
		fetch_patient_name();
		fetch_physician_name();
	

		//	print_page_head();

		g_prt_grp_line_code[0] = '\0';
		g_first_break  = 1;
		g_print_subtot = 0;
		print_header   = 1;

		g_prt_grp_hdr_code[0] = '\0'; //deepali

		while(fetch_folio()) {

	    if (print_header == 1) {

	        print_page_head();
	        print_header = 0;
	     }    
	
		if(strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr)) 
		{
			print_break_hdr();//deepali
			print_break_line(); 
		}

	    /*if(strcmp(g_prt_grp_line_code,d_prt_grp_line_code.arr)) 
		print_break_line(); */

		/*if(strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr) &&
		   strcmp(g_prt_grp_line_code,d_prt_grp_line_code.arr))
		   {
              print_break_hdr();
			  print_break_line();
		   }

		else
		{
		 if ((strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr)==0) &&
		     (strcmp(g_prt_grp_line_code,d_prt_grp_line_code.arr)!=0))
		   {
              //print_break_hdr();
			  print_break_line();
		   }
		 else 
		   if ((strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr)!=0) &&
		       (strcmp(g_prt_grp_line_code,d_prt_grp_line_code.arr)==0))
		   {
              print_break_hdr();
			  print_break_line();
		   }

		
		}*/

			
            if(g_print_subtot) {
                fprintf(fp,"\n");
                lno++;
            }
		

	    print_line();
		
	    strcpy(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr);
	    strcpy(g_prt_grp_line_code,d_prt_grp_line_code.arr); 

	    g_cum_amt += d_gross_amt;
	    g_sub_tot += d_gross_amt;
	    tot_disc_amt += d_serv_disc_amt;
	    g_print_subtot = 1;

	} /* end of while fetch_folio() */

	if(g_print_subtot) {
	    

		print_subtot();

    	print_balance_due();

      }
	  
        fflush(fp);


    } /* end of while fetch_episode()  */

	

    fclose(fp);
    return 1;

}

open_files()
{
  

   strcpy(filename,WORKING_DIR);
   strcpy(filename,"blrbildd.lis");

    if( (fp=fopen(filename,"w")) == NULL)
	 {
        disp_message(ERR_MESG,"Error in opening output file...BLRUNBRF.LIS");
	proc_exit();
     }

   /* if ((fp = fopen(DEST_NAME,"w")) == NULL)
   {
        err_mesg("\nError while opening File blrbildd.lis\n",0,"");
        proc_exit();
   } */

}

fetch_ip_episode()
{

    if(nd_episode_type == 'R')
	return 1;
    //EPNH 04012005
    if(nd_episode_type == 'I' || nd_episode_type == 'D' ) {

        d_admission_date.arr[0]    = '\0';
        d_ward_code.arr[0]         = '\0';
        d_room_num.arr[0]          = '\0';
        d_bed_num.arr[0]           = '\0';
        d_physician_id.arr[0]      = '\0';
    
        d_admission_date.len       = 0;
        d_ward_code.len            = 0;
        d_room_num.len             = 0;
        d_bed_num.len              = 0;
        d_physician_id.len         = 0;

        EXEC SQL OPEN IP_EPISODE_CUR;
    
        if(OERROR)
	    err_mesg("OPEN failed on cursor IP_EPISODE_CUR",0,"");
    
        EXEC SQL FETCH IP_EPISODE_CUR INTO 
                       :d_admission_date,
                       :d_ward_code,
                       :d_room_num,
                       :d_bed_num,
                       :d_physician_id;
    
        if(OERROR)
	    err_mesg("FETCH failed on cursor IP_EPISODE_CUR",0,"");
    
        if(NO_DATA_FOUND)
	    return 0;
    
        d_admission_date.arr[d_admission_date.len]            = '\0';
        d_ward_code.arr[d_ward_code.len]              = '\0';
        d_room_num.arr[d_room_num.len]                = '\0';
        d_bed_num.arr[d_bed_num.len]                  = '\0';
        d_physician_id.arr[d_physician_id.len]        = '\0';
    
        return 1;
    }
    else if(nd_episode_type == 'O' || nd_episode_type == 'E' ) {

        d_clinic_code.arr[0]       = '\0';
        d_physician_id.arr[0]      = '\0';
        d_visit_date_time.arr[0]   = '\0';

        d_clinic_code.len          = 0;
        d_physician_id.len         = 0;
        d_visit_date_time.len      = 0;

	EXEC SQL SELECT CLINIC_CODE,
			PHYSICIAN_ID,
			TO_CHAR(VISIT_REGN_DATE_TIME,'DD/MM/YYYY HH24:MI')
		   INTO :d_clinic_code,
			:d_physician_id,
			:d_visit_date_time
		   FROM OP_VISIT
		  WHERE EPISODE_ID = :d_episode_id
		    AND PATIENT_ID = :d_patient_id
		    AND VISIT_ID   = :nd_visit_id
			AND FACILITY_ID = :nd_operating_facility_id;

        if(OERROR)
	    err_mesg("FETCH failed on cursor IP_EPISODE_CUR",0,"");
    
        if(NO_DATA_FOUND)
	    return 0;

        d_clinic_code.arr[d_clinic_code.len]           = '\0';
        d_physician_id.arr[d_physician_id.len]         = '\0';
        d_visit_date_time.arr[d_visit_date_time.len]   = '\0';

	return 1;

    }

}

fetch_episode()
{

    d_episode_id.arr[0]        = '\0';
    d_patient_id.arr[0]        = '\0';
    d_blng_grp_id.arr[0]       = '\0';
    d_disch_date_time.arr[0]   = '\0';

    d_episode_id.len           = 0;
    d_patient_id.len           = 0;
    d_blng_grp_id.len          = 0;
    d_disch_date_time.len      = 0;

    EXEC SQL FETCH BL_EPISODE_CUR
	     INTO  :d_episode_id,
                   :d_patient_id,
					:d_blng_grp_id,
                   :d_disch_date_time;


    if(OERROR)
	err_mesg("FETCH failed on cursor BL_PAT_FOLIO_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    d_episode_id.arr[d_episode_id.len]               = '\0';
    d_patient_id.arr[d_patient_id.len]               = '\0';
    d_blng_grp_id.arr[d_blng_grp_id.len]             = '\0';
    d_disch_date_time.arr[d_disch_date_time.len]     = '\0';

    return 1;

}

fetch_folio()
{

    d_prt_grp_hdr_code.arr[0]  = '\0';
    d_prt_grp_line_code.arr[0] = '\0';
    d_blng_serv_code.arr[0]    = '\0';
    d_serv_item_desc.arr[0]    = '\0';
    d_serv_item_code.arr[0]    = '\0';
    d_service_date.arr[0]      = '\0';

    d_prt_grp_hdr_code.len     = 0;
    d_prt_grp_line_code.len    = 0;
    d_blng_serv_code.len       = 0;
    d_serv_item_code.len       = 0;
    d_serv_item_desc.len       = 0;
    d_service_date.len         = 0;

    d_gross_amt     = 0;
    d_qty           = 0;
    d_serv_disc_amt = 0;

    d_package_ind   = '\0';

    EXEC SQL FETCH BL_PAT_FOLIO_CUR
	     INTO  :d_prt_grp_hdr_code,
		   :d_prt_grp_line_code,
		   :d_service_date,
		   :d_blng_serv_code,
		   :d_gross_amt,
		   :d_qty,
		   :d_serv_disc_amt,
                   :d_serv_item_code,
                   :d_serv_item_desc,
		   :d_package_ind;

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_PAT_FOLIO_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    d_prt_grp_hdr_code.arr[d_prt_grp_hdr_code.len]   = '\0';
    d_prt_grp_line_code.arr[d_prt_grp_line_code.len] = '\0';
    d_service_date.arr[d_service_date.len]           = '\0';
    d_blng_serv_code.arr[d_blng_serv_code.len]       = '\0';
    d_serv_item_code.arr[d_serv_item_code.len]       = '\0';
    d_serv_item_desc.arr[d_serv_item_desc.len]       = '\0';

    d_blng_serv_desc.arr[0]  = '\0';
    d_blng_serv_desc_loc_lang.arr[0]  = '\0';

    d_blng_serv_desc.len     = 0;
    d_blng_serv_desc_loc_lang.len     = 0;

    if(d_package_ind == 'P'&& explode_pkg == 'N') {
        EXEC SQL SELECT LONG_DESC,
		        LOC_LANG_SHORT_DESC,
		        'N'
	         INTO   :d_blng_serv_desc,
                        :d_blng_serv_desc_loc_lang,
		        :d_misc_serv_yn
	         FROM   BL_PACKAGE_HDR
	         WHERE  PACKAGE_CODE = :d_blng_serv_code;

        if(OERROR)
	    err_mesg("SELECT failed on table BL_PACKAGE_HDR",0,"");
    }
    else {
        EXEC SQL SELECT LONG_DESC,
		        LOC_LANG_SHORT_DESC,
		        NVL(MISC_SERV_YN,'N')
	         INTO   :d_blng_serv_desc,
                        :d_blng_serv_desc_loc_lang,
		        :d_misc_serv_yn
	         FROM   BL_BLNG_SERV
	         WHERE  BLNG_SERV_CODE = :d_blng_serv_code;

        if(OERROR)
	    err_mesg("SELECT failed on table BL_BLNG_SERV",0,"");
    }

    d_blng_serv_desc.arr[d_blng_serv_desc.len]  = '\0';
    d_blng_serv_desc_loc_lang.arr[d_blng_serv_desc_loc_lang.len]  = '\0';

    if(d_misc_serv_yn == 'Y') {
	strcpy(d_blng_serv_desc.arr, d_serv_item_desc.arr);
	d_blng_serv_desc_loc_lang.arr[0] = '\0';
    }

    if(item_print_yn == 'Y')
    {
      if(d_serv_item_code.arr[0]) 
      {
	strcpy(d_blng_serv_code.arr, d_serv_item_code.arr);
	strcpy(d_blng_serv_desc.arr, d_serv_item_desc.arr);
	d_blng_serv_desc_loc_lang.arr[0] = '\0';
      }
    }

    return 1;

}

fetch_blng_grp_desc()
{

    EXEC SQL OPEN BL_BLNG_GRP_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor BL_BLNG_GRP_CUR",0,"");

    d_blng_grp_desc.arr[0] = '\0';

    EXEC SQL FETCH BL_BLNG_GRP_CUR INTO
		   :d_blng_grp_desc;

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_BLNG_GRP_CUR",0,"");

    d_blng_grp_desc.arr[d_blng_grp_desc.len] = '\0';

}

fetch_patient_name()
{

    EXEC SQL OPEN MP_PATIENT_MAST_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor MP_PATIENT_MAST_CUR",0,"");

    d_patient_short_name.arr[0]   = '\0';
	d_patient_short_name1.arr[0]   = '\0';
    d_short_name_loc_lang.arr[0]  = '\0';
    d_sex.arr[0]                  = '\0';

    d_patient_short_name.len    = 0;
	d_patient_short_name1.len    = 0;  
    d_short_name_loc_lang.len   = 0;
    d_sex.len                   = 0;   
   
    EXEC SQL FETCH MP_PATIENT_MAST_CUR
	     INTO /*:d_patient_short_name,
			   :d_patient_short_name1,*/
               :d_short_name_loc_lang,
			   :d_sex,
               :d_short_name_full;

    if(OERROR)
	err_mesg("FETCH failed on cursor MP_PATIENT_MAST_CUR",0,"");

    d_patient_short_name.arr[d_patient_short_name.len]    = '\0';
	d_patient_short_name1.arr[d_patient_short_name1.len]    = '\0';
    d_short_name_loc_lang.arr[d_short_name_loc_lang.len]  = '\0';
    d_sex.arr[d_sex.len]                                  = '\0';
    d_short_name_full.arr[d_short_name_full.len]          = '\0';

 	 EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :d_patient_short_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :d_patient_short_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :d_patient_short_name1    := :d_patient_short_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       d_patient_short_name.arr[d_patient_short_name.len]  = '\0';
       d_patient_short_name1.arr[d_patient_short_name1.len]  = '\0';


}

fetch_physician_name()
{

    EXEC SQL OPEN SY_PHYSICIAN_MAST_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor SY_PHYSICIAN_MAST_CUR",0,"");

    d_physician_name.arr[0] = '\0';

    d_physician_name.len    = 0;

    EXEC SQL FETCH SY_PHYSICIAN_MAST_CUR
	     INTO  :d_physician_name;

    if(OERROR)
	err_mesg("FETCH failed on cursor SY_PHYSICIAN_MAST_CUR",0,"");

    d_physician_name.arr[d_physician_name.len] = '\0';

}


fetch_prt_grp_hdr_desc()
{

    d_hdr_long_desc.arr[0]           = '\0';
    d_hdr_loc_lang_short_desc.arr[0] = '\0';

    d_hdr_long_desc.len              = 0;
    d_hdr_loc_lang_short_desc.len    = 0;

    EXEC SQL OPEN PRT_GRP_HDR_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor PRT_GRP_HDR_CUR",0,"");

    EXEC SQL FETCH PRT_GRP_HDR_CUR INTO
	     :d_hdr_long_desc,
	     :d_hdr_loc_lang_short_desc;

    if(OERROR)
	err_mesg("FETCH failed on cursor PRT_GRP_HDR_CUR",0,"");

    d_hdr_long_desc.arr[d_hdr_long_desc.len]                     = '\0';
    d_hdr_loc_lang_short_desc.arr[d_hdr_loc_lang_short_desc.len] = '\0';


}

fetch_prt_grp_line_desc()
{

    d_line_long_desc.arr[0]           = '\0';
    d_line_loc_lang_short_desc.arr[0] = '\0';

    d_line_long_desc.len              = 0;
    d_line_loc_lang_short_desc.len    = 0;

    EXEC SQL OPEN PRT_GRP_LINE_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor PRT_GRP_LINE_CUR",0,"");

    EXEC SQL FETCH PRT_GRP_LINE_CUR INTO
	     :d_line_long_desc,
	     :d_line_loc_lang_short_desc;

    if(OERROR)
	err_mesg("FETCH failed on cursor PRT_GRP_LINE_CUR",0,"");

    d_line_long_desc.arr[d_line_long_desc.len]                     = '\0';
    d_line_loc_lang_short_desc.arr[d_line_loc_lang_short_desc.len] = '\0';


}

print_page_head()
{
    int i;
    static int g_first = 1;

    if(!g_first) 
	fprintf(fp,"\f");

    g_first = 0;

    for(i = 0; i < VSKIP_1; i++) fprintf(fp,"\n");

fprintf(fp,"%-30s%70sPage No        : %-3d\n",hosp_name.arr," ",pno);
fprintf(fp,"%-40s%60sDischarged Date: %10s\n",
	"BILLING DETAILS : DETAILED BREAKDOWN    "," ",d_disch_date_time.arr);
fprintf(fp,"%100sDate           : %s\n\n"," ",d_doc_date.arr);


fprintf(fp,"Patient Id : %-20s  Name : %-30.30s  %-16.16s\n",
	    d_patient_id.arr, d_patient_short_name.arr,
	    d_short_name_loc_lang.arr);

if (strlen(d_patient_short_name1.arr) > 2)
{
	fprintf(fp,"%43s %s\n\n", " ",d_patient_short_name1.arr);
}
  
else     
{ 
  fprintf(fp,"\n");
}

if(nd_episode_type == 'I' || nd_episode_type == 'D' )
    fprintf(fp,"Adm. No.   : %-8s    Ward : %-4s    Room : %-4s  Bed : %-8s\n\n",
	        d_episode_id.arr, d_ward_code.arr, d_room_num.arr, 
	        d_bed_num.arr);
else if(nd_episode_type == 'O' || nd_episode_type == 'E' )
    fprintf(fp,"Episode No.   : %-8s    Visit No : %-4s    Clinic : %-4s \n\n",
	        d_episode_id.arr, nd_visit_id.arr, d_clinic_code.arr);

fprintf(fp,"                       Service    Service                                                                    \n");
fprintf(fp,"            Date       Code       Description                                                   Qty              Amt              Total\n");
fprintf(fp,"------------------------------------------------------------------------------------------------------------------------------------------\n");

if(nd_episode_type == 'R')
    lno = 12;
else
    lno = 14;

}

print_break_hdr()
{

    int i;
    char s_amt[20];

    fetch_prt_grp_hdr_desc();

    if(lno > MAX_LINES)  print_next_page();

    //for(i = 0; i < HSKIP_10; i++) fprintf(fp," ");	
	fprintf(fp,"\n");
    fprintf(fp,"%-2s        %-40s  %21s%-16s\n",d_prt_grp_hdr_code.arr,
	       d_hdr_long_desc.arr, " ",d_hdr_loc_lang_short_desc.arr);

    lno++;
    /*
    g_prt_grp_line_code[0] = '\0';
    */

}

print_break_line()
{

    int i;
    char s_amt[20];

    fetch_prt_grp_line_desc();
	
	/*
    if(!g_first_break) {
       if(lno+3 > MAX_LINES)  print_next_page();
       print_subtot();
       fprintf(fp,"\n\n");
       lno=lno+2;
    }	deepali*/

    /*if(strcmp(g_prt_grp_hdr_code,d_prt_grp_hdr_code.arr)) 
       print_break_hdr();  DEEPALI*/


    g_first_break = 0;
    if(lno > MAX_LINES)  print_next_page();

    for(i = 0; i < HSKIP_10; i++) fprintf(fp," ");
    fprintf(fp,"      %-2s  %-40s  %21s%-16s  \n",d_prt_grp_line_code.arr,
    	         d_line_long_desc.arr, " ",d_line_loc_lang_short_desc.arr);
    lno++;

}

print_line()
{
    int i;

    if(lno > MAX_LINES) print_next_page();

    for(i = 0; i < HSKIP_10; i++) fprintf(fp," ");
    fprintf(fp,"          %10s %-10s %-40s  %-16s  ", d_service_date.arr,
	    d_blng_serv_code.arr, d_blng_serv_desc.arr, 
	    d_blng_serv_desc_loc_lang.arr);

    /* print_formated(d_gross_amt/d_qty,0);*/

    fprintf(fp,"  %3d  ",d_qty);

    print_formated(d_gross_amt, 0);

    /*
    fprintf(fp,"\n");
    lno++;

    fprintf(fp,"                       %-40s", d_serv_item_desc.arr);
    lno++;
    */
}

print_next_page()
{
    int i;

    pno++;

    print_page_head();

}

print_balance_due()
{

    int i;
    int no_of_lines;
    int new_page;
    char out_str[10][133];
	
    for(i=0; i<10; i++) out_str[i][0] = '\0';

    new_page = 0;
    if(lno+6 > MAX_LINES) {
	new_page = 1;
	print_next_page();
    }
	
    if(new_page) {
	for (i=0; i < HSKIP_13; i++) 
	    fprintf(fp, " ");
    }
    else
        fprintf(fp,"  ");

    for(i = 0; i < 18; i++) fprintf(fp,"-"); fprintf(fp,"\n");
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"SUB TOTAL                                     ");
    print_formated(g_cum_amt,1);

    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"LESS Discount                                 ");
    print_formated(tot_disc_amt,1);
    g_cum_amt -= tot_disc_amt;
	

/*
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"LESS Prepayments                             ");
    print_formated(d_prepay_adj_amt,1);
    g_cum_amt -= d_prepay_adj_amt;

    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"TOTAL BALANCE DUE                             ");
    print_formated(g_cum_amt,1);

    for(i = 0; i < HSKIP_13; i++) fprintf(fp," ");
    for(i = 0; i < 18; i++) fprintf(fp,"-"); fprintf(fp,"\n");
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"Previous Outstanding                         ");
    print_formated(d_prv_outst_amt,1);
    g_cum_amt += d_prv_outst_amt;
*/

    for(i = 0; i < HSKIP_13; i++) fprintf(fp," ");
    for(i = 0; i < 18; i++) fprintf(fp,"-"); fprintf(fp,"\n");
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"TOTAL                                         ");
    print_formated(g_cum_amt,1);
	
	for(i = 0; i < HSKIP_13; i++) fprintf(fp," ");
    for(i = 0; i < 18; i++) fprintf(fp,"="); fprintf(fp,"\n");

    g_cum_amt = (g_cum_amt < 0) ? g_cum_amt * -1 : g_cum_amt;

    if(equal(g_cum_amt,0.00)) 
	no_of_lines=0;
    else
        no_of_lines = print_in_words(g_cum_amt,LENGTH_WORDS,sub_cur.arr,out_str);
	
	/*fprintf(fp,"%-6s ",currency.arr);
    for (i =0;i<no_of_lines;i++)
        fprintf(fp,"     %s\n",out_str[i]);*/

}

print_subtot()
{
    int i;

    fprintf(fp,"    ");
    print_formated(g_sub_tot,1);

    for(i = 0; i < HSKIP_12; i++) fprintf(fp," ");
    for(i = 0; i < 15; i++) fprintf(fp,"-");

/*
    for(i = 0; i < HSKIP_11; i++) fprintf(fp," ");
    fprintf(fp,"Sub Total             :  ");
    print_formated(g_sub_tot,1);
    fprintf(fp,"\n");
*/
    g_sub_tot = 0;
    g_print_subtot = 0;
    lno += 1;
}


print_formated(loc_amount,flg)
double loc_amount;
int flg;
{
   char s_amt[20], str_amt[20];
 

     if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
      //  ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
            //    ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }
/*
   sprintf(s_amt,"%15.2f",loc_amount);
   format_amt(s_amt);

   if (loc_amount < 0)
      fprintf(fp,"%15s-",s_amt);
   else
      fprintf(fp,"%15s ",s_amt);
 */
   if(flg)
       fprintf(fp,"\n");
}

/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLREXMAD.PC                                  */
/* AUTHOR                : Jagwinder Kaur                               */  
/* DATE WRITTEN          : 06/06/2004                                   */      
/*************************************************************************/
         
		 
		  

#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define ONLINE_PRINTING 1
#define ESC     0x1B
/*
#define DEBUG 0
*/  

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR      hosp_name                       [120],
			l_acc_name						[120],
			date							[20],
			nd_date							[20],
            date_time                       [20],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
			nd_facility				        [3],
			nd_rep_id						[9],
			bl_doc_no						[16],
			bl_doc_type_code				[7],
			bl_adj_doc_no					[16],
			old_doc_no						[16],
			bl_doc_date						[11],
			nd_bl_doc_date					[20],
			bl_adj_doc_date					[11],
			nd_bl_adj_doc_date				[20],
			bl_patient_no					[21],
			bl_patient_name					[61],
			bl_adj_exm_doc_ref				[31],
			bl_adj_exm_doc_date				[11],
			nd_bl_adj_exm_doc_date			[20],
			bl_reason_code					[5],
			bl_reason_desc					[4000],
			bl_reason_desc1					[100],
			bl_reason_desc2					[100],
			bl_reason_desc3					[100],
			bl_reason_desc4					[100],
			bl_reason_desc5					[100],
			bl_remarks						[1000],
			bl_remarks1						[200],
			bl_remarks2						[200],
			bl_remarks3						[200],
			nd_fm_date						[11],
			nd_fm_loc_date 					[20],
			nd_to_loc_date					[20],
			nd_to_date						[11],
			nd_reason_code					[5],
			nd_doc_type						[7],
			nd_doc_type_to				    [7],
			nd_fm_doc_num					[9],
			nd_to_doc_num					[9],
			old_doc_date					[11],
			nd_old_doc_date					[20],
			l_translated_value				[201],
			l_cash_book_acc_desc			[16],
			l_pk_value						[100],
			tmp_date						[11],
			nd_temp_date					[20],
			tmp_adj_date					[11],
			nd_temp_adj_date				[20],
			nd_loc_date						[20],
			language_id						[3],
			nd_base_curr					[7],
			base_curr						[7],
			p_language_id					[3],
			uid								[50],
			P_START_TIME					[60] ;

double      bl_doc_amt,bl_adj_doc_amt,bl_outst_amt,bl_doc_num,tot_adj_doc_amt,bl_adj_amt;
			
int i,null_place,null_remark;
char nd_adj_stat;
char nd_trn_type;
char bl_cancel_flag;
char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200];
char fm_date[11],to_date[11],TEMP[10];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;
int    first = 1;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLREXMAD");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
  
	  
        if (sqlca.sqlcode < 0 )
	    {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 

		EXEC SQL select GET_TRACE_TIMESTAMP
			 into :P_START_TIME from dual;

		//strcpy(p_language_id.arr,language_id.arr);
		//p_language_id.len = language_id.len;//LEAP-INT-SCF-INC56665
		
        strcpy(p_language_id.arr,l_language_id.arr);
		p_language_id.len = l_language_id.len;
		
    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 



    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

		strcpy(nd_rep_id.arr,argv[5]);
		nd_rep_id.len = strlen(nd_rep_id.arr);
    	
		nd_fm_date.arr[0]		= '\0';
		nd_to_date.arr[0]		= '\0';
		nd_reason_code.arr[0]	= '\0';
		nd_doc_type.arr[0]		= '\0';
		nd_doc_type_to.arr[0]		= '\0';
		nd_fm_doc_num.arr[0]	= '\0';
		nd_to_doc_num.arr[0]	= '\0';
		uid.arr[0]				= '\0';
				
		nd_fm_date.len		= 0;
		nd_to_date.len		= 0;
		nd_reason_code.len	= 0;
		nd_doc_type.len		= 0;
		nd_doc_type_to.len		= 0;
		nd_fm_doc_num.len	= 0;
		nd_to_doc_num.len	= 0;
		uid.len				= 0;
	
		EXEC SQL SELECT	PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,PARAM6,PARAM7,PARAM8,PARAM11,PARAM9
				INTO	:nd_trn_type,
						:nd_reason_code,
						:nd_fm_date,
						:nd_to_date,
						:nd_doc_type,
						:nd_fm_doc_num,
						:nd_to_doc_num,
						:nd_adj_stat,
						:uid,
						:nd_doc_type_to
			  FROM SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;
		
		/*
		Added :nd_doc_type_to for LEAP-INT-SCF-INC56665 by Arulmalar on 29/9/2015
		disp_message(ERR_MESG,d_curr_pgm_name.arr);
		disp_message(ERR_MESG,nd_session_id.arr);
		disp_message(ERR_MESG,nd_pgm_date.arr);
		*/


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

		nd_reason_code.arr[nd_reason_code.len]	= '\0';
		nd_fm_date.arr[nd_fm_date.len]			= '\0';
		nd_to_date.arr[nd_to_date.len]			= '\0';
		nd_doc_type.arr[nd_doc_type.len]		= '\0';
		nd_fm_doc_num.arr[nd_fm_doc_num.len]	= '\0';
		nd_to_doc_num.arr[nd_to_doc_num.len]	= '\0';
		uid.arr[uid.len]						= '\0';
		

	
	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;
			  

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

    	declare_cur();

		get_language_id();

    	fetch_hosp_name();

		fetch_legend_value();

    	open_file();

	//	print_head();		

		open_hdr();
        
	    print_hdr();


	EXEC SQL EXECUTE
	BEGIN	
		TRACE_DURATION_BL(
		 :nd_rep_id ,
		 'Adjustment Document Report Spooling' ,
		 :P_START_TIME ,
		 :uid );
	  END;
	  END-EXEC;

	EXEC SQL select GET_TRACE_TIMESTAMP
			 into :P_START_TIME from dual;
	    end_of_rep();
	EXEC SQL EXECUTE
	BEGIN	
		TRACE_DURATION_BL(
		 :nd_rep_id ,
		 'Adjustment Document Report Printing' ,
		 :P_START_TIME ,
		 :uid );
	  END;
	  END-EXEC;
		close_dtl();


    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

declare_cur()
{
	

	EXEC SQL DECLARE ADJ_HDR_CUR CURSOR FOR 
	select	doc_type_code||'/'||to_char(doc_num) document,
			doc_type_code d_type,
			doc_num d_num,
			doc_date,
			doc_amt,
			to_char(doc_date,'DD/MM/YYYY'),
			patient_id,
			adj_exm_doc_ref,
			to_char(adj_exm_doc_ref_date,'DD/MM/YYYY'),
			reason_code,
			remarks,
			instr(remarks,' '),
			'N'
			from bl_bill_adj_hdr 
			where operating_facility_id=:nd_facility
			and DECODE(adjust_exempt_ind,'S','A',adjust_exempt_ind) = nvl(:nd_trn_type,adjust_exempt_ind) /*ADDED BY NAGARAJAN FOR IN42550 ON 11/9/2013*/
			//and nvl(cancelled_yn,'N') = NVL(:nd_adj_stat,nvl(cancelled_yn,'N'))
			and :nd_adj_stat = 'N'
			and reason_code = decode(:nd_reason_code,'!!!!',reason_code,:nd_reason_code)
			and trunc(doc_date) between to_date(nvl(:nd_fm_date,'01/01/1401'),'DD/MM/YYYY') and nvl(to_date(:nd_to_date,'DD/MM/YYYY'),sysdate)
			//and doc_type_code = :nd_doc_type
			//and doc_num between nvl(to_number(:nd_fm_doc_num),0) and nvl(to_number(:nd_to_doc_num),99999999)
			and doc_type_code||nvl(to_number(doc_num),0) between   :nd_doc_type||nvl(to_number(:nd_fm_doc_num),0) and  :nd_doc_type_to||nvl(to_number(:nd_to_doc_num),0) 
			and (doc_type_code,doc_num) not in(select doc_type_code,doc_num
									from bl_bill_adj_dtl_canc 
									where operating_facility_id=:nd_facility
									and trunc(cancelled_date) between to_date(nvl(:nd_fm_date,'01/01/1401'),'DD/MM/YYYY') and nvl(to_date(:nd_to_date,'DD/MM/YYYY'),sysdate))
	
	UNION
	select	a.doc_type_code||'/'||to_char(a.doc_num) document,
			a.doc_type_code d_type,
			a.doc_num d_num,
			a.cancelled_date,
			b.doc_amt,
			to_char(a.cancelled_date,'DD/MM/YYYY'),
			a.patient_id,
			adj_exm_doc_ref,
			to_char(adj_exm_doc_ref_date,'DD/MM/YYYY'),
			a.reason_code,
			a.remarks,
			instr(a.remarks,' '),
			'Y'
			from bl_bill_adj_hdr_canc a,bl_bill_adj_hdr b
			where a.doc_type_code=b.doc_type_code
			and a.doc_num = b.doc_num
			and a.operating_facility_id=:nd_facility			
			and DECODE(b.adjust_exempt_ind,'S','A',b.adjust_exempt_ind) = nvl(:nd_trn_type,b.adjust_exempt_ind) /*ADDED BY NAGARAJAN FOR IN42550 ON 11/9/2013*/
			and :nd_adj_stat = 'Y'
			and a.reason_code = decode(:nd_reason_code,'!!!!',a.reason_code,:nd_reason_code)
			and trunc(cancelled_date) between to_date(nvl(:nd_fm_date,'01/01/1401'),'DD/MM/YYYY') and nvl(to_date(:nd_to_date,'DD/MM/YYYY'),sysdate)
			//and a.doc_type_code = :nd_doc_type
			//and a.doc_num between nvl(to_number(:nd_fm_doc_num),0) and nvl(to_number(:nd_to_doc_num),99999999)
			and a.doc_type_code||nvl(to_number(a.doc_num),0) between   :nd_doc_type||nvl(to_number(:nd_fm_doc_num),0) and  :nd_doc_type_to||nvl(to_number(:nd_to_doc_num),0) 
			order by d_type,d_num;
			

			/*
			disp_message(ERR_MESG,"MAIN QUERY");
disp_message(ERR_MESG,nd_facility.arr);
disp_message(ERR_MESG,nd_reason_code.arr);
			disp_message(ERR_MESG,nd_fm_date.arr);
			disp_message(ERR_MESG,nd_to_date.arr);
			disp_message(ERR_MESG,nd_doc_type.arr);
			disp_message(ERR_MESG,nd_fm_doc_num.arr);
			disp_message(ERR_MESG,nd_to_doc_num.arr);
			*/

	EXEC SQL DECLARE ADJ_DTL_CUR CURSOR FOR 
	select	adj_doc_type_code||'/'||to_char(adj_doc_num),
			adj_doc_date,
			doc_amt,
			to_char(adj_doc_date,'DD/MM/YYYY'),
			bill_out_amt_bef_adj_exm
			from bl_bill_adj_dtl 
			where operating_facility_id=:nd_facility
			and doc_type_code = :bl_doc_type_code
			and doc_num = :bl_doc_num
			order by 2;

}



open_hdr() 
{

    EXEC SQL OPEN ADJ_HDR_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor ADJ_HDR_CUR",0,"");

}

open_dtl() 
{

	EXEC SQL OPEN ADJ_DTL_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor ADJ_DTL_CUR",0,"");
}

close_dtl() 
{

	EXEC SQL CLOSE ADJ_DTL_CUR;
    
}

get_language_id()
{
	language_id.arr[0] = '\0';
	language_id.len = 0;
	
	EXEC SQL SELECT LANGUAGE_ID INTO :language_id FROM SM_APPL_USER where APPL_USER_ID = :user_id;

	if (OERROR)
        err_mesg("SELECTING LANGUAGE_ID failed",0,"");
}

init_date_temp_var()

{
	nd_temp_date.arr[0] = '\0';
	nd_loc_date.arr[0]  = '\0';

	nd_temp_date.len = 0;
	nd_loc_date.len  = 0;

}

fun_change_loc_date()
{

nd_temp_date.len = strlen(nd_temp_date.arr);
nd_temp_date.arr[nd_temp_date.len]='\0';
get_local_date();

}

/*Leap Year*/
get_local_date()
{
    
	//disp_message(ERR_MESG,"CHECK");
	//disp_message(ERR_MESG,nd_temp_date.arr);
	//disp_message(ERR_MESG,p_language_id.arr);
	
	EXEC SQL EXECUTE
	
	DECLARE
    
	//t_date date;--Leap Year Changes for LEAP-INT-SCF-INC56665 Commented by Arulmalar on 29/9/15
	t_date varchar2(20);	

	BEGIN
		/*get_locale_date.convert_to_locale_date(TO_DATE(:nd_temp_date,'dd/mm/yyyy'),
					 :p_language_id,
					  t_date);*/
					  
					  /*GET_LOCALE_DATE_2T.CONVERT_TO_GREG_DATE(TO_DATE(:nd_temp_date,'dd/mm/yyyy'),:p_language_id,t_date);
					  :nd_loc_date:=to_char(t_date,'DD/MM/YYYY');*/--Leap Year Changes for LEAP-INT-SCF-INC56665 Commented by Arulmalar on 29/9/15
					  
			           get_locale_date_2t.convert_to_locale_date(to_date(:nd_temp_date,'DD/MM/YYYY'),:p_language_id,t_date,'DD/MM/YYYY');
    	               :nd_loc_date := t_date;
				
	END;
	
	END-EXEC;
	
	
	
	//disp_message(ERR_MESG,"nd_loc_date");
	//disp_message(ERR_MESG,nd_loc_date.arr);
	

 	if (OERROR)
	{
        err_mesg("SELECTING Date failed",0,"");
	}


		
}


fetch_hdr()
{

bl_doc_no.arr[0]			= '\0';
bl_doc_date.arr[0]			= '\0';
bl_patient_no.arr[0]		= '\0';
bl_adj_exm_doc_ref.arr[0]	= '\0';
bl_adj_exm_doc_date.arr[0]	= '\0';
bl_reason_code.arr[0]		= '\0';
bl_remarks.arr[0]			= '\0';
bl_remarks1.arr[0]			= '\0';
bl_remarks2.arr[0]			= '\0';
bl_remarks3.arr[0]			= '\0';

bl_doc_no.len			= 0;
bl_doc_date.len			= 0;
bl_patient_no.len		= 0;
bl_adj_exm_doc_ref.len	= 0;
bl_adj_exm_doc_date.len	= 0;
bl_reason_code.len		= 0;
bl_remarks.len			= 0;
bl_remarks1.len			= 0;
bl_remarks2.len			= 0;
bl_remarks3.len			= 0;
bl_doc_amt              = 0;

      EXEC SQL FETCH ADJ_HDR_CUR
               INTO :bl_doc_no,
					:bl_doc_type_code,
					:bl_doc_num,
					:tmp_date,
					:bl_doc_amt,
					:bl_doc_date,
					:bl_patient_no,
					:bl_adj_exm_doc_ref,
					:bl_adj_exm_doc_date,
					:bl_reason_code,
					:bl_remarks,
					:null_remark,
					:bl_cancel_flag;

       if (OERROR)
            err_mesg("FETCH failed on cursor ADJ_HDR_CUR",0,"");

bl_doc_no.arr[bl_doc_no.len]					= '\0';
bl_doc_type_code.arr[bl_doc_type_code.len]		= '\0';
bl_doc_date.arr[bl_doc_date.len]				= '\0';
bl_patient_no.arr[bl_patient_no.len]			= '\0';
bl_adj_exm_doc_ref.arr[bl_adj_exm_doc_ref.len]	= '\0';
bl_adj_exm_doc_date.arr[bl_adj_exm_doc_date.len]= '\0';
bl_reason_code.arr[bl_reason_code.len]			= '\0';
bl_remarks.arr[bl_remarks.len]					= '\0';

    //return(LAST_ROW?0:1);
}

remarks_spl()
{

	EXEC SQL EXECUTE
	BEGIN
	declare
		str1   varchar2(4000);
		str2   varchar2(1000);
    
	 BEGIN
     blcommon.split_words(:bl_remarks,75,'*',1,str1,str2);
	    IF str2 IS NOT NULL THEN
         :bl_remarks1 := str2;
        END IF;
	 blcommon.split_words(:bl_remarks,75,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_remarks2  := str2;
       END IF;
	 blcommon.split_words(:bl_remarks,75,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_remarks3    :=  str2;
        END IF;
     
	 END;
	 END;
	END-EXEC;
		bl_remarks1.arr[bl_remarks1.len]  = '\0';
		bl_remarks2.arr[bl_remarks2.len]  = '\0';
		bl_remarks3.arr[bl_remarks3.len]  = '\0';
	}

fetch_dtl()
{

bl_adj_doc_no.arr[0]		= '\0';
bl_adj_doc_date.arr[0]		= '\0';

bl_adj_doc_no.len			= 0;
bl_adj_doc_date.len			= 0;


bl_adj_doc_amt   = 0;
bl_outst_amt     = 0;

      EXEC SQL FETCH ADJ_DTL_CUR
               INTO :bl_adj_doc_no,
					:tmp_adj_date,
					:bl_adj_doc_amt,
					:bl_adj_doc_date,
					:bl_outst_amt;

       if (OERROR)
            err_mesg("FETCH failed on cursor ADJ_DTL_CUR",0,"");

bl_adj_doc_no.arr[bl_adj_doc_no.len]		= '\0';
bl_adj_doc_date.arr[bl_adj_doc_date.len]	= '\0';

    return(LAST_ROW?0:1);
}


print_hdr()
{
  while(fetch_hdr())
  {
    calc_adj_amt();		
    fetch_patient_name();
	fetch_reason_desc();

	
	if (null_remark > 0) 
	remarks_spl();
	else
    strcpy(bl_remarks1.arr,bl_remarks.arr);

	tot_adj_doc_amt = 0;
    if(first)
	 {
	 print_head();
     strcpy(old_doc_no.arr,bl_doc_no.arr);
	 old_doc_no.len=strlen(old_doc_no.arr);
	 first = 0;
	 }

    if(strcmp(old_doc_no.arr,bl_doc_no.arr) != 0 )
      { 
	  fprintf(fp,"\n\f");
	  print_head();
      }
	
	 if(bl_doc_date.arr[0]!='\0')
	 {
	 init_date_temp_var();

	 strcpy(nd_temp_date.arr,bl_doc_date.arr);
     fun_change_loc_date();
	 strcpy(bl_doc_date.arr,nd_loc_date.arr);
	 }

	  fprintf(fp," %-15.15s : %-15s %-36.36s %-8.8s :%-11s\n\n",loc_legend[2],bl_doc_no.arr," ",loc_legend[3],bl_doc_date.arr); 
			
	fprintf(fp," %-15.15s : %s\n\n",loc_legend[4],bl_patient_no.arr);
	fprintf(fp," %-15.15s : %s\n\n",loc_legend[5],bl_patient_name.arr);  
	if (nd_trn_type == 'E')	
	{
	fprintf(fp," %-23.23s (%s):",loc_legend[6],base_curr.arr);
	print_formated(bl_doc_amt);
	}
	else
	{
	fprintf(fp," %-23.23s (%s):",loc_legend[19],base_curr.arr);
	print_formated(bl_adj_amt);
	}
	fprintf(fp,"\n\n"); 
	
	if(bl_adj_exm_doc_date.arr[0]!='\0')
	{

	init_date_temp_var();
	strcpy(nd_temp_date.arr,bl_adj_exm_doc_date.arr);
	fun_change_loc_date();
	strcpy(bl_adj_exm_doc_date.arr,nd_loc_date.arr);
	}

	fprintf(fp," %-25.25s : %-41.41s ",loc_legend[15],bl_adj_exm_doc_ref.arr);
	fprintf(fp," %-9.9s: %-20.20s\n\n",loc_legend[7],bl_adj_exm_doc_date.arr);
	
		

	if (nd_trn_type == 'E')	
	fprintf(fp," %-25.25s : %-60.60s\n",loc_legend[8],bl_reason_desc1.arr);
    else
	fprintf(fp," %-25.25s : %-60.60s\n",loc_legend[20],bl_reason_desc1.arr);

	if(bl_reason_desc2.arr[0] != '\0')
	fprintf(fp," %-25.25s   %-60.60s\n"," ",bl_reason_desc2.arr);

	if(bl_reason_desc3.arr[0] != '\0')
	fprintf(fp," %-25.25s   %-60.60s\n"," ",bl_reason_desc3.arr);

	if(bl_reason_desc4.arr[0] != '\0')
	fprintf(fp," %-25.25s   %-60.60s\n"," ",bl_reason_desc4.arr);

	if(bl_reason_desc5.arr[0] != '\0')
	fprintf(fp," %-25.25s   %-60.60s\n"," ",bl_reason_desc5.arr);

	fprintf(fp," \n");
	fprintf(fp," %-8.8s : %-75.75s\n",loc_legend[9],bl_remarks1.arr);

	if(bl_remarks2.arr[0] != '\0')
	fprintf(fp," %-8.8s   %-75.75s\n"," ",bl_remarks2.arr);

	if(bl_remarks3.arr[0] != '\0')
	fprintf(fp," %-8.8s   %-75.75s\n"," ",bl_remarks3.arr);
    fprintf(fp," \n");
	if(nd_trn_type == 'E')
	fprintf(fp," %-50.50s \n",loc_legend[10]);
	else
	fprintf(fp," %-50.50s \n",loc_legend[23]);
    fill_dash(93);
    fprintf(fp,"\n");
	if(nd_trn_type == 'E')
	fprintf(fp," %-20.20s %-15.15s %23.23s   %21.21s(%s)\n",loc_legend[11],loc_legend[3],loc_legend[13],loc_legend[12],base_curr.arr);
	else
	fprintf(fp," %-20.20s %-15.15s %23.23s   %21.21s(%s)\n",loc_legend[11],loc_legend[3],loc_legend[13],loc_legend[21],base_curr.arr);
	fill_dash(93);
	fprintf(fp,"\n");
	lctr = lctr + 26;
	open_dtl();
    print_det();
	check_page_end(4,0);
	fprintf(fp,"%-70.70s"," ");
    fill_dash(15);
	fprintf(fp,"\n");
	fprintf(fp,"%68.68s  ",loc_legend[24]);
	print_formated(tot_adj_doc_amt);
	fprintf(fp,"\n");
	fprintf(fp,"%-70.70s"," ");
    fill_dash(15);
	close_dtl();
	strcpy(old_doc_no.arr,bl_doc_no.arr);
	old_doc_no.len=strlen(old_doc_no.arr);

	 }
 
	
}   

print_det()
{
while(fetch_dtl())
   {
    
	check_page_end(1,0);

	
	
	if(bl_adj_doc_date.arr[0]!='\0')
	{
	
	init_date_temp_var();

	strcpy(nd_temp_date.arr,bl_adj_doc_date.arr);

	fun_change_loc_date();

	strcpy(bl_adj_doc_date.arr,nd_loc_date.arr);
	}

	fprintf(fp," %-20.20s %-20.20s    ",bl_adj_doc_no.arr,bl_adj_doc_date.arr); 
	print_formated(bl_outst_amt);
	fprintf(fp,"%7.7s"," ");
	print_formated(bl_adj_doc_amt);
	fprintf(fp,"\n");
	lctr++; 
	
	tot_adj_doc_amt = tot_adj_doc_amt + bl_adj_doc_amt;

	
   }	
}
   
calc_adj_amt()
{
bl_adj_amt = 0;

	EXEC SQL select	sum(nvl(doc_amt,0))
		    into :bl_adj_amt
			from bl_bill_adj_dtl 
			where operating_facility_id=:nd_facility
			and doc_type_code = :bl_doc_type_code
			and doc_num = :bl_doc_num
			and doc_amt>0;
}


end_of_rep()
{
	check_page_end(3,0);
	fprintf(fp,"\n\n %35.35s   %s\n\f"," ",loc_legend[28]);
	fflush(fp);
    fclose(fp);
    
	PrintDocument
	(
		nd_pwd.arr,				//char	*PUidPwd;
		nd_session_id.arr,		//char	*PSessionID;
		nd_facility.arr,		//char	*PFacilityID;
		"BL",					//char	*PModuleID;
		nd_rep_id.arr,			//char	*PDocumentID;
		filename,				//char	*POnlinePrintFileNames;
		"O",					//char	*PLocationTypes;
		" ",					//char	*PLocationCodes;
		1,						//int	PNumOfCopies;
		1,						//int	PPageFrom;
		9999					//int	PPageTo;
	 );
}
 
open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLREXMAD.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLREXMAD.lis");
       proc_exit();
    }

}

print_page_header()
{

    if (nd_fm_date.arr[0] == '\0')
	  strcpy(fm_date,loc_legend[31]);
    else
	  strcpy(fm_date,nd_fm_date.arr);

	if (nd_to_date.arr[0] == '\0')
	  strcpy(to_date,loc_legend[32]);
    else
	  strcpy(to_date,nd_to_date.arr);




print_page_title();
fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1 \n\n\n\n");
fprintf(fp,"           %s \n",loc_legend[33]);
fprintf(fp,"           --------------- \n\n\n\n");
fprintf(fp,"				%s                  : ",loc_legend[34]);

if (nd_trn_type == 'R')
fprintf(fp,"%s",loc_legend[35]);
else
fprintf(fp,"%s",loc_legend[36]);
fprintf(fp,"\n\n");

fprintf(fp,"				%s     %s             : %s\n",loc_legend[37],loc_legend[38],fm_date);
fprintf(fp,"				                 %s               : %s\n\n",loc_legend[39],to_date);
fprintf(fp,"\f");
}


print_head()
{
	print_page_title();
	if (nd_trn_type == 'E')
	{
    if (bl_cancel_flag == 'Y')
	fprintf(fp,"%-37.37s%s"," ",loc_legend[1]);
	else
	fprintf(fp,"%-37.37s%s"," ",loc_legend[1]);
	}
	else
	{
	if (bl_cancel_flag == 'Y')
    
	 fprintf(fp,"%-37.37s%s"," ",loc_legend[18]);    

	else
    
     fprintf(fp,"%-37.37s%s"," ",loc_legend[18]);                                  
		
	}
	fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/		
		if (bl_cancel_flag == 'Y')
		{
		fprintf(fp,"(");
		fprintf(fp,"%c&d0D",ESC); /* set Underline mode */
		fprintf(fp,"%-s",loc_legend[17]);
		fprintf(fp,"%c&d@",ESC); /* release underline mode */
		fprintf(fp,")");
		}
	fprintf(fp,"%c(s-3B",ESC); /* release bold style */	
	fprintf(fp,"\n\n");	
	lctr = 3;
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;

	l_report_width=90;
	l_acc_entity_length = strlen(hosp_name.arr);
	fprintf(fp,"%c(s12H",ESC); 	/* To set the font 			*/
	fprintf(fp,"\n");
	
	//Code for Line 1

	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	print_spaces(l_start_point);
	fprintf(fp,"%s\n",hosp_name.arr);
	
	
}

fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","-");
}

fetch_hosp_name()
{
    l_acc_name.arr[0]= '\0';
	hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	date.arr[0]		 = '\0';
    user_id.arr[0]   = '\0';
	base_curr.arr[0] = '\0';
	nd_temp_date.arr[0] = '\0';
	language_id.arr[0] = '\0';
	nd_loc_date.arr[0] = '\0';

    l_acc_name.len   = 0;
	hosp_name.len    = 0;
    date_time.len    = 0;
	date.len		 = 0;
    user_id.len      = 0;
	base_curr.len    = 0;
	nd_temp_date.len = 0;
	language_id.len  = 0;
	nd_loc_date.len  = 0;


    EXEC SQL SELECT ACCOUNTING_NAME,
					ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/RRRR'),
					TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    USER,
					BASE_CURRENCY
               INTO :l_acc_name,
					:hosp_name, 
					:date,
					:date_time, 
					:user_id,
					:base_curr
               FROM SY_ACC_ENTITY_LANG_VW
	          WHERE ACC_ENTITY_ID = :nd_facility
			  AND   LANGUAGE_ID   = :p_language_id;

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	if(date.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(nd_temp_date.arr,date.arr);
	fun_change_loc_date();
	strcpy(date.arr,nd_loc_date.arr);
	}

	l_acc_name.arr[l_acc_name.len]		   = '\0';
	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	date.arr[date.len]					   = '\0';
	user_id.arr[user_id.len]               = '\0';
	base_curr.arr[base_curr.len]           = '\0';
	nd_temp_date.arr[nd_temp_date.len]     = '\0';
	nd_loc_date.arr[nd_loc_date.len]       = '\0';

}

fetch_patient_name()
{
    bl_patient_name.arr[0] = '\0';
    bl_patient_name.len = 0;

    EXEC SQL SELECT  decode(:p_language_id,'en',short_name,short_name_loc_lang)
               INTO :bl_patient_name
               FROM MP_PATIENT_MAST
	           WHERE PATIENT_ID = :bl_patient_no;

    if (OERROR) 
		err_mesg("SELECT failed on table MP_PATIENT_MAST",0,"");

	bl_patient_name.arr[bl_patient_name.len]           = '\0';
	
}

fetch_reason_desc()
{

    bl_reason_desc.arr[0]	= '\0';
    bl_reason_desc1.arr[0]	= '\0';
    bl_reason_desc2.arr[0]	= '\0';
	bl_reason_desc3.arr[0]	= '\0';
	bl_reason_desc4.arr[0]	= '\0';
	bl_reason_desc5.arr[0]	= '\0';	

	bl_reason_desc.len		= 0;
	bl_reason_desc1.len		= 0;
	bl_reason_desc2.len		= 0;
	bl_reason_desc3.len		= 0;
	bl_reason_desc4.len		= 0;
	bl_reason_desc5.len		= 0;

    EXEC SQL SELECT replace(action_reason_desc,CHR(10),CHR(32)),instr(action_reason_desc,' ')
               INTO :bl_reason_desc,:null_place
               FROM BL_ACTION_REASON_LANG_VW
	           WHERE action_reason_code = :bl_reason_code
			   AND   LANGUAGE_ID	    = :p_language_id;

    if (OERROR) 
		err_mesg("SELECT failed on table BL_ACTION_REASON",0,"");

	bl_reason_desc.arr[bl_reason_desc.len]           = '\0';

    if(null_place > 0)
	{
	EXEC SQL EXECUTE
	BEGIN
	declare
		str1   varchar2(4000);
		str2   varchar2(1000);
    
	 BEGIN
     blcommon.split_words(:bl_reason_desc,60,'*',1,str1,str2);
	    IF str2 IS NOT NULL THEN
         :bl_reason_desc1 := str2;
        END IF;
	 blcommon.split_words(:bl_reason_desc,60,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_reason_desc2  := str2;
       END IF;
	 blcommon.split_words(:bl_reason_desc,60,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_reason_desc3    :=  str2;
        END IF;

	 blcommon.split_words(:bl_reason_desc,60,'*',4,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_reason_desc4    := str2;
        END IF;

	 blcommon.split_words(:bl_reason_desc,60,'*',5,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_reason_desc5    := str2;
        END IF;

     
	 END;
	 END;
	END-EXEC;
	}

	else
	{
     strcpy(bl_reason_desc1.arr,bl_reason_desc.arr);
	 bl_reason_desc1.len = strlen(bl_reason_desc1.arr);
	 }
		bl_reason_desc1.arr[bl_reason_desc1.len]  = '\0';
		bl_reason_desc2.arr[bl_reason_desc2.len]  = '\0';
		bl_reason_desc3.arr[bl_reason_desc3.len]  = '\0';
		bl_reason_desc4.arr[bl_reason_desc4.len]  = '\0';
		bl_reason_desc5.arr[bl_reason_desc5.len]  = '\0';
	
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
  		sprintf(str_amt,"%15s",s_amt);
		fprintf(fp,"%15sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
    }
}                        

check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+10;

	if((lctr+l_lead_lines)> 55) 
	{
		fprintf(fp,"\f");
		print_head();
		lctr = 3;
	}
}

print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}




fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLREXMAD.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		 BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		 END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

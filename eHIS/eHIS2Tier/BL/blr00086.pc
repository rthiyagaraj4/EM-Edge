/************************************************************************/
/* MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR00086.PC                                  */
/* AUTHOR                : Robert Joseph                               */  
/* DATE WRITTEN          : 07/05/2005                                   */      
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define OERROR          (sqlca.sqlcode < 0)
#define MAX_LINES 42
#define REP_WIDTH 156
#define VER  "VER : 4.10\n"
#define ESC  0x1B

EXEC SQL BEGIN DECLARE SECTION;


VARCHAR     hosp_name           [120],
	        date			    [20],
            date_time           [20],
			d_acc_entity_name	[61],
			d_user			    [31],
			d_sysdate			[20],
			d_curr_date			[20],
			nd_facility_id		[3],
	        user_id             [91],
		    nd_pwd 			    [91],
            nd_session_id       [16],
            nd_pgm_date         [25],
            d_curr_pgm_name     [15],
			nd_facility			[3],
			l_translated_value	[201],
			p_language_id		[3],
			l_pk_value			[100];


VARCHAR	    nd_month_year		    [9],
			nd_det_option		    [3],
		    nd_sum_option		    [3],
			nd_month				[30],
			d_blng_grp_catg			[5],
			nd_blng_grp_catg		[5],
			d_doc_type_code			[7],
			d_doc_date				[16],
			d_bed_clinic_code		[8],
			d_bed_class				[8],
			d_description			[30],
			d_bed_class_desc		[15],
			d_clinic_desc			[15];
		

 long d_bill_cnt,sum_cnt,overall_cnt;

char        d_bed_clinic_code_arr[100][8],
			d_bill_amt_arr[100][15];
int			i, j,cntarr=0,lctr=0,page_no=0,cnt=0;

double d_bill_amt=0,sum_amount=0,overall_amt=0;

char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
	        disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLR00086");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
  
	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 

		strcpy(p_language_id.arr,l_language_id.arr);

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);
      
	    nd_month_year.arr[0]	     = '\0';				
        nd_det_option.arr[0]		 = '\0';			
	    nd_sum_option.arr[0]		 = '\0';
		nd_month.arr[0]				 =  '\0';

		EXEC SQL SELECT	PARAM1,PARAM2,PARAM3,to_char(to_date(PARAM1,'MON-YYYY'),'fmMonth YYYY')
		             INTO 
					:nd_month_year,
				    :nd_det_option,
				    :nd_sum_option,
					:nd_month
					  FROM SY_PROG_PARAM
                 WHERE PGM_ID   = :d_curr_pgm_name
                 AND SESSION_ID = :nd_session_id
                 AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");


		 nd_month_year.arr[nd_month_year.len]		='\0';			
		 nd_det_option.arr[nd_det_option.len]		='\0';		
		 nd_sum_option.arr[nd_sum_option.len]		='\0';
		 nd_month.arr[nd_month.len]					='\0';	


		 	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");  



    	declare_cursor();

        
    	get_header_dtls();
	

	    fetch_legend_value();
        
		open_file();

	

		        
         fprintf(fp,"%c&l1O",ESC); /* Set Landscape*/ 
		 fprintf(fp,"%c&a4L",ESC); 	/* To Set the Left margin  		*/
		 fprintf(fp,"%c(s14H",ESC); 	/* To set the font 	*/

     
      print_header();
      	open_bill_dtl_cur();
		
       do_report();
          close_bill_dtl_cur();
    
	       EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

print_end_of_rep();
	   }
	    
declare_cursor()
{

 EXEC SQL DECLARE BILL_DTL_CUR CURSOR FOR 
 SELECT nvl(c.blng_grp_catg,'**') blngcatg,
        DECODE(:nd_det_option,'DI',nvl(a.bed_class_code,'**'),'EM',NVL(a.clinic_code,'**'),'**') bedclinic,
	nvl(count(doc_num),0) doc_num_cnt,
	to_char(A.doc_date,'YYYYMM') trx_date,
	sum(bill_amt) bill_amt 
 FROM bl_bill_dcp_dtl_vw a,
      bl_blng_grp_by_catg c
 WHERE a.operating_facility_id = :nd_facility
 AND to_char(A.doc_date,'YYYYMM') =( TO_CHAR(TO_DATE(:nd_month_year,'MON-RRRR'),'YYYYMM'))
 AND a.blng_grp_id = c.blng_grp_id(+)
 AND A.doc_type_code||a.doc_num NOT IN(SELECT B.DOC_TYPE_CODE||B.DOC_NUMBER FROM BL_CANCELLED_BILLS B WHERE
     TO_CHAR(B.ADDED_DATE,'YYYYMM')=( TO_CHAR(TO_DATE(:nd_month_year,'MON-RRRR'),'YYYYMM')))
	  
 AND (A.EPISODE_TYPE =decode(:nd_det_option,'DI','I','EM','O','R')
      OR
      A.EPISODE_TYPE =decode(:nd_det_option,'DI','D','EM','E','R')
      ) 
 GROUP BY nvl(c.blng_grp_catg,'**'),
       DECODE(:nd_det_option,'DI',nvl(a.bed_class_code,'**'),'EM',NVL(a.clinic_code,'**'),'**'),to_char(A.doc_date,'YYYYMM')

 UNION ALL

 SELECT a.blng_grp_catg,
        b.bed_class_code,
	0,to_char(SYSDATE,'YYYYMM'),0
 FROM bl_blng_grp_catg a, ip_bed_class b    
 // Join condiiton is not required. This query is used for showing zero values
 WHERE :nd_det_option = 'DI'

 UNION ALL

 SELECT a.blng_grp_catg,
        b.clinic_code,
	0,to_char(SYSDATE,'YYYYMM'),0
 FROM bl_blng_grp_catg a, op_clinic_his_vw b
 // Join condiiton is not required. This query is used for showing zero values
 WHERE :nd_det_option = 'EM'

 ORDER BY 1,2;

 EXEC SQL DECLARE BED_CLASS_CUR CURSOR FOR 
 SELECT DISTINCT(DECODE(:nd_det_option,'DI',NVL(BED_CLASS_CODE,'**'),'EM',NVL(CLINIC_CODE,'**'),'**')) bed_class
 FROM BL_BILL_DCP_DTL_VW
 WHERE operating_facility_id =  :nd_facility
 AND to_char(doc_date,'YYYYMM') =( TO_CHAR(TO_DATE(:nd_month_year,'MON-RRRR'),'YYYYMM'))
 AND doc_type_code||doc_num NOT IN(SELECT B.DOC_TYPE_CODE||B.DOC_NUMBER FROM BL_CANCELLED_BILLS B WHERE
 TO_CHAR(B.ADDED_DATE,'YYYYMM')=( TO_CHAR(TO_DATE(:nd_month_year,'MON-RRRR'),'YYYYMM')))
	  
 AND (EPISODE_TYPE =decode(:nd_det_option,'DI','I','EM','O','R')
      OR
      EPISODE_TYPE =decode(:nd_det_option,'DI','D','EM','E','R')
      )	   

 UNION

  SELECT bed_class_code	
  FROM ip_bed_class
  WHERE :nd_det_option = 'DI'

 UNION

  SELECT clinic_code
  FROM op_clinic_his_vw
  WHERE :nd_det_option = 'EM'

  ORDER BY 1;

}




open_bill_dtl_cur() 
	{

	EXEC SQL OPEN BILL_DTL_CUR;
		if (OERROR)
        err_mesg("OPEN failed on cursor BILL_DTL_CUR",0,"");

	}


close_bill_dtl_cur()
   {

	EXEC SQL CLOSE BILL_DTL_CUR;
    
	}



open_bed_class_cur() 
	{

	EXEC SQL OPEN BED_CLASS_CUR;
		if (OERROR)
        err_mesg("OPEN failed on cursor BED_CLASS_CUR",0,"");

	}


close_bed_class_cur()
   {

	EXEC SQL CLOSE BED_CLASS_CUR;
    
	}




fetch_bill_dtl_cur()
  {

  d_blng_grp_catg.arr[0]		='\0';
  d_doc_date.arr[0]				='\0';  
  d_bed_clinic_code.arr[0]		='\0';
  d_bill_cnt =0;

 d_bill_amt=0;
  d_blng_grp_catg.len			= 0;
  d_doc_date.len				= 0;  
  d_bed_clinic_code.len			= 0;


 EXEC SQL FETCH BILL_DTL_CUR INTO
			:d_blng_grp_catg,
			:d_bed_clinic_code,
			:d_bill_cnt,
			:d_doc_date,
			:d_bill_amt;
			


  d_blng_grp_catg.arr[d_blng_grp_catg.len]		='\0';
  d_bed_clinic_code.arr[d_bed_clinic_code.len]	='\0';
  d_doc_date.arr[d_doc_date.len]				='\0'; 
  
 return(LAST_ROW?0:1);

 }

fetch_blng_grp_catg()
	{
		d_description.arr[0]  = '\0';
		d_description.len     = 0;	
		
	          EXEC SQL SELECT  nvl(SHORT_DESC,'**Not Specified**') into :d_description FROM BL_BLNG_GRP_CATG 
	          WHERE BLNG_GRP_CATG=:d_blng_grp_catg;
       
               d_description.arr[d_description.len]	= '\0';
	    if(strcmp(d_blng_grp_catg.arr,"**")==0)
		   strcpy(d_description.arr,"**Not Specified**");
		else if(strcmp(d_blng_grp_catg.arr,"\0")==0)  
		     strcpy(d_description.arr," "); 		   	
	}

 
fetch_bed_class_cur()
  {

  d_bed_class.arr[0]			='\0';
  d_bed_class.len			= 0;


     EXEC SQL FETCH BED_CLASS_CUR INTO
			:d_bed_class;

  d_bed_class.arr[d_bed_class.len]		='\0';
   return(LAST_ROW?0:1);

 }



fetch_amt_summary()
 {
 sum_amount=0;
 sum_cnt=0;
	EXEC SQL SELECT	 nvl(count(a.doc_num),0),SUM(NVL(a.BILL_AMT,0)) 
		             INTO 
                       :sum_cnt,
		   :sum_amount
                       FROM bl_bill_dcp_dtl_vw a,
         bl_blng_grp_by_catg c
 WHERE a.operating_facility_id = :nd_facility
   AND to_char(A.doc_date,'YYYYMM') =( TO_CHAR(TO_DATE(:nd_month_year,'MON-RRRR'),'YYYYMM'))
   AND a.blng_grp_id = c.blng_grp_id(+)
   AND A.doc_type_code||a.doc_num NOT IN(SELECT DOC_TYPE_CODE||DOC_NUM FROM BL_CANCELLED_BILLS WHERE
      TO_CHAR(ADDED_DATE,'YYYYMM')=( TO_CHAR(TO_DATE(:nd_month_year,'MON-RRRR'),'YYYYMM')))
   AND (A.EPISODE_TYPE =decode(:nd_sum_option,'DI','I','EM','O','R')
       OR
		A.EPISODE_TYPE =decode(:nd_sum_option,'DI','D','EM','E','R')
	   ) 
   AND nvl(c.blng_grp_catg,'**')=:d_blng_grp_catg;

     


  
}

 print_header()
 {
open_bed_class_cur() ;
   print_page_title();   

  print_line('-',REP_WIDTH);

  fprintf(fp,"%60s "," ");
    if(strcmp(nd_det_option.arr,"DI")==0)
	   fprintf(fp,"%-s(%-s)--->",loc_legend[7],loc_legend[10]);
    else if(strcmp(nd_det_option.arr,"EM")==0)
       fprintf(fp,"%-s(%-s)--->",loc_legend[8],loc_legend[11]);
     else
	    fprintf(fp,"%-s --->",loc_legend[9]);
     next_line(1);

    fprintf(fp,"%-30s%-30s",loc_legend[12],loc_legend[13]);

    i=1;
	 while(fetch_bed_class_cur())
     {
	 strcpy(d_bed_clinic_code_arr[i],d_bed_class.arr);
	 
	  if(strcmp(nd_det_option.arr,"DI")==0)
	  {
	  fetch_bed_class();
      fprintf(fp,"%15s ",d_bed_class_desc.arr);	
	   }
	  else if(strcmp(nd_det_option.arr,"EM")==0)
	   {
         fetch_clinic_code();
          fprintf(fp,"%15s ",d_clinic_desc.arr);	
	   }
	 i++;
     }  
	 cntarr=i;   


 if(strcmp(nd_sum_option.arr,"DI")==0)
	   fprintf(fp,"          %20s",loc_legend[7]);
    else if(strcmp(nd_sum_option.arr,"EM")==0)
       fprintf(fp,"          %20s",loc_legend[8]);
     else
	   fprintf(fp,"          %20s",loc_legend[9]);

    fprintf(fp," %15s",loc_legend[15]);
	next_line(1);	
	close_bed_class_cur();

	print_line('-',REP_WIDTH);
  }

fetch_clinic_code()
{

		d_clinic_desc.arr[0]  = '\0';
		d_clinic_desc.len     = 0;	
		
	          EXEC SQL SELECT  nvl(SHORT_DESC,'*NotSpecified*') into :d_clinic_desc 
			  FROM OP_CLINIC 
	          WHERE CLINIC_CODE=:d_bed_class;
       
               d_clinic_desc.arr[d_clinic_desc.len]	= '\0';
	    if(strcmp(d_bed_class.arr,"**")==0)
		   strcpy(d_clinic_desc.arr,"*NotSpecified*");		   	
	}


fetch_bed_class()
{

		d_bed_class_desc.arr[0]  = '\0';
		d_bed_class_desc.len     = 0;	
		
	          EXEC SQL SELECT  nvl(SHORT_DESC,'*NotSpecified*') into :d_bed_class_desc 
			  FROM IP_BED_CLASS 
	          WHERE BED_CLASS_CODE=:d_bed_class;
       
               d_bed_class_desc.arr[d_bed_class_desc.len]	= '\0';
	    if(strcmp(d_bed_class.arr,"**")==0)
		   strcpy(d_bed_class_desc.arr,"*NotSpecified*");		   	
	}


do_report()
{
    int c=0,fld_cnt=0;
    char r_amt[15];
    char strvar[100];
    nd_blng_grp_catg.arr[0]= '\0';
    nd_blng_grp_catg.len=0;
 while (fetch_bill_dtl_cur())	
	{               
  if (strcmp(nd_blng_grp_catg.arr,d_blng_grp_catg.arr)==0)
	{
	
	for(i=c;i<=cntarr;i++)
	  {
	 if(strcmp(d_bed_clinic_code_arr[i],d_bed_clinic_code.arr)==0)
	   {
		overall_amt=overall_amt+d_bill_amt;
		copy_amount(d_bill_amt);
	        sprintf(strvar,"%d",d_bill_cnt);
		fprintf(fp,"%15s ",strvar);
		overall_cnt=overall_cnt+d_bill_cnt;
		c=i+1;
		fld_cnt=fld_cnt+1;
        break;
	   }	    
		 else
		    {
			// fprintf(fp,"%15s "," ");
			//fld_cnt=fld_cnt+1;
			 }
		}

 		 }
   else
     {
	  if(cnt==0)
	   {
         print_blng_catg();
         fprintf(fp,"%-30s",loc_legend[17]);
        }
       else
	     {
		  horz_skip((cntarr-fld_cnt)*15+(cntarr-fld_cnt));
          	   fld_cnt=0;
		    sprintf(strvar,"%d",sum_cnt);
			fprintf(fp,"%14s",strvar);
          
		  overall_cnt=overall_cnt+sum_cnt;
		  sprintf(strvar,"%d",overall_cnt);
			fprintf(fp," %15s ",strvar);
             overall_cnt=0;
			 	next_line(1);
          fprintf(fp,"%30s%-30s"," ",loc_legend[18]);
		  for(i=1;i<=cntarr;i++)
			{
			
		  	fprintf(fp,"%15s ",d_bill_amt_arr[i]);
			
			}
            
             print_formated(sum_amount);
            	overall_amt=overall_amt+sum_amount;
              
				 print_formated(overall_amt);
				 overall_amt=0;
				 	next_line(1);
					next_line(1);
        //***********************************
		  for (i=1;i<=cntarr; i++)
			{
			for (j=0;j<=cntarr;j++)
			{
				d_bill_amt_arr[i][j] = '\0';
			}
			} 
		
	//************************************
	  print_blng_catg();
         fprintf(fp,"%-30s",loc_legend[17]);
	     }
		for(i=1;i<=cntarr;i++)
		 {

		if(strcmp(d_bed_clinic_code_arr[i],d_bed_clinic_code.arr)==0)
		    {	
             sprintf(strvar,"%d",d_bill_cnt);
			  fprintf(fp,"%15s ",strvar);
         	  	overall_amt=overall_amt+d_bill_amt;
				overall_cnt=overall_cnt+d_bill_cnt;
			 	copy_amount(d_bill_amt);	  
			c=i+1;
			fld_cnt=fld_cnt+1;
			break;
			}  
		  else
		    {
			 //   fprintf(fp,"%15s "," ");
		           // fld_cnt=fld_cnt+1;
				}
		 }
		   
        }
		nd_blng_grp_catg.arr[0]='\0';
		nd_blng_grp_catg.len=0;
                strcpy(nd_blng_grp_catg.arr,d_blng_grp_catg.arr);
                nd_blng_grp_catg.arr[d_blng_grp_catg.len]='\0';
    
	 cnt=cnt+1;
	 fetch_amt_summary();	
 }
   horz_skip((cntarr-fld_cnt)*15+(cntarr-fld_cnt));
     sprintf(strvar,"%d",sum_cnt);
			fprintf(fp,"%14s",strvar);
      overall_cnt=overall_cnt+sum_cnt;
      
		 sprintf(strvar,"%d",overall_cnt);
			fprintf(fp," %15s",strvar);
         overall_cnt=0;
		 	next_line(1);
  fprintf(fp,"%30s%-30s"," ",loc_legend[18]);
		  for(i=1;i<=cntarr;i++)
			{
		  	fprintf(fp,"%15s ",d_bill_amt_arr[i]);
			
			}
          
 print_formated(sum_amount);
 overall_amt=overall_amt+sum_amount;
  print_formated(overall_amt);
  overall_amt=0;
  		next_line(1);
		next_line(1);
  		print_line('-',REP_WIDTH);

print_footer();
}

print_footer()
  {

 fprintf(fp,"%6s  1)  %s ",loc_legend[19],loc_legend[20]);
 	next_line(1);
  fprintf(fp,"%12s%s "," ",loc_legend[21]);
  	next_line(1);
  fprintf(fp,"%12s%s "," ",loc_legend[22]);
  	next_line(1);
  fprintf(fp,"%12s%s "," ",loc_legend[23]);
  	next_line(1);
	next_line(1);

 fprintf(fp,"%6s  2)  %s "," ",loc_legend[25]);
 	next_line(1);
  fprintf(fp,"%12s%s "," ",loc_legend[26]);
  	next_line(1);
  fprintf(fp,"%12s%s "," ",loc_legend[27]);
  	next_line(1);

  }

print_blng_catg()
  {
  fetch_blng_grp_catg();
	fprintf(fp,"%-30s",d_description.arr);
  }



get_header_dtls()
  {
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	    d_acc_entity_name.arr[0]	=  '\0';
	    d_curr_date.arr[0]		=  '\0';
	    d_user.arr[0]		=  '\0';
	    d_sysdate.arr[0]		=  '\0';
	    d_acc_entity_name.len	=  0;
	    d_curr_date.len		=  0;
	    d_user.len			=  0;
	    d_sysdate.len		=  0;

	EXEC SQL SELECT upper(ACC_ENTITY_NAME), /* description of the institution */
		   USER, TO_CHAR(SYSDATE, 'DD/MM/YYYY'),TO_CHAR(SYSDATE, 'HH24:MI:SS')
			INTO :d_acc_entity_name,
			     :d_user, :d_sysdate,:d_curr_date
			FROM SY_ACC_ENTITY
			WHERE acc_entity_id = :nd_facility;
    
	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
	d_curr_date.arr[d_curr_date.len]	     = '\0';

   
	return;
	err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	proc_exit();
  }




print_page_title()
  {
   
	int hosp_nm_len, rep_title_len = 10, s1, s2,date_len,user_len,pgm_len;
	char v_rep_title[200],v_as_on_date[12];
	fprintf(fp,"MDL : BL");
	hosp_nm_len  =  d_acc_entity_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-8);
	fprintf(fp,"%s", d_acc_entity_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);

	horz_skip(s2-(strlen(loc_legend[5])+strlen(d_sysdate.arr)+3));
	fprintf(fp,"%s : %s", loc_legend[5],d_sysdate.arr);
    
		next_line(1);
	
	fprintf(fp,"OPR : %s", d_user.arr); 	
     user_len=strlen(d_user.arr);
    strcpy(v_rep_title,loc_legend[1]);	

	rep_title_len = strlen(v_rep_title);
	s1 = (REP_WIDTH-rep_title_len)/2;
	horz_skip(s1-user_len-6);
	fprintf(fp,"%s",v_rep_title);


	s2 = (REP_WIDTH-s1-rep_title_len);
	horz_skip(s2-(strlen(loc_legend[6])+strlen(d_curr_date.arr)+5));
		fprintf(fp,"%s : %s",loc_legend[6],d_curr_date.arr);
			next_line(1);



	
	fprintf(fp,"REP : %s",d_curr_pgm_name.arr);
        pgm_len=strlen(d_curr_pgm_name.arr);
	strcpy(v_as_on_date,nd_month.arr);
	date_len= strlen(v_as_on_date);
	s1 = (REP_WIDTH-12-date_len)/2;

	
	//horz_skip(s1-14-pgm_len);
	horz_skip(s1-pgm_len-6);
    fprintf(fp,"%s %s",loc_legend[3],v_as_on_date);

        s2 = (REP_WIDTH-s1-date_len-strlen(loc_legend[3]));
	    horz_skip(s2-(14+strlen(loc_legend[4])));
		fprintf(fp,"%s : %-d",loc_legend[4],++page_no);
			next_line(1);

	lctr = 3;

	
}


 	open_file()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00086.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00086.lis");
       proc_exit();
    }
	
}

	      

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s  ",str_amt);
    }
}  

check_line(skip) /* will check for MAX LINE before printing totals */
		int skip;
{
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
}

next_line(skip) /* will check for MAX LINE before printing totals */		
int skip;
 {
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
	else
	{
		fprintf(fp,"\n"); ++lctr; /*     fprintf(fp,"LNNO:%2d",lno); */
	}
 }
        
next_page() /* will move the cursor to next page */
{
	fprintf(fp,"\n");
	fprintf(fp,"\f");
	fprintf(fp,"\n");
	lctr=2;

	print_header(); 	
}
     
              
print_line(ch,n) /* this is to obtain required characters */
  char ch;
	int n;
	{
	int i;
	for(i=0;i<n;i++)
	fprintf(fp,"%c",ch);  fprintf(fp,"\n");++lctr;
	}
     
horz_skip(num) /* this is to obtain required blank space */
int num;
	{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
	}


fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';
     
		EXEC SQL SELECT LTRIM(RTRIM('BLR00086.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;
       
		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}




copy_amount(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
       // fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
       // fprintf(fp,"%14s  ",str_amt);
    }

  strcpy(d_bill_amt_arr[i],str_amt);
} 


print_end_of_rep()
{
	int col;
    next_line(1);
	horz_skip((REP_WIDTH-23)/2);
	fprintf(fp,"***  END OF REPORT  ***");
	fflush(fp);
    fclose(fp);
  fprintf(fp,"%cE",ESC); /* To Reset the Printer */
}
/****************************************************************************/



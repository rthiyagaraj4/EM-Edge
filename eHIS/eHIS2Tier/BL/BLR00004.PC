/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/  
/* PROGRAM NAME          : BLR00004.PC                                  */
/* AUTHOR                : D. Ganesh Murthi                             */    
/* DATE WRITTEN          : 23/11/2003                                   */        
/*                                                                      */       
/* CALLED FROM           :                                              */
/*                                                                      */  
/*  FUNCTION             :                                              */ 
/*                                                                      */
/*  TABLE DETAILS                                                       */    
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>        

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define REP_WIDTH 158
#define ESC     0x1B
/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR     hosp_name                       [120],
            date_time                       [20],
            user_id                         [91],
			nd_pwd 			    [91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
			nd_facility			    [3],
			
			nd_cash_counter			[5],
			nd_login_datetime		[30],
			nd_logout_datetime		[30],
			nd_user_id				[31],
			p_start_time            [100],
			bl_slmt_desc			[41],
			bl_slmt_desc1			[41],
			bl_trx_date			    [30],
			bl_doc_type_code	    [7],
			bl_bill_doc_type_code	[7],
			bl_doc_date				[25],
			bl_slmt_type_code		[3],
			bl_slmt_type_code1      [3],
			bl_cash_slmt_flag		[2],
			bl_slmt_doc_ref_desc	[31],
 			bl_slmt_doc_ref_date	[25],
			bl_patient_id		    [21],
			bl_episode_type			[3],
			l_previous_rec_ref_ind	[4],
			l_recpt_refund_ind		[4],		
			l_print_logout_date		[30],
			l_print_login_date		[30],
			p_language_id			[2],
			nd_temp_date			[30],
			nd_loc_date				[30],
			date_convert            [30],
		
			bl_bill_date			[25],
			bl_ext_acct_code	    [11],
			bl_payer_name		    [41],
			bl_cash_counter_facility_id   [3],
			bl_cash_counter_code		    [5],
			l_translated_value	[201],
			l_pk_value			[100];

int         bl_doc_number;
int			l_printed=0;
int			bl_episode_id;
int			bl_bill_doc_number;
int			bl_visit_id;
int         i,j;

double      bl_doc_amt,
			bl_total_docamt,
			bl_slmt_doc_amt,
			bl_slmt_tot_amt,
			bl_bill_amt,
			bl_net_amt;

char		filename[150];
char loc_legend[999][201];
char		l_mesg[2000];
char		x_msg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
  
    strcpy(g_pgm_id,"BLR00004");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
    set_meduser_role(); 
	  	strcpy(p_language_id.arr,l_language_id.arr);
		p_language_id.len = l_language_id.len;
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

		strcpy(nd_cash_counter.arr,argv[5]);
		nd_cash_counter.len = strlen(nd_cash_counter.arr);

		strcpy(nd_login_datetime.arr,argv[6]);
		nd_login_datetime.len = strlen(nd_login_datetime.arr);

		strcpy(nd_user_id.arr,argv[7]);
		nd_user_id.len = strlen(nd_user_id.arr);
    	
    //	start_prog_msg();

   p_start_time.arr[0]		='\0'; 
    p_start_time.len        =0;
 	EXEC SQL select GET_TRACE_TIMESTAMP
			 into :p_start_time
			 from dual;
		fetch_sy_prog_param();



    	declare_cur();

		fetch_legend_value();

    	fetch_hosp_name();

    	open_file();
	// ADDED BY RAVIKIRAN S FOR 16916
		fprintf (fp,"%c&l1O",ESC);
		fprintf (fp, "%c(s14H", ESC);	
		open_hdr();
        
		print_rec();

		end_of_rep();  
 proc_trace();
    //end_prog_msg();


    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

fetch_sy_prog_param()
{
	EXEC SQL select NVL(TO_CHAR(logout_date_time,'DD/MM/YYYYHH24:MI:SS'),TO_CHAR(SYSDATE,'DD/MM/YYYYHH24:MI:SS'))
			into   :nd_logout_datetime
			from   bl_cash_counter_slmt_hdr 
			where  CASH_COUNTER_CODE = :nd_cash_counter
			AND	   TO_CHAR(login_date_time,'DD/MM/YYYYHH24:MI:SS') = :nd_login_datetime
			AND    OPERATING_FACILITY_ID = :nd_facility;

	l_print_logout_date.arr[0] = '\0';
	l_print_login_date.arr[0]   = '\0';

	EXEC SQL SELECT TO_CHAR(TO_DATE(:nd_logout_datetime,'DD/MM/YYYYHH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS'),
					TO_CHAR(TO_DATE(:nd_login_datetime,'DD/MM/YYYYHH24:MI:SS'),'DD/MM/YYYY HH24:MI:SS')	
			   INTO :l_print_logout_date,
					:l_print_login_date
			   FROM dual;	

	l_print_logout_date.arr[l_print_logout_date.len] = '\0';
	l_print_login_date.arr[l_print_login_date.len]   = '\0';

}


declare_cur()
{
     EXEC SQL DECLARE DAILY_COLLN CURSOR FOR 
	SELECT
 	to_char(A.DOC_DATE,'dd/mm/yyyy hh24:mi') Trx_date,
 	A.Doc_date  Doc_date,
 	A.DOC_TYPE_CODE           ,
 	A.DOC_NUMBER               ,
 	A.SLMT_TYPE_CODE            ,
 	A.CASH_SLMT_FLAG             ,
 	A.SLMT_DOC_REF_DESC            ,
 	A.SLMT_DOC_REF_DATE            ,
 	A.DOC_AMT                      ,
 	A.PATIENT_ID                   ,
	A.EPISODE_TYPE                 ,
	A.EPISODE_ID					,
	A.VISIT_ID						,
 	A.BILL_DOC_TYPE_CODE           ,
 	A.BILL_DOC_NUMBER              ,
 	to_char(B.DOC_DATE,'dd/mm/yyyy')   BILL_DATE,
 	B.BILL_TOT_AMT         BILL_AMT,
 	B.MAN_DISC_AMT+B.OVERALL_DISC_AMT  NET_AMT,
 	A.ext_acct_code,
 	A.CASH_COUNTER_FACILITY_ID    ,
 	A.CASH_COUNTER_CODE,
	A.RECPT_REFUND_IND
 	FROM 	BL_RECEIPT_REFUND_DTL_VW A, BL_BILL_HDR B
 	where  a.operating_facility_id = :nd_facility 
	and    a.cash_counter_code = nvl(:nd_cash_counter,a.cash_counter_code)
	and    a.added_by_id = nvl(:nd_user_id,a.added_by_id)
	and    A.DOC_DATE between TO_DATE(:nd_login_datetime,'DD/MM/YYYYHH24:MI:SS') 
	and 		TO_DATE(NVL(:nd_logout_datetime,TO_CHAR(SYSDATE,'DD/MM/YYYYHH24:MI:SS')),'DD/MM/YYYYHH24:MI:SS')
  	AND B.DOC_TYPE_CODE(+)= a.BILL_DOC_TYPE_CODE  AND
       		B.DOC_NUM (+)= A.BILL_DOC_NUMBER
 	Union
	SELECT
 	to_char(A.Cancelled_date,'dd/mm/yyyy hh24:mi')     TRX_DATE,
 	C.DOC_DATE           DOC_DATE    ,
 	A.DOC_TYPE_CODE          ,
 	A.DOC_NUMBER              ,  
 	C.SLMT_TYPE_CODE           ,
 	C.CASH_SLMT_FLAG                  ,
 	C.SLMT_DOC_REF_DESC               ,
 	C.SLMT_DOC_REF_DATE               ,
 	(-1*C.DOC_AMT) doc_amt            ,
 	C.PATIENT_ID                      ,
	C.EPISODE_TYPE					  ,
	C.EPISODE_ID					  ,
	C.VISIT_ID						  ,
 	C.BILL_DOC_TYPE_CODE              ,
 	C.BILL_DOC_NUMBER                 ,
 	to_char(B.DOC_DATE,'dd/mm/yyyy')  BILL_DATE     ,
 	BILL_TOT_AMT  BILL_AMT     ,
 	MAN_DISC_AMT+OVERALL_DISC_AMT  NET_AMT,
 	C.ext_acct_code     ,
 	A.CASH_COUNTER_FACILITY_ID        ,
 	A.CASH_COUNTER_CODE,
	c.RECPT_REFUND_IND
 	FROM BL_CANCELLED_BOUNCED_TRX A , BL_BILL_HDR B, bl_receipt_refund_dtl_vw c
 	where c.operating_facility_id = :nd_facility
	and  a.cancelled_date between TO_DATE(:nd_login_datetime,'DD/MM/YYYYHH24:MI:SS') 
			and 	TO_DATE(NVL(:nd_logout_datetime,TO_CHAR(SYSDATE,'DD/MM/YYYYHH24:MI:SS')),'DD/MM/YYYYHH24:MI:SS')
	and     a.cash_counter_code = nvl(:nd_cash_counter,a.cash_counter_code)
	and     a.added_by_id = nvl(:nd_user_id,a.added_by_id)
	AND B.DOC_TYPE_CODE(+)= C.BILL_DOC_TYPE_CODE  AND
            B.DOC_NUM (+)= C.BILL_DOC_NUMBER
	AND C.DOC_TYPE_CODE = A.DOC_TYPE_CODE AND
    	    C.DOC_NUMBER   =  A.DOC_NUMBER
	Order by  22 desc,5,1;    

}

open_hdr()     
{
    EXEC SQL OPEN DAILY_COLLN;
    if (OERROR)
         err_mesg("OPEN failed on cursor DAILY_COLLN",0,"");
}

fetch_hdr()
{  
bl_trx_date.arr[0]   		= '\0';
bl_doc_type_code.arr[0]		= '\0';
bl_doc_date.arr[0] 			= '\0';
bl_bill_date.arr[0]			= '\0';
bl_slmt_doc_ref_date.arr[0] = '\0';
bl_patient_id.arr[0] 		= '\0';
bl_slmt_doc_ref_desc.arr[0] = '\0';
bl_slmt_type_code.arr[0]	= '\0';
bl_cash_slmt_flag.arr[0]	= '\0';
bl_bill_doc_type_code.arr[0]= '\0';
bl_ext_acct_code.arr[0] 	= '\0';
bl_cash_counter_facility_id.arr[0] 	= '\0';
bl_cash_counter_code.arr[0] = '\0';
bl_episode_type.arr[0]		= '\0';

bl_doc_number		= 0;
bl_bill_doc_number	= 0;
bl_doc_amt			= 0;
bl_bill_amt			= 0;
bl_net_amt			= 0;
bl_episode_id		= 0;
bl_visit_id			= 0;


bl_trx_date.len      		= 0;
bl_doc_type_code.len		= 0;
bl_doc_date.len      		= 0;
bl_bill_date.len      		= 0;
bl_slmt_doc_ref_date.len	= 0;
bl_patient_id.len      		= 0;
bl_slmt_doc_ref_desc.len 	= 0;
bl_slmt_type_code.len      	= 0;
bl_cash_slmt_flag.len      	= 0;
bl_bill_doc_type_code.len   = 0;
bl_ext_acct_code.len      	= 0;
bl_cash_counter_facility_id.len = 0;
bl_cash_counter_code.len    = 0;
bl_episode_type.len			= 0;
bl_cash_counter_code.len     = 0;
l_recpt_refund_ind.len     = 0;

      	EXEC SQL FETCH DAILY_COLLN
            INTO 	
			 	:bl_trx_date,
 				:bl_doc_date,
 				:bl_doc_type_code,
				:bl_doc_number,
				:bl_slmt_type_code,
 				:bl_cash_slmt_flag,
 				:bl_slmt_doc_ref_desc,
 				:bl_slmt_doc_ref_date,
 				:bl_doc_amt,
 				:bl_patient_id,
				:bl_episode_type,
				:bl_episode_id,
				:bl_visit_id,
 				:bl_bill_doc_type_code,
 				:bl_bill_doc_number,
 				:bl_bill_date,
 				:bl_bill_amt,
 				:bl_net_amt,
 				:bl_ext_acct_code,
 				:bl_cash_counter_facility_id,
 				:bl_cash_counter_code,
				:l_recpt_refund_ind;

       if (OERROR)
            err_mesg("FETCH failed on cursor DAILY_COLLN",0,"");

bl_trx_date.arr[bl_trx_date.len]			= '\0';
bl_doc_type_code.arr[bl_doc_type_code.len]	= '\0';
bl_doc_date.arr[bl_doc_date.len] 			= '\0';
bl_bill_date.arr[bl_bill_date.len]			= '\0';
bl_slmt_doc_ref_date.arr[bl_slmt_doc_ref_date.len] = '\0';
bl_patient_id.arr[bl_patient_id.len] 		= '\0';
bl_slmt_doc_ref_desc.arr[bl_slmt_doc_ref_desc.len] = '\0';
bl_slmt_type_code.arr[bl_slmt_type_code.len]	= '\0';
bl_cash_slmt_flag.arr[bl_cash_slmt_flag.len]	= '\0';
bl_bill_doc_type_code.arr[bl_bill_doc_type_code.len]= '\0';
bl_ext_acct_code.arr[bl_ext_acct_code.len] 	= '\0';
bl_cash_counter_facility_id.arr[bl_cash_counter_facility_id.len] 	= '\0';
bl_cash_counter_code.arr[bl_cash_counter_code.len] = '\0';
bl_episode_type.arr[bl_episode_type.len]	= '\0';
l_recpt_refund_ind.arr[l_recpt_refund_ind.len] = '\0';

    return(LAST_ROW?0:1);
}

print_rec()
{
	bl_total_docamt =0;
 
    print_day_details();
	//print_column_total();
}  

print_day_details()
{
	char emsg[200];
	print_head();

   
  l_printed=0;	
  	
  while(fetch_hdr())
  {
		bl_slmt_desc.arr[0] 	= '\0';
		bl_slmt_desc.len =0;

		if((strcmp(l_previous_rec_ref_ind.arr,l_recpt_refund_ind.arr)!=0)&&(strlen(l_previous_rec_ref_ind.arr)!=0))
		{
			print_column_total();
		}
		
		if((strcmp(l_previous_rec_ref_ind.arr,l_recpt_refund_ind.arr)!=0)||(strlen(l_previous_rec_ref_ind.arr)==0))
		{
			print_title();
		}

		if (lctr > 65) 
		{
			fprintf(fp,"\f");
			print_head();  
			lctr = 13;
		}

		EXEC SQL select short_desc 
	  			   into :bl_slmt_desc
				  // from bl_slmt_type COMMENTED BY SAIKIRAN FOR 19587
				   from bl_slmt_type_lang_vw
				  where slmt_type_code = :bl_slmt_type_code
				  and language_id=:p_language_id
					and acc_entity_code in (select acc_entity_code 
												from sy_acc_entity 
												where acc_entity_id = :nd_facility); 
						bl_slmt_desc.arr[bl_slmt_desc.len]	= '\0';
		init_date_temp_var();
		strcpy(date_convert.arr,bl_trx_date.arr);
		fun_change_loc_date();
		fprintf(fp,"%-16s %-6s/%-8d %-15.15s",date_convert.arr, bl_doc_type_code.arr, bl_doc_number,bl_slmt_desc.arr);
		print_formated(bl_doc_amt);
		bl_total_docamt += bl_doc_amt;  
		 						 //disp_message(ERR_MESG,"1");
				 //disp_message(ERR_MESG,bl_bill_doc_type_code.arr);
			// disp_message(ERR_MESG,bl_bill_doc_number);
		 if(bl_bill_date.arr[0] !='\0')
		 {
         	init_date_temp_var();
			strcpy(date_convert.arr,bl_bill_date.arr);
			fun_change_loc_date();
		// }
		 if (bl_patient_id.arr[0])
	     {


		  if (bl_bill_doc_type_code.arr[0])

		    fprintf(fp," %-20.20s %-1s/%-8d/%-4d %6s/%-8d %10s",bl_patient_id.arr, bl_episode_type.arr, bl_episode_id, bl_visit_id,bl_bill_doc_type_code.arr, bl_bill_doc_number,date_convert.arr);

		  else

		    fprintf(fp," %-20.20s %-1s/%-8d/%-4d %6s %-8s %10s",bl_patient_id.arr, bl_episode_type.arr, bl_episode_id, bl_visit_id,bl_bill_doc_type_code.arr, bl_bill_doc_number,date_convert.arr);
		}
		else
		{
		  if (bl_bill_doc_type_code.arr[0])
		     fprintf(fp," %-20.20s %-1s %-8s %-4s %6s/%-8d %10s","","","","",bl_bill_doc_type_code.arr, bl_bill_doc_number,date_convert.arr);
			 
		  else
		     fprintf(fp," %-20.20s %-1s %-8s %-4s %6s %-8s %10s","","","","","","",date_convert.arr);
			  
		}
 
}
 /* added by saikiran for 19587 */
 else 
 {
   fprintf(fp," %-20.20s %-1s %-8s %-4s %6s %-8s %10s","","","","","","","");
   }
	
  /* modification ends */

		print_formated(bl_bill_amt);
		fprintf(fp,"%-10s \n",bl_ext_acct_code.arr);
		   
 		lctr++;

		strcpy(l_previous_rec_ref_ind.arr, l_recpt_refund_ind.arr);
		l_previous_rec_ref_ind.len = strlen(l_previous_rec_ref_ind.arr);
  }   
  print_column_total();
}


print_column_total()
{
  fprintf(fp,"%47s %s \n"," ","-----------------");
  fprintf(fp,"%34s %s        "," ",loc_legend[17]);
  print_formated(bl_total_docamt);
  bl_total_docamt=0;
    
 

  fprintf(fp,"\n%47s %s \n"," ","-----------------");
  lctr+=3;

	//fprintf(fp,"  Settlement wise breakup \n");
	fprintf(fp,"  %-50s \n",loc_legend[16]);

	fprintf(fp,"  ----------------------- \n");
	lctr+=2;
	
	declare_stlmt_cursor();
	while(fetch_sumup())  
	{   
   		fprintf(fp,"  %-15.15s", bl_slmt_desc1.arr);
		print_formated(bl_slmt_doc_amt);
		bl_slmt_tot_amt += bl_slmt_doc_amt;
		fprintf(fp,"\n");
		lctr++;
	}
	close_stmt_breakup();

    fprintf(fp,"\n  %-15s%s"," ","-----------------");
	fprintf(fp,"\n  %-15s",loc_legend[17]);
	print_formated(bl_slmt_tot_amt);
	bl_slmt_tot_amt=0;
	  
 
	fprintf(fp,"\n  %-15s%s\n"," ","-----------------");
	lctr+=3;
}

declare_stlmt_cursor()
{
    EXEC SQL DECLARE SLMT_BREAKUP CURSOR FOR 
		  SELECT sum(nvl(A.DOC_AMT,0)) DOCAMT,
				 a.SLMT_TYPE_CODE   SLMT_CODE,
				 c.short_desc       SLMT_DESC
		  //FROM  BL_RECEIPT_REFUND_DTL_VW A, BL_SLMT_TYPE C COMMENTED BY SAIKIRAN FOR 19587
		  FROM  BL_RECEIPT_REFUND_DTL_VW A, BL_SLMT_TYPE_LANG_VW C 
		  where  a.operating_facility_id = :nd_facility 
		  and   c.slmt_type_code(+) = a.slmt_type_code
		  and    a.cash_counter_code = nvl(:nd_cash_counter,a.cash_counter_code)
		  and    a.added_by_id = nvl(:nd_user_id,a.added_by_id)
		  AND    C.LANGUAGE_ID =:p_language_id //ADDED BY SAIKIRAN FOR 19587
		  AND    A.RECPT_REFUND_IND = :l_previous_rec_ref_ind
		  and    A.DOC_DATE between TO_DATE(:nd_login_datetime,'DD/MM/YYYYHH24:MI:SS') 
		  and 		TO_DATE(:nd_logout_datetime,'DD/MM/YYYYHH24:MI:SS')
		  GROUP BY a.SLMT_TYPE_CODE  , c.short_desc
		  UNION
	   	  SELECT sum(nvl((-1*C.DOC_AMT),0))  DOCAMT,
				 C.SLMT_TYPE_CODE  SLMT_CODE,
				 D.SHORT_DESC      SLMT_DESC 
 		  FROM BL_CANCELLED_BOUNCED_TRX A , bl_receipt_refund_dtl_vw c, 
		       //BL_SLMT_TYPE D COMMENTED BY SAIKIRAN FOR 19587
		       BL_SLMT_TYPE_LANG_VW D 
 		  where c.operating_facility_id = :nd_facility
		  and   D.slmt_type_code(+) = c.slmt_type_code
   	         AND  LANGUAGE_ID =:p_language_id //ADDED BY SAIKIRAN FOR 19587
		  and  a.cancelled_date between TO_DATE(:nd_login_datetime,'DD/MM/YYYYHH24:MI:SS') 
				and 	TO_DATE(:nd_logout_datetime,'DD/MM/YYYYHH24:MI:SS')
		  and     a.cash_counter_code = nvl(:nd_cash_counter,a.cash_counter_code)
		  and     a.added_by_id = nvl(:nd_user_id,a.added_by_id)
		  AND    A.RECPT_REFUND_IND = :l_previous_rec_ref_ind
		  AND C.DOC_TYPE_CODE = A.DOC_TYPE_CODE AND
    		  C.DOC_NUMBER   =  A.DOC_NUMBER
		  Group by C.SLMT_TYPE_CODE , d.short_desc 
		  order by 2 ;

		if (OERROR)
            err_mesg("DECLARE failed on cursor SLMT_BREAKUP",0,"");
	
	EXEC SQL OPEN SLMT_BREAKUP;
	
	if (OERROR)
		err_mesg("Open failed on cursor SLMT_BREAKUP",0,"");

}

fetch_sumup()
{  
	bl_slmt_desc1.arr[0]		= '\0';
	bl_slmt_type_code1.arr[0]		= '\0';
	bl_slmt_doc_amt			= 0;
	bl_slmt_desc1.len      	= 0;
	bl_slmt_type_code1.len  = 0;

      	EXEC SQL FETCH SLMT_BREAKUP
            INTO 	
			 	:bl_slmt_doc_amt,
				:bl_slmt_type_code1,
 				:bl_slmt_desc1;

		if (OERROR)
            err_mesg("FETCH failed on cursor SLMT_BREAKUP",0,"");

		bl_slmt_desc1.arr[bl_slmt_desc1.len]		= '\0';
		bl_slmt_type_code1.arr[bl_slmt_type_code1.len] = '\0';

    return(LAST_ROW?0:1);
}

close_stmt_breakup()
{
	EXEC SQL CLOSE SLMT_BREAKUP;

	if (OERROR)
		err_mesg("CLOSE failed on cursor SLMT_BREAKUP",0,"");
}

print_title()
{
	if(strcmp(l_recpt_refund_ind.arr,"R")==0)
	{
		if (lctr > 65) 
		{
			fprintf(fp,"\f");
			print_head();  
			lctr = 13;
		}


		fprintf(fp,"%-15s\n",loc_legend[18]);	
		fprintf(fp,"=======\n");
		lctr=lctr+2;
	}
	else if(strcmp(l_recpt_refund_ind.arr,"F")==0)
	{
		if (lctr > 65) 
		{
			fprintf(fp,"\f");
			print_head();  
			lctr = 13;
		}

		fprintf(fp,"%-15s\n",loc_legend[15]);	
		fprintf(fp,"======\n");	
		lctr=lctr+2;
	}
}
 
end_of_rep()
{
	//fprintf(fp,"\n\n %72s   ***  END OF REPORT ***\n\f"," "); COMMENTED BY SAIKIRAN FOR 19587
	fprintf(fp,"\n\n %72s   *** %-10s ***\n\f","",loc_legend[25]);
	fflush(fp);
}


open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00004.lis");
     if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00004.lis");
       proc_exit();
    }
}

print_head()
{
	int hosp_nm_len, rep_title_len = 10, s1, s2,s3,s4,date_len,user_len,pgm_len,char_len,opr_len;
	char v_rep_title[200],v_as_on_date[12];
	lctr=0;

// LINE-1
	
	fprintf(fp,"%s : %s",loc_legend[22],"BL");
	//fprintf(fp,"MDL : BL"); commented by saikiran for 19587
	hosp_nm_len  =  hosp_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-8);
	fprintf(fp,"%s", hosp_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);
	horz_skip(s2-27);
	init_date_temp_var();
	strcpy(date_convert.arr,date_time.arr);
	fun_change_loc_date();
	fprintf(fp,"%9s : %s", loc_legend[20],date_convert.arr);
   
	fprintf(fp,"\n");
// LINE-2
        fprintf(fp,"%s : %-10s \n",loc_legend[23],user_id.arr);
	//fprintf(fp,"OPR : %-10s \n", user_id.arr);commented by saikiran for 19587

// LINE-3

      fprintf(fp,"%s : %s",loc_legend[24],"BLR00004");
   // fprintf(fp,"REP : %s","BLR00004");commented by saikiran for 19587
    pgm_len=8;
	 strcpy(v_rep_title,loc_legend[1]);	
	rep_title_len = strlen(v_rep_title);
	s1 = (REP_WIDTH-rep_title_len)/2;
	horz_skip(s1-pgm_len-6);
	fprintf(fp,"%s",v_rep_title);

   s2 = (REP_WIDTH-s1-rep_title_len);
	horz_skip(s2-30);
	fprintf(fp,"%12s : %-d\n",loc_legend[21],++pctr);

    //fprintf(fp,"MDL : BL %53s %-30s %47s %-16s\n"," ",hosp_name.arr," ",date_time.arr);
	//fprintf(fp,"OPR : %-10s \n", user_id.arr);
    //fprintf(fp,"REP : %-8s  %43s %s  %46s  PAGE : %4d\n","BLR00004"," ",loc_legend[1]," ",++pctr);  
    //	fprintf(fp,"%40s Log in Date & Time : %s Log out Date & Time : %s    \n"," ",l_print_login_date.arr, l_print_logout_date.arr);
   
 // LINE-4

   char_len =strlen(loc_legend[2])+strlen(loc_legend[3])+38;
     s3 = (REP_WIDTH-char_len)/2;
     horz_skip(s3);
		init_date_temp_var();
		strcpy(date_convert.arr,l_print_login_date.arr);
		fun_change_loc_date();
		fprintf(fp,"%s : %s ",loc_legend[2],date_convert.arr);
		init_date_temp_var();
		strcpy(date_convert.arr,l_print_logout_date.arr);
		fun_change_loc_date();
	    fprintf(fp,"%s : %s    \n",loc_legend[3],date_convert.arr);
	 //fprintf(fp,"%s : %s %s : %s    \n",loc_legend[2],l_print_login_date.arr,loc_legend[3],l_print_logout_date.arr);

   // fprintf(fp,"%33s %25s : %s %25s : %s    \n"," ",loc_legend[2],l_print_login_date.arr,loc_legend[3],l_print_logout_date.arr);

// LINE-5
   opr_len = strlen(loc_legend[4])+strlen(nd_user_id.arr);
      s4 = (REP_WIDTH-opr_len)/2;  
	  horz_skip(s4-2);
	fprintf(fp,"%s : %s \n",loc_legend[4],nd_user_id.arr);       

	//fprintf(fp,"%50s         %15s : %s \n"," ",loc_legend[4],nd_user_id.arr);

	fprintf(fp,"--------------------------------------------------------------------------------------------------------------------------------------------------------------- \n");
	fprintf(fp,"%38s %49s\n",loc_legend[5],loc_legend[19]);
	fprintf(fp,"%-15.15s %-12.12s %-12.12s %21.21s   %-18.18s  %-15.15s  %-15.15s %-18.18s %-25.25s\n",loc_legend[6],loc_legend[7],loc_legend[8],loc_legend[9],loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[14]);
	fprintf(fp,"--------------------------------------------------------------------------------------------------------------------------------------------------------------- \n");

	fflush(fp);  
	lctr = 13;
}

fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
     { 
		fprintf(fp,"%s","-");
	 }
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
             INTO  :hosp_name, :date_time, :user_id
             FROM  SY_ACC_ENTITY_LANG_VW
	     WHERE ACC_ENTITY_ID = :nd_facility
			 AND   LANGUAGE_ID   = :p_language_id;
       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15sCR",str_amt);
		
        }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
		
        }

}                        

horz_skip(num) /* this is to obtain required blank space */
int num;
	{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
	}



fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';
     
		EXEC SQL SELECT LTRIM(RTRIM('BLR00004.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;
       
		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


/*--------- OVER -------------*/
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';



nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;


}


fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);
nd_temp_date.arr[nd_temp_date.len]='\0';
//nd_loc_date.arr[nd_loc_date.len]='\0'; 
//date_convert.arr[date_convert.len]='\0';
  


get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}

get_local_date()
{

	 
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	 
  //  get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI:SS'),:p_language_id,t_date);  
	   :nd_loc_date :=  	sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI:SS'),:p_language_id);  
      
//	:nd_loc_date := to_char(t_date,'DD/MM/YYYY');

	:nd_loc_date := to_char(to_date(:nd_loc_date,'DD/MM/YYYY'),'DD/MM/YYYY');
	

	END;

	END-EXEC;
     //nd_loc_date.arr[nd_loc_date.len]='\0';   

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

} 

proc_trace()
{
 EXEC SQL EXECUTE
	
 BEGIN
 
  TRACE_DURATION_BL(
  :d_curr_pgm_name,
  'Report' ,
  :p_start_time ,
  :nd_user_id );
  END;

	END-EXEC;
 
 		if (OERROR)
        err_mesg("TRACE_DURATION_BL failed",0,"");
}
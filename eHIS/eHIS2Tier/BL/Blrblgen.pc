/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRBLGEN.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* Converted To Windows  : Prasad B G S          4/7/96                 */
/* DATE WRITTEN          : 26-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */  
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>        
#include <bl.h>  

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])


/*
#define DEBUG 0
*/
   
EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [80],
			p_language_id								[4],
            nd_session_id                              [32],
            nd_pgm_date                                [50],
			nd_pwd									   [91],
            d_curr_pgm_name                            [30],
			nd_cc_facility_id						   [9],
			nd_pre_facility_id						   [9],
			nd_op_facility_id						   [9],
			nd_cash_counter_code					   [9],
			nd_pre_cash_counter_code				   [9],
			local_date_convert							[20],
            nd_epi_type                                [9],
            nd_fm_date                                 [30],
            nd_to_date                                 [30],
			nd_fm_cr_date							   [30],	
			nd_to_cr_date							   [30],
			nd_fm_cr_date_prn						   [30],	
			nd_to_cr_date_prn						   [30],
            nd_fm_date_prn                             [30],
            nd_to_date_prn                             [30],
			nd_fm_cr_dt_prn                            [30],
            nd_to_cr_dt_prn                            [30],
            nd_fm_doc_type_code                        [14],
            nd_to_doc_type_code                        [14],
            nd_fm_doc_num                              [18],
            nd_to_doc_num                              [18],
            nd_show_bill                               [5],
			nd_fr_cashcounter						   [9],
			nd_temp_date                               [16],
			date_convert                               [16],
			nd_loc_date                                [16],
			nd_to_cashcounter						   [9],
   			nd_fr_facility							   [9],
			nd_to_facility							   [9],    
			nd_operating_facility_id				   [9],
            d_short_name_full                          [150],
            bl_patient_name_loc_lang                   [150],
            bl_patient_name                            [150],
			bl_patient_name1                           [200],
            bl_locn_desc                               [200],
			nd_show_bill_desc						   [200],   
			bl_hdr_added_date						   [36],		
            bl_prt_grp_desc                            [260],
			l_pk_value								   [500],
			l_translated_value						   [500],
			nd_facility_id								[50];

   VARCHAR bl_hdr_episode_type                         [2],
           bl_hdr_doc_type_code                        [7],
           bl_hdr_doc_num                              [9],
           bl_hdr_doc_date                             [13],
           bl_hdr_bill_trx_type_code                   [2],
           bl_hdr_bill_nature_code                     [2],
           bl_hdr_bill_status                          [2],
           bl_hdr_overall_disc_amt                     [23],
           bl_hdr_bill_amt                             [23],
           bl_hdr_bill_prv_outst_amt                   [23],
           bl_hdr_bill_tot_amt                         [23],
           bl_hdr_bill_hosp_tot_amt                    [23],
           bl_hdr_bill_drfee_tot_amt                   [23],
           bl_hdr_prepay_adj_amt                       [23],
           bl_hdr_deposit_adj_amt                      [23],
           bl_hdr_serv_locn_code                       [5],
           bl_hdr_episode_id                           [9],
           bl_hdr_visit_id                             [5],
           bl_hdr_patient_id                           [21];

   VARCHAR bl_line_prt_grp_hdr_code                    [3],
           bl_line_prt_grp_line_code                   [3],
           bl_line_gross_amt                           [23],
           bl_line_serv_disc_amt                       [23],
           bl_line_man_disc_amt                        [23],
           bl_line_man_disc_perc                       [15],
           bl_line_net_amt                             [23];

double     bl_hdr_bill_tot_amt_db      ,
           bl_hdr_bill_hosp_tot_amt_db ,
           bl_hdr_bill_drfee_tot_amt_db,

		   bl_hdr_overall_disc_amt_db  ,
           bl_hdr_bill_amt_db          ,
           bl_hdr_bill_prv_outst_amt_db,
           bl_hdr_bill_tot_amt_db      ,
           bl_hdr_bill_hosp_tot_amt_db ,
           bl_hdr_bill_drfee_tot_amt_db,
           bl_hdr_prepay_adj_amt_db    ,
           bl_hdr_deposit_adj_amt_db   ,

           epi_tot_tot_amt_db      ,
           epi_tot_hosp_tot_amt_db ,
           epi_tot_drfee_tot_amt_db,

           grn_tot_tot_amt_db      ,
           grn_tot_hosp_tot_amt_db ,
           grn_tot_drfee_tot_amt_db,

           bl_line_gross_amt_db,
           bl_line_serv_disc_amt_db,
           bl_line_man_disc_amt_db,
           bl_line_net_amt_db,

           tot_line_gross_amt,
           tot_line_serv_disc_amt,
           tot_line_man_disc_amt,
           tot_line_net_amt,
   	   bl_hdr_bill_tot_adjust_amt             ,
	   bl_hdr_bill_tot_exempt_amt             ,
           bl_hdr_bill_write_off_amt               ; 


	int i;
	
	char g_facility_id[3];

    char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];
	
char string_var [100];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

char       store_episode_type                          [2];

int    lctr = 0,pctr = 0;

FILE *fp;

int hdr_ctr = 0, dtl_ctr = 0;

void proc_main(argc,argv)
char *argv[];
int argc;
{

    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();  
    }
 
    strcpy(g_pgm_id,"BLRBLGEN");
     strcpy(nd_pwd.arr,argv[1]);
	 nd_pwd.len = strlen(nd_pwd.arr);

	 EXEC sql connect :nd_pwd;
	  
	  if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }
	set_meduser_role(); 
    		strcpy(p_language_id.arr,l_language_id.arr);
		p_language_id.len = l_language_id.len;

 
/*    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

 */   
    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

	strcpy(nd_facility_id.arr,argv[4]);
    nd_facility_id.len = strlen(nd_facility_id.arr);
    strcpy(g_facility_id,nd_facility_id.arr);

 
    start_prog_msg();

    fetch_prog_param(); 

	fetch_legend_value();

    declare_cur();
    fetch_hosp_name();
    open_file();
    
    open_hdr();

    hdr_ctr = 0;
    epi_tot_tot_amt_db = epi_tot_hosp_tot_amt_db = epi_tot_drfee_tot_amt_db = 0;
    nd_pre_facility_id.arr[0] = '\0';
    nd_pre_cash_counter_code.arr[0] = '\0';
    while(fetch_hdr())
    {
          /*  if (lctr > 51)
               print_head(1);*/

       if (!nd_pre_facility_id.arr)
         {
          strcpy(nd_pre_facility_id.arr,nd_op_facility_id.arr);
          strcpy(nd_pre_cash_counter_code.arr,nd_cash_counter_code.arr);
         }
       if (strcmp(nd_pre_facility_id.arr,nd_op_facility_id.arr)!=0) 
          {
           /* print_head(1); */
            strcpy(nd_pre_facility_id.arr,nd_op_facility_id.arr);
            fprintf(fp,"Facility Id :  %2s\n" ,nd_op_facility_id.arr);          
            lctr++;
            nd_pre_cash_counter_code.arr[0] = '\0';	    
          }

       if (strcmp(nd_pre_cash_counter_code.arr,nd_cash_counter_code.arr)!=0)
          {
            strcpy(nd_pre_cash_counter_code.arr,nd_cash_counter_code.arr);
            fprintf(fp,"Cash Counter Code  :  %2s\n" ,nd_cash_counter_code.arr);          
            lctr++;
          }

       hdr_ctr++;
       if (hdr_ctr == 1)
       {
           strcpy(store_episode_type,bl_hdr_episode_type.arr);
           print_rec(0);
       }
       if (strcmp(store_episode_type,bl_hdr_episode_type.arr))
       {
          print_epi_tot();
          print_head(1);
          strcpy(store_episode_type,bl_hdr_episode_type.arr);
       }
       print_rec(1);
       dtl_ctr = 0;
       tot_line_gross_amt = 0;
       tot_line_serv_disc_amt = tot_line_man_disc_amt = tot_line_net_amt = 0;

       open_line();
       while (fetch_line())
       {
          dtl_ctr++;
          if (dtl_ctr == 1)
             print_line_head();
          print_rec(2);
       }
       if (dtl_ctr)
           print_line_tot();
     }
     if (hdr_ctr)
        print_grand_tot();

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

}

fetch_prog_param()
{
		   bl_hdr_overall_disc_amt_db  = 0;
           bl_hdr_bill_amt_db           =0;
           bl_hdr_bill_prv_outst_amt_db =0;
           bl_hdr_bill_tot_amt_db       =0;
           bl_hdr_bill_hosp_tot_amt_db  =0;
           bl_hdr_bill_drfee_tot_amt_db =0;
           bl_hdr_prepay_adj_amt_db     =0;
           bl_hdr_deposit_adj_amt_db    =0;


    nd_epi_type.arr[0]                  = '\0';
    nd_fm_date.arr[0]                   = '\0';
    nd_to_date.arr[0]                   = '\0';
    nd_fm_doc_type_code.arr[0]          = '\0';
    nd_to_doc_type_code.arr[0]          = '\0';
    nd_fm_doc_num.arr[0]                = '\0';
    nd_to_doc_num.arr[0]                = '\0';
    nd_show_bill.arr[0]                 = '\0';
    nd_fm_date_prn.arr[0]                   = '\0';
    nd_to_date_prn.arr[0]                   = '\0';


    nd_epi_type.len                     = 0;
    nd_fm_date.len                      = 0;
    nd_to_date.len                      = 0;
    nd_fm_doc_type_code.len             = 0;
    nd_to_doc_type_code.len             = 0;
    nd_fm_doc_num.len                   = 0;
    nd_to_doc_num.len                   = 0;
    nd_show_bill.len                    = 0;
    nd_fm_date_prn.len                  = 0;
    nd_to_date_prn.len                  = 0;


/*-- Y2K correction. Format introduced for 'FROM AND TO' Date 
     as DD/MM/YYYY in the form. So, no need to format it here 
	 while selecting. VSK 14/11/1999 */

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,PARAM3,PARAM4,
                   PARAM5,PARAM6,PARAM7,PARAM8,
				   PARAM9,PARAM10,  /* 9 & 10 Added on 11/3/1999 */
				   NVL(PARAM2,'LOWEST'),
				   NVL(PARAM3,'HIGHEST'),  
//                 NVL(TO_CHAR(TO_DATE(PARAM2,'DD-MON-YY'),'DD/MM/YYYY'),'LOWEST'),
//                 NVL(TO_CHAR(TO_DATE(PARAM3,'DD-MON-YY'),'DD/MM/YYYY'),'HIGHEST'),
				   PARAM11,
				   PARAM12,
				   PARAM13,
				   PARAM14,
				   PARAM15,
				   PARAM16
              INTO	:nd_operating_facility_id,
					:nd_epi_type, 
                   :nd_fm_date,          :nd_to_date,
                   :nd_fm_doc_type_code, :nd_to_doc_type_code,
                   :nd_fm_doc_num,       :nd_to_doc_num,
                   :nd_show_bill,
				   :nd_fm_cr_date,      /* Added on 11/3/1999 */
				   :nd_to_cr_date,      /* Added on 11/3/1999 */
                   :nd_fm_date_prn,      :nd_to_date_prn,
				   :nd_fm_cr_date_prn,
				   :nd_to_cr_date_prn,
				   :nd_fr_cashcounter,
				   :nd_to_cashcounter,
   				   :nd_fr_facility,
				   :nd_to_facility

              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;



   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_epi_type.arr[nd_epi_type.len]                   = '\0';
   nd_fm_date.arr[nd_fm_date.len]                     = '\0';
   nd_to_date.arr[nd_to_date.len]                     = '\0';
   nd_fm_cr_date.arr[nd_fm_cr_date.len]               = '\0';
   nd_to_cr_date.arr[nd_to_cr_date.len]               = '\0';
   nd_fm_doc_type_code.arr[nd_fm_doc_type_code.len]   = '\0';
   nd_to_doc_type_code.arr[nd_to_doc_type_code.len]   = '\0';
   nd_fm_doc_num.arr[nd_fm_doc_num.len]               = '\0';
   nd_to_doc_num.arr[nd_to_doc_num.len]               = '\0';
   nd_show_bill.arr[nd_show_bill.len]                 = '\0';
   nd_fm_date_prn.arr[nd_fm_date_prn.len]                     = '\0';
   nd_to_date_prn.arr[nd_to_date_prn.len]                     = '\0';

   strcpy(g_facility_id,nd_operating_facility_id.arr);

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

/*-- Y2K correction. Format introduced for 'FROM AND TO' Date 
     as DD/MM/YYYY VSK 14/11/1999 */

     EXEC SQL DECLARE BL_BILL_HDR_CUR CURSOR FOR
               SELECT EPISODE_TYPE,
                      DOC_TYPE_CODE,
                      DOC_NUM,
                      to_char(TRUNC(DOC_DATE),'DD-MON-RRRR'),
                      BILL_TRX_TYPE_CODE,
                      BILL_NATURE_CODE,
                      BILL_STATUS,
					  NVL(OVERALL_DISC_AMT,0),
                      TO_CHAR(NVL(OVERALL_DISC_AMT,0),'999,999,990.99'),
					  NVL(BILL_AMT,0),
                      TO_CHAR(NVL(BILL_AMT,0),'999,999,990.99'),
					  NVL(BILL_PRV_OUTST_AMT,0),
                      TO_CHAR(NVL(BILL_PRV_OUTST_AMT,0),'999,999,990.99'),
					  NVL(BILL_TOT_AMT,0),
                      TO_CHAR(NVL(BILL_TOT_AMT,0),'999,999,990.99'),
					  NVL(BILL_HOSP_TOT_AMT,0),
                      TO_CHAR(NVL(BILL_HOSP_TOT_AMT,0),'999,999,990.99'),
					  nvl(BILL_DRFEE_TOT_AMT,0),
                      TO_CHAR(NVL(BILL_DRFEE_TOT_AMT,0),'999,999,990.99'),
					  nvl(PREPAY_ADJ_AMT,0),
                      TO_CHAR(NVL(PREPAY_ADJ_AMT,0),'999,999,990.99'),
					  NVL(DEPOSIT_ADJ_AMT,0),
                      TO_CHAR(NVL(DEPOSIT_ADJ_AMT,0),'999,999,990.99'),
                      SERV_LOCN_CODE,
                      EPISODE_ID,
                      VISIT_ID,
                      PATIENT_ID,
                      NVL(BILL_TOT_AMT,0),
                      NVL(BILL_HOSP_TOT_AMT,0),
                      NVL(BILL_DRFEE_TOT_AMT,0),
					  TO_CHAR(NVL(ADDED_DATE,SYSDATE),'DD/MM/YYYY HH24:MI'),
  					  CASH_COUNTER_CODE,
					  CASH_COUNTER_FACILITY_ID,
					  OPERATING_FACILITY_ID,
                      NVL(BILL_TOT_ADJUST_AMT,0),   // EPNH 28/10/2004  
                      NVL(BILL_TOT_EXEMPT_AMT,0),    
                      NVL(BILL_TOT_WRITE_OFF_AMT,0)                        
                 FROM BL_BILL_HDR  
                WHERE EPISODE_TYPE = decode(:nd_epi_type, 'A', EPISODE_TYPE, :nd_epi_type)		//CHANGED ON 9/5/2005
				AND   TRUNC(NVL(DOC_DATE,SYSDATE))  BETWEEN
                        NVL(TO_DATE(:nd_fm_date,'DD/MM/YYYY'),to_date('00010101','YYYYDDMM'))    
						AND 
                        NVL(TO_DATE(:nd_to_date,'DD/MM/YYYY'),to_date('47123112','YYYYDDMM'))
				AND	TO_DATE(TO_CHAR(NVL(ADDED_DATE,SYSDATE),'DD/MM/YYYY HH24:MI'),'DD/MM/YYYY HH24:MI')  BETWEEN
                        TO_DATE(:nd_fm_cr_date,'DD/MM/YYYY HH24:MI')  AND 
                        TO_DATE(:nd_to_cr_date,'DD/MM/YYYY HH24:MI')
	            AND RPAD(DOC_TYPE_CODE,6,' ')|| LPAD(DOC_NUM,8,'0') BETWEEN
                         RPAD(NVL(:nd_fm_doc_type_code,' '),6,' ')||LPAD(NVL(:nd_fm_doc_num,0),8,'0')
                     AND
                         RPAD(NVL(:nd_to_doc_type_code,'~~~~~~'),6,' ')||LPAD(NVL(:nd_to_doc_num,99999999),8,'0')
                 AND ((:nd_show_bill = 'V' AND (BILL_STATUS IS NULL OR
                       BILL_STATUS = 'D')) OR
                     (:nd_show_bill = 'C' AND BILL_STATUS = 'C') OR
                     (:nd_show_bill = 'N' AND 
                         BILL_STATUS IS NULL AND
                          (OVERALL_DISC_AMT != 0 OR
                           MAN_DISC_AMT != 0 )
                        )                        OR
                      (:nd_show_bill = 'A' AND (BILL_STATUS IS NULL OR
                       BILL_STATUS = 'C' OR BILL_STATUS = 'D'))
                     )
                 AND  CASH_COUNTER_CODE BETWEEN NVL(ltrim(rtrim(substr(:nd_fr_cashcounter,1,2))),'  ')
				                        AND NVL(ltrim(rtrim(substr(:nd_to_cashcounter,1,2))),'~~')
				 AND OPERATING_FACILITY_ID  BETWEEN NVL(ltrim(rtrim(substr(:nd_fr_facility,1,2))),'  ')
				                        AND  NVL(ltrim(rtrim(substr(:nd_to_facility,1,2))),'~~')
				 ORDER BY OPERATING_FACILITY_ID,CASH_COUNTER_CODE,EPISODE_TYPE,DOC_TYPE_CODE,DOC_NUM;

     EXEC SQL DECLARE BL_BILL_LINE_CUR CURSOR FOR
               SELECT PRT_GRP_HDR_CODE,
                      PRT_GRP_LINE_CODE,
                      TO_CHAR(NVL(GROSS_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(SERV_DISC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(MAN_DISC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(MAN_DISC_PERC,0),'990.99'),   
                      TO_CHAR(NVL(NET_AMT,0),'999,999,990.99'),
                      NVL(GROSS_AMT,0),
                      NVL(SERV_DISC_AMT,0),
                      NVL(MAN_DISC_AMT,0),
                      NVL(NET_AMT,0)
                 FROM BL_BILL_LINE
                WHERE DOC_TYPE_CODE = :bl_hdr_doc_type_code
                  AND DOC_NUM       = :bl_hdr_doc_num
				  AND OPERATING_FACILITY_ID  BETWEEN NVL(ltrim(rtrim(substr(:nd_fr_facility,1,2))),'  ')
				                      AND  NVL(ltrim(rtrim(substr(:nd_to_facility,1,2))),'~~')
                ORDER BY PRT_GRP_HDR_CODE, PRT_GRP_LINE_CODE;

    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              SELECT SUBSTR(SHORT_NAME_LOC_LANG,1,16),
                     /*substr(SHORT_NAME,1,30),
					 decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname1 ,
                      */
					  short_name 
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_hdr_patient_id;  

    EXEC SQL DECLARE BL_SERV_LOCN_CUR CURSOR FOR
              SELECT SHORT_DESC
                FROM BL_SERVICE_LOCN
               WHERE SERV_LOCN_CODE = :bl_hdr_serv_locn_code;

    EXEC SQL DECLARE BL_BLNG_PRT_GRP_LINE CURSOR FOR
              SELECT LONG_DESC
                FROM BL_BLNG_PRT_GRP_LINE
               WHERE PRT_GRP_HDR_CODE  = :bl_line_prt_grp_hdr_code
                 AND PRT_GRP_LINE_CODE = :bl_line_prt_grp_line_code;
}

open_hdr()
{
    EXEC SQL OPEN BL_BILL_HDR_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_BILL_HDR_CUR",0,"");
}

open_line()
{
    EXEC SQL OPEN BL_BILL_LINE_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_BILL_LINE_CUR",0,"");
}

fetch_hdr()
{
bl_hdr_episode_type.arr[0]                                        = '\0';
bl_hdr_doc_type_code.arr[0]                                       = '\0';
bl_hdr_doc_num.arr[0]                                             = '\0';
bl_hdr_doc_date.arr[0]                                            = '\0';
bl_hdr_bill_trx_type_code.arr[0]                                  = '\0';
bl_hdr_bill_nature_code.arr[0]                                    = '\0';
bl_hdr_bill_status.arr[0]                                         = '\0';
bl_hdr_overall_disc_amt.arr[0]                                    = '\0';
bl_hdr_bill_amt.arr[0]                                            = '\0';
bl_hdr_bill_prv_outst_amt.arr[0]                                  = '\0';
bl_hdr_bill_tot_amt.arr[0]                                        = '\0';
bl_hdr_bill_hosp_tot_amt.arr[0]                                   = '\0';
bl_hdr_bill_drfee_tot_amt.arr[0]                                  = '\0';
bl_hdr_prepay_adj_amt.arr[0]                                      = '\0';
bl_hdr_deposit_adj_amt.arr[0]                                     = '\0';
bl_hdr_serv_locn_code.arr[0]                                      = '\0';
bl_hdr_episode_id.arr[0]                                          = '\0';
bl_hdr_visit_id.arr[0]                                            = '\0';
bl_hdr_patient_id.arr[0]                                          = '\0';


bl_hdr_episode_type.len                                           = 0;
bl_hdr_doc_type_code.len                                          = 0;
bl_hdr_doc_num.len                                                = 0;
bl_hdr_doc_date.len                                               = 0;
bl_hdr_bill_trx_type_code.len                                     = 0;
bl_hdr_bill_nature_code.len                                       = 0;
bl_hdr_bill_status.len                                            = 0;
bl_hdr_overall_disc_amt.len                                       = 0;
bl_hdr_bill_amt.len                                               = 0;
bl_hdr_bill_prv_outst_amt.len                                     = 0;
bl_hdr_bill_tot_amt.len                                           = 0;
bl_hdr_bill_hosp_tot_amt.len                                      = 0;
bl_hdr_bill_drfee_tot_amt.len                                     = 0;
bl_hdr_prepay_adj_amt.len                                         = 0;
bl_hdr_deposit_adj_amt.len                                        = 0;
bl_hdr_serv_locn_code.len                                         = 0;
bl_hdr_episode_id.len                                             = 0;
bl_hdr_visit_id.len                                               = 0;
bl_hdr_patient_id.len                                             = 0;

bl_hdr_bill_tot_amt_db                                            = 0;
bl_hdr_bill_hosp_tot_amt_db                                       = 0;
bl_hdr_bill_drfee_tot_amt_db                                      = 0;
bl_hdr_bill_tot_adjust_amt                                        = 0; // EPNH 28/10/2004
bl_hdr_bill_tot_exempt_amt                                        = 0;
bl_hdr_bill_write_off_amt                                         = 0;



     EXEC SQL FETCH BL_BILL_HDR_CUR
               INTO :bl_hdr_episode_type,
                    :bl_hdr_doc_type_code,
                    :bl_hdr_doc_num,
                    :bl_hdr_doc_date,
                    :bl_hdr_bill_trx_type_code,
                    :bl_hdr_bill_nature_code,
                    :bl_hdr_bill_status,
					:bl_hdr_overall_disc_amt_db,
                    :bl_hdr_overall_disc_amt,
					:bl_hdr_bill_amt_db,
                    :bl_hdr_bill_amt,
					:bl_hdr_bill_prv_outst_amt_db,
                    :bl_hdr_bill_prv_outst_amt,
					:bl_hdr_bill_tot_amt_db,
                    :bl_hdr_bill_tot_amt,
					:bl_hdr_bill_hosp_tot_amt_db,
                    :bl_hdr_bill_hosp_tot_amt,
					:bl_hdr_bill_drfee_tot_amt_db,
                    :bl_hdr_bill_drfee_tot_amt,
					:bl_hdr_prepay_adj_amt_db,
                    :bl_hdr_prepay_adj_amt,
					:bl_hdr_deposit_adj_amt_db,
                    :bl_hdr_deposit_adj_amt,
                    :bl_hdr_serv_locn_code,
                    :bl_hdr_episode_id,
                    :bl_hdr_visit_id,
                    :bl_hdr_patient_id,
                    :bl_hdr_bill_tot_amt_db,
                    :bl_hdr_bill_hosp_tot_amt_db,
                    :bl_hdr_bill_drfee_tot_amt_db,
					:bl_hdr_added_date,
		    :nd_cash_counter_code,
		    :nd_cc_facility_id,
		    :nd_op_facility_id,
		    :bl_hdr_bill_tot_adjust_amt, // EPNH 28/10/2004
                    :bl_hdr_bill_tot_exempt_amt,
                    :bl_hdr_bill_write_off_amt;
       
       if (OERROR)
            err_mesg("FETCH failed on cursor BL_BILL_HDR_CUR",0,"");

nd_cash_counter_code.arr[nd_cash_counter_code.len]                       = '\0';
nd_cc_facility_id.arr[nd_cc_facility_id.len]							 = '\0';
nd_op_facility_id.arr[nd_op_facility_id.len]							 = '\0';

bl_hdr_episode_type.arr[bl_hdr_episode_type.len]                         = '\0';
bl_hdr_doc_type_code.arr[bl_hdr_doc_type_code.len]                       = '\0';
bl_hdr_doc_num.arr[bl_hdr_doc_num.len]                                   = '\0';
bl_hdr_doc_date.arr[bl_hdr_doc_date.len]                                 = '\0';
bl_hdr_bill_trx_type_code.arr[bl_hdr_bill_trx_type_code.len]             = '\0';
bl_hdr_bill_nature_code.arr[bl_hdr_bill_nature_code.len]                 = '\0';
bl_hdr_bill_status.arr[bl_hdr_bill_status.len]                           = '\0';
bl_hdr_overall_disc_amt.arr[bl_hdr_overall_disc_amt.len]                 = '\0';
bl_hdr_bill_amt.arr[bl_hdr_bill_amt.len]                                 = '\0';
bl_hdr_bill_prv_outst_amt.arr[bl_hdr_bill_prv_outst_amt.len]             = '\0';
bl_hdr_bill_tot_amt.arr[bl_hdr_bill_tot_amt.len]                         = '\0';
bl_hdr_bill_hosp_tot_amt.arr[bl_hdr_bill_hosp_tot_amt.len]               = '\0';
bl_hdr_bill_drfee_tot_amt.arr[bl_hdr_bill_drfee_tot_amt.len]             = '\0';
bl_hdr_prepay_adj_amt.arr[bl_hdr_prepay_adj_amt.len]                     = '\0';
bl_hdr_deposit_adj_amt.arr[bl_hdr_deposit_adj_amt.len]                   = '\0';
bl_hdr_serv_locn_code.arr[bl_hdr_serv_locn_code.len]                     = '\0';
bl_hdr_episode_id.arr[bl_hdr_episode_id.len]                             = '\0';
bl_hdr_visit_id.arr[bl_hdr_visit_id.len]                                 = '\0';
bl_hdr_patient_id.arr[bl_hdr_patient_id.len]                             = '\0';

    return(LAST_ROW?0:1);
}

fetch_line()
{
bl_line_prt_grp_hdr_code.arr[0]                                   = '\0';
bl_line_prt_grp_line_code.arr[0]                                  = '\0';
bl_line_gross_amt.arr[0]                                          = '\0';
bl_line_serv_disc_amt.arr[0]                                      = '\0';
bl_line_man_disc_amt.arr[0]                                       = '\0';
bl_line_man_disc_perc.arr[0]                                      = '\0';
bl_line_net_amt.arr[0]                                            = '\0';

bl_line_prt_grp_hdr_code.len                                      = 0;
bl_line_prt_grp_line_code.len                                     = 0;
bl_line_gross_amt.len                                             = 0;
bl_line_serv_disc_amt.len                                         = 0;
bl_line_man_disc_amt.len                                          = 0;
bl_line_man_disc_perc.len                                         = 0;
bl_line_net_amt.len                                               = 0;

bl_line_gross_amt_db                                              = 0;
bl_line_serv_disc_amt_db                                          = 0;
bl_line_man_disc_amt_db                                           = 0;
bl_line_net_amt_db                                                = 0;

     EXEC SQL FETCH BL_BILL_LINE_CUR
               INTO :bl_line_prt_grp_hdr_code,
                    :bl_line_prt_grp_line_code,
                    :bl_line_gross_amt,
                    :bl_line_serv_disc_amt,
                    :bl_line_man_disc_amt,
                    :bl_line_man_disc_perc,
                    :bl_line_net_amt,
                    :bl_line_gross_amt_db,
                    :bl_line_serv_disc_amt_db,
                    :bl_line_man_disc_amt_db,
                    :bl_line_net_amt_db;

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BILL_LINE_CUR",0,"");

bl_line_prt_grp_hdr_code.arr[bl_line_prt_grp_hdr_code.len]               = '\0';
bl_line_prt_grp_line_code.arr[bl_line_prt_grp_line_code.len]             = '\0';
bl_line_gross_amt.arr[bl_line_gross_amt.len]                             = '\0';
bl_line_serv_disc_amt.arr[bl_line_serv_disc_amt.len]                     = '\0';
bl_line_man_disc_amt.arr[bl_line_man_disc_amt.len]                       = '\0';
bl_line_man_disc_perc.arr[bl_line_man_disc_perc.len]                     = '\0';
bl_line_net_amt.arr[bl_line_net_amt.len]                                 = '\0';

    return(LAST_ROW?0:1);
}

fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_name1.arr[0]                    = '\0';


   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_name1.len                       = 0;


    EXEC SQL FETCH BL_PAT_NAME_CUR
              INTO :bl_patient_name_loc_lang,
                  /* :bl_patient_name,
				   :bl_patient_name1,*/
                   :d_short_name_full;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_name1.arr[bl_patient_name1.len] = '\0';
    d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name1    := :bl_patient_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_name1.arr[bl_patient_name1.len]  = '\0';



    EXEC SQL OPEN BL_SERV_LOCN_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_SERV_LOCN_CUR",0,"");

    bl_locn_desc.arr[0] = '\0';
    bl_locn_desc.len    = 0;

    EXEC SQL FETCH BL_SERV_LOCN_CUR
              INTO :bl_locn_desc;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_SERV_LOCN_CUR",0,"");
    bl_locn_desc.arr[bl_locn_desc.len] = '\0';
}

fetch_dtls1()
{
    EXEC SQL OPEN BL_BLNG_PRT_GRP_LINE;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_PRT_GRP_LINE",0,"");

    bl_prt_grp_desc.arr[0]                                          = '\0';
    bl_prt_grp_desc.len                                             = 0;

    EXEC SQL FETCH BL_BLNG_PRT_GRP_LINE
              INTO :bl_prt_grp_desc;

   if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_PRT_GRP_LINE",0,"");

   bl_prt_grp_desc.arr[bl_prt_grp_desc.len] = '\0';
}

print_rec(ind)
int ind;
{
  if (ind == 0)
  {
      if (lctr > 53)
          print_head(1);

      fprintf(fp,"%12s  :  %1s ",loc_legend[90],bl_hdr_episode_type.arr);
      switch (bl_hdr_episode_type.arr[0])
      {
         case 'I' : fprintf(fp,"%3s",loc_legend[570]);
                    break;

         case 'O' : fprintf(fp,"%3s",loc_legend[580]);
                    break;

         case 'R' : fprintf(fp,"%3s",loc_legend[590]);
                    break;

         case 'E' : fprintf(fp,"%3s",loc_legend[600]); // EPNH 28/10/2004
                    break;

         case 'D' : fprintf(fp,"%3s",loc_legend[610]);
                    break;
         

         default  : fprintf(fp,"   ");
                    break;
      }
      fprintf(fp,"\n");
      lctr++;
  }
  else if (ind == 1)
  {
      if (lctr > 51)
          print_head(1);
      fetch_dtls();
     /* fprintf(fp,"%2s %-6s/%8s %10s   ",
	  // %s %s %s %s %s %s\n",
                    nd_op_facility_id.arr,
                    bl_hdr_doc_type_code.arr,
                    bl_hdr_doc_num.arr,
                    bl_hdr_doc_date.arr);*/
						init_date_temp_var();                              
              
					  strcpy(date_convert.arr,bl_hdr_doc_date.arr);            
 					  fun_change_loc_date(); 

      fprintf(fp,"%2s %-6s/%-8s %10.10s   ",
	  // %s %s %s %s %s %s\n",
                    nd_op_facility_id.arr,
                    bl_hdr_doc_type_code.arr,
                    bl_hdr_doc_num.arr,
                    date_convert.arr);

					print_formated(bl_hdr_overall_disc_amt_db);
					fprintf(fp,"  ");
					print_formated(bl_hdr_bill_amt_db);
					fprintf(fp,"  ");
					print_formated(bl_hdr_bill_prv_outst_amt_db);
					fprintf(fp,"  ");
					print_formated(bl_hdr_bill_tot_amt_db);
					fprintf(fp,"  ");
					print_formated(bl_hdr_bill_hosp_tot_amt_db);
					fprintf(fp,"  ");
					print_formated(bl_hdr_bill_drfee_tot_amt_db);
	  fprintf(fp,"\n");

/*                    bl_hdr_overall_disc_amt.arr,
                    bl_hdr_bill_amt.arr,
                    bl_hdr_bill_prv_outst_amt.arr,
                    bl_hdr_bill_tot_amt.arr,
                    bl_hdr_bill_hosp_tot_amt.arr,
                    bl_hdr_bill_drfee_tot_amt.arr);*/

/*-- Patient details is printing as 
     < patient id -- patient local name -- short name(english) >
	 Patient local name is mostly blank.
	 Short name will have value.
	 Most of the time it gives a look that a lot of gap there between the 
	 patient id and short name because the local name has no value. 
	 To avoid this I have shifted the short name after the patient id 
	 and the local language name printing is after the short name.
	 VSK 02/05/1999 */
     

      fprintf(fp,"       %1s   %1s   %1s ",
	  //  %s %s %-4s %-15s %-8s %-4s %-10s %-30s %-16s\n",
                    bl_hdr_bill_trx_type_code.arr,
                    bl_hdr_bill_nature_code.arr,
                    bl_hdr_bill_status.arr);
		print_formated(bl_hdr_prepay_adj_amt_db);
        print_formated(bl_hdr_deposit_adj_amt_db);
	  fprintf(fp," %-4s %-15s %-8s %-4s %-20s %-30.30s %-16.16s\n",
                    bl_hdr_serv_locn_code.arr,
                    bl_locn_desc.arr,
                    bl_hdr_episode_id.arr,
                    bl_hdr_visit_id.arr,
                    bl_hdr_patient_id.arr,
                    bl_patient_name.arr,
					bl_patient_name_loc_lang.arr);
   
if(strlen(bl_patient_name1.arr) > 2)
{
 fprintf(fp,"%103s %s \n"," ",bl_patient_name1.arr);
 lctr++;
}
     epi_tot_tot_amt_db       += bl_hdr_bill_tot_amt_db;
     epi_tot_hosp_tot_amt_db  += bl_hdr_bill_hosp_tot_amt_db;
     epi_tot_drfee_tot_amt_db += bl_hdr_bill_drfee_tot_amt_db;

// EPNH 28/10/2004
print_formated(bl_hdr_bill_tot_adjust_amt);
fprintf(fp,"  ");
print_formated(bl_hdr_bill_tot_exempt_amt);
print_formated(bl_hdr_bill_write_off_amt);
fprintf(fp,"  ");

// fprintf(fp,"   %s\n",bl_hdr_added_date.arr);
						init_date_temp_var();                              

					  strcpy(date_convert.arr,bl_hdr_added_date.arr);            
 					  fun_change_loc_date_time(); 

 fprintf(fp,"   %s\n",date_convert.arr);


     lctr+=2;    
   }
   else if (ind == 2)
   {
     if (lctr > 53)
     {
          print_head(1);
          print_line_head();
     }

     fetch_dtls1();

     fprintf(fp,"%-12s%-2s-%-2s %-40s  ",
	 // %s %s %s %s %s\n",
                     " ",
                     bl_line_prt_grp_hdr_code.arr,
                     bl_line_prt_grp_line_code.arr,
                     bl_prt_grp_desc.arr);
	  print_formated(bl_line_gross_amt_db);
	  fprintf(fp," ");
	  print_formated(bl_line_serv_disc_amt_db);
  	  fprintf(fp," ");
	  print_formated(bl_line_man_disc_amt_db);
	  fprintf(fp," ");
	  fprintf(fp," %s", bl_line_man_disc_perc.arr);
	  print_formated(bl_line_net_amt_db);
	  fprintf(fp,"\n");
/*
                     bl_line_gross_amt.arr,
                     bl_line_serv_disc_amt.arr,
                     bl_line_man_disc_amt.arr,
                     bl_line_man_disc_perc.arr,
                     bl_line_net_amt.arr);*/
     lctr++;

     tot_line_gross_amt       += bl_line_gross_amt_db;
     tot_line_serv_disc_amt   += bl_line_serv_disc_amt_db;
     tot_line_man_disc_amt    += bl_line_man_disc_amt_db;
     tot_line_net_amt         += bl_line_net_amt_db;

   }
  
  

   fflush(fp);
}

print_epi_tot()
{
    if (lctr > 52)
       print_head(1);

    fprintf(fp,"%69s              --------------   ---------------    ---------------\n"," ");
    fprintf(fp,"%33s%13s                                     "," ",loc_legend[560]);
    print_formated(epi_tot_tot_amt_db); fprintf(fp,"  ");
    print_formated(epi_tot_hosp_tot_amt_db); fprintf(fp,"  ");
    print_formated(epi_tot_drfee_tot_amt_db);
    fprintf(fp,"\n");
    fprintf(fp,"%69s              --------------   ---------------    --------------\n"," ");
    lctr +=3;

     grn_tot_tot_amt_db       += epi_tot_tot_amt_db;
     grn_tot_hosp_tot_amt_db  += epi_tot_hosp_tot_amt_db;
     grn_tot_drfee_tot_amt_db += epi_tot_drfee_tot_amt_db;

     epi_tot_tot_amt_db        = 0;
     epi_tot_hosp_tot_amt_db   = 0;
     epi_tot_drfee_tot_amt_db  = 0;
}
        
print_grand_tot()
{
    print_epi_tot();

    if (lctr > 52)
       print_head(0);

    fprintf(fp,"%69s              --------------   ---------------    ---------------\n"," ");
    fprintf(fp,"%33s%11s                                       "," ",loc_legend[550]);
    print_formated(grn_tot_tot_amt_db); fprintf(fp,"  ");
    print_formated(grn_tot_hosp_tot_amt_db); fprintf(fp,"  ");
    print_formated(grn_tot_drfee_tot_amt_db);
    fprintf(fp,"\n");
    fprintf(fp,"%69s              --------------   ---------------    ---------------\n"," ");
    lctr +=3;
}
         
print_line_tot()
{
    if (lctr > 52)
       print_head(1);

    fprintf(fp,"%57s  ---------------  --------------  --------------          --------------\n"," ");
    fprintf(fp,"%33s        %5s              "," ",loc_legend[540]);
    print_formated(tot_line_gross_amt); fprintf(fp," ");
    print_formated(tot_line_serv_disc_amt); fprintf(fp," ");
    print_formated(tot_line_man_disc_amt); fprintf(fp,"         ");
    print_formated(tot_line_net_amt);
    fprintf(fp,"\n");   
/* -- one more new line added to give a space line after the total.
	  line counter also incremented by more 1 to move parellel with
	  the physical line increment.  VSK 02/05/1999 */
    fprintf(fp,"%57s  ---------------  --------------  --------------          --------------\n\n"," ");
    lctr +=4;

}
end_of_rep()
{
fprintf(fp,"\n\n                                                      %22s\n",loc_legend[620]);
fflush(fp);
}

open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"blrblgen.lis");   
    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrblgen.lis");
       proc_exit();
    }
    print_title();
    print_head(0);
}

print_title()
{


 
  /*----------End Of Addition --------------------------------*/
/*fprintf(fp,
"\fMDL : %2s                                         %-s                                        %-16s\n",loc_legend[150],
hosp_name.arr,date_time.arr);*/

					 init_date_temp_var();                              

					  strcpy(date_convert.arr,date_time.arr);            
 					  fun_change_loc_date_time(); 

fprintf(fp,
"\fMDL : %2s                                         %-s                                        %-16s\n",loc_legend[150],
hosp_name.arr,date_convert.arr);



fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                                %4s : %4d\n",
loc_legend[40],loc_legend[50],loc_legend[30],++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        %16s :\n        ----------------\n\n",loc_legend[80]);
fprintf(fp,"                  %12s           : %s\n\n",loc_legend[90],nd_epi_type.arr);


//fprintf(fp,"                  %9s       %4s   : %s\n",loc_legend[100],loc_legend[60],nd_fm_date_prn.arr);
//fprintf(fp,"                                  %2s     : %s\n\n",loc_legend[70],nd_to_date_prn.arr);

					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_fm_date_prn.arr);            
 					  fun_change_loc_date_fm_prn(); 
 fprintf(fp,"                  %9s       %4s   : %-10.10s\n",loc_legend[100],loc_legend[60],date_convert.arr);
 					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_to_date_prn.arr);            
 					  fun_change_loc_date_fm_prn(); 
 
 fprintf(fp,"                                  %2s     : %-10.10s\n\n",loc_legend[70],date_convert.arr);

/*----- Corrected By Venkat on 16/5/1999 to Print the 
  -- LOWEST & HIGHEST if the Accepted Bill dates are NULL-----*/

if(nd_fm_cr_date_prn.arr[0] == '\0')
  fprintf(fp,"                  %17s %4s : %6s\n",loc_legend[110],loc_legend[60],loc_legend[120]);
else
  {
  //fprintf(fp,"                  %17s %4s : %s\n",loc_legend[110],loc_legend[60],nd_fm_cr_date_prn.arr);
					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_fm_cr_date_prn.arr);            
 					  fun_change_loc_date_time(); 

  fprintf(fp,"                  %17s %4s : %s\n",loc_legend[110],loc_legend[60],date_convert.arr);

  }
if(nd_to_cr_date_prn.arr[0] == '\0')
  fprintf(fp,"                                  %2s     : %7s\n\n",loc_legend[70],loc_legend[120]);
else
{
 // fprintf(fp,"                                  %2s     : %s\n\n",loc_legend[70],nd_to_cr_date_prn.arr);
  					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_to_cr_date_prn.arr);            
 					  fun_change_loc_date_time(); 

  fprintf(fp,"                                  %2s     : %s\n\n",loc_legend[70],date_convert.arr);
}
fprintf(fp,"                  %13s   %4s   : %s\n",loc_legend[140],loc_legend[60],nd_fm_doc_type_code.arr);
fprintf(fp,"                                  %2s     : %s\n\n",loc_legend[70],nd_to_doc_type_code.arr);
fprintf(fp,"                  %11s     %4s   : %s\n",loc_legend[160],loc_legend[60],nd_fm_doc_num.arr);
fprintf(fp,"                                  %2s     : %s\n\n",loc_legend[70],nd_to_doc_num.arr);
fprintf(fp,"                  %12s    %4s   : %s\n",loc_legend[170],loc_legend[60],nd_fr_cashcounter.arr);
fprintf(fp,"                                  %2s     : %s\n\n",loc_legend[70],nd_to_cashcounter.arr);
fprintf(fp,"                  %11s     %4s   : %s\n",loc_legend[180],loc_legend[60],nd_fr_facility.arr);
fprintf(fp,"                                  %2s     : %s\n\n",loc_legend[70],nd_to_facility.arr);


/*------ Added on 13/3/1999 to display the Input -----------*/
if(strcmp(nd_show_bill.arr,"V")==0)
	strcpy(nd_show_bill_desc.arr,loc_legend[190]);
if(strcmp(nd_show_bill.arr,"C")==0)
	strcpy(nd_show_bill_desc.arr,loc_legend[200]);
if(strcmp(nd_show_bill.arr,"N")==0)
	strcpy(nd_show_bill_desc.arr,loc_legend[210]);
if(strcmp(nd_show_bill.arr,"A")==0)
	strcpy(nd_show_bill_desc.arr,loc_legend[220]);
/*----------------------------------------------------------*/

fprintf(fp,"                  %s ?       : %s\n\n",loc_legend[230],nd_show_bill_desc.arr);

}

print_head(l_flg)
int l_flg;
{
 
/*fprintf(fp,
"\fMDL : %2s                                         %-s                                        %-16s\n",loc_legend[150],
hosp_name.arr,date_time.arr);*/


					 init_date_temp_var();                              

					  strcpy(date_convert.arr,date_time.arr);            
 					  fun_change_loc_date_time(); 

fprintf(fp,
"\fMDL : %2s                                         %-s                                        %-16s\n",loc_legend[150],
hosp_name.arr,date_convert.arr);


fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                                %4s : %4d\n",
loc_legend[40],loc_legend[50],loc_legend[30],++pctr);

/* -- The following line is commented and given in different way as
      per the requirement of the user after printing the type of the 
	  bill.  VSK 02/05/1999
fprintf(fp,"                                                   (%-10s TO %-10s)\n",
             nd_fm_date_prn.arr,nd_to_date_prn.arr); */


/*** Added by Aldrin on 05/11/1996 for AMH   ***/             
if(nd_show_bill.arr[0] == 'A')
   fprintf(fp,"     %s",loc_legend[240]);
else if (nd_show_bill.arr[0] == 'C')   
   fprintf(fp,"     %s",loc_legend[250]); 
else if (nd_show_bill.arr[0] == 'V')   
   fprintf(fp,"     %s",loc_legend[260]); 
else if (nd_show_bill.arr[0] == 'N')   
   fprintf(fp,"     %s",loc_legend[270]); 

/* -- Instead of printing the above date range the date range is printed 
      as follows as per the AH user requiremnt. Bill date and created 
	  date range is printed after the type of the bill. VSK 02/05/1999 */


/*fprintf(fp,"        Bill date From %-10s TO %-10s      ",
             nd_fm_date_prn.arr,nd_to_date_prn.arr); */


					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_fm_date_prn.arr);            
 					  fun_change_loc_date_fm_prn(); 
 
 fprintf(fp,"        Bill date From %-10.10s TO",
             date_convert.arr);

					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_to_date_prn.arr);            
 					  fun_change_loc_date_fm_prn(); 
 fprintf(fp," %-10.10s      ",date_convert.arr);


/*----- Corrected By Venkat on 16/5/1999 to Print the 
  -- LOWEST & HIGHEST if the Accepted Bill dates are NULL-----*/

if(nd_fm_cr_date_prn.arr[0] == '\0')
  fprintf(fp,"%17s %4s %6s",loc_legend[110],loc_legend[60],loc_legend[130]);
else 
{
 // fprintf(fp,"%17s %4s %-16s",loc_legend[110],loc_legend[60],nd_fm_cr_date_prn.arr);
 					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_fm_cr_date_prn.arr);            
 					  fun_change_loc_date_time(); 

  fprintf(fp,"%17s %4s %-16s",loc_legend[110],loc_legend[60],date_convert.arr);
}
if(nd_to_cr_date_prn.arr[0] == '\0')
  fprintf(fp," %2s %7s\n\n",loc_legend[70],loc_legend[120]);
else 
{
 // fprintf(fp," %2s %-16s\n\n",loc_legend[70],nd_to_cr_date_prn.arr);
 					 init_date_temp_var();                              

					  strcpy(date_convert.arr,nd_to_cr_date_prn.arr);            
 					  fun_change_loc_date_time(); 
  fprintf(fp," %2s %-16s\n\n",loc_legend[70],date_convert.arr);
}
/*-----------------------------------------------------------*/

// Commented by Aldrin on 05/11/1996    // EPNH 28/10/2004         
//fprintf(fp,"     %s\n",
//        (nd_show_bill.arr[0] == 'Y')?loc_legend[240]:loc_legend[280]);
fprintf(fp,
"-----------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,
"%5s %12s     %9s     %12s        %8s  %14s    %12s       %9s        %8s\n",loc_legend[290],loc_legend[160],loc_legend[100],loc_legend[300],loc_legend[310],loc_legend[320],loc_legend[330],loc_legend[340],loc_legend[350]);
fprintf(fp,
"       %7s %6   %8s         %7s %9s & %4s     %12s  %7s\n",loc_legend[360],loc_legend[370],loc_legend[380],loc_legend[390],loc_legend[400],loc_legend[410],loc_legend[420],loc_legend[430]);
fprintf(fp,"  %12s     %12s     %12s     %17s \n",loc_legend[440],loc_legend[450],loc_legend[460],loc_legend[110]);
fprintf(fp,
"-----------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 13;
 if (l_flg)
    print_rec(0);
}

print_line_head()
{
    if (lctr > 50)
       print_head(1);
// fprintf(fp,"%s\n",bl_hdr_added_date.arr);
   fprintf(fp,"%10s-----------------------------------------------------------------------------------------------------------------------\n"," ");
   fprintf(fp,"%12s%10s & %11s                          %12s    %12s %15s  %4s %%      %10s\n"," ",loc_legend[470],loc_legend[480],loc_legend[490],loc_legend[500],loc_legend[510],loc_legend[520],loc_legend[530]);
   fprintf(fp,"%10s-----------------------------------------------------------------------------------------------------------------------\n\n"," ");
  lctr+=4;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;


/*-- Y2K correction. Format introduced for year as YYYY instead of YY 
     VSK 15/11/1999 */


    EXEC SQL SELECT ACCOUNTING_NAME, 
	                TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, 
			   :date_time, 
			   :user_id
               FROM SY_ACC_ENTITY
			   WHERE  ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

/*print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
} */

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        strcat(s_amt,"-");
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s ",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s ",str_amt);
        }

}                        


fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRBLGEN.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}
get_local_date()
{
   	EXEC SQL EXECUTE
 
 	
	BEGIN
	
	:nd_loc_date :=sm_convert_date_2t(TO_DATE(:nd_temp_date,'DD/MM/RRRR'),:p_language_id); 

  	END;

	END-EXEC;
        

		//if (OERROR)
        //err_mesg("SELECTING Date failed",0,"");

}
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';
 
nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
 }
fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}


get_local_date_time()
{

  	EXEC SQL EXECUTE
 
 	
	BEGIN
	
	:nd_loc_date :=sm_convert_datetime_2t(TO_DATE(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id);  
  	END;

	END-EXEC;
        

		//if (OERROR)
       // err_mesg("SELECTING Date failed",0,"");

}

fun_change_loc_date_time()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date_time();

strcpy(date_convert.arr,nd_loc_date.arr); 

}


get_local_date_fm_prn()
{
  	EXEC SQL EXECUTE
 
 	
	BEGIN
	
	:nd_loc_date :=sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/YYYY'),:p_language_id);  
     	
	END;

	END-EXEC;
        

 

		//if (OERROR)
        //err_mesg("SELECTING Date failed",0,"");

}

fun_change_loc_date_fm_prn()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date_fm_prn();

strcpy(date_convert.arr,nd_loc_date.arr); 

}
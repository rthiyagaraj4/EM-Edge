/****************************OCS MEDICOM ver 1.0*****************************
*  File	: blradmbg.pc
   Author : Faizal Eledath
   Converted To Windows : Prasad B G S         3/7/96
   (Chinese changed to Local)
   Date Created : 14/04/1993
   Last Modified : 18/04/1993   
          
*  Ver 4.1        
        
*  Purpose : To report on Admissions for a selected period.
            
*  Input Parameters : 
                      Command line inputs
		      1. Usr_id/Password
                      2. Session id
		      3. Program Date

                      Parameters from SY_PROG_PARAM table 
                      4. Preferred range of date_time for admission
		      5. Range of Admission Type
                      6. Range of Ward Codes
    	              7. Range of Bed Classes 
    	              8. Range of doctor ID's
  
*  Table Accessed : IP_ADT_TRN

*  Programs accessed : comma.c

*  Output File : blradmbg.lis
*****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <bl.h>

#define MAX_LINES 55
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 4.1\n"
/*
#define DEBUG
*/

EXEC SQL BEGIN DECLARE SECTION;

       /* increased the length all varchar variables by one to take care */
       /* for null termination */
	VARCHAR uid_pwd		   [91],
 
                /* from IP_ADT_TRN */
		d_fr_ward_code			[5],
		d_patient_id			[21],
		d_last_name_loc_lang	[21],
		d_first_name_loc_lang	[21],
		d_last_name				[21],
		d_first_name			[21],
		d_second_name			[21],
		d_sex					[2],
		d_date_of_birth	        [13],
		d_fr_physician_id		[16],
		d_episode_id			[9],
		d_trn_date_time	        [20],
		d_trn_type				[3],
		d_fr_bed_num			[9],
		d_fr_room_num			[5], 
		d_fr_bed_class_code		[3],
		d_fr_bed_type_code		[3],
		d_med_splty_grp_code    [5],
        d_adm_dis_reference     [5],
		d_baby_ind              [2],
		d_short_name_loc_lang   [61],
		d_short_name_full       [61],
        mp_pat_short_name       [61],
		d_short_name            [61],
		d_short_name1           [61],  
		d_blng_grp_id           [3],
		d_cust_code             [9],
		d_cust_short_name       [16],

		/* input parameters to main() */
                nd_session_id      [16],
		nd_pgm_date	   [20],

		/******** parameters from SY_PROG_PARAM table ***********/
		nd_fr_trn_date_time		[20],
		nd_to_trn_date_time		[20],
		nd_fr_trn_type			[3],
		nd_to_trn_type			[3],
		nd_fr_fr_ward_code		[5],
		nd_to_fr_ward_code		[5],
		nd_fr_fr_bed_class_code	[5],
		nd_to_fr_bed_class_code	[5],
		nd_fr_fr_physician_id	[16],
		nd_to_fr_physician_id	[16],
        nd_fr_med_splty_grp_code[5],
        nd_to_med_splty_grp_code[5],
		nd_adm_dis_reference    [5],
		nd_fr_blng_grp_id       [3],
		nd_to_blng_grp_id       [3],
		nd_operating_facility_id[3],
		

               /* from SY_PHYSICIAN_MAST */
	       d_phys_short_name         [16], /* modified 28/03/1993 faizal */

               /* from SY_REFERRAL */
	       d_adm_dis_reference_desc  [31],

               /* from IP_ADMISSION_TYPE */
	       d_trn_type_desc           [31],

               /* from IP_WARD */
	       nd_ward_code_desc         [31],

               /* from IP_WARD_TYPE */
	       d_ward_type_code          [5],
	       nd_ward_type_desc         [31],

               /* from IP_WARD_TYPE */
	       d_med_splty_grp_desc      [16],

               /* variable for cursor */
		nd_cur_trn_date_time     [20],
                nd_cur_ward_code         [5],

                nd_fr_adm_dis_reference  [5],
                nd_to_adm_dis_reference  [5],

	       /* for header routine */
	       d_acc_entity_name         [41],
	       d_user                    [21],
	       d_sysdate                 [20];

    char       rep_order;

/* calculated fields from IP_WAIT_LIST */ 
float		nd_total_months, nd_days_old;
int		nd_trunc_total_months;

char filename[150];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA;

int   line_no=0, page_no=1;

/* summary fields for calculating No. of records */ 
/** modified 16/03/1993 faizal **/
long   totl_detl_rec = 0,
       grand_totl_rec = 0;

char nd_wl_status_desc[10],
     nd_fr_time[20],
     nd_to_time[20],
     nd_time_desc[50],
     nd_date_desc[50],
     nd_date_line[132],
     spaces[100];

FILE *f1;

  int nd_age_years, 
      nd_age_months,
      nd_age_days;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

void proc_main(argc, argv)
int argc;
char *argv[];
{
  void  get_params(),
  	get_header_dtls(),
  	dclr_ip_adt_trn_cur();
 
    strcpy(filename,WORKING_DIR);
	strcat(filename,"blradmbg.lis");

   if((f1 = fopen(filename, "w")) == NULL) {
     disp_message(ERR_MESG,".... Error opening output file ....");
     proc_exit();
   } 

   if(argc <= 4) {
     disp_message(ERR_MESG,"Usage blradmbg uid/passwd session_id pgm_date");
     proc_exit();
   }

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   set_meduser_role();

   get_params();

   dclr_ip_adt_trn_cur();

   get_header_dtls();

   process_rep();


   /*EXEC SQL CLOSE IP_WAIT_LIST_CUR;*/
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL COMMIT WORK RELEASE;

   fclose(f1);
   return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();
}   



/* get the parameters from the SY_PROG_PARM table and */
/* delete the record after reading it.                 */
void get_params()
{
   /* read the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT 
		   OPERATING_FACILITY_ID,
		   PARAM1,
		   PARAM2,
		   PARAM3,
		   PARAM4,
		   PARAM5,
		   PARAM6,
		   PARAM7,
		   PARAM8,
		   PARAM9,
		   PARAM10,
		   PARAM11,
		   PARAM12,
		   PARAM13,    
		   PARAM14,  
		   PARAM15,
		   PARAM16
            INTO 
		:nd_operating_facility_id,
		:nd_fr_trn_date_time,
		:nd_to_trn_date_time,
		:nd_fr_trn_type,
		:nd_to_trn_type,
		:nd_fr_fr_ward_code,
		:nd_to_fr_ward_code,
		:nd_fr_fr_bed_class_code,
		:nd_to_fr_bed_class_code,
		:nd_fr_fr_physician_id,
		:nd_to_fr_physician_id,
        :nd_fr_med_splty_grp_code,
        :nd_to_med_splty_grp_code,
		:nd_adm_dis_reference,
		:nd_fr_blng_grp_id,
		:nd_to_blng_grp_id,
		:rep_order
        FROM	SY_PROG_PARAM
	    WHERE   PGM_ID = 'BLRADMBG'
		AND		SESSION_ID = TO_NUMBER(:nd_session_id)
		AND		PGM_DATE = :nd_pgm_date;


  nd_fr_trn_date_time.arr[nd_fr_trn_date_time.len] 		= '\0';
  nd_to_trn_date_time.arr[nd_to_trn_date_time.len] 		= '\0';
  nd_fr_trn_type.arr[nd_fr_trn_type.len] 			= '\0';
  nd_to_trn_type.arr[nd_to_trn_type.len] 			= '\0';
  nd_fr_fr_ward_code.arr[nd_fr_fr_ward_code.len] 		= '\0';
  nd_to_fr_ward_code.arr[nd_to_fr_ward_code.len] 		= '\0';
  nd_fr_fr_bed_class_code.arr[nd_fr_fr_bed_class_code.len] 	= '\0';
  nd_to_fr_bed_class_code.arr[nd_to_fr_bed_class_code.len] 	= '\0';
  nd_fr_fr_physician_id.arr[nd_fr_fr_physician_id.len] 		= '\0';
  nd_to_fr_physician_id.arr[nd_to_fr_physician_id.len] 		= '\0';
  nd_fr_med_splty_grp_code.arr[nd_fr_med_splty_grp_code.len]    = '\0';
  nd_to_med_splty_grp_code.arr[nd_to_med_splty_grp_code.len]    = '\0';
  nd_adm_dis_reference.arr[nd_adm_dis_reference.len] 		= '\0';
  nd_fr_blng_grp_id.arr[nd_fr_blng_grp_id.len]                  = '\0';
  nd_to_blng_grp_id.arr[nd_to_blng_grp_id.len]                  = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);

   if (strcmp(nd_adm_dis_reference.arr, "%") == 0){
      strcpy(nd_fr_adm_dis_reference.arr, "!!!!");
      strcpy(nd_to_adm_dis_reference.arr, "~~~~");
   }
   else  { strcpy(nd_fr_adm_dis_reference.arr, nd_adm_dis_reference.arr);
           strcpy(nd_to_adm_dis_reference.arr, nd_adm_dis_reference.arr);
         }
   nd_fr_adm_dis_reference.len = strlen(nd_fr_adm_dis_reference.arr);
   nd_to_adm_dis_reference.len = strlen(nd_to_adm_dis_reference.arr);


  /* delete the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DELETE SY_PROG_PARAM
	   WHERE PGM_ID = 'BLRADMBG'
	         AND SESSION_ID = :nd_session_id
		 AND PGM_DATE = :nd_pgm_date;

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_params() occured....");
   proc_exit();
}

/* get the header details */
void get_header_dtls()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT ACC_ENTITY_NAME, /* description of the institution */
				   USER,
				   TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')
			INTO :d_acc_entity_name,
				 :d_user,
				 :d_sysdate
            FROM SY_ACC_ENTITY
			WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';

  return;
  
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_header_dtls() occured....");
   proc_exit();
}
 

/* function declares IP_ADT_TRN_CUR cursor on the IP_ADT_TRN */
void dclr_ip_adt_trn_cur()
{

    EXEC SQL WHENEVER SQLERROR GOTO err_exit;


    EXEC SQL DECLARE IP_ADT_TRN_CUR1 CURSOR FOR
	   SELECT   BLFIN.BLNG_GRP_ID,
		BLFIN.CUST_CODE,
		IAT.TO_WARD_CODE,
		IAT.PATIENT_ID,
		DECODE(MP.TITLE_CODE,'BABY OF','*'),
		SUBSTR(MP.SHORT_NAME_LOC_LANG,1,16),
		MP.LAST_NAME_LOC_LANG,
		MP.FIRST_NAME_LOC_LANG,
		MP.LAST_NAME,
		MP.FIRST_NAME,
		MP.SECOND_NAME,
		MP.SEX,
	    TO_CHAR(DATE_OF_BIRTH, 'DD/MM/YYYY'),
	    TO_CHAR(MONTHS_BETWEEN(SYSDATE, DATE_OF_BIRTH)),
	    TO_CHAR(TRUNC(MONTHS_BETWEEN(SYSDATE, DATE_OF_BIRTH))),
		IAT.TO_PHYSICIAN_ID,
		TO_CHAR(IAT.EPISODE_ID),
		TO_CHAR(IAT.TRN_DATE_TIME, 'DD/MM/YYYY HH24:MI'),
		IAT.TRN_TYPE,
		IAT.TO_BED_NUM, 
		IAT.TO_ROOM_NUM,
		IAT.TO_BED_CLASS_CODE,
		IAT.TO_BED_TYPE_CODE,
 		IAT.MED_SPLTY_GRP_CODE,
        IAT.ADM_DISCHARGE_REFERENCE,
		mp.short_name 
     FROM       MP_PATIENT_MAST MP, 
				BL_EPISODE_FIN_DTLS BLFIN,
                IP_ADT_TRN_HIS_VW IAT
     WHERE  IAT.PATIENT_ID = MP.PATIENT_ID(+)
			AND BLFIN.EPISODE_TYPE in ('I','D') //EPNH 04012005
			AND IAT.EPISODE_ID   = BLFIN.EPISODE_ID
			AND IAT.TRN_CODE = 'A'
			AND NVL(IAT.ADT_TRN_STATUS, 'X') != '9'  // ie not cancelled 
            AND IAT.TRN_DATE_TIME BETWEEN 
				TO_DATE(:nd_fr_trn_date_time,'DD/MM/YYYY HH24:MI')
			AND TO_DATE(:nd_to_trn_date_time,'DD/MM/YYYY HH24:MI')
			AND BLFIN.BLNG_GRP_ID BETWEEN
			     :nd_fr_blng_grp_id
			     AND :nd_to_blng_grp_id
			AND NVL(IAT.TRN_TYPE, :nd_fr_trn_type) BETWEEN 
			     :nd_fr_trn_type
			     AND :nd_to_trn_type
			AND NVL(IAT.TO_WARD_CODE, :nd_fr_fr_ward_code) BETWEEN 
			     :nd_fr_fr_ward_code
			     AND :nd_to_fr_ward_code
            AND NVL(IAT.TO_BED_CLASS_CODE, :nd_fr_fr_bed_class_code) BETWEEN
			    :nd_fr_fr_bed_class_code
			    AND :nd_to_fr_bed_class_code
            AND NVL(IAT.TO_PHYSICIAN_ID, :nd_fr_fr_physician_id) BETWEEN
			    :nd_fr_fr_physician_id
			    AND :nd_to_fr_physician_id
            AND NVL(IAT.MED_SPLTY_GRP_CODE, :nd_fr_med_splty_grp_code) BETWEEN
			    :nd_fr_med_splty_grp_code
			    AND :nd_to_med_splty_grp_code
            AND NVL(IAT.ADM_DISCHARGE_REFERENCE, :nd_fr_adm_dis_reference) BETWEEN
			    :nd_fr_adm_dis_reference
			    AND :nd_to_adm_dis_reference 
			AND IAT.FACILITY_ID = :nd_operating_facility_id
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id
     ORDER BY IAT.TRN_DATE_TIME, 
              BLFIN.BLNG_GRP_ID, BLFIN.CUST_CODE,
              IAT.TO_WARD_CODE, IAT.EPISODE_ID;

    EXEC SQL DECLARE IP_ADT_TRN_CUR2 CURSOR FOR
       SELECT   BLFIN.BLNG_GRP_ID,
		BLFIN.CUST_CODE,
		IAT.TO_WARD_CODE,
		IAT.PATIENT_ID,
		DECODE(MP.TITLE_CODE,'BABY OF','*'),
		SUBSTR(MP.SHORT_NAME_LOC_LANG,1,16),
		MP.LAST_NAME_LOC_LANG,
		MP.FIRST_NAME_LOC_LANG,
		MP.LAST_NAME,
		MP.FIRST_NAME,
		MP.SECOND_NAME,
		MP.SEX,
	    TO_CHAR(DATE_OF_BIRTH, 'DD/MM/YYYY'),
	    TO_CHAR(MONTHS_BETWEEN(SYSDATE, DATE_OF_BIRTH)),
	    TO_CHAR(TRUNC(MONTHS_BETWEEN(SYSDATE, DATE_OF_BIRTH))),
		IAT.TO_PHYSICIAN_ID,
		TO_CHAR(IAT.EPISODE_ID),
		TO_CHAR(IAT.TRN_DATE_TIME, 'DD/MM/YYYY HH24:MI'),
		IAT.TRN_TYPE,
		IAT.TO_BED_NUM, 
		IAT.TO_ROOM_NUM,
		IAT.TO_BED_CLASS_CODE,
		IAT.TO_BED_TYPE_CODE,
 		IAT.MED_SPLTY_GRP_CODE,  
                IAT.ADM_DISCHARGE_REFERENCE,
				  mp.short_name 
     FROM       MP_PATIENT_MAST MP, 
				BL_EPISODE_FIN_DTLS BLFIN,
                IP_ADT_TRN_HIS_VW IAT
     WHERE  IAT.PATIENT_ID = MP.PATIENT_ID(+)
	    AND BLFIN.EPISODE_TYPE  in ('I','D') //EPNH 04012005
	    AND IAT.EPISODE_ID   = BLFIN.EPISODE_ID
	    AND IAT.TRN_CODE = 'A'
	    AND NVL(IAT.ADT_TRN_STATUS, 'X') != '9'  
            AND IAT.TRN_DATE_TIME BETWEEN 
			  TO_DATE(:nd_fr_trn_date_time,'DD/MM/YYYY HH24:MI')
			  AND TO_DATE(:nd_to_trn_date_time,'DD/MM/YYYY HH24:MI')
	    AND BLFIN.BLNG_GRP_ID BETWEEN
			     :nd_fr_blng_grp_id
			     AND :nd_to_blng_grp_id
	    AND NVL(IAT.TRN_TYPE, :nd_fr_trn_type) BETWEEN 
			     :nd_fr_trn_type
			     AND :nd_to_trn_type
	    AND NVL(IAT.TO_WARD_CODE, :nd_fr_fr_ward_code) BETWEEN 
			     :nd_fr_fr_ward_code
			     AND :nd_to_fr_ward_code
            AND NVL(IAT.TO_BED_CLASS_CODE, :nd_fr_fr_bed_class_code) BETWEEN
			    :nd_fr_fr_bed_class_code
			    AND :nd_to_fr_bed_class_code
            AND NVL(IAT.TO_PHYSICIAN_ID, :nd_fr_fr_physician_id) BETWEEN
			    :nd_fr_fr_physician_id
			    AND :nd_to_fr_physician_id
            AND NVL(IAT.MED_SPLTY_GRP_CODE, :nd_fr_med_splty_grp_code) BETWEEN
			    :nd_fr_med_splty_grp_code
			    AND :nd_to_med_splty_grp_code
            AND NVL(IAT.ADM_DISCHARGE_REFERENCE, :nd_fr_adm_dis_reference) BETWEEN
			    :nd_fr_adm_dis_reference
			    AND :nd_to_adm_dis_reference 
			AND IAT.FACILITY_ID = :nd_operating_facility_id
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id
     ORDER BY IAT.TRN_DATE_TIME, 
              IAT.TO_BED_NUM,BLFIN.BLNG_GRP_ID, BLFIN.CUST_CODE,
              IAT.TO_WARD_CODE, IAT.EPISODE_ID;

   

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   if(rep_order == '1') {
       EXEC SQL OPEN IP_ADT_TRN_CUR1;
   }
   else {
       EXEC SQL OPEN IP_ADT_TRN_CUR2;
   }
 
   

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_ip_adt_trn_cur() occured....");
   proc_exit();
}

process_rep()
{
  void prepare_new_page();     
  void print_rep_header();
  void print_page_header();
  void prepare_new_fr_to_date();
  void print_totl_per_day();
  void end_report();
  int fetch_ip_adt_trn_cur();
  int still_rec_left;


  print_rep_header(); 

  /* read the first cursor record */
  still_rec_left = fetch_ip_adt_trn_cur();
  if(still_rec_left == 0)
    prepare_new_page();
  while(still_rec_left) {    /* master_master record */

    strcpy(nd_cur_trn_date_time.arr, d_trn_date_time.arr);
    nd_cur_trn_date_time.len = strlen(nd_cur_trn_date_time.arr);

    prepare_new_fr_to_date();
    prepare_new_page();
    grand_totl_rec = 0;

    /* process until first level break group arrises */
    while((strncmp(nd_cur_trn_date_time.arr, d_trn_date_time.arr, 10) == 0)
						&& still_rec_left) {
   
       grand_totl_rec++;

       print_rec();  

       if(line_no >= MAX_LINES) 
           prepare_new_page();

        /* read the next cursor record */
        still_rec_left = fetch_ip_adt_trn_cur();
    }
    if((line_no + 2) >= MAX_LINES) {
         prepare_new_page();
         print_totl_per_day();
     }
     else print_totl_per_day(); 
 }
 if((line_no + 4) >= MAX_LINES){
   prepare_new_page();
   end_report();
   }
   else end_report();
}
  

/* prints the master-detail record until the cursor is empty */

/* prepares for the new page */
void prepare_new_page()
{
   page_no += 1;
   fprintf(f1,"");
   print_page_header();
   print_rep_head();
   line_no = 5;
}




/* fetches the next record from IP_ADT_TRN_CUR  */
/* returns 0 if the end of cursor is reached */
/* else returns 1.                           */
int fetch_ip_adt_trn_cur()
{

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  if(rep_order == '1') {
      EXEC SQL FETCH IP_ADT_TRN_CUR1 INTO
		    :d_blng_grp_id,
		    :d_cust_code,
		    :d_fr_ward_code,
		    :d_patient_id,
		    :d_baby_ind,
		    :d_short_name_loc_lang,
		   /* :d_short_name,
			:d_short_name1,*/
		    :d_last_name_loc_lang,
		    :d_first_name_loc_lang,
		    :d_last_name,
		    :d_first_name,
		    :d_second_name,
		    :d_sex,
		    :d_date_of_birth,
            :nd_total_months,
            :nd_trunc_total_months,
		    :d_fr_physician_id,
		    :d_episode_id,
		    :d_trn_date_time,
		    :d_trn_type,
		    :d_fr_bed_num,
		    :d_fr_room_num,
		    :d_fr_bed_class_code,
		    :d_fr_bed_type_code,
		    :d_med_splty_grp_code,
		    :d_adm_dis_reference,
			:d_short_name_full;
    }



    else {
      EXEC SQL FETCH IP_ADT_TRN_CUR2 INTO
		    :d_blng_grp_id,
		    :d_cust_code,
		    :d_fr_ward_code,
		    :d_patient_id,
		    :d_baby_ind,
		    :d_short_name_loc_lang,
		 /*   :d_short_name,
			:d_short_name1,*/
		    :d_last_name_loc_lang,
		    :d_first_name_loc_lang,
		    :d_last_name,
		    :d_first_name,
		    :d_second_name,
		    :d_sex,
		    :d_date_of_birth,
            :nd_total_months,
            :nd_trunc_total_months,
		    :d_fr_physician_id,
		    :d_episode_id,
		    :d_trn_date_time,
		    :d_trn_type,
		    :d_fr_bed_num,
		    :d_fr_room_num,
		    :d_fr_bed_class_code,
		    :d_fr_bed_type_code,
            :d_med_splty_grp_code,
		    :d_adm_dis_reference,
			:d_short_name_full;
    }
    


  if (NODATAFOUND)
    return 0;



EXEC SQL  EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :d_short_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :d_short_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :d_short_name1    := :d_short_name1 || str2;
       end if;
   
	END;             
  END;
          
END-EXEC;
 
       d_short_name.arr[d_short_name.len]  = '\0';
       d_short_name1.arr[d_short_name1.len]  = '\0';


  d_fr_ward_code.arr[d_fr_ward_code.len] 		= '\0';
  d_patient_id.arr[d_patient_id.len] 			= '\0';
  d_baby_ind.arr[d_baby_ind.len]                        = '\0';
  d_short_name_loc_lang.arr[d_short_name_loc_lang.len]  = '\0';
  d_short_name.arr[d_short_name.len]                    = '\0';
  d_short_name1.arr[d_short_name1.len]                    = '\0';
  d_last_name_loc_lang.arr[d_last_name_loc_lang.len] 	= '\0';
  d_first_name_loc_lang.arr[d_first_name_loc_lang.len] 	= '\0';
  d_last_name.arr[d_last_name.len] 			= '\0';
  d_first_name.arr[d_first_name.len] 			= '\0';
  d_second_name.arr[d_second_name.len] 			= '\0';
  d_sex.arr[d_sex.len] 					= '\0';
  d_date_of_birth.arr[d_date_of_birth.len] 		= '\0';
  d_fr_physician_id.arr[d_fr_physician_id.len] 		= '\0';
  d_episode_id.arr[d_episode_id.len] 			= '\0';
  d_trn_date_time.arr[d_trn_date_time.len] 		= '\0';
  d_trn_type.arr[d_trn_type.len] 			= '\0';
  d_fr_bed_num.arr[d_fr_bed_num.len] 			= '\0';
  d_fr_room_num.arr[d_fr_room_num.len] 			= '\0';
  d_fr_bed_class_code.arr[d_fr_bed_class_code.len] 	= '\0';
  d_fr_bed_type_code.arr[d_fr_bed_type_code.len] 	= '\0';
  d_med_splty_grp_code.arr[d_med_splty_grp_code.len]    = '\0';
  d_adm_dis_reference.arr[d_adm_dis_reference.len]      = '\0';
  d_blng_grp_id.arr[d_blng_grp_id.len]                  = '\0';
  d_cust_code.arr[d_cust_code.len]                      = '\0';
  d_short_name_full.arr[d_short_name_full.len]          = '\0';  



  fetch_other_dtls();

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_ip_adt_trn_cur() occured....");
   proc_exit();

}

/* print total number of detail records for the  day */
void print_totl_per_day()
{

 fprintf(f1, "\n");
 fprintf(f1, "Total for Day : %ld\n", grand_totl_rec);
 totl_detl_rec = 0;
 grand_totl_rec = 0;
}

/* prepares for the page header with new date parameters */
void prepare_new_fr_to_date()
{
 register int i, j;



  if(strncmp(nd_cur_trn_date_time.arr, nd_fr_trn_date_time.arr,10) == 0){
     for(i=0; i<6; i++){
       j=i+10;
       nd_fr_time[i] = nd_fr_trn_date_time.arr[j];
     }
    i += 1;
    nd_fr_time[i] = '\0';
    strcpy(nd_to_time, " 23:59");
  }
  else if(strncmp(nd_cur_trn_date_time.arr, nd_to_trn_date_time.arr, 10) == 0){
        strcpy(nd_fr_time, " 00:00");
	for(i=0; i<6; i++){
	 j = i+10;
	 nd_to_time[i] = nd_to_trn_date_time.arr[j];
        }
        i += 1;
        nd_to_time[i] = '\0';
       }
        else {strcpy(nd_fr_time, " 00:00");
              strcpy(nd_to_time, " 23:59");
             }
 
   sprintf(nd_time_desc,"FROM TIME :%-6.6s  TO TIME :%-6.6s", nd_fr_time, nd_to_time);
   strncpy(nd_date_desc, nd_cur_trn_date_time.arr, 10);
   strcpy(spaces, "                                       ");
   sprintf(nd_date_line,"%sFOR DATE : %-10.10s  %s",spaces, nd_date_desc,nd_time_desc);
}

/* to print the header page for the report */
void print_rep_header()
{
  register int i;
  void print_page_header();
  char nd_fr_trn_date_time_desc     [20],
       nd_to_trn_date_time_desc     [20],
       nd_fr_trn_type_desc	    [20],
       nd_to_trn_type_desc	    [20],
       nd_fr_fr_ward_code_desc      [20],
       nd_to_fr_ward_code_desc      [20],
       nd_fr_fr_bed_class_code_desc [20],
       nd_to_fr_bed_class_code_desc [20],
       nd_fr_fr_physician_id_desc   [20],
       nd_to_fr_physician_id_desc   [20],
       nd_fr_med_splty_grp_code_desc[20],
       nd_to_med_splty_grp_code_desc[20],
       nd_fr_blng_grp_id_desc       [20],
       nd_to_blng_grp_id_desc       [20],
       nd_adm_dis_reference_desc    [20];

  if(strcmp(nd_fr_trn_date_time.arr, "01/01/1800 00:00") == 0)
    strcpy(nd_fr_trn_date_time_desc, "LOWEST");
    else strcpy(nd_fr_trn_date_time_desc, nd_fr_trn_date_time.arr);

  if(strcmp(nd_to_trn_date_time.arr, "31/12/4712 23:59") == 0)
    strcpy(nd_to_trn_date_time_desc, "HIGHEST");
    else strcpy(nd_to_trn_date_time_desc, nd_to_trn_date_time.arr);

  if(strcmp(nd_fr_trn_type.arr, "!!") == 0)
    strcpy(nd_fr_trn_type_desc, "LOWEST");
    else strcpy(nd_fr_trn_type_desc, nd_fr_trn_type.arr);

  if(strcmp(nd_to_trn_type.arr, "~~") == 0)
    strcpy(nd_to_trn_type_desc, "HIGHEST");
    else strcpy(nd_to_trn_type_desc, nd_to_trn_type.arr);

  if(strcmp(nd_fr_fr_ward_code.arr, "!!!!") == 0)
    strcpy(nd_fr_fr_ward_code_desc, "LOWEST");
    else strcpy(nd_fr_fr_ward_code_desc, nd_fr_fr_ward_code.arr);

  if(strcmp(nd_to_fr_ward_code.arr, "~~~~") == 0)
    strcpy(nd_to_fr_ward_code_desc, "HIGHEST");
    else strcpy(nd_to_fr_ward_code_desc, nd_to_fr_ward_code.arr);

  if(strcmp(nd_fr_fr_bed_class_code.arr, "!!") == 0)
    strcpy(nd_fr_fr_bed_class_code_desc, "LOWEST");
    else strcpy(nd_fr_fr_bed_class_code_desc, nd_fr_fr_bed_class_code.arr);

  if(strcmp(nd_to_fr_bed_class_code.arr, "~~") == 0)
    strcpy(nd_to_fr_bed_class_code_desc, "HIGHEST");
    else strcpy(nd_to_fr_bed_class_code_desc, nd_to_fr_bed_class_code.arr);

  if(strcmp(nd_fr_fr_physician_id.arr, "!!!!!!") == 0)
    strcpy(nd_fr_fr_physician_id_desc, "LOWEST");
    else strcpy(nd_fr_fr_physician_id_desc, nd_fr_fr_physician_id.arr);

  if(strcmp(nd_to_fr_physician_id.arr, "~~~~~~") == 0)
    strcpy(nd_to_fr_physician_id_desc, "HIGHEST");
    else strcpy(nd_to_fr_physician_id_desc, nd_to_fr_physician_id.arr);

  if(strcmp(nd_fr_med_splty_grp_code.arr, "!!!!") == 0)
    strcpy(nd_fr_med_splty_grp_code_desc, "LOWEST");
    else strcpy(nd_fr_med_splty_grp_code_desc, nd_fr_med_splty_grp_code.arr);

  if(strcmp(nd_to_med_splty_grp_code.arr, "~~~~") == 0)
    strcpy(nd_to_med_splty_grp_code_desc, "HIGHEST");
    else strcpy(nd_to_med_splty_grp_code_desc, nd_to_med_splty_grp_code.arr);

  if(strcmp(nd_fr_blng_grp_id.arr, "!!") == 0)
    strcpy(nd_fr_blng_grp_id_desc, "LOWEST");
    else strcpy(nd_fr_blng_grp_id_desc, nd_fr_blng_grp_id.arr);

  if(strcmp(nd_to_blng_grp_id.arr, "~~") == 0)
    strcpy(nd_to_blng_grp_id_desc, "HIGHEST");
    else strcpy(nd_to_blng_grp_id_desc, nd_to_blng_grp_id.arr);

  if(strcmp(nd_adm_dis_reference.arr, "%") == 0)
    strcpy(nd_adm_dis_reference_desc, "ALL");
    else strcpy(nd_adm_dis_reference_desc, nd_adm_dis_reference.arr);


/* the date line in the report page header is modified */
  for(i=0; i< (66 -(int)((29 + (strlen(nd_to_trn_date_time_desc) + strlen(nd_to_trn_date_time_desc)))/2)); i++)
    spaces[i] = ' ';
  spaces[i] = '\0';
  sprintf(nd_date_line,"%sFOR THE PERIOD FROM : %s  TO : %s",spaces, nd_fr_trn_date_time_desc ,nd_to_trn_date_time_desc);
  print_page_header();
  fprintf(f1,VER);
  fprintf(f1,"\n\n\n\n");
  fprintf(f1,"        ");
  fprintf(f1,"INPUT PARAMETERS :\n");
  fprintf(f1,"        ");
  fprintf(f1,"------------------\n\n");
  fprintf(f1,"                ");
  fprintf(f1,"ADMISSION DATE FROM           : %s\n", nd_fr_trn_date_time_desc);
  fprintf(f1,"                ");
  fprintf(f1,"                 TO           : %s\n", nd_to_trn_date_time_desc);
  fprintf(f1,"\n");
  fprintf(f1,"                ");
  fprintf(f1,"ADMISSION TYPE FROM           : %s\n", nd_fr_trn_type_desc);
  fprintf(f1,"                ");
  fprintf(f1,"                 TO           : %s\n", nd_to_trn_type_desc);
  fprintf(f1,"\n");
  fprintf(f1,"                ");
  fprintf(f1,"WARD CODE FROM                : %s\n", nd_fr_fr_ward_code_desc);
  fprintf(f1,"                ");
  fprintf(f1,"            TO                : %s\n", nd_to_fr_ward_code_desc);
  fprintf(f1,"\n");
  fprintf(f1,"                ");
  fprintf(f1,"BED CLASS CODE FROM           : %s\n", nd_fr_fr_bed_class_code_desc);
  fprintf(f1,"                ");
  fprintf(f1,"                 TO           : %s\n", nd_to_fr_bed_class_code_desc);
  fprintf(f1,"\n");
  fprintf(f1,"                ");
  fprintf(f1,"DOCTOR ID FROM                : %s\n", nd_fr_fr_physician_id_desc);
  fprintf(f1,"                ");
  fprintf(f1,"            TO                : %s\n", nd_to_fr_physician_id_desc);
  fprintf(f1,"\n");
  fprintf(f1,"                ");
  fprintf(f1,"MEDICAL SPLTY GROUP CODE FROM : %s\n", nd_fr_fr_physician_id_desc);
  fprintf(f1,"                ");
  fprintf(f1,"                           TO : %s\n", nd_to_fr_physician_id_desc);
  fprintf(f1,"\n");
  fprintf(f1,"                ");
  fprintf(f1,"BILLING GROUP CODE FROM       : %s\n", nd_fr_blng_grp_id_desc);
  fprintf(f1,"                ");
  fprintf(f1,"                           TO : %s\n", nd_to_blng_grp_id_desc);
  fprintf(f1,"\n");

  fprintf(f1,"                ");
  fprintf(f1,"ADMISSION REFERAL SOURCE      : %s\n", nd_adm_dis_reference_desc);
}


/* to print page headers the header details */ 
void print_page_header()
{
 register int i;

 fprintf(f1,"MDL : BL    ");
 fprintf(f1,"                                            ");
 fprintf(f1,"%s", d_acc_entity_name.arr);
 fprintf(f1,"                                       ");
 fprintf(f1,"%s", d_sysdate.arr);
 fprintf(f1,"\n");
 fprintf(f1,"OPR : %s", d_user.arr);
 fprintf(f1,"\n");
 fprintf(f1,"REP : BLRADMBG");
 fprintf(f1,"                                            ");  
 fprintf(f1,"ADMISSION LIST");
 fprintf(f1,"                                                 ");  
 fprintf(f1,"Page : %4d", page_no);
 fprintf(f1,"\n");

 fprintf(f1,"%s", nd_date_line);
 fprintf(f1,"\n");
 fprintf(f1,"-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
  fprintf(f1,"\n");
}

/* to print the last line of the report */
void end_report()
{
  fprintf(f1,"\n\n\n");
  fprintf(f1,"                                                   ");
  fprintf(f1,"** End of Report **");
  fprintf(f1,"");
}

print_rep_head()
{


    line_no += 2;

if(rep_order == '1') {

    fprintf(f1,"BG Customer code & Name     Patient Local   & English Names                 Patient No Adm. No. Doctor Code & Name     Ward Bty Bed No.  Dly Charge Sex Age Time\n");

/*
               "XX XXXXXXXX XXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXX 99999999 XXXXXX XXXXXXXXXXXXXXX XXXX XX  XXXXXXXX 999,999.99  X  999 99:99"
*/

}
else {

    fprintf(f1,"Bed No.  Dly Charge BG Customer Code & Name     Patient Local   & English Names                 Patient No Adm. No. Doctor Code & Name     Ward Bty Time\n");

/*
               "XXXXXXXX 999,999.99 XX XXXXXXXX XXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXX 99999999 XXXXXX XXXXXXXXXXXXXXX XXXX XX  99:99"
*/

}
    fprintf(f1,"-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n");

}

print_rec()
{

if(rep_order == '1') {

/*    fprintf(f1,"%-2s %-8s %-15s %-16s %-30s %-10s %-8s %-6s %-15s %-4s %-2s  %-8s %-10s  %1s  %3d %5s\n",*/
    fprintf(f1,"%-2s %-8s %-15s %-16.16s %-30.30s %-20.20s %-8s %-6s %-15s %-4s %-2s  %-8s   %1s  %3d %5s\n",
	d_blng_grp_id.arr, 
	d_cust_code.arr,
	d_cust_short_name.arr,
    d_short_name_loc_lang.arr, 
	d_short_name.arr, 
    d_patient_id.arr, 
	d_episode_id.arr, 
	d_fr_physician_id.arr, 
	d_phys_short_name.arr,
    d_fr_ward_code.arr, 
	d_fr_bed_type_code.arr, 
	d_fr_bed_num.arr,
/*	d_fr_daily_rate.arr,*/
    d_sex.arr, 
	nd_age_years, 
	d_trn_date_time.arr+11);

	if (strlen(d_short_name1.arr) > 2)
	{
       fprintf(f1,"%44s %s \n"," ", d_short_name1.arr);
	   line_no ++;

	}


/*
               "XX XXXXXXXX XXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXX 99999999 XXXXXX XXXXXXXXXXXXXXX XXXX XX  XXXXXXXX 999,999.99  X  999 99:99"
*/
}
else {

/*   fprintf(f1,"%-8s %-10s %-2s %-8s %-15s %-16s %-30s %-10s %-8s %-6s %-15s %-4s %-2s  %5s\n",*/
   fprintf(f1,"%-8s      %-2s %-8s %-15s %-16.16s %-20.20s %-20.20s %-8s %-6s %-15s %-4s %-2s  %5s\n",
	d_fr_bed_num.arr,
	d_blng_grp_id.arr, 
	d_cust_code.arr,
	d_cust_short_name.arr,
        d_short_name_loc_lang.arr, 
	d_short_name.arr, 
        d_patient_id.arr, 
	d_episode_id.arr, 
	d_fr_physician_id.arr, 
	d_phys_short_name.arr,
        d_fr_ward_code.arr, 
	d_fr_bed_type_code.arr, 
	d_trn_date_time.arr+11);
		if (strlen(d_short_name1.arr) > 2 )
	{
       fprintf(f1,"%58s %s \n"," ", d_short_name1.arr);
	   line_no ++;

	}      

/*
               "XXXXXXXX 999,999.99 XX XXXXXXXX XXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX XXXXXXXXXX 99999999 XXXXXX XXXXXXXXXXXXXXX XXXX XX  99:99"
*/

}
    line_no ++;
	
}

fetch_other_dtls()
{
  extern double floor();
  nd_age_years = nd_age_months = nd_age_days = 0;

  /* calculating the age in terms of days, months and days */
  nd_age_years  = (int) floor(nd_trunc_total_months / 12.0);
  nd_age_months = (int) floor(nd_trunc_total_months - (nd_age_years * 12)); 

  if ((nd_age_years == 0) && (nd_age_months == 0)){
  /* if the patient is less than a month old */
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL SELECT TRUNC(SYSDATE - TO_DATE(:d_date_of_birth, 'DD/MM/YYYY'))
       INTO :nd_days_old
       FROM DUAL;
    nd_age_days = (int) nd_days_old;
   }
   /* if the patient is more than a month old */
   else nd_age_days   = (int) floor((nd_total_months - nd_trunc_total_months) * 31);


  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  EXEC SQL SELECT SHORT_NAME INTO :d_phys_short_name
	   FROM SY_PHYSICIAN_MAST
	   WHERE PHYSICIAN_ID = :d_fr_physician_id
	   AND    FACILITY_ID  = :nd_operating_facility_id;

    d_phys_short_name.arr[d_phys_short_name.len] = '\0';

  d_cust_short_name.arr[0]  = '\0';
  d_cust_short_name.len     = 0;

  if (d_cust_code.arr[0]) {
      EXEC SQL WHENEVER SQLERROR GOTO err_exit;
      EXEC SQL SELECT SHORT_NAME
	       INTO   :d_cust_short_name
	       FROM   AR_CUSTOMER
	       WHERE  CUST_CODE = :d_cust_code;

      d_cust_short_name.arr[d_cust_short_name.len]  = '\0';
  }
return 0;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_other_dtls() occured....");
   proc_exit();

}


#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER

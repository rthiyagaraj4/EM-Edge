/****************************OCS MEDICOM ver 1.0*****************************
*  File	: rlrlabel.pc
   Author : S.Sheelvant 
   Date Created : 04/07/1998
   Last Modified : 04/07/1998

*  Ver 1.10.01
   
*  Modified by   : HAMEED

*  Purpose : To generate specimen labels

*  Input Parameters : 

         Command line inputs:

		      1. Usr_id/Password
		      2. Specimen_no_from
		      3. Specimen_no_to
		      4. Labels_per_specimen
		      5. Line_space
		      6. Column_space
              7. Labels_per_line
		      8. Pfx_Sfx_flag
		      9. Str_const

*  Table Accessed : RL_SECTION_CODE,RL_PARAM

*  Output File : rlrlabel_<n>.lis
 ****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <string.h> 
#include <malloc.h>


#define MAX_LINES 56
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 1.10.01\n"
/*
#define DEBUG 1 */


EXEC SQL BEGIN DECLARE SECTION;

       /* increased the length all varchar variables by one to take care */
       /* for null termination */
	VARCHAR     nd_operating_facility_id   [3],
	            uid_pwd		               [91],
                nd_file_name               [151],
                nd_file_no                 [15],
                nd_printer_name            [16];

	VARCHAR fr_sp_no[21], 
			to_sp_no[21];

	char nd_dept;

long double sp_no_from, sp_no_to = 0, v_spec_no = 0;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

int   line_no=0;
FILE *f1;
char margv[20][10];
//unsigned long sp_no_from,sp_no_to;

int labels_per_sp,line_space,column_space,labels_per_line,arg_count;

char str_const[11], pfx_sfx_flag;
char **ptr;
char string_var[100];


void proc_main(argc, argv)
int  argc;
char *argv[];
{
   char msg[200];
   void do_report();

   if(argc < 10)
   {
      disp_message(ORA_MESG,"Usage : \nrlrlabel u/p fr to lbls_per_spec line_space col_space lbls_per_line [pfx_sfx str]\n");
      proc_exit() ;
   }

   strcpy(margv[0],argv[0]);
   strcpy(margv[1],argv[1]);
   strcpy(margv[2],argv[2]);

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

//   ptr = malloc((char *)20);
//   ptr = '\0';
//   sp_no_from = strtoul(argv[2],ptr,10);
//   sp_no_from = wcstoul(argv[2],ptr,16);



//   free(ptr);

//   ptr = malloc((char *)20);
//   ptr = '\0';
//   sp_no_to = strtoul(argv[3],ptr,10);
//   sp_no_to = wcstoul(argv[3],ptr,16);

//   free(ptr);

	strcpy(fr_sp_no.arr, argv[3]);
	fr_sp_no.len = strlen(fr_sp_no.arr);

	strcpy(to_sp_no.arr, argv[4]);
	to_sp_no.len = strlen(to_sp_no.arr);

    strcpy(OUTPUT_FILE_NAME, argv[5]);

   labels_per_sp = atoi(argv[6]);
   line_space = atoi(argv[7]);
   column_space = atoi(argv[8]);
   labels_per_line = atoi(argv[9]);

   if(argc > 10)
   {
      pfx_sfx_flag = argv[10][0];
      strcpy(str_const,argv[11]);
   }

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  
   
   set_meduser_role();

   gen_file_name();
   arg_count = argc;
   do_report();

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL COMMIT WORK;

   fclose(f1);

   return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit() ;
}   

void do_report()
{
// unsigned long i;
   long double i;
   char l_spec[21];
   int j,sp_ctr,l;
   char s[20];
   sp_ctr = 0;
	
	sp_no_from = 0;
	sp_no_to = 0;


	EXEC SQL SELECT TO_NUMBER(:fr_sp_no), TO_NUMBER(:to_sp_no)
			 INTO :sp_no_from, :sp_no_to
			 FROM DUAL;



   for(i = sp_no_from; i <= sp_no_to; i++)
   {

      for(j = 0; j < labels_per_sp; j++)
      {
          if(arg_count > 8)
		  {
		     if(pfx_sfx_flag == 'P')
			 {
	           fprintf(f1,"%*s",strlen(str_const),str_const);
			   v_spec_no = i;
			   get_value_string();
	           fprintf(f1,"%*s%*s",strlen(margv[2]), to_sp_no.arr,column_space," ");
			 }
			 else
			 {
			   v_spec_no = i;
			   get_value_string();
	           fprintf(f1,"%*s",strlen(margv[2]), to_sp_no.arr);
	           fprintf(f1,"%*s%*s",strlen(str_const),str_const,column_space," ");
             }
          }
	      else
	      {
			   v_spec_no = i;
			   get_value_string();
	         fprintf(f1,"%*s%*s",strlen(margv[2]), to_sp_no.arr,column_space," ");
          }
	      sp_ctr++;
	      if(sp_ctr == labels_per_line)
	      {  
	         sp_ctr = 0;
	         for(l = 0; l <= line_space; l++)
	         {
	             fprintf(f1,"\n");
	             line_no++;
	             if(line_no == MAX_LINES)
	             {
		            fprintf(f1,"");
		            line_no = 0;
                 }
             }
          }
       }
    }
    fclose(f1);
}

/*--------------------------------------------------------------------------*/
gen_file_name()
{
     /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 //strcat(nd_file_name.arr,"rlrlabel.lis");
	 strcat(nd_file_name.arr,OUTPUT_FILE_NAME);
	 nd_file_name.len = strlen(nd_file_name.arr);
	 if ((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var)  ;
       proc_exit() ;
     }

}
/*--------------------------------------------------------------------------*/
get_value_string()
{
	to_sp_no.arr[0]	= '\0';
	to_sp_no.len		= 0;

	EXEC SQL SELECT TO_CHAR(ROUND(:v_spec_no))
			 INTO :to_sp_no
			 FROM DUAL;

	to_sp_no.arr[to_sp_no.len]	= '\0';
}
#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER

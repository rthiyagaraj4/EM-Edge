/****************************OCS MEDICOM ver 1.0*****************************
*  File	: comb
   Author : DINESH
   Date Created  : 03/05/1999
   Last Modified : 03/05/1999

*  Ver 1.10.01
   
*  Purpose : To generate a FORMAT for WORKLIST

*  Input Parameters : 
              Command line inputs
	
		      1. Usr_id/Password
                
*  Table Accessed : RL_WORKLIST_FMT_HDR
	    

*  Output File : comb.lis
 ****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <gl.h>

#define MAX_LINES 55
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 1.10.01\n"

/*
#define VIEW_LOG_FILE 1
#define ONLINE_PRINTING 1
*/

/*
#define DEBUG 
*/

EXEC SQL BEGIN DECLARE SECTION;

/* INPUT PARAMETERS TO MAIN */

	VARCHAR  nd_operating_facility_id   [3],
	    uid_pwd		                    [42],
		nd_user_id                      [31],
		nd_user					        [31],
		nd_reprint				        [2] , 
		nd_test					        [15],
        nd_file_no                      [15],
		nd_file_name			        [150];

  /******** NEWLY ADDED            *****/
  
VARCHAR	    nd_cup_number			[32],
		nd_cup_indr				[32],
		nd_spec_no				[32],
		nd_wl_marker				[32],
		nd_pat_id			[32],
		nd_pat_name	     		[61],
		nd_worklist_name		[12],
		nd_section_code			[2],
		nd_age					[32],
		nd_dob					[32],
		nd_sex					[32],
		nd_source				[32],
		nd_consultant			[32],
		nd_urgency				[32],
		nd_comm_1				[32],
		nd_comm_2				[32],
		nd_comm_3				[32],
		nd_spec_date			[32],
		nd_assign_to			[32],
		nd_ref_location			[32],
		nd_category_no			[32],
		nd_collect_date			[32],
		nd_race					[32],
		nd_heading				[20],
		nd_field_type			[2];




/* Fields from table SY_ACC_ENTITY*/
	varchar 	d_acc_entity_name        [41],
				d_user                   [31],
				d_sysdate                [17],
				entity_name				 [80];

/**************ADDED FOR GLOBALIZATION**************/
	varchar	l_translated_value		 [100],
			language_id			[5];

				

/* SQL statement storing in this Variable */
	char sql_stmt	[500] ;

	int num[21];
	int cou[21];
	char *ptr;
	char word[21][32];

	char detail[21][44];

	char temp_word[32];

	int test = 0;
int i;
char local_legend[100][100];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>
 
char string_var[100] ;
int i =  0;
int j = 0 ;
int k = 0;
int ctr = 0;
int str_len = 0 ;
int total = 0 ;
int l_report_length = 0;

FILE *f1;

void proc_main(argc, argv)
int argc;
char *argv[];
{

	char command_line[200] ;
    void file_name();	
	void fetching();
	void sorting();
	void prepare_heading();
	void print_dtl();


   if (argc < 6)
   {
      
      disp_message(ERR_MESG, "Not enough Parameters for running this program\n");
      disp_message(ERR_MESG, "Exiting...user id/password@connectstring Worklist Section");
      sprintf(string_var, "No of parameters passed is <%d>\n",argc);
      disp_message(ERR_MESG, string_var);
      proc_exit();
   }
   
  
   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 
   
   strcpy(nd_operating_facility_id.arr, argv[4]);
   nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr);

   strcpy(nd_worklist_name.arr, argv[5]);
   nd_worklist_name.len = strlen(nd_worklist_name.arr); 

   strcpy(nd_section_code.arr, argv[6]);
   nd_section_code.len = strlen(nd_section_code.arr); 

   strcpy(nd_test.arr, argv[7]);
   nd_test.len = strlen(nd_test.arr); 

   strcpy(nd_user.arr, argv[8]);
   nd_user.len = strlen(nd_user.arr);


   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   if(OERROR)
      disp_message(ORA_MESG,"Failed to connect using : \n");

   #ifdef DEBUG
    printf("Connected to ORACLE as user: %s \n", uid_pwd.arr);
   #endif  
    
	set_meduser_role();
    strcpy(language_id.arr,l_language_id.arr);
	
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
   get_legend_value(4);

	file_name();
	fetching();

	if (strcmp(nd_field_type.arr, "P") ==  0)
		l_report_length = 80;
	else
		l_report_length = 132;


	prepare_heading();

	fclose(f1);

		
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL COMMIT WORK RELEASE;

	
	return ;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();
}   

/***** F E T C H I N G        *******/


 void fetching()
{

   nd_cup_number.arr[0] = '\0';
   nd_cup_number.len = 0 ;
   nd_cup_indr.arr[0] = '\0';
   nd_cup_indr.len = 0 ;
   nd_spec_no.arr[0] = '\0';
   nd_spec_no.len = 0 ;
   nd_wl_marker.arr[0] = '\0';
   nd_wl_marker.len = 0 ;
   nd_pat_id.arr[0] = '\0';
   nd_pat_id.len = 0 ;
   nd_pat_name.arr[0] = '\0';
   nd_pat_name.len = 0 ;
   nd_source.arr[0] = '\0';
   nd_source.len = 0 ;
   nd_consultant.arr[0] = '\0';
   nd_consultant.len = 0 ;
   nd_urgency.arr[0] = '\0';
   nd_urgency.len = 0 ;	
   nd_comm_1.arr[0] = '\0';
   nd_comm_1.len = 0 ;	
   nd_comm_2.arr[0] = '\0';
   nd_comm_2.len = 0 ;	
   nd_comm_3.arr[0] = '\0';
   nd_comm_3.len = 0 ;	
   nd_spec_date.arr[0] = '\0';
   nd_spec_date.len = 0 ;	
   nd_assign_to.arr[0]	= '\0';
   nd_assign_to.len		= 0;
   nd_ref_location.arr[0]	= '\0';
   nd_ref_location.len		= 0;
   nd_category_no.arr[0]	= '\0';
   nd_category_no.len		= 0;
   nd_collect_date.arr[0]	= '\0';
   nd_collect_date.len		= 0;
   nd_race.arr[0]			= '\0';
   nd_race.len				= 0;
   nd_field_type.arr[0]		= '\0';
   nd_field_type.len		= 0;
   
    for (i=0;i<21;i++)
    {
	   num[i] = 0;
	   cou[i] = 0;

	   strcpy(word[i],"0");
    }

	   
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   
   EXEC SQL 
   SELECT NVL(row_cup_number,0), NVL(col_cup_number,0),
		  NVL(l_cup_number,'0'), NVL(row_cup_indr,0), NVL(col_cup_indr,0),
		  NVL(l_cup_indr,'0'),NVL(row_wl_marker,0), NVL(col_wl_marker,0),
		  NVL(l_wl_marker,'0'), NVL(row_spec_no,0), NVL(col_spec_no,0),
		 NVL(l_spec_no,'0'),  NVL(row_patient_id,0), NVL(col_patient_id,0),
		 NVL(l_patient_id,'0'), NVL(row_pat_name,0), NVL(col_pat_name,0),
		 NVL(l_pat_name,'0'),NVL(row_age,0), NVL(col_age,0), NVL(l_age,'0'),
		 NVL(row_dob,0), NVL(col_dob,0), NVL(l_dob,'0'), NVL(row_sex,0), NVL(col_sex,0),
		 NVL(l_sex,'0'), NVL(row_source,0), NVL(col_source,0), NVL(l_source,'0'),
		 NVL(row_consultant,0), NVL(col_consultant,0), NVL(l_consultant,'0'),
		 NVL(row_urgency,0), NVL(col_urgency,0), NVL(l_urgency,'0'),
		 NVL(row_comm_1,0), NVL(col_comm_1,0),NVL(l_comm_1,'0'), NVL(row_comm_2,0),
		 NVL(col_comm_2,0), NVL(l_comm_2,0), NVL(row_comm_3,0), NVL(col_comm_3,0),
 	     NVL(l_comm_3,'0'), NVL(row_spec_date,0), NVL(col_spec_date,0),
		 NVL(l_spec_date,'0'), NVL(row_assign_to,0), NVL(col_assign_to,0),
		 NVL(l_assign_to,'0'), NVL(row_ref_location,0), NVL(col_ref_location,0),
		 NVL(l_ref_location,'0'), NVL(row_category_no,0), NVL(col_category_no,0),
		 NVL(l_category_no,'0'), NVL(row_collect_date,0), NVL(col_collect_date,0),
		 NVL(l_collect_date,'0'), NVL(row_race, 0), NVL(col_race, 0), NVL(l_race, '0'),
		 NVL(print_format, 'P')
   INTO  :num[0], :cou[0], :nd_cup_number,
		 :num[1], :cou[1], :nd_cup_indr,
		 :num[2], :cou[2], :nd_wl_marker,
		 :num[3], :cou[3], :nd_spec_no,
		 :num[4], :cou[4], :nd_pat_id,
		 :num[5], :cou[5], :nd_pat_name,
		 :num[6], :cou[6], :nd_age,
		 :num[7], :cou[7], :nd_dob,
		 :num[8], :cou[8], :nd_sex,
		 :num[9], :cou[9], :nd_source,
		 :num[10], :cou[10], :nd_consultant,
		 :num[11], :cou[11], :nd_urgency,
		 :num[12], :cou[12], :nd_comm_1,
		 :num[13], :cou[13], :nd_comm_2,
		 :num[14], :cou[14], :nd_comm_3,
		 :num[15], :cou[15], :nd_spec_date,
		 :num[16], :cou[16], :nd_assign_to,
		 :num[17], :cou[17], :nd_ref_location,
		 :num[18], :cou[18], :nd_category_no,
		 :num[19], :cou[19], :nd_collect_date,
		 :num[20], :cou[20], :nd_race,
		 :nd_field_type
   FROM   RL_WORKLIST_FMT_HDR
   WHERE  operating_facility_id = :nd_operating_facility_id
   AND worklist_name = :nd_worklist_name 
   AND section_code = :nd_section_code ;


  nd_cup_number.arr[nd_cup_number.len] = '\0';
  nd_cup_indr.arr[nd_cup_indr.len]	   = '\0';
  nd_spec_no.arr[nd_spec_no.len]	   = '\0';
  nd_wl_marker.arr[nd_wl_marker.len]   = '\0';
  nd_pat_id.arr[nd_pat_id.len] = '\0';
  nd_pat_name.arr[nd_pat_name.len]     = '\0';
  nd_age.arr[nd_age.len]			   = '\0';
  nd_dob.arr[nd_dob.len]			   = '\0';
  nd_sex.arr[nd_sex.len]			   = '\0';
  nd_source.arr[nd_source.len]		   = '\0';
  nd_consultant.arr[nd_consultant.len] = '\0';
  nd_urgency.arr[nd_urgency.len]	   = '\0';
  nd_comm_1.arr[nd_comm_1.len]	       = '\0';
  nd_comm_2.arr[nd_comm_2.len]	       = '\0';
  nd_comm_3.arr[nd_comm_3.len]	       = '\0';
  nd_spec_date.arr[nd_spec_date.len]   = '\0';
  nd_assign_to.arr[nd_assign_to.len]   = '\0';
  nd_ref_location.arr[nd_ref_location.len]	= '\0';
  nd_category_no.arr[nd_category_no.len]	= '\0';
  nd_collect_date.arr[nd_collect_date.len]	= '\0';
  nd_race.arr[nd_race.len]					= '\0';
  nd_field_type.arr[nd_field_type.len]		= '\0';

/*
#ifdef DEBUG
   printf(" nd_source_code= %s\n", nd_source_code.arr);
   printf(" nd_consultant_code= %s\n", nd_consultant_code.arr);
   printf(" nd_blood_group=%s\n", nd_blood_group.arr) ;
   printf(" nd_rhesus_code=%s\n", nd_rhesus_code.arr) ;
   printf(" nd_antibody_code=%s\n", nd_antibody_code.arr) ;
#endif
*/

 
   strcpy(word[0], nd_cup_number.arr);
   strcpy(word[1], nd_cup_indr.arr);
   strcpy(word[2], nd_wl_marker.arr);
   strcpy(word[3], nd_spec_no.arr);
   strcpy(word[4], nd_pat_id.arr);
   strcpy(word[5], nd_pat_name.arr);
   strcpy(word[6], nd_age.arr);
   strcpy(word[7], nd_dob.arr);
   strcpy(word[8], nd_sex.arr);
   strcpy(word[9], nd_source.arr);
   strcpy(word[10], nd_consultant.arr);
   strcpy(word[11], nd_urgency.arr);
   strcpy(word[12], nd_comm_1.arr);
   strcpy(word[13], nd_comm_2.arr);
   strcpy(word[14], nd_comm_3.arr);
   strcpy(word[15], nd_spec_date.arr);
   strcpy(word[16], nd_assign_to.arr);
   strcpy(word[17], nd_ref_location.arr);
   strcpy(word[18], nd_category_no.arr);
   strcpy(word[19], nd_collect_date.arr);
   strcpy(word[20], nd_race.arr);

   strcpy(detail[0], "XXX");
   strcpy(detail[1], "X");
   strcpy(detail[2], "X");
   strcpy(detail[3], "XXXXXXXXX");
   strcpy(detail[4], "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
   strcpy(detail[5], "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
   strcpy(detail[6], "XXX XX XX");
   strcpy(detail[7], "XXXXXXXX");
   strcpy(detail[8], "X");
   strcpy(detail[9], "XXXX");
   strcpy(detail[10], "XXXXXX");
   strcpy(detail[11], "X");
   strcpy(detail[12], "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
   strcpy(detail[13], "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
   strcpy(detail[14], "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
   strcpy(detail[15], "XXXXXXXXXXXXXXXXXXX");
   strcpy(detail[16], "XXXXXXXXXXXXXXXXXXXX");
   strcpy(detail[17], "XXXXXXXXXX");
   strcpy(detail[18], "XXXX/XXXXX/XXXXXXXXXX");
   strcpy(detail[19], "XXXXXXXXXXXXXXXXXXX");
   strcpy(detail[20], "XXXX");

   EXEC SQL SELECT TO_NUMBER(:nd_test) INTO :test FROM DUAL;

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_dept_printer() occured....\n");
   proc_exit();
}

/************************************************/

/*------------------ H E A D I N G ------------------*/
void prepare_heading()
{

    char heading[60] ;
	int p = 0;
	int q = 0;
	int length = 0;

	strcpy(heading, local_legend[3]);
	strcat(heading, nd_worklist_name.arr);
    length = (l_report_length - strlen(heading))/2 ;

	sorting();

		
    total = 0;
	ctr   = 1;

	fprintf(f1,"%*.*s", length,length,"");
	fprintf(f1,"%s\n", heading);
	fprintf(f1,"%*.*s", length,length,"");
	fprint_repeat(f1,'-',strlen(heading));		   
	fprintf(f1,"\n");

	fprintf(f1,"1........10........20........30........40........50");
	fprintf(f1,"........60........70........80");
	
	if (strcmp(nd_field_type.arr, "L") == 0)
	{
		fprintf(f1,"........90........100.......110");
		fprintf(f1,".......120.......130");
	}

	fprintf(f1,"\n");
	fprintf(f1,"\n");

	p = 19;
	while(p >= 0)
	{
		if (num[p] == 1)
		{
			if (strlen(word[p]) > strlen(detail[p]))
				q = strlen(word[p]);
			else
			    q = strlen(detail[p]);

			test = cou[p] + q;
			break;
			
		}

		p--;
	}

	fprintf(f1,"%*s",test,"    ");

	if (strcmp(nd_field_type.arr, "L") == 0)
	{
		fprintf(f1,"%s", local_legend[3]);
		for(i=7;i<l_report_length - test;i++)
			fprintf(f1,"-");
		fprintf(f1,">");
	}

	fprintf(f1,"\n");
	fprintf(f1,"\n");


	for(i=1;i<=21;i++)
	{

	 
	   k = i;

	   for (j=0;j<21;j++)
	   {
		
		
	      if (num[j] == ctr) 
	      {

		
			  if ((j > 0) && (num[j - 1] == num[j]) > 0)
			  {

			      total = cou[j - 1] ;
				  str_len = strlen(word[j - 1])  ;
				  
			  }
			
			  if ((j > 0) && (num[j - 1] == num[j]) > 0)
			  {
			     fprintf(f1,"%*s",(cou[j]   - (total + str_len)),"");
  		         fprintf(f1,"%s", word[j]);
			  }
			  else
			  {
				fprintf(f1,"%*s", cou[j] - 1, "");
				fprintf(f1,"%s", word[j]);
			  }

			  k = j ;		   
			  str_len = 0;
			  
	      }

		  

      }
	
	   i = k;
	   
	   if (num[i] > 0)
	   {
	      fprintf(f1,"\n");

		  fprintf(f1,"---------------------------------------------");
		  fprintf(f1,"-----------------------------------");
	
		  if (strcmp(nd_field_type.arr, "L") == 0)
		  {
			fprintf(f1, "-----------------------------------------------------");

		  }

	      fprintf(f1,"\n");
		  total = 0;

	  }

	   ctr = ctr + 1 ;

	}

	fprintf(f1,"\n");

	print_dtl();

	fprintf(f1,"\n");

	return ;
}

/************get_legend_value*******************/
get_legend_value(int cou)
 {
     
   
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLRWRKFM.LEGEND_');
	END;
	END-EXEC;




 for (i=1; i<=cou; i++)
	{


	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRWRKFM.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);

	

	}
	

 }
/****************End****************/

/*------------------ S O R T I N G ------------------*/
void sorting()
{

	for(i=0;i<21;i++)
	{
		for(j=i+1;j<21;j++)
		{
			if (((num[j] < num[i]) || (num[i] == 0))  && (num[j] > 0))
			{
				total  = num[i];
				num[i] = num[j];
				num[j] = total;

				total  = cou[i];
				cou[i] = cou[j];
				cou[j] = total;
			
				strcpy(temp_word,word[i]);
				strcpy(word[i], word[j]);
				strcpy(word[j], temp_word);

				strcpy(temp_word,detail[i]);
				strcpy(detail[i], detail[j]);
				strcpy(detail[j], temp_word);


			}
		
		}	
	
	}


	for(i=0;i<21;i++)
	{
		for(j=i+1;j<21;j++)
		{
			if ((num[j] == num[i]) && (num[j] > 0))
			{
				if (((cou[j] < cou[i]) || (cou[i] == 0)) && (cou[j] > 0))
				{
				   total = cou[i];
				   cou[i] = cou[j];
				   cou[j] = total;

				   strcpy(temp_word,word[i]);
				   strcpy(word[i], word[j]);
				   strcpy(word[j], temp_word);

				   strcpy(temp_word,detail[i]);
				   strcpy(detail[i], detail[j]);
				   strcpy(detail[j], temp_word);

				}

			}
		
		}	
	
	}

	
}

/*-----------------------------------------------------*/
fprint_repeat(l_fp,l_prn_chr,l_no)
FILE *l_fp;
char l_prn_chr;
int  l_no;
{
   int l_i = 0;

   for (l_i = 0;l_i < l_no;l_i++)
        fputc(l_prn_chr,l_fp);
}

/*-----------------------------------------------------*/
void print_dtl()
{

    total = 0;
	ctr   = 1;

	for(i=1;i<=21;i++)
	{

	 
	   k = i;

	   for (j=0;j<21;j++)
	   {
		
		
	      if (num[j] == ctr)
	      {

						 		
			  if ((j > 0) && (num[j - 1] == num[j]))
			  {
			      total = cou[j - 1] ;
			       str_len = strlen(detail[j - 1])  ;
			  }
			
			  if ((j > 0) && (num[j - 1] == num[j]) > 0)
			  {
			     fprintf(f1,"%*s",(cou[j]   - (total + str_len)),"");
  		         fprintf(f1,"%s", detail[j]);
			  }
			  else
			  {
				fprintf(f1,"%*s", cou[j] - 1, "");
				fprintf(f1,"%s", detail[j]);
			  }
			  

			  k = j ;		   
			  str_len = 0;
			  
	      }

		  

      }
	
	   i = k;
	   
	   if (num[i] > 0)
	   {
	      fprintf(f1,"\n");

		  fprintf(f1,"---------------------------------------------");
		  fprintf(f1,"-----------------------------------");
	
		  if (strcmp(nd_field_type.arr, "L") == 0)
		  {
			fprintf(f1, "-----------------------------------------------------");

		  }

	      fprintf(f1,"\n");
		  total = 0;

	  }

	   ctr = ctr + 1 ;

	}


	if (strcmp(nd_field_type.arr, "P") == 0)
	{
		
		fprintf(f1, "Tests %s\n", "___________");
	}

}


/*-----------------------------------------------------*/

void file_name()
{
     nd_file_name.arr[0]   = '\0';
     nd_file_name.len      = 0;

     
	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 //strcat(nd_user.arr,".lis");
	 
	 strcat(nd_file_name.arr,"rlrwrkfm.lis");
	 nd_file_name.len = strlen(nd_file_name.arr);


	 if ((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var) ;
       proc_exit();
     }
    


}
#undef DEBUG
#undef OERROR
#undef NODATAFOUND
#undef MAX_LINES
#undef VER


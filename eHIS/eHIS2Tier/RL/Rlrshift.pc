/****************************OCS MEDICOM ver 1.0*****************************
*  File	: rlrshift.pc
   Author : C. Dinesh menon
   Date Created  : 10/06/2001
   Last Modified : 10/06/2001

*  Ver 1.10.01
   
*  Purpose : To generate a report for Shift Wise Statistics of Specimens Received 

*  Input Parameters :    
              Command line inputs
	
		      1. Usr_id/Password
              2. Session id
		      3. Program Date
                 Parameters from SY_PROG_PARAM table 
              4. Preferred range of Section Codes.
  
*  Table Accessed : RL_REQUEST_HEADER,RL_TEST_RESULT,
					RL_SECTION_CODE, RL_ONLINE_INSTRUMENT,
					RL_ONLINE_INSTRUMENT_TEST,
					OP_CLINIC, IP_WARD, RL_REFERRAL
		    

*  Output File : rlrshift.lis
 ****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <stdlib.h>
#include <gl.h>

#define REP_WIDTH 78
#define MAX_LINES 50
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 1.10.01\n"
/*
#define DEBUG 
*/

EXEC SQL BEGIN DECLARE SECTION;
/* INPUT PARAMETERS TO MAIN */

	VARCHAR  nd_operating_facility_id [3],
	         uid_pwd		          [91],
		     nd_user_id               [31],
		     nd_session_id            [16],
		     nd_pgm_date	          [20], 
		     nd_user                  [15],
             nd_file_no               [15],
		     nd_file_name		      [150],
			 d_version_no			  [20],
			 d_version  			  [20],
			 l_translated_value		 [100],
			 language_id			[5];




/* Fields from table RL_SECTION_CODE */
	 varchar      d_printer_name            [16];

/* Fields from table SY_ACC_ENTITY*/
	varchar 	d_acc_entity_name        [300],
				//d_acc_entity_name        [61], 
				d_user                   [21],
				d_sysdate                [17];

 /*INPUT PARAMETERS FROM SY_PROG_PARAM TABLE  */
	varchar nd_fm_section_code			[2],
			nd_to_section_code			[2],
	 		nd_fm_date					[11],
			nd_to_date					[11];


/* SQL statement storing in this Variable */
   char sql_stmt	[500] ;

	varchar d_section_code			[2],
			d_section_desc			[41],
			d_prev_section_code		[2],
			d_specimen_date			[11];

int d_request_shift_1 = 0, d_analyzer_shift_1 = 0, d_reported_shift_1 = 0,
	d_request_shift_2 = 0, d_analyzer_shift_2 = 0, d_reported_shift_2 = 0,
	d_request_shift_3 = 0, d_analyzer_shift_3 = 0, d_reported_shift_3 = 0;
int l_count = 0;

int  l_tab_exists ;
int  i;
char local_legend[15][100];


EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>
 
char string_var[100] ;

char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1],
     hdr_line4[REP_WIDTH+1],
     hdr_line5[REP_WIDTH+1];

char rep_title1[] = " Shift Wise Statistics ";
char rep_title2[30];

int line_no = 0;
int page_no = 0 ;

int d_request_1 = 0, d_analyzer_1 = 0, d_reported_1 = 0,
	d_request_2 = 0, d_analyzer_2 = 0, d_reported_2 = 0,
	d_request_3 = 0, d_analyzer_3 = 0, d_reported_3 = 0;

long t_request_1 = 0, t_analyzer_1 = 0, t_reported_1 = 0,
	t_request_2 = 0, t_analyzer_2 = 0, t_reported_2 = 0,
	t_request_3 = 0, t_analyzer_3 = 0, t_reported_3 = 0;


FILE *f1;

void proc_main(argc, argv)
int argc;
char *argv[];
{
    void gen_file_name() ;
    void get_header_dtls() ;

   if(argc < 5) {
     disp_message(ORA_MESG,"Usage rlrshift uid/passwd pgm_date from section code to section code from date to date\n");
     proc_exit();
   }

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   strcpy(nd_operating_facility_id.arr, argv[4]);
   nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr); 

   strcpy(OUTPUT_FILE_NAME, argv[5]);

   strcpy(nd_fm_section_code.arr, argv[6]);
   nd_fm_section_code.len = strlen(nd_fm_section_code.arr); 

   strcpy(nd_to_section_code.arr, argv[7]);
   nd_to_section_code.len = strlen(nd_to_section_code.arr); 

   strcpy(nd_fm_date.arr, argv[8]);
   nd_fm_date.len = strlen(nd_fm_date.arr); 

   strcpy(nd_to_date.arr, argv[9]);
   nd_to_date.len = strlen(nd_to_date.arr); 

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   if(OERROR)
      disp_message(ORA_MESG,"Failed to connect using : \n");

    #ifdef DEBUG
      printf("Connected to ORACLE as user: %s \n", uid_pwd.arr);
    #endif  
    
	set_meduser_role();
    strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';

	get_legend_value(12); 
	get_header_dtls() ;
	gen_file_name(); 

    do_report();

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL COMMIT WORK RELEASE;
	   
	fclose(f1);

	return ;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();
}   


/********************* CHECK PAGE BREAK ************************/
chk_break(nol)
{
   if ((line_no + nol) >= MAX_LINES)
   {
/*     fprintf(f1,"");*/
	 form_hdr();
	 print_column_heading();
	 line_no = 1;
   }
}

/********************* FORM HDR ************************/
form_hdr()
{

    static int first = 1;
    char buf[15];
    int col;

        strcpy(rep_title2," from ");
        strcat(rep_title2, nd_fm_date.arr);
		strcat(rep_title2, " to ");
		strcat(rep_title2, nd_to_date.arr);

    if(first) 
	{
        memset(hdr_line1,' ',REP_WIDTH+1);
        memset(hdr_line2,' ',REP_WIDTH+1);
        memset(hdr_line4,' ',REP_WIDTH+1);
		memset(hdr_line5,'-',REP_WIDTH);
		hdr_line5[REP_WIDTH] = '\0';

        strncpy(hdr_line1,"MDL:RL",6);
        col = (int)(REP_WIDTH - strlen(d_acc_entity_name.arr))/2;
        strncpy(hdr_line1 + col -1,d_acc_entity_name.arr,strlen(d_acc_entity_name.arr));
        col = (REP_WIDTH-strlen(d_sysdate.arr));
		strcpy(hdr_line1+col+1,d_sysdate.arr);
    
        strncpy(hdr_line2,"OPR:",4);
        strcpy(hdr_line2+6,d_user.arr);

    }

    memset(hdr_line3,' ',REP_WIDTH+1);

    strncpy(hdr_line3,"REP:RLRSHIFT",12);
    col = (int)(REP_WIDTH-strlen(rep_title1))/2;
    strncpy(hdr_line3+col,rep_title1,strlen(rep_title1));
    sprintf(buf,"PAGE : %4d",page_no++);
    strcpy(hdr_line3+(REP_WIDTH-strlen(buf)),buf);

    col = (int)(REP_WIDTH-strlen(rep_title2))/2;
    strcpy(hdr_line4+col,rep_title2);

    if(first)
        fprintf(f1,"%s\n",hdr_line1);
    else
        fprintf(f1,"\f%s\n",hdr_line1);

    fprintf(f1,"%s\n",hdr_line2);
    fprintf(f1,"%s\n",hdr_line3);
    fprintf(f1,"%s\n",hdr_line4);
    fprintf(f1,"%s\n",hdr_line5);

    first = 0;
}

/********************* PRINT END OF REPORT ************************/
print_end_of_rep()
{
    int col;
    char buff[REP_WIDTH+1];

    memset(buff,' ',REP_WIDTH+1);
    col = (int)(REP_WIDTH-19)/2;

    strncpy(buff+col,"** END OF REPORT **",19);
    fprintf(f1,"\n%s\n",buff);
}

/************* get_params ***************/
void get_params()
{
	nd_fm_section_code.arr[0] 		= '\0';
	nd_fm_section_code.len			= 0 ;
	nd_to_section_code.arr[0]		= '\0' ;
	nd_to_section_code.len			= 0;
	nd_fm_date.arr[0]				= '\0' ;
	nd_fm_date.len					= 0 ;
	nd_to_date.arr[0]				= '\0' ;
	nd_to_date.len					= 0 ;	

   if(OERROR)
      disp_message(ORA_MESG,"get parameter function using : \n");

   /* read the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT OPERATING_FACILITY_ID,
                   PARAM1,
				   PARAM2,
				   PARAM3,
				   PARAM4
		    INTO 
				:nd_operating_facility_id,
				:nd_fm_section_code ,  
				:nd_to_section_code ,
				:nd_fm_date ,
				:nd_to_date 
         FROM SY_PROG_PARAM
	     WHERE   UPPER(PGM_ID) = 'RLRSHIFT'
		    AND SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND PGM_DATE = :nd_pgm_date;

   
	/*strcpy(first_date.arr,nd_fm_date.arr) ;*/
   if(OERROR)
      disp_message(ORA_MESG,"get_parameter_function2 : \n");
   
  nd_fm_section_code.arr[nd_fm_section_code.len] 		= '\0';
  nd_to_section_code.arr[nd_to_section_code.len]		= '\0';
  nd_fm_date.arr[nd_fm_date.len]						= '\0';
  nd_to_date.arr[nd_to_date.len]						= '\0';

  #ifdef DEBUG
   printf("**********Parameters from SY_PROG_PARAM *******************\n");
   printf(" nd_fm_section_code = %s\n",nd_fm_section_code.arr);
   printf(" nd_to_section_code = %s\n",nd_to_section_code.arr);
   printf(" nd_fm_date = %s\n",nd_fm_date.arr);
   printf(" nd_to_date = %s\n",nd_to_date.arr);
   getchar();  
#endif
  /* delete the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DELETE FROM SY_PROG_PARAM
	   WHERE UPPER(PGM_ID) = 'RLRSHIFT'
	         AND SESSION_ID = TO_NUMBER(:nd_session_id)
		 AND PGM_DATE = :nd_pgm_date;

     return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_params() occured....\n");
   proc_exit();
}

/***************GET_LEGEND_VAUE********************/
get_legend_value(int cou)
 {


	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLRSHIFT.LEGEND_');
	END;
	END-EXEC;




 for (i=1; i<=cou; i++)
	{


	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRSHIFT.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);

	

	}
	

 }
/*************END**************/









/************ GET_HEADER_DETAILS****************/
void get_header_dtls()
{
     d_acc_entity_name.arr[0]   = '\0';
	 d_acc_entity_name.len		= 0;
	 d_user.arr[0]				= '\0';
	 d_user.len                 = 0;
	 d_sysdate.arr[0]			= '\0';
	 d_sysdate.len              = 0;

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   /*
   EXEC SQL SELECT SUBSTR(LPAD(ACC_ENTITY_NAME,
		       TRUNC(15 + 0.5*LENGTH(ACC_ENTITY_NAME))),1,30),
		   USER,
		   TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')
	    INTO :d_acc_entity_name,
		 :d_user,
		 :d_sysdate
            FROM SY_ACC_ENTITY_LANG_VW
			WHERE LANGUAGE_ID = :language_id;
   */

   EXEC SQL SELECT ACC_ENTITY_NAME,
		       USER,
		       TO_CHAR(SYSDATE, 'DD/MM/YYYY')
	    INTO :d_acc_entity_name,
		 :d_user,
		 :d_sysdate
             FROM SY_ACC_ENTITY
             WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			 AND LANGUAGE_ID = :language_id;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';

#ifdef DEBUG
   printf("d_acc_entity_name = %s\n", d_acc_entity_name.arr);
   printf("d_user = %s\n", d_user.arr);
   printf("d_sysdate = %s\n", d_sysdate.arr);
#endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_header_dtls() occured....\n");
   proc_exit();
}

/*************** GENERATE FILE NAME ***************/
void gen_file_name()
{

 	 /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 //strcat(nd_file_name.arr,"rlrshift.lis");
	 strcat(nd_file_name.arr,OUTPUT_FILE_NAME);
	 nd_file_name.len = strlen(nd_file_name.arr);

	 if ((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var) ;
       proc_exit();
     }
}

/*********** PRINT REPORT HEADER **************/
void print_rep_header()
{
  char nd_fm_section_desc[10],
       nd_to_section_desc[10];

  if(strcmp(nd_fm_section_code.arr, "!") == 0)
    strcpy(nd_fm_section_desc, "LOWEST");
    else strcpy(nd_fm_section_desc, nd_fm_section_code.arr);

  if(strcmp(nd_to_section_code.arr, "~") == 0)
    strcpy(nd_to_section_desc, "HIGHEST");
    else strcpy(nd_to_section_desc, nd_to_section_code.arr);

  #ifdef DEBUG
      printf("before report header()\n");
  #endif

  form_hdr();

  #ifdef DEBUG
      printf("after page header()\n");
  #endif
/*  page_no++ ;*/

  get_version_no();   ///// added 01.07.2003

////////// 01.07.2003  fprintf(f1,VER);

  fprintf(f1,"%s\n",d_version.arr);

  fprintf(f1,"\n\n\n\n");
  fprintf(f1,"        ");
  fprintf(f1,"%s\n",local_legend[2]);
  fprintf(f1,"        ");
  fprintf(f1,"------------------\n\n");
  fprintf(f1,"                ");
  fprintf(f1,"%-40.40s : %s\n", local_legend[3],nd_fm_section_desc);
  fprintf(f1,"                ");
  fprintf(f1,"%-40.40s : %s\n",local_legend[4], nd_to_section_desc);
  fprintf(f1,"\n");
/*  fprintf(f1,""); */
}

/***************PRINT  COLUMN HEADING *************/
print_column_heading()
{
 //fprintf(f1,"%4.4s         	        %5.5s 1                               %5.5s 2                           %5.5s 3\n");
 fprintf(f1,"%4.4s             %5.5s 1              %5.5s 2             %5.5s 3\n",local_legend[5],local_legend[6],local_legend[6],local_legend[6]);
 fprintf(f1,"------------------------------------------------------------------------------------------------------------------------------------\n");
 //fprintf(f1,"              <----- No. of Requests ----->        <----- No. of Requests ----->     <----- No. of Requests ----->\n");
 fprintf(f1,"              <- %10.10s->     <- %10.10s->     <- %10.10s->\n",local_legend[7],local_legend[7],local_legend[7]);
 //fprintf(f1,"              Booked   Analysers  Reported          Booked    Analysers Reported       Booked    Analysers  Reported\n");
 fprintf(f1,"              %15.15s     %15.15s     %15.15s\n",local_legend[8],local_legend[8],local_legend[8]);
 fprintf(f1,"------------------------------------------------------------------------------------------------------------------------------------\n");

 line_no += 5;
}

/********* DECLARE SHIFT CURSOR **********/
 dclr_shift_cursor()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL DECLARE shift_cursor CURSOR FOR
			SELECT section_code, TO_CHAR(specimen_date, 'DD/MM/YYYY'),
					NVL(request_shift_1, 0), NVL(analyzer_shift_1, 0), NVL(reported_shift_1, 0),
					NVL(request_shift_2, 0), NVL(analyzer_shift_2, 0), NVL(reported_shift_2, 0),
					NVL(request_shift_3, 0), NVL(analyzer_shift_3, 0), NVL(reported_shift_3, 0)
			FROM RL_SHIFT_WISE_STATISTICS
			WHERE specimen_date > TO_DATE(:nd_fm_date, 'DD/MM/YYYY') - 1
			AND specimen_date < TO_DATE(:nd_to_date, 'DD/MM/YYYY') + 1
			AND section_code BETWEEN NVL(:nd_fm_section_code, '!')
				AND NVL(:nd_to_section_code, '~')
		    AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			ORDER BY section_code, specimen_date;


	EXEC SQL OPEN shift_cursor;

#ifdef DEBUG
    printf("leaving dclr_shift_cursor_cur()\n");
    fflush(stdout);
#endif
  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_shift_cursor_cur() occured....\n");
   proc_exit();	
  }

/*********** FETCH SHIFT CURSOR **********/
int fetch_shift_cursor()
{

	d_specimen_date.arr[0]		= '\0';
	d_section_code.arr[0]		= '\0';

	d_specimen_date.len			= 0;
	d_section_code.len			= 0;

	d_request_shift_1 = 0;
	d_analyzer_shift_1 = 0;
	d_reported_shift_1 = 0;
	d_request_shift_2 = 0;
	d_analyzer_shift_2 = 0;
	d_reported_shift_2 = 0;
	d_request_shift_3 = 0;
	d_analyzer_shift_3 = 0;
	d_reported_shift_3 = 0;

    EXEC SQL FETCH shift_cursor
              INTO :d_section_code,:d_specimen_date,
				   :d_request_shift_1, :d_analyzer_shift_1, 
				   :d_reported_shift_1, 
				   :d_request_shift_2, :d_analyzer_shift_2, 
				   :d_reported_shift_2, 
				   :d_request_shift_3, :d_analyzer_shift_3, 
				   :d_reported_shift_3; 

	if (OERROR)
        err_mesg(ORA_MESG,"FETCH failed on cursor RL_SHIFT_WISE_STATISTICS");

	if (NO_DATA_FOUND)
		return 0;

	d_specimen_date.arr[d_specimen_date.len]		= '\0';
	d_section_code.arr[d_section_code.len]			= '\0';

	return 1;
}

close_shift_cursor()
{

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL CLOSE shift_cursor;

	return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_shift_cursor_cur() occured....\n");
   proc_exit();	

}

/********************* DO REPORT ************************/
do_report()
{
	
   char first_time = 'Y';
      
   d_prev_section_code.arr[0]	= '\0';
   d_prev_section_code.len		= 0;

   page_no = 1;
   line_no = 1;

   print_rep_header();
   line_no = 59;
   chk_break(1);

    d_request_1 = 0;
	d_request_2 = 0; 
	d_request_3 = 0; 
	d_analyzer_1 = 0;
	d_analyzer_2 = 0;
	d_analyzer_3 = 0;
	d_reported_2 = 0;
	d_reported_1 = 0;
	d_reported_3 = 0;

	t_request_1 = 0;
	t_analyzer_1 = 0;
	t_reported_1 = 0;
	t_request_2 = 0;
	t_analyzer_2 = 0;
	t_reported_2 = 0;
	t_request_3 = 0;
	t_analyzer_3 = 0;
	t_reported_3 = 0;

      
   dclr_shift_cursor();
   
   while(fetch_shift_cursor())
   {


	   if (strcmp(d_prev_section_code.arr, d_section_code.arr) != 0)
	   {

		   strcpy(d_prev_section_code.arr, d_section_code.arr);
		   d_prev_section_code.len = strlen(d_prev_section_code.arr);
		   
		   if (first_time == 'N')
		   {
			   print_total();
			   
			}

		   get_section_desc();
		   print_dept_dtl();
		   first_time = 'N';
	   }

	   print_dtl();

   		d_request_1 = d_request_1 + d_request_shift_1;
		d_analyzer_1 = d_analyzer_1 + d_analyzer_shift_1;
		d_reported_1 = d_reported_1 + d_reported_shift_1;
		d_request_2 = d_request_2 + d_request_shift_2;
		d_analyzer_2 = d_analyzer_2 + d_analyzer_shift_2;
		d_reported_2 = d_reported_2 + d_reported_shift_2;
		d_request_3 = d_request_3 + d_request_shift_3;
		d_analyzer_3 = d_analyzer_3 + d_analyzer_shift_3;
		d_reported_3 = d_reported_3 + d_reported_shift_3;

   		t_request_1 = t_request_1 + d_request_shift_1;
		t_analyzer_1 = t_analyzer_1 + d_analyzer_shift_1;
		t_reported_1 = t_reported_1 + d_reported_shift_1;
		t_request_2 = t_request_2 + d_request_shift_2;
		t_analyzer_2 = t_analyzer_2 + d_analyzer_shift_2;
		t_reported_2 = t_reported_2 + d_reported_shift_2;
		t_request_3 = t_request_3 + d_request_shift_3;
		t_analyzer_3 = t_analyzer_3 + d_analyzer_shift_3;
		t_reported_3 = t_reported_3 + d_reported_shift_3;


   }

   print_total();

   print_grand_total();

   close_shift_cursor();


}

/************** PRINT DEPARTMENT COLUMN HEADING ***************/
print_dept_dtl()
{
	chk_break(1);
	fprintf(f1,"%10.10s : %-40s\n",local_legend[9],d_section_desc.arr);
	fprintf(f1,"-----------------------------------\n");
    line_no += 2 ;
 
}

get_section_desc()
{
	d_section_desc.arr[0]	= '\0';
	d_section_desc.len		= 0;

	EXEC SQL SELECT long_name 
			 INTO :d_section_desc
			 FROM RL_SECTION_CODE_LANG_VW
			 WHERE section_code = :d_section_code
			 AND   language_id = :language_id;

	d_section_desc.arr[d_section_desc.len]		= '\0';

}

print_total()
{
	chk_break(3);

/****
	sprintf(string_var, "%s  %s  %d  %d   %d", 
				d_specimen_date.arr, d_section_code.arr, 
					d_request_1, d_analyzer_1, d_reported_1);
	disp_message(ERR_MESG, string_var);
*****/
/*
	fprintf(f1,"                --------------------------------------------------------------------------------------------------------------------\n");
	fprintf(f1,"%5.5s    ",local_legend[10]);
	fprintf(f1,"      %4d        %4d      %4d",
			d_request_1, d_analyzer_1, d_reported_1);
	fprintf(f1,"            %4d         %4d     %4d",
			d_request_2, d_analyzer_2, d_reported_2);
	fprintf(f1,"         %4d         %4d      %4d\n",
			d_request_3, d_analyzer_3, d_reported_3);				       
	fprintf(f1,"                --------------------------------------------------------------------------------------------------------------------\n");
*/
	
	fprintf(f1,"            --------------------------------------------------------------------------------------------------------------------\n");
	fprintf(f1,"%5.5s        ",local_legend[10]);
	fprintf(f1,"%4d  %4d  %4d",
			d_request_1, d_analyzer_1, d_reported_1);
	fprintf(f1,"    %4d  %4d  %4d",
			d_request_2, d_analyzer_2, d_reported_2);
	fprintf(f1,"    %4d  %4d  %4d\n",
			d_request_3, d_analyzer_3, d_reported_3);				       
	fprintf(f1,"            --------------------------------------------------------------------------------------------------------------------\n");

	line_no += 3;

	d_request_1 = 0;
	d_analyzer_1 = 0;
	d_reported_1 = 0;
	d_request_2 = 0;
	d_analyzer_2 = 0;
	d_reported_2 = 0;
	d_request_3 = 0;
	d_analyzer_3 = 0;
	d_reported_3 = 0;

}


print_grand_total()
{
	chk_break(5);

	fprintf(f1, "\n\n");

/*
	fprintf(f1,"                --------------------------------------------------------------------------------------------------------------------\n");
	fprintf(f1,"Grand Total");
	fprintf(f1,"   %6ld      %6ld    %6ld",
			t_request_1, t_analyzer_1, t_reported_1);
	fprintf(f1,"          %6ld       %6ld   %6ld",
			t_request_2, t_analyzer_2, t_reported_2);
	fprintf(f1,"       %6ld       %6ld    %6d\n",
			t_request_3, t_analyzer_3, t_reported_3);				       
	fprintf(f1,"                --------------------------------------------------------------------------------------------------------------------\n");
*/

	fprintf(f1,"            --------------------------------------------------------------------------------------------------------------------\n");
	fprintf(f1,"%11.11s",local_legend[11]);
	fprintf(f1,"%6ld%6ld%6ld",
			t_request_1, t_analyzer_1, t_reported_1);
	fprintf(f1,"  %6ld%6ld%6ld",
			t_request_2, t_analyzer_2, t_reported_2);
	fprintf(f1,"  %6ld%6ld%6d\n",
			t_request_3, t_analyzer_3, t_reported_3);				       
	fprintf(f1,"            --------------------------------------------------------------------------------------------------------------------\n");

	line_no += 3;

	t_request_1 = 0;
	t_analyzer_1 = 0;
	t_reported_1 = 0;
	t_request_2 = 0;
	t_analyzer_2 = 0;
	t_reported_2 = 0;
	t_request_3 = 0;
	t_analyzer_3 = 0;
	t_reported_3 = 0;

}

print_dtl()
{

	chk_break(1);
/*
	fprintf(f1, "%-10s      %4d        %4d      %4d",
			d_specimen_date.arr, d_request_shift_1, 
			d_analyzer_shift_1, d_reported_shift_1);
	fprintf(f1,"            %4d         %4d     %4d",
			d_request_shift_2, d_analyzer_shift_2, d_reported_shift_2);
	fprintf(f1,"         %4d         %4d      %4d\n",
			d_request_shift_3, d_analyzer_shift_3, d_reported_shift_3);				       
*/
	fprintf(f1, "%-10s   %4d  %4d  %4d",
			d_specimen_date.arr, d_request_shift_1, 
			d_analyzer_shift_1, d_reported_shift_1);
	fprintf(f1, "    %4d  %4d  %4d",
			d_request_shift_2, d_analyzer_shift_2, d_reported_shift_2);
	fprintf(f1, "    %4d  %4d  %4d\n",
			d_request_shift_3, d_analyzer_shift_3, d_reported_shift_3);				       

	line_no++;


}

////////////////// 

get_version_no()
{

////////    This function is used to get the version number of the product.
///////      Added by Srinivas on 1 July 2003

     d_version_no.arr[0] = '\0';
     d_version_no.len    =  0;

     strcpy(d_version.arr,"VER : ");

	 EXEC SQL EXECUTE 
	      begin
			if SM_INSTALLATION_TAB_CHECK THEN
			   :l_tab_exists := 1;
			else
			   :l_tab_exists := 0;
			end if;
		  end;
	 END-EXEC;


    if (l_tab_exists) 
    {
	    EXEC SQL SELECT VERSION_NO INTO :d_version_no 
                 FROM   SM_INSTALLATION; 
        d_version_no.arr[d_version_no.len] = '\0';
    }
    else
	    strcpy(d_version_no.arr,"2.1");

	    strcat(d_version.arr,d_version_no.arr);


    if (OERROR)
	{
	    strcpy(d_version_no.arr,"2.1");
	    strcat(d_version.arr,d_version_no.arr);
    }

}
//////////// UPTO HERE   




#undef DEBUG
#undef OERROR
#undef NODATAFOUND
#undef MAX_LINES
#undef VER



/*
  Author			: Srikanth A
  Creation Date		: 28/07/2004

  Purpose			:	To get the cost revenue details for 
						Refered out test.
*/
#include <stdio.h>         
#include <string.h> 
#include <stdlib.h>     
#include <rl.h>         
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define MAX_LINES 55
#define REP_WIDTH 80

EXEC SQL BEGIN DECLARE SECTION; 


 VARCHAR     hosp_name          [120],
			 comp_name			[500],
			 sql_stmt			[5000],
			 oper_id			[31],
			 rep_date			[20],
			 rep_date1			[20],
	         lab_name			[16],	
			 er_msg				[200],
			 test_name			[11],	
			 tst_code			[10],
			 ref_lcode			[4],
		     old_lab_code		[5],	
		     old_tst_code		[5],
			 date				[20],
			 date1				[20], //added for globalisation
             date_time			[20],
             date_time1			[20], //added for globalisation
             user_id			[91],
	         nd_pwd				[91],
             nd_session_id      [16],           		   
		     nd_file_name		[100],
             d_curr_pgm_name    [15],
			 nd_facility	    [3],
		     nd_fm_date         [18],
		     nd_to_date 	    [18],
		     nd_ref_code		[5],
			 fcy_code	        [5],
			 cur_date		    [13],
		     d_patient_id	    [21],
			 nd_patient_id      [21],
			 d_customer_code    [21],
		     patient_name		[61],
			 d_specimen_no		[21],
			 d_spec_regd_date   [11],   
			 d_spec_regd_date1   [11],   
			 d_sent_date		[11],
			 d_sent_date1		[11],
			 d_recd_date		[11],
			 d_recd_date1		[11],
			 p_facility_id      [3],            	
			 p_patient_id       [21],           	
			 p_episode_type     [2],
			 nd_episode_type    [2],
			 p_module_id        [3],         			 	     
			 p_test_code        [11],       
			 p_charged_yn		[2],		 		 		 
			 p_status           [2],      
			 p_err_code         [3],      
			 p_sys_message_id   [9],          
			 p_error_text       [200];      

	/***************added for globalisation*************************/
	varchar		l_translated_value		 [500],
	language_id			[5];

	int i;
	/***************added for globalisation*************************/
		  	
int cnt_test_code=0, tot_code=0,grd_tot_code=0,er_msg_type=0;
int p_visit_id, p_regn_line_num, p_episode_id;

double calc_lcy_tot = 0.0, calc_fcy_tot = 0.0, lcy_tot  = 0.0, fcy_tot  = 0.0;
double grd_fcy_tot  = 0.0, grd_lcy_tot  = 0.0, lcy_rate = 0.0, fcy_rate = 0.0;
double p_charged_gross_amt = 0.0,p_charged_disc_amt = 0.0,p_charged_net_amt = 0.0;

EXEC SQL END DECLARE SECTION; 

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int	 lctr=0, d_first=1;
int	 line_no		= 0;
int	 page_no		= 1;
int	 i				= 0;
int  new_page       = 1;
int	 ref_head		= 0;

char string_var	[200];
char rep_title2[30];
char tmpbuf[1000];

char local_legend[35][500];//added for globalisation

char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1],
     hdr_line4[REP_WIDTH+1],
     hdr_line5[REP_WIDTH+1],
	 hdr_line6[REP_WIDTH+1];

//char rep_title1[] = "Referred Out Test Revenue Report";
char rep_title1[40]; //added for globalisation

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{		

	if (argc < 9)
	 {	      	      
		  disp_message(ERR_MESG,"Usage rlrcostr <uid/passwd> <session_id> <pgm date> <facility> <output filename> <ref_lab_code> <from date> <to date> ");
	      proc_exit();	
       }


    nd_fm_date.arr[0]			= '\0';
    nd_to_date.arr[0]			= '\0';
    nd_ref_code.arr[0]			= '\0';
	    		
    nd_fm_date.len			= 0;
    nd_to_date.len			= 0;
    nd_ref_code.len			= 0;

	strcpy(nd_pwd.arr,argv[1]);
	nd_pwd.len = strlen(nd_pwd.arr);

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
 
	EXEC sql connect :nd_pwd; 

    if (sqlca.sqlcode < 0 )
      {
         disp_message(ERR_MESG,"Error in connecting to Oracle");
         proc_exit();
      }
        	
    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
 
	/* ARGV[3] IS PGM DATE WHICH IS NOT REQUIRED */
	   
    strcpy(nd_facility.arr,argv[4]);
    nd_facility.len = strlen(nd_facility.arr);

	strcpy(OUTPUT_FILE_NAME, argv[5]);
		    
	strcpy(nd_ref_code.arr,argv[6]);
    nd_ref_code.len = strlen(nd_ref_code.arr);

	if (nd_ref_code.arr[0] == '!')
	 {       
	   nd_ref_code.arr[1] = '\0';
	   nd_ref_code.len  = strlen(nd_ref_code.arr);
	 }

	if (nd_fm_date.len == 0)
	 {
       nd_fm_date.arr[0] = '!';
	   nd_fm_date.arr[1] = '\0';
	 }

	if (nd_to_date.len == 0)
	 {
       nd_to_date.arr[0] = '!';
	   nd_to_date.arr[1] = '\0';
	 }

	strcpy(nd_fm_date.arr,argv[7]);
    nd_fm_date.len = strlen(nd_fm_date.arr);

	strcpy(nd_to_date.arr,argv[8]);
    nd_to_date.len = strlen(nd_to_date.arr);
	
	
	strcpy(old_lab_code.arr,"!!!!");
	old_lab_code.len  = strlen(old_lab_code.arr);

	strcpy(old_tst_code.arr,"!!!!");
	old_tst_code.len  = strlen(old_tst_code.arr);

	set_meduser_role();    
/*********************** added for globalisation ******************************/
    strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
/*********************** added for globalisation ******************************/
	get_legend_value(33); //added for globalisation

    gen_file_name();

	fetch_hosp_name();

    declare_cur();
    
    open_cur_val();

    print_hdr();

    end_of_rep();

	fclose(fp);
	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
    sprintf(string_var,"%s \n",sqlca.sqlerrm.sqlerrmc);
    disp_message(ERR_MESG,string_var);
    EXEC SQL COMMIT WORK RELEASE;

}

 declare_cur()
{

	sql_stmt.arr[0] = '\0';
	sql_stmt.len    = 0;

	if (nd_ref_code.arr[0] == '!')	
	   {			
		
		  EXEC SQL DECLARE VAL_CUR CURSOR FOR	
		     SELECT TO_CHAR(A.SPECIMEN_NO), A.TEST_CODE, 
			 A.REFERRED_LAB_CODE,
			 // DECODE(B.episode_type, 'R', NVL(B.customer_code, B.patient_id), NVL(B.patient_id,'')),
			 NVL(B.patient_id,''),
			 NVL(B.customer_code, ''),
			 TO_CHAR(A.SENT_DATE,'DD/MM/YYYY'),
			 NVL(TO_CHAR(A.RECD_DATE,'DD/MM/YYYY'),''),TO_CHAR(B.SPEC_REGD_DATE_TIME,'DD/MM/YYYY')
		     FROM RL_REFERRED_SPECIMENS A, RL_REQUEST_HEADER B 
		     WHERE A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID AND 
		     A.SPECIMEN_NO = B.SPECIMEN_NO 		     
			 AND A.OPERATING_FACILITY_ID = :nd_facility    	
		     AND B.SPEC_REGD_DATE_TIME >= TO_DATE(:nd_fm_date, 'DD/MM/YYYYhh24:mi:ss')
		     AND B.SPEC_REGD_DATE_TIME < TO_DATE(:nd_to_date, 'DD/MM/YYYYhh24:mi:ss')		     			 			 		
		     AND A.SENT_DATE IS NOT NULL  
		     AND A.REFERRED_LAB_CODE IS NOT NULL 
		     AND NVL(A.PROCESS_IN_HOUSE_YN,'N') <> 'Y'
			 AND NVL(A.CANCELLED_YN,'N') <> 'Y'
             ORDER BY A.REFERRED_LAB_CODE,A.TEST_CODE; 
 
			if (OERROR)
			  {	
					disp_message(ERR_MESG,"Declare Cursor failed in RLRCOSTR");
					fprintf(fp,"Error in declaring cursor VAL_CUR");						
		      }
	    }
     else
	    {
	   	
			 EXEC SQL DECLARE REF_LAB_VAL_CUR CURSOR FOR	
		     SELECT TO_CHAR(A.SPECIMEN_NO), A.TEST_CODE, 
			 A.REFERRED_LAB_CODE,
			 // DECODE(B.episode_type, 'R', NVL(B.customer_code, B.patient_id), NVL(B.patient_id,'')),
			 NVL(B.patient_id,''),
			 NVL(B.customer_code, ''),
			 TO_CHAR(A.SENT_DATE,'DD/MM/YYYY'),
			 NVL(TO_CHAR(A.RECD_DATE,'DD/MM/YYYY'),''),TO_CHAR(B.SPEC_REGD_DATE_TIME,'DD/MM/YYYY')
		     FROM RL_REFERRED_SPECIMENS A, RL_REQUEST_HEADER B 
		     WHERE A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID AND 
		     A.SPECIMEN_NO = B.SPECIMEN_NO 		     
			 AND A.OPERATING_FACILITY_ID = :nd_facility    	
			 AND A.REFERRED_LAB_CODE = :nd_ref_code
		     AND B.SPEC_REGD_DATE_TIME >= TO_DATE(:nd_fm_date, 'DD/MM/YYYYhh24:mi:ss')
		     AND B.SPEC_REGD_DATE_TIME < TO_DATE(:nd_to_date, 'DD/MM/YYYYhh24:mi:ss')		     			 			 			 			 
		     AND A.SENT_DATE IS NOT NULL  
		     AND A.REFERRED_LAB_CODE IS NOT NULL 
		     AND NVL(A.PROCESS_IN_HOUSE_YN,'N') <> 'Y'
			 AND NVL(A.CANCELLED_YN,'N') <> 'Y'
             ORDER BY A.REFERRED_LAB_CODE,A.TEST_CODE; 
			 
			if (OERROR)
			  {	
					disp_message(ERR_MESG,"Declare Cursor failed in RLRCOSTR");
					fprintf(fp,"Error in declaring cursor REF_LAB_VAL_CUR");						
		      }
	
	    }

}

 fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    date.arr[0]		 = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    date.len		 = 0;
    user_id.len      = 0;

	 EXEC SQL SELECT ACCOUNTING_NAME, 
			TO_CHAR(SYSDATE,'DD/MM/RRRR'),
			TO_CHAR(SYSDATE,'HH24:MI:SS'),   
            USER
       INTO :hosp_name, 
			:date,
			:date_time, 
			:user_id
            FROM SY_ACC_ENTITY_lang_vw
            WHERE ACC_ENTITY_ID = :nd_facility
			and language_id = :language_id; 

    if (OERROR)
	{
		disp_message(ERR_MESG,"SELECT failed on table SY_ACC_ENTITY");
		return 0;
    }

    hosp_name.arr[hosp_name.len]           = '\0';
    date_time.arr[date_time.len]           = '\0';
    date.arr[date.len]					   = '\0';
    user_id.arr[user_id.len]               = '\0';

	return 1;
}


 open_cur_val() 
{

	if (nd_ref_code.arr[0] == '!')	
	   {			
		 EXEC SQL OPEN VAL_CUR;

		  if (OERROR)
			{	
				disp_message(ERR_MESG,"Open failed on cursor VAL_CUR");
				return 0;
		    }
	   }
    else
	   {
		 EXEC SQL OPEN REF_LAB_VAL_CUR; 

			if (OERROR)
			{	
	 			disp_message(ERR_MESG,"Open failed on cursor REF_LAB_VAL_CUR");
				return 0;
			}
	  }
	return 1;
}

print_hdr()
{
    unsigned int status;
	char space[4],print_patient[100];

	strcpy(space,"   ");
	space[4] = '\0';

	print_head();			
    while (fetch_dtl())
    {					  	   
       if (d_first == 1)
		{		  	        
			status = fetch_lab_desc();
			if (status == 0)
			 {
			    disp_message(ERR_MESG,"problem fetching lab_desc");
				continue;
		     }
			 
	       /* print the referral lab desc */
	          print_lab();

	       /* get the test details */
               status = fetch_test_desc();
               if (status == 0)
				 continue;

			/* get the ccy, rate details */   
               status = fetch_ccy_details();
               if (status == 0)
				 continue;
			
			/* get the revenue details */
			   status = get_rev_details(); 
			   if (status == 0)
				   continue;	

		   /* get the patient name from the patient id */
			  fetch_patient_desc();

			EXEC SQL SELECT ROUND(:lcy_rate,2) ,ROUND(:fcy_rate,2) 
				INTO :lcy_rate, :fcy_rate
				FROM DUAL; 

		if (OERROR)
		{
		  sprintf(string_var,"%s \n",sqlca.sqlerrm.sqlerrmc);
		  disp_message(ERR_MESG,string_var);
        }

		memset (&print_patient, ' ', 99);
		print_patient[99] = '\0';

		sprintf(print_patient,"%s / %s",d_patient_id.arr,patient_name.arr);	


		fprintf(fp,"%-100s \n",print_patient);
		lctr=lctr+1;   			 
								
		fprintf(fp,"%-15s %-11s %7.2f %12s %9.2f %16.2f \n",
				 d_specimen_no.arr,tst_code.arr,lcy_rate,fcy_code.arr, fcy_rate, p_charged_net_amt);
		
		lctr=lctr+1;   			 		

		fprintf(fp,"%-15s %-12s %-10s \n \n",
				 d_spec_regd_date1.arr, d_sent_date1.arr,d_recd_date1.arr);
		lctr=lctr+3;   			 

/*
 		 fprintf(fp,"%-16s %-8s %-8s %-8s %-11s %8.2f %-6s %9.2f %9.2f \n",
				 d_specimen_no.arr,d_spec_regd_date.arr, d_sent_date.arr,d_recd_date.arr,
				tst_code.arr,lcy_rate,fcy_code.arr, fcy_rate, fcy_rate);
		 lctr=lctr+1;   			 

		 fprintf(fp,"%-22s \n",d_patient_id.arr);
		 lctr=lctr+1;   			 

		 fprintf(fp,"\n%-22s \n",patient_name.arr);
		 lctr=lctr+3;   			 

*/
		 /* compute total count, total lcy, total fcy and cumulate grand lcy, fcy 

		 tot_code += cnt_test_code;
		 lcy_tot += calc_lcy_tot;
		 fcy_tot += calc_fcy_tot;
		 grd_lcy_tot += calc_lcy_tot;
		 grd_fcy_tot += calc_fcy_tot;	
		 grd_tot_code += cnt_test_code;
		 */
			
         /* copy the contents of referral lab to old_var here, for first time old_ref keeps changing for unique referral */

		 strcpy(old_lab_code.arr,ref_lcode.arr);
		 old_lab_code.len=strlen(old_lab_code.arr);

		 strcpy(old_tst_code.arr,tst_code.arr);
		 old_tst_code.len=strlen(old_tst_code.arr);

	     /* reset the flag of d_first here */
         d_first = 0;
	   }
    
	if (strcmp(old_lab_code.arr, ref_lcode.arr) != 0)
	   {		  	   
           /* print total here by calling print_total() */

	       /* print_total(); */  

	       lctr=lctr+2;   	
           check_page_end(4,0);
	       
	       /* print each of the test details here */

			status = fetch_lab_desc();
			if (status == 0)
			{
				continue;
			}

	       /* print the referral lab desc */
			  print_lab();

	       /* get the test details */
           status = fetch_test_desc();
	       if (status == 0)
			 continue;

		   /* get the ccy, rate details */
           status = fetch_ccy_details();
		   if (status == 0)
			 continue;

			/* get the revenue details */
			status = get_rev_details(); 
		    if (status == 0)
			  continue;	

		   /* get the patient name from the patient id */
			  fetch_patient_desc();
		 
		 EXEC SQL SELECT ROUND(:lcy_rate,2) , ROUND(:fcy_rate,2)
				INTO :lcy_rate , :fcy_rate
				FROM DUAL; 

		memset (&print_patient, ' ', 99);
		print_patient[99] = '\0';

		sprintf(print_patient,"%s / %s",d_patient_id.arr,patient_name.arr);		

		fprintf(fp,"%-100s \n",print_patient);
		lctr=lctr+1;   			 

		fprintf(fp,"%-15s %-11s %7.2f %12s %9.2f %16.2f \n",
				 d_specimen_no.arr,tst_code.arr,lcy_rate,fcy_code.arr, fcy_rate, p_charged_net_amt);
		lctr=lctr+1;   			 		

		fprintf(fp,"%-10s %-10s %-10s \n \n",
				 d_spec_regd_date1.arr, d_sent_date1.arr,d_recd_date1.arr);
		lctr=lctr+3;   			 

		check_page_end(4,0);

        /* copy the contents of referral lab to old_var here, for first time old_ref keeps changing for unique referral */
		strcpy(old_lab_code.arr,ref_lcode.arr);
		old_lab_code.len=strlen(old_lab_code.arr);      
		strcpy(old_tst_code.arr,tst_code.arr);
		old_tst_code.len=strlen(old_tst_code.arr);      
	   }
	  else
	   {
		 if (strcmp(old_tst_code.arr, tst_code.arr) != 0)
		  {	
			 
           /* This is same lab code, but different test code */  

			/* get the test details */
            status = fetch_test_desc();
			if (status == 0)
			   continue;
			 
		   /* get the ccy, rate details */
            status = fetch_ccy_details();
			if (status == 0)
			   continue;
			
			/* get the revenue details */
			   status = get_rev_details(); 
			   if (status == 0)
			     continue;	

		   /* get the patient name from the patient id */
			  fetch_patient_desc();

		   EXEC SQL SELECT ROUND(:lcy_rate,2), ROUND(:fcy_rate,2)
				   INTO :lcy_rate, :fcy_rate
				   FROM DUAL; 

		   memset (&print_patient, ' ', 99); 
		   print_patient[99] = '\0';

		   sprintf(print_patient,"%s / %s",d_patient_id.arr,patient_name.arr);

		   fprintf(fp,"%-100s \n",print_patient);
		   lctr = lctr+1;   			 

		   fprintf(fp,"%-15s %-11s %7.2f %12s %9.2f %16.2f \n",
				 d_specimen_no.arr,tst_code.arr,lcy_rate,fcy_code.arr, fcy_rate, p_charged_net_amt);
		   lctr = lctr+1;   			 		

		   fprintf(fp,"%-15s %-12s %-10s \n \n",
				 d_spec_regd_date1.arr, d_sent_date1.arr,d_recd_date1.arr);
		   lctr=lctr+3;   			 
		
		   check_page_end(4,0);

		  }	
	   }
    }
    if (d_first == 0)
    {
	/* print_total(); */
	lctr=lctr+1;   	
	check_page_end(4,0);
	/* print_grand_total(); */
    }

    close_dtl();
}

/*
print_total()
{
	char space[4],loc_legend1[9],loc_legend3[5],loc_legend4[5],loc_legend5[5];

    strcpy(loc_legend1,"        ");
    loc_legend1[9]='\0';

	strcpy(loc_legend3,"    ");
    loc_legend1[5]='\0';

	strcpy(loc_legend4,"    ");
    loc_legend1[5]='\0';

	strcpy(loc_legend5,"    ");
    loc_legend1[5]='\0';


	strcpy(space,"   ");
	space[4] = '\0';

	check_page_end(3,0);
	fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");

//	fprintf(fp,"TOTAL%16d%34.2f%40.2f \n",tot_code,lcy_tot,fcy_tot);
	fprintf(fp,"%-5.5s%16d%34.2f%40.2f \n",local_legend[2], tot_code,lcy_tot,fcy_tot); //added for globalisation

	
	
	fprintf(fp,"\n");
	fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
	tot_code=0;
	lcy_tot = 0.0;
	fcy_tot = 0.0;
	lctr=lctr+3; 	
}   
*/

/*
print_grand_total()
{
	char space[4],loc_legend1[9],loc_legend3[5],loc_legend4[5],loc_legend5[5];

    strcpy(loc_legend1,"        ");
    loc_legend1[9]='\0';

	strcpy(loc_legend3,"    ");
    loc_legend1[5]='\0';

	strcpy(loc_legend4,"    ");
    loc_legend1[5]='\0';

	strcpy(loc_legend5,"    ");
    loc_legend1[5]='\0';


	strcpy(space,"   ");
	space[4] = '\0';

        check_page_end(5,0);
	fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
//	fprintf(fp,"GRAND TOTAL%10d%34.2f%40.2f \n",grd_tot_code,grd_lcy_tot,grd_fcy_tot);
	fprintf(fp,"%-11.11s%10d%34.2f%40.2f \n",local_legend[3], grd_tot_code,grd_lcy_tot,grd_fcy_tot);
	fprintf(fp,"\n");
	fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
}   
*/

 end_of_rep()
{
	check_page_end(3,0);
	fprintf(fp,"\n\n %15s   ***  END OF REPORT ***\n\f"," ");
	fflush(fp);
}

print_head()
{
	char loc_legend1[41];
	char loc_legend2[41];
	char loc_legend3[41];
	char loc_legend4[41];
	char loc_legend5[41];
	char loc_legend6[41];
	char loc_legend7[41];
	char loc_legend8[41];
	char loc_legend9[41];
	char loc_legend10[41];
	char loc_legend11[41];
	char loc_legend12[41];

	print_page_title();

	if (ref_head)
	   { 
			print_lab();
			ref_head = 0;
	   }

//	strcpy(loc_legend1,"Specimen No.");
	strcpy(loc_legend1, local_legend[4]); //added for globalisation
	loc_legend1[12] = '\0';

//	strcpy(loc_legend2,"Spec Dt");
	strcpy(loc_legend2, local_legend[5]); //added for globalisation
	loc_legend2[7] = '\0';

//	strcpy(loc_legend3,"Ship Dt");
	strcpy(loc_legend3, local_legend[6]); //added for globalisation
	loc_legend3[7] = '\0';

//	strcpy(loc_legend4,"Result Dt");
	strcpy(loc_legend4, local_legend[7]); //added for globalisation
	loc_legend4[9] = '\0';

//	strcpy(loc_legend5,"Test");
	strcpy(loc_legend5, local_legend[8]); //added for globalisation
	loc_legend5[4] = '\0';

//	strcpy(loc_legend6,"Cost");
	strcpy(loc_legend6, local_legend[9]); //added for globalisation
	loc_legend6[4] = '\0';

//	strcpy(loc_legend7,"FCY");
	strcpy(loc_legend7, local_legend[10]); //added for globalisation
	loc_legend7[3] = '\0';

//	strcpy(loc_legend8,"Cost");
	strcpy(loc_legend8, local_legend[9]); //added for globalisation
	loc_legend8[4] = '\0';

//	strcpy(loc_legend9,"Revenue");
	strcpy(loc_legend9, local_legend[11]); //added for globalisation
	loc_legend9[7] = '\0';

//	strcpy(loc_legend10,"Patient ID");  
	strcpy(loc_legend10, local_legend[12]); //added for globalisation
	loc_legend10[11] = '\0';

//	strcpy(loc_legend11,"/Name");
	strcpy(loc_legend11, local_legend[13]); //added for globalisation
	loc_legend11[6] = '\0';

//	strcpy(loc_legend12,"Local");
	strcpy(loc_legend12, local_legend[14]); //added for globalisation
	loc_legend12[5] = '\0';

	
	fill_dash(78);  
	lctr = lctr+1;
	fprintf(fp,"%-10s%-19s %s %\n",loc_legend10,loc_legend11,loc_legend12);
	fprintf(fp,"%-15s %-12s %6s%13s %9s %16s \n",
			    loc_legend1, loc_legend5, loc_legend8,loc_legend7,
				loc_legend8,loc_legend9);
	fprintf(fp,"%-15s %-12s %-10s\n",loc_legend2, loc_legend3, loc_legend4);					
	fill_dash(78);
	lctr = 8;	
}

print_page_title()
{
	static int first = 1;
    char buf[15];
    int col;
	
    strcpy(rep_title2,"");

    memset(hdr_line1,' ',REP_WIDTH+1);
    memset(hdr_line2,' ',REP_WIDTH+1);
    memset(hdr_line4,' ',REP_WIDTH+1);
	
	hdr_line5[REP_WIDTH] = '\0';
	memset(hdr_line6,' ',REP_WIDTH);
	hdr_line5[REP_WIDTH] = '\0';

    /*
    strncpy(hdr_line1,"MDL : RL",19);
    col = (int)(REP_WIDTH-strlen(comp_name.arr))/2; 
    strncpy(&hdr_line1[22],hosp_name.arr,strlen(hosp_name.arr));
	strncpy(&hdr_line1[58],date.arr,strlen(date.arr));
    col = (REP_WIDTH-strlen(date_time.arr));
    strcpy(&hdr_line1[70],date_time.arr);
    
    strncpy(hdr_line2,"OPR :",20);
    strcpy(&hdr_line2[6],user_id.arr);

    memset(hdr_line3,' ',REP_WIDTH+1);

    strncpy(hdr_line3,"REP : RLRCOSTR",20);
    col = (int)(REP_WIDTH-strlen(rep_title1))/2;
    strncpy(hdr_line3[22],rep_title1,strlen(rep_title1));
    sprintf(buf,"PAGE : %4d",page_no++);
    strcpy(hdr_line3[70],buf);
    
    
    if(d_first)
        fprintf(fp,"%s\n",hdr_line1);
    else
        fprintf(fp,"\f%s\n",hdr_line1); 
	*/

	strcpy(buf,"MDL : RL");
	buf[9] = '\0';
  EXEC SQL EXECUTE
	DECLARE
		t_date   date;
	BEGIN
		t_date := GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
		:date1 := to_char(t_date,'DD/MM/YYYY');
	END;
  END-EXEC;

  EXEC SQL EXECUTE
	DECLARE
		t_date   date;
	BEGIN
		t_date := GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
		:date1 := to_char(t_date,'HH24:MI:SS');
	END;
  END-EXEC;

	fprintf(fp,"%-20s %-36s %-10s %-9s\n",buf,hosp_name.arr,date1.arr,date_time1.arr);
	
	strcpy(buf,"OPR :");
	buf[10] = '\0';

	fprintf(fp,"%-5s %-40s\n",buf,user_id.arr);

	
//    fprintf(fp,"REP : RLRCOSTR	  Ref. Out Test Cost Vs. Rev Report -Detail          PAGE : %d\n",page_no++);    
    fprintf(fp,"REP : RLRCOSTR	  %-41.41s          %-4.4s : %d\n",local_legend[16], local_legend[15], page_no++); //added for globalisation   
	lctr += 6; 

    first = 0;
}

 fill_dash(flg)
{
  int ini_lp1;
  for (ini_lp1=1;ini_lp1<=flg;ini_lp1++)
	fprintf(fp,"%s","-");
	fprintf(fp,"\n");
}

 check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+10;

	if((lctr+l_lead_lines)> MAX_LINES) 
	{
		fprintf(fp,"\f");
		lctr = 0;
		print_head();
	}	
}

 print_spaces(l_length)
double l_length;
{
   int ini_lp2;
	for(ini_lp2=0;ini_lp2<l_length;ini_lp2++)
	{
		fprintf(fp," ");
	}
}

int fetch_dtl()
{
	ref_lcode.arr[0]	= '\0';
	tst_code.arr[0]	= '\0';
	d_patient_id.arr[0] = '\0';
	d_sent_date.arr[0] = '\0';
    d_recd_date.arr[0] = '\0';
	d_spec_regd_date.arr[0] = '\0';
	d_specimen_no.arr[0] = '\0';
	d_customer_code.arr[0] = '\0';

	tst_code.len				= 0;
	ref_lcode.len				= 0;
    d_patient_id.len			= 0;
	d_sent_date.len				= 0;
	d_recd_date.len				= 0;
	d_spec_regd_date.len		= 0;
	d_specimen_no.len			= 0;
	d_customer_code.len         = 0;

	cnt_test_code          = 0;

	if (nd_ref_code.arr[0] == '!')	
	   {			
	      EXEC SQL FETCH VAL_CUR
                   INTO	:d_specimen_no,
	 					:tst_code,
						:ref_lcode, 
						:d_patient_id,
						:d_customer_code,
						:d_sent_date,
						:d_recd_date,
						:d_spec_regd_date;

	     if (NODATAFOUND)
		  {
		    return 0;
          }
		 else 
		  {
            if (sqlca.sqlcode == -1405)
			 {
			   sprintf(string_var,"%s for Spec:%sTCode:%sRef:%s\n",sqlca.sqlerrm.sqlerrmc,d_specimen_no.arr,tst_code.arr,ref_lcode.arr);
			   disp_message(ERR_MESG,string_var);
			   return 1;			  			  			  			  			  			  			  			  			  			   
			 }
		  }

	   }
    else
	   {
	         EXEC SQL FETCH REF_LAB_VAL_CUR
				       INTO	:d_specimen_no,
	 					    :tst_code,
						    :ref_lcode, 
						    :d_patient_id,
							:d_customer_code,
						    :d_sent_date,
						    :d_recd_date,
						    :d_spec_regd_date; 

		    if (NODATAFOUND)
			{
				return 0;
			}
			else 
			{
			  if (sqlca.sqlcode == -1405)
				 {
					sprintf(string_var,"%s for Spec:%sTCode:%sRef:%s\n",sqlca.sqlerrm.sqlerrmc,d_specimen_no.arr,tst_code.arr,ref_lcode.arr);
					disp_message(ERR_MESG,string_var);
					return 1;			  			  			  			  			  			  			  			  			  			   
				 }
			} 

        }

	ref_lcode.arr[ref_lcode.len]			   = '\0';
	tst_code.arr[tst_code.len]				   = '\0';
	d_patient_id.arr[d_patient_id.len]	       = '\0';
	d_sent_date.arr[d_sent_date.len]	       = '\0';
	d_recd_date.arr[d_recd_date.len]	       = '\0';
    d_spec_regd_date.arr[d_spec_regd_date.len] = '\0';
	d_specimen_no.arr[d_specimen_no.len]       = '\0';
	d_customer_code.arr[d_customer_code.len]   = '\0';

        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_sent_date,'DD/MM/YYYY'), :language_id , t_date);
				:d_sent_date1 := to_char(t_date,'DD/MM/YYYY');
				END;
			END-EXEC;
        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_recd_date,'DD/MM/YYYY'), :language_id , t_date);
				:d_recd_date1 := to_char(t_date,'DD/MM/YYYY');
				END;
			END-EXEC;
        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_spec_regd_date,'DD/MM/YYYY'), :language_id , t_date);
				:d_spec_regd_date1 := to_char(t_date,'DD/MM/YYYY');
				END;
			END-EXEC;



    return 1;
					
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;  
   disp_message(ERR_MESG,"Oracle error at fetch_dtl() occured...");
   proc_exit();
}

int fetch_ccy_details()
{	
	fcy_code.arr[0]	= '\0';	
	fcy_code.len	= 0;
	
	lcy_rate = 0.0;
	fcy_rate = 0.0;
	    
    EXEC SQL SELECT NVL(FOREIGN_CURR_CODE,'XXX'), 
			        NVL(LOCAL_CURR_RATE,0.0), 
	  	            NVL(FOREIGN_CURR_RATE,0.0)
               INTO :fcy_code, :lcy_rate, :fcy_rate
               FROM RL_REFERRED_TEST_CODE
              WHERE	TEST_CODE		      =  :tst_code 
			    AND REFERRED_LAB_CODE	  =  :ref_lcode
			    AND OPERATING_FACILITY_ID =  :nd_facility; 


     if (OERROR) 
  		{
		   sprintf(string_var,"Select failed on RL_REFERRED_TEST_CODE table: %s\n",sqlca.sqlerrm.sqlerrmc);	
      	   disp_message(ERR_MESG, string_var);		
		   return 0;
		}
    
    fcy_code.arr[fcy_code.len]           = '\0';
    return 1;
}

 close_dtl() 
{	
    if (strcmp(nd_ref_code.arr,"!") == 0)	
	 {
		EXEC SQL CLOSE VAL_CUR; 
   
		 if (OERROR)
			{	
		  	   disp_message(ERR_MESG,"Close failed on cursor VAL_CUR");			   				
			   return 0;
		    }
	 }
	else
	 {
		EXEC SQL CLOSE REF_LAB_VAL_CUR; 
   
		if (OERROR)
			{	
		  	   disp_message(ERR_MESG,"Close failed on cursor REF_LAB_VAL_CUR");
			   return 0;
		    }
	 }
	 return 1;
}

unsigned int fetch_lab_desc()
{
    lab_name.arr[0]	= '\0';	
    lab_name.len	= 0;
      		
    EXEC SQL SELECT SHORT_DESC
               INTO :lab_name
               FROM RL_REFERRED_LAB_CODE_lang_vw
              WHERE REFERRED_LAB_CODE = :ref_lcode
			  and language_id = :language_id; 

    if (OERROR) 
	{
	      sprintf(string_var,"Select failed on RL_REFERRED_LAB_CODE table\n");	
	      disp_message(ERR_MESG, string_var);		
	      return 0;
	}

	lab_name.arr[lab_name.len]           = '\0';
	return 1;
}

int fetch_test_desc()
{
    test_name.arr[0]	= '\0';	
    test_name.len		= 0;
	
    EXEC SQL SELECT SHORT_DESC
               INTO :test_name
               FROM RL_TEST_CODE_lang_vw
              WHERE TEST_CODE = :tst_code
			  and language_id = :language_id; 


    if (OERROR) 
	{
	      sprintf(string_var,"Select failed on RL_TEST_CODE table:%s\n",sqlca.sqlerrm.sqlerrmc);	
	      disp_message(ERR_MESG, string_var);			      
	      return 0;
	}

	test_name.arr[test_name.len]           = '\0';

	return 1;
}

int fetch_patient_desc()
{
    patient_name.arr[0]	= '\0';	
    patient_name.len	= 0;
	
   if (strcmp(p_episode_type.arr, "I") == 0 || 
				strcmp(p_episode_type.arr, "O") == 0 ||
				strcmp(p_episode_type.arr, "H") == 0)

     {
	   EXEC SQL SELECT DECODE(:language_id, 'en', SHORT_NAME, 'th', SHORT_NAME_LOC_LANG) SHORT_NAME
				   INTO :patient_name
				   FROM MP_PATIENT_MAST
				  WHERE PATIENT_ID = :d_patient_id; 
	 }
   else
     {
	   
	   EXEC SQL SELECT DECODE(:language_id, 'en', SHORT_NAME, 'th', SHORT_NAME_LOC_LANG) short_name
				  INTO :patient_name
				  FROM RL_PATIENT_MAST
				 WHERE PATIENT_ID = :d_patient_id;
	 }


    if (OERROR)  
	{
	      sprintf(string_var,"Error when fetching the patient name:%s\n",sqlca.sqlerrm.sqlerrmc);	
	      disp_message(ERR_MESG, string_var);			      
	      return 0;
	}

	patient_name.arr[patient_name.len]  = '\0';   
	return 1;
}

 print_lab()
{
	//fprintf(fp,"Referral Lab Name : %s",lab_name.arr);		
	fprintf(fp,"%-18.18s: %s",local_legend[17], lab_name.arr);	//added for globalisation	
	fprintf(fp,"\n                     \n");

	lctr += 2;
}

 gen_file_name()
{
     char	file_var[200]; 
     nd_file_name.arr[0]   = '\0';
     nd_file_name.len      = 0;

	 sprintf (tmpbuf,"%s",WORKING_DIR);

	 strcpy(nd_file_name.arr,WORKING_DIR);
	 
	 strcat(nd_file_name.arr,OUTPUT_FILE_NAME);
	 	 
     if ((fp = fopen(nd_file_name.arr,"w")) == NULL)
     {     
       disp_message(ERR_MESG,"Error while opening file %s\n",nd_file_name.arr);
       proc_exit();
     }
	 
	 return 1;
}

int get_rev_details()
 {

	EXEC SQL DECLARE REQUEST_DTLS CURSOR FOR
		 SELECT A.EPISODE_TYPE, A.EPISODE_NO,A.TFR_VISIT_NO,B.LINE_NO	
			   FROM RL_REQUEST_HEADER A, 
					RL_REQUEST_DETAIL B
			   WHERE A.OPERATING_FACILITY_ID = :nd_facility
			   AND	 A.SPECIMEN_NO = TO_NUMBER(:d_specimen_no)
			   AND	 A.PATIENT_ID  = :d_patient_id			   
			   AND	 B.OPERATING_FACILITY_ID = :nd_facility
			   AND	 B.SPECIMEN_NO = TO_NUMBER(:d_specimen_no)
			   AND	 B.PATIENT_ID  = :d_patient_id
			   AND	 B.TEST_CODE   = :tst_code
			   AND   A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
			   AND   A.SPECIMEN_NO = B.SPECIMEN_NO
			   AND   A.PATIENT_ID  = B.PATIENT_ID;	

	EXEC SQL OPEN REQUEST_DTLS;
		  if (OERROR)
			{		
				sprintf(string_var,"Open failed on cursor REQUEST_DTLS:%s \n", sqlca.sqlerrm.sqlerrmc);
				disp_message(ERR_MESG,string_var);
		    }

	p_episode_type.arr[0] = '\0';
	p_episode_type.len    = 0;

	EXEC SQL FETCH REQUEST_DTLS 
	          INTO :p_episode_type, 
			       :p_episode_id, 
				   :p_visit_id,
				   :p_regn_line_num;

	p_episode_type.arr[p_episode_type.len]  = '\0';
	
	if (OERROR)
	 {	
		sprintf(string_var,"Fetch failed on cursor REQUEST_DTLS: %s \n", sqlca.sqlerrm.sqlerrmc);
		disp_message(ERR_MESG,string_var);
	 }

	EXEC SQL CLOSE REQUEST_DTLS;
	  if (OERROR)
			{	
				sprintf(string_var,"Close failed on cursor REQUEST_DTLS:%s \n", sqlca.sqlerrm.sqlerrmc);
				disp_message(ERR_MESG,string_var);
		    }
	
    /** manipulate the Patient ID for external patients 
        and episode type to R if episode type is H   
	 **/

	strcpy(nd_patient_id.arr, d_patient_id.arr);

	if (strcmp(p_episode_type.arr, "R") == 0)
	  strcpy(nd_patient_id.arr, d_customer_code.arr);

	nd_patient_id.len = strlen(nd_patient_id.arr);


    strcpy(nd_episode_type.arr, p_episode_type.arr);
	
	if (strcmp(p_episode_type.arr, "H") == 0)
	  strcpy(nd_episode_type.arr, "R");

	nd_episode_type.len = strlen(nd_episode_type.arr);
	  
/******
 commented as this procedure is not available in srdv, needs to be reviewed later

	EXEC SQL EXECUTE 
			 BEGIN
				BL_PROC_FOR_EXT_SERVICE.GET_PAT_CHARGE_AMT_FOR_TEST 
				(
				 :nd_facility,                  	
				 :nd_patient_id,
				 :nd_episode_type,
				 :p_episode_id,
				 :p_visit_id,
				 'RL',                    	
				 :d_specimen_no,                    	
				 :p_regn_line_num,
				 :tst_code,                   
				 :p_charged_yn,
				 :p_charged_gross_amt,
				 :p_charged_disc_amt,
				 :p_charged_net_amt,
				 :p_status,
				 :p_err_code,
				 :p_sys_message_id,
				 :p_error_text);    		
		END;
	END-EXEC;		
*/
		if (strcmp(p_err_code.arr,"10") == 0)
		   {	
				sprintf(string_var," Error:%s in BL_PROC_FOR_EXT_SERVICE.GET_PAT_CHARGE_AMT_FOR_TEST \n", p_error_text.arr);
				disp_message(ERR_MESG, string_var);										
		   }

     return 1;

}

/*************************** added for globalisation*************************************/

get_legend_value(int cou)
 {
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND ('DF',:language_id,'RLRCOSTR.LEGEND_');
	END;
	END-EXEC;

	for (i=1; i<=cou; i++)
	{
	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRCOSTR.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);
	}
 }


/*************************** added for globalisation*************************************/

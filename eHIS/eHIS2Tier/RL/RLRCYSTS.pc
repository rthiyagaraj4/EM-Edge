/****************************************************************
 * File             : RLRCYSTS.pc
 * Author           : Hameed
 * Date Created     : 23/03/2005
 
 * Version          : 4.1

 * Purpose          : To generate the Cytology Statistics Report
 
 * Input Parameters : Command Line Arguments
						1  UserId/Password
						2  Session ID
						3  Program Date
						
						Parameters From SY_PROG_PARAM Table

 * Table Accessed   : 

 ****************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>


#define MAX_LINES   55
#define OERROR      (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode == 1403
#define LASTROW     (sqlca.sqlcode == 1403)
#define VER         "VER : 4.1\n"
#define ESC         0x1B
#define REP_WIDTH   78

EXEC SQL BEGIN DECLARE SECTION;
     VARCHAR     nd_operating_facility_id [3],
	             uid_pwd                  [91],
				 nd_file_name             [150],
				 nd_file_no               [15],
				 nd_session_id            [16],
				 nd_pgm_date              [31],
				 d_version_no             [20],
				 d_version                [20],

				 /** Parameters from SY_PROG_PARAM **/
				 nd_section_code          [3],
				 nd_section_desc          [41],
				 nd_spec_regd_date_fr     [31],
				 nd_spec_regd_date_fr1    [31], //added for globalisation
				 nd_spec_regd_date_to     [31],
				 nd_spec_regd_date_to1    [31], //added for globalisation
				 nd_option                [2],
				 nd_category_fr           [5],
				 nd_category_to           [5],
				 nd_source_type           [4], //13.09.2006
				 nd_source_fr             [8], //13.09.2006
				 nd_source_to             [8], //13.09.2006

				 /** To fetch category and Work group cursor values **/
				 d_specimen_no            [21],
				 d_category_code          [5],
				 d_category_where         [5],
				 d_category_desc          [41],
				 d_workgroup_desc         [41],
				 d_workgroup_code         [5],
				 d_workgroup_where        [5],
				 d_sample_id              [6],
				 d_task_code              [5],
				 d_slide_yn               [2],
				 d_spec_stain_yn          [2],

				 d_prv_category_code      [5],
				 d_prv_workgroup_code     [5],
				 d_prv_specimen_no        [21],

				 /** For Header Routine **/
				 //d_acc_entity_name    [61],
				 d_acc_entity_name    [300],
				 d_user                   [21],
				 d_sysdate                [31],
				 d_sysdate1               [31],
				 
				 l_translated_value		[500],  //added for globalisation
				 language_id				[5]; //added for globalisation


	int  l_tab_exists;
	
	int  i; // added for globalisation

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

FILE *fp;
void print_page_header();
void print_col_heading();
void prepare_new_page();
void print_detl_rec();
void print_workgroup_dtl();
void print_category_dtl();
void end_report();

int page_no = 0, line_no = 0;

int l_tot_count = 0, l_smear_count = 0, l_spec_stain_count = 0;

char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1],
     hdr_line4[REP_WIDTH+1],
     hdr_line5[REP_WIDTH+1];

//char rep_title1[] = "Statistics Report",
  char rep_title1[500],
     rep_title2[60];

char string_var[500];

char local_legend[40][600]; // added for globalisation

void proc_main(argc, argv)
int argc;
char *argv[];
{
	void get_params(),
	get_header_dtls(),
	dclr_category_header_cur(),
	dclr_workgroup_header_cur(),
	do_report();

	if(argc < 4) 
	{
		disp_message(ERR_MESG, "Usage: rlrcysts userid/pwd sessionid pgm_date\n");
		proc_exit();
	}

	strcpy(uid_pwd.arr , argv[1]);
	uid_pwd.len = strlen(uid_pwd.arr);

	strcpy(nd_session_id.arr, argv[2]);
	nd_session_id.len = strlen(nd_session_id.arr);

	strcpy(nd_pgm_date.arr, argv[3]);
	nd_pgm_date.len = strlen(nd_pgm_date.arr);

	strcpy(OUTPUT_FILE_NAME, argv[5]);

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL CONNECT :uid_pwd;

	#ifdef DEBUG
		printf("Connected to ORACLE as user: %s \n", uid_pwd.arr);
	#endif  

	set_meduser_role();

	/******* from here added for globalisation ********/
    strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
	/******* upto here added for globalisation ********/

	get_params();

	get_legend_value(26);   //added for globalisation

	gen_file_name();

	get_header_dtls();
	
	//s
	//sprintf(string_var, "Date : %s  %s  Option %s",nd_spec_regd_date_fr.arr,
	//                                               nd_spec_regd_date_to.arr, nd_option.arr);
	//disp_message(ERR_MESG, string_var);

	if (strcmp(nd_option.arr,"W") == 0)
		dclr_workgroup_header_cur();
	else if (strcmp(nd_option.arr, "C") == 0)
		dclr_category_header_cur();

	do_report();

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL COMMIT WORK RELEASE;

	fclose(fp);

	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG,"Oracle error at main() occured....\n");
	proc_exit();
}

/********  added for globalisation start ******************/
get_legend_value(int cou)
 {
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLRCYSTS.LEGEND_');
	END;
	END-EXEC;

	for (i=1; i<=cou; i++)
	{
		l_translated_value.arr[0]		= '\0';


		EXEC SQL EXECUTE
		BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRCYSTS.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
		END;
		END-EXEC;
	
		l_translated_value.arr[l_translated_value.len] = '\0';

		//disp_message(ERR_MESG,l_translated_value.arr);

		strcpy(local_legend[i],l_translated_value.arr);

	}
 }
/******** upto here added for globalisation ******************/


void do_report()
{
	void print_rep_header();
	void print_header();
	int fetch_category_header();
	int fetch_workgroup_header();

	page_no = 1;
	line_no = 1;

	print_rep_header();
	print_page_header();
	print_col_heading();

	print_detl_rec();

	if (strcmp(nd_option.arr,"W") == 0)
		close_workgroup_header_cur();
	else if (strcmp(nd_option.arr, "C") == 0)
		close_category_header_cur();

	end_report();

}

/*** Get the Parameters from SY_PROG_PARAM Table ***/

void get_params()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL SELECT OPERATING_FACILITY_ID,
	                PARAM1, PARAM2, PARAM3, PARAM4,PARAM5,PARAM6,
					PARAM7, PARAM8, PARAM9 //13.09.2006
	         INTO :nd_operating_facility_id, 
			      :nd_section_code,:nd_spec_regd_date_fr,
				  :nd_spec_regd_date_to,
				  :nd_option,:nd_category_fr, :nd_category_to,
				  :nd_source_type, :nd_source_fr, :nd_source_to //13.09.2006
			 FROM SY_PROG_PARAM
			 WHERE UPPER(PGM_ID) = 'RLRCYSTS'
			 AND SESSION_ID = TO_NUMBER(:nd_session_id)
			 AND PGM_DATE = :nd_pgm_date;

	nd_operating_facility_id.arr[nd_operating_facility_id.len]   = '\0';
	nd_section_code.arr[nd_section_code.len]                     = '\0';
	nd_spec_regd_date_fr.arr[nd_spec_regd_date_fr.len]           = '\0';
	nd_spec_regd_date_to.arr[nd_spec_regd_date_to.len]           = '\0';
	nd_option.arr[nd_option.len]                                 = '\0';
	nd_category_fr.arr[nd_category_fr.len]                       = '\0';
	nd_category_to.arr[nd_category_to.len]                       = '\0';
	nd_source_type.arr[nd_source_type.len]                       = '\0'; //13.09.2006
	nd_source_fr.arr[nd_source_fr.len]                           = '\0'; //13.09.2006
	nd_source_to.arr[nd_source_to.len]                           = '\0'; //13.09.2006

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL DELETE FROM SY_PROG_PARAM
	         WHERE UPPER(PGM_ID) = 'RLRCYSTS'
			 AND SESSION_ID = TO_NUMBER(:nd_session_id)
			 AND PGM_DATE = :nd_pgm_date;

	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG,"Oracle error at get_params() occured....\n");
	proc_exit();
}

/** Get Header informations **/
void get_header_dtls()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL SELECT ACC_ENTITY_NAME,
					USER,
					TO_CHAR(SYSDATE,'DD/MM/YYYY')
             INTO :d_acc_entity_name,
			      :d_user,
				  :d_sysdate
			 FROM SY_ACC_ENTITY_lang_vw
			 WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			 and language_id = :language_id;

	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';


	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG,"Oracle error at get_header_dtls() occured....\n");
	proc_exit();

}

/** Declare Category Cursor **/

void dclr_category_header_cur()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL DECLARE CATEGORY_HEADER CURSOR FOR
	SELECT A.SPECIMEN_NO , A.CATEGORY_CODE , 
	C.SAMPLE_ID , E.TASK_CODE ,NVL(F.SLIDE_YN,'N') , 
	NVL(F.SPECIAL_STAIN_YN, 'N') 
	FROM RL_REQUEST_HEADER A,  RL_SAMPLE_DETAILS C,
		 RL_SAMPLE_TASK_DTL E, RL_TASK_MAST F
	WHERE A.SPEC_REGD_DATE_TIME >= TO_DATE(:nd_spec_regd_date_fr,'DD/MM/YYYY')
	AND A.SPEC_REGD_DATE_TIME < TO_DATE(:nd_spec_regd_date_to,'DD/MM/YYYY') + 1
	AND A.SPECIMEN_NO = C.SPECIMEN_NO
	AND A.SPECIMEN_NO = E.SPECIMEN_NO
	AND A.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = E.OPERATING_FACILITY_ID
	AND C.SAMPLE_ID = E.SAMPLE_ID
	AND A.SECTION_CODE = :nd_section_code
	AND A.SECTION_CODE = C.SECTION_CODE
	AND A.SECTION_CODE = F.SECTION_CODE
	AND E.TASK_CODE = F.TASK_CODE
	AND A.SOURCE_CODE BETWEEN :nd_source_fr AND :nd_source_to //13.09.2006
	AND A.SOURCE_TYPE = DECODE(:nd_source_type,'A',A.SOURCE_TYPE,:nd_source_type)  //added on 12.05.2008 against ml scf ML-SD-SCF-2354
	AND A.CATEGORY_CODE BETWEEN :nd_category_fr AND :nd_category_to
	ORDER BY A.CATEGORY_CODE,A.SPECIMEN_NO,E.TASK_CODE;

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL OPEN CATEGORY_HEADER;

	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG,"Oracle error at dclr_category_header_cur() occured....\n");
	proc_exit();

}

/** Declare Workgroup Cursor **/

void dclr_workgroup_header_cur()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	
	EXEC SQL DECLARE WORKGROUP_HEADER CURSOR FOR
/******************* query added by sunil on 15-11-1007 as per scf 1985 ****************/
SELECT SPECIMEN_NO SPEC_NO, WORK_GROUP_CODE, SAMPLE_ID , TASK_CODE TSK_CODE, SLIDE_YN, SPECIAL_STAIN_YN
FROM
(
(SELECT Z.SPECIMEN_NO, Z.TEST_CODE, Z.SAMPLE_ID, Z.TASK_CODE, Z.SLIDE_YN, Z.SPECIAL_STAIN_YN,
X.TEST_CODE, X.OUTST_WORK_GROUP_CODE WORK_GROUP_CODE
FROM
(SELECT A.OPERATING_FACILITY_ID, A.SPECIMEN_NO, B.TEST_CODE, B.SAMPLE_ID, C.TASK_CODE, D.SLIDE_YN, D.SPECIAL_STAIN_YN
FROM
(
SELECT SPECIMEN_NO, OPERATING_FACILITY_ID, SECTION_CODE
FROM RL_REQUEST_HEADER
WHERE SPEC_REGD_DATE_TIME >= TO_DATE(:nd_spec_regd_date_fr,'DD/MM/YYYY')
 AND SPEC_REGD_DATE_TIME < TO_DATE(:nd_spec_regd_date_to,'DD/MM/YYYY') + 1
 AND SOURCE_CODE BETWEEN :nd_source_fr AND :nd_source_to
 AND SOURCE_TYPE = DECODE(:nd_source_type,'A',SOURCE_TYPE,:nd_source_type)  //added on 12.05.2008 against ml scf ML-SD-SCF-2354
 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
 AND SECTION_CODE = :nd_section_code
) A,
(
SELECT SPECIMEN_NO, OPERATING_FACILITY_ID, SECTION_CODE, SAMPLE_ID, TEST_CODE
FROM RL_SAMPLE_DETAILS
where test_code is not null
) B,
(
SELECT SPECIMEN_NO, OPERATING_FACILITY_ID, TASK_CODE, SAMPLE_ID
FROM RL_SAMPLE_TASK_DTL
) C,
(
SELECT  SECTION_CODE, TASK_CODE, NVL(SLIDE_YN,'N') SLIDE_YN, NVL(SPECIAL_STAIN_YN, 'N') SPECIAL_STAIN_YN
FROM RL_TASK_MAST
) D
WHERE A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
   AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
   AND A.SPECIMEN_NO = B.SPECIMEN_NO
   AND A.SPECIMEN_NO = C.SPECIMEN_NO
   AND A.SECTION_CODE = B.SECTION_CODE
   AND A.SECTION_CODE = D.SECTION_CODE
   AND B.SAMPLE_ID = C.SAMPLE_ID
   AND C.TASK_CODE = D.TASK_CODE
) Z, RL_OUTST_WORK_GROUP_DTL X
WHERE Z.OPERATING_FACILITY_ID = X.OPERATING_FACILITY_ID
AND (X.TEST_CODE = Z.TEST_CODE
   OR X.TEST_CODE IN (SELECT TEST_CODE FROM RL_GROUP_TEST_DETAIL
                                        WHERE GROUP_TEST_CODE = Z.TEST_CODE))
   AND X.OUTST_WORK_GROUP_CODE IN (SELECT OUTST_WORK_GROUP_CODE
                                                                FROM RL_OUTST_WORK_GROUP
                                                                WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
                                                                AND SECTION_CODE = :nd_section_code
                                                                AND NVL(CYTO_STATISTICS_YN,'N') = 'Y')
)
union ALL
(SELECT Z.SPECIMEN_NO, Z.TEST_CODE, Z.SAMPLE_ID, Z.TASK_CODE, Z.SLIDE_YN, Z.SPECIAL_STAIN_YN,
    X.TEST_CODE, X.OUTST_WORK_GROUP_CODE WORK_GROUP_CODE
FROM
(SELECT A.OPERATING_FACILITY_ID, A.SPECIMEN_NO, B.TEST_CODE, B.SAMPLE_ID, C.TASK_CODE, D.SLIDE_YN, D.SPECIAL_STAIN_YN
FROM
(
SELECT SPECIMEN_NO, OPERATING_FACILITY_ID, SECTION_CODE
FROM RL_REQUEST_HEADER
WHERE SPEC_REGD_DATE_TIME >= TO_DATE(:nd_spec_regd_date_fr,'DD/MM/YYYY')
 AND SPEC_REGD_DATE_TIME < TO_DATE(:nd_spec_regd_date_to,'DD/MM/YYYY') + 1
 AND SOURCE_CODE BETWEEN :nd_source_fr AND :nd_source_to
 AND SOURCE_TYPE = DECODE(:nd_source_type,'A',SOURCE_TYPE,:nd_source_type)  //added on 12.05.2008 against ml scf ML-SD-SCF-2354
 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
 AND SECTION_CODE = :nd_section_code
) A,
(
SELECT SPECIMEN_NO, OPERATING_FACILITY_ID, SECTION_CODE, SAMPLE_ID, TEST_CODE
FROM RL_SAMPLE_DETAILS
where test_code is null
) B,
(
SELECT SPECIMEN_NO, OPERATING_FACILITY_ID, TASK_CODE, SAMPLE_ID
FROM RL_SAMPLE_TASK_DTL
) C,
(
SELECT  SECTION_CODE, TASK_CODE, NVL(SLIDE_YN,'N') SLIDE_YN, NVL(SPECIAL_STAIN_YN, 'N') SPECIAL_STAIN_YN
FROM RL_TASK_MAST
) D
WHERE A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
   AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
   AND A.SPECIMEN_NO = B.SPECIMEN_NO
   AND A.SPECIMEN_NO = C.SPECIMEN_NO
   AND A.SECTION_CODE = B.SECTION_CODE
   AND A.SECTION_CODE = D.SECTION_CODE
   AND B.SAMPLE_ID = C.SAMPLE_ID
   AND C.TASK_CODE = D.TASK_CODE
) Z, RL_OUTST_WORK_GROUP_DTL X
WHERE Z.OPERATING_FACILITY_ID = X.OPERATING_FACILITY_ID
   AND (X.TEST_CODE IN (SELECT TEST_CODE FROM RL_REQUEST_DETAIL
             		WHERE SPECIMEN_NO = Z.SPECIMEN_NO
	     		AND TEST_CODE NOT IN (SELECT NVL(TEST_CODE,'!') FROM RL_SAMPLE_DETAILS 
			WHERE SPECIMEN_NO = Z.SPECIMEN_NO)
		       )
   OR X.TEST_CODE IN (SELECT TEST_CODE FROM RL_GROUP_TEST_DETAIL
                      WHERE GROUP_TEST_CODE IN (SELECT TEST_CODE FROM RL_REQUEST_DETAIL
             					WHERE SPECIMEN_NO = Z.SPECIMEN_NO
						AND TEST_CODE NOT IN (SELECT NVL(TEST_CODE,'!') FROM RL_SAMPLE_DETAILS 
								     WHERE SPECIMEN_NO = Z.SPECIMEN_NO)
						)
		    )
	)
   AND X.OUTST_WORK_GROUP_CODE IN (SELECT OUTST_WORK_GROUP_CODE
                                                                FROM RL_OUTST_WORK_GROUP
                                                                WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
                                                                AND SECTION_CODE = :nd_section_code
                                                                AND NVL(CYTO_STATISTICS_YN,'N') = 'Y')
   AND Z.TEST_CODE IS NULL
)
)
ORDER BY WORK_GROUP_CODE, SPECIMEN_NO, sample_id, TASK_CODE;

/*	SELECT A.SPECIMEN_NO SPEC_NO, D.OUTST_WORK_GROUP_CODE  WORK_GROUP_CODE,
	       C.SAMPLE_ID , E.TASK_CODE TSK_CODE,
	       NVL(F.SLIDE_YN,'N') , NVL(F.SPECIAL_STAIN_YN, 'N') 
	FROM RL_REQUEST_HEADER A, RL_REQUEST_DETAIL B, RL_SAMPLE_DETAILS C,
		 RL_OUTST_WORK_GROUP_DTL D, RL_SAMPLE_TASK_DTL E,RL_TASK_MAST F
	WHERE A.SPEC_REGD_DATE_TIME >= TO_DATE(:nd_spec_regd_date_fr,'DD/MM/YYYY')
	AND A.SPEC_REGD_DATE_TIME < TO_DATE(:nd_spec_regd_date_to,'DD/MM/YYYY') + 1
	AND A.SOURCE_CODE BETWEEN :nd_source_fr AND :nd_source_to //13.09.2006
	AND A.SPECIMEN_NO = B.SPECIMEN_NO
	AND A.SPECIMEN_NO = C.SPECIMEN_NO
	AND A.SPECIMEN_NO = E.SPECIMEN_NO
	AND A.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = D.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = E.OPERATING_FACILITY_ID
	AND C.SAMPLE_ID = E.SAMPLE_ID
	AND A.SECTION_CODE = :nd_section_code
	AND A.SECTION_CODE = B.SECTION_CODE
	AND A.SECTION_CODE = C.SECTION_CODE
	AND A.SECTION_CODE = F.SECTION_CODE
	AND E.TASK_CODE = F.TASK_CODE
	AND B.TEST_CODE = C.TEST_CODE
	AND C.TEST_CODE = D.TEST_CODE
	AND D.OUTST_WORK_GROUP_CODE IN (SELECT OUTST_WORK_GROUP_CODE
									FROM RL_OUTST_WORK_GROUP
									WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
									AND SECTION_CODE = :nd_section_code
									AND NVL(CYTO_STATISTICS_YN,'N') = 'Y')
	UNION ALL
	SELECT A.SPECIMEN_NO SPEC_NO, D.OUTST_WORK_GROUP_CODE WORK_GROUP_CODE,
	C.SAMPLE_ID , E.TASK_CODE TSK_CODE ,NVL(F.SLIDE_YN,'N') ,
	NVL(F.SPECIAL_STAIN_YN, 'N')
	FROM RL_REQUEST_HEADER A, RL_REQUEST_DETAIL B, RL_SAMPLE_DETAILS C,
	RL_OUTST_WORK_GROUP_DTL D,RL_SAMPLE_TASK_DTL E , RL_TASK_MAST F
	WHERE A.SPEC_REGD_DATE_TIME >= TO_DATE(:nd_spec_regd_date_fr,'DD/MM/YYYY')
	AND A.SPEC_REGD_DATE_TIME < TO_DATE(:nd_spec_regd_date_fr,'DD/MM/YYYY') + 1
	AND A.SOURCE_CODE BETWEEN :nd_source_fr AND :nd_source_to //13.09.2006
	AND A.SPECIMEN_NO = B.SPECIMEN_NO
	AND A.SPECIMEN_NO = C.SPECIMEN_NO
	AND A.SPECIMEN_NO = E.SPECIMEN_NO
	AND A.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = D.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = E.OPERATING_FACILITY_ID
	AND C.SAMPLE_ID = E.SAMPLE_ID
	AND A.SECTION_CODE = :nd_section_code
	AND A.SECTION_CODE = F.SECTION_CODE
	AND A.SECTION_CODE = B.SECTION_CODE
	AND A.SECTION_CODE = C.SECTION_CODE
	AND E.TASK_CODE = F.TASK_CODE
	AND NVL(B.GROUP_TEST_YN, 'N') = 'Y'
	AND B.TEST_CODE = C.TEST_CODE
	AND D.TEST_CODE IN (SELECT TEST_CODE FROM RL_GROUP_TEST_DETAIL
						WHERE GROUP_TEST_CODE = B.TEST_CODE)
	AND D.OUTST_WORK_GROUP_CODE IN (SELECT OUTST_WORK_GROUP_CODE
									FROM RL_OUTST_WORK_GROUP
									WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
									AND SECTION_CODE = :nd_section_code
									AND NVL(CYTO_STATISTICS_YN,'N') = 'Y')
	// ORDER BY OUTST_WORK_GROUP_CODE, SPECIMEN_NO, TASK_CODE;
	ORDER BY WORK_GROUP_CODE, SPEC_NO, TSK_CODE;
*/
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL OPEN WORKGROUP_HEADER;
	
	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG,"Oracle error at dclr_workgroup_header_cur()....\n");
	proc_exit();
}


/** Fetch Category cursor **/

int fetch_category_header()
{
	d_specimen_no.arr[0]       = '\0';
	d_category_code.arr[0]     = '\0';
	d_sample_id.arr[0]         = '\0';
	d_task_code.arr[0]         = '\0';
	d_slide_yn.arr[0]          = '\0';
	d_spec_stain_yn.arr[0]     = '\0';

	d_specimen_no.len          = 0;
	d_category_code.len        = 0;
	d_sample_id.len            = 0;
	d_task_code.len            = 0;
	d_slide_yn.len             = 0;
	d_spec_stain_yn.len        = 0;

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL FETCH CATEGORY_HEADER INTO 
	:d_specimen_no,:d_category_code , :d_sample_id, :d_task_code,
	:d_slide_yn, :d_spec_stain_yn;

	if (NODATAFOUND)
		return 0;

	d_specimen_no.arr[d_specimen_no.len]         = '\0';
	d_category_code.arr[d_category_code.len]     = '\0';
	d_sample_id.arr[d_sample_id.len]             = '\0';
	d_task_code.arr[d_task_code.len]             = '\0';
	d_slide_yn.arr[d_slide_yn.len]               = '\0';
	d_spec_stain_yn.arr[d_spec_stain_yn.len]     = '\0';

	return 1;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG, "Oracle error at fetch_category_header() occured....\n");
	proc_exit();
}

/** Fetch Workgroup cursor **/

int fetch_workgroup_header()
{
	d_specimen_no.arr[0]        = '\0';
	d_workgroup_code.arr[0]     = '\0';
	d_sample_id.arr[0]          = '\0';
	d_task_code.arr[0]          = '\0';
	d_slide_yn.arr[0]           = '\0';
	d_spec_stain_yn.arr[0]      = '\0';

	d_specimen_no.len           = 0;
	d_workgroup_code.len        = 0;
	d_sample_id.len             = 0;
	d_task_code.len             = 0;
	d_slide_yn.len              = 0;
	d_spec_stain_yn.len         = 0;

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL FETCH WORKGROUP_HEADER INTO 
	:d_specimen_no,:d_workgroup_code, :d_sample_id, :d_task_code,
	:d_slide_yn, :d_spec_stain_yn;

	if (NODATAFOUND)
		return 0;

	d_specimen_no.arr[d_specimen_no.len]         = '\0';
	d_workgroup_code.arr[d_workgroup_code.len]   = '\0';
	d_sample_id.arr[d_sample_id.len]             = '\0';
	d_task_code.arr[d_task_code.len]             = '\0';
	d_slide_yn.arr[d_slide_yn.len]               = '\0';
	d_spec_stain_yn.arr[d_spec_stain_yn.len]     = '\0';

	return 1;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG, "Oracle error at fetch_header() occured....\n");
	proc_exit();
}

/** Close Category Header Cursor **/

close_category_header_cur()
{
	EXEC SQL CLOSE CATEGORY_HEADER;
}

/** Close Workgroup Header Cursor **/

close_workgroup_header_cur()
{
	EXEC SQL CLOSE WORKGROUP_HEADER;
}


/** Print Detail Record **/
void print_detl_rec()
{
	if (strcmp(nd_option.arr,"W") == 0)
		print_workgroup_dtl();
	else if (strcmp(nd_option.arr,"C") == 0)
		print_category_dtl();
}

/** Print details for Category **/
void print_category_dtl()
{
	int still_rec_exist = 0;
	
	still_rec_exist = fetch_category_header();
	strcpy(d_prv_category_code.arr, d_category_code.arr);

	strcpy(d_prv_specimen_no.arr, d_specimen_no.arr);
	l_tot_count += 1;

	while (still_rec_exist)
	{
		if (strcmp(d_prv_category_code.arr, d_category_code.arr) != 0)
		{
			get_category_desc(d_prv_category_code.arr);

			chk_break();
			fprintf(fp, "%-40.40s    %4d     %4d             %4d    \n", d_category_desc.arr, l_tot_count, l_smear_count,
			                                                             l_spec_stain_count);
			// fprintf(fp,"------------------------------------------------------------------------------\n");
			fprintf(fp,"\n");
			line_no += 2;

			strcpy(d_prv_category_code.arr, d_category_code.arr);
			l_tot_count = 0;
			l_smear_count = 0;
			l_spec_stain_count = 0;
		}

		if (strcmp(d_prv_specimen_no.arr, d_specimen_no.arr) != 0)
		{
			l_tot_count++;
			strcpy(d_prv_specimen_no.arr, d_specimen_no.arr);
		}
		
		if ((strcmp(d_slide_yn.arr, "Y") == 0) && (strcmp(d_spec_stain_yn.arr, "Y") == 0))
		{
			l_spec_stain_count++;
		}
		else if(strcmp(d_slide_yn.arr, "Y") == 0)
		{
			l_smear_count++;
		}
		
		still_rec_exist = fetch_category_header();

		if(still_rec_exist == 0 )
		{
			get_category_desc(d_prv_category_code.arr);

			chk_break();
			fprintf(fp, "%-40.40s    %4d     %4d             %4d    \n", d_category_desc.arr, l_tot_count, l_smear_count,
			                                                             l_spec_stain_count);
			//fprintf(fp,"------------------------------------------------------------------------------\n");
			fprintf(fp,"\n");
			line_no += 2;
		}
	}

}

/** Print details for Workgroup **/
void print_workgroup_dtl()
{
	
	int still_rec_exist = 0;
	
	still_rec_exist = fetch_workgroup_header();
	strcpy(d_prv_workgroup_code.arr, d_workgroup_code.arr);
	
	strcpy(d_prv_specimen_no.arr, d_specimen_no.arr);
	l_tot_count += 1;

	while (still_rec_exist)
	{
		if (strcmp(d_prv_workgroup_code.arr, d_workgroup_code.arr) != 0)
		{
			get_workgroup_desc(d_prv_workgroup_code.arr);
			
			chk_break();
			fprintf(fp, "%-40.40s    %4d     %4d             %4d    \n", d_workgroup_desc.arr, l_tot_count, l_smear_count,
			                                                             l_spec_stain_count);
			//fprintf(fp,"------------------------------------------------------------------------------\n");
			fprintf(fp,"\n");
			line_no += 2;


			strcpy(d_prv_workgroup_code.arr, d_workgroup_code.arr);
			strcpy(d_prv_specimen_no.arr, "0"); /* added by sunil on 15-11-1007 as per scf 1985 */

			l_tot_count = 0;
			l_smear_count = 0;
			l_spec_stain_count = 0;
		}

		if (strcmp(d_prv_specimen_no.arr, d_specimen_no.arr) != 0)
		{
			l_tot_count++;
			strcpy(d_prv_specimen_no.arr, d_specimen_no.arr);
		}
		
		if ((strcmp(d_slide_yn.arr, "Y") == 0) && (strcmp(d_spec_stain_yn.arr, "Y") == 0))
		{
			l_spec_stain_count++;
		}
		else if(strcmp(d_slide_yn.arr, "Y") == 0)
		{
			l_smear_count++;
		}
		
		still_rec_exist = fetch_workgroup_header();

		if (still_rec_exist == 0)
		{
			get_workgroup_desc(d_prv_workgroup_code.arr);

			chk_break();
			fprintf(fp, "%-40.40s    %4d     %4d             %4d    \n", d_workgroup_desc.arr, l_tot_count, l_smear_count,
			                                                             l_spec_stain_count);
			//fprintf(fp,"------------------------------------------------------------------------------\n");
			fprintf(fp,"\n");
			line_no += 2;
		}
	}
}
/** Print REPORT HEADER **/

void print_rep_header()
{
	void get_section_desc();

	char nd_option_desc[20],
	     nd_category_fr_desc[61],
		 nd_category_to_desc[61],
		 nd_source_type_desc[61], //13.03.2006
		 nd_source_fr_desc[61], //13.03.2006
		 nd_source_to_desc[61]; //13.03.2006
    
	int rec_len; //added for globalisation
	
	get_section_desc();

	if(strcmp(nd_option.arr, "W") == 0)
	{
		//strcpy(nd_option_desc, "WORKGROUP");
		strcpy(nd_option_desc, local_legend[23]); // added for globalisation
	}
	else if(strcmp(nd_option.arr,"C") == 0)
	{
		//strcpy(nd_option_desc, "CATEGORY");
        strcpy(nd_option_desc, local_legend[24]); // added for globalisation
		//strcpy(nd_category_fr_desc, nd_category_fr.arr);  
		//strcpy(nd_category_to_desc, nd_category_to.arr);

		/**************Added for globalisation Start***********************/
		if(strcmp(nd_category_fr.arr,"!!!") == 0)
			strcpy(nd_category_fr_desc, local_legend[21]); 
		else
			strcpy(nd_category_fr_desc, nd_category_fr.arr);
	  
		if(strcmp(nd_category_to.arr,"~~~") == 0)
			strcpy(nd_category_to_desc, local_legend[22]); 
		else
			strcpy(nd_category_to_desc, nd_category_to.arr);
		/**************Added for globalisation End***********************/

	}

	/* --Start -- Added by Sai Dutt on 13.09.2006 */
	if(strcmp(nd_source_type.arr,"W") == 0)
	  //strcpy(nd_source_type_desc, "Ward");
	  strcpy(nd_source_type_desc, local_legend[17]); // added for globalisation
	else if(strcmp(nd_source_type.arr,"C") == 0)
	  //strcpy(nd_source_type_desc, "Clinic");
	  strcpy(nd_source_type_desc, local_legend[18]); // added for globalisation
	else if(strcmp(nd_source_type.arr,"E") == 0)
	  //strcpy(nd_source_type_desc, "External");
	  strcpy(nd_source_type_desc, local_legend[19]); // added for globalisation
	else if(strcmp(nd_source_type.arr,"A") == 0)
	  //strcpy(nd_source_type_desc, "All");
	  strcpy(nd_source_type_desc, local_legend[20]); // added for globalisation

	if(strcmp(nd_source_fr.arr,"!!!!!!") == 0)
	  //strcpy(nd_source_fr_desc, "LOWEST");
	  strcpy(nd_source_fr_desc, local_legend[21]); // added for globalisation
	else
	  strcpy(nd_source_fr_desc, nd_source_fr.arr);
	  
	if(strcmp(nd_source_to.arr,"~~~~~~") == 0)
	  //strcpy(nd_source_to_desc, "HIGHEST");
	  strcpy(nd_source_to_desc, local_legend[22]); // added for globalisation
	else
	  strcpy(nd_source_to_desc, nd_source_to.arr);

	/* --End -- Added by Sai Dutt on 13.09.2006 */

	print_header();

	get_version_no();

	fprintf(fp,"%s\n",d_version.arr);
	fprintf(fp,"\n\n\n\n");
	//fprintf(fp,"        ");
	//fprintf(fp,"INPUT PARAMETERS :\n");
    rec_len = strlen(local_legend[3]);//added for globalisation
    print_space(30, rec_len,1);//added for globalisation
    fprintf(fp,"%s:\n", local_legend[3]); 

	//fprintf(fp,"        ");
	//fprintf(fp,"------------------\n\n");
	print_space(30, rec_len,1);//added for globalisation
    print_space(30, rec_len,0);//added for globalisation
	fprintf(fp,"\n\n");

	//fprintf(fp,"                   ");
	//fprintf(fp,"DATE        FROM : %s\n", nd_spec_regd_date_fr.arr);

	EXEC SQL EXECUTE
			DECLARE
				t_date   date;
			BEGIN
				//GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_spec_regd_date_fr,'DD/MM/YYYY'), :language_id , t_date);
				//:nd_spec_regd_date_fr1 := to_char(t_date,'DD/MM/YYYY');
				:nd_spec_regd_date_fr1 :=sm_convert_date_2t(to_date(:nd_spec_regd_date_fr,'DD/MM/YYYY'),:language_id);
			END;
	END-EXEC;


    rec_len = strlen(local_legend[4]);//added for globalisation
	rec_len = rec_len + strlen(local_legend[5]) +8 ;
    print_space(35, rec_len,1);//added for globalisation
    fprintf(fp,"%s        %s : %s\n", local_legend[4],local_legend[5], nd_spec_regd_date_fr1.arr); // added for globalisation


	//fprintf(fp,"                   ");
	//fprintf(fp,"              TO : %s\n", nd_spec_regd_date_to.arr);

	EXEC SQL EXECUTE
			DECLARE
				t_date   date;
			BEGIN
				//GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_spec_regd_date_to,'DD/MM/YYYY'), :language_id , t_date);
				//:nd_spec_regd_date_to1 := to_char(t_date,'DD/MM/YYYY');
				:nd_spec_regd_date_to1 :=sm_convert_date_2t(to_date(:nd_spec_regd_date_to,'DD/MM/YYYY'),:language_id);
			END;
	END-EXEC;

	rec_len = strlen(local_legend[6]);//added for globalisation
    print_space(35, rec_len,1);//added for globalisation
    fprintf(fp,"%s : %s\n", local_legend[6], nd_spec_regd_date_to1.arr); // added for globalisation

	//fprintf(fp,"                   ");
	//fprintf(fp,"SECTION          : %s - %s\n", nd_section_code.arr, nd_section_desc.arr);

	rec_len = strlen(local_legend[7]);//added for globalisation
    print_space(35, rec_len,1);//added for globalisation
    fprintf(fp,"%s : %s - %s\n", local_legend[7],nd_section_code.arr, nd_section_desc.arr); // added for globalisation

	/* --Start -- Added by Sai Dutt on 13.09.2006 */
	//Commented for globalisation
	/*fprintf(fp,"                   ");
	fprintf(fp,"SOURCE TYPE      : %s\n", nd_source_type_desc);
	fprintf(fp,"                   ");
	fprintf(fp,"SOURCE FROM      : %s\n", nd_source_fr_desc);
	fprintf(fp,"                   ");
	fprintf(fp,"SOURCE TO        : %s\n", nd_source_to_desc); */

	/***********added for globalisation start***************************/
	
	rec_len = strlen(local_legend[8]);
    print_space(35, rec_len,1);
    fprintf(fp,"%s : %s\n", local_legend[8], nd_source_type_desc);

	rec_len = strlen(local_legend[9]);
    print_space(35, rec_len,1);
    fprintf(fp,"%s : %s\n", local_legend[9], nd_source_fr_desc); 

	rec_len = strlen(local_legend[10]);
    print_space(35, rec_len,1);
    fprintf(fp,"%s : %s\n", local_legend[10], nd_source_to_desc); 

    /***********added for globalisation End***************************/

	/* --End   -- Added by Sai Dutt on 13.09.2006 */

	//fprintf(fp,"                   ");
	//fprintf(fp,"OPTION SELECTED  : %s\n", nd_option_desc);
    rec_len = strlen(local_legend[11]); //added for globalisation
    print_space(35, rec_len,1); //added for globalisation
    fprintf(fp,"%s : %s\n", local_legend[11], nd_option_desc); //added for globalisation

	if (strcmp(nd_option.arr, "C") == 0)
	{
		//Commented for globalisation
		/*fprintf(fp,"                   ");
		fprintf(fp,"CATEGORY FROM    : %s\n", nd_category_fr_desc);
		fprintf(fp,"                   ");
		fprintf(fp,"CATEGORY TO      : %s\n", nd_category_to_desc);*/
		
		/**************Added for globalisation Start*************/
		rec_len = strlen(local_legend[25]);
		print_space(35, rec_len,1);
		fprintf(fp,"%s : %s\n", local_legend[25], nd_category_fr_desc);

		rec_len = strlen(local_legend[26]);
		print_space(35, rec_len,1);
		fprintf(fp,"%s : %s\n", local_legend[26], nd_category_to_desc); 
        /**************Added for globalisation End*************/
	
	}

	fprintf(fp,"\n");
	fprintf(fp,"\f");
}

/** Print Header Informations **/

void print_header()
{
	static int first = 1;
	char buf[15];
	int col;
	
	strcpy(rep_title2, "");

	if (first)
	{
		memset(hdr_line1, ' ', REP_WIDTH+1);
        memset(hdr_line2,' ',REP_WIDTH+1);
        memset(hdr_line4,' ',REP_WIDTH+1);
		memset(hdr_line5,'-',REP_WIDTH);
		hdr_line5[REP_WIDTH] = '\0';
		strncpy(hdr_line1,"MDL : RL",8);
        col = (int)(REP_WIDTH-strlen(d_acc_entity_name.arr))/2;
        strncpy(hdr_line1+col,d_acc_entity_name.arr,strlen(d_acc_entity_name.arr));
        
		EXEC SQL EXECUTE
		DECLARE
			t_date   date;
		BEGIN
			//t_date := GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
			//:d_sysdate1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
			:d_sysdate1 :=sm_convert_datetime_2t(SYSDATE,:language_id);
		END;
		END-EXEC;

		col = (REP_WIDTH-strlen(d_sysdate1.arr));
        strcpy(hdr_line1+col,d_sysdate1.arr);
    
        strncpy(hdr_line2,"OPR :",5);
        strcpy(hdr_line2+6,d_user.arr);
	}

    memset(hdr_line3,' ',REP_WIDTH+1);

    strncpy(hdr_line3,"REP : RLRCYSTS",14);
	
	strcpy(rep_title1,local_legend[1]);//added for internalisation
	
    col = (int)(REP_WIDTH-strlen(rep_title1))/2;
    strncpy(hdr_line3+col,rep_title1,strlen(rep_title1));
    
	//sprintf(buf,"PAGE : %4d",page_no++);
	sprintf(buf,"%s : %4d",local_legend[2], page_no++); // added for globalisation

    strcpy(hdr_line3+(REP_WIDTH-strlen(buf)),buf);

    col = (int)(REP_WIDTH-strlen(rep_title2))/2;
    strcpy(hdr_line4+col,rep_title2);


	if(first)
        fprintf(fp,"%s\n",hdr_line1);
    else
	{
        fprintf(fp,"\n");
	    fprintf(fp,"%s\n",hdr_line1);
	}

    fprintf(fp,"%s\n",hdr_line2);
    fprintf(fp,"%s\n",hdr_line3);
    fprintf(fp,"%s\n",hdr_line4);
    fprintf(fp,"%s\n",hdr_line5);

    first = 0;

}

/** Print Page Header info for all the Pages **/

void print_page_header()
{
	print_header();
	line_no += 5;
}

/** Print Column Heading **/

void print_col_heading()
{
	//fprintf(fp,"------------------------------------------------------------------------------\n");
	//fprintf(fp,"Type                                       Cases   Smears    Special Stain    \n");
	fprintf(fp,"%4.4s                                      %5.5s   %6.6s    %13.13s    \n",local_legend[12], local_legend[13], local_legend[14],local_legend[15]);
	fprintf(fp,"------------------------------------------------------------------------------\n");
	line_no += 3;
}

	
/** Generate File Name **/

gen_file_name()
{
	strcpy(nd_file_name.arr, WORKING_DIR);
	nd_file_name.len = strlen(nd_file_name.arr);

	strcat(nd_file_name.arr, OUTPUT_FILE_NAME);
	nd_file_name.len = strlen(nd_file_name.arr);

	if ((fp = fopen(nd_file_name.arr, "w")) == NULL)
	{
		sprintf(string_var,"Error while opening file %s\n", nd_file_name.arr);
		disp_message(ERR_MESG,string_var);
		proc_exit();
	}

}
/** Get the Category Desc **/
get_category_desc(category_cd)
char *category_cd;
{
	
	strcpy(d_category_where.arr, category_cd);
	d_category_where.len = strlen(d_category_where.arr);

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL SELECT LONG_DESC
	         INTO :d_category_desc
			 FROM RL_CATEGORY_CODE_LANG_VW
			 WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
			 AND SECTION_CODE = :nd_section_code
			 AND CATEGORY_CODE = :d_category_where
			 AND language_id = :language_id;

	d_category_desc.arr[d_category_desc.len]   = '\0';

	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG, "Oracle error at get_category_desc() occured....\n");
	proc_exit();
}

/** Get The Workgroup desc **/
get_workgroup_desc(work_grp)
char *work_grp;
{
	strcpy(d_workgroup_where.arr, work_grp);
	d_workgroup_where.len = strlen(d_workgroup_where.arr);

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL SELECT LONG_DESC 
	         INTO :d_workgroup_desc
			 FROM RL_OUTST_WORK_GROUP_lang_vw
			 WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
			 AND SECTION_CODE = :nd_section_code
			 AND OUTST_WORK_GROUP_CODE = :d_workgroup_where
			 and language_id = :language_id;
			 

	d_workgroup_desc.arr[d_workgroup_desc.len] = '\0';

	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG, "Oracle error at get_workgroup_desc() occured....\n");
	proc_exit();

}

/** Get the Section Desc **/
void get_section_desc()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL SELECT SHORT_NAME
	         INTO :nd_section_desc 
			 FROM RL_SECTION_CODE_lang_vw
			 WHERE SECTION_CODE = :nd_section_code
			 AND language_id = :language_id;

	nd_section_desc.arr[nd_section_desc.len]  = '\0';

	return;

err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ORA_MESG, "Oracle error at get_section_desc occured....\n");
	proc_exit();

}

/** To Prepare New page **/

void prepare_new_page()
{
   fprintf(fp,"\n");
   fprintf(fp,"\f");
   line_no = 1;

   print_page_header();
   print_col_heading();

}

/** to print the last line of the report **/
void end_report()
{
  int rec_len;

  fprintf(fp,"\n");  
  //fprintf(fp,"                      ******** End of Report *********");
  rec_len = strlen(local_legend[16]);//added for globalisation
  print_space(35, rec_len,1);//added for globalisation
  fprintf(fp,"******* %s *******\n", local_legend[16]); // added for globalisation
  fprintf(fp,"\n");
  fprintf(fp,"\f");
}

/** Check for Page Break **/

chk_break()
{
	if ((line_no + 1) >= MAX_LINES)
	{
		prepare_new_page();
	}
}

/** Get the version **/

get_version_no()
{
     d_version_no.arr[0] = '\0';
     d_version_no.len    =  0;

     strcpy(d_version.arr,"VER : ");

	 EXEC SQL EXECUTE 
	      begin
			if SM_INSTALLATION_TAB_CHECK THEN
			   :l_tab_exists := 1;
			else
			   :l_tab_exists := 0;
			end if;
		  end;
	 END-EXEC;


    if (l_tab_exists) 
    {
	    EXEC SQL SELECT VERSION_NO INTO :d_version_no 
                 FROM   SM_INSTALLATION; 
        d_version_no.arr[d_version_no.len] = '\0';
    }
    else
	    strcpy(d_version_no.arr,"2.1");

	    strcat(d_version.arr,d_version_no.arr);


    if (OERROR)
	{
	    strcpy(d_version_no.arr,"2.1");
	    strcat(d_version.arr,d_version_no.arr);
    }

}

/*** added for globalisation ******/
	print_space(int aa, int bb, int cc)
	{
		if (cc ==1)
		{
  			for(i=1;i <= (aa - bb) ;i++)
			{
				fprintf(fp,"%s"," ");
			}	
		}
		else if (cc ==0)
		{
  			for(i= (aa - bb);i <= aa ;i++)
			{
				fprintf(fp,"%s","-");
			}	
		}
	}
/*** added for globalisation ******/


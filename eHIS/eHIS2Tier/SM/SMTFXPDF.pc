/************************************************************************************
*    
*	Name			SMTFXPDF.PC
*
*	Author			MEDICOM R&D Team, Muscat.
*
*	Purpose			MEDICOM Print Server
*					to handle server based print routing.
*
*   =================================================================================
*	Input Parameters		 					Remarks
*   =================================================================================
*	1. DB Connect String (User/Password@DBName)	Mandatory
*	2. Date Time								Mandatory
*	3. Session Id								Mandatory
*	4. Facility ID								Mandatory
*	5. Priority ID								Mandatory
*	6. Serviced Request ID						Mandatory
*
*   =================================================================================
*	Modification History  
*   =================================================================================
*	Date			Person		Remarks
*   =================================================================================
*
*	
*
************************************************************************************/

/*
* Include header files.
*/

# include <windows.h>
# include <winuser.h>
# include <winspool.h>
# include <malloc.h>
# include <assert.h>
# include <stdio.h>
# include <dos.h>
# include <crtdbg.h>
# include <stdlib.h>
# include <conio.h>
# include <string.h>
# include <time.h>
# include <sys/stat.h>
# include <debug.h>
# include <process.h>
# include <oci.h>

/*
* Define constants.
*/
# define OERROR			(sqlca.sqlcode < 0)
# define RESOURCE_BUSY  (sqlca.sqlcode == 54)
# define NODATAFOUND sqlca.sqlcode==1403

void	ProcessPDF(void);		
void	PurgeOldRequests(void);
int		RestartProgram(void);					

HWND		hwnd;
WNDCLASS	wndclass;

char GVErrorMessage[200];
char GVArguments[512];
char GVPgmName[64];
char GVCmd[1024];
int  GVSpawnReturnCode = 1;
int  GVIsCreationSuccess = 0;
int  GVIsTracing;
int  RestartInterval;				// Assign BVRestartInterval

/*
* Declare SQL bind variables.
*/
EXEC SQL BEGIN DECLARE SECTION;
	varchar		BVComputerName[16];			// For Program Tracing

	int		 BVElapsedTime;				// To get the elapsed time since last start of the program.
	char	 BVMachneNme[16];
	varchar	 bv_cmd_line [200];			// Command line string
	varchar	 BVStartedByID [21];
	varchar	 bv_next_start_time [15];

	varchar  BVUidPwd[132];				// i/p parameter
	varchar	 BVModuleID [2];		
	varchar  BVDateTime[22];			// i/p parameter
	varchar  BVSessionID[20];			// i/p parameter		
	varchar	 BVFacilityID [2];			// i/p parameter
	varchar	 BVPriorityID [4];			// i/p parameter
	varchar	 BVServicedRequestID[32];	// i/p parameter

	varchar	 BVDocumentID [8];		/* Required for RegisterError */
	varchar	 BVModuleID1[2];		/* Required for RegisterError */

	//varchar  BVRowID[31];

	//varchar	 BVRequestFacilityID [2];			// Added by Aparna -- Cursor parameter 
	varchar	 BVWorkstationID[64];
	varchar  BVFileName[152];
	varchar  BVOnlinePrintName[10];
	varchar  BVLocationType[4];			
	varchar  BVLocationCode[8];			
	varchar  BVPrintDate[22];
	varchar  BVWs_No[31];				
	varchar  BVPrinter_ID[31];				
	varchar  BVPrinter_Name[61];				
	varchar  BVDest_Queue_Name[61];				
	varchar  BVPgmID[22];
	varchar  BVParameterID[50];
	varchar  BVRestartInterval[8]; 
	varchar  BVErrorText[200];

	varchar  BV_Error_Text[501];
    varchar  BVReport_Output_Dir[120];
    varchar  BVerror_text[501];
	varchar  BVUserId[31];
   	varchar	 BVNewVersionYN[2];   	// TO check the MEDICOM version

	varchar  BVRequestSerialNumber[15];
	varchar  BVMailRequestSerialNo[15];
	varchar  BVRequestFacilityID[3];
	varchar  BVUserID[31];
	varchar  BVMachineName[16];
	varchar  BVWorkStationID[31];
	varchar  BVProgramID[31];
	varchar  BVRowID[31];
	varchar  BVReportType[2];
	varchar  BVPdfName[150];
	varchar  BVRequestStatus[2];
	varchar  BVPdfPassword[65];
	varchar  BVPassword[65];
	varchar GVRequestStatus[50];
	
	long	 BVSleepTime;
	int      BVNoOfPendingRequests;

	/* Variables to read clob data */

	OCIClobLocator *BVReportText;
	int clob_len=0 , offset = 1;

	/*buffer to store the BLOB value and then write to the file from*/
		
	unsigned int amt=0 ;
	unsigned char buffer[500] ;
	
	EXEC SQL VAR buffer IS VARCHAR2(500);

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

/* 
* Main Window program
*/
int WINAPI WinMain(HINSTANCE  hInstance,HINSTANCE  hPrevInstance,
    LPSTR  lpCmdLine,int  nShowCmd)
{
	char LVFunctionName[30];
	char LVSeparator[3]= " " ;
	char *LVUidPwd,*LVDateTime, *LVSessionID,*LVFacilityID, *LVPriorityID, *LVServicedRequestID;
	int  LVContinue=1;
   	char LVMachineName[20];
	DWORD LVMachineNo = 20;
	struct _stat LVFileStat;
	int LVResult;
	char *LVStrBuf;
	   
	/*
	* Initialize Parameters.
	*/
	BVUidPwd.arr[0]				= '\0';
	BVSessionID.arr[0]			= '\0';
	BVDateTime.arr[0]			= '\0';
	BVFacilityID.arr[0]			= '\0';
	BVPriorityID.arr[0]			= '\0';
	BVServicedRequestID.arr[0]	= '\0';

	BVUidPwd.len				= 0;
	BVDateTime.len				= 0;
	BVSessionID.len				= 0;
	BVFacilityID.len			= 0;
	BVPriorityID.len			= 0;
	BVServicedRequestID.len		= 0;

	/*
	* Load parameters into local variables.
	*/
	LVUidPwd			= strtok(lpCmdLine,LVSeparator);
	LVDateTime			= strtok(NULL,LVSeparator);
	LVSessionID			= strtok(NULL,LVSeparator);
	LVFacilityID		= strtok(NULL,LVSeparator);
	LVPriorityID		= strtok(NULL,LVSeparator);
	LVServicedRequestID	= strtok(NULL,LVSeparator);
	
	/*
	* Exit if any mandatory parameter is missing.
	*/
	if(LVUidPwd==NULL || LVDateTime==NULL || LVSessionID==NULL || LVFacilityID==NULL || LVPriorityID==NULL || LVServicedRequestID==NULL )
	{
		exit(0);
	}
	
	/*
	* Assign parameters to bind variables.
	*/
	strcpy(BVUidPwd.arr,LVUidPwd);
	BVUidPwd.len = strlen(BVUidPwd.arr);

	strcpy(BVDateTime.arr,LVDateTime);
	BVDateTime.len = strlen(BVDateTime.arr);

	strcpy(BVSessionID.arr,LVSessionID);
	BVSessionID.len = strlen(BVSessionID.arr);

	strcpy(BVFacilityID.arr,LVFacilityID);
	BVFacilityID.len = strlen(BVFacilityID.arr);

	strcpy(BVPriorityID.arr,LVPriorityID);
	BVPriorityID.len = strlen(BVPriorityID.arr);

	strcpy(BVServicedRequestID.arr,LVServicedRequestID);
	BVServicedRequestID.len = strlen(BVServicedRequestID.arr);
	
	/*
	* BVDocumentID and BVModuleID1 - Required for RegisterError().
	* Not input parameters.
	*/
	strcpy(BVDocumentID.arr,"SMTFXPDF");			
	BVDocumentID.len = strlen(BVDocumentID.arr);	
	strcpy(BVModuleID1.arr,"SM");			
	BVModuleID1.len = strlen(BVModuleID1.arr);	

	/*
	* Create Window
	*/
	wndclass.style			= CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc    = NULL;
	wndclass.cbClsExtra		= 0;
	wndclass.cbWndExtra		= 0;
	wndclass.hInstance		= hInstance;
	wndclass.hIcon			= NULL;  //LoadIcon ( NULL, IDI_APPLICATION );
	wndclass.hCursor		= NULL;  //LoadCursor ( NULL, IDC_ARROW);
//	wndclass.hbrBackground	= GetStockObject (WHITE_BRUSH);
	wndclass.hbrBackground	= (HBRUSH) GetStockObject (LTGRAY_BRUSH);
	wndclass.lpszMenuName	= NULL;
	wndclass.lpszClassName	= "Generating Pdf";
	RegisterClass ( &wndclass );

	hwnd = CreateWindow("Fax Print Server",(LPSTR)NULL,
                         WS_POPUP | WS_DLGFRAME,170,190,300,100,
                         (HWND)NULL,(HMENU)NULL,(HANDLE)hInstance,
						 (LPSTR) lpCmdLine);

	/*
	* Connect to database.
	*/
	EXEC SQL CONNECT :BVUidPwd;	
	if(sqlca.sqlcode < 0)
	{
		MessageBox(hwnd,"Unable to connect to oracle.","Error",MB_OK|MB_ICONSTOP);
		exit(0);
	}

	set_meduser_role();

	/*
	* Enable or disable tracing.
	*/
	strcpy(GVProgramID , "SMTFXPDF");	
	EnableOrDisableTracing();
	GVIsTracing = IS_TRACING; // For later usage

	/*
	* Display arguments.
	*/
	if (IS_TRACING)
	{
		strcpy(LVFunctionName,"WinMain");		
		Trace(LVFunctionName,"Begin");

		LVResult = _stat(_pgmptr, &LVFileStat);
		if (LVResult == 0)
		{	
			LVStrBuf = strtok(ctime( &LVFileStat.st_mtime ),"\n");	
			sprintf(GVTraceMsg,"File Name=[%Fs]  TimeStamp=[%s]  Size=[%ld Bytes]", _pgmptr, LVStrBuf , LVFileStat.st_size );
			Trace(LVFunctionName,GVTraceMsg);
		}


		sprintf(GVTraceMsg,"BVUidPwd=[%s] BVDateTime=[%s] BVSessionID=[%s] BVFacilityID=[%s] BVPriorityID=[%s] BVServicedRequestID=[%s]",
		BVUidPwd.arr, BVDateTime.arr, BVSessionID.arr, BVFacilityID.arr, BVPriorityID.arr, BVServicedRequestID.arr);
		Trace(LVFunctionName,GVTraceMsg);
	}

	/*
	* Get workstation id.
	*/
	BVWorkstationID.arr[0] = '\0';	
	BVWorkstationID.len = 0;
	EXEC SQL EXECUTE 
	BEGIN 
		WORKSTATION.get_workstation_id
		(
			:BVFacilityID,
			:BVWorkstationID
		);
	END ;
	END-EXEC ; 	
	
	if ORACLE_ERROR 
	{
		sprintf(GVTraceMsg,"Error at WORKSTATION.get_workstation_id: [%s]",sqlca.sqlerrm.sqlerrmc);
		RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName, "End");
		return 0;
	}

	BVWorkstationID.arr[BVWorkstationID.len] = '\0';
	if (IS_TRACING)
	{
		sprintf(GVTraceMsg,"BVWorkstationID=[%s]",BVWorkstationID.arr);
		Trace(LVFunctionName,GVTraceMsg);
	}

	/*
	*  Get computer name.
	*/

	GetComputerName(LVMachineName, &LVMachineNo);
	strcpy(BVComputerName.arr, LVMachineName);
	BVComputerName.len = strlen(BVComputerName.arr);
	if (IS_TRACING)
	{
		sprintf(GVTraceMsg,"BVComputerName=[%s]", BVComputerName.arr);
		Trace(LVFunctionName,GVTraceMsg);
	}

	/*
	*  Get sleep time.
	*/
	EXEC SQL 
	SELECT 	processing_interval
	INTO	:BVSleepTime
	FROM	sy_prog_id
	WHERE	pgm_id = 'SMTFXPDF'; 

	if ORACLE_ERROR 
	{
		sprintf(GVTraceMsg,"Error at SELECT from sy_prog_id : [%s]",sqlca.sqlerrm.sqlerrmc);
		RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
		BVSleepTime = 0;
	}
	else if ORACLE_NODATAFOUND
	{
		BVSleepTime = 0;
	}
	
	if (IS_TRACING)
	{
		sprintf(GVTraceMsg,"BVSleepTime=[%d]", BVSleepTime);
		Trace(LVFunctionName,GVTraceMsg);
	}

	/*
	* Start processing (loop)
	*/
	LVContinue = 1;
	while(LVContinue == 1)
	{
		
		if (IS_TRACING) Trace (LVFunctionName,"Calling ProcessPDF() ...");
		ProcessPDF();

		if (IS_TRACING) Trace (LVFunctionName,"Calling PurgeOldRequests() ...");
		PurgeOldRequests();

		if (IS_TRACING) 
		{
			sprintf(GVTraceMsg,"Sleeping for %d msecs...", BVSleepTime);
			Trace (LVFunctionName, GVTraceMsg);
		}
		Sleep(BVSleepTime);

		if (IS_TRACING) Trace (LVFunctionName,"Checking whether process is to be continued ...");
		EXEC SQL 
		SELECT	machine_name, started_by_id
		INTO	:BVMachneNme, :BVStartedByID
		FROM	SY_BG_PROCESS_CONTROL
		WHERE	operating_facility_id = :BVFacilityID
		AND		pgm_id  = 'SMTFXPDF' 
		AND		priority = :BVPriorityID
		AND		serviced_requests = :BVServicedRequestID
		AND		STARTED_DATE IS NOT NULL 
		AND		TO_CHAR(STARTED_DATE,'DDMMYYHH24MISS') = :BVDateTime;

		if(ORACLE_NODATAFOUND || ORACLE_ERROR)
		{
			LVContinue = 0;
		}

	} /* while(LVContinue == 1) */

	if (IS_TRACING)
	{
		sprintf(GVTraceMsg,"Background process is not running. Program aborting.");
		Trace(LVFunctionName,GVTraceMsg);
		Trace(LVFunctionName,"End");
	}

	exit(0);

} /* End of WinMain */


/*
*
*	Function	PurgeOldRequests
*
*	Author		K S Sundar
*
*	Date		May 11, 2003
*
*	Purpose		Purges the following for processed requests, 
*					which are older than 2 days:
*				1. Physical files
*				3. Print requsts from SM_PDF_GENERATE_REQUST
*
*/
void PurgeOldRequests(void)
{

	char LVFunctionName[30];
	int LVContinue = 1;
	BVNoOfPendingRequests  = 0;

	if (IS_TRACING) 
	{
		strcpy(LVFunctionName,"PurgeOldRequests()");
		Trace(LVFunctionName,"Begin");
	}

	EXEC SQL  
	SELECT	COUNT(*) 
	INTO	:BVNoOfPendingRequests 
	FROM	SM_PDF_GENERATE_REQUEST
	WHERE	REQUEST_STATUS IS NOT NULL 
	AND		SYSDATE - PDF_GENERATION_DATE >= 2;

	if (BVNoOfPendingRequests == 0)
	{
		if (IS_TRACING) Trace(LVFunctionName,"Nothing to purge !!");
	}
	else
	{
		if (IS_TRACING) Trace(LVFunctionName,"Purging old files.");

		EXEC SQL  
		DECLARE DEL_CUR CURSOR  FOR				
		SELECT  PDF_FILE_NAME
		FROM    SM_PDF_GENERATE_REQUEST
		WHERE   REQUEST_STATUS IS NOT NULL 
		AND		SYSDATE - PDF_GENERATION_DATE >= 2;  

		if ORACLE_ERROR 
		{
			sprintf(GVTraceMsg,"Error at DECLARE cursor : [%s]",sqlca.sqlerrm.sqlerrmc);
			RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
			if (IS_TRACING) Trace(LVFunctionName, "End");
			return 0;
		}


		EXEC SQL OPEN DEL_CUR; 
		if ORACLE_ERROR 
		{
			sprintf(GVTraceMsg,"Error at OPEN cursor : [%s]",sqlca.sqlerrm.sqlerrmc);
			RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
			if (IS_TRACING) Trace(LVFunctionName, "End");
			return 0;
		}

		/*
		* Purge the physical files which are older than 2 days.
		*/
		while(LVContinue!=0)
		{
			BVFileName.arr[0] = '\0';
			BVFileName.len    = 0;

			EXEC SQL FETCH DEL_CUR INTO :BVFileName;

			if (ORACLE_ERROR || ORACLE_NODATAFOUND)
			{
				/*
				* Register error
				*/
				if ORACLE_ERROR 
				{
					sprintf(GVTraceMsg,"Error at FETCH cursor : [%s]",sqlca.sqlerrm.sqlerrmc);
					RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
				}
				LVContinue = 0;
				EXEC SQL CLOSE DEL_CUR;
			}
			else
			{
				BVFileName.arr[BVFileName.len] = '\0';
				DeleteFile(BVFileName.arr);
			}
		}

		EXEC SQL 
		DELETE 
		FROM	SM_PDF_GENERATE_REQUEST
		WHERE	REQUEST_STATUS IS NOT NULL 
		AND 	SYSDATE - PDF_GENERATION_DATE >= 2;

		if (ORACLE_ERROR)
		{
			sprintf(GVTraceMsg,"Error at DELETE from SM_PDF_GENERATE_REQUEST : [%s]",sqlca.sqlerrm.sqlerrmc);
			RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","Calculate Elapsed Time", GVTraceMsg);
			if (IS_TRACING) Trace(LVFunctionName, "End");
			return 0;
		}

		EXEC SQL COMMIT;
	}

	if (IS_TRACING) Trace(LVFunctionName,"End");

} /* End of PurgeOldRequests */


/*
*
*	Function	ProcessPDF
*
*	Author		K S Sundar
*
*	Date		May 11, 2003
*
*	Purpose		Processes the pending requests as follows:
*
*				For each fax mail to be sent,
*				1. Creates a PDF file by taking the data from the ( SM_PDF_GENERATE_REQUEST ) table.
*				2. Updates SM_PDF_GENERATE_REQUEST.REQUEST_STATUS with file creation status. 
*
*/
void ProcessPDF(void)
{
	/* Variables used for text file creation of PDF */

	EXEC SQL BEGIN DECLARE SECTION;
		char in_filename[80] = "\0";
	    char out_filename[80] = "\0";
	EXEC SQL END DECLARE SECTION;

	FILE *fp;
	//Upto here
	
	int		LVContinue,i;
	int		LVRequestCtr;
	char	LVFunctionName[30];
	char	*wordir;
	int	 LVProcessReturnCode;

	if (IS_TRACING) 
	{
		strcpy(LVFunctionName,"ProcessPDF");
		Trace(LVFunctionName,"Begin");
	} 
	
	BVNewVersionYN.arr[0] = '\0';
	BVNewVersionYN.len = 0;
	strcpy(BVNewVersionYN.arr,"N");
	if (IS_TRACING) Trace(LVFunctionName,"Checking Medicom Version ...");
		EXEC SQL EXECUTE 
   		BEGIN 
			IF sm_installation_tab_check THEN
				:BVNewVersionYN := 'Y';
			ELSE
				:BVNewVersionYN := 'N';
			END IF;
		END ;
   		END-EXEC ;
		BVNewVersionYN.len = strlen(BVNewVersionYN.arr);
	
	if (IS_TRACING)
	{
		sprintf(GVTraceMsg,"Medicom Version=[%s]",BVNewVersionYN.arr);
		Trace(LVFunctionName, GVTraceMsg);
	}

	/*
	* Declare cursor for pending PDF requests.
	*/

	EXEC SQL  
	DECLARE REQUEST_CUR CURSOR  FOR
	SELECT  REQUEST_SRL_NO,
			MAIL_REQUEST_SRL_NO,
			OPERATING_FACILITY_ID,
			USER_ID,
			WORKSTATION_ID,
			REPORT_ID,
			ROWID,
			REPORT_TYPE,
			REPORT_TEXT,
			PDF_NAME,
			REQUEST_STATUS,
			PDF_PASSWORD
	FROM    SM_PDF_GENERATE_REQUEST
	WHERE   operating_facility_id = decode(:BVFacilityID,'*A',operating_facility_id ,:BVFacilityID)
	AND		request_status IS NULL;

	if ORACLE_ERROR 
	{
		sprintf(GVTraceMsg,"Error at DECLARE cursor : [%s]",sqlca.sqlerrm.sqlerrmc);
		RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName, "End");
		return 0;
	}

	/*
	* Open cursor.
	*/

	EXEC SQL OPEN REQUEST_CUR; 
	if ORACLE_ERROR 
	{
		sprintf(GVTraceMsg,"Error at OPEN cursor : [%s]",sqlca.sqlerrm.sqlerrmc);
		RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName, "End");
		return 0;
	}

	LVRequestCtr = 0;
	LVContinue = 1;

	while(LVContinue == 1)
	{
		
		/*
		* Initialize the bind variables.
		*/

		BVRequestSerialNumber.arr[0]= '\0';
		BVRequestSerialNumber.len	= 0;

		BVMailRequestSerialNo.arr[0]= '\0';
		BVMailRequestSerialNo.len	= 0;

		BVRequestFacilityID.arr[0]	= '\0';
		BVRequestFacilityID.len		= 0;

		BVUserID.arr[0]				= '\0';
		BVUserID.len				= 0;

		BVMachineName.arr[0]		= '\0';
		BVMachineName.len			= 0;

		BVWorkStationID.arr[0]		= '\0';
		BVWorkStationID.len			= 0;

		BVProgramID.arr[0]			= '\0';
		BVProgramID.len				= 0;

		BVRowID.arr[0]				= '\0';
		BVRowID.len					= 0;

		BVReportType.arr[0]			= '\0';
		BVReportType.len			= 0;

		BVPdfName.arr[0]			= '\0';
		BVPdfName.len				= 0;

		BVRequestStatus.arr[0]		= '\0';
		BVRequestStatus.len			= 0;

		BVPdfPassword.arr[0]		= '\0';
		BVPdfPassword.len			= 0;

			/* Allocate the CLOB host variable and select a CLOB which we will READ */

			EXEC SQL ALLOCATE :BVReportText ;
	
			EXEC SQL LOB OPEN :BVReportText READ WRITE;
			// Upto Here

		/*
		* Fetch the record.
		*/

		EXEC SQL 
		FETCH REQUEST_CUR INTO 
			:BVRequestSerialNumber,
			:BVMailRequestSerialNo,
			:BVRequestFacilityID,	
			:BVUserID,						
			:BVWorkStationID,		
			:BVProgramID,			
			:BVRowID,
			:BVReportType,			
			:BVReportText,			
			:BVPdfName,				
			:BVRequestStatus,
			:BVPdfPassword;		
				
		if (ORACLE_ERROR || ORACLE_NODATAFOUND)
		{
			/*
			* Register if error.
			*/
			if ORACLE_ERROR 
			{
				sprintf(GVTraceMsg,"Error at FETCH cursor : [%s]",sqlca.sqlerrm.sqlerrmc);
				RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
			}
	
			/*
			* No more records. Exit.
			*/
			LVContinue = 0;
			EXEC SQL CLOSE REQUEST_CUR;

		}
		else
		{
			BVRequestSerialNumber.arr[BVRequestSerialNumber.len]	= '\0';
			BVPdfName.arr[BVPdfName.len]							= '\0';
			
			BVRequestFacilityID.arr[BVRequestFacilityID.len]		= '\0'; 
			BVUserID.arr[BVUserID.len]								= '\0'; 
			BVWorkStationID.arr[BVWorkStationID.len]				= '\0'; 
			BVProgramID.arr[BVProgramID.len]						= '\0'; 
			BVRowID.arr[BVRowID.len]								= '\0';
			BVRequestStatus.arr[BVRequestStatus.len]				= '\0';
			BVReportType.arr[BVReportType.len]						= '\0';
			BVPdfPassword.arr[BVPdfPassword.len]					= '\0';

			if (IS_TRACING) 
			{	
				sprintf(GVTraceMsg,"BVRequestSerialNumber=[%s] BVRequestFacilityID=[%s] BVUserID=[%s] BVWorkStationID=[%s] BVProgramID=[%s] BVReportType=[%s] ",
				BVRequestSerialNumber.arr ,BVRequestFacilityID.arr, BVUserID.arr, BVWorkStationID.arr, BVProgramID.arr, BVReportType.arr);
				Trace(LVFunctionName,GVTraceMsg);
			}

			/*
			* Process the record.
			*/

			/********************************************************************/
			/*			Reading Pro*C Output Directory 			  */
			/*	Copy some temporary value to BVerror_text.arr to avoid 	  */
			/*	Fetched Column Value is Null Error                 		  */
			/********************************************************************/

			strcpy (BVerror_text.arr, "$test$");
			BVerror_text.len = strlen (BVerror_text.arr);
			BVerror_text.arr[BVerror_text.len] = '\0';

			strcpy (BVReport_Output_Dir.arr, "$test$");
			BVReport_Output_Dir.len = strlen (BVReport_Output_Dir.arr);
			BVReport_Output_Dir.arr[BVReport_Output_Dir.len] = '\0';


			strcpy (BVUserId.arr, BVUidPwd.arr); 
			strcpy (BVUserId.arr, strtok (BVUserId.arr, "/")); 
			BVUserId.len = strlen (BVUserId.arr);
			BVUserId.arr[BVUserId.len] = '\0';

			if (IS_TRACING)
			{
				sprintf(GVTraceMsg,"Calling get_report_output_directory ... BVUserId=[%s] BVWorkstationID=[%s] BVNewVersionYN=[%s]...", BVUserId.arr, BVWorkstationID.arr,BVNewVersionYN.arr );
				Trace(LVFunctionName, GVTraceMsg);
			}
			if (strcmp(BVNewVersionYN.arr,"N") == 0)
			{	
				wordir=(char*) malloc(200* sizeof(char));
				i=GetPrivateProfileString("Reports","dir","",wordir,200,"medicom.ini");
				wordir[i]='\0';
				strcpy(BVReport_Output_Dir.arr,wordir);
				BVReport_Output_Dir.len = strlen(BVReport_Output_Dir.arr);
				if (IS_TRACING)
				{
					sprintf(GVTraceMsg,"BVReport_Output_Dir=[%s]",BVReport_Output_Dir.arr);
					Trace(LVFunctionName,GVTraceMsg);
				}

			}
			else
			{
				EXEC SQL EXECUTE
				BEGIN
					appprint.get_report_output_directory (
						:BVUserId,
						:BVWorkstationID,
						:BVReport_Output_Dir,
						:BVerror_text);
				END;
				END-EXEC;			

			}
			if (IS_TRACING)
			{
				sprintf(GVTraceMsg,"BVUserId = [%s] BVWorkstationID=[%s]  BVReport_Output_Dir=[%s]  BVerror_text=[%s]  ",BVUserId.arr,BVWorkstationID.arr,BVReport_Output_Dir.arr,BVerror_text.arr);
				Trace(LVFunctionName,GVTraceMsg);
			}
			/********************************************************************/
			/*	Check the return value of BVerror_text.arr and if it is	  */
			/*	not equal to the Passed temporary value, raise an error       */
			/********************************************************************/

			BVerror_text.arr[BVerror_text.len] = '\0';
			if ( (BVerror_text.len > 0) && (strcmp (BVerror_text.arr, "$test$")) )
			{
			   sprintf (GVTraceMsg, "Error in Open_log_file (): %s", BVerror_text.arr);
			   RegisterError(BVFacilityID.arr, BVModuleID.arr, BVWorkstationID.arr, BVOnlinePrintName.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "",LVFunctionName, GVTraceMsg);
			   break;
			}

			BVReport_Output_Dir.arr[BVReport_Output_Dir.len] = '\0';
			if ( (BVReport_Output_Dir.len > 0) && (!strcmp (BVReport_Output_Dir.arr, "$test$")) )
			{
				sprintf (GVTraceMsg, "Report Directory Name not defined for %s Application User and/or %s Workstation",
					BVUserId.arr, BVReport_Output_Dir.arr);
				RegisterError(BVFacilityID.arr, BVModuleID.arr, BVWorkstationID.arr, BVOnlinePrintName.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "",LVFunctionName, GVTraceMsg);
				break;
			}

			if (sqlca.sqlcode == 1405 )
			{
				sprintf (GVTraceMsg, "Report Output Directory not defined");
				if (IS_TRACING)
				{
					sprintf(GVTraceMsg,"Report Output Directory not defined");
					RegisterError(BVFacilityID.arr, BVModuleID.arr, BVWorkstationID.arr, BVOnlinePrintName.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "",LVFunctionName, GVTraceMsg);
					break;
				}
			}

			//Upto Here (ReportOutputDirectory)
						
			strcpy(in_filename,"\0");

			strcpy(in_filename, BVReport_Output_Dir.arr);
			strcat(in_filename, BVPdfName.arr);
			strcat(in_filename, "-");
			strcat(in_filename, BVRequestSerialNumber.arr);
			
			if  ( strcmp(strlwr(BVReportType.arr),"t") == 0 )  
				strcat(in_filename, ".txt");
			else
				strcat(in_filename, ".html");
			
			/* --- Handling the clob variable --- */
			EXEC SQL LOB DESCRIBE :BVReportText GET LENGTH into :clob_len;

			EXEC SQL LOB ENABLE BUFFERING :BVReportText; 
				
			fp = fopen ( in_filename, "w" );

			if(fp == NULL)
			{
				if (IS_TRACING) 
				{
					sprintf(GVTraceMsg,"Error while opening file ...");
					Trace(LVFunctionName,GVTraceMsg);
				} 	
			}
			else
			{	
				if (IS_TRACING) 
				{
					sprintf(GVTraceMsg,"File Opened successfully ...");
					Trace(LVFunctionName,GVTraceMsg);
				}
			}
			
			if (clob_len < 500) 
				amt = clob_len;
			else
				amt = 500 ;

			offset = 1;
			clob_len = clob_len + 1;

			while (offset < clob_len)
			{

				EXEC SQL LOB READ :amt FROM :BVReportText AT :offset INTO :buffer;
								
				fwrite(buffer, 1, amt, fp);

				offset = offset + amt;
										
				if ((clob_len-offset) < 500) 
					amt = (clob_len - offset);
				else
					amt = 500 ;

			}

			EXEC SQL LOB DISABLE BUFFERING :BVReportText; 

			EXEC SQL LOB CLOSE :BVReportText; 

			EXEC SQL FREE :BVReportText; 

			fclose(fp);

			/* --- Upto Here --- */

			LVRequestCtr = LVRequestCtr + 1;
	
			/* Getting decrypted password */
			BVPassword.arr[0]		= '\0';
			BVPassword.len			= 0;
			
			EXEC SQL EXECUTE   
				BEGIN    
					SELECT APP_PASSWORD.DECRYPT(:BVPdfPassword) 
					INTO :BVPassword
					FROM DUAL;
				END;
			END-EXEC;

			if (IS_TRACING)
			{
				sprintf(GVTraceMsg,"BVUserId = [%s] BVWorkstationID=[%s]  BVPdfPassword=[%s] ",BVUserId.arr,BVWorkstationID.arr,BVPdfPassword.arr);
				Trace(LVFunctionName,GVTraceMsg);
			}

			BVPassword.arr[BVPassword.len] = '\0';

			GVIsCreationSuccess = 0;

			/*Report Output Directory part moved to front */

			/*
			* Check if the file exists.
			* Call PrintDocument if file exists.
			*/
			if ((fp = fopen (in_filename, "r")) == NULL)
			{
				GetMEDICOMMessage("SY2435",GVErrorMessage);
				sprintf (GVTraceMsg, "APP-SY2435 %s", GVErrorMessage);
				RegisterError(BVFacilityID.arr, BVModuleID.arr, BVWorkstationID.arr, BVOnlinePrintName.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "",LVFunctionName, GVTraceMsg);
			}
			else
			{ 
				fclose(fp);

				if (IS_TRACING) 
				{
					sprintf(GVTraceMsg,"Calling PDFUtility Program ...");
					Trace(LVFunctionName,GVTraceMsg);
				} 
				
				strcpy(out_filename,"\0");

				strcpy(out_filename, BVReport_Output_Dir.arr);
				strcat(out_filename, BVPdfName.arr);
				strcat(out_filename, "-");
				strcat(out_filename, BVRequestSerialNumber.arr);
				strcat(out_filename,".pdf");
					
				sprintf
				(
					GVArguments, "%s %s %s %s %s %s %s",
					"java","sam", in_filename, out_filename, BVReportType.arr, BVPassword.arr, BVRequestSerialNumber.arr
				);
					
				if (IS_TRACING)
				{
					sprintf(GVCmd,"Calling %s",GVArguments);
					Trace(LVFunctionName, GVCmd);
				}

				LVProcessReturnCode = system(GVArguments);
					
				if (LVProcessReturnCode)	// 1=Success   0=Failure
					GVIsCreationSuccess = 0;	// 1=Success   0=Failure
				else
					GVIsCreationSuccess = 1;

			}

			if (IS_TRACING)
			{
				sprintf(GVTraceMsg,"Creation Success?=[%d]",GVIsCreationSuccess);
				Trace(LVFunctionName,GVTraceMsg);
			}
			/*
			* Reset GVProramID, since it is a global
			* variable.
			*/
			strcpy(GVProgramID , "SMTFXPDF");						
			IS_TRACING = GVIsTracing;

			/*
			* Update SM_PDF_GENERATE_REQUEST with creation status.
			* REQUEST_STATUS = 'Y' if success
			* REQUEST_STATUS = 'E' if failed
			*/
			
			EXEC SQL 
			SELECT 	REQUEST_STATUS
			INTO	:GVRequestStatus
			FROM	SM_PDF_GENERATE_REQUEST
			WHERE	REQUEST_SRL_NO = :BVRequestSerialNumber; 

			if ORACLE_ERROR 
			{
				sprintf(GVTraceMsg,"Error at SELECT request status SM_PDF_GENERATE_REQUEST : [%s]",sqlca.sqlerrm.sqlerrmc);
				RegisterError(BVFacilityID.arr, BVModuleID1.arr, BVWorkstationID.arr, BVDocumentID.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "","WORKSTATION.get_workstation_id", GVTraceMsg);
				BVSleepTime = 0;
			}
			
			if ( strcmp(GVRequestStatus.arr,"Y") == 0)
			{
				EXEC SQL 
				UPDATE	SM_PDF_GENERATE_REQUEST
				SET		PDF_GENERATION_DATE = SYSDATE,
						TXT_HTML_FILE_NAME = :in_filename,
						PDF_FILE_NAME = :out_filename
				WHERE	Rowid = :BVRowID;
	
				/* Delete the intermediate file(txt/html) once the pdf is generated */
				DeleteFile(in_filename);

				if (IS_TRACING) Trace(LVFunctionName,"Updating SM_REPORT_FAX_MAIL_REQUEST.ATTACHMENT_REQUEST_STATUS to S");
				EXEC SQL 
				UPDATE	SM_REPORT_FAX_MAIL_REQUEST
				SET		ATTACHMENT_FILE_NAME = :out_filename,
						REPORT_FILE_NAME = :out_filename,
						ATTACHMENT_REQUEST_STATUS = 'S'							
				WHERE	REQUEST_SRL_NO = :BVMailRequestSerialNo;

			}		
			else
			{
				if (IS_TRACING) Trace(LVFunctionName,"Updating SM_REPORT_FAX_MAIL_REQUEST.REQUEST_STATUS to E");
				EXEC SQL 
				UPDATE	SM_REPORT_FAX_MAIL_REQUEST
				SET		ATTACHMENT_REQUEST_STATUS = 'E'
				WHERE	REQUEST_SRL_NO = :BVMailRequestSerialNo;

			}
			if (OERROR || NODATAFOUND ||  RESOURCE_BUSY ) 
			{
				sprintf(GVTraceMsg,"Error UPDATE SM_PDF_GENERATE_REQUEST : [%s]",sqlca.sqlerrm.sqlerrmc);
				RegisterError(BVFacilityID.arr, BVModuleID.arr, BVWorkstationID.arr, BVOnlinePrintName.arr,  BVFileName.arr, BVLocationType.arr, BVLocationCode.arr, "", "", "",LVFunctionName, GVTraceMsg);
			}
		}

		/*
		* Save the changes.
		*/
		EXEC SQL COMMIT;

	} /* while(LVContinue == 1) */

	if (LVRequestCtr == 0)
	{
		if (IS_TRACING) Trace(LVFunctionName,"No pending requests !!");
	}

	if (IS_TRACING)  Trace(LVFunctionName,"End");

} /* End of ProcessPDF */



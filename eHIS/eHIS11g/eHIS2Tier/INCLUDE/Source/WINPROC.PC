#include <process.h>
#include <windows.h>  
#include <stdlib.h> 
#include <dos.h>
#include <crtdbg.h>
#include <assert.h>
#include <time.h>

#define MAX_APPNAME_STRING		20
#define PC_START				1
#define PC_END				2
#define INFO_MESG				3
#define ERR_MESG				4
#define ORA_MESG				5  
#define DISP_MESG				6  


extern SQLDA *sqlald();

/********************************************************************/
/*                   SQL Declaration Section                        */
/*	Added by C. Ganesan on 24/10/2002 for reading Pro*C output	  */
/*	directory information
/********************************************************************/

/*Modified by shanmugam on 16/01/07 for internationlization */
/*Modification :-  l_language_id is added*/

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR l_uid_pwd[122],
		  l_user_id[91],
		  l_facility_id[3],
		  l_workstation_id[31],
		  l_dir_name[120],
		  l_param_id[31],
		  l_proc_viewer[120],
		  l_error_text[501],
		  l_language_id[4],
		  l_temp[50],
		  dup_l_uid_pwd[122];

int		  newversion;		/* Added by C. Ganesan on 25/05/2003 at 16:00
						   for checking the MEDICOM version */

EXEC SQL END DECLARE SECTION;


/********************************************************************/
/*                   Windows Declaration Section                    */
/********************************************************************/
char dup_user[40]="\0";
char szAppName[ MAX_APPNAME_STRING + 1 ];  

#ifdef __BORLANDC__
#pragma warn -par							 /*Turn off the warnings*/
#pragma warn -aus
LRESULT CALLBACK SampleWndProc(HWND, UINT, WPARAM, LPARAM);
#else
long FAR PASCAL SampleWndProc(HWND, unsigned, WORD, LONG);
#endif

BOOL ProcessOracleErrorCode(HWND);
BOOL SampleInit(HANDLE);

void proc_main (int, char **);
void disp_message ( int, char *);
void open_log_file();
void proc_exit();
void get_init_variables_old();
void get_init_variables_new();


HINSTANCE hInst = NULL;					// Handle to the application instance
HWND hWnd = NULL;						// Handle to the application main window

static HDC         hdc;
static PAINTSTRUCT ps;
static RECT        rect;

char               tstrCmdLine[256];
char               *pstrCmdLine[50];
char               LOG_FILE_NAME[150]; 
char               OUTPUT_FILE_NAME[150]; 
char               REP_FILE_NAME[150]; 
char               PROCESS_NAME[10]; 
char               WORKING_DIR[80];
char               line_char[80];
char	  	       exe_file_name[75]; 
char               szProcView[80];
int			 noparam=0;
int			 first_time=1;

FILE               *log_fp;



/********************************************************************/
/*                   Pro*C and Windows Code.                        */
/********************************************************************/

/*
 * SampleInit
 *
 * Do startup initialization for the sample application.
 */

BOOL SampleInit(in_hInst)
HANDLE in_hInst;
{
   WNDCLASS SampleClass;

    lstrcpy ( (LPSTR)szAppName, "WinProc");

    SampleClass.style = CS_HREDRAW | CS_VREDRAW;
    SampleClass.lpfnWndProc = (WNDPROC)SampleWndProc;
    SampleClass.cbClsExtra = 0;
    SampleClass.cbWndExtra = 0;
    SampleClass.hIcon = NULL;
    SampleClass.hInstance = in_hInst;
    SampleClass.hCursor = NULL;
    SampleClass.hbrBackground = (HBRUSH) GetStockObject (LTGRAY_BRUSH);
    SampleClass.lpszMenuName = NULL;
    SampleClass.lpszClassName = szAppName;
    if (!RegisterClass(&SampleClass))
        return FALSE;

    return( TRUE );

} /*SampleInit*/

/*
 *WinMain
*/

int WINAPI WinMain (
               HINSTANCE hInstance,     // Handle to the current instance
               HINSTANCE hPrevInstance, // Handle to the previous instance
               LPWSTR lpszCmdLine,      // Pointer to the command line
               int cmdShow)             //  Shows the state of the window

{ 

    MSG msg;
	
    if (hPrevInstance)
        return( FALSE );

    if (!SampleInit(hInstance))
        return( FALSE );

    hInst = hInstance;

    hWnd = CreateWindow(szAppName,
                        NULL,
                        WS_POPUP | WS_DLGFRAME,  // Window style
                        170,
                        190,
                        300,
                        100,
                        NULL,
                        NULL,
                        hInst,
                        (LPWSTR) lpszCmdLine);

    ShowWindow(hWnd, SW_SHOWNORMAL);
    UpdateWindow(hWnd);

    while (GetMessage(&msg, NULL, 0, 0)) 
    	{
        	TranslateMessage(&msg);
	        DispatchMessage(&msg);
        } /*while*/

    return(msg.wParam );

} /*WinMain*/

/*
 *SampleWndProc
*/

LRESULT CALLBACK SampleWndProc(HWND hWnd, UINT message, WPARAM wParam,
    LPARAM lParam)

{                            

	char  module_name[75], *ptr;

    switch (message) {

        case WM_CREATE :
            hInst = ((LPCREATESTRUCT) lParam)->hInstance;

	        /* Command line copy */
            strcpy ( tstrCmdLine, (LPSTR)
			(((LPCREATESTRUCT) lParam)->lpCreateParams));
                                                                 
			
            return TRUE;
	    case WM_PAINT :     
	      if ( first_time )
	       {      
		    first_time = 0;		 
    	    /* Command line parsing */		    
			GetModuleFileName ( hInst, exe_file_name, sizeof(exe_file_name));
			strcpy ( module_name, exe_file_name);
			ptr = strtok ( module_name, "\\");
			pstrCmdLine[noparam] = ptr;			
			while ((ptr = strtok (0, "\\")) != NULL )
				   pstrCmdLine[noparam] = ptr;       
            	pstrCmdLine[++noparam] = strtok ( tstrCmdLine, " ");
            	while ( ( pstrCmdLine[++noparam] = strtok (0 , " ") ) != NULL ) 
				;

		/********************************************************************/
		/*	Added following code to assign user information for connecting*/
		/*	to Oracle database, which will be used for retrieving 	  */
		/*	workstation, directory and Pro*C viewer information form 	  */
		/*	database									  */
 		/********************************************************************/
			strcpy ( l_uid_pwd.arr, pstrCmdLine[1]); 
			l_uid_pwd.len = strlen (l_uid_pwd.arr);
			l_uid_pwd.arr[l_uid_pwd.len] = '\0';

		/********************************************************************/
		/*	Added following code to assign facility identifier information*/
		/*	which will be used for retrieving workstation identifier based*/
		/*	on facility.								  */
		/*	Code added by C. Ganesan on 24/03/2003 at 15:10			  */
 		/********************************************************************/
			strcpy ( l_facility_id.arr, pstrCmdLine[4]); 
			l_facility_id.len = strlen (l_facility_id.arr);
			l_facility_id.arr[l_facility_id.len] = '\0';

       	    hdc = BeginPaint ( hWnd, &ps );
		    SetBkColor ( hdc, RGB(192,192,192) );  
		    SetTextColor ( hdc, RGB(0,0,0) );
		    GetClientRect ( hWnd, &rect );
		    open_log_file();     
                OUTPUT_FILE_NAME[0] = '\0';
            
            #ifdef INIT_MESG
               disp_message ( PC_START, INIT_MESG );
            #else                        
		       disp_message ( PC_START, "Process started.  Please wait ...");
            #endif           
	 	    proc_main(noparam, pstrCmdLine);      /* Calling Pro*C program */                       
		    disp_message ( PC_END, "Process Successfully Completed."); 	    
		    EndPaint ( hWnd, &ps );
	       }
	       break;
        case WM_CLOSE :
            fclose ( log_fp);
            DestroyWindow (hWnd);
            break; /* Let this pass thru so default operation can occur. */
        case WM_DESTROY :
            PostQuitMessage(0);
            break;			
        default:
            break;
        } /*switch*/
    /* Performs default operation. */
    return(DefWindowProc(hWnd, message, wParam, lParam) );
} /*SampleWndProc*/

void open_log_file ()
{  
 char uid[31];
 char tmpbuf[128];
 char sql_operation[100];


      disp_message ( PC_START, "Process Initialization" );

/********************************************************************/
/*			    Connect to Database    	       	        */
/********************************************************************/


/* Code Added by Pramodini on 25.03.08 

   This change is done for resolving the printing issue when it is called from JAVA (Manage Specimen issue), 
	When APPLUSER is passed Manage Specimen is giving issue as there is no language id specified for appluser and
	those select statements were failing.

   In l_uid_pwd variable now original user details will be sent incase of it is sent from JAVA.  The first user id will be appluser
    and the second user id details will be the original user.  These details will be delimited by '#'
    Ex: appluser/appluer@srdv#user1

   The following new code is added to split the above string incase the first user id is appluser.
    it will store the second user id details in the current variables. */

	

	strcpy(dup_l_uid_pwd.arr,l_uid_pwd.arr);

	dup_l_uid_pwd.len = strlen(dup_l_uid_pwd.arr);

	strcpy (dup_user, strtok (dup_l_uid_pwd.arr, "/"));
	
	if (strcmp(strupr(dup_user),"APPLUSER") == 0)
	{
		for ( i = 0 ; i < dup_l_uid_pwd.len ; i++)
		{
			if ( l_uid_pwd.arr[i] == '#' )
			{
				flag = 1;
				break;
			}
			l_temp.arr[i] = l_uid_pwd.arr[i];			
		    l_temp.len = strlen (l_temp.arr);
		    l_temp.arr[l_temp.len] = '\0';
		}
	
		//copy the values to the original variables l_uid_pwd, l_user_id		
		strcpy (l_uid_pwd.arr, l_temp.arr);
		l_uid_pwd.len = strlen (l_uid_pwd.arr);
		l_uid_pwd.arr[l_uid_pwd.len] = '\0';
	}
	
	if  ((strcmp(strupr(dup_user),"APPLUSER") == 0) && (flag==1) )
	{
		while (dup_l_uid_pwd.arr[i++] != '#');
		
		//write the text after '#' symbol till the end to l_temp variable
		for( j = 0 ; i < dup_l_uid_pwd.len ; i++, j++)
		{
				l_user_id.arr[j] = dup_l_uid_pwd.arr[i];
				l_user_id.len = strlen (l_user_id.arr);
				l_user_id.arr[l_user_id.len] = '\0';
		}
	}
	
/* End of Code -- Added for l_uid_pwd manipulation */

	strcpy (sql_operation, "CONNENT");

  	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   	EXEC SQL CONNECT :l_uid_pwd;  


/********************************************************************/
/*			    Check the MEDICOM Version    		        */
/********************************************************************/

	strcpy (sql_operation, "VERSION");

  	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL EXECUTE
	BEGIN
		IF sm_installation_tab_check THEN 
		   :newversion := 1; /* If sm_installation table exists - 4.1 Standards */
		ELSE
		   :newversion := 0; /* If sm_installation table not exists - 2.1 Standards */
		END IF;
	END;
	END-EXEC;			


/***********************************************************************/
/* Based on MEDICOM Version Read values from table or from MEDICOM.INI */
/***********************************************************************/

	if (!newversion)	/* If sm_installation table is not exists - 2.1 Standards */
	{
		get_init_variables_old();
	}
	else			/* If sm_installation table exists - 4.1 Standards */
	{
		get_init_variables_new();
	}			/* End of MEDICOM version checking logic */

/********************************************************************/
/*	Updated code for reading workstation, directory, Pro*C viewer */
/*	ends here. Code updated by C. Ganesan on 25/05/2003 at 16:45  */
/********************************************************************/

	sprintf ( LOG_FILE_NAME, "%s%s.LOG",WORKING_DIR,strtok(pstrCmdLine[0], "."));
	
	if ( pstrCmdLine[1] != NULL )
	   strcpy ( uid, pstrCmdLine[1] );   
      else
    	   uid[0] = '\0';		
	
	memset ( line_char, '_', 79);   
	line_char[79] = '\0';

	if ((log_fp = fopen(LOG_FILE_NAME, "w")) == NULL )
	{
	   disp_message ( ERR_MESG, "Log File Opening Error...");
	   proc_exit();
	}     
	fprintf ( log_fp, "%34s IBA Health\n", " " );
	fprintf ( log_fp, "%34s ==========\n\n", " " );
	fprintf ( log_fp, "%30s Process Log File\n", " " );
	fprintf ( log_fp, "%30s ================\n\n", " " );
      strcpy  ( PROCESS_NAME,  strtok(pstrCmdLine[0], ".") );	
	fprintf ( log_fp, " Process Name : %s ", PROCESS_NAME );
	_strdate( tmpbuf );
	fprintf ( log_fp, " \t\t\t Created on : %s ",
											tmpbuf); 
	_strtime( tmpbuf );
	fprintf ( log_fp, "%s\n",tmpbuf); 
										
	fprintf ( log_fp, " User id      : %s\n", strtok( uid, "/" ));	
	fprintf ( log_fp, "%79s\n\n",line_char);
 	return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;

   if (sqlca.sqlcode == 1405 )
   {
	if (!strcmp (sql_operation, "VERSION") )
		sprintf (tmpbuf, "Unable to get MEDICOM version");
   }
   else
	sprintf (tmpbuf, "Error occured in open_log_file : %s", sqlca.sqlerrm.sqlerrmc );

   MessageBox ( hWnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
   exit(0);
}   

void get_init_variables_old()
{
/********************************************************************/
/*	Read Pro*C Output directory and Pro*C viewer from MEDICOM.INI */
/********************************************************************/

     	GetPrivateProfileStringA("Reports","Dir","",WORKING_DIR,sizeof(WORKING_DIR),"medicom.ini");
	GetPrivateProfileStringA("Reports","proc","",szProcView,sizeof(szProcView),"medicom.ini");
}


void get_init_variables_new()
{
 char sql_operation[100];
 char tmpbuf[128];

 int len=0,i=0,j=0,flag=0;
 char temp[40]="\0";


/*********************************************************************/
/*	Updated code for reading workstation, directory, Pro*C viewer  */
/*	from tables. Code updated by C. Ganesan on 25/05/2003 at 16:45 */
/*********************************************************************/

	set_meduser_role();

	strcpy (sql_operation, "WORKSTATION");

/*
	sprintf (tmpbuf, "Facility Id: %s", l_facility_id.arr);
	MessageBox ( hWnd, tmpbuf, "Note", MB_OK);
*/

/********************************************************************/
/*			Reading Workstation Identifier 			  */
/********************************************************************/

	EXEC SQL EXECUTE
	BEGIN
		workstation.get_workstation_id (:l_facility_id, :l_workstation_id);
	END;
	END-EXEC;			

	l_workstation_id.arr[l_workstation_id.len] = '\0';

/*
	sprintf (tmpbuf, "Workstation Id: %s", l_workstation_id.arr);
	MessageBox ( hWnd, tmpbuf, "Note", MB_OK);
*/

/********************************************************************/
/*			Reading Pro*C Output Directory 			  */
/*	Copy some temporary value to l_error_text.arr to avoid 	  */
/*	Fetched Column Value is Null Error                 		  */
/********************************************************************/

	strcpy (l_error_text.arr, "$test$");
	l_error_text.len = strlen (l_error_text.arr);
	l_error_text.arr[l_error_text.len] = '\0';

	strcpy (l_dir_name.arr, "$test$");
	l_dir_name.len = strlen (l_dir_name.arr);
	l_dir_name.arr[l_dir_name.len] = '\0';

	
	/* Check included on 27.03.08
	l_user_id should be set here only if the user is not APPLUSER.
	If the user is APPLUSER l_uid_pwd and l_user_id are set before the connection itself  */
	if  (strcmp(strupr(dup_user),"APPLUSER") != 0)
	{
		strcpy (l_user_id.arr, strtok (l_uid_pwd.arr, "/")); 
		l_user_id.len = strlen (l_user_id.arr);
		l_user_id.arr[l_user_id.len] = '\0'; 
	}

/*
	sprintf (tmpbuf, "User Name: %s", l_user_id.arr);
	MessageBox ( hWnd, tmpbuf, "Note", MB_OK);
*/


/*Added by shanmugam on 16/01/07 for internatilization */
/*Purpose :- initlization of newly added variable l_language_id */

	strcpy (l_language_id.arr, "$$");
	l_language_id.len = strlen (l_language_id.arr);
	l_language_id.arr[l_language_id.len] = '\0';

/*
	sprintf (tmpbuf, "Language ID: %s", l_language_id.arr);
	MessageBox ( hWnd, tmpbuf, "Note", MB_OK);
*/

/* Ends here */


	strcpy (sql_operation, "DIRECTORY");

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

/*Modified by shanmugam on 16/01/07 for internationlization*/
/*Modification :- l_language_id variable is included according to the db procedure*/

	EXEC SQL EXECUTE
	BEGIN
		appprint.get_report_output_directory (
			:l_user_id,
			:l_workstation_id,
			:l_language_id,
			:l_dir_name,
			:l_error_text);
	END;
	END-EXEC;			


/********************************************************************/
/*	Check the return value of l_error_text.arr and if it is	  */
/*	not equal to the Passed temporary value, raise an error       */
/********************************************************************/

	l_error_text.arr[l_error_text.len] = '\0';
	if ( (l_error_text.len > 0) && (strcmp (l_error_text.arr, "$test$")) )
	{
	   sprintf (tmpbuf, "Error in Open_log_file (): %s", l_error_text.arr);
	   MessageBox ( hWnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
	   exit(0);
	}

/********************************************************************/
/*	Assign read directory information to WORKING_DIR varaiable    */
/********************************************************************/
/*
	sprintf (tmpbuf, "Directory Name: %s", l_dir_name.arr);
	MessageBox ( hWnd, tmpbuf, "Note", MB_OK);

*/

	l_dir_name.arr[l_dir_name.len] = '\0';
	if ( (l_dir_name.len > 0) && (!strcmp (l_dir_name.arr, "$test$")) )
	{
	   sprintf (tmpbuf, "Report Directory Name not defined for %s Application User and/or %s Workstation",
				l_user_id.arr, l_workstation_id.arr);
	   MessageBox ( hWnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
	   exit(0);
	}


	strcpy (WORKING_DIR, l_dir_name.arr);

/********************************************************************/
/* Added by Shanmugam on 16/01/07 for internationlization		  */
/* Purpose :- Check the return value of l_language_id.arr 		  */	 
/********************************************************************/
/*
	sprintf (tmpbuf, "Language ID: %s", l_language_id.arr);
	MessageBox ( hWnd, tmpbuf, "Note", MB_OK);
*/

	l_language_id.arr[l_language_id.len] = '\0';
	if ( (l_language_id.len > 0) && (!strcmp (l_language_id.arr, "$$")) )
	{
	   sprintf (tmpbuf, "Language ID is not defined for %s Application User ",l_user_id.arr);
	   MessageBox ( hWnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
	   exit(0);
	}
/* Ends Here */


/********************************************************************/
/*			Reading Pro*C Output Viewer Tool			  */
/*	Copy some temporary value to l_error_text.arr to avoid 	  */
/*	Fetched Column Value is Null Error                 		  */
/********************************************************************/

	strcpy (l_error_text.arr, "$test$");
	l_error_text.len = strlen (l_error_text.arr);
	l_error_text.arr[l_error_text.len] = '\0';

	strcpy (l_proc_viewer.arr, "$test$");
	l_proc_viewer.len = strlen (l_proc_viewer.arr);
	l_proc_viewer.arr[l_proc_viewer.len] = '\0';

	strcpy (l_param_id.arr, "PROC");
	l_param_id.len = strlen (l_param_id.arr);
	l_param_id.arr[l_param_id.len] = '\0';

	strcpy (sql_operation, "PROC");

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL EXECUTE
	BEGIN
		workstation.get_ws_param (
				:l_workstation_id,
				:l_param_id,
				:l_proc_viewer,
				:l_error_text);
	END;
	END-EXEC;			


/********************************************************************/
/*	Check the return value of l_error_text.arr and if it is	  */
/*	not equal to the Passed temporary value, raise an error       */
/********************************************************************/

	l_error_text.arr[l_error_text.len] = '\0';
	if ( (l_error_text.len > 0) && (strcmp (l_error_text.arr, "$test$")) )
	{
	   sprintf (tmpbuf, "Error while reading Pro*C Viewer: %s", l_error_text.arr);
	   MessageBox ( hWnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
	   exit(0);
	}

/********************************************************************/
/*	Assign read Pro*C Viewer information to szProcView varaiable  */
/********************************************************************/

/*
	sprintf (tmpbuf, "Pro*C Viewer: %s", l_proc_viewer.arr);
	MessageBox ( hWnd, tmpbuf, "Note", MB_OK);
*/

	l_proc_viewer.arr[l_proc_viewer.len] = '\0';
	if ( (l_proc_viewer.len > 0) && (!strcmp (l_proc_viewer.arr, "$test$")) )
	{
	   sprintf (tmpbuf, "Default Pro*C Viewer is not defined and/or Pro*C Viewer is not defined for % Workstation", 
					l_workstation_id.arr);
	   MessageBox ( hWnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
	   exit(0);
	}

	strcpy (szProcView, l_proc_viewer.arr);

	strcpy (sql_operation, "COMMIT");

	EXEC SQL COMMIT WORK RELEASE;
	return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;

   if (sqlca.sqlcode == 1405 )
   {
	if (!strcmp (sql_operation, "WORKSTATION") )
		sprintf (tmpbuf, "Unable to get Workstation Identifier");
	else if (!strcmp (sql_operation, "DIRECTORY") )
		sprintf (tmpbuf, "Report Output Directory not defined");
	else if (!strcmp (sql_operation, "PROC") )
		sprintf (tmpbuf, "Pro*C Report Viewer not defined");
   }
   else
	sprintf (tmpbuf, "Error occured in get_init_variables_new() : %s", 
									sqlca.sqlerrm.sqlerrmc );

   MessageBox ( hWnd, tmpbuf, "Error", MB_OK|MB_ICONSTOP);
   exit(0);

}


void disp_message ( type, text )
int type;
char *text;
{  
char msg_text[200];
char cmd_str[150]; 
int ret_val;
	
	switch ( type ) {
		case PC_START :
			 DrawText ( hdc, text, -1, &rect, DT_SINGLELINE | DT_CENTER |
													DT_VCENTER );
		      /* Following line is added by C. Ganesan on 16/06/2002 at 21:30 to fix 
			   refresh issue on Pro*C display box */

			 ValidateRect (hWnd, &ps);

			 return;
		case PC_END :                       
	      	 fprintf ( log_fp, "%79s\n\n%27s *** End of Log File ***\n\n",
			           line_char, " ");		
	    	 fclose(log_fp);              

#ifndef ONLINE_PRINTING                
#ifdef VIEW_LOG_FILE
			sprintf ( msg_text, "Process Successful. \n\n Press OK to view log file.");										

			if ( MessageBox ( hWnd, msg_text, "Note", MB_OKCANCEL) == IDOK )   
			{
    			   sprintf ( cmd_str, "%s %s",szProcView,LOG_FILE_NAME );		    
			   ret_val = WinExec(cmd_str, SW_SHOWNORMAL);	    
	    		   if ( ret_val < 32 )
	    		      MessageBox (hWnd, "Error in opening log file.", "error", MB_OK);
			}   
#else     
           if ( strlen(OUTPUT_FILE_NAME) > 0 )
	          sprintf ( REP_FILE_NAME, "%s%s",WORKING_DIR,OUTPUT_FILE_NAME );
           else
 	          sprintf ( REP_FILE_NAME, "%s%s.LIS",WORKING_DIR,PROCESS_NAME ); 

			sprintf ( msg_text, "Process Successful. \n\n Press OK to view report.");										
			if ( MessageBox ( hWnd, msg_text, "Note", MB_OKCANCEL) == IDOK )   
			{
    			   sprintf ( cmd_str, "%s %s",szProcView,REP_FILE_NAME );		    
			   ret_val = WinExec(cmd_str, SW_SHOWNORMAL);	    
	    		   if ( ret_val < 32 )
	    		      MessageBox (hWnd, "Error in opening report.", "Error", MB_OK);
			}   
#endif          
#endif  

	 		SendMessage (hWnd, WM_CLOSE, 0, 0L );
			return;
		case INFO_MESG :
			fprintf ( log_fp, "%s\n",text);			 
			return;
		case ERR_MESG :
			fprintf ( log_fp, "%s\n", text );
			MessageBox ( hWnd, text, "Error", MB_ICONSTOP );			
			return;         
		case ORA_MESG :
			strcat ( text, "\n\n");
			strcat ( text, sqlca.sqlerrm.sqlerrmc );
			fprintf ( log_fp, "%s\n",  text );
			MessageBox ( hWnd, text, "Oracle Error", MB_ICONSTOP );			
			return;			
		case DISP_MESG :
			fprintf ( log_fp, "%s\n", text );
			MessageBox ( hWnd, text, "Information", MB_OK|MB_ICONINFORMATION );			
			return;    			
		default :
			return;        
                    }  /* End of switch */                    
}


void proc_exit ()
{ 
char log_str[175];
char cmd_str[150];                                     
int ret_val;                                

	fprintf ( log_fp, "%79s\n\n%27s *** End of Log File ***\n\n",
							line_char, " ");			
    	fclose(log_fp);
	sprintf ( log_str, "Process Unsuccessful. \n\n Press OK to view error log file.");										

	 if ( MessageBox ( hWnd, log_str, "Note", MB_OKCANCEL) == IDOK )
	 {                      
	   	sprintf ( cmd_str, "%s %s",szProcView,LOG_FILE_NAME );		    
		ret_val = WinExec (cmd_str, SW_SHOWNORMAL);	  
	    	if ( ret_val < 32 )
	    	   MessageBox (hWnd, "Error in opening log file.", 
							"error", MB_OK);
 	 }   
	SendMessage (hWnd, WM_CLOSE, 0, 0L );
        exit (0);
}       
                                                         	

/************************************************************************/
/* OCS MEDICOM VER 1.6                                                  */
/************************************************************************/
/* PROGRAM NAME          : RLTBGREL                                     */
/* DESCRIPTION			 : Add Analyzer code to RL_ANALYZER_REQUESTS	*/
/* AUTHOR                : S. SHEELVANT                                 */
/* DATE WRITTEN          : 24-12-1997                                   */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include "rl.h"
///#include "gl.h"
#define NODATAFOUND                     (sqlca.sqlcode == 1403)
#define OERROR 				(sqlca.sqlcode < 0)
#define LAST_ROW 			(sqlca.sqlcode == 1403)
#define NOT_FOUND 			(sqlca.sqlerrd[2] == 0)
#define TABLE_ALREADY_EXISTS 		(sqlca.sqlcode == -955)
#define RESOURCE_BUSY        		(sqlca.sqlcode == -54)
#define VIEW_LOG_FILE 1
#define ONLINE_PRINTING 1

/*#define DEBUG 				0*/
#define SPOOL_DIR			""	


EXEC SQL BEGIN DECLARE SECTION;
#define MAX_TESTS 500

   VARCHAR nd_operating_facility_id         [5],
           nd_facility_id					[5],
		   nd_operational_modules		    [1000],
   		   nd_priority						[5],
           uid_pwd			                [132],
           today                            [20],
		   d_curr_pgm_name                  [15],
		   v_spec_regd_datetime             [51],
		   v_stat							[2],
	       rl_param_bg_release_status       [2],   /* RL_PARAM */

           rl_anl_result_spec_no	        [21],  /* RL_ANALYZER_RESULTS */
           rl_anl_result_rowid	            [30],
           rl_anl_result_spec_prfx    	    [3],
                                                   /* RL_TEST_RESULT */
	   rl_test_rslt_patient_id	    	[MAX_TESTS][31],
	   rl_test_rslt_group_test_code		[MAX_TESTS][11],
	   rl_test_rslt_test_code		    [MAX_TESTS][11],
	   rl_test_rslt_section_code		[MAX_TESTS][2],
	   rl_test_rslt_group_seq_no		[MAX_TESTS][6],
	   rl_test_rslt_test_seq_no		    [MAX_TESTS][6],
	   rl_test_rslt_numeric_prefix		[MAX_TESTS][2],
	   rl_test_rslt_numeric_result		[MAX_TESTS][16],
	   rl_test_rslt_rcc_1			[MAX_TESTS][5],
	   rl_test_rslt_rcd_1			[MAX_TESTS][41],
	   rl_test_rslt_rcc_2			[MAX_TESTS][5],
	   rl_test_rslt_rcd_2			[MAX_TESTS][41],
	   rl_test_rslt_rcc_3			[MAX_TESTS][5],
	   rl_test_rslt_rcd_3			[MAX_TESTS][41],
	   rl_test_rslt_rcc_4			[MAX_TESTS][5],
	   rl_test_rslt_rcd_4			[MAX_TESTS][41],
           rl_test_rslt_status			[MAX_TESTS][2],
		   rl_test_rule_status			[MAX_TESTS][2],
		   rl_test_rule_path_rev_type   [MAX_TESTS][2],
           rl_test_rslt_tech_status		[MAX_TESTS][2],
           rl_test_rslt_delta_status		[MAX_TESTS][2],
           rl_test_rslt_qlty_status		[MAX_TESTS][2],
           rl_test_rslt_cmnt_status		[MAX_TESTS][2],
		   rl_test_rslt_res_cmnt_status [MAX_TESTS][2],
           rl_test_rslt_path_status		[MAX_TESTS][2],
	   rl_test_rslt_modified_yn         [MAX_TESTS][2],
	   l_update_workload				[MAX_TESTS][2],
	   rl_test_rslt_n_num_rslt              [MAX_TESTS][16],

	   /**** ADDED ON 27/09/1999   *******/
		rl_tst_range_low_v_nor			[MAX_TESTS][16],
		rl_tst_range_high_v_nor			[MAX_TESTS][16],
		rl_tst_cd_test_units			[MAX_TESTS][11],
		rl_tst_cd_range_cmt				[MAX_TESTS][41],

		t_test_units					[11],
		t_test_ref_comment				[41],
		t_low_value_normal				[16],
		t_high_value_normal				[16],
		er_msg                          [71],
	   /****** UPTO HERE      ******/

	   t_patient_id	    	       	[31],
	   t_group_test_code		[11],
	   t_test_code			[11],
	   t_section_code		[2],
	   t_group_seq_no		[6],
	   t_test_seq_no		[6],
	   t_numeric_prefix		[2],
	   t_numeric_result		[16],
       c_numeric_result     [16],
	   t_rcc_1			[5],
	   t_rcd_1			[41],
	   t_rcc_2			[5],
	   t_rcd_2			[41],
	   t_rcc_3			[5],
	   t_rcd_3			[41],
	   t_rcc_4			[5],
	   t_rcd_4			[41],
           t_status			[2],
		   t_rule_status	[2],
		   t_rule_path_rev_type [2],
           t_tech_status		[2],
           t_delta_status		[2],
           t_qlty_status		[2],
           t_cmnt_status		[2],
		   t_res_cmnt_status	[2],
           t_path_status		[2],
	   t_modified_yn                [2],

	   rl_review_indicator			[MAX_TESTS][2],

	   rl_rslt_log_stat_ind		[2],

	   d_test_code				[11],
	   d_section_code			[2],
	   d_review_result_yn			[2],
	   d_sleep_secs				[10],
	   prg_start_date			[30],
					           /* RL_TEST_CODE */	
	   rl_test_numeric_result_yn		[2],
	   rl_test_range_check_yn		[2],
	   rl_test_age_sex_range_yn		[2],
	   rl_test_function_yn			[2],
	   rl_test_culture_test_yn		[2],
	   rl_test_no_of_decimals		[2],
	   rl_test_round_decimal_yn     [2],
	   rl_test_significant_digits		[2],
	   rl_test_essential_yn			[2],
	   rl_test_tech_review_yn		[2],
	   rl_t_low_val_tech		[16],
	   rl_t_high_val_tech	[16],
	   rl_test_path_review_yn		[2],
	   rl_test_low_value_normal		[16],
	   rl_test_high_value_normal		[16],
	   rl_test_text_block_yn		[2],
	   rl_test_delta_check_yn		[2],
	   rl_test_delta_check_type		[2],
	   rl_test_delta_percentage		[17],
	   rl_test_statistics_yn		[2],
	   rl_test_snomed_yn			[2],
	   rl_test_patient_marker_yn		[2],
	   rl_t_q_val_per_units	[4],
	   rl_test_qlty_review_yn		[2],
	   rl_test_qlty_validity_period		[4],
	   rl_test_comment_review_yn		[2],
	   rl_result_comment_review_yn		[2],
	   rl_o_delta_check_yn				[2],
	   rl_o_delta_review_yn				[2],
	   rl_o_delta_val_period			[4],
	   rl_o_delta_val_units				[4],
	   rl_c_delta_check_yn				[2],
	   rl_c_delta_review_yn				[2],
	   rl_c_delta_val_period			[4],
	   rl_c_delta_val_units				[4],

	   rl_t_delta_val_per	[4],
	   rl_t_delta_val_per_units	[4],

  	   mprev_result 	                [16],
           mspec_date                           [16],
	   mdelta_found_yn                      [2],
	   mwithin_validity_period_yn           [2],
           mpres_pc_gr_than_dlt_pc              [2],
	   mdelta_percentage			[18],
           
	   v_date_time                          [16],
	   v_validity_period                    [4],
	   v_val_period_units                   [4],
	   v_within_validity_period_yn          [2], 

	   mdate                                [16],
	   qlty_low_value			[16],
	   qlty_high_value			[16],
	   qlty_last_rslt			[16],
	   qlty_last_rslt_date			[16],
	   qlty_abnormality_found_yn		[2],
	   qlty_w_val_period_yn       [2],
	   
	   age_low_value			[16],
	   age_high_value			[16],
	   age_range_found_yn			[2],

	   func_test_code			[16],
	   func_opd_1				[16],
	   func_opd_1_type			[2],
	   func_opr_1				[2],
	   func_opd_2				[16],
	   func_opd_2_type			[2],
	   func_opr_2				[2],

	   func_prev_opr			[2],
	   func_formula_result			[81],
	   func_operand				[11],

	   formula_test_rslt                    [16],
	   formula_test_found_yn                [2],

	   m_episode_id				[11],
	   m_inpatient_yn			[2],

	   rl_req_patient_id			[31],
	   rl_req_episode_type			[2],
	   rl_req_section_code			[2],
	   rl_req_source_code                   [11],
	   rl_req_source_type					[2],
	   rl_req_urgent						[2],
	   rl_req_hdr_spec_time                 [20],
           rl_req_sex                           [2],
		   nation							[5],
	   rl_req_cc_1				[6],
	   rl_req_cc_2				[6],
	   rl_req_cc_3				[6],
           rl_req_status                        [2],
	   rl_req_results_sent_yn	[2],
	   rl_req_entity_id			[3],

	   rl_url_test_code			[11],
	   v_group_test_code			[11],
	   v_result_status			[2],
           v_low_value_normal                   [16],
           v_high_value_normal                  [16],

	   within_age_range_yn 			[2],
	   rl_low_val_tech			[16],
	   rl_high_val_tech			[16],

     	   u_test_code				[11],
     	   u_num_rslt				[16],
		   u_num_prefix				[2],
     	   u_status					[6],
     	   u_tech_status			[2],
     	   u_delta_status			[2],
     	   u_qlty_status			[2],
     	   u_cmnt_status			[2],
		   u_res_cmnt_status		[2],
     	   u_path_status			[2],
		   u_rule_status			[2],
		   u_rule_path_rev_type     [2],

		   nd_entity_id				[3],

	   
	   s_temp_result			[16],
	   s_significant_part			[16],
	   s_integer_part			[16],
	   s_decimal_part			[16],
	   s_final_result			[17];

/******** FOR THE PRINTING LOGIC IN S.A. VERSION *****/
VARCHAR	 all_print_reqd_yn		[2],
		mprint_reqd_yn			[2],
		print_destn_type		[2],
		print_destn				[5];

/******* REF. LINE 530, 1470 ***********/
VARCHAR l_stat				[2],
		l_test_result			[21],
		l_sysdate			 [21];

/*************** FOR LOG FILES *******************/
/*
VARCHAR l_source_code				[11],
   l_consultant_code				[16],
   l_request_comment_code1			[5],
   l_request_comment_desc1			[41],
   l_request_comment_code2			[5],
   l_request_comment_desc2			[41],
   l_request_comment_code3			[5],
   l_request_comment_desc3			[41],
   l_spec_colltd_date_time			[21],
   l_spec_recd_date_time			[21],
   l_spec_regd_date_time			[21],
   l_specimen_type_code				[5],
   l_urgent_indicator				[21],
   l_verified_by_id					[31],
   l_verified_date					[21],
   l_modified_by_id					[31],
   l_modified_date					[21],
   l_added_date						[21],
   l_added_by_id					[31],
   l_test_code						[6],
   l_numeric_result					[6],
   l_numeric_prefix					[2],
   l_result_status					[2],
   l_group_test_code				[6],
   l_section_code					[2],
   l_delta_fail_yn					[2],
   l_result_comment_code1			[5],
   l_result_comment_desc1			[41],
   l_result_comment_code2			[5],
   l_result_comment_desc2			[41],
   l_result_comment_code3			[5],
   l_result_comment_desc3			[41],
   l_result_comment_code4			[5],
   l_result_comment_desc4			[41],
   l_status							[2],
   l_tech_status					[2],
   l_delta_status					[2],
   l_qlty_status					[2],
   l_cmnt_status					[2],
   l_path_status					[2],
   l_rslt_status					[2],
   l_action							[20];
*/

VARCHAR
   final_result						[16],
   v_result							[16],
   l_abs							[20],
   rl_section_ctl_print_status		[2];
   

/*************** FOR LOG FILES [UPTO HERE] *******************/

   int s_decimal_position,s_digit,s_len_integer,s_len_sig_part; 

   int v_mnth,cmnt_rev_count,res_cmnt_rev_count, v_year = 0,d_count = 0;
   unsigned int tot_age_in_days;
   float mpres_percentage, f_num_rslt = 0, f_high_value = 0, f_low_value = 0;
   char  d_found,sig_digits_app_yn;
   int s_sig_digs, s_no_of_decs,v_no_of_decs;

   float l_result = 0, v_floor = 0;


   /********* NEWLY ADDED FOR REFLEX TEST  *******/
VARCHAR r_rule_code         [11],
r_test_code         [11],
r_component		    [3],
r_operator_1	    [3],
r_operator_2	    [2],
r_value			    [11], 

w_test_code			[11],
s_test_code			[11],
s_group_test_code	[11],
s_numeric_result        [16],
s_result_comment_code1  [5],
s_result_comment_code2  [5],
s_result_comment_code3  [5],
s_result_comment_code4  [5],
v_tech_rev_yn	    [2],
v_path_rev_type     [2],
v_order_tests_yn    [2],
v_found_yn          [2],
v_rule_valid_yn		[2],

v_rule_pass_yn      [2],
first_component     [11],
v_prev_comp_pass_yn [2],
v_comp_pass_yn		[2],
flag_flag			[11],

v_prev_oper_2		[2],
r_rule_review_ind   [2],
v_rule_code			[11],

v_grp_tst_yn		[2],
v_pat_mark_yn		[2],
v_test_exists_yn	[2],
v_referred_test_yn  [2],


d_ummy				[2],

k_test_code			[11],
p_test_code			[11],
k_patient_marker_yn [2],
k_referred_test_yn	[2],

comment_code_1		[4],
comment_desc_1		[41],
comment_code_2		[4],
comment_desc_2		[41],
comment_code_3		[4],
comment_desc_3		[41],
comment_code_4		[4],
comment_desc_4		[41],

temp_test_code_2	[11],
r_snomed_code		[11],
r_result_text_code  [3];

/********************* NEWLY ADDED FOR SENSITIVITY ON 02/01/2000 ****/
VARCHAR	l_organism_code			[5],
		l_antibiotic_group_code [2],
		l_hdr_operator_1		[2],
		l_antibiotic_code		[5],
		l_sensitivity_indr	    [11],
		l_dtl_operator_1		[3],
		l_dtl_operator_2		[2];
/********************* UPTO HERE THIS BLOCK IS NEWLY ADDED FOR SENSITIVITY ON 02/01/2000 ****/

int no_of_components = 0, cmt = 0;
int er_msg_type = 0;
long v_seq_no = 0, k_seq_no = 0;
/**************************************/

/***** DECLARED FOR LOG FILES ********/
   int l_count = 0;
   int t_count = 0;
   long l_group_seq_no = 0, l_test_seq_no = 0;
/***** DECLARED FOR LOG FILES [UPTO HERE]********/

/*** DECLARED FOR GTT SPECIMENS ON 09/12/2001 *****/
int interval_specimen = 0, interval_count = 0;
VARCHAR	   interval_status				[2],
		   nd_no						[21],
		   nd_test_code					[11],
		   nd_group_test_code			[11],
		   nd_group_test_yn				[2],
		   v_group_test					[11],
		   nd_interval_no				[21],
   		   d_specimen_no				[21],
		   d_group_test_code			[11],
		   di_test_code					[11],
		   d_no							[21];

char lock_error = 'N';
char v_insert_yn = 'N';
long insert_count = 0;

VARCHAR	l_added_user	[31];

/****************** added in KN DURBAN ON 26/06/2002 *************/
VARCHAR	rl_assign_to		[21],
		rl_category_code	[5],
		rl_category_year	[5],
		rl_category_number  [25],
		rl_assign_date_time [25],
		nd_in_patient_result_yn  [2],
		nd_out_patient_result_yn [2],
		nd_rf_patient_result_yn  [2],
		nd_ex_patient_result_yn  [2]; 

/********************* CHANGED  FOR ORDER ENTRY TABLES ON 21/03/2001 ****/
VARCHAR nd_bill_installed_yn		[2],
		nd_bill_interfaced_yn		[2],
		nd_non_perfm_test_yn		[3],
		nd_susp_test_yn				[3],
		nd_ref_status			    [3],
		nd_reflex_test				[16],
		nd_order_installed_yn		[2],
		nd_order_interfaced_yn		[2],
		nd_print_disch_pat_result_yn [2],
		v_ord_status_type			[3],
		v_ord_line_status_type		[3],
		v_ord_status_code			[3],
		v_ord_line_status_code		[3],
		v_ord_catalog_code			[16],
		v_valid_yn					[2],
		d_order_type_code			[4],
		d_order_id					[11],
		mstatus						[2];

/************ ADDED FOR KNDV ENHANCEMENTS 20/07/2002 ************/
VARCHAR	nd_low_value_ind			[2],
		nd_high_value_ind			[2],
		u_high_low_ind				[2],
		v_test_code					[11], 
		v_gp_test_code				[11],
		v_res_comment1			    [10],
		v_res_comment2			    [10],
		v_res_comment3			    [10],
		v_res_comment4			    [10],
		nd_reflex_text_code			[10],
		nd_cancer_register_yn		[2],
		nd_diagnosis_yn				[2],
		nd_result_text				[4000],
		w_load_char					[2],
		p_bill_yn					[2],
		l_billed_yn					[2],
		v_billed_yn					[2],
		l_reflex_test_yn			[2],
		nd_reflex_test_code			[11],
		nd_bill_yn					[2],
		nd_consultant_code			[16],
		nd_episode_no				[20],
		nd_tfr_visit_no				[20],
		nd_xmatch_test_code			[11],
		diff_request				[2],
		l_instrument_code			[10],
		inst_test_code				[11],
		nd_patient_marker_yn		[2],
        nd_ordered_facility_id      [3],
		rf_test_code				[11];
    
/************ ADDED FOR KNDV ENHANCEMENTS INFECTION CONTROL 31/07/2002 ************/
VARCHAR	g_report_date				[20],
		g_added_date				[20],
		u_report_date				[20],
		stat_group_test_code		[11],
		stat_test_code				[11],
		v_date						[20],
		v_v_date					[20], 
		list_patient_id				[21],
		list_specimen_no			[21],
		list_org_report_date		[20],
		list_rowid					[50];

/************ ADDED ON 28/10/2002 FOR RESULT FORMAT *********/
  VARCHAR  v_numeric_result				  [21],
		   r_rslt						  [21];
   int l_exist_decimals = 0;
   int v_no_of_decimals = 0;
   int l_inst_decimals = 0;

/************ ADDED FOR KNDV ENHANCEMENTS INFECTION CONTROL 31/07/2002 ************/
char l_include_yn = 'N';


int r_count = 0, i_count = 0, q_count = 0, w_count = 0;
int u_organism_count = 0, l_infect_duration, s_organism_count = 0, l_sq_no = 0;

/********* NEWLY ADDED ON 20/07/2002 FOR KNDV ENHANCEMENTS **************/
int	l_1 = 0, l_2 = 0, l_3 = 0, l_4 = 0, l_5 = 0, l_6 = 0, l_7 = 0, l_8 = 0, l_9 = 0, l_10 = 0,
	l_11 = 0, l_12 = 0, l_13 = 0, l_14 = 0, l_15 = 0, l_16 = 0, l_17 = 0, l_18 = 0, l_19 = 0, 
	l_20 = 0, l_21 = 0, l_22 = 0, l_23 = 0, l_24 = 0; 
int l_line_no = 0;
int nd_seq_no = 0;

/***** ADDED FOR DELTA ENHANCEMENTS ON 11/09/2002******************/

	VARCHAR		v_modified_date		[20],
				v_code1				[5],
				v_code2				[5],
				v_code3				[5],
				v_code4				[5];

	VARCHAR		v_delta_org_code	[5], 
				v_delta_ant_code	[5],
				v_delta_sens		[2],
				v_delta_sensitivity [2];

/******UPTO HERE ON 11/09/2002***********************************************/


/***** ADDED ON 05/11/2002 BACKGROUND PROCESS MONITOR **********/
	VARCHAR    d_machine_name	    [150];

	int p_count = 0;
/***** UPTO HERE ADDED ON 05/11/2002 BACKGROUND PROCESS MONITOR **********/


/************ added on 19.06.2003 for insertion of text_snomed_pair ******/

    VARCHAR	    l_snomed_code_1			[40],
	            l_snomed_code_2			[40],
			    nd_result_text_code		[6];

    int     l_operational_count = 0;

/*************** upto here ******************/

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

     char  test_code			[MAX_TESTS][11], 
	   numeric_result_yn		[MAX_TESTS],
	   range_check_yn		[MAX_TESTS],
	   age_sex_range_yn		[MAX_TESTS],
	   function_yn			[MAX_TESTS],
	   culture_test_yn		[MAX_TESTS],
	   round_decimal_yn		[MAX_TESTS],
	   no_of_decimals		[MAX_TESTS][2],
	   significant_digits		[MAX_TESTS][2],
	   essential_yn			[MAX_TESTS],
	   tech_review_yn		[MAX_TESTS],
	   low_value_technician		[MAX_TESTS][16],
	   high_value_technician	[MAX_TESTS][16],
	   path_review_yn		[MAX_TESTS],
	   low_value_normal		[MAX_TESTS][16],
	   high_value_normal		[MAX_TESTS][16],
	   text_block_yn		[MAX_TESTS],
	   delta_o_check_yn		[MAX_TESTS],
	   delta_o_review_yn	[MAX_TESTS],
	   delta_o_val_period   [MAX_TESTS][4],
	   delta_o_val_units	[MAX_TESTS][4],
	   delta_c_check_yn		[MAX_TESTS],
	   delta_c_review_yn	[MAX_TESTS],
	   delta_c_val_period   [MAX_TESTS][4],
	   delta_c_val_units	[MAX_TESTS][4],
	   delta_check_yn		[MAX_TESTS],
	   delta_check_type		[MAX_TESTS],
	   delta_percentage		[MAX_TESTS][17],
	   statistics_yn		[MAX_TESTS],
	   snomed_yn			[MAX_TESTS],
	   patient_marker_yn		[MAX_TESTS],
	   qlty_review_yn		[MAX_TESTS],
	   qlty_validity_period		[MAX_TESTS][4],
	   qlty_val_period_units        [MAX_TESTS][4],
	   comment_review_yn		[MAX_TESTS],
	   result_comment_review_yn [MAX_TESTS],
	   delta_validity_period	[MAX_TESTS][4],
	   delta_val_period_units	[MAX_TESTS][4];

       int no_of_tests;
/*---------------------------------------------------------------------------*/
/* Start of logic -----------------------------------------------------------*/
char insert_technical_review_yn='N',
     insert_abnormal_review_yn='N',
     insert_normal_review_yn='N',
     mabnormal_yn = 'N',
     mrelease_yn  = 'N',
     moutstdg_yn  = 'N',
     nd_print_result_yn = 'N',
     nd_upd_req_hdr_yn = 'N';

DWORD sleep_sec = 0;

int i = 0, ctr = 0, x = 0;
int err_flag = 0;

char string_var[100];
char l_should_print_yn = 'N';
char d_interval_specimen_yn = 'N';
char *to_day();
char print_yn = 'N', request_update_yn = 'N';

/************ ADDED FOR KNDV ENHANCEMENTS INFECTION CONTROL 31/07/2002 ************/
char l_prev_organism_code[10], l_prev_antibiotic_code[10], l_prev_sensitivity_ind[5];
char v_infection_print_yn = 'N';
char d_cmd_line[500];
char v_result_null_yn;
char v_delta_found = 'Y';

////////// 19.06.2003 added the following 2 lines 
char *pdest;
int  sresult;

void proc_main(argc,argv)
char *argv[];
int argc;
{ 

int rec_found = 0;

#ifdef DEBUG
   printf("In main()\n");
#endif

if (argc < 6)
   {
      ins_message(ERR_MESG,"Usage : rltbgrel uid/password start_date");
      proc_exit();
   }

   strcpy(g_pgm_id,"RLTBGREL");
   
   strcpy(d_curr_pgm_name.arr,g_pgm_id); 
   d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 
   
   strcpy(nd_facility_id.arr,argv[4]);
   nd_facility_id.len = strlen(nd_facility_id.arr);


   strcpy(nd_priority.arr, argv[5]);
   nd_priority.len = strlen(nd_priority.arr);

/************* 19.06.2003 
   strcpy(prg_start_date.arr,argv[5]);
   prg_start_date.len = strlen(argv[5]);
******************/

   if(sql_connect(argv[1]) == -1)
   {
      ins_message(ERR_MESG,"Error in connecting to Oracle\n");
      proc_exit();
   }
   
   set_meduser_role();


   rec_found = get_sleep_secs();

   
   if(rec_found)
   {
   
     dclr_test_result_cursor();
     dclr_quality_cursor();
     dclr_function_cursor();
     process_rec();
   }
   
   EXEC SQL COMMIT WORK RELEASE;
   if (OERROR)
     ins_message(ERR_MESG,"ROLLBACK WORK RELEASE failed");

   return;
}
/*---------------------------------------------------------------------------*/
/* Loop which checks the status in rl_param and continues -------------------*/

process_rec()
{  
   int  req_hdr_found = 0;
   int  record_exist = 0;
   int  fetch_request_header();
   int  fetch_rl_analyzer_results();
   int  fetch_urg_analy_results();
   void declr_urgent_cursor();
   char specimen_found_in_review;
   char check_specimen_in_review();
   void	get_entity_id();
#ifdef DEBUG
   printf("In Process_rec()\n");
#endif

//////// 19.06.2003 commented   get_entity_id();

   while (get_sleep_secs())
   { 

	  /******* Background Processes Monitor ************/
	   insert_process_monitor();
   
	  lock_error = 'N';

	  declr_urgent_cursor();
	  record_exist = fetch_urg_analy_results();
	  if (!record_exist)
	      record_exist = fetch_rl_analyzer_results();
  
     while (record_exist)
     {

  	    get_interface_flags();

//////////	    get_install_flags(); this procedure not required 19.06.2003

       record_exist = 0;
	   if (!get_sleep_secs()) break;
	
       specimen_found_in_review = 'N';
       specimen_found_in_review = check_specimen_in_review();
/***** GTT SPECIMEN  ON 09/12/2001 *****/
	   check_interval_specimen();
       
       if(specimen_found_in_review == 'N')
       {
	  req_hdr_found = 0;
	  	  
	  req_hdr_found = fetch_request_header();

  	   if(req_hdr_found && 
	     rl_req_status.arr[0] != 'R' && rl_req_status.arr[0] != 'P')
          {
	        process_analyzer_result_specimen();
		 
          }
       }
	  
      if (lock_error != 'E')
	   {

/****************	19.06.2003 checking of installed is not required.
		    if (strcmp(nd_order_installed_yn.arr, "Y") == 0 &&
				strcmp(nd_order_interfaced_yn.arr, "Y") == 0)
*********************/

		    if (strcmp(nd_order_interfaced_yn.arr, "Y") == 0)
			{
				if (strlen(d_order_id.arr) > 0) 
					update_order_status();
			}

          delete_rl_analyzer_results();

          EXEC SQL COMMIT WORK;
			

		  if (v_infection_print_yn == 'Y')
		  {

				v_v_date.arr[0]		= '\0';
				v_v_date.len		= 0;

				EXEC SQL SELECT TO_CHAR(TO_DATE(:v_date, 'DD/MM/YYYY HH24:MI:SS'), 'DD/MM/YYYYHH24:MI:SS')
						 INTO :v_v_date
						 FROM DUAL;

				v_v_date.arr[v_v_date.len]		= '\0';

				strcpy(d_cmd_line, "RLRINFCN");		
				strcat(d_cmd_line," ");
			    strcat(d_cmd_line, uid_pwd.arr);
				strcat(d_cmd_line," ");
				strcat(d_cmd_line, rl_req_source_type.arr);
				strcat(d_cmd_line," ");
				strcat(d_cmd_line, rl_req_source_code.arr); 
				strcat(d_cmd_line," ");
				strcat(d_cmd_line, v_v_date.arr); 

			//	system(d_cmd_line);

				WinExec(d_cmd_line, SW_SHOWNORMAL);	        
				
		  }


          if (OERROR)
            ins_message(ORA_MESG,"COMMIT WORK failed");
	   }
	   else
	   {
	      EXEC SQL ROLLBACK WORK;
	   }
     } 

	 lock_error = 'N';


		if (sleep_sec)
           Sleep(sleep_sec);
   
   }
   /*
   fprintf(stdout,"BG_RELEASE_STATUS in RL_PARAM set to 'N'... \n");
   fprintf(stdout,"Job ended at : %s \n",to_day());
   */
   fflush(stdout);

   
}
/*----------------------------------------------------------*/
get_sleep_secs()
{
    d_sleep_secs.arr[0]			= '\0';
	d_sleep_secs.len			= 0;

	d_machine_name.arr[0]		= '\0';
	d_machine_name.len			= 0;

/********* added on 19.06.2003 *************/

    EXEC SQL
     SELECT processing_interval
	   INTO :d_sleep_secs
	   FROM SY_PROG_ID
	  WHERE PGM_ID = 'RLTBGREL';

/*************** upto here **************/

    EXEC SQL
     SELECT machine_name
	   INTO :d_machine_name
	   FROM SY_BG_PROCESS_CONTROL
	  WHERE OPERATING_FACILITY_ID = :nd_facility_id
	    AND PGM_ID = 'RLTBGREL'
	    AND STARTED_DATE IS NOT NULL;
/*************** commented on  19.06.2003
	    AND STARTED_DATE = TO_DATE(:prg_start_date,
		                           'DDMMYYHH24MISS');
*******************/

    if(NOT_FOUND) 
	    return FALSE;
    else 
	{
	    d_sleep_secs.arr[d_sleep_secs.len] = '\0';
		d_machine_name.arr[d_machine_name.len]	= '\0';
        sleep_sec = (DWORD) atol(d_sleep_secs.arr);
	    return TRUE;
	}    
}
/*----------------------------------------------------------*/

/*----------------------------------------------------------*/
check_interval_specimen()
{
    interval_specimen =  0;

    EXEC SQL
		SELECT COUNT(*)
		INTO :interval_specimen
	    FROM RL_INTERVAL_TEST_SPECIMENS
 	    WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
		AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND NVL(cancelled_yn, 'N') <> 'Y';
   
}
/*----------------------------------------------------------*/

dclr_function_cursor()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE FUNCTION_CURSOR CURSOR FOR
	     SELECT OPERAND_1,OPERAND_1_TYPE,OPERATOR_1,
	            OPERAND_2,OPERAND_2_TYPE,OPERATOR_2
               FROM RL_FUNCTION
              WHERE TEST_CODE = :func_test_code
              ORDER BY SEQ_NUMBER;
    return;
    err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at dclr_function_cursor()\n");
	return;
}
/*---------------------------------------------------------------------------*/
dclr_test_result_cursor()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL DECLARE TEST_RESULT_CURSOR CURSOR FOR
		 SELECT PATIENT_ID,GROUP_TEST_CODE,TEST_CODE,
			SECTION_CODE,GROUP_SEQ_NO,TEST_SEQ_NO,
			NVL(NUMERIC_PREFIX,'!'),NUMERIC_RESULT,
			RESULT_COMMENT_CODE1,
			RESULT_COMMENT_CODE2,RESULT_COMMENT_CODE3,
			RESULT_COMMENT_CODE4,RESULT_COMMENT_DESC1,
			RESULT_COMMENT_DESC2,RESULT_COMMENT_DESC3,
			RESULT_COMMENT_DESC4,STATUS,TECH_STATUS,
			DELTA_STATUS,QLTY_STATUS,CMNT_STATUS,
			PATH_STATUS,'N',RSLT_STATUS,
			RULE_STATUS
            FROM RL_TEST_RESULT
            WHERE SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		    ORDER BY GROUP_SEQ_NO,TEST_SEQ_NO;
    return;
    err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at dclr_test_result_cursor()\n");
    return;
}
dclr_quality_cursor()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE QUALITY_CURSOR CURSOR FOR
	     SELECT QLTY_LOW_VALUE,QLTY_HIGH_VALUE,
		 LAST_RESULT,LAST_RESULT_DATE_TIME
         FROM RL_TEST_QUALITY_MAST
         WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND SECTION_CODE = :t_section_code
		 AND TEST_CODE = :t_test_code;
   return;
   err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at dclr_test_result_cursor()\n");
	return;
}

/*---------------------------------------------------------------------------*/
process_analyzer_result_specimen()
{
   initialize_variables();

   open_test_result_cursor();
   fetch_test_result_cursor();

   fetch_test_details();

   fetch_dept_details();

/*** Changes Done on Calculate_result_by_formula ON 18/09/1999  
			Validate_before_commit(), Check_result_status(), Update_rl_test_result(), *******/

	request_update_yn = 'N';

   calculate_result_by_formula();

   validate_before_commit();

   check_result_status();

   update_rl_test_result();


   if (lock_error != 'E')
   {

      update_request_header();

	  if (nd_print_result_yn == 'Y')
		  insert_print_control_hdr();

   }

   close_test_result_cursor();

/************** NEWLY ADDED ON 31/07/2002 FOR INFECTION CONTROL *******************/
   if (nd_print_result_yn == 'Y')
   {
		get_infection_details();
	
   }

}

update_rl_test_result()
{
  int r;
#ifdef DEBUG
   printf("update_rl_test_result() start\n");
#endif

  for(r=0;r<no_of_tests;r++)
  {
   
	 u_num_rslt.arr[0] = '\0';
	 u_num_prefix.arr[0] = '\0';
     u_status.arr[0] = '\0';
     u_tech_status.arr[0] = '\0';
     u_delta_status.arr[0] = '\0';
     u_qlty_status.arr[0] = '\0';
     u_cmnt_status.arr[0] = '\0';
     u_path_status.arr[0] = '\0';
	 u_rule_status.arr[0] = '\0';
	 u_rule_path_rev_type.arr[0] = '\0';

     u_num_rslt.len = 0;
	 u_num_prefix.len = 0;
     u_status.len = 0;
     u_tech_status.len = 0;
     u_delta_status.len = 0;
     u_qlty_status.len = 0;
     u_cmnt_status.len = 0;
     u_path_status.len = 0;
	 u_rule_status.len = 0;
	 u_rule_path_rev_type.len = 0;

     strcpy(u_test_code.arr,rl_test_rslt_test_code[r].arr);
     u_test_code.len = strlen(u_test_code.arr);

     strcpy(u_num_rslt.arr,rl_test_rslt_numeric_result[r].arr);
     u_num_rslt.len = strlen(u_num_rslt.arr);

	 if (rl_test_rslt_numeric_prefix[r].arr[0] == '-')
	 {
		strcpy(u_num_prefix.arr,rl_test_rslt_numeric_prefix[r].arr);
		u_num_prefix.len = strlen(u_num_prefix.arr);
	 }

     strcpy(u_status.arr,rl_test_rslt_status[r].arr);
     u_status.len = strlen(u_status.arr);

	 strcpy(u_rule_status.arr,rl_test_rule_status[r].arr);
     u_rule_status.len = strlen(u_rule_status.arr);

	 strcpy(u_rule_path_rev_type.arr,rl_test_rule_path_rev_type[r].arr);
     u_rule_path_rev_type.len = strlen(u_rule_path_rev_type.arr);

     strcpy(u_path_status.arr,rl_test_rslt_path_status[r].arr);
     u_path_status.len = strlen(u_path_status.arr);

     strcpy(u_tech_status.arr,rl_test_rslt_tech_status[r].arr);
     u_tech_status.len = strlen(u_tech_status.arr);

     strcpy(u_delta_status.arr,rl_test_rslt_delta_status[r].arr);
     u_delta_status.len = strlen(u_delta_status.arr);

     strcpy(u_qlty_status.arr,rl_test_rslt_qlty_status[r].arr);
     u_qlty_status.len = strlen(u_qlty_status.arr);

     strcpy(u_cmnt_status.arr,rl_test_rslt_cmnt_status[r].arr);
     u_cmnt_status.len = strlen(u_cmnt_status.arr);
	 
	 strcpy(u_res_cmnt_status.arr,rl_test_rslt_res_cmnt_status[r].arr);
     u_res_cmnt_status.len = strlen(u_res_cmnt_status.arr);

/*****************************************/

	 strcpy(t_test_units.arr, rl_tst_cd_test_units[r].arr);
	 t_test_units.len = strlen(t_test_units.arr);
	
		t_low_value_normal.arr[0]	= '\0';
		t_low_value_normal.len		= 0;

		t_high_value_normal.arr[0]	= '\0';
		t_high_value_normal.len		= 0;

		t_test_ref_comment.arr[0]		= '\0';
		t_test_ref_comment.len			= 0; 

	 if(age_sex_range_yn[r] == 'Y')
	 {

		age_sex_range(r);

		if (strlen(rl_tst_range_high_v_nor[r].arr) > 0 ||
			strlen(rl_tst_range_low_v_nor[r].arr) > 0)
		{
			strcpy(t_low_value_normal.arr, rl_tst_range_low_v_nor[r].arr);
			strcpy(t_high_value_normal.arr, rl_tst_range_high_v_nor[r].arr);

			t_low_value_normal.len = strlen(t_low_value_normal.arr);
			t_high_value_normal.len = strlen(t_high_value_normal.arr);
	 			
		 }
		 else
		 {
			

			EXEC SQL SELECT NVL(physician_low_value, low_value_normal), 
        		    		NVL(physician_high_value, high_value_normal)
        		     INTO :t_low_value_normal, :t_high_value_normal
        		     FROM RL_TEST_CODE
        		     WHERE test_code = :u_test_code;


			if (NODATAFOUND);

			t_low_value_normal.arr[t_low_value_normal.len]		= '\0';
			t_high_value_normal.arr[t_high_value_normal.len]	= '\0';

//			strcpy(t_test_ref_comment.arr, rl_tst_cd_range_cmt[r].arr);
//			t_test_ref_comment.len = strlen(t_test_ref_comment.arr);
		 }

	 }
	 else
	 {


			EXEC SQL SELECT NVL(physician_low_value, low_value_normal), 
        		    		NVL(physician_high_value, high_value_normal)
        		     INTO :t_low_value_normal, :t_high_value_normal
        		     FROM RL_TEST_CODE
        		     WHERE test_code = :u_test_code;


			if (NODATAFOUND);

			t_low_value_normal.arr[t_low_value_normal.len]		= '\0';
			t_high_value_normal.arr[t_high_value_normal.len]	= '\0';

//		strcpy(t_test_ref_comment.arr, rl_tst_cd_range_cmt[r].arr);
//		t_test_ref_comment.len = strlen(t_test_ref_comment.arr);
	 }


  	 if (strlen(t_low_value_normal.arr) == 0 ||
	 	strlen(t_high_value_normal.arr) == 0)
	 {
	  	strcpy(t_test_ref_comment.arr, rl_tst_cd_range_cmt[r].arr);
		t_test_ref_comment.len = strlen(t_test_ref_comment.arr);
		
	 }


	 if (strlen(u_num_rslt.arr) > 0)
		f_num_rslt = atof(u_num_rslt.arr);

	 if (strlen(t_high_value_normal.arr) > 0)
		f_high_value = atof(t_high_value_normal.arr);

	 if (strlen(t_low_value_normal.arr) > 0)
		f_low_value = atof(t_low_value_normal.arr);

	 u_high_low_ind.arr[0]	= '\0';
	 u_high_low_ind.len		= 0;
	 

	 if ( (f_num_rslt == f_low_value) && (strcmp(u_num_prefix.arr, "<") == 0) )
	 {
		strcpy(u_high_low_ind.arr, nd_low_value_ind.arr);
		u_high_low_ind.len = strlen(u_high_low_ind.arr);		
	 }
	 else if (f_num_rslt < f_low_value) 
	 {
		strcpy(u_high_low_ind.arr, nd_low_value_ind.arr);
		u_high_low_ind.len = strlen(u_high_low_ind.arr);		
	 }
	 else if ( (f_num_rslt == f_high_value) && (strcmp(u_num_prefix.arr, ">") == 0) )
	 {
		strcpy(u_high_low_ind.arr, nd_high_value_ind.arr);
		u_high_low_ind.len = strlen(u_high_low_ind.arr);		
	 }
	 else if (f_num_rslt > f_high_value) 
	 {

		strcpy(u_high_low_ind.arr, nd_high_value_ind.arr);
		u_high_low_ind.len = strlen(u_high_low_ind.arr);		

	 }

/*****************************************/

     l_added_user.arr[0]	= '\0';
	 l_added_user.len		= 0;

     EXEC SQL SELECT STATUS, added_by_id
	          INTO :l_stat, :l_added_user FROM RL_TEST_RESULT
	          WHERE PATIENT_ID = :rl_req_patient_id
		      AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
		      AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		      AND TEST_CODE = :u_test_code
              FOR UPDATE OF STATUS NOWAIT;

	   if(OERROR)
	   {
		  ins_message(ORA_MESG,"update_rl_test_result()");
		  break;
	   }

	 l_added_user.arr[l_added_user.len]		= '\0';

   	 /*get_values_for_test_result();
	 update_test_result_log();*/

    if (strlen(u_num_rslt.arr))
	{
       get_leading_zeroes();

      strcpy(r_rslt.arr, u_num_rslt.arr);
      r_rslt.len = strlen(r_rslt.arr);
	  
	  v_no_of_decimals = atoi(no_of_decimals[r]);

	  add_zero_after_result();
	  strcpy(u_num_rslt.arr, r_rslt.arr);
	  u_num_rslt.len = strlen(u_num_rslt.arr);

	}

     EXEC SQL UPDATE RL_TEST_RESULT
		 SET NUMERIC_RESULT = SUBSTR(:u_num_rslt,1,10),
			 numeric_prefix = :u_num_prefix,
		     STATUS = :u_status,
		     PATH_STATUS = :u_path_status,
		     TECH_STATUS = :u_tech_status,
		     DELTA_STATUS = :u_delta_status,
		     QLTY_STATUS = :u_qlty_status,
		     CMNT_STATUS = :u_cmnt_status,
			 RSLT_STATUS = :u_res_cmnt_status,
			 RULE_STATUS = :u_rule_status,
			 RULE_PATH_REVIEW_TYPE = :u_rule_path_rev_type,
			 MODIFIED_BY_ID = 'AUTO RELEASE',
/*			 MODIFIED_BY_ID = :l_added_user,	*/
/*		     MODIFIED_BY_ID = USER,				*/
		     MODIFIED_DATE = SYSDATE,
			 test_units	 = :t_test_units,
			 test_ref_range_comment = :t_test_ref_comment,
			 age_range_low = :t_low_value_normal,
			 age_range_high = :t_high_value_normal,
			 released_by_id =  'AUTO RELEASE',
			 released_date = SYSDATE,
			 reviewed_by_id = 'AUTO RELEASE',
			 reviewed_date = SYSDATE,
			 pin_code = 'AUTO RELEASE',
			 high_low_ind = :u_high_low_ind
               WHERE PATIENT_ID = :rl_req_patient_id
		       AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
               AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		       AND TEST_CODE = :u_test_code;
   if(OERROR)
   {
      lock_error = 'E';
   }
	
   }
#ifdef DEBUG
   printf("update_rl_test_result() end\n");
#endif
}

get_leading_zeroes()
{

  v_result.arr[0]		='\0';
  final_result.arr[0]	= '\0';
       
  v_result.len			= 0;
  final_result.len		= 0;
  
  
  l_result = 0;
  v_floor  = 0;

	strcpy(final_result.arr, u_num_rslt.arr);
	final_result.len = strlen(final_result.arr);
    
	  EXEC SQL SELECT FLOOR(TO_NUMBER(:u_num_rslt)),
			      TO_CHAR(ABS(TO_NUMBER(:u_num_rslt))),
				  ABS(TO_NUMBER(:u_num_rslt))
			INTO  :v_floor, :v_result, :l_result
  		    FROM  DUAL;
	

	v_result.arr[v_result.len]		= '\0';

	
   if (l_result > 0)
   {
      if (v_floor == 0)
	  {

		EXEC SQL SELECT SUBSTR(:v_result,1,9)
				 INTO   :v_result
				 FROM DUAL;
	    if (OERROR)
		{
		 ;
		}
		else
		{
			v_result.arr[v_result.len]				= '\0';

			EXEC SQL SELECT '0' || :v_result
				 INTO :final_result
				 FROM DUAL;
	
			if (OERROR)
			{
			 ;
			}
			else
			{
				final_result.arr[final_result.len]		= '\0';
			}
		}

	  }
	  else
	  {
		if (v_floor < 0)
		{
			if ((l_result > 0) && (l_result < 1))
			{
			     EXEC SQL SELECT SUBSTR(:v_result,1,8)
					INTO   :v_result
					FROM DUAL;

				if (OERROR)
				{
				 ;
				}
				else
				{
					v_result.arr[v_result.len]				= '\0';
				
				    EXEC SQL SELECT '-0' || :v_result
				    INTO :final_result
				    FROM DUAL;

					if(OERROR)
					{
					 ;
					}
					else
					{
						final_result.arr[final_result.len]		= '\0';
					}

				}
			
			}
		}

	  }
   }
   else
   {
	 strcpy(final_result.arr,"0");
	 final_result.len = strlen(final_result.arr);
   }

   strcpy(u_num_rslt.arr, final_result.arr);
   u_num_rslt.len = strlen(u_num_rslt.arr);

}

initialize_variables()
{
     insert_technical_review_yn='N';
     insert_abnormal_review_yn='N';
     insert_normal_review_yn='N';
     mabnormal_yn = 'N';
     mrelease_yn  = 'N';
     moutstdg_yn  = 'N';
     nd_print_result_yn = 'N';
     nd_upd_req_hdr_yn = 'N';

/*********** ADDED ON 03/07/2000 ****************/
     v_tech_rev_yn.arr[0]			= '\0';
     v_path_rev_type.arr[0]                     = '\0';

     v_tech_rev_yn.len                          = 0;
     v_path_rev_type.len			= 0;

	 v_infection_print_yn = 'N';

}



open_test_result_cursor()
{
   EXEC SQL OPEN TEST_RESULT_CURSOR;
   if(OERROR)
       ins_message(ORA_MESG,"Failed on open_test_result_cursor()");
}
fetch_test_result_cursor()
{
   int i;
   for(i=0;i<MAX_TESTS;i++)
   {
	   rl_test_rslt_patient_id[i].arr[0] = '\0';
	   rl_test_rslt_group_test_code[i].arr[0] = '\0';
	   rl_test_rslt_test_code[i].arr[0] = '\0';
	   rl_test_rslt_section_code[i].arr[0] = '\0';
	   rl_test_rslt_group_seq_no[i].arr[0] = '\0';
	   rl_test_rslt_test_seq_no[i].arr[0] = '\0';
	   rl_test_rslt_numeric_prefix[i].arr[0] = '\0';
	   rl_test_rslt_numeric_result[i].arr[0] = '\0';
	   rl_test_rslt_rcc_1[i].arr[0] = '\0';
	   rl_test_rslt_rcd_1[i].arr[0] = '\0';
	   rl_test_rslt_rcc_2[i].arr[0] = '\0';
	   rl_test_rslt_rcd_2[i].arr[0] = '\0';
	   rl_test_rslt_rcc_3[i].arr[0] = '\0';
	   rl_test_rslt_rcd_3[i].arr[0] = '\0';
	   rl_test_rslt_rcc_4[i].arr[0] = '\0';
	   rl_test_rslt_rcd_4[i].arr[0] = '\0';
           rl_test_rslt_status[i].arr[0] = '\0';
		   rl_test_rule_status[i].arr[0] = '\0';
           rl_test_rslt_tech_status[i].arr[0] = '\0';
           rl_test_rslt_delta_status[i].arr[0] = '\0';
           rl_test_rslt_qlty_status[i].arr[0] = '\0';
           rl_test_rslt_cmnt_status[i].arr[0] = '\0';
		   rl_test_rslt_res_cmnt_status[i].arr[0] = '\0';
           rl_test_rslt_path_status[i].arr[0] = '\0';
	   rl_test_rslt_modified_yn[i].arr[0] = '\0';
	   rl_test_rslt_n_num_rslt[i].arr[0] = '\0';

	   rl_test_rslt_patient_id[i].len = 0;
	   rl_test_rslt_group_test_code[i].len = 0;
	   rl_test_rslt_test_code[i].len = 0;
	   rl_test_rslt_section_code[i].len = 0;
	   rl_test_rslt_group_seq_no[i].len = 0;
	   rl_test_rslt_test_seq_no[i].len = 0;
	   rl_test_rslt_numeric_prefix[i].len = 0;
	   rl_test_rslt_numeric_result[i].len = 0;
	   rl_test_rslt_rcc_1[i].len = 0;
	   rl_test_rslt_rcd_1[i].len = 0;
	   rl_test_rslt_rcc_2[i].len = 0;
	   rl_test_rslt_rcd_2[i].len = 0;
	   rl_test_rslt_rcc_3[i].len = 0;
	   rl_test_rslt_rcd_3[i].len = 0;
	   rl_test_rslt_rcc_4[i].len = 0;
	   rl_test_rslt_rcd_4[i].len = 0;
           rl_test_rslt_status[i].len = 0;
		   rl_test_rule_status[i].len = 0;
           rl_test_rslt_tech_status[i].len = 0;
           rl_test_rslt_delta_status[i].len = 0;
           rl_test_rslt_qlty_status[i].len = 0;
           rl_test_rslt_cmnt_status[i].len = 0;
		   rl_test_rslt_res_cmnt_status[i].len = 0;
           rl_test_rslt_path_status[i].len = 0;
	   rl_test_rslt_modified_yn[i].len = 0;
	   rl_test_rslt_n_num_rslt[i].len = 0;

   }
   EXEC SQL FETCH TEST_RESULT_CURSOR
             INTO
	          :rl_test_rslt_patient_id, :rl_test_rslt_group_test_code,
	          :rl_test_rslt_test_code, :rl_test_rslt_section_code,
	          :rl_test_rslt_group_seq_no, :rl_test_rslt_test_seq_no,
	          :rl_test_rslt_numeric_prefix, :rl_test_rslt_numeric_result,
	          :rl_test_rslt_rcc_1, :rl_test_rslt_rcc_2, :rl_test_rslt_rcc_3,
	          :rl_test_rslt_rcc_4, :rl_test_rslt_rcd_1, :rl_test_rslt_rcd_2,
	          :rl_test_rslt_rcd_3, :rl_test_rslt_rcd_4,
		  :rl_test_rslt_status, :rl_test_rslt_tech_status,
                  :rl_test_rslt_delta_status, :rl_test_rslt_qlty_status,
                  :rl_test_rslt_cmnt_status, :rl_test_rslt_path_status,
		  :rl_test_rslt_modified_yn, :rl_test_rslt_res_cmnt_status,
		  rl_test_rule_status;
		  
   if(OERROR)
       ins_message(ORA_MESG,"Open failed on fetch_test_result_cursor()");

   for(i=0;i<MAX_TESTS;i++)
   {
   rl_test_rslt_patient_id[i].arr[ rl_test_rslt_patient_id[i].len ] = '\0';
   if(strlen(rl_test_rslt_patient_id[i].arr)==0)
      break;
   rl_test_rslt_group_test_code[i].arr[ rl_test_rslt_group_test_code[i].len ] 
				   = '\0';
   rl_test_rslt_test_code[i].arr[ rl_test_rslt_test_code[i].len ] = '\0';
   rl_test_rslt_section_code[i].arr[ rl_test_rslt_section_code[i].len ] = '\0';
   rl_test_rslt_group_seq_no[i].arr[ rl_test_rslt_group_seq_no[i].len ] = '\0';
   rl_test_rslt_test_seq_no[i].arr[ rl_test_rslt_test_seq_no[i].len ] = '\0';
   rl_test_rslt_numeric_prefix[i].arr[ rl_test_rslt_numeric_prefix[i].len ] 
				   = '\0';
   rl_test_rslt_numeric_result[i].arr[ rl_test_rslt_numeric_result[i].len ] 
				   = '\0';
   rl_test_rslt_rcc_1[i].arr[ rl_test_rslt_rcc_1[i].len ] = '\0';
   rl_test_rslt_rcd_1[i].arr[ rl_test_rslt_rcd_1[i].len ] = '\0';
   rl_test_rslt_rcc_2[i].arr[ rl_test_rslt_rcc_2[i].len ] = '\0';
   rl_test_rslt_rcd_2[i].arr[ rl_test_rslt_rcd_2[i].len ] = '\0';
   rl_test_rslt_rcc_3[i].arr[ rl_test_rslt_rcc_3[i].len ] = '\0';
   rl_test_rslt_rcd_3[i].arr[ rl_test_rslt_rcd_3[i].len ] = '\0';
   rl_test_rslt_rcc_4[i].arr[ rl_test_rslt_rcc_4[i].len ] = '\0';
   rl_test_rslt_rcd_4[i].arr[ rl_test_rslt_rcd_4[i].len ] = '\0';
   rl_test_rslt_status[i].arr[ rl_test_rslt_status[i].len ] = '\0';
   rl_test_rule_status[i].arr[ rl_test_rule_status[i].len ] = '\0';
   rl_test_rslt_tech_status[i].arr[ rl_test_rslt_tech_status[i].len ] = '\0';
   rl_test_rslt_delta_status[i].arr[ rl_test_rslt_delta_status[i].len ] = '\0';
   rl_test_rslt_qlty_status[i].arr[ rl_test_rslt_qlty_status[i].len ] = '\0';
   rl_test_rslt_cmnt_status[i].arr[ rl_test_rslt_cmnt_status[i].len ] = '\0';
   rl_test_rslt_res_cmnt_status[i].arr[ rl_test_rslt_res_cmnt_status[i].len ] = '\0';
   rl_test_rslt_path_status[i].arr[ rl_test_rslt_path_status[i].len ] = '\0';
   rl_test_rslt_modified_yn[i].arr[ rl_test_rslt_modified_yn[i].len ] = '\0';
   
#ifdef DEBUG
   printf("fetch_test_result_cursor() rl_test_rslt_test_code = %s\n",
	  rl_test_rslt_test_code[i].arr);
#endif
   }
   no_of_tests = i;
#ifdef DEBUG
   printf("fetch_test_result_cursor() no_of_tests = %d\n",
	  no_of_tests);
#endif
}
close_test_result_cursor()
{
   EXEC SQL CLOSE TEST_RESULT_CURSOR;
   if(OERROR)
       ins_message(ORA_MESG,"Failed on close_test_result_cursor()");
}
/*---------------------------------------------------------------------------*/
fetch_dept_details()
{
   d_review_result_yn.arr[0] = '\0';
   d_review_result_yn.len = 0;

	 EXEC SQL SELECT NVL(REVIEW_RESULT_YN,'N') 
		      INTO :d_review_result_yn
		      FROM RL_SECTION_CTL
			  WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
			  AND   SECTION_CODE = :d_section_code;

   if(OERROR)
       ins_message(ERR_MESG,"Failed on fetch_dept_details");
   d_review_result_yn.arr[d_review_result_yn.len] = '\0';
#ifdef DEBUG
   printf("In fetch_dept_details() d_review_result_yn =[%c] \n",
   d_review_result_yn.arr[0]);
#endif
}
fetch_test_details()
{
   int i;
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   for(i=0;i<no_of_tests;i++)
   {
       d_test_code.arr[0] = '\0';
       d_test_code.len = 0;
       strcpy(d_test_code.arr,rl_test_rslt_test_code[i].arr);
       strcpy(d_section_code.arr,rl_test_rslt_section_code[i].arr);
       d_test_code.len = strlen(d_test_code.arr);
       d_section_code.len = strlen(d_section_code.arr);

	   rl_test_numeric_result_yn.arr[0] = '\0';
	   rl_test_range_check_yn.arr[0] = '\0';
	   rl_test_age_sex_range_yn.arr[0] = '\0';
	   rl_test_function_yn.arr[0] = '\0';
	   rl_test_culture_test_yn.arr[0] = '\0';
	   rl_test_no_of_decimals.arr[0] = '\0';
	   rl_test_significant_digits.arr[0] = '\0';
	   rl_test_essential_yn.arr[0] = '\0';
	   rl_test_tech_review_yn.arr[0] = '\0';
	   rl_t_low_val_tech.arr[0] = '\0';
	   rl_t_high_val_tech.arr[0] = '\0';
	   rl_test_path_review_yn.arr[0] = '\0';
	   rl_test_low_value_normal.arr[0] = '\0';
	   rl_test_high_value_normal.arr[0] = '\0';
	   rl_test_text_block_yn.arr[0] = '\0';
	   rl_test_delta_check_yn.arr[0] = '\0';
	   rl_test_delta_check_type.arr[0] = '\0';
	   rl_test_delta_percentage.arr[0] = '\0';
	   rl_test_statistics_yn.arr[0] = '\0';
	   rl_test_snomed_yn.arr[0] = '\0';
	   rl_test_patient_marker_yn.arr[0] = '\0';
	   rl_test_qlty_review_yn.arr[0] = '\0';
	   rl_test_qlty_validity_period.arr[0] = '\0';
	   rl_test_comment_review_yn.arr[0] = '\0';
	   rl_t_delta_val_per.arr[0] = '\0';
	   rl_t_delta_val_per_units.arr[0] = '\0';
	   rl_result_comment_review_yn.arr[0] = '\0';
	   t_test_units.arr[0]				  = '\0';
	   t_test_ref_comment.arr[0]		  = '\0';
	   rl_tst_range_low_v_nor[i].arr[0] = '\0';
	   rl_tst_range_high_v_nor[i].arr[0] = '\0';

	   rl_o_delta_check_yn.arr[0]		= '\0';
	   rl_o_delta_review_yn.arr[0]		= '\0';
	   rl_o_delta_val_period.arr[0]		= '\0';
	   rl_o_delta_val_units.arr[0]		= '\0';
	   rl_c_delta_check_yn.arr[0]		= '\0';
	   rl_c_delta_review_yn.arr[0]		= '\0';
	   rl_c_delta_val_period.arr[0]		= '\0';
	   rl_c_delta_val_units.arr[0]		= '\0';
	   rl_test_round_decimal_yn.arr[0]	= '\0';


	   rl_test_numeric_result_yn.len = 0;
	   rl_test_range_check_yn.len = 0;
	   rl_test_age_sex_range_yn.len = 0;
	   rl_test_function_yn.len = 0;
	   rl_test_culture_test_yn.len = 0;
	   rl_test_no_of_decimals.len = 0;
	   rl_test_significant_digits.len = 0;
	   rl_test_essential_yn.len = 0;
	   rl_test_tech_review_yn.len = 0;
	   rl_t_low_val_tech.len = 0;
	   rl_t_high_val_tech.len = 0;
	   rl_test_path_review_yn.len = 0;
	   rl_test_low_value_normal.len = 0;
	   rl_test_high_value_normal.len = 0;
	   rl_test_text_block_yn.len = 0;
	   rl_test_delta_check_yn.len = 0;
	   rl_test_delta_check_type.len = 0;
	   rl_test_delta_percentage.len = 0;
	   rl_test_statistics_yn.len = 0;
	   rl_test_snomed_yn.len = 0;
	   rl_test_patient_marker_yn.len = 0;
	   rl_test_qlty_review_yn.len = 0;
	   rl_test_qlty_validity_period.len = 0;
	   rl_t_q_val_per_units.len = 0;
	   rl_test_comment_review_yn.len = 0;
	   rl_t_delta_val_per.len = 0;
	   rl_t_delta_val_per_units.len = 0;
	   rl_result_comment_review_yn.len = 0;
	   t_test_units.len		   	   = 0;
	   t_test_ref_comment.len 		   = 0;
	   rl_tst_range_low_v_nor[i].len =  0;
	   rl_tst_range_high_v_nor[i].len = 0;

	   rl_o_delta_check_yn.len			= 0;
	   rl_o_delta_review_yn.len			= 0;
	   rl_o_delta_val_period.len		= 0;
	   rl_o_delta_val_units.len			= 0;
	   rl_c_delta_check_yn.len			= 0;
	   rl_c_delta_review_yn.len			= 0;
	   rl_c_delta_val_period.len		= 0;
	   rl_c_delta_val_units.len			= 0;
	   rl_test_round_decimal_yn.len		= 0;


       EXEC SQL SELECT NVL(NUMERIC_RESULT_YN,'N'),
		       NVL(RANGE_CHECK_YN,'N'),
		       NVL(AGE_SEX_RANGE_YN,'N'),
		       NVL(FUNCTION_YN,'N'),
		       NVL(CULTURE_TEST_YN,'N'),
                       NO_OF_DECIMALS,
		       SIGNIFICANT_DIGIT,
		       NVL(ESSENTIAL_YN,'N'),
                       NVL(TECH_REVIEW_YN,'N'),
		       LOW_VALUE_TECHNICIAN,
		       HIGH_VALUE_TECHNICIAN,
		       PATH_REVIEW_YN,
		       LOW_VALUE_NORMAL,
		       HIGH_VALUE_NORMAL,
                       NVL(TEXT_BLOCK_YN,'N'),
		       NVL(DELTA_CHECK_YN,'N'),
		       DELTA_CHECK_TYPE,
		       DELTA_PERCENTAGE,
		       NVL(STATISTICS_YN,'N'),
		       NVL(SNOMED_YN,'N'),
		       NVL(PATIENT_MARKER_YN,'N'),
		       NVL(QLTY_REVIEW_YN,'N'),
		       QLTY_VAL_PERIOD_UNITS,
                       QLTY_VALIDITY_PERIOD,
                       NVL(COMMENT_REVIEW_YN,'N'),
		       DELTA_VALIDITY_PERIOD,
		       DELTA_VAL_PERIOD_UNITS,
			   NVL(RESULT_COMMENT_REVIEW_YN,'N'),
			   TEST_UNITS,
			   REF_RANGE_COMMENT,
			   DELTA_ORG_CHECK_YN, 
			   DELTA_ORG_PATH_REVIEW_YN,
			   DELTA_ORG_VALIDITY_PERIOD,
			   DELTA_ORG_VAL_PERIOD_UNITS,
			   DELTA_COMM_CHECK_YN, 
			   DELTA_COMM_PATH_REVIEW_YN,
			   DELTA_COMM_VALIDITY_PERIOD,
			   DELTA_COMM_VAL_PERIOD_UNITS,
			   ROUND_DECIMAL_YN
          INTO
	               :rl_test_numeric_result_yn,
	               :rl_test_range_check_yn,
	               :rl_test_age_sex_range_yn,
	               :rl_test_function_yn,
	               :rl_test_culture_test_yn,
	               :rl_test_no_of_decimals,
	               :rl_test_significant_digits,
	               :rl_test_essential_yn,
	               :rl_test_tech_review_yn,
	               :rl_t_low_val_tech,
	               :rl_t_high_val_tech,
	               :rl_test_path_review_yn,
	               :rl_test_low_value_normal,
	               :rl_test_high_value_normal,
	               :rl_test_text_block_yn,
	               :rl_test_delta_check_yn,
	               :rl_test_delta_check_type,
	               :rl_test_delta_percentage,
	               :rl_test_statistics_yn,
	               :rl_test_snomed_yn,
	               :rl_test_patient_marker_yn,
	               :rl_test_qlty_review_yn,
	               :rl_t_q_val_per_units,
	               :rl_test_qlty_validity_period,
	               :rl_test_comment_review_yn,
	               :rl_t_delta_val_per,
	               :rl_t_delta_val_per_units,
				   :rl_result_comment_review_yn,
				   :t_test_units,
				   :t_test_ref_comment,
				   :rl_o_delta_check_yn,
				   :rl_o_delta_review_yn,
				   :rl_o_delta_val_period,
				   :rl_o_delta_val_units,
				   :rl_c_delta_check_yn,
				   :rl_c_delta_review_yn,
				   :rl_c_delta_val_period,
				   :rl_c_delta_val_units,
				   :rl_test_round_decimal_yn
               FROM    RL_TEST_CODE
               WHERE   TEST_CODE = :d_test_code;
/** Commented on 18/08/2004 since Test code is unique across section
			   AND     SECTION_CODE = :d_section_code;
**/

   rl_test_numeric_result_yn.arr[ rl_test_numeric_result_yn.len]='\0';
   rl_test_range_check_yn.arr[ rl_test_range_check_yn.len]='\0';
   rl_test_age_sex_range_yn.arr[ rl_test_age_sex_range_yn.len]='\0';
   rl_test_function_yn.arr[ rl_test_function_yn.len]='\0';
   rl_test_culture_test_yn.arr[ rl_test_culture_test_yn.len]='\0';
   rl_test_no_of_decimals.arr[ rl_test_no_of_decimals.len]='\0';
   rl_test_significant_digits.arr[ rl_test_significant_digits.len]='\0';
   rl_test_essential_yn.arr[ rl_test_essential_yn.len]='\0';
   rl_test_tech_review_yn.arr[ rl_test_tech_review_yn.len]='\0';
   rl_t_low_val_tech.arr[ rl_t_low_val_tech.len]='\0';
   rl_t_high_val_tech.arr[ rl_t_high_val_tech.len]='\0';
   rl_test_path_review_yn.arr[ rl_test_path_review_yn.len] = '\0';
   rl_test_low_value_normal.arr[ rl_test_low_value_normal.len] = '\0';
   rl_test_high_value_normal.arr[ rl_test_high_value_normal.len] = '\0';
   rl_test_text_block_yn.arr[ rl_test_text_block_yn.len] = '\0';
   rl_test_delta_check_yn.arr[ rl_test_delta_check_yn.len] = '\0';
   rl_test_delta_check_type.arr[ rl_test_delta_check_type.len] = '\0';
   rl_test_delta_percentage.arr[ rl_test_delta_percentage.len] = '\0';
   rl_test_statistics_yn.arr[ rl_test_statistics_yn.len] = '\0';
   rl_test_snomed_yn.arr[ rl_test_snomed_yn.len] = '\0';
   rl_test_patient_marker_yn.arr[ rl_test_patient_marker_yn.len] = '\0';
   rl_test_qlty_review_yn.arr[ rl_test_qlty_review_yn.len] = '\0';
   rl_t_q_val_per_units.arr[ rl_t_q_val_per_units.len] = '\0';
   rl_test_qlty_validity_period.arr[ rl_test_qlty_validity_period.len] = '\0';
   rl_test_comment_review_yn.arr[ rl_test_comment_review_yn.len] = '\0';
   rl_t_delta_val_per.arr[ rl_t_delta_val_per.len] = '\0';
   rl_t_delta_val_per_units.arr[ rl_t_delta_val_per_units.len] = '\0';
   rl_result_comment_review_yn.arr[rl_result_comment_review_yn.len]		   = '\0';
   t_test_units.arr[t_test_units.len]									= '\0';
   t_test_ref_comment.arr[t_test_ref_comment.len]						= '\0';
   rl_test_round_decimal_yn.arr[rl_test_round_decimal_yn.len]			= '\0';


   rl_o_delta_check_yn.arr[rl_o_delta_check_yn.len]			= '\0';
   rl_o_delta_review_yn.arr[rl_o_delta_review_yn.len]		= '\0';
   rl_o_delta_val_period.arr[rl_o_delta_val_period.len]		= '\0';
   rl_o_delta_val_units.arr[rl_o_delta_val_units.len]		= '\0';
   rl_c_delta_check_yn.arr[rl_c_delta_check_yn.len]			= '\0';
   rl_c_delta_review_yn.arr[rl_c_delta_review_yn.len]		= '\0';
   rl_c_delta_val_period.arr[rl_c_delta_val_period.len]		= '\0';
   rl_c_delta_val_units.arr[rl_c_delta_val_units.len]		= '\0';

    numeric_result_yn[i] 		=  rl_test_numeric_result_yn.arr[0]; 
	round_decimal_yn[i] 		=  rl_test_round_decimal_yn.arr[0]; 
    range_check_yn[i]    		=  rl_test_range_check_yn.arr[0]; 
    age_sex_range_yn[i]			=  rl_test_age_sex_range_yn.arr[0]; 
    function_yn[i] 				=  rl_test_function_yn.arr[0]; 
    culture_test_yn[i] 			=  rl_test_culture_test_yn.arr[0]; 
    essential_yn[i] 			=  rl_test_essential_yn.arr[0]; 
    tech_review_yn[i] 			=  rl_test_tech_review_yn.arr[0]; 
    path_review_yn[i]			=  rl_test_path_review_yn.arr[0]; 
    text_block_yn[i] 			=  rl_test_text_block_yn.arr[0]; 
    delta_check_yn[i] 			=  rl_test_delta_check_yn.arr[0]; 
    delta_check_type[i] 		=  rl_test_delta_check_type.arr[0]; 
    statistics_yn[i]		 	=  rl_test_statistics_yn.arr[0]; 
    snomed_yn[i] 				=  rl_test_snomed_yn.arr[0]; 
    patient_marker_yn[i]		=  rl_test_patient_marker_yn.arr[0]; 
    qlty_review_yn[i] 			=  rl_test_qlty_review_yn.arr[0]; 
    comment_review_yn[i] 	    =  rl_test_comment_review_yn.arr[0]; 
	result_comment_review_yn[i] =  rl_result_comment_review_yn.arr[0];

	delta_o_check_yn[i]			=  rl_o_delta_check_yn.arr[0];
	delta_o_review_yn[i]		=  rl_o_delta_review_yn.arr[0];
	delta_c_check_yn[i]			=  rl_c_delta_check_yn.arr[0];
	delta_c_review_yn[i]		=  rl_c_delta_review_yn.arr[0];

    strcpy(test_code[i],		d_test_code.arr);
    strcpy(delta_validity_period[i],	rl_t_delta_val_per.arr); 
    strcpy(delta_val_period_units[i],	rl_t_delta_val_per_units.arr);
    strcpy(no_of_decimals[i],		rl_test_no_of_decimals.arr);
    strcpy(significant_digits[i],	rl_test_significant_digits.arr);
    strcpy(qlty_validity_period[i],	rl_test_qlty_validity_period.arr); 
    strcpy(qlty_val_period_units[i],	rl_t_q_val_per_units.arr); 
    strcpy(delta_percentage[i],		rl_test_delta_percentage.arr); 
    strcpy(low_value_normal[i],		rl_test_low_value_normal.arr); 
    strcpy(high_value_normal[i],	rl_test_high_value_normal.arr); 
    strcpy(low_value_technician[i],	rl_t_low_val_tech.arr); 
    strcpy(high_value_technician[i],	rl_t_high_val_tech.arr); 

	strcpy(rl_tst_cd_test_units[i].arr, t_test_units.arr);
	strcpy(rl_tst_cd_range_cmt[i].arr, t_test_ref_comment.arr);

	rl_tst_cd_test_units[i].len = strlen(rl_tst_cd_test_units[i].arr);
	rl_tst_cd_range_cmt[i].len = strlen(rl_tst_cd_range_cmt[i].arr);

	strcpy(delta_o_val_period[i], rl_o_delta_val_period.arr);
	strcpy(delta_o_val_units[i],  rl_o_delta_val_units.arr);
	strcpy(delta_c_val_period[i], rl_c_delta_val_period.arr);
	strcpy(delta_c_val_units[i],  rl_c_delta_val_units.arr);


#ifdef DEBUG
   printf("In fetch_test_details() \n");
   printf("tech_review_yn[i] =[%c] delta_percentage = %s path_review_yn = %c\n",
   tech_review_yn[i],delta_percentage[i],path_review_yn[i]);
#endif
    }
    return;
    err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at fetch_test_details()\n");
	return;
}
/*---------------------------------------------------------------------------*/

/* procedure to check status for running this background program ------------*/

/************************** this procedure not required 19.06.2003 
general_process_run()
{
#ifdef DEBUG
   printf("In general_process_run()\n");
#endif
rl_param_bg_release_status.arr[0] = '\0';
rl_param_bg_release_status.len    = 0; 

EXEC SQL SELECT 	NVL(BG_RELEASE_STATUS,'S')
	   INTO		:rl_param_bg_release_status
	   FROM		RL_PARAM;

      if (OERROR)
        ins_message(ERR_MESG,"Select failed on RL_PARAM");

#ifdef DEBUG
	     printf(" general_process_run(), rl_param_bg_release_status = %c\n",
		     rl_param_bg_release_status.arr[0]);
#endif

return (rl_param_bg_release_status.arr[0] == 'R' ? TRUE : FALSE);
}
************************************* */

/*--------------------------------------------------------------------------*/

/* Procedure to connec to ORACLE -------------------------------------------*/

sql_connect(l_nd_ap_uid_pwd)
char l_nd_ap_uid_pwd[];
{

#ifdef DEBUG
   printf("In sql_connect()\n");
#endif
  strcpy(uid_pwd.arr,l_nd_ap_uid_pwd);
  uid_pwd.len = strlen(uid_pwd.arr);

  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}


/************************************************/
 void declr_urgent_cursor()
{
   
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE test_cursor CURSOR FOR
	      SELECT OPERATING_FACILITY_ID,SPECIMEN_NO,ROWID,SUBSTR(TO_CHAR(SPECIMEN_NO),1,2)
               FROM    RL_ANALYZER_RESULTS 
               WHERE OPERATING_FACILITY_ID = DECODE(:nd_facility_id,'*A',OPERATING_FACILITY_ID,
																	:nd_facility_id)
			   AND specimen_no IN
			   (SELECT specimen_no
			   FROM RL_REQUEST_HEADER 
			   WHERE specimen_no = rl_analyzer_results.specimen_no
			   AND OPERATING_FACILITY_ID = rl_analyzer_results.operating_facility_id
   			   AND NVL(urgent_indicator,'!') = 'U'); 


	EXEC SQL OPEN test_cursor ;
  return;

err_exit:
    EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at dclr_urgent_cursor()\n");
	return;

}

/*****************************************/
int fetch_urg_analy_results()
{
#ifdef DEBUG
   printf("In fetch_urg_analy_results()\n");
#endif
     rl_anl_result_spec_no.arr[0]    	= '\0';
     rl_anl_result_rowid.arr[0]      	= '\0';
	 nd_operating_facility_id.arr[0]  	= '\0';

     rl_anl_result_spec_prfx.arr[0]    	= '\0';
     rl_anl_result_spec_prfx.arr[0]    	= '\0';

     rl_anl_result_spec_no.len		= 0;
     rl_anl_result_rowid.len		= 0;
     nd_operating_facility_id.len	= 0;

//////////// modified the following fetch on 19.06.2003    

     EXEC SQL FETCH test_cursor
     	        INTO	:nd_operating_facility_id,:rl_anl_result_spec_no,:rl_anl_result_rowid,
			            :rl_anl_result_spec_prfx ;

     
	 
	 if (OERROR)
	    ins_message(ERR_MESG,"Select failed on table RL_ANALYZER_RESULTS");

     if (NOT_FOUND)
     {
	 EXEC SQL CLOSE test_cursor ;
	 return 0;
     }
     else
     {
         rl_anl_result_spec_no.arr[rl_anl_result_spec_no.len]   = '\0';
         rl_anl_result_rowid.arr  [rl_anl_result_rowid.len]     = '\0';
         rl_anl_result_spec_prfx.arr  [rl_anl_result_spec_prfx.len]     = '\0';

////////// added following line on 19.06.2003

         nd_operating_facility_id.arr  [nd_operating_facility_id.len]     = '\0';

#ifdef DEBUG
   printf("fetch_rl_analyzer_results() rl_anl_result_spec_no = %s\n",
	  rl_anl_result_spec_no.arr);
#endif
	 EXEC SQL CLOSE test_cursor ;
	 return 1;
     }
	 
}


/*--------------------------------------------------------------------------*/

/* procedure to fetch a row from rl_analyzer_requests ----------------------*/
int fetch_rl_analyzer_results()
{
#ifdef DEBUG
   printf("In fetch_rl_analyzer_results()\n");
#endif
     rl_anl_result_spec_no.arr[0]    	= '\0';
     rl_anl_result_rowid.arr[0]			= '\0';
     nd_operating_facility_id.arr[0]   	= '\0';

     rl_anl_result_spec_prfx.arr[0]    	= '\0';
     rl_anl_result_spec_prfx.arr[0]    	= '\0';

     rl_anl_result_spec_no.len		= 0;
     rl_anl_result_rowid.len		= 0;
     nd_operating_facility_id.len	= 0;
    
     EXEC SQL SELECT 	OPERATING_FACILITY_ID,SPECIMEN_NO,ROWID,SUBSTR(TO_CHAR(SPECIMEN_NO),1,2)
     	        INTO	:nd_operating_facility_id,:rl_anl_result_spec_no,:rl_anl_result_rowid,
			            :rl_anl_result_spec_prfx
                FROM    RL_ANALYZER_RESULTS
                WHERE   OPERATING_FACILITY_ID = DECODE(:nd_facility_id,'*A',OPERATING_FACILITY_ID,
																	:nd_facility_id)
				AND     ROWNUM < 2;

/**** CHANGED ON 01/11/1999 BECAUSE OF DEADLOCK  *****/
/*       FOR    UPDATE OF SPECIMEN_NO;*/

     if (OERROR)
	    ins_message(ERR_MESG,"Select failed on table RL_ANALYZER_RESULTS");

     if (NOT_FOUND)
     {
	 return 0;
     }
     else
     {
         rl_anl_result_spec_no.arr[rl_anl_result_spec_no.len]   = '\0';
         rl_anl_result_rowid.arr  [rl_anl_result_rowid.len]     = '\0';
         rl_anl_result_spec_prfx.arr  [rl_anl_result_spec_prfx.len]     = '\0';
         nd_operating_facility_id.arr  [nd_operating_facility_id.len]   = '\0';
#ifdef DEBUG
   printf("fetch_rl_analyzer_results() rl_anl_result_spec_no = %s\n",
	  rl_anl_result_spec_no.arr);
#endif
	 return 1;
     }
}
/*--------------------------------------------------------------------------*/
/*---------Function to delete the specimen after processing-----------------*/
delete_rl_analyzer_results() 
{
#ifdef DEBUG
   printf("In delete_rl_analyzer_results()\n");
#endif
       EXEC SQL DELETE FROM RL_ANALYZER_RESULTS
                 WHERE ROWID = :rl_anl_result_rowid;
       if (OERROR)
	      ins_message(ERR_MESG,"Delete failed on table RL_ANALYZER_RESULTS");
}
/*-------------------------------------------------------------------------*/
/*----- Function to get system date ---------------------------------------*/
char *to_day()
{
#ifdef DEBUG
   printf("In char *to_day()\n");
#endif

today.arr[0]	= '\0';
today.len	= 0;

EXEC SQL SELECT 	to_char(SYSDATE,'DD/MM/YYYY HH24:MI')
	   INTO		:today
	   FROM		DUAL;

   if (OERROR)
     ins_message(ERR_MESG,"Select failed on DUAL in to_day() ");

today.arr[today.len]	= '\0';
return (today.arr);
}
/*---------1.1---------------------------------------------------------------*/
calculate_result_by_formula()
{
  int function_test_left = 0;
  int start_flag = 1;
  char check_formula_test();
  for(x=0;x<no_of_tests;x++)
  {

/***** ADDED ON 18/09/1999  *****/
  if (strcmp(rl_test_rslt_status[x].arr,"R") != 0 && strcmp(rl_test_rslt_status[x].arr,"P") != 0)
  {
     
     start_flag = 1;
#ifdef DEBUG
   printf("calculate_result_by_formula() function_yn[x] = %c\n",function_yn[x]);
#endif
     if(function_yn[x] == 'Y')
     {
	rl_test_rslt_numeric_result[x].arr[0] = '\0';
	rl_test_rslt_numeric_result[x].len = 0;
	strcpy(func_formula_result.arr,"");
	func_formula_result.len = 0;
	strcpy(func_test_code.arr,rl_test_rslt_test_code[x].arr);
	func_test_code.len = strlen(func_test_code.arr);
        EXEC SQL OPEN FUNCTION_CURSOR;
        function_test_left = fetch_function_cursor();
        while(function_test_left)
        {
           if(start_flag == 1)
	   {
	      start_flag = 0;
	      if(func_opd_1_type.arr[0] == 'C')
	      {
		strcpy(func_formula_result.arr,func_opd_1.arr);
		func_formula_result.len = strlen(func_formula_result.arr);
              }
	      else
	      {
		  strcpy(formula_test_rslt.arr,"");
		 formula_test_rslt.len = 0;
		 check_formula_test(func_opd_1.arr);
		 if(formula_test_found_yn.arr[0] == 'N' || 
		    strlen(formula_test_rslt.arr) == 0)
		 {
		    break;
                 }
		 else
		 {
		    strcpy(func_formula_result.arr,formula_test_rslt.arr);
		    func_formula_result.len = strlen(func_formula_result.arr);
                 }
              }
           }
	   else
	   {
	      if(func_opd_1_type.arr[0] == 'C')
	      {
		 strcpy(func_operand.arr,func_opd_1.arr);
		 func_operand.len = strlen(func_operand.arr);
		 calculate_result(func_prev_opr.arr[0]);
              }
	      else
	      {
		 strcpy(formula_test_rslt.arr,"");
		 formula_test_rslt.len = 0;
		 check_formula_test(func_opd_1.arr);
		 if(formula_test_found_yn.arr[0] == 'N' ||
		    strlen(formula_test_rslt.arr)==0)
                 {
		    break;
                 }
		 else
		 {
		    strcpy(func_operand.arr,formula_test_rslt.arr);
		    func_operand.len = strlen(func_operand.arr);
		    calculate_result(func_prev_opr.arr[0]);
                 }
              }
	   }    
           if(func_opr_1.len)
	   {
	      if(func_opd_2_type.arr[0] == 'C')
	      {
		 strcpy(func_operand.arr,func_opd_2.arr);
		 func_operand.len = strlen(func_operand.arr);
		 calculate_result(func_opr_1.arr[0]);
              }
	      else
	      {
		 strcpy(formula_test_rslt.arr,"");
		 formula_test_rslt.len = 0;
		 check_formula_test(func_opd_2.arr);
		 if(formula_test_found_yn.arr[0] == 'N' ||
		    strlen(formula_test_rslt.arr)==0)
                 {
		    break;
                 }
		 else
		 {
		    strcpy(func_operand.arr,formula_test_rslt.arr);
		    func_operand.len = strlen(func_operand.arr);
		    calculate_result(func_opr_1.arr[0]);
                 }
              }
           }
	   strcpy(func_prev_opr.arr,func_opr_2.arr);
	   func_prev_opr.len = strlen(func_prev_opr.arr);
           function_test_left = fetch_function_cursor();
        }
        EXEC SQL CLOSE FUNCTION_CURSOR;
	if(formula_test_found_yn.arr[0] == 'N')
	{
	   strcpy(func_formula_result.arr,"");
	   func_formula_result.len = strlen(func_formula_result.arr);
           break;
        }
	else
	{
	   EXEC SQL SELECT ROUND(:func_formula_result,3) 
		      INTO :func_formula_result
		      FROM DUAL;
           func_formula_result.arr[func_formula_result.len] = '\0';
#ifdef DEBUG
   printf("calculate_result_by_formula() func_formula_result.arr = %s\n",
   func_formula_result.arr);
#endif
	   strcpy(rl_test_rslt_numeric_result[x].arr,func_formula_result.arr);
	   rl_test_rslt_numeric_result[x].len =
			      strlen(rl_test_rslt_numeric_result[x].arr);
        }
     }
#ifdef DEBUG
   printf("END calculate_result_by_formula() rl_test_rslt_test_code[x].arr = %s\n rl_test_rslt_numeric_result[x].arr = %s\n",rl_test_rslt_test_code[x].arr,
   rl_test_rslt_numeric_result[x].arr);
#endif

/*********** NEWLY ADDED ON 26/03/2002 ***********************/
	if (atoi(rl_test_rslt_numeric_result[x].arr) < 0)
	{
		l_abs.arr[0]	= '\0';
		l_abs.len		= 0;
		
		EXEC SQL SELECT TO_CHAR(ABS(TO_NUMBER(:rl_test_rslt_numeric_result[x])))
				 INTO :l_abs
				 FROM DUAL;

		l_abs.arr[l_abs.len]		= '\0';
		
		strcpy(rl_test_rslt_numeric_result[x].arr, l_abs.arr);
		rl_test_rslt_numeric_result[x].len =
			      strlen(rl_test_rslt_numeric_result[x].arr);

		strcpy(rl_test_rslt_numeric_prefix[x].arr, "-");
		rl_test_rslt_numeric_prefix[x].len =
			      strlen(rl_test_rslt_numeric_prefix[x].arr);
	}
/*********** UPTO HERE **************************/

   }
  }
#ifdef DEBUG
   printf("end of Calculate_result_by_formula\n");
#endif

}
int fetch_function_cursor()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL FETCH FUNCTION_CURSOR
             INTO :func_opd_1,:func_opd_1_type,:func_opr_1,
                  :func_opd_2,:func_opd_2_type,:func_opr_2;
   if(NODATAFOUND)
      return 0;
   func_opd_1.arr[func_opd_1.len] = '\0';
   func_opd_1_type.arr[func_opd_1_type.len] = '\0';
   func_opr_1.arr[func_opr_1.len] = '\0';
   func_opd_2.arr[func_opd_2.len] = '\0';
   func_opd_2_type.arr[func_opd_2_type.len] = '\0';
   func_opr_2.arr[func_opr_2.len] = '\0';

#ifdef DEBUG
   printf("fetch_function_cursor() \n func_opd_1 = %s\n func_opd_1_type=%s\n func_opr_1 = %s func_opd_2 = %s\n func_opd_2_type=%s\n func_opr_2 = %s \n",
   func_opd_1.arr,func_opd_1_type.arr,func_opr_1.arr,
   func_opd_2.arr,func_opd_2_type.arr,func_opr_2.arr);
#endif
   return 1;
   err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at close_function_cursor()\n");
	return;
}
/*---------1.2----------------------------------------------------------------*/
validate_before_commit()
{
  char mresult_null_yn;
  insert_technical_review_yn='N';
  insert_abnormal_review_yn='N';
  insert_normal_review_yn='N';
  r_rule_review_ind.arr[0]    = '\0';
  r_rule_review_ind.len       = 0;

  for(x=0;x<no_of_tests;x++)
  {

     /**** ADDED ON 18/09/1999   ****/
	if (strcmp(rl_test_rslt_status[x].arr,"R") != 0 && strcmp(rl_test_rslt_status[x].arr,"P") != 0)
    {

   
        check_signif_decimal_digits(x);

        strcpy(rl_test_rslt_modified_yn[x].arr,"Y");
        rl_test_rslt_modified_yn[x].len=strlen(rl_test_rslt_modified_yn[x].arr);
        strcpy(rl_test_rslt_status[x].arr,"R");
        rl_test_rslt_status[x].len = 0;

     copy_to_temp(x); 

     mresult_null_yn = check_result_null(x);
	 
     if(mresult_null_yn == 'Y')
     {
		if(essential_yn[x]=='Y')
		{
			strcpy(rl_test_rslt_status[x].arr,"");
			rl_test_rslt_status[x].len = 0;
			strcpy(rl_test_rslt_modified_yn[x].arr,"N");
			rl_test_rslt_modified_yn[x].len =
			strlen(rl_test_rslt_modified_yn[x].arr);
        }

		strcpy(l_update_workload[x].arr,"N");
		l_update_workload[x].len = strlen(l_update_workload[x].arr);
     }
	 else
	 {
		strcpy(l_update_workload[x].arr,"Y");
		l_update_workload[x].len = strlen(l_update_workload[x].arr);
	 }
	 

#ifdef DEBUG
   printf("vbc() test = %s status = %c mresult_null_yn = %c ess_yn[x] = %c\n",rl_test_rslt_test_code[x].arr,rl_test_rslt_status[x].arr[0],mresult_null_yn,
   essential_yn[x]);
#endif
     if(mresult_null_yn == 'N')
     {
	preliminary_reviews();
#ifdef DEBUG
     printf("vbc() after prel_review t_cd = %s st=%c tc=%c dlt=%c qlt=%c cmt=%c \n",
rl_test_rslt_test_code[x].arr,rl_test_rslt_status[x].arr[0],
rl_test_rslt_tech_status[x].arr[0], rl_test_rslt_delta_status[x].arr[0],
rl_test_rslt_qlty_status[x].arr[0], rl_test_rslt_cmnt_status[x].arr[0]);
getchar();
#endif

	if(rl_test_rslt_status[x].arr[0] == 'A')
	   insert_technical_review_yn = 'Y';
        else
	   path_review();

/* EACH TRANSACTION HAS ITS OWN LOG TABLES   */
/*        insert_result_log(); */


	do_reflex_process();

	close_test_rules();  

/************** ADDED ON 20/07/2002 FOR KNDV ENHANCEMENTS *****************/
	insert_reflex_text();

/****************** added on 19.06.2003 to insert text snomed pair **********/	
	insert_text_snomed_pair();


	if (interval_specimen > 0)
		update_interval_tests();

	if(patient_marker_yn[x] == 'Y')
	{
	  if(rl_test_rslt_status[x].arr[0] == 'R')   /// 15.10.2003 
	   update_patient_marker();
	}
     }
  #ifdef DEBUG
     printf("vbc() after all revs t_cd[%s] num_rslt[%s] stat=%c tech=%c delta=%c qlty=%c cmnt=%c path=%c\n",
     rl_test_rslt_test_code[x].arr,rl_test_rslt_numeric_result[x].arr,rl_test_rslt_status[x].arr[0],rl_test_rslt_tech_status[x].arr[0],
rl_test_rslt_delta_status[x].arr[0],rl_test_rslt_qlty_status[x].arr[0],
rl_test_rslt_cmnt_status[x].arr[0],rl_test_rslt_path_status[x].arr[0]);
  #endif
  }
 
 }
#ifdef DEBUG
   printf("vbc() ins_abn_rev = %c ins_nor_rev =%c ins_tec_rev = %c\n",
   insert_abnormal_review_yn,insert_normal_review_yn,insert_technical_review_yn);getchar();
#endif
  if((insert_technical_review_yn == 'Y') || (strcmp(r_rule_review_ind.arr, "T") == 0))
  {
     insert_technician_review();
     insert_abnormal_review_yn = 'N';
     insert_normal_review_yn = 'N';
     r_rule_review_ind.arr[0] = '\0';
     r_rule_review_ind.len = 0;
  }

  if((insert_abnormal_review_yn == 'Y') || (strcmp(r_rule_review_ind.arr, "A") == 0))
  {
     insert_normal_review_yn = 'N';
     insert_abnormal_review();
     r_rule_review_ind.arr[0] = '\0';
     r_rule_review_ind.len = 0;

  }

  if ((insert_normal_review_yn == 'Y') || (strcmp(r_rule_review_ind.arr, "N") == 0))
     insert_normal_review();
#ifdef DEBUG
     printf("********Validate Before Commit is over *******");
#endif
}
/*---------1.3----------------------------------------------------------------*/
check_result_status()
{
char mgrp_code[11],mall_ess_met_yn,mgrp_print_yn,mresult_null_yn;
int  l,c,gc,mgrp_start_rec_no,mgrp_last_rec_no,d_no_of_recs,n;
#ifdef DEBUG 
   printf("Check_result_status() Start\n");
#endif;
c = 0;

while(c < no_of_tests)
{

   #ifdef DEBUG 
      printf("rl_test_rslt_numeric_result = %s\n",
      rl_test_rslt_numeric_result[c].arr);
    #endif;
  
    mabnormal_yn = 'N';
    mrelease_yn  = 'N';
    moutstdg_yn  = 'N';
    mall_ess_met_yn = 'Y';
    strcpy(mgrp_code,rl_test_rslt_group_test_code[c].arr);
    mgrp_print_yn = 'N';
    mgrp_start_rec_no = c;

    #ifdef DEBUG 
      printf("no_of_tests = %d mgrp_code,rl_test_rslt_group_test_code[c].arr\n",
      no_of_tests,rl_test_rslt_group_test_code[c].arr);
    #endif;

     while( c < no_of_tests && 
	   (strcmp(mgrp_code,rl_test_rslt_group_test_code[c].arr)==0)) 
    {
       #ifdef DEBUG 
          printf("c = %d test = %s status = %c \n",c,rl_test_rslt_test_code[c].arr,
          rl_test_rslt_status[c].arr[0]);
       #endif;
	   
      if(essential_yn[c] == 'Y')
	  {
	    if(rl_test_rslt_status[c].arr[0] == '\0')
		{
		  mall_ess_met_yn = 'N';
		 }
	  }
     
      if(rl_test_rslt_status[c].arr[0] == '\0')
	     moutstdg_yn = 'Y';
      else
      {
	    if(rl_test_rslt_status[c].arr[0] == 'A')
	      mabnormal_yn = 'Y';
        else
		{
	      if(rl_test_rslt_status[c].arr[0] == 'R')
		  {
	        mrelease_yn = 'Y';
			mgrp_print_yn = 'Y';
		  }
		}
	  }

		 if ( (rl_test_rslt_modified_yn[c].arr[0] == 'Y') &&
			(l_update_workload[c].arr[0] == 'Y') )
		 {


			rl_workload_stat(c);

/**** COMMENTED ON 16/03/2003 SINCE THE BUILDING OF RESULT WORKLAOD IS 
	  WILL HAPPEN THRU DBA JOB THE INSERTION INTO INTERMEDIATE TABLE 
	WILL DO THRU RL_WORKLOAD_STAT ROUTINE WRITTEN IN THIS PC FILE ******
			 update_result_workload(c);
********************************************/

		 }
     
     c++;
   }

   #ifdef DEBUG
      printf("mall_ess_met_yn = %c mo = %c ma = %c mr = %c mgrp_print_yn = %c\n",
      mall_ess_met_yn,moutstdg_yn,mabnormal_yn,mrelease_yn,mgrp_print_yn);getchar();
   #endif

   mgrp_last_rec_no = c;
   gc = mgrp_start_rec_no;

  while(gc < mgrp_last_rec_no && gc < no_of_tests)
  {
    #ifdef DEBUG 
       printf("gc = %d test = %s status = %c \n",gc,rl_test_rslt_test_code[gc].arr,
       rl_test_rslt_status[gc].arr[0]);
     #endif;

     if(essential_yn[gc] == 'N')
     {
	   if(mall_ess_met_yn == 'N')
	   {
	     mresult_null_yn = check_result_null(gc);
	     if(mresult_null_yn == 'Y')
	     {
	        rl_test_rslt_status[gc].arr[0] = '\0';
	        rl_test_rslt_status[gc].len = 0;
         }
       }
     }
      #ifdef DEBUG
        printf("crs() t_cd = %s num_rslt = %s stat=%c \n",
        rl_test_rslt_test_code[gc].arr,rl_test_rslt_numeric_result[gc].arr,rl_test_rslt_status[gc].arr[0]);
     #endif
     gc++;
   }

   if(mall_ess_met_yn == 'N')
   {
      moutstdg_yn = 'Y';
      mrelease_yn = 'N';
   }
   else
   {
      if(mabnormal_yn == 'Y')
      {
	    mrelease_yn = 'N';
	    moutstdg_yn = 'N';
      }
      else
      {
	     if(moutstdg_yn == 'Y')
	         mrelease_yn = 'N';
      }
   }

   strcpy(v_group_test_code.arr,mgrp_code);
   v_group_test_code.len = strlen(v_group_test_code.arr);
   check_request_status(moutstdg_yn,mabnormal_yn,mrelease_yn,mgrp_print_yn);

 }
}
/*---------1.4----------------------------------------------------------------*/
update_interval_tests()
{
	interval_status.arr[0]	= '\0';
	interval_status.len		= 0;

	EXEC SQL SELECT 'X' 
		INTO :interval_status
		FROM RL_INTERVAL_TEST_SPECIMENS
	    WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
	    AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND test_code = :t_test_code
		AND NVL(cancelled_yn, 'N') <> 'Y'
	    FOR UPDATE OF status NOWAIT;

	interval_status.arr[interval_status.len]	= '\0';

	if(OERROR) 
	{
	    ins_message(ERR_MESG, "Update failed on RL_INTERVAL_TEST_SPECIMENS.");
		return;
	}

	if (NODATAFOUND);
	else
	{
		strcpy(interval_status.arr, rl_test_rslt_status[x].arr);
		interval_status.len = strlen(interval_status.arr);

		EXEC SQL UPDATE RL_INTERVAL_TEST_SPECIMENS
			SET status = :interval_status
			WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND test_code = :t_test_code;

	 }



}
/*---------1.4----------------------------------------------------------------*/


/*---------1.4----------------------------------------------------------------*/
update_request_header()
{

void insert_send_refl_result();
#ifdef DEBUG
   printf("update_request_header() start\n");
#endif

 if(nd_upd_req_hdr_yn == 'Y')
 {

   EXEC SQL SELECT STATUS
            INTO :l_stat
	        FROM RL_REQUEST_HEADER
            WHERE PATIENT_ID = :rl_req_patient_id 
	        AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
	        AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			FOR UPDATE OF STATUS NOWAIT;

   if (OERROR)
   {
	  lock_error = 'E';
	  
   }
   else
   {
		EXEC SQL SELECT 'N' INTO :d_found
	      FROM DUAL
             WHERE EXISTS ( SELECT RESULT_STATUS
			      FROM RL_REQUEST_DETAIL
                             WHERE PATIENT_ID = :rl_req_patient_id
			       AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
			       AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				   AND (RESULT_STATUS IS NULL
			            OR RESULT_STATUS IN ('A','O')));
   
   if(NODATAFOUND)
   {
#ifdef DEBUG
   printf("update_request_header() \n");
#endif
      EXEC SQL UPDATE RL_REQUEST_HEADER
			      SET STATUS = 'R',
                      RELEASED_BY_ID = USER,
                      RELEASED_DATE = SYSDATE,
		              MODIFIED_BY_ID = USER,
		              MODIFIED_DATE = SYSDATE
                WHERE PATIENT_ID = :rl_req_patient_id 
		          AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
				  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

				request_update_yn = 'Y';

		  if(
		     (strcmp(rl_req_entity_id.arr,nd_entity_id.arr) != 0) &&
			 (rl_req_results_sent_yn.arr[0] == 'N')
			)
		  {

		     insert_send_refl_result();
	
		  }
   }
   else
   {

      EXEC SQL UPDATE RL_REQUEST_HEADER
				  SET STATUS = 'O',
                      RELEASED_BY_ID = USER,
                      RELEASED_DATE = SYSDATE,
					  MODIFIED_BY_ID = USER,
					  MODIFIED_DATE = SYSDATE
                WHERE PATIENT_ID = :rl_req_patient_id
				  AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
				  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

   }
  }

 }
}
/*-------------------------------------------------------------------------*/
void insert_send_refl_result()
{

/*********************** 19.06.2003 this is to be uncommented later	

     EXEC SQL INSERT INTO RL_SEND_REFL_RESULT(specimen_no)
			  VALUES(:rl_anl_result_spec_no);
******************/	

    if(OERROR) 
	    ins_message(ERR_MESG,"Insert failed on RL_SEND_REFL_RESULT.");

}
/*---------1.5----------------------------------------------------------------*/
insert_print_control_hdr()
{
    int m_stat = 0;
	
       m_episode_id.arr[0]	 = '\0';
	   m_inpatient_yn.arr[0] = '\0';      

       m_episode_id.len	  	 = 0;
	   m_inpatient_yn.len    = 0;

	   strcpy(print_destn_type.arr, rl_req_source_type.arr);
	   print_destn_type.len = strlen(print_destn_type.arr);

	   strcpy(print_destn.arr, rl_req_source_code.arr);
	   print_destn.len = strlen(print_destn.arr);

/*****  added the following line on 21.07.2003 **/

	 if (strcmp(nd_operating_facility_id.arr, nd_ordered_facility_id.arr) == 0)
	 {
       EXEC SQL SELECT OPEN_EPISODE_ID, 'Y' INTO :m_episode_id,:m_inpatient_yn
		  FROM IP_OPEN_EPISODE
                 WHERE FACILITY_ID = NVL(:nd_ordered_facility_id, :nd_operating_facility_id)
				 AND PATIENT_ID = :rl_req_patient_id;
       if(NODATAFOUND)
       {
	     if (rl_req_episode_type.arr[0] == 'I')
		 {

			if (strcmp(nd_print_disch_pat_result_yn.arr, "Y") == 0)
				m_stat = 1;

		 }
			
       }
       else
       {
	         m_episode_id.arr[m_episode_id.len]		= '\0';
	         m_inpatient_yn.arr[m_inpatient_yn.len]	= '\0';
             rl_req_source_code.arr[0] = '\0';
             rl_req_source_code.len = 0;
	         m_episode_id.arr[m_episode_id.len] = '\0';

             EXEC SQL SELECT CUR_WARD_CODE INTO :rl_req_source_code
		     FROM IP_EPISODE
             WHERE FACILITY_ID = NVL(:nd_ordered_facility_id, :nd_operating_facility_id)
			 AND EPISODE_ID = TO_NUMBER(:m_episode_id)
		     AND DISCHARGE_DATE_TIME IS NULL;

             if(NODATAFOUND)
                ins_message(ERR_MESG,"2 Failed on insert_print_control_hdr()");

             rl_req_source_code.arr[rl_req_source_code.len] = '\0';

			 if (strcmp(nd_in_patient_result_yn.arr, "Y") == 0)
					m_stat = 1;
			 else
					m_stat = 0;

        }
        if (rl_req_episode_type.arr[0] == 'O' || rl_req_episode_type.arr[0] == 'I'
		           && m_inpatient_yn.arr[0] == 'N')
		{

			 if (strcmp(nd_out_patient_result_yn.arr, "Y") == 0)
					m_stat = 1;
			 else
					m_stat = 0;


		}

      }

//// modified the following if stmnt on 21.07.2003 

        if (rl_req_episode_type.arr[0] == 'R' || rl_req_episode_type.arr[0] == 'H' || 
					strcmp(nd_operating_facility_id.arr, nd_ordered_facility_id.arr) == 1)
		{
              
			if (rl_req_episode_type.arr[0] == 'H' || 
					strcmp(nd_operating_facility_id.arr, nd_ordered_facility_id.arr) == 1)
			{
				if (strcmp(nd_rf_patient_result_yn.arr, "Y") == 0)
					m_stat = 1;
				else
					m_stat = 0;
			  
			}

			if (rl_req_episode_type.arr[0] == 'R')
			{
				if (strcmp(nd_ex_patient_result_yn.arr, "Y") == 0)
					m_stat = 1;
				else
					m_stat = 0;
			
			}
			  

			  strcpy(print_destn.arr, rl_req_section_code.arr);
			  print_destn.len = strlen(print_destn.arr);
	    }

		if (strcmp(rl_req_urgent.arr,"U") == 0)
			m_stat = 1;

         if(m_stat == 1)
         {

	   	   strcpy(all_print_reqd_yn.arr,"N");
		   all_print_reqd_yn.len = strlen(all_print_reqd_yn.arr);

		   EXEC SQL SELECT print_reqd_yn 
		   INTO :all_print_reqd_yn
		   FROM RL_ONLINE_REPORTS
		   WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		   AND source_type = :print_destn_type
		   AND source_code = '*A';

		   if(NODATAFOUND)
		   {
			  strcpy(all_print_reqd_yn.arr,"N");
			  all_print_reqd_yn.len = strlen(all_print_reqd_yn.arr);
		   }

		   EXEC SQL SELECT print_reqd_yn 
		   INTO :mprint_reqd_yn
		   FROM RL_ONLINE_REPORTS
		   WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		   AND source_type = :print_destn_type
		   AND source_code = :rl_req_source_code;

		   if(NODATAFOUND)
		   {
			  strcpy(mprint_reqd_yn.arr,all_print_reqd_yn.arr);
			  mprint_reqd_yn.len = strlen(mprint_reqd_yn.arr);
		   }

		   if (strcmp(mprint_reqd_yn.arr,"Y") == 0)
		   {
			   l_sysdate.arr[0]			= '\0';
			   l_sysdate.len			= 0;

			   if (interval_specimen > 0 )
			   {
					check_should_print_yn();
			   }
			   else
			   {
				 l_should_print_yn = 'Y';
			   }


			   if (l_should_print_yn == 'Y')
			   {

					print_yn = 'N';
					get_print_status();
					if (rl_section_ctl_print_status.arr[0] == 'Y')
					{

						if (request_update_yn == 'Y')
							print_yn = 'Y';
					}
					else
						print_yn = 'Y';

					if (print_yn == 'Y' )
					{
						EXEC SQL SELECT TO_CHAR(SYSDATE,'DDMMYYHH24MISS') INTO :l_sysdate FROM DUAL;

						l_sysdate.arr[l_sysdate.len]			= '\0';


						EXEC SQL INSERT INTO SY_PROG_PARAM
							(operating_facility_id,pgm_id, session_id, pgm_date,
								param1, param2, param3, param4, param5, param6)
						VALUES(:nd_operating_facility_id,'RLRRSENQ', USERENV('SESSIONID'), 
							:l_sysdate, :rl_req_patient_id,
							:rl_anl_result_spec_no, :print_destn,
							USER, :rl_req_section_code, 'N');


						EXEC SQL INSERT INTO SY_REPORT_GENERATE_REQUEST
							(operating_facility_id,user_id, machine_name, ws_no, pgm_id, session_id,
							request_date, regenerate_request_date, pgm_type,
							cmd_line_arg, request_status, urgent_indicator)
						VALUES(:nd_operating_facility_id,USER, USERENV('TERMINAL'), NULL, 'RLRRSENQ',
							USERENV('SESSIONID'), TO_DATE(:l_sysdate, 'DDMMYYHH24MISS'),
							NULL, 'C', NULL, NULL, :rl_req_urgent);
					}
				}


		   }

	
          if(OERROR)
             ins_message(ERR_MESG,"3 Failed on insert_print_control_hdr()");
     }
}
/*------------------1.1.1-----------------------------------------------------*/
char check_formula_test(a_opd)  
char a_opd[];
{
   int a;
   strcpy(formula_test_found_yn.arr,"N");
   formula_test_found_yn.len = 1;
   formula_test_rslt.arr[0] = '\0';
   formula_test_rslt.len = 0;
   #ifdef DEBUG
      printf("Check_formula_test() no_of_tests = %d\n",no_of_tests);
   #endif
   for(a=0;a<no_of_tests;a++)
   {
   #ifdef DEBUG
      printf("Check_formula_test() a_opd = %s rl_test_rslt_test_code[a].arr =%s \n",a_opd,rl_test_rslt_test_code[a].arr);
   #endif
     if(strcmp(a_opd,rl_test_rslt_test_code[a].arr)==0)
     {
   #ifdef DEBUG
      printf("Check_formula_test() rl_test_rslt_numeric_result[a].arr = %s \n", rl_test_rslt_numeric_result[a].arr);
   #endif
     if(strcmp(a_opd,rl_test_rslt_test_code[a].arr)==0)
	 {
        if(strlen(rl_test_rslt_numeric_result[a].arr))
		{
			strcpy(formula_test_rslt.arr,rl_test_rslt_numeric_result[a].arr);
			formula_test_rslt.len = 0;
			strcpy(formula_test_found_yn.arr,"Y");
			formula_test_found_yn.len = 0;
			a = no_of_tests;
        }
		else
        {
			strcpy(formula_test_found_yn.arr,"N");
			formula_test_found_yn.len = 0;
			a = no_of_tests;
        }
	 }
    }
  }
#ifdef DEBUG
   printf("check_formula_test() formula_test_found_yn = %c formula_test_rslt %s\n", formula_test_found_yn.arr[0],formula_test_rslt.arr);
#endif
}
/*------------------1.1.2-----------------------------------------------------*/
calculate_result(opr)
char opr;
{
   #ifdef DEBUG
      printf("calculate result() func_formula_result = %s , func_operand = %s opr = %c\n",func_formula_result.arr,func_operand.arr,opr);
   #endif
   switch(opr)
   {
      case '-' : EXEC SQL SELECT TO_CHAR(TO_NUMBER(:func_formula_result) - 
			                 TO_NUMBER(:func_operand))
		            INTO :func_formula_result
		            FROM DUAL;
                 break;
      case '+' : EXEC SQL SELECT TO_CHAR(TO_NUMBER(:func_formula_result) + 
			                 TO_NUMBER(:func_operand))
		            INTO :func_formula_result
		            FROM DUAL;
                 break;
      case '/' : EXEC SQL SELECT TO_CHAR(TO_NUMBER(:func_formula_result) / 
			                 TO_NUMBER(:func_operand))
		            INTO :func_formula_result
		            FROM DUAL;
                 break;
      case '*' : EXEC SQL SELECT TO_CHAR(TO_NUMBER(:func_formula_result) * 
			                 TO_NUMBER(:func_operand))
		            INTO :func_formula_result
		            FROM DUAL;
                 break;
   }
   #ifdef DEBUG
      printf("calculate result() end func_formula_result = %s , func_operand = %s\n",func_formula_result.arr,func_operand.arr);
   #endif
}
/*------------------1.1.3-----------------------------------------------------*/
check_signif_decimal_digits(m)
int m;
{
   s_temp_result.arr[0] = '\0';
   s_temp_result.len = 0;
   s_significant_part.arr[0] = '\0';
   s_significant_part.len = 0;
   s_decimal_part.arr[0] = '\0';
   s_decimal_part.len = 0;
   s_integer_part.arr[0] = '\0';
   s_integer_part.len = 0;
   s_final_result.arr[0] = '\0';
   s_final_result.len = 0;
   sig_digits_app_yn = 'N';
   s_sig_digs = 0;
   s_no_of_decs = 0;
   v_no_of_decs = 0;
   s_digit = 0;
   s_decimal_position = 0;
   s_len_integer = 0;
   s_len_sig_part = 0;                        

if(strlen(rl_test_rslt_numeric_result[m].arr) > 0 )
{



   strcpy(s_temp_result.arr,rl_test_rslt_numeric_result[m].arr);
   s_temp_result.len = strlen(s_temp_result.arr);

/******** added the following on 26.07.2003 for rounding of decimal check  */

   if(round_decimal_yn[m] == 'Y')
   {

     v_no_of_decs = atoi(no_of_decimals[m]);
     
     EXEC SQL SELECT TO_CHAR(ROUND(TO_NUMBER(:s_temp_result), :v_no_of_decs))
	          INTO   :s_temp_result
			  FROM DUAL;
    }

/************** upto here ***************/


   #ifdef DEBUG
      printf("initial result = [%s]\n",s_temp_result.arr);getchar();
   #endif

   EXEC SQL SELECT INSTR(:s_temp_result,'.') INTO :s_decimal_position
	      FROM DUAL;

   #ifdef DEBUG
      printf("decimal_position = [%d]\n",s_decimal_position);getchar();
   #endif

   /* This if splits result into DECIMAL and INTEGER parts */

   if(s_decimal_position)
   {
      EXEC SQL SELECT SUBSTR(:s_temp_result,1,:s_decimal_position - 1),
		      LENGTH(SUBSTR(:s_temp_result,1,:s_decimal_position - 1))
		 INTO :s_integer_part,:s_len_integer
		 FROM DUAL;

      s_integer_part.arr[s_integer_part.len] = '\0';

   #ifdef DEBUG
      printf("integer_part = [%s] \n",s_integer_part.arr);getchar();
   #endif

      if(strlen(s_temp_result.arr) > s_decimal_position)
      {
	 EXEC SQL SELECT SUBSTR(:s_temp_result,:s_decimal_position+1,
				LENGTH(:s_temp_result))
                    INTO :s_decimal_part
		    FROM DUAL;
          s_decimal_part.arr[s_decimal_part.len] = '\0';
   #ifdef DEBUG
      printf("decimal_part = [%s] \n",s_decimal_part.arr);getchar();
   #endif
      }
   }
   else
   {
      strcpy(s_integer_part.arr,s_temp_result.arr);
      s_integer_part.len = strlen(s_integer_part.arr);
      EXEC SQL SELECT LENGTH(:s_temp_result) 
		 INTO :s_len_integer
		 FROM DUAL;
   }

   #ifdef DEBUG
      printf("s_len_integer = [%d] \n",s_len_integer);getchar();
   #endif
   /* This if is to take care of INTEGER part of the result */
   if(strlen(s_integer_part.arr))
   {
      if(atoi(significant_digits[m]) > 0)
      {
	 s_sig_digs = atoi(significant_digits[m]);
   #ifdef DEBUG
      printf("s_sig_digs = [%d] \n",s_sig_digs);getchar();
   #endif
	 if(strlen(s_integer_part.arr) <= atoi(significant_digits[m]))
	 {
	    strcpy(s_final_result.arr,s_integer_part.arr);
	    s_final_result.len = strlen(s_final_result.arr);
         }
	 else
	 {
	    sig_digits_app_yn = 'Y';
	    EXEC SQL SELECT SUBSTR(:s_integer_part,1,:s_sig_digs)
		       INTO :s_significant_part
		       FROM DUAL;
            s_significant_part.arr[s_significant_part.len] = '\0';
	    s_digit = 0;
	    EXEC SQL SELECT LENGTH(:s_significant_part)
		       INTO :s_len_sig_part
		       FROM DUAL;
	    EXEC SQL SELECT TO_NUMBER(SUBSTR(:s_integer_part,:s_sig_digs + 1,1))
		       INTO :s_digit
		       FROM DUAL;
            if(s_digit >= 5)
	    {
	       EXEC SQL SELECT TO_CHAR(TO_NUMBER(:s_significant_part) + 1)
			  INTO :s_significant_part
			  FROM DUAL;
               s_significant_part.arr[s_significant_part.len] = '\0';
		}

	       if(strlen(s_significant_part.arr) > s_len_sig_part)
			  s_len_integer++;

		if (s_digit == 9)
		{
	       EXEC SQL SELECT RPAD(:s_significant_part,
				     :s_len_integer,'0')
		          INTO :s_final_result
			  FROM DUAL;
               s_final_result.arr[s_final_result.len] = '\0';
	       if(strlen(s_final_result.arr) > 5)
	       {
			  strcpy(s_final_result.arr,s_temp_result.arr);
			  s_final_result.len = strlen(s_final_result.arr);
           }
        }
	    else
	    {
/*
	        EXEC SQL SELECT RPAD(:s_significant_part,
				      LENGTH(:s_integer_part),'0')
		           INTO :s_final_result
			   FROM DUAL;
*/
	        EXEC SQL SELECT RPAD(:s_significant_part,
				      :s_len_integer, '0')
		           INTO :s_final_result
			   FROM DUAL;

                s_final_result.arr[s_final_result.len] = '\0';
         }
	 }
      }
      else
      {
	 strcpy(s_final_result.arr,s_integer_part.arr);
	 s_final_result.len = strlen(s_final_result.arr);
      }
   }
   /* This if is to take care of DECIMAL part of the result */
   if(strlen(s_decimal_part.arr) && sig_digits_app_yn == 'N')
   {
      s_no_of_decs = atoi(no_of_decimals[m]);
   #ifdef DEBUG
      printf("len(decimal_part) = [%d] no_of_decimals = [%d]\n",
	strlen(s_decimal_part.arr),s_no_of_decs);
      getchar();
   #endif
      if(s_no_of_decs > 0)
      {
	 strcat(s_final_result.arr,".");
	 s_final_result.len = strlen(s_final_result.arr);
	 if(strlen(s_decimal_part.arr) <= s_no_of_decs)
	 {
	    strcpy(s_final_result.arr,
		   strcat(s_final_result.arr,s_decimal_part.arr));
	    s_final_result.len = strlen(s_final_result.arr);
         }
	 else
	 {
	    EXEC SQL SELECT :s_final_result ||
			    SUBSTR(:s_decimal_part,1,:s_no_of_decs)
		       INTO :s_final_result
		       FROM DUAL;
            s_final_result.arr[s_final_result.len] = '\0';
         }
      }
   }
   strcpy(rl_test_rslt_numeric_result[m].arr,s_final_result.arr);
   rl_test_rslt_numeric_result[m].len = 
		strlen(rl_test_rslt_numeric_result[m].arr);

}/* endif for if(rl_test_rslt_numeric_result[m].arr) */

#ifdef DEBUG
   printf("final result = [%s]\n",rl_test_rslt_numeric_result[m].arr);getchar();
#endif
}
/*------------------1.2.2-----------------------------------------------------*/
check_result_null(m)
int m;
{

/*
   if (rl_test_rslt_numeric_result[m].len > 0)
            v_result_null_yn = 'N';
   else
            v_result_null_yn = 'Y';

*/

   if( strcmp(rl_test_rslt_numeric_prefix[m].arr,"!") == 0 &&
        rl_test_rslt_numeric_result[m].len == 0 &&
         rl_test_rslt_rcc_1[m].len == 0 &&
         rl_test_rslt_rcc_2[m].len == 0 &&
         rl_test_rslt_rcc_3[m].len == 0 &&
         rl_test_rslt_rcc_4[m].len == 0 &&
         rl_test_rslt_rcd_1[m].len == 0 &&
         rl_test_rslt_rcd_2[m].len == 0 &&
         rl_test_rslt_rcd_3[m].len == 0 &&
         rl_test_rslt_rcd_4[m].len == 0)
{
            v_result_null_yn = 'Y';
			
}
   else
{
            v_result_null_yn = 'N';
			
}

   if (v_result_null_yn == 'Y')
		check_secondary_result_null();
    

   return(v_result_null_yn);
}

/*------------------1.2.3-----------------------------------------------------*/
preliminary_reviews()
{
#ifdef DEBUG
   printf("Preliminary_reviews() start\n");
   printf("test_code=[%s] num_rslt_yn=[%c] t_rv=[%c] d_rv=[%c] q_rv=[%c] c_rv=[%c]\n",
   numeric_result_yn[x],tech_review_yn[x],delta_check_yn[x],qlty_review_yn[x],
   comment_review_yn[x]);
   printf("num_rslt = [%s] num_rslt_len = %d\n",rl_test_rslt_numeric_result[x].arr,
   rl_test_rslt_numeric_result[x].len);
#endif

   if(numeric_result_yn[x] == 'Y')
   {
      if(rl_test_rslt_numeric_result[x].len > 0)
      {  
	 if(tech_review_yn[x] == 'Y')
	    range_review();
         if(delta_check_yn[x] == 'Y')
	    delta_review();
         if(qlty_review_yn[x] == 'Y')
	    quality_review();
      }
   }

/******* ADDED ON 10/09/2002 FOR KNDV ENHANCEMENTS ON DELTA ORGANISM & COMMENT *******/
//sprintf(string_var, "delta check %c    ", delta_c_check_yn[x]);
//disp_message(ERR_MESG, string_var);

	if (delta_c_check_yn[x] == 'Y')
	{
		if (strlen(t_rcc_1.arr) > 0 || strlen(t_rcc_2.arr) > 0 ||
		strlen(t_rcc_3.arr) > 0 || strlen(t_rcc_4.arr) > 0)
		{
//disp_message(ERR_MESG, "REVIEW COMMENT");
			delta_review_comment();
		}


	}

	if (delta_o_check_yn[x] == 'Y')
	{
		delta_review_organism();
	}

/******* UPTO HERE ADDED ON 10/09/2002 FOR KNDV ENHANCEMENTS ON DELTA ORGANISM & COMMENT *******/

   if(comment_review_yn[x] == 'Y')
      comment_review();

   if (result_comment_review_yn[x] == 'Y')
	  result_comment_review();

#ifdef DEBUG
   printf("Preliminary_reviews() end\n");
#endif
}
/*------------------1.2.4-----------------------------------------------------*/
path_review()
{
#ifdef DEBUG
   printf("Path_review() start path_review_yn = %c\n",path_review_yn[x]);
#endif
  switch(path_review_yn[x])
  {
    case 'A':
        if(rl_test_rslt_numeric_result[x].len > 0 )
        {
            abnormal_path_review();
        }
        else if( strcmp(rl_test_rslt_numeric_prefix[x].arr,"!") == 0 &&
		 rl_test_rslt_numeric_result[x].len == 0 &&
         rl_test_rslt_rcc_1[x].len == 0 &&
         rl_test_rslt_rcc_2[x].len == 0 &&
         rl_test_rslt_rcc_3[x].len == 0 &&
         rl_test_rslt_rcc_4[x].len == 0 &&
         rl_test_rslt_rcd_1[x].len == 0 &&
         rl_test_rslt_rcd_2[x].len == 0 &&
         rl_test_rslt_rcd_3[x].len == 0 &&
         rl_test_rslt_rcd_4[x].len == 0)

        {
            strcpy(rl_test_rslt_status[x].arr,"");
            rl_test_rslt_status[x].len = 1;
            strcpy(rl_test_rslt_path_status[x].arr,"");
            rl_test_rslt_path_status[x].len = 0;
        }
        
	break;
    case 'N':
	strcpy(rl_test_rslt_status[x].arr,"A");
	rl_test_rslt_status[x].len = strlen(rl_test_rslt_status[x].arr);
	strcpy(rl_test_rslt_path_status[x].arr,"N");
	rl_test_rslt_path_status[x].len=
	      strlen(rl_test_rslt_path_status[x].arr);
	insert_normal_review_yn = 'Y';
	break;
   }
#ifdef DEBUG
   printf("Path_review() end\n");
#endif
}
/*------------------1.2.5-----------------------------------------------------*/
insert_result_log()
{
   rl_rslt_log_stat_ind.arr[0] = statistics_yn[x];
   rl_rslt_log_stat_ind.len = strlen(rl_rslt_log_stat_ind.arr);
#ifdef DEBUG
   printf("insert_result_log() start\n");
   printf("rl_req_patient_id = %s rl_anl_result_spec_no = %s\n t_group_test_code = %s t_test_code = %s\n t_section_code = %c rl_rlst_log_stat_ind = %c\n numeric_prefix = %c numeric_result = %s \n t_rcc1 = %s t_status = %c\n",
   rl_req_patient_id.arr,rl_anl_result_spec_no.arr,t_group_test_code.arr,
   t_test_code.arr,t_section_code.arr[0],rl_rslt_log_stat_ind.arr[0],
   t_numeric_prefix.arr[0], t_numeric_result.arr,t_rcc_1.arr,t_status.arr[0]);
#endif
   EXEC SQL INSERT INTO RL_RESULT_LOG
			(OPERATING_FACILITY_ID,USERID,PATIENT_ID,SPECIMEN_NO,
		         GROUP_TEST_CODE,TEST_CODE,SECTION_CODE,
			 LOG_DATE_TIME,NUMERIC_PREFIX,NUMERIC_RESULT,
			 RESULT_COMMENT_CODE,RESULT_STATUS,STATISTIC_IND,
			 ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,MODIFIED_DATE,
			 ADDED_AT_WS_NO,
             ADDED_FACILITY_ID,
             MODIFIED_AT_WS_NO,
             MODIFIED_FACILITY_ID)
            VALUES (:nd_operating_facility_id,SUBSTR(USER,1,20),
			 SUBSTR(:rl_req_patient_id,1,15),
			 TO_NUMBER(SUBSTR(:rl_anl_result_spec_no,1,9)),
			 SUBSTR(:t_group_test_code,1,5),
			 SUBSTR(:t_test_code,1,5),
			 SUBSTR(:t_section_code,1,1),
			 SYSDATE,
			 SUBSTR(:t_numeric_prefix,1,1),
			 SUBSTR(:t_numeric_result,1,5),
			 SUBSTR(:t_rcc_1,1,4),
			 SUBSTR(:t_status,1,1),
			 SUBSTR(:rl_rslt_log_stat_ind,1,5),
			 SUBSTR(USER,1,20),
			 SUBSTR(USER,1,20),
			 SYSDATE,
			 SYSDATE,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id
             );
    if(OERROR)
       return;
#ifdef DEBUG
   printf("insert_result_log() end\n");
#endif
}
/*------------------1.2.6-----------------------------------------------------*/
update_patient_marker()
{
   int flag = 0;
#ifdef DEBUG
   printf("update_patient_marker() start\n");
#endif
   if(numeric_result_yn[x] == 'Y')
   {
      if(strlen(rl_test_rslt_numeric_result[x].arr)>0)
      {
	 EXEC SQL SELECT TEST_RESULT 
	        INTO :l_test_result
		    FROM RL_PATIENT_MARKERS
                   WHERE PATIENT_ID = :rl_req_patient_id
		     AND TEST_CODE = :t_test_code
		     FOR UPDATE OF TEST_RESULT NOWAIT ;

        if(OERROR)
		{
            ins_message(ERR_MESG,"Failed on update_patient_marker()");
		}
		else
		{
			EXEC SQL UPDATE RL_PATIENT_MARKERS
		     SET TEST_RESULT = :t_numeric_result,
			 RESULT_DATE_TIME = SYSDATE,
			 PREV_DELTA_RESULT = NULL,
			 MODIFIED_BY_ID = USER,
			 MODIFIED_DATE = SYSDATE,
			 REQUEST_DATE_TIME = to_date(:rl_req_hdr_spec_time,
						'DD/MM/YYYY HH24:MI')
                   WHERE PATIENT_ID = :rl_req_patient_id
		     AND TEST_CODE = :t_test_code;
		}
      }
      else
      {
		flag = 1;
      }
   }
   else
      flag = 1;

   if(flag == 1)
   {
	 EXEC SQL UPDATE RL_PATIENT_MARKERS
		     SET TEST_RESULT = :t_rcc_1,
			 RESULT_DATE_TIME = SYSDATE,
			 PREV_DELTA_RESULT = NULL,
			 MODIFIED_BY_ID = USER,
			 MODIFIED_DATE = SYSDATE,
			 REQUEST_DATE_TIME = to_date(:rl_req_hdr_spec_time,
						'DD/MM/YYYY HH24:MI')
                   WHERE PATIENT_ID = :rl_req_patient_id
		     AND TEST_CODE = :t_test_code;
        if(OERROR)
            ins_message(ERR_MESG,"Failed on update_patient_marker()");
   }
#ifdef DEBUG
   printf("update_patient_marker() end\n");
#endif
}
/*------------------1.2.7-----------------------------------------------------*/
insert_technician_review()
{
#ifdef DEBUG
   printf("insert_technician_review() start\n");
#endif
      EXEC SQL INSERT INTO RL_TECHNICIAN_REVIEW(
	          OPERATING_FACILITY_ID, PATIENT_ID,SPECIMEN_NO,ADDED_BY_ID,MODIFIED_BY_ID,
		      ADDED_DATE,MODIFIED_DATE, URGENT_INDICATOR, 
			  section_code, assign_to, assign_date_time, category_code,
			  category_year, category_number,
			  ADDED_AT_WS_NO,
              ADDED_FACILITY_ID,
              MODIFIED_AT_WS_NO,
              MODIFIED_FACILITY_ID)
              VALUES (:nd_operating_facility_id,:rl_req_patient_id,:rl_anl_result_spec_no,
		       USER,USER,SYSDATE,SYSDATE,:rl_req_urgent,
			   :rl_req_section_code, :rl_assign_to, TO_DATE(:rl_assign_date_time, 'DD/MM/YYYY HH24:MI:SS'),
			   :rl_category_code,	   :rl_category_year, :rl_category_number,
			   sys_context('USERENV','IP_ADDRESS'),
			   :nd_operating_facility_id,
			   sys_context('USERENV','IP_ADDRESS'),
			   :nd_operating_facility_id);

   if(OERROR)
       ins_message(ERR_MESG,"Failed on insert_technician_review()");
#ifdef DEBUG
   printf("insert_technician_review() end\n");
#endif
}
/*------------------1.2.8-----------------------------------------------------*/
insert_abnormal_review()
{
#ifdef DEBUG
   printf("insert_abnormal_review() start\n");
#endif
      EXEC SQL INSERT INTO RL_ABNORMAL_REVIEW(OPERATING_FACILITY_ID,
		      PATIENT_ID,SPECIMEN_NO,ADDED_BY_ID,MODIFIED_BY_ID,
		      ADDED_DATE,MODIFIED_DATE, URGENT_INDICATOR,
			  section_code, assign_to, assign_date_time, category_code,
			  category_year, category_number,
			  ADDED_AT_WS_NO,
	          ADDED_FACILITY_ID,
	          MODIFIED_AT_WS_NO,
	          MODIFIED_FACILITY_ID)
             VALUES (:nd_operating_facility_id,:rl_req_patient_id,:rl_anl_result_spec_no,
		       USER,USER,SYSDATE,SYSDATE,:rl_req_urgent,
			    :rl_req_section_code, :rl_assign_to, TO_DATE(:rl_assign_date_time, 'DD/MM/YYYY HH24:MI:SS'),
			    :rl_category_code,	   :rl_category_year, :rl_category_number,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id);

   if(OERROR)
       ins_message(ERR_MESG,"Failed on insert_abnormal_review()");
#ifdef DEBUG
   printf("insert_abnormal_review() end\n");
#endif
}
/*------------------1.2.9-----------------------------------------------------*/
insert_normal_review()
{
#ifdef DEBUG
   printf("insert_normal_review() start\n");
#endif
      EXEC SQL INSERT INTO RL_NORMAL_REVIEW(OPERATING_FACILITY_ID,
		      PATIENT_ID,SPECIMEN_NO,ADDED_BY_ID,MODIFIED_BY_ID,
		      ADDED_DATE,MODIFIED_DATE, URGENT_INDICATOR,
			  section_code, assign_to, assign_date_time, category_code,
			  category_year, category_number,
			  ADDED_AT_WS_NO,
	          ADDED_FACILITY_ID,
	          MODIFIED_AT_WS_NO,
	          MODIFIED_FACILITY_ID)
           VALUES (:nd_operating_facility_id,:rl_req_patient_id,
		           :rl_anl_result_spec_no,
		           USER,USER,SYSDATE,SYSDATE,:rl_req_urgent,
			       :rl_req_section_code, :rl_assign_to, TO_DATE(:rl_assign_date_time, 'DD/MM/YYYY HH24:MI:SS'),
			       :rl_category_code,:rl_category_year, :rl_category_number,
				   sys_context('USERENV','IP_ADDRESS'),
			       :nd_operating_facility_id,
			       sys_context('USERENV','IP_ADDRESS'),
			       :nd_operating_facility_id);

   if(OERROR)
       ins_message(ERR_MESG,"Failed on insert_normal_review()");
#ifdef DEBUG
   printf("insert_normal_review() end\n");
#endif
}
/*------------------1.3.1-----------------------------------------------------*/

update_result_workload(y)
int y;
{

/****************** 19.06.2003 commented entire procedure since this is not required 

  int cnt,mnth;

  v_year = 0;

  EXEC SQL SELECT TO_NUMBER(TO_CHAR(SYSDATE,'MM')), TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))
           INTO :v_mnth, :v_year
           FROM DUAL;
  mnth = v_mnth;

  strcpy(rl_url_test_code.arr,rl_test_rslt_test_code[y].arr);
  rl_url_test_code.len = strlen(rl_url_test_code.arr);
  EXEC SQL WHENEVER SQLERROR GOTO err_exit;

  EXEC SQL SELECT COUNT(*) 
           INTO :d_count
           FROM RL_RESULT_WORKLOAD
           WHERE TEST_CODE = :rl_url_test_code
           AND year = :v_year
		   AND OPERATING_FACILITY_ID = :nd_operating_facility_id;
        
  if (d_count > 0)
  {
        EXEC SQL SELECT 'Y' INTO :d_found 
                 FROM RL_RESULT_WORKLOAD
                 WHERE TEST_CODE = :rl_url_test_code
                 AND year = :v_year
				 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
                 FOR UPDATE OF STATUS NOWAIT;
       if(ERROR)
       {
         lock_error = 'E';
       }
       else
      {
 
 // EXEC SQL SELECT TO_NUMBER(TO_CHAR(SYSDATE,'MM')), TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))
//           INTO :v_mnth, :v_year
///           FROM DUAL;
///  mnth = v_mnth;

      switch(mnth)
      {
          case 1: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET JAN = NVL(JAN,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                  break;
          case 2: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET FEB = NVL(FEB,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                  break;
         case 3: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET MAR = NVL(MAR,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                  break;
         case 4: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET APR = NVL(APR,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                  break;
         case 5: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET MAY = NVL(MAY,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                 break;
         case 6: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET JUN = NVL(JUN,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                  break;
         case 7: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET JUL = NVL(JUL,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                 break;
         case 8: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET AUG = NVL(AUG,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                  break;
         case 9: EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET SEP = NVL(SEP,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                 break;
         case 10:EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET OCT = NVL(OCT,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                 break;
         case 11:EXEC SQL UPDATE RL_RESULT_WORKLOAD 
	                SET NOV = NVL(NOV,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                 break;
         case 12: EXEC SQL UPDATE RL_RESULT_WORKLOAD
	                SET DEC = NVL(DEC,0) + 1,MODIFIED_BY_ID = USER,
		            MODIFIED_DATE = SYSDATE
                      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :rl_url_test_code
                      AND year = :v_year;
                break;
       }
     }
  }
  else
  {
      switch(mnth)
      {
          case 1: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, jan,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 2: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, feb,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 3: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, mar,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 4: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, apr,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 5: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, may,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 6: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, jun,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 7: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, jul,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 8: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, aug,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 9: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, sep,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 10: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, oct,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 11: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, nov,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;
          case 12: EXEC SQL INSERT INTO RL_RESULT_WORKLOAD
                                (OPERATING_FACILITY_ID,test_code, year, dec,
                                 added_by_id, added_date, modified_by_id, modified_date,
                                 status,
								 ADDED_AT_WS_NO,
	                             ADDED_FACILITY_ID,
	                             MODIFIED_AT_WS_NO,
	                             MODIFIED_FACILITY_ID)
                            VALUES
                                (:nd_operating_facility_id,:rl_url_test_code, TO_CHAR(:v_year), 1,
                                 USER, SYSDATE, USER, SYSDATE, NULL,
								 :nd_operating_facility_id,
			                     sys_context('USERENV','IP_ADDRESS'),
			                     :nd_operating_facility_id);
                  break;


       }


  }

 //////   ADDED ON 20/07/2002 FOR KNDV ENHANCEMENTS 
	w_load_char.arr[0]	= '\0';
	w_load_char.len		= 0;

	strcpy(w_load_char.arr, "N");
	w_load_char.len = strlen(w_load_char.arr);

	update_result_workload_daily();

    upto here ******************************/

  return;
  err_exit:
          ins_message(ERR_MESG, "Failed on update_result_workload()");
	  return;

}

/*------------------1.3.2-----------------------------------------------------*/
check_request_status(v_out, v_abn, v_rel, v_grp_print)
char v_out, v_abn, v_rel, v_grp_print;
{
   char mupdate_request_yn;
#ifdef DEBUG
   printf("check_request_status() start\n");
   printf("v_out = %c v_abn = %c v_rel = %c v_grp_print = %c\n",
   v_out,v_abn,v_rel,v_grp_print);getchar();
#endif
   v_result_status.arr[0] = '\0';
   v_result_status.len = 0;
   mupdate_request_yn = 'N';
   if(v_out == 'Y')
   {
      strcpy(v_result_status.arr,"");
      v_result_status.len = strlen(v_result_status.arr);
      mupdate_request_yn = 'Y';
   }
   else
      if(v_abn == 'Y')
      {
         strcpy(v_result_status.arr,"A");
         v_result_status.len = strlen(v_result_status.arr);
         mupdate_request_yn = 'Y';
      }
      else
	if(v_rel == 'Y')
	{
           if(v_grp_print == 'Y')
	   {
              strcpy(v_result_status.arr,"R");
              v_result_status.len = strlen(v_result_status.arr);
	      mupdate_request_yn = 'Y';
	      nd_print_result_yn = 'Y';
           }
        }
#ifdef DEBUG
   printf("req_detail v_result_status = %c mupdate_request_yn = %c\n",
   v_result_status.arr[0],mupdate_request_yn); getchar();
#endif
   if(mupdate_request_yn == 'Y')
   {
      nd_upd_req_hdr_yn = 'Y';
      update_request_detail();

/********************	  19.06.2003 commented since installation check not required
	  if (strcmp(nd_order_installed_yn.arr, "Y") == 0 &&
			strcmp(nd_order_interfaced_yn.arr, "Y") == 0)
***************/

	  if (strcmp(nd_order_interfaced_yn.arr, "Y") == 0)
	  {
		if (strlen(d_order_id.arr) > 0) 
			update_order_line_status();
	  }

   }
}
update_request_detail()
{
#ifdef DEBUG
   printf("update_request_detail() start v_group_test_code = %s\n",
   v_group_test_code.arr);
#endif
  EXEC SQL WHENEVER SQLERROR GOTO err_exit;

  EXEC SQL SELECT 'Y' INTO :d_found
	       FROM RL_REQUEST_DETAIL
           WHERE PATIENT_ID = :rl_req_patient_id 
	       AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
	       AND TEST_CODE = :v_group_test_code
	       AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		   FOR UPDATE OF RESULT_STATUS NOWAIT;

        if(OERROR)
		{
            ins_message(ERR_MESG,"Failed on update_request_detail() 1");
		}
		else
		{

			/*get_values_for_req_detail();
			update_req_detail_log();*/

			EXEC SQL UPDATE RL_REQUEST_DETAIL
			  SET RESULT_STATUS = :v_result_status,
				  PRINT_YN = 'N',
                  RELEASED_BY_ID = USER,
                  RELEASED_DATE = SYSDATE,
		          MODIFIED_BY_ID = USER,
				  MODIFIED_DATE = SYSDATE
            WHERE PATIENT_ID = :rl_req_patient_id 
			  AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
			  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			  AND TEST_CODE = :v_group_test_code;
		}
#ifdef DEBUG
   printf("update_request_detail() end\n");
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed on update_request_detail() 2");
		 return;

}
/*--------------------------1.2.3.1-------------------------------------------*/
range_review()
{
#ifdef DEBUG
   printf("range_review() start\n");
   printf("rng rev low_val_tech = %s high_val_tech = %s t_num_rslt= %s\n",
          low_value_technician[x],high_value_technician[x],c_numeric_result.arr);
#endif
  strcpy(rl_low_val_tech.arr,low_value_technician[x]);
  rl_low_val_tech.len = strlen(rl_low_val_tech.arr);
  strcpy(rl_high_val_tech.arr,high_value_technician[x]);
  rl_high_val_tech.len = strlen(rl_high_val_tech.arr);
  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   if(strlen(low_value_technician[x]) &&
      strlen(high_value_technician[x]))
   {
      EXEC SQL SELECT 'Y' INTO :d_found
		 FROM DUAL 
                WHERE TO_NUMBER(:c_numeric_result)
		      BETWEEN TO_NUMBER(:rl_low_val_tech)
			  AND TO_NUMBER(:rl_high_val_tech);
/*
printf("spec %s Test %s C numeric Result %s  Low value %s high value  %s",
                rl_anl_result_spec_no.arr, u_test_code.arr, c_numeric_result.arr, rl_low_val_tech.arr,
                        rl_high_val_tech.arr);getchar();

*/
      if(NODATAFOUND)
      {
/*        printf("NO DATA FOUND");getchar();    */

	 strcpy(rl_test_rslt_status[x].arr,"A");
	 rl_test_rslt_status[x].len = 1;
	 strcpy(rl_test_rslt_tech_status[x].arr,"T");
	 rl_test_rslt_tech_status[x].len = 1;
      }
   }
#ifdef DEBUG
   printf("range_review() end rl_test_rlst_status = %c\n",
   rl_test_rslt_status[x].arr[0]);
#endif
   return;
   err_exit:
         ins_message(ERR_MESG,"Failed in range_review()");
		 return;
}
/*--------------------------1.2.3.2-------------------------------------------*/
delta_review()
{
#ifdef DEBUG
   printf("delta_review() start\n");
#endif
  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  check_rows_in_delta_percentage();
  get_delta_result();
  if(mdelta_found_yn.arr[0] == 'Y')
  {
     strcpy(v_date_time.arr,mspec_date.arr);
     v_date_time.len = strlen(v_date_time.arr);
     strcpy(v_validity_period.arr,delta_validity_period[x]);
     v_validity_period.len = strlen(v_validity_period.arr);
     strcpy(v_val_period_units.arr,delta_val_period_units[x]);
     v_val_period_units.len = strlen(v_val_period_units.arr);

     check_within_validity_period();

     strcpy(mwithin_validity_period_yn.arr,v_within_validity_period_yn.arr);
     mwithin_validity_period_yn.len = 1;
#ifdef DEBUG
   printf("c_numeric_result = %s mprev_result = %s\n",
           c_numeric_result.arr,mprev_result.arr);
#endif
     if(mwithin_validity_period_yn.arr[0] == 'Y')
     {
	if(delta_check_type[x] == 'P')
	{
	   EXEC SQL SELECT (
                               ABS(TO_NUMBER(:c_numeric_result) - 
			           TO_NUMBER(:mprev_result))/
                               TO_NUMBER(:c_numeric_result)
			   ) * 100 
                      INTO :mpres_percentage
		      FROM DUAL;
        }
	else
	{
	   if(delta_check_type[x] == 'A')
	   {
           EXEC SQL SELECT ABS(TO_NUMBER(:c_numeric_result) - 
			       TO_NUMBER(:mprev_result))
                      INTO :mpres_percentage
		      FROM DUAL;
           }
        }
#ifdef DEBUG
   printf("mpres_precentage = %f delta_percentage[x] = %s\n",
	   mpres_percentage,
	   delta_percentage[x]);
#endif
        mpres_pc_gr_than_dlt_pc.arr[0] = '\0';
	strcpy(mdelta_percentage.arr,delta_percentage[x]);
	mdelta_percentage.len = strlen(mdelta_percentage.arr);
	EXEC SQL SELECT 'Y' INTO :mpres_pc_gr_than_dlt_pc
	           FROM DUAL
		   WHERE :mpres_percentage > 
			 TO_NUMBER(NVL(:mdelta_percentage,'0'));
        mpres_pc_gr_than_dlt_pc.arr[mpres_pc_gr_than_dlt_pc.len] = '\0';
        if(NODATAFOUND)
	{
	   strcpy(mpres_pc_gr_than_dlt_pc.arr,"N");
	   mpres_pc_gr_than_dlt_pc.len = 1;
        }
#ifdef DEBUG
   printf("mpres_pc_gr_than_dlt_pc = %s",mpres_pc_gr_than_dlt_pc.arr);
#endif
        if(mpres_pc_gr_than_dlt_pc.arr[0] == 'Y')
	{
	   strcpy(rl_test_rslt_status[x].arr,"A");
	   rl_test_rslt_status[x].len = 1;
	   strcpy(rl_test_rslt_delta_status[x].arr,"D");
	   rl_test_rslt_delta_status[x].len = 1;
        }
	else
	{
	   update_delta_details();
        }
     }
     else
     {
	update_delta_details();
     }
  }
  else
  {
     insert_delta_details();
  }
#ifdef DEBUG
   printf("delta_review() end\n");
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in delta_review() 2");
		 return;
}
/*--------------------------1.2.3.3-------------------------------------------*/
quality_review()
{
  int qlty_tests_left;
#ifdef DEBUG
   printf("quality_review() start\n");
#endif
	   EXEC SQL WHENEVER SQLERROR GOTO :err_exit;
	   EXEC SQL OPEN QUALITY_CURSOR;
	   qlty_tests_left = fetch_quality_cursor();
	   while(qlty_tests_left)
	   {
     		strcpy(v_date_time.arr,qlty_last_rslt_date.arr);
     		v_date_time.len = strlen(v_date_time.arr);
     		strcpy(v_validity_period.arr,qlty_validity_period[x]);
     		v_validity_period.len = strlen(v_validity_period.arr);
     		strcpy(v_val_period_units.arr,qlty_val_period_units[x]);
     		v_val_period_units.len = strlen(v_val_period_units.arr);

     		check_within_validity_period();

     	        strcpy(qlty_w_val_period_yn.arr,
	 	       v_within_validity_period_yn.arr);
     		qlty_w_val_period_yn.len = 1;

		if(qlty_w_val_period_yn.arr[0] != 'Y')
		{
		   qlty_abnormality_found_yn.arr[0] = 'Y';
		   break;
                }
                else
		{
		   if(qlty_low_value.len && qlty_high_value.len)
		   {
		      EXEC SQL SELECT 'Y' INTO :qlty_abnormality_found_yn
				 FROM DUAL
                                WHERE TO_NUMBER(:qlty_last_rslt)
				  NOT BETWEEN TO_NUMBER(:qlty_low_value)
					  AND TO_NUMBER(:qlty_high_value);
                      if(NODATAFOUND)
			  strcpy(qlty_abnormality_found_yn.arr,"N");
                      qlty_abnormality_found_yn.arr[
			     qlty_abnormality_found_yn.len] = '\0';
                      if(qlty_abnormality_found_yn.arr[0] == 'Y')
			 break;
                    }
                 }
	      qlty_tests_left = fetch_quality_cursor();
           }
	   if(qlty_abnormality_found_yn.arr[0] == 'Y')
	   {
	      strcpy(rl_test_rslt_status[x].arr,"A");
	      rl_test_rslt_status[x].len = 1;
	      strcpy(rl_test_rslt_qlty_status[x].arr,"Q");
	      rl_test_rslt_qlty_status[x].len = 1;
	   }
	   EXEC SQL CLOSE QUALITY_CURSOR;
#ifdef DEBUG
   printf("quality_review() end\n");
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in quality_review() 2");
		 return;
}
fetch_quality_cursor()
{
   qlty_low_value.arr[0] = '\0';
   qlty_high_value.arr[0] = '\0';
   qlty_last_rslt.arr[0] = '\0';
   qlty_last_rslt_date.arr[0] = '\0';
   qlty_low_value.len = 0;
   qlty_high_value.len = 0;
   qlty_last_rslt.len = 0;
   qlty_last_rslt_date.len = 0;

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL FETCH QUALITY_CURSOR
	     INTO :qlty_low_value, :qlty_high_value,
		  :qlty_last_rslt, :qlty_last_rslt_date;
   if(NODATAFOUND)
      return 0;

   qlty_low_value.arr[qlty_low_value.len] = '\0';
   qlty_high_value.arr[qlty_high_value.len] = '\0';
   qlty_last_rslt.arr[qlty_last_rslt.len] = '\0';
   qlty_last_rslt_date.arr[qlty_last_rslt_date.len] = '\0';
   return 1;

  err_exit:
         ins_message(ERR_MESG,"Failed in fetch_quality_cursor() 2");
		 return;
}

/*--------------------------1.2.3.4-------------------------------------------*/
comment_review()
{
#ifdef DEBUG
 printf("comment_review() start \n");
 printf("rl_req_cc_1 = %s rl_req_cc_2 = %s rl_req_cc_3 = %s t_test_code = %s\n",
	 rl_req_cc_1.arr,rl_req_cc_2.arr,rl_req_cc_3.arr,t_test_code.arr);
	 getchar();
#endif
   cmnt_rev_count = 0;
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT COUNT(*) INTO :cmnt_rev_count
	      FROM RL_REQ_COMMENT_FOR_TEST
             WHERE TEST_CODE = :t_test_code
	       AND REQUEST_COMMENT_CODE IN ( NVL(:rl_req_cc_1,'NULL'),
					     NVL(:rl_req_cc_2,'NULL'),
					     NVL(:rl_req_cc_3,'NULL'));
   if(cmnt_rev_count > 0)
   {
      strcpy(rl_test_rslt_status[x].arr,"A");
      rl_test_rslt_status[x].len = 1;
      strcpy(rl_test_rslt_cmnt_status[x].arr,"C");
      rl_test_rslt_cmnt_status[x].len = 1;
   } 
#ifdef DEBUG
   printf("comment_review() end cmnt_rev_count = %d\n",cmnt_rev_count);
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in comment_review() 2");
		 return;
}


result_comment_review()
{
#ifdef DEBUG
 printf("result_comment_review() start \n");
 printf("rl_req_cc_1 = %s rl_req_cc_2 = %s rl_req_cc_3 = %s t_test_code = %s\n",
	 rl_req_cc_1.arr,rl_req_cc_2.arr,rl_req_cc_3.arr,t_test_code.arr);
	 getchar();
#endif
   res_cmnt_rev_count = 0;
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT COUNT(*) INTO :res_cmnt_rev_count
	      FROM RL_ALLOWABLE_COMMENT_CODE
             WHERE TEST_CODE = :t_test_code
	       AND ALLOWABLE_COMMENT_CODE IN ( NVL(:t_rcc_1,'NULL'),
					     NVL(:t_rcc_2,'NULL'),
					     NVL(:t_rcc_3,'NULL'),
						 NVL(:t_rcc_4,'NULL'))
		   AND NVL(REVIEW_YN,'N') = 'Y' ;

   if(res_cmnt_rev_count > 0)
   {
      strcpy(rl_test_rslt_status[x].arr,"A");
      rl_test_rslt_status[x].len = 1;
      strcpy(rl_test_rslt_res_cmnt_status[x].arr,"S");
      rl_test_rslt_res_cmnt_status[x].len = 1;
   } 
#ifdef DEBUG
   printf("result_comment_review() end res_cmnt_rev_count = %d\n",cmnt_rev_count);
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in result_comment_review() 2");
		 return;
}



/*--------------------------1.2.4.1-------------------------------------------*/
abnormal_path_review()
{
#ifdef DEBUG
   printf("Abnormal_Path_review() start\n");
   printf("num_rslt_yn = %c d_rev_rslt = %c age_sex_rng = %c rl_req_sex = %c\n",
   numeric_result_yn[x],d_review_result_yn.arr[0],age_sex_range_yn[x],
   rl_req_sex.arr[0]);
#endif
   age_range_found_yn.arr[0] = '\0';
   age_range_found_yn.len = 0;
   within_age_range_yn.arr[0] = '\0';
   within_age_range_yn.len = 0;
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   if(numeric_result_yn[x]=='Y')
   {
      if(d_review_result_yn.arr[0] == 'Y')
      {
	 if(age_sex_range_yn[x] == 'Y')
	 {
	    if(rl_req_sex.arr[0] == 'M' || rl_req_sex.arr[0] == 'F')
	    {
	       get_age_ranges();
            }
            else
	    {
	       strcpy(age_range_found_yn.arr,"N");
	       age_range_found_yn.len = 1;
	    }  
	    if(age_range_found_yn.arr[0] == 'Y')
	    {
	       EXEC SQL SELECT 'Y' INTO :within_age_range_yn
			  FROM DUAL
                         WHERE TO_NUMBER(:c_numeric_result) 
			       BETWEEN TO_NUMBER(:age_low_value)
				   AND TO_NUMBER(:age_high_value);
               if(NODATAFOUND)
	       {
		  strcpy(within_age_range_yn.arr,"N");
		  within_age_range_yn.len = 1;
               }
               if(within_age_range_yn.arr[0] == 'Y')
               {
      		  strcpy(rl_test_rslt_status[x].arr,"R");
      		  rl_test_rslt_status[x].len = 1;
      		  strcpy(rl_test_rslt_path_status[x].arr,"");
      		  rl_test_rslt_path_status[x].len = 0;
               }
	       else
	       {
		  insert_abnormal_review_yn = 'Y';
      		  strcpy(rl_test_rslt_status[x].arr,"A");
      		  rl_test_rslt_status[x].len = 1;
      		  strcpy(rl_test_rslt_path_status[x].arr,"A");
      		  rl_test_rslt_path_status[x].len = 1;
	       }
            }
	    else
	    {
	       check_tech_range();
            }
	 }
	 else
	 {
	    check_tech_range();
         }
      }
      else
      {
         check_tech_range();
      }
   }
#ifdef DEBUG
   printf("Abnormal_Path_review() end\n");
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in abnormal_path_review() 2");
		 return;
}
check_tech_range()
{
#ifdef DEBUG
   printf("check_tech_range() start\n");
   printf("low_value_norm = %s high_value_norm = %s",low_value_normal[x],
   high_value_normal[x]);
#endif
  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  strcpy(rl_test_rslt_status[x].arr,"");
  rl_test_rslt_status[x].len = strlen(rl_test_rslt_status[x].arr);
  strcpy(rl_test_rslt_path_status[x].arr,"");
  rl_test_rslt_path_status[x].len = strlen(rl_test_rslt_path_status[x].arr);
  if(strlen(low_value_normal[x]) && strlen(high_value_normal[x]))
  {
     d_found = 'N';
     strcpy(v_low_value_normal.arr,"");
     strcpy(v_high_value_normal.arr,"");
     v_low_value_normal.len = 0;
     v_high_value_normal.len = 0;

     strcpy(v_low_value_normal.arr,low_value_normal[x]);
     v_low_value_normal.len = strlen(v_low_value_normal.arr);
     strcpy(v_high_value_normal.arr,high_value_normal[x]);
     v_high_value_normal.len = strlen(v_high_value_normal.arr);
     EXEC SQL SELECT 'Y' into :d_found FROM DUAL
               WHERE to_number(:c_numeric_result)
		     BETWEEN TO_NUMBER(:v_low_value_normal)
			 AND TO_NUMBER(:v_high_value_normal);
     if(NODATAFOUND)
	d_found = 'N';

     if(d_found == 'Y')
     {
	strcpy(rl_test_rslt_status[x].arr,"R");
	rl_test_rslt_status[x].len = strlen(rl_test_rslt_status[x].arr);
     }
     else
     {
	insert_abnormal_review_yn = 'Y';
	strcpy(rl_test_rslt_status[x].arr,"A");
	rl_test_rslt_status[x].len = strlen(rl_test_rslt_status[x].arr);
	strcpy(rl_test_rslt_path_status[x].arr,"A");
	rl_test_rslt_path_status[x].len = 
	strlen(rl_test_rslt_path_status[x].arr);
     }
  }
  else
  {
     strcpy(rl_test_rslt_status[x].arr,"R");
     rl_test_rslt_status[x].len = strlen(rl_test_rslt_status[x].arr);
  }   
#ifdef DEBUG
   printf("check_tech_range() end d_found = %c\n",d_found);
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in check_Tech_range() 2");
		 return;
    
}
get_age_ranges()
{
#ifdef DEBUG
   printf("get_age_ranges() start tot_age_in_days = %d\n",tot_age_in_days);
#endif
  EXEC SQL WHENEVER SQLERROR GOTO :err_exit;
  age_low_value.arr[0] = '\0';
  age_low_value.len = 0;
  age_high_value.arr[0] = '\0';
  age_high_value.len = 0;
  age_range_found_yn.arr[0] = '\0';
  age_range_found_yn.len = '\0';
  EXEC SQL SELECT LOW_VALUE_NORMAL,HIGH_VALUE_NORMAL,'Y'
	     INTO :age_low_value,:age_high_value,:age_range_found_yn
             FROM RL_AGE_SEX_RANGE
            WHERE TEST_CODE = :t_test_code
	      AND SEX = :rl_req_sex
	      AND :tot_age_in_days BETWEEN CALC_MIN_AGE_IN_DAYS
				       AND CALC_MAX_AGE_IN_DAYS;
  if(NODATAFOUND)
  {
     strcpy(age_range_found_yn.arr,"N");
     age_range_found_yn.len = strlen(age_range_found_yn.arr);
  }
  age_range_found_yn.arr[age_range_found_yn.len] = '\0';
  age_low_value.arr[age_low_value.len] = '\0';
  age_high_value.arr[age_high_value.len] = '\0';
#ifdef DEBUG
   printf("age_range_found_yn = %c age_low_value = %s age_high_value %s\n",
	   age_range_found_yn.arr[0],age_low_value.arr, age_high_value.arr);
   printf("get_age_ranges() end\n");
#endif
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in get_age_range() 2");
		 return;
}
/*-----------------------------------1.2.3.2.1-------------------------------*/
check_rows_in_delta_percentage()
{

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;

  EXEC SQL SELECT COUNT(*)
           INTO :t_count
	       FROM RL_DELTA_PERCENTAGE
           WHERE PATIENT_ID = :rl_req_patient_id
	       AND TEST_CODE = :t_test_code;
  
  if (t_count > 1) 
  {
  
	EXEC SQL DELETE FROM RL_DELTA_PERCENTAGE
	WHERE PATIENT_ID = :rl_req_patient_id
	AND TEST_CODE = :t_test_code
	AND modified_date <> (SELECT MAX(MODIFIED_DATE)
		FROM RL_DELTA_PERCENTAGE
		WHERE PATIENT_ID = :rl_req_patient_id
				       AND TEST_CODE = :t_test_code);

  }	       

  if(OERROR)
       ins_message(ERR_MESG,"Failed on check_rows_in_delta_percentage()");

 
  return;

  err_exit:
         ins_message(ERR_MESG,"Failed in check_rows_in_delta_percentage() 2");
		 return;
}

get_delta_result()
{
   mspec_date.arr[0] = '\0';
   mspec_date.len = 0;
   mprev_result.arr[0] = '\0';
   mprev_result.len = 0;
   mdelta_found_yn.arr[0] = '\0';
   mdelta_found_yn.len = 0;
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY HH24:MI'),
		   NVL(PREV_DELTA_RESULT, 0),'Y'
              INTO :mspec_date,:mprev_result,:mdelta_found_yn
	      FROM RL_DELTA_PERCENTAGE
             WHERE PATIENT_ID = :rl_req_patient_id
	       AND TEST_CODE = :t_test_code
	       AND MODIFIED_DATE = (SELECT MAX(MODIFIED_DATE)
				      FROM RL_DELTA_PERCENTAGE
                                     WHERE PATIENT_ID = :rl_req_patient_id
				       AND TEST_CODE = :t_test_code
                                   );
   if(OERROR)
       ins_message(ERR_MESG, "Failed on get_delta_result()");
   mspec_date.arr[mspec_date.len] = '\0';
   mprev_result.arr[mprev_result.len] = '\0';
   mdelta_found_yn.arr[mdelta_found_yn.len] = '\0';
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in get_delta_result() 2");
		 return;
}
/*-----------------------------------1.2.3.2.2-------------------------------*/
check_within_validity_period()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit; 
   if(strlen(v_val_period_units.arr))
   {
      if(strcmp(v_val_period_units.arr,"MON")==0)
      {
	   EXEC SQL 
	   SELECT TO_CHAR(ADD_MONTHS(TO_DATE(:v_date_time,'DD/MM/YYYY HH24:MI'),
			           TO_NUMBER(:v_validity_period)),
                        'DD/MM/YYYY HH24:MI')
           INTO :mdate
	   FROM DUAL;
      } 
      else
      {
      if(strcmp(v_val_period_units.arr,"WKS")==0)
      {
	 EXEC SQL 
	 SELECT TO_CHAR(TO_DATE(:v_date_time,'DD/MM/YYYY HH24:MI')+
			           (TO_NUMBER(:v_validity_period)*7),
                        'DD/MM/YYYY HH24:MI')
           INTO :mdate
	   FROM DUAL;
      } 
      else
      {
      if(strcmp(v_val_period_units.arr,"DAY")==0)
      {
	 EXEC SQL 
	 SELECT TO_CHAR(TO_DATE(:v_date_time,'DD/MM/YYYY HH24:MI')+
			           TO_NUMBER(:v_validity_period),
                        'DD/MM/YYYY HH24:MI')
           INTO :mdate
	   FROM DUAL;
      } 
      else
      {
      if(strcmp(v_val_period_units.arr,"HRS")==0)
      {
	 EXEC SQL 
	 SELECT TO_CHAR(TO_DATE(:v_date_time,'DD/MM/YYYY HH24:MI')+
			           (TO_NUMBER(:v_validity_period)/24),
                        'DD/MM/YYYY HH24:MI')
           INTO :mdate
	   FROM DUAL;
      } 
      else
      {
      if(strcmp(v_val_period_units.arr,"MIN")==0)
      {
	 EXEC SQL 
	 SELECT TO_CHAR(TO_DATE(:v_date_time,'DD/MM/YYYY HH24:MI')+
			           (TO_NUMBER(:v_validity_period)/24/60),
                        'DD/MM/YYYY HH24:MI')
           INTO :mdate
	   FROM DUAL;
      }
      }
      }
      }
      }
      mdate.arr[mdate.len] = '\0';

      v_within_validity_period_yn.arr[0] = '\0';
      v_within_validity_period_yn.len = 0;
      EXEC SQL SELECT 'Y' INTO :v_within_validity_period_yn 
		 FROM DUAL 
                WHERE to_date(:mdate,'DD/MM/YYYY HH24:MI') > SYSDATE;
      v_within_validity_period_yn.arr[v_validity_period.len] = '\0';
   }
	   
  return;
  err_exit:
         ins_message(ERR_MESG,"Failed in check_within_validity_period() 2");
		 return;
}
/*-----------------------------------1.2.3.2.3-------------------------------*/
update_delta_details()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   EXEC SQL SELECT PREV_DELTA_RESULT 
          INTO :l_test_result
	      FROM RL_DELTA_PERCENTAGE
             WHERE PATIENT_ID = :rl_req_patient_id
	       AND TEST_CODE = :t_test_code
	       FOR UPDATE OF PREV_DELTA_RESULT NOWAIT;
   if(OERROR)
   {
     lock_error = 'E';
   }
   else
   {
   EXEC SQL UPDATE RL_DELTA_PERCENTAGE 
	       SET PREV_DELTA_RESULT = :t_numeric_result,
		   SPECIMEN_DATE = TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),
		   MODIFIED_BY_ID = USER,
		   MODIFIED_DATE = SYSDATE 
             WHERE PATIENT_ID = :rl_req_patient_id
	       AND TEST_CODE  = :t_test_code;
  }
  return;
  err_exit:
       ins_message(ERR_MESG,"Failed on update_delta_details()");
	   return;
}
/*-----------------------------------1.2.3.2.4-------------------------------*/
insert_delta_details()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

		EXEC SQL INSERT INTO RL_DELTA_PERCENTAGE
			(PATIENT_ID,TEST_CODE,PREV_DELTA_RESULT,
			 SPECIMEN_DATE,ADDED_BY_ID,ADDED_DATE,
			 MODIFIED_BY_ID,MODIFIED_DATE,
			 ADDED_AT_WS_NO,
	         ADDED_FACILITY_ID,
	         MODIFIED_AT_WS_NO,
	         MODIFIED_FACILITY_ID)
           VALUES (:rl_req_patient_id,:t_test_code,
		     :t_numeric_result,TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),
			 USER,SYSDATE,
		     USER,SYSDATE,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id);
  return;
  err_exit:
       ins_message(ERR_MESG,"Failed on insert_delta_details()");
	   return;
}

copy_to_temp(i)
int i;
{
   t_patient_id.arr[0] = '\0'; 
   strcpy(t_patient_id.arr,rl_req_patient_id.arr);
   t_patient_id.len = strlen(t_patient_id.arr);

   t_group_test_code.arr[0] = '\0';
   strcpy(t_group_test_code.arr,rl_test_rslt_group_test_code[i].arr);
   t_group_test_code.len = strlen(t_group_test_code.arr);

   t_test_code.arr[0] = '\0';
   strcpy(t_test_code.arr,rl_test_rslt_test_code[i].arr);
   t_test_code.len = strlen(t_test_code.arr);

   t_section_code.arr[0] = '\0';
   strcpy(t_section_code.arr,rl_test_rslt_section_code[i].arr);
   t_section_code.len = strlen(t_section_code.arr);

   t_numeric_prefix.arr[0] = '\0';
   strcpy(t_numeric_prefix.arr,rl_test_rslt_numeric_prefix[i].arr);
   t_numeric_prefix.len = strlen(t_numeric_prefix.arr);

   t_numeric_result.arr[0] = '\0';
   strcpy(t_numeric_result.arr,rl_test_rslt_numeric_result[i].arr);
   t_numeric_result.len = strlen(t_numeric_result.arr);

   c_numeric_result.arr[0] = '\0';
   c_numeric_result.len    = 0;

   if (t_numeric_result.len)
   {
	   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

       switch(t_numeric_prefix.arr[0])
	   {
         case '>' :
            EXEC SQL SELECT TO_CHAR(TO_NUMBER(:t_numeric_result) + 1)
                INTO :c_numeric_result
                FROM DUAL;
			break;
		  case '<' :
            EXEC SQL SELECT TO_CHAR(TO_NUMBER(:t_numeric_result) - 1)
                INTO :c_numeric_result
                FROM DUAL;
			break;
         case '+' :
            EXEC SQL SELECT TO_CHAR(TO_NUMBER(:t_numeric_result) * 1)
                INTO :c_numeric_result
                FROM DUAL;
		    break;
         case '-' :
           EXEC SQL SELECT TO_CHAR(TO_NUMBER(:t_numeric_result) * -1)
                INTO :c_numeric_result
                FROM DUAL;
		   break;
         default :
           EXEC SQL SELECT TO_CHAR(TO_NUMBER(:t_numeric_result))
                INTO :c_numeric_result
                FROM DUAL;
		   break;

		}
         c_numeric_result.arr[c_numeric_result.len]     = '\0';


   }


   t_rcc_1.arr[0] = '\0';
   strcpy(t_rcc_1.arr,rl_test_rslt_rcc_1[i].arr);
   t_rcc_1.len = strlen(t_rcc_1.arr);

   t_rcc_2.arr[0] = '\0';
   strcpy(t_rcc_2.arr,rl_test_rslt_rcc_2[i].arr);
   t_rcc_2.len = strlen(t_rcc_2.arr);
   
   t_rcc_3.arr[0] = '\0';
   strcpy(t_rcc_3.arr,rl_test_rslt_rcc_3[i].arr);
   t_rcc_3.len = strlen(t_rcc_3.arr);
   
   t_rcc_4.arr[0] = '\0';
   strcpy(t_rcc_4.arr,rl_test_rslt_rcc_4[i].arr);
   t_rcc_4.len = strlen(t_rcc_4.arr);
   
   t_rcd_1.arr[0] = '\0';
   strcpy(t_rcd_1.arr,rl_test_rslt_rcd_1[i].arr);
   t_rcd_1.len = strlen(t_rcd_1.arr);
   
   t_rcd_2.arr[0] = '\0';
   strcpy(t_rcd_2.arr,rl_test_rslt_rcd_2[i].arr);
   t_rcd_2.len = strlen(t_rcd_2.arr);
   
   t_rcd_3.arr[0] = '\0';
   strcpy(t_rcd_3.arr,rl_test_rslt_rcd_3[i].arr);
   t_rcd_3.len = strlen(t_rcd_3.arr);

   t_rcd_4.arr[0] = '\0';
   strcpy(t_rcd_4.arr,rl_test_rslt_rcd_4[i].arr);
   t_rcd_4.len = strlen(t_rcd_4.arr);
   
   t_status.arr[0] = '\0';
   strcpy(t_status.arr,rl_test_rslt_status[i].arr);
   t_status.len = strlen(t_status.arr);

   t_rule_status.arr[0] = '\0';
   strcpy(t_rule_status.arr,rl_test_rule_status[i].arr);
   t_rule_status.len = strlen(t_rule_status.arr);

   t_rule_path_rev_type.arr[0] = '\0';
   strcpy(t_rule_path_rev_type.arr,rl_test_rule_path_rev_type[i].arr);
   t_rule_path_rev_type.len = strlen(t_rule_path_rev_type.arr);
   
   t_tech_status.arr[0] = '\0';
   strcpy(t_tech_status.arr,rl_test_rslt_tech_status[i].arr);
   t_tech_status.len = strlen(t_tech_status.arr);

   t_delta_status.arr[0] = '\0';
   strcpy(t_delta_status.arr,rl_test_rslt_delta_status[i].arr);
   t_delta_status.len = strlen(t_delta_status.arr);
   
   t_qlty_status.arr[0] = '\0';
   strcpy(t_qlty_status.arr,rl_test_rslt_qlty_status[i].arr);
   t_qlty_status.len = strlen(t_qlty_status.arr);
   
   t_cmnt_status.arr[0] = '\0';
   strcpy(t_cmnt_status.arr,rl_test_rslt_cmnt_status[i].arr);
   t_cmnt_status.len = strlen(t_cmnt_status.arr);

   t_res_cmnt_status.arr[0] = '\0';
   strcpy(t_res_cmnt_status.arr,rl_test_rslt_res_cmnt_status[i].arr);
   t_res_cmnt_status.len = strlen(t_res_cmnt_status.arr);

   t_path_status.arr[0] = '\0';
   strcpy(t_path_status.arr,rl_test_rslt_path_status[i].arr);
   t_path_status.len = strlen(t_path_status.arr);

    return;
  err_exit:
       ins_message(ERR_MESG,"Copy to Temp()");
	   return;
}

char check_specimen_in_review()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT 'Y' INTO :d_found
	        FROM RL_TECHNICIAN_REVIEW
            WHERE SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id;
   if(NODATAFOUND)
   {
      EXEC SQL SELECT 'Y' INTO :d_found
   	           FROM RL_ABNORMAL_REVIEW
               WHERE SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
			   AND OPERATING_FACILITY_ID = :nd_operating_facility_id;
      if(NODATAFOUND)
      {
         EXEC SQL SELECT 'Y' INTO :d_found
   	              FROM RL_NORMAL_REVIEW
                  WHERE SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
				  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;
         if(NODATAFOUND)
         {
            d_found = 'N';
         }
      }
   }
#ifdef DEBUG
   printf("check_specimen_in_review() d_found = %c\n",d_found);
#endif
   return(d_found);
  err_exit:
       ins_message(ERR_MESG,"Failed on check_specimen_in_review()");
	   return;
}
int fetch_request_header()
{
    int  get_in_patient_dtl(); 
    int  get_general_patient_dtl();
    int  get_referral_patient_dtl();
    int  i = 0, p=0;

    rl_req_patient_id.arr[0] = '\0';
    rl_req_patient_id.len = 0;
    rl_req_episode_type.arr[0] = '\0';
    rl_req_episode_type.len = 0;
    rl_req_section_code.arr[0] = '\0';
    rl_req_section_code.len = 0;
    rl_req_cc_1.arr[0] = '\0';
    rl_req_cc_1.len = 0;
    rl_req_cc_2.arr[0] = '\0';
    rl_req_cc_2.len = 0;
    rl_req_cc_3.arr[0] = '\0';
    rl_req_cc_3.len = 0;
    rl_req_status.arr[0] = '\0';
    rl_req_status.len = 0;
	rl_req_source_type.arr[0]	= '\0';
	rl_req_source_type.len		= 0;
	rl_req_urgent.arr[0]		= '\0';
	rl_req_urgent.len			= 0;
	rl_req_results_sent_yn.arr[0] = '\0';
	rl_req_results_sent_yn.len = 0;
	rl_req_entity_id.arr[0] = '\0';
	rl_req_entity_id.len = 0;
	d_order_type_code.arr[0]	= '\0';
	d_order_type_code.len		= 0;
	d_order_id.arr[0]			= '\0';
	d_order_id.len				= 0;
	rl_assign_to.arr[0]			= '\0';
	rl_assign_to.len			= 0;
	rl_category_code.arr[0]		= '\0';
	rl_category_code.len		= 0;
	rl_category_year.arr[0]		= '\0';
	rl_category_year.len		= 0;
	rl_category_number.arr[0]	= '\0';
	rl_category_number.len		= 0;
	rl_assign_date_time.arr[0]  = '\0';
	rl_assign_date_time.len		= 0;

	nd_episode_no.arr[0]		= '\0';
	nd_episode_no.len			= 0;
	nd_tfr_visit_no.arr[0]		= '\0';
	nd_tfr_visit_no.len			= 0;
	nd_consultant_code.arr[0]	= '\0';
	nd_consultant_code.len		= 0;
	nd_ordered_facility_id.arr[0]	= '\0';
	nd_ordered_facility_id.len		= 0;


    /*
	m_inpatient_yn.arr[0] = '\0';
    m_inpatient_yn.len = 0;
	*/
#ifdef DEBUG
   printf("fetch_request_header() rl_anl_result_spec_no = %s\n",
	  rl_anl_result_spec_no.arr);
#endif
    EXEC SQL SELECT PATIENT_ID,EPISODE_TYPE,SECTION_CODE,
		    SOURCE_CODE,SOURCE_TYPE, URGENT_INDICATOR,
		    TO_CHAR(SPEC_REGD_DATE_TIME,'DD/MM/YYYY HH24:MI'),
		    REQUEST_COMMENT_CODE1,REQUEST_COMMENT_CODE2,
		    REQUEST_COMMENT_CODE3,NVL(STATUS,'O'),
			NVL(RESULTS_SENT_YN,'N'),
			order_type_code, order_id, assign_to, category_code, category_year,
					category_number, assign_date_time,
			TO_CHAR(episode_no), TO_CHAR(tfr_visit_no), consultant_code,ordered_facility_id
	       INTO :rl_req_patient_id,:rl_req_episode_type,
		    :rl_req_section_code,:rl_req_source_code,
			:rl_req_source_type, :rl_req_urgent,
		    :rl_req_hdr_spec_time,:rl_req_cc_1,:rl_req_cc_2,
		    :rl_req_cc_3,:rl_req_status,:rl_req_results_sent_yn,
			:d_order_type_code, :d_order_id,
			:rl_assign_to, :rl_category_code, :rl_category_year, :rl_category_number,
			:rl_assign_date_time, 
			:nd_episode_no, :nd_tfr_visit_no, :nd_consultant_code, :nd_ordered_facility_id
               FROM RL_REQUEST_HEADER
              WHERE SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
			  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;
///// entitty id removed 19.06.2003 

    if(OERROR)
    {
       return 0;
    }
    else
    {
       if(NODATAFOUND)
	   {
           return 0; 
		}
    }
    rl_req_patient_id.arr[rl_req_patient_id.len] = '\0';
    rl_req_episode_type.arr[rl_req_episode_type.len] = '\0';
    rl_req_section_code.arr[rl_req_section_code.len] = '\0';
    rl_req_source_code.arr[rl_req_source_code.len] = '\0';
    rl_req_cc_1.arr[rl_req_cc_1.len] = '\0';
    rl_req_cc_2.arr[rl_req_cc_2.len] = '\0';
    rl_req_cc_3.arr[rl_req_cc_3.len] = '\0';
    rl_req_status.arr[rl_req_status.len] = '\0';
	rl_req_source_type.arr[rl_req_source_type.len]	= '\0';
	rl_req_urgent.arr[rl_req_urgent.len]			= '\0';
	rl_req_results_sent_yn.arr[rl_req_results_sent_yn.len]= '\0';
	rl_req_entity_id.arr[rl_req_entity_id.len] = '\0';
	d_order_type_code.arr[d_order_type_code.len]		= '\0';
	d_order_id.arr[d_order_id.len]						= '\0';
	rl_assign_to.arr[rl_assign_to.len]					= '\0';
	rl_category_code.arr[rl_category_code.len]			= '\0';
	rl_category_year.arr[rl_category_year.len]			= '\0';
	rl_category_number.arr[rl_category_number.len]			= '\0';
	rl_assign_date_time.arr[rl_assign_date_time.len]		= '\0';
	nd_episode_no.arr[nd_episode_no.len]					= '\0';
	nd_tfr_visit_no.arr[nd_tfr_visit_no.len]				= '\0';
	nd_consultant_code.arr[nd_consultant_code.len]			= '\0';
	nd_ordered_facility_id.arr[nd_ordered_facility_id.len]			= '\0';

	if(strcmp(rl_req_episode_type.arr,"I")==0 || 
       strcmp(rl_req_episode_type.arr,"O")==0 ||
	   strcmp(rl_req_episode_type.arr,"H")==0 )
    { 
      p = get_in_patient_dtl();
	/*
      if(p == 0)
         p = get_general_patient_dtl();
	*/
    } 
    else
    if(strcmp(rl_req_episode_type.arr,"R")==0)
      p = get_referral_patient_dtl();
/* printf("tot_age_in_days = [%u]\n",tot_age_in_days);getchar();    */
    i = p;
  return i;
  err_exit:
       ins_message(ERR_MESG,"Failed on fetch_request_header()");
	   return;
}    
/* Function to fetch the GENERAL PATIENT details */
int get_general_patient_dtl()
{

/****************** 19.06.2003 commented since table not exists
  EXEC SQL SELECT TRUNC(TO_DATE(:rl_req_hdr_spec_time,
				'DD/MM/YYYY HH24:MI') - DATE_OF_BIRTH),
		  SEX,'N' ,NATIONALITY_CODE
	     INTO :tot_age_in_days,:rl_req_sex,:m_inpatient_yn,
		 :nation
             FROM MP_PATIENT_MAST_OTHERS  
	    WHERE PATIENT_ID = :rl_req_patient_id;
***************/
 
  if(NODATAFOUND)
     return 0;

  rl_req_sex.arr[rl_req_sex.len]                       = '\0';
  m_inpatient_yn.arr[m_inpatient_yn.len]               = '\0';
  nation.arr[nation.len]							   = '\0';

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   ins_message(ORA_MESG,"Oracle error at get_general_patient_dtl() occured....\n");
   return;
}

/* Function to fetch the REFERRAL PATIENT details */
int get_referral_patient_dtl()
{
  EXEC SQL SELECT TRUNC(TO_DATE(:rl_req_hdr_spec_time,
				        'DD/MM/YYYY HH24:MI') - DATE_OF_BIRTH),
		   SEX ,NATIONALITY_CODE
	       INTO  :tot_age_in_days,:rl_req_sex, :nation
           FROM   RL_PATIENT_MAST  
	       WHERE  PATIENT_ID = :rl_req_patient_id;

  if(NODATAFOUND)
     return 0;
  rl_req_sex.arr[rl_req_sex.len]                       = '\0';
  nation.arr[nation.len]							   = '\0';

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   ins_message(ORA_MESG,"Oracle error at get_referral_patient_dtl() occured....\n");
   return;
}

/* Function to fetch the INPATIENT details */
int get_in_patient_dtl()
{
   
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT TRUNC(TO_DATE(:rl_req_hdr_spec_time,
				 'DD/MM/YYYY HH24:MI') - DATE_OF_BIRTH),
		   SEX,NATIONALITY_CODE
	      INTO :tot_age_in_days,:rl_req_sex,
		  :nation
              FROM MP_PATIENT_MAST 
	     WHERE PATIENT_ID = :rl_req_patient_id;

  if(NODATAFOUND)
  {
     return 0;
   }

  rl_req_sex.arr[rl_req_sex.len]                       = '\0';
  nation.arr[nation.len]							   = '\0';

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   ins_message(ORA_MESG,"Oracle error at get_in_patient_dtl() occured....\n");
   return;
}
    
/*
get_values_for_req_head()
{
   l_source_code.arr[0]				= '\0';
   l_consultant_code.arr[0]			= '\0';
   l_request_comment_code1.arr[0]	= '\0';
   l_request_comment_desc1.arr[0]	= '\0';
   l_request_comment_code2.arr[0]	= '\0';
   l_request_comment_desc2.arr[0]	= '\0';
   l_request_comment_code3.arr[0]	= '\0';
   l_request_comment_desc3.arr[0]	= '\0';
   l_spec_colltd_date_time.arr[0]	= '\0';
   l_spec_recd_date_time.arr[0]		= '\0';
   l_spec_regd_date_time.arr[0]		= '\0';
   l_specimen_type_code.arr[0]		= '\0';
   l_urgent_indicator.arr[0]		= '\0';
   l_verified_by_id.arr[0]			= '\0';
   l_verified_date.arr[0]			= '\0';
   l_modified_by_id.arr[0]			= '\0';
   l_modified_date.arr[0]			= '\0';
   l_added_date.arr[0]				= '\0';
   l_added_by_id.arr[0]				= '\0';

   l_source_code.len				= 0;
   l_consultant_code.len			= 0;
   l_request_comment_code1.len		= 0;
   l_request_comment_desc1.len		= 0;
   l_request_comment_code2.len		= 0;
   l_request_comment_desc2.len		= 0;
   l_request_comment_code3.len		= 0;
   l_request_comment_desc3.len		= 0;
   l_spec_colltd_date_time.len		= 0;
   l_spec_recd_date_time.len		= 0;
   l_spec_regd_date_time.len		= 0;
   l_specimen_type_code.len			= 0;
   l_urgent_indicator.len			= 0;
   l_verified_by_id.len				= 0;
   l_verified_date.len				= 0;
   l_modified_by_id.len				= 0;
   l_modified_date.len				= 0;
   l_added_date.len					= 0;
   l_added_by_id.len				= 0;


	EXEC SQL SELECT 
	source_code, consultant_code,
	request_comment_code1, request_comment_desc1,
	request_comment_code2, request_comment_desc2,
	request_comment_code3, request_comment_desc3,
	TO_CHAR(spec_colltd_date_time,'DD/MM/YYYY HH24:MI:SS'), 
	TO_CHAR(spec_recd_date_time,'DD/MM/YYYY HH24:MI:SS'),
	TO_CHAR(spec_regd_date_time, 'DD/MM/YYYY HH24:MI:SS'),
	specimen_type_code,
	urgent_indicator,verified_by_id,
	TO_CHAR(verified_date,'DD/MM/YYYY HH24:MI:SS'), modified_by_id,
	TO_CHAR(modified_date,'DD/MM/YYYY HH24:MI:SS'), added_by_id,
	TO_CHAR(added_date,'DD/MM/YYYY HH24:MI:SS')
	INTO :l_source_code, :l_consultant_code,
	:l_request_comment_code1, :l_request_comment_desc1,
	:l_request_comment_code2, :l_request_comment_desc2,
	:l_request_comment_code3, :l_request_comment_desc3,
	:l_spec_colltd_date_time, :l_spec_recd_date_time,
	:l_spec_regd_date_time, :l_specimen_type_code,
	:l_urgent_indicator,:l_verified_by_id,
	:l_verified_date, :l_modified_by_id,
	:l_modified_date, :l_added_by_id,
	:l_added_date
	FROM RL_REQUEST_HEADER
    WHERE PATIENT_ID = :rl_req_patient_id
	AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no) 
	AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

   l_source_code.arr[l_source_code.len]						= '\0';
   l_consultant_code.arr[l_consultant_code.len]				= '\0';
   l_request_comment_code1.arr[l_request_comment_code1.len]	= '\0';
   l_request_comment_desc1.arr[l_request_comment_desc1.len]	= '\0';
   l_request_comment_code2.arr[l_request_comment_code2.len]	= '\0';
   l_request_comment_desc2.arr[l_request_comment_desc2.len]	= '\0';
   l_request_comment_code3.arr[l_request_comment_code3.len]	= '\0';
   l_request_comment_desc3.arr[l_request_comment_desc3.len]	= '\0';
   l_spec_colltd_date_time.arr[l_spec_colltd_date_time.len]	= '\0';
   l_spec_recd_date_time.arr[l_spec_recd_date_time.len]		= '\0';
   l_spec_regd_date_time.arr[l_spec_regd_date_time.len]		= '\0';
   l_specimen_type_code.arr[l_specimen_type_code.len]		= '\0';
   l_urgent_indicator.arr[l_urgent_indicator.len]			= '\0';
   l_verified_by_id.arr[l_verified_by_id.len]				= '\0';
   l_verified_date.arr[l_verified_date.len]					= '\0';
   l_modified_by_id.arr[l_modified_by_id.len]				= '\0';
   l_modified_date.arr[l_modified_date.len]					= '\0';
   l_added_date.arr[l_added_date.len]						= '\0';
   l_added_by_id.arr[l_added_by_id.len]						= '\0';

}

update_req_head_log()
{
  
  l_action.arr[0]		= '\0';
  l_action.len			= 0;

  EXEC SQL SELECT COUNT(*)
  INTO :l_count 
  FROM RL_REQUEST_HEADER_LOG
  WHERE patient_id = :rl_req_patient_id
  AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no) 
  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
  AND ROWNUM < 2;

  if (l_count > 0)
  {

     strcpy(l_added_by_id.arr, l_modified_by_id.arr);
	 strcpy(l_added_date.arr, l_modified_date.arr);
	 strcpy(l_action.arr,"M");

  }
  else
  {
	strcpy(l_action.arr,"I");
  }

  EXEC SQL  INSERT INTO RL_REQUEST_HEADER_LOG
		        (operating_facility_id,specimen_no, patient_id, source_code, consultant_code,
				request_comment_code1, request_comment_desc1,
				request_comment_code2, request_comment_desc2,
				request_comment_code3, request_comment_desc3,
				spec_colltd_date_time, spec_recd_date_time,
				spec_regd_date_time, specimen_type_code,
	  			urgent_indicator, action, users, event, event_date,
				verified_by_id, verified_date,
		        ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID
                )
		    VALUES
		  	    (:nd_operating_facility_id,:rl_anl_result_spec_no, :rl_req_patient_id, :l_source_code, :l_consultant_code,
				:l_request_comment_code1, :l_request_comment_desc1,
				:l_request_comment_code2, :l_request_comment_desc2,
				:l_request_comment_code3, :l_request_comment_desc3,
				TO_DATE(:l_spec_colltd_date_time,'DD/MM/YYYY HH24:MI:SS'), 
				TO_DATE(:l_spec_recd_date_time,'DD/MM/YYYY HH24:MI:SS'), 
				TO_DATE(:l_spec_regd_date_time,'DD/MM/YYYY HH24:MI:SS'), :l_specimen_type_code,
				:l_urgent_indicator, :l_action, :l_added_by_id, 'Background', 
				TO_DATE(:l_added_date,'DD/MM/YYYY HH24:MI:SS'), 
				:l_verified_by_id, 
				TO_DATE(:l_verified_date,'DD/MM/YYYY HH24:MI:SS'),
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id);
 	
}


get_values_for_req_detail()
{
   l_numeric_result.arr[0]			= '\0';
   l_numeric_prefix.arr[0]			= '\0';
   l_result_status.arr[0]			= '\0';
   l_modified_by_id.arr[0]			= '\0';
   l_modified_date.arr[0]			= '\0';
   l_added_date.arr[0]				= '\0';
   l_added_by_id.arr[0]				= '\0';

   l_numeric_result.len				= 0;
   l_numeric_prefix.len				= 0;
   l_result_status.len				= 0;
   l_modified_by_id.len				= 0;
   l_modified_date.len				= 0;
   l_added_date.len					= 0;
   l_added_by_id.len				= 0;

	EXEC SQL SELECT 
	numeric_result, numeric_prefix,
	result_status,modified_by_id, 
	TO_CHAR(modified_date,'DD/MM/YYYY HH24:MI:SS'),
	added_by_id,
	TO_CHAR(added_date,'DD/MM/YYYY HH24:MI:SS')
	INTO :l_numeric_result, :l_numeric_prefix,
	:l_result_status, :l_modified_by_id,
	:l_modified_date, :l_added_by_id,
	:l_added_date
	FROM RL_REQUEST_DETAIL
	WHERE PATIENT_ID = :rl_req_patient_id 
	AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
	AND OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND TEST_CODE = :v_group_test_code;

   l_numeric_result.arr[l_numeric_result.len]			= '\0';
   l_numeric_prefix.arr[l_numeric_prefix.len]			= '\0';
   l_result_status.arr[l_result_status.len]				= '\0';
   l_modified_by_id.arr[l_modified_by_id.len]			= '\0';
   l_modified_date.arr[l_modified_date.len]				= '\0';
   l_added_date.arr[l_added_date.len]					= '\0';
   l_added_by_id.arr[l_added_by_id.len]					= '\0';
   
}

update_req_detail_log()
{
  
  l_action.arr[0]		= '\0';
  l_action.len			= 0;

  EXEC SQL SELECT COUNT(*)
  INTO :l_count 
  FROM RL_REQUEST_DETAIL_LOG
  WHERE PATIENT_ID = :rl_req_patient_id 
  AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
  AND TEST_CODE = :v_group_test_code
  AND ROWNUM < 2;
  if (l_count > 0)
  {

     strcpy(l_added_by_id.arr, l_modified_by_id.arr);
	 strcpy(l_added_date.arr, l_modified_date.arr);
	 strcpy(l_action.arr,"M");

  }
  else
  {
	strcpy(l_action.arr,"I");
  }

  EXEC SQL INSERT INTO RL_REQUEST_DETAIL_LOG
		        (operating_facility_id,specimen_no, patient_id, test_code,
				numeric_result, numeric_prefix, 
				result_status,action, users, event, 
				event_date,
				ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID)
		   VALUES
		  	    (:nd_operating_facility_id,:rl_anl_result_spec_no, :rl_req_patient_id, :v_group_test_code,
				:l_numeric_result, :l_numeric_prefix, 
				:l_result_status,:l_action, :l_added_by_id, 'Background', 
				TO_DATE(:l_added_date,'DD/MM/YYYY HH24:MI:SS'),
				sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id);
 	
}

get_values_for_test_result()
{
   l_group_test_code.arr[0]			= '\0';
   l_section_code.arr[0]			= '\0';
   l_delta_fail_yn.arr[0]			= '\0';
   l_numeric_prefix.arr[0]			= '\0';
   l_numeric_result.arr[0]			= '\0';
   l_result_comment_code1.arr[0]	= '\0';
   l_result_comment_desc1.arr[0]	= '\0';
   l_result_comment_code2.arr[0]	= '\0';
   l_result_comment_desc2.arr[0]	= '\0';
   l_result_comment_code3.arr[0]	= '\0';
   l_result_comment_desc3.arr[0]	= '\0';
   l_result_comment_code4.arr[0]	= '\0';
   l_result_comment_desc4.arr[0]	= '\0';
   l_status.arr[0]					= '\0';
   l_tech_status.arr[0]				= '\0';
   l_delta_status.arr[0]			= '\0';
   l_qlty_status.arr[0]				= '\0';
   l_cmnt_status.arr[0]				= '\0';
   l_path_status.arr[0]				= '\0';
   l_rslt_status.arr[0]				= '\0';
   l_modified_by_id.arr[0]			= '\0';
   l_modified_date.arr[0]			= '\0';
   l_added_date.arr[0]				= '\0';
   l_added_by_id.arr[0]				= '\0';

   l_group_test_code.len			= 0;
   l_section_code.len				= 0;
   l_delta_fail_yn.len				= 0;
   l_numeric_prefix.len				= 0;
   l_numeric_result.len				= 0;
   l_result_comment_code1.len		= 0;
   l_result_comment_desc1.len		= 0;
   l_result_comment_code2.len		= 0;
   l_result_comment_desc2.len		= 0;
   l_result_comment_code3.len		= 0;
   l_result_comment_desc3.len		= 0;
   l_result_comment_code4.len		= 0;
   l_result_comment_desc4.len		= 0;
   l_status.len						= 0;
   l_tech_status.len				= 0;
   l_delta_status.len				= 0;
   l_qlty_status.len				= 0;
   l_cmnt_status.len				= 0;
   l_path_status.len				= 0;
   l_rslt_status.len				= 0;
   l_modified_by_id.len				= 0;
   l_modified_date.len				= 0;
   l_added_date.len					= 0;
   l_added_by_id.len				= 0;

	EXEC SQL SELECT 
	group_test_code, section_code, group_seq_no,
	test_seq_no, delta_fail_yn, numeric_prefix,
	numeric_result, result_comment_code1,
	result_comment_desc1, result_comment_code2,
	result_comment_desc2, result_comment_code3,
	result_comment_desc3, result_comment_code4,
	result_comment_desc4, status, tech_status,
	delta_status, qlty_status, cmnt_status,
	path_status, rslt_status, 
	modified_by_id, TO_CHAR(modified_date,'DD/MM/YYYY HH24:MI:SS'),
	added_by_id,TO_CHAR(added_date,'DD/MM/YYYY HH24:MI:SS')
	INTO 
	:l_group_test_code, :l_section_code, :l_group_seq_no,
	:l_test_seq_no, :l_delta_fail_yn, :l_numeric_prefix,
	:l_numeric_result, :l_result_comment_code1,
	:l_result_comment_desc1, :l_result_comment_code2,
	:l_result_comment_desc2, :l_result_comment_code3,
	:l_result_comment_desc3, :l_result_comment_code4,
	:l_result_comment_desc4, :l_status, :l_tech_status,
	:l_delta_status, :l_qlty_status, :l_cmnt_status,
	:l_path_status, :l_rslt_status, 
	:l_modified_by_id,
	:l_modified_date, :l_added_by_id,
	:l_added_date
	FROM RL_TEST_RESULT
	WHERE PATIENT_ID = :rl_req_patient_id
    AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
	AND OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND TEST_CODE = :u_test_code;

   l_group_test_code.arr[l_group_test_code.len]				= '\0';
   l_section_code.arr[l_section_code.len]					= '\0';
   l_delta_fail_yn.arr[l_delta_fail_yn.len]					= '\0';
   l_numeric_prefix.arr[l_numeric_prefix.len]				= '\0';
   l_numeric_result.arr[l_numeric_result.len]				= '\0';
   l_result_comment_code1.arr[l_result_comment_code1.len]	= '\0';
   l_result_comment_desc1.arr[l_result_comment_desc1.len]	= '\0';
   l_result_comment_code2.arr[l_result_comment_code2.len]	= '\0';
   l_result_comment_desc2.arr[l_result_comment_desc2.len]	= '\0';
   l_result_comment_code3.arr[l_result_comment_code3.len]	= '\0';
   l_result_comment_desc3.arr[l_result_comment_desc3.len]	= '\0';
   l_result_comment_code4.arr[l_result_comment_code4.len]	= '\0';
   l_result_comment_desc4.arr[l_result_comment_desc4.len]	= '\0';
   l_status.arr[l_status.len]								= '\0';
   l_tech_status.arr[l_tech_status.len]						= '\0';
   l_delta_status.arr[l_delta_status.len]					= '\0';
   l_qlty_status.arr[l_qlty_status.len]						= '\0';
   l_cmnt_status.arr[l_cmnt_status.len]						= '\0';
   l_path_status.arr[l_path_status.len]						= '\0';
   l_rslt_status.arr[l_rslt_status.len]						= '\0';
   l_modified_by_id.arr[l_modified_by_id.len]				= '\0';
   l_modified_date.arr[l_modified_date.len]					= '\0';
   l_added_date.arr[l_added_date.len]						= '\0';
   l_added_by_id.arr[l_added_by_id.len]						= '\0';
   
}

update_test_result_log()
{
  
  l_action.arr[0]		= '\0';
  l_action.len			= 0;

  EXEC SQL SELECT COUNT(*)
  INTO :l_count 
  FROM RL_TEST_RESULT_LOG
  WHERE PATIENT_ID = :rl_req_patient_id 
  AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
  AND TEST_CODE = :v_group_test_code
  AND ROWNUM < 2;

  if (l_count > 0)
  {

     strcpy(l_added_by_id.arr, l_modified_by_id.arr);
	 strcpy(l_added_date.arr, l_modified_date.arr);
	 strcpy(l_action.arr,"M");

  }
  else
  {
	strcpy(l_action.arr,"I");
  }

  EXEC SQL INSERT INTO RL_TEST_RESULT_LOG
		        (operating_facility_id,specimen_no, patient_id, group_test_code,
				test_code, section_code, group_seq_no,
				test_seq_no, delta_fail_yn,
				numeric_prefix, numeric_result,
				result_comment_code1, result_comment_desc1,
				result_comment_code2, result_comment_desc2,
				result_comment_code3, result_comment_desc3,
				result_comment_code4, result_comment_desc4,
				status, tech_status, delta_status,
				qlty_status, cmnt_status, path_status,
				rslt_status,action, users, event, 
				event_date,
				ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID)
		    VALUES
		  	    (:nd_operating_facility_id,:rl_anl_result_spec_no, :rl_req_patient_id, :l_group_test_code,
				:v_group_test_code, :l_section_code, :l_group_seq_no,
				:l_test_seq_no, :l_delta_fail_yn,
				:l_numeric_prefix, :l_numeric_result,
				:l_result_comment_code1, :l_result_comment_desc1,
				:l_result_comment_code2, :l_result_comment_desc2,
				:l_result_comment_code3, :l_result_comment_desc3,
				:l_result_comment_code4, :l_result_comment_desc4,
				:l_status, l_tech_status, :l_delta_status,
				:l_qlty_status, :l_cmnt_status, :l_path_status,
				:l_rslt_status, :l_action, :l_added_by_id, 'Background', 
				TO_DATE(:l_added_date,'DD/MM/YYYY HH24:MI:SS'),
				sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id);
}
*/

age_sex_range(k)
 int k;
{
 
  
  /*for(r=0;r<no_of_tests;r++)
  {  
	strcpy(u_test_code.arr, rl_test_rslt_test_code[r].arr);
	u_test_code.len = strlen(u_test_code.arr);	*/
	
	EXEC SQL DECLARE RL_AGE_SEX_RANGE_CUR CURSOR FOR
              SELECT TO_CHAR(NVL(physician_age_low_value, LOW_VALUE_NORMAL)),
                     TO_CHAR(NVL(physician_age_high_value, HIGH_VALUE_NORMAL))
                FROM RL_AGE_SEX_RANGE
               WHERE TEST_CODE = :u_test_code
                 AND SEX       = :rl_req_sex
                 AND :tot_age_in_days
                       BETWEEN CALC_MIN_AGE_IN_DAYS  AND 
                          CALC_MAX_AGE_IN_DAYS;
	EXEC SQL OPEN RL_AGE_SEX_RANGE_CUR;	

    t_low_value_normal.arr[0]		  = '\0';
	t_high_value_normal.arr[0]		  = '\0';
	rl_tst_range_low_v_nor[k].arr[0]  = '\0';
	rl_tst_range_high_v_nor[k].arr[0] = '\0';

	t_low_value_normal.len			= 0;
	t_high_value_normal.len			= 0;
	rl_tst_range_low_v_nor[k].len   = '\0';
	rl_tst_range_high_v_nor[k].len   = '\0';

	     
	EXEC SQL FETCH RL_AGE_SEX_RANGE_CUR
              INTO :t_low_value_normal,
                   :t_high_value_normal;
 
    	
	t_low_value_normal.arr[t_low_value_normal.len]		= '\0';
	t_high_value_normal.arr[t_high_value_normal.len]		= '\0';


	strcpy(rl_tst_range_low_v_nor[k].arr, t_low_value_normal.arr);
	strcpy(rl_tst_range_high_v_nor[k].arr, t_high_value_normal.arr);

	rl_tst_range_low_v_nor[k].len = strlen(rl_tst_range_low_v_nor[k].arr);
	rl_tst_range_high_v_nor[k].len = strlen(rl_tst_range_high_v_nor[k].arr);

	 EXEC SQL CLOSE RL_AGE_SEX_RANGE_CUR;

    if(OERROR)
		ins_message(ERR_MESG,"Failed on fetch_age_sex_cur cursor()");
 
}
/*--------------------------------------------------*/
ins_message(int msg_type,char msg[])
{
   er_msg.arr[0] = '\0';
   er_msg.len = 0;
   
   er_msg_type = 0;

   strcpy(er_msg.arr,msg);
   er_msg.len = strlen(msg);
 
   er_msg_type = msg_type;
   EXEC SQL
   INSERT INTO SY_PROG_MSG
          (OPERATING_FACILITY_ID,PGM_ID,MSG_TYPE,MSG_NUM,MSG_DESC,MSG_DATE_TIME,SESSION_ID,PGM_DATE)
   VALUES 
          (:nd_operating_facility_id,'RLTBGREL',:er_msg_type,NULL,:er_msg,SYSDATE,USERENV('sessionid'),
		   TO_CHAR(SYSDATE,'DD/MM/YYYY'));

	lock_error = 'E';

   err_flag = 1;
}

/***********************************************/

do_reflex_process()
{
	
	strcpy(w_test_code.arr, rl_test_rslt_test_code[x].arr);
    w_test_code.len = strlen(w_test_code.arr);

    rl_test_rule_path_rev_type[x].arr[0]	= '\0';
	rl_test_rule_path_rev_type[x].len		= 0;
		
   declare_test_rules();
   while(fetch_test_rules())
   {

     v_tech_rev_yn.arr[0]			= '\0';
     v_path_rev_type.arr[0]		= '\0';
     v_order_tests_yn.arr[0]		= '\0';
     v_found_yn.arr[0]			= '\0';

     v_tech_rev_yn.len			= 0;
     v_path_rev_type.len			= 0;
     v_order_tests_yn.len			= 0;
     v_found_yn.len				= 0;

     v_rule_valid_yn.arr[0]		= '\0';
     v_rule_valid_yn.len			= 0;

     strcpy(v_rule_valid_yn.arr, "Y");
     v_rule_valid_yn.len = strlen(v_rule_valid_yn.arr);
   
     get_rule_setup();

     strcpy(v_rule_pass_yn.arr, "Y");
     v_rule_pass_yn.len = strlen(v_rule_pass_yn.arr);

     strcpy(first_component.arr, "TRUE");
     first_component.len = strlen(first_component.arr);

     strcpy(v_prev_comp_pass_yn.arr, "X");
     v_prev_comp_pass_yn.len = strlen(v_prev_comp_pass_yn.arr);

     strcpy(v_comp_pass_yn.arr, "X");
     v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);

     no_of_components = 0;

     strcpy(flag_flag.arr, "TRUE");
     flag_flag.len = strlen(flag_flag.arr);
   
     declare_rule_dtls();
     while(fetch_rule_dtls())
    {

   	   no_of_components++;
	   strcpy(v_prev_comp_pass_yn.arr, v_comp_pass_yn.arr);
	   v_prev_comp_pass_yn.len = strlen(v_prev_comp_pass_yn.arr);

	   if (strcmp(v_rule_valid_yn.arr,"Y") == 0)
	   {
		  check_test_present();

		  if (strcmp(v_rule_valid_yn.arr,"Y") == 0)
		  {

		     if (strcmp(r_component.arr, "AGE") == 0)
				  check_age();
		     if (strcmp(r_component.arr, "SEX") == 0)
			     check_sex();
		     if (strcmp(r_component.arr, "NAT") == 0)
			     check_nationality();
		     if (strcmp(r_component.arr, "SRC") == 0)
			     check_source();
		     if (strcmp(r_component.arr, "CLC") == 0)
			     check_clinical_comments();
		     if (strcmp(r_component.arr, "NRE") == 0)
			     check_numeric_result();
		     if (strcmp(r_component.arr, "REC") == 0)
			     check_result_comments();
		     if (strcmp(r_component.arr, "SMD") == 0)
			     check_snomeds();
		     if (strcmp(r_component.arr, "SNS") == 0)
			     check_sensitivities();
		     if (strcmp(r_component.arr, "TXT") == 0)
			     check_text_blocks();

		   }

		  if (strcmp(first_component.arr,"FALSE") == 0)
		  {
			  if (strcmp(flag_flag.arr,"TRUE") == 0)
			  {
				  if (strlen(v_prev_oper_2.arr))
				  {

					  if (strcmp(v_prev_oper_2.arr,"A") == 0)
					  {

						  if (strcmp(v_prev_comp_pass_yn.arr,"Y") == 0 &&
							  strcmp(v_comp_pass_yn.arr,"Y") == 0)
						  {
							  strcpy(v_rule_pass_yn.arr, "Y");
							  v_rule_pass_yn.len = strlen(v_rule_pass_yn.arr);
						  }
						  else
						  {
							  strcpy(v_rule_pass_yn.arr, "N");
							  v_rule_pass_yn.len = strlen(v_rule_pass_yn.arr);
							
							  strcpy(flag_flag.arr, "FALSE");
							  flag_flag.len = strlen(flag_flag.arr);
						  }

					   }
					   else
					   {
					  	  if (strcmp(v_prev_comp_pass_yn.arr,"Y") == 0 ||
						  	  strcmp(v_comp_pass_yn.arr,"Y") == 0)
						  {
							  strcpy(v_rule_pass_yn.arr, "Y");
							  v_rule_pass_yn.len = strlen(v_rule_pass_yn.arr);

							  strcpy(flag_flag.arr, "FALSE");
							  flag_flag.len = strlen(flag_flag.arr);
						   }
						  else
						  { 
						  	  strcpy(v_rule_pass_yn.arr, "N");
							  v_rule_pass_yn.len = strlen(v_rule_pass_yn.arr);

						   }
					  }
				  }
			  }

 		  }
		
		  strcpy(v_prev_oper_2.arr, r_operator_2.arr);
		  v_prev_oper_2.len = strlen(v_prev_oper_2.arr);

	   }

	   strcpy(first_component.arr, "FALSE");
	   first_component.len = strlen(first_component.arr);

     }
     close_rule_dtls();
 
     if (no_of_components == 1)
     {

	    strcpy(v_rule_pass_yn.arr, v_comp_pass_yn.arr);
	    v_rule_pass_yn.len = strlen(v_rule_pass_yn.arr);
     }

     if (no_of_components > 0)
     {

	   if (strcmp(v_rule_valid_yn.arr,"Y") == 0)
	   {
	 	  if (strcmp(v_rule_pass_yn.arr,"Y") == 0)
		  {
  		    if (strcmp(v_order_tests_yn.arr,"Y") == 0)
		    {

			  order_reflex_tests();

		    }
		    else
		    {
			  if (strcmp(v_tech_rev_yn.arr,"Y") == 0)
			  {
                strcpy(rl_test_rslt_status[x].arr,"A");
			    rl_test_rslt_status[x].len = strlen(rl_test_rslt_status[x].arr);
			    strcpy(rl_test_rule_status[x].arr,"L");
			    rl_test_rule_status[x].len = strlen(rl_test_rule_status[x].arr);
			    strcpy(r_rule_review_ind.arr,"T"); 
			    r_rule_review_ind.len = strlen(r_rule_review_ind.arr);
			  
			  }

			  if (strlen(v_path_rev_type.arr))
			  {

			    strcpy(rl_test_rslt_path_status[x].arr,v_path_rev_type.arr);
			    rl_test_rslt_path_status[x].len = strlen(rl_test_rslt_path_status[x].arr);
			    strcpy(rl_test_rule_status[x].arr,"L");
			    rl_test_rule_status[x].len = strlen(rl_test_rule_status[x].arr);
			    strcpy(rl_test_rslt_status[x].arr,"A");
			    rl_test_rslt_status[x].len = strlen(rl_test_rslt_status[x].arr);
			    strcpy(rl_test_rule_path_rev_type[x].arr, v_path_rev_type.arr);
			    rl_test_rule_path_rev_type[x].len = strlen(rl_test_rule_path_rev_type[x].arr);

			    if (!(strlen(r_rule_review_ind.arr)))
			    {
				  strcpy(r_rule_review_ind.arr, v_path_rev_type.arr);
				  r_rule_review_ind.len = strlen(r_rule_review_ind.arr);
			    }
			    else if(strcmp(r_rule_review_ind.arr,"T") == 0);
			    else if(strcmp(r_rule_review_ind.arr,"A") == 0);
			    else if(strcmp(r_rule_review_ind.arr,"N") == 0)
			    {
  				  strcpy(r_rule_review_ind.arr, v_path_rev_type.arr);
				  r_rule_review_ind.len = strlen(r_rule_review_ind.arr);
			    }

			  }

		    }

		  }
	   }

     }

  }
}


declare_test_rules()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   
   EXEC SQL DECLARE test_rules CURSOR FOR
        SELECT rule_code
  	    FROM RL_TEST_RULE
		WHERE test_code = :w_test_code;
   EXEC SQL OPEN test_rules; 
   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_test_rules()\n");
	return;
}

declare_rule_dtls()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE rule_dtls CURSOR FOR
	    SELECT test_code, component, operator_1, 
			   value,operator_2
		FROM RL_RULE_DTL
		WHERE rule_code = :r_rule_code
		ORDER BY seq_no;

    EXEC SQL OPEN rule_dtls;
    return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_rule_dtls()\n");
	return;
}

int fetch_test_rules()
{
   #ifdef DEBUG
       printf("In fetch_test_rules()\n");
   #endif

   r_rule_code.arr[0]			= '\0';
   r_rule_code.len				= 0;

   EXEC SQL FETCH test_rules
   INTO :r_rule_code;
 
	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_TEST_RULE");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		r_rule_code.arr[r_rule_code.len]		= '\0';

        #ifdef DEBUG
            printf("fetch_test_rules() nd_rule_code = %s\n",
	        nd_rule_code.arr);
        #endif

	      return 1;
      }
}

int fetch_rule_dtls()
{
   #ifdef DEBUG
       printf("In fetch_rule_dtls()\n");
   #endif

	r_test_code.arr[0]			= '\0';
	r_component.arr[0]			= '\0';
	r_operator_1.arr[0]			= '\0';
	r_operator_2.arr[0]			= '\0';
	r_value.arr[0]				= '\0';

	r_test_code.len			= 0;
	r_component.len			= 0;
	r_operator_1.len		= 0;
	r_operator_2.len		= 0;
	r_value.len				= 0;


   EXEC SQL FETCH rule_dtls
   INTO :r_test_code, :r_component,
		 :r_operator_1, :r_value, :r_operator_2;


	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_RULE_DTL");

     if (NODATAFOUND)
     {
        return 0;
     }
     else
     {
        
		r_test_code.arr[r_test_code.len]			= '\0';
		r_component.arr[r_component.len]			= '\0';
		r_operator_1.arr[r_operator_1.len]			= '\0';
		r_operator_2.arr[r_operator_2.len]			= '\0';
		r_value.arr[r_value.len]					= '\0';		

        #ifdef DEBUG
            printf("fetch_rule_dtls() r_test_code = %s\n",
	        r_test_code.arr);
        #endif
	      
	      return 1;
      }

}

close_test_rules()
{
  EXEC SQL CLOSE test_rules ;
}

close_rule_dtls()
{
   EXEC SQL CLOSE rule_dtls ;
}

dclr_test_result_cursor_2()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL DECLARE TEST_RESULT_CURSOR_2 CURSOR FOR
		 SELECT GROUP_TEST_CODE,TEST_CODE, numeric_result,
                 result_comment_code1, result_comment_code2,
                 result_comment_code3, result_comment_code4
		 FROM RL_TEST_RESULT
         WHERE SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
		 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		 ORDER BY GROUP_SEQ_NO,TEST_SEQ_NO;

	EXEC SQL OPEN TEST_RESULT_CURSOR_2;

    return;
 err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at dclr_test_result_cursor_2()\n");
	return;
}

int fetch_test_result_cursor_2()
{
   #ifdef DEBUG
       printf("In fetch_test_result_cursor_2()\n");
   #endif

		s_test_code.arr[0]						= '\0';
		s_group_test_code.arr[0]				= '\0';
        s_numeric_result.arr[0]                 = '\0';
        s_result_comment_code1.arr[0]           = '\0';
        s_result_comment_code2.arr[0]           = '\0';
        s_result_comment_code3.arr[0]           = '\0';
        s_result_comment_code4.arr[0]           = '\0';


		s_test_code.len							= 0;
		s_group_test_code.len					= 0;
        s_numeric_result.len                    = 0;
        s_result_comment_code1.len              = 0;
        s_result_comment_code2.len              = 0;
        s_result_comment_code3.len              = 0;
        s_result_comment_code4.len              = 0;


   EXEC SQL FETCH TEST_RESULT_CURSOR_2
   INTO :s_group_test_code, :s_test_code,:s_numeric_result,
        :s_result_comment_code1, :s_result_comment_code2,
        :s_result_comment_code3, :s_result_comment_code4;

  	 if (OERROR)
  	     ins_message(ERR_MESG,"Select failed on table RL_TEST_RESULT");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
				s_test_code.arr[s_test_code.len]			 = '\0';
				s_group_test_code.arr[s_group_test_code.len] = '\0';
                s_numeric_result.arr[s_numeric_result.len]               = '\0';
                s_result_comment_code1.arr[s_result_comment_code1.len]   = '\0';
                s_result_comment_code2.arr[s_result_comment_code2.len]   = '\0';
                s_result_comment_code3.arr[s_result_comment_code3.len]   = '\0';
                s_result_comment_code4.arr[s_result_comment_code4.len]   = '\0';
		
        #ifdef DEBUG
            printf("fetch_test_result_cursor_2() s_test_code = %s\n",
	        s_test_code.arr);
        #endif

	      return 1;
      }
}

check_test_present()
{
   int fetch_test_result_cursor_2();

   dclr_test_result_cursor_2();
   while(fetch_test_result_cursor_2())
   {
     if(strcmp(r_test_code.arr, s_test_code.arr) == 0)
	 {
		strcpy(v_rule_valid_yn.arr,"Y");
		v_rule_valid_yn.len = strlen(v_rule_valid_yn.arr);
		break;
	 }
   }
   
  EXEC SQL CLOSE test_result_cursor_2 ;

}

declare_reflexs()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE reflexs CURSOR FOR
        SELECT test_code, NVL(bill_yn, 'N')
  	    FROM RL_RULE_REFLEX_TEST
		WHERE rule_code = :v_rule_code;
		
   EXEC SQL OPEN reflexs;
    return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_reflexs()\n");
	return;
}

int fetch_reflexs()
{
   #ifdef DEBUG
       printf("In fetch_reflexs()\n");
   #endif

   p_test_code.arr[0]			= '\0';
   p_test_code.len				= 0;
   p_bill_yn.arr[0]				= '\0';
   p_bill_yn.len				= 0;

   EXEC SQL FETCH reflexs INTO :p_test_code, :p_bill_yn;
 
	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_RULE_REFLEX_TEST");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		p_test_code.arr[p_test_code.len]		= '\0';
		p_bill_yn.arr[p_bill_yn.len]			= '\0';

        #ifdef DEBUG
            printf("fetch_reflexs() p_test_code = %s\n",
	        p_test_code.arr);
        #endif

	      return 1;
      }
}

void declare_rules()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE RULES CURSOR FOR
        SELECT rule_code
  	    FROM RL_RULE
		WHERE rule_code  IN(SELECT rule_code 
		FROM RL_TEST_RULE 
		WHERE test_code = :w_test_code
		AND rule_code = :r_rule_code)
		AND order_tests_yn = 'Y';
   EXEC SQL OPEN RULES;
    return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_test_rules()\n");
	return;
}

int fetch_rules()
{
   #ifdef DEBUG
       printf("In fetch_rules()\n");
   #endif

   v_rule_code.arr[0]			= '\0';
   v_rule_code.len				= 0;

   EXEC SQL FETCH RULES INTO :v_rule_code;
 
	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_TEST_RULE");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		v_rule_code.arr[v_rule_code.len]		= '\0';

        #ifdef DEBUG
            printf("fetch_rules() v_rule_code = %s\n",
	        v_rule_code.arr);
        #endif

	      return 1;
      }
}

order_reflex_tests()
{

  int fetch_rules();
  int fetch_reflexs();

  declare_rules();
  while(fetch_rules())
  {
	declare_reflexs();

	while(fetch_reflexs())
	{

	   order_test();

	}

	EXEC SQL CLOSE reflexs;
	
  }
  EXEC SQL CLOSE RULES;

}

declare_comments()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   EXEC SQL DECLARE comments_1 CURSOR FOR
   SELECT ALLOWABLE_COMMENT_CODE,RESULT_COMMENT
   FROM RL_ALLOWABLE_COMMENT_CODE , RL_RESULT_COMMENT_CODE
   WHERE TEST_CODE = :temp_test_code_2
   AND ALLOWABLE_COMMENT_CODE = RESULT_COMMENT_CODE
   AND PROMPT_COMMENT_YN = 'Y'
   AND SECTION_CODE = :d_section_code
   ORDER BY SERIAL_NO;
		
   EXEC SQL OPEN comments_1;
    return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_comments()\n");
	return;

}

int fetching_comments()
{
  #ifdef DEBUG
       printf("In fetching_comments()\n");
  #endif

  comment_code_1.arr[0]		= '\0';
  comment_desc_1.arr[0]		= '\0';
  comment_code_2.arr[0]		= '\0';
  comment_desc_2.arr[0]		= '\0';
  comment_code_3.arr[0]		= '\0';
  comment_desc_3.arr[0]		= '\0';
  comment_code_4.arr[0]		= '\0';
  comment_desc_4.arr[0]		= '\0';

  if (cmt == 1)
  {

     EXEC SQL FETCH comments_1
	 INTO :comment_code_1, :comment_desc_1;
  }
  else if (cmt == 2)
  {

     EXEC SQL FETCH comments_1
	 INTO :comment_code_2, :comment_desc_2;
  }
  else if (cmt == 3)
  {

     EXEC SQL FETCH comments_1
	 INTO :comment_code_3, :comment_desc_3;
  }
  else if (cmt == 4)
  {

     EXEC SQL FETCH comments_1
	 INTO :comment_code_4, :comment_desc_4;
  }
 
	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_TEST_RESULT");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
         comment_code_1.arr[comment_code_1.len]		= '\0';
		 comment_code_2.arr[comment_code_2.len]		= '\0';
		 comment_code_3.arr[comment_code_3.len]		= '\0';
		 comment_code_4.arr[comment_code_4.len]		= '\0';
		 comment_desc_1.arr[comment_desc_1.len]		= '\0';
		 comment_desc_2.arr[comment_desc_2.len]		= '\0';
		 comment_desc_3.arr[comment_desc_3.len]		= '\0';
		 comment_desc_4.arr[comment_desc_4.len]		= '\0';

        #ifdef DEBUG
            printf("fetching_comments() comment_code_1 = %s\n",
	        comment_code_1.arr);
        #endif

	      return 1;
      }
}

fetch_test_comments(temp_test_code_1)
char temp_test_code_1[11];
{
   strcpy(temp_test_code_2.arr, temp_test_code_1);
   temp_test_code_2.len = strlen(temp_test_code_2.arr);

   declare_comments();
   cmt = 0;
   while(fetching_comments())
   {
	 cmt++;
   }
   
   EXEC SQL CLOSE comments_1;
}

order_test()
{

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   v_grp_tst_yn.arr[0]				= '\0';
   v_pat_mark_yn.arr[0]				= '\0';
//   v_referred_test_yn[0]			= '\0';

   v_grp_tst_yn.len					= 0;
   v_pat_mark_yn.len				= 0;
   v_referred_test_yn.len           = 0;

   EXEC SQL SELECT NVL(GROUP_TEST_YN,'N'),NVL(PATIENT_MARKER_YN,'N'),SEQ_NO,NVL(REFERRED_TEST_YN,'N') 
   INTO :v_grp_tst_yn,:v_pat_mark_yn,:v_seq_no, :v_referred_test_yn
   FROM RL_TEST_CODE
   WHERE TEST_CODE = :p_test_code;

   v_grp_tst_yn.arr[v_grp_tst_yn.len]				= 0;
   v_pat_mark_yn.arr[v_pat_mark_yn.len]				= 0;

   if (strcmp(v_grp_tst_yn.arr,"Y") == 0)
   {
	   strcpy(v_test_exists_yn.arr,"N");
	   v_test_exists_yn.len = strlen(v_test_exists_yn.arr);

	   EXEC SQL SELECT 'Y' 
	   INTO :v_test_exists_yn
       FROM RL_REQUEST_DETAIL
       WHERE PATIENT_ID = :rl_req_patient_id
	   AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
	   AND OPERATING_FACILITY_ID = :nd_operating_facility_id
	   AND TEST_CODE = :p_test_code;

   }
   else
   {
	   strcpy(v_test_exists_yn.arr,"N");
	   v_test_exists_yn.len = strlen(v_test_exists_yn.arr);

	    EXEC SQL SELECT 'Y'
		INTO :v_test_exists_yn
        FROM RL_TEST_RESULT
        WHERE PATIENT_ID = :rl_req_patient_id
	    AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
		AND OPERATING_FACILITY_ID = :nd_operating_facility_id
	    AND TEST_CODE = :p_test_code;
   }

   if (strcmp(v_test_exists_yn.arr,"N") ==0)
   {
	 if (strcmp(v_grp_tst_yn.arr, "Y") ==0)
	 {
		insert_rl_diff_result_hdr();

	 }

	  insert_rl_analyzer_requests();

      v_insert_yn = 'N';
      
   	  insert_test_result();

      if (v_insert_yn == 'Y')
      {
         insert_request_detail();
      }


   }

  return;

 err_exit:
       ins_message(ORA_MESG,"Failed on update_delta_details()");
	   return;
}

declare_insert_tests()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   EXEC SQL DECLARE results_tests CURSOR FOR
   SELECT TEST_CODE,SEQ_NO,PATIENT_MARKER_YN,REFERRED_TEST_YN
   FROM   RL_TEST_CODE 
   WHERE  TEST_CODE IN
       ( SELECT TEST_CODE FROM RL_GROUP_TEST_DETAIL
       WHERE GROUP_TEST_CODE = :p_test_code);        
		
   EXEC SQL OPEN results_tests;
    return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_insert_results()\n");
	return;
}

int fetch_insert_tests()
{
   #ifdef DEBUG
       printf("In fetch_insert_tests()\n");
   #endif

   k_test_code.arr[0]			= '\0';
   k_patient_marker_yn.arr[0]	= '\0';
   k_referred_test_yn.arr[0]	= '\0';

   k_test_code.len				= 0;
   k_patient_marker_yn.len		= 0;
   k_referred_test_yn.len		= 0;

   EXEC SQL FETCH results_tests 
   INTO :k_test_code, :k_seq_no, 
		 :k_patient_marker_yn, :k_referred_test_yn;
 
	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_TEST_RESULT");


     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		k_test_code.arr[k_test_code.len]				 = '\0';
		k_patient_marker_yn.arr[k_patient_marker_yn.len] = '\0';
		k_referred_test_yn.arr[k_referred_test_yn.len]	 = '\0';


        #ifdef DEBUG
            printf("fetch_results_tests() k_test_code = %s\n",
	        k_test_code.arr);
        #endif

	      return 1;
      }
}

check_any_test_exist()
{

   insert_count = 0;

   EXEC SQL SELECT count(1)
	        INTO :insert_count
 			FROM RL_GROUP_TEST_DETAIL
            WHERE group_test_code = :p_test_code
			AND test_code IN
					( SELECT test_code 
					  FROM RL_TEST_RESULT
					  WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
					  AND OPERATING_FACILITY_ID = :nd_operating_facility_id);
					  
}

insert_test_result()
{

	nd_reflex_test.arr[0]		= '\0';
	nd_reflex_test.len			= 0;
	
   get_spec_regd_datetime(); //////// 06.07.2003

   if (strcmp(v_grp_tst_yn.arr,"Y") == 0)
   {
     check_any_test_exist();

	 if (insert_count == 0)
     {
		 

		 strcpy(nd_reflex_test.arr, k_test_code.arr);
		 nd_reflex_test.len = strlen(nd_reflex_test.arr);
		 check_reflex_test_suspended();

		if ( (strcmp(nd_ref_status.arr, "E") == 0) ||
		     ( (strcmp(nd_ref_status.arr, "D") == 0 && 
				strcmp(nd_susp_test_yn.arr, "Y") == 0) ||
				(strcmp(nd_ref_status.arr, "N") == 0 && 
				strcmp(nd_non_perfm_test_yn.arr, "Y") == 0) ))
		
		{

		 v_insert_yn = 'Y';

	     declare_insert_tests();
	     while(fetch_insert_tests())
	     {
		       fetch_test_comments(k_test_code.arr);

                    EXEC SQL INSERT INTO RL_TEST_RESULT
                            (OPERATING_FACILITY_ID,SPECIMEN_NO,PATIENT_ID,TEST_CODE,
							 GROUP_TEST_CODE,SECTION_CODE,GROUP_SEQ_NO,TEST_SEQ_NO,
							 ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,MODIFIED_DATE,STATUS,
                             RESULT_COMMENT_CODE1,RESULT_COMMENT_DESC1,
                             RESULT_COMMENT_CODE2,RESULT_COMMENT_DESC2,
                             RESULT_COMMENT_CODE3,RESULT_COMMENT_DESC3,
                             RESULT_COMMENT_CODE4,RESULT_COMMENT_DESC4,
                             CANCELLED_YN,
							 ADDED_AT_WS_NO,
	                         ADDED_FACILITY_ID,
	                         MODIFIED_AT_WS_NO,
	                         MODIFIED_FACILITY_ID)
                     VALUES
                            (:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no),
							:rl_req_patient_id,:k_test_code,:p_test_code,:d_section_code,
                            :v_seq_no,:k_seq_no,USER,
                            USER,SYSDATE,SYSDATE,NULL,
                           :comment_code_1,:comment_desc_1,
                           :comment_code_2,:comment_desc_2,
                           :comment_code_3,:comment_desc_3,
                           :comment_code_4,:comment_desc_4,'N',
						   sys_context('USERENV','IP_ADDRESS'),
			               :nd_operating_facility_id,
			               sys_context('USERENV','IP_ADDRESS'),
			               :nd_operating_facility_id);


		 if (strcmp(k_patient_marker_yn.arr,"Y") == 0)
		 {
		     insert_rl_patient_markers();
		 }

/*********** added on 06.07.2003 to insert the referred tests *****************/

		 if (strcmp(v_referred_test_yn.arr,"Y") == 0)
		 {
					  v_stat.arr[0]	= '\0';
					  v_stat.len		= 0;

			EXEC SQL EXECUTE  
				BEGIN 
					  rl_bl_trns.insert_rl_referred_request(:nd_operating_facility_id,
															:v_spec_regd_datetime,
															:rl_anl_result_spec_no,
															:p_test_code,
															:d_section_code,
															:rl_req_patient_id,	
															 sys_context('USERENV','IP_ADDRESS'),
															 'Y',
															 :v_stat);

				END;  
			END-EXEC;
//					   v_stat.arr[v_stat.len] = '\0';

		  }
		 else
		 {
			if (strcmp(k_referred_test_yn.arr,"Y") == 0) 
			{
						v_stat.arr[0]	= '\0';
						v_stat.len		= 0;

  			  EXEC SQL EXECUTE 
					BEGIN 

						rl_bl_trns.insert_rl_referred_request(:nd_operating_facility_id,
															  :v_spec_regd_datetime,
															  :rl_anl_result_spec_no,
															  :k_test_code,
															  :d_section_code,
															  :rl_req_patient_id,	
															   sys_context('USERENV','IP_ADDRESS'),
															   'N',
															  :v_stat);


					END; 
			  END-EXEC;
					    v_stat.arr[v_stat.len] = '\0';

			}
		 }

/******** upto here ******************/

	 }
	 EXEC SQL CLOSE results_tests;
	}
	}
   }
   else
   {

	 fetch_test_comments(p_test_code.arr);

          EXEC SQL SELECT count(*)
                   INTO :insert_count
                   FROM RL_TEST_RESULT
                   WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
                   AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				   AND test_code = :p_test_code;


                if (insert_count == 0)
                {

						 strcpy(nd_reflex_test.arr, p_test_code.arr);
						 nd_reflex_test.len = strlen(nd_reflex_test.arr);
  					    check_reflex_test_suspended();
//sprintf(string_var, "hello   %s   %s  %s", nd_ref_status.arr, nd_susp_test_yn.arr,
//						nd_non_perfm_test_yn.arr);

//disp_message(ERR_MESG, string_var);

					if ( (strcmp(nd_ref_status.arr, "E") == 0) ||
						( (strcmp(nd_ref_status.arr, "D") == 0 && 
							strcmp(nd_susp_test_yn.arr, "Y") == 0) ||
						(strcmp(nd_ref_status.arr, "N") == 0 && 
						strcmp(nd_non_perfm_test_yn.arr, "Y") == 0) ) )
		
					{

                      v_insert_yn = 'Y';


                   EXEC SQL INSERT INTO RL_TEST_RESULT
                             (OPERATING_FACILITY_ID,SPECIMEN_NO,PATIENT_ID,TEST_CODE,
							 GROUP_TEST_CODE,SECTION_CODE,GROUP_SEQ_NO,TEST_SEQ_NO,
							 ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,MODIFIED_DATE,STATUS,
                             RESULT_COMMENT_CODE1,RESULT_COMMENT_DESC1,
                             RESULT_COMMENT_CODE2,RESULT_COMMENT_DESC2,
                             RESULT_COMMENT_CODE3,RESULT_COMMENT_DESC3,
                             RESULT_COMMENT_CODE4,RESULT_COMMENT_DESC4,
                             CANCELLED_YN,
							 ADDED_AT_WS_NO,
	                         ADDED_FACILITY_ID,
	                         MODIFIED_AT_WS_NO,
	                         MODIFIED_FACILITY_ID)
                    VALUES
                             (:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no),
							 :rl_req_patient_id,:p_test_code,:p_test_code,:d_section_code,
                             NULL,:v_seq_no,USER,USER,SYSDATE,SYSDATE,NULL,
                             :comment_code_1,:comment_desc_1,
                             :comment_code_2,:comment_desc_2,
                             :comment_code_3,:comment_desc_3,
                             :comment_code_4,:comment_desc_4,'N',
							 sys_context('USERENV','IP_ADDRESS'),
			                 :nd_operating_facility_id,
			                 sys_context('USERENV','IP_ADDRESS'),
			                 :nd_operating_facility_id);


/*********** added on 06.07.2003 to insert the referred tests *****************/

						 if (strcmp(v_referred_test_yn.arr,"Y") == 0)
						{
								v_stat.arr[0]	= '\0';
								v_stat.len		= 0;

								EXEC SQL EXECUTE 
								BEGIN 

										  rl_bl_trns.insert_rl_referred_request(:nd_operating_facility_id,
															:v_spec_regd_datetime,
															 :rl_anl_result_spec_no,
															:p_test_code,
															:d_section_code,
															:rl_req_patient_id,	
															 sys_context('USERENV','IP_ADDRESS'),
															 'N',
															 :v_stat);
								END; 
								END-EXEC;
								v_stat.arr[v_stat.len] = '\0'; 

							}

/************************* upto here *************/

						if (strcmp(v_pat_mark_yn.arr,"Y") == 0)
						{
							insert_rl_patient_markers_2();
						}

				  }

                }

   }
}

insert_rl_patient_markers()
{
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;  

	EXEC SQL SELECT COUNT(*)
	INTO :cmt FROM RL_PATIENT_MARKERS
    WHERE PATIENT_ID = :rl_req_patient_id AND TEST_CODE = :k_test_code;
	if (cmt == 0)
	{
       EXEC SQL INSERT INTO RL_PATIENT_MARKERS
	            (PATIENT_ID,TEST_CODE,ADDED_BY_ID,
				MODIFIED_BY_ID,ADDED_DATE,
		        MODIFIED_DATE,
				ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID)
       VALUES   (:rl_req_patient_id,:k_test_code,
                USER,USER,SYSDATE,SYSDATE,
				sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id);

    }
    return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at insert_rl_patient_markers()\n");
	return;


}

insert_rl_patient_markers_2()
{
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;  

	EXEC SQL SELECT COUNT(*)
	INTO :cmt FROM RL_PATIENT_MARKERS
    WHERE PATIENT_ID = :rl_req_patient_id AND TEST_CODE = :p_test_code;
	if (cmt == 0)
	{
       EXEC SQL INSERT INTO RL_PATIENT_MARKERS
	            (PATIENT_ID,TEST_CODE,ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,
                MODIFIED_DATE,
				ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID)
       VALUES   (:rl_req_patient_id,:p_test_code,
                USER,USER,SYSDATE,SYSDATE,
	            sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id);
    }
    return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at insert_rl_patient_markers_2()\n");
	return;
}

insert_request_detail()
{

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;	

   if (p_bill_yn.arr[0] == 'Y')
   {
/******** CALL THE BILLING PROCEDURE *****************/	  
   }
   else
   {
		strcpy(l_billed_yn.arr, "N");
		l_billed_yn.len = strlen(l_billed_yn.arr);
   }

   EXEC SQL SELECT NVL(MAX(line_no), 0)
      INTO :l_line_no
      FROM RL_REQUEST_DETAIL
      WHERE patient_id = :rl_req_patient_id
      AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
	  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

/************** FOR REFLEX TEST *******************/
	  l_reflex_test_yn.arr[0]	= '\0';
	  l_reflex_test_yn.len		= 0;

	EXEC SQL SELECT NVL(reflex_test_yn, 'N') 
			INTO :l_reflex_test_yn
			FROM RL_TEST_CODE
			WHERE test_code = :p_test_code;


		strcpy(rf_test_code.arr, p_test_code.arr);
		rf_test_code.len = strlen(rf_test_code.arr);

	  l_reflex_test_yn.arr[l_reflex_test_yn.len]	= '\0';
			
			if (l_reflex_test_yn.arr[0] == 'Y')
			{
		
				insert_reflex_test();
			}

			l_line_no++;

/************* UPTO HERE ***************************/
   			EXEC SQL INSERT INTO RL_REQUEST_DETAIL
					(operating_facility_id,specimen_no, patient_id, test_code, group_test_yn, 
						num_tests, num_essential, result_status, print_yn,
						numeric_result, numeric_prefix, line_no, order_line_no, 
						billed_yn, base_rate, addl_blng_factor, discount_percent,
						effective_charge, gross_charge, discount_value, net_charge,
						blng_serv_code, section_code, cancelled_yn, cancelled_reason,
						referred_test_yn, referred_lab_code, date_sent, date_recd, 
						added_by_id, modified_by_id, added_date, modified_date,
						released_by_id, released_date, result_printed_date,
						reflex_type,
						ADDED_AT_WS_NO,
	                    ADDED_FACILITY_ID,
	                    MODIFIED_AT_WS_NO,
	                    MODIFIED_FACILITY_ID)
  			VALUES
					    (:nd_operating_facility_id,:rl_anl_result_spec_no, :rl_req_patient_id, :rf_test_code, :v_grp_tst_yn, 
						NULL, NULL, 'O', 'N',
						NULL, NULL, :l_line_no, NULL, 
						:l_billed_yn, NULL, NULL, NULL,
						NULL, NULL, NULL, NULL,
						NULL, :d_section_code, 'N', NULL,
						NULL, NULL, NULL, NULL, 
  	        			USER, USER, SYSDATE, SYSDATE,
						NULL, NULL, NULL, 'RR',
						sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id,
			            sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id);


   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at insert_request_detail()\n");
	return;
}

insert_rl_analyzer_requests()
{
    strcpy(d_ummy.arr,"N");
    d_ummy.len = strlen(d_ummy.arr);

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;	

    EXEC SQL SELECT 'Y'
    INTO :d_ummy
    FROM RL_ANALYZER_REQUESTS
    WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
	AND instrument_code IS NULL;

	d_ummy.arr[d_ummy.len]	= '\0';

   if (strcmp(d_ummy.arr,"N") == 0)
   {
	 EXEC SQL INSERT INTO RL_ANALYZER_REQUESTS
     (OPERATING_FACILITY_ID,SPECIMEN_NO,INSTRUMENT_CODE,FOREGROUND_FLAG,SECTION_CODE,
	 ADDED_AT_WS_NO,
	 ADDED_FACILITY_ID,
	 MODIFIED_AT_WS_NO,
	 MODIFIED_FACILITY_ID)
     VALUES 
	 (:nd_operating_facility_id,:rl_anl_result_spec_no,NULL,'N',:d_section_code,
	 sys_context('USERENV','IP_ADDRESS'),
	 :nd_operating_facility_id,
	 sys_context('USERENV','IP_ADDRESS'),
	 :nd_operating_facility_id);
   }

   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at insert_rl_analyzer_requests()\n");
	return;
}

insert_rl_diff_result_hdr()
{
   d_ummy.arr[0]		= '\0';
   d_ummy.len			= 0;
			
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;	

   strcpy(d_ummy.arr,"N");
   d_ummy.len = strlen(d_ummy.arr);

   EXEC SQL SELECT 'Y' 
   INTO :d_ummy
   FROM RL_DIFF_RESULT_HDR
   WHERE PATIENT_ID = :rl_req_patient_id
   AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
   AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

   d_ummy.arr[d_ummy.len]	= '\0';

   if (strcmp(d_ummy.arr,"N") == 0)
   {
      strcpy(d_ummy.arr,"N");
      d_ummy.len = strlen(d_ummy.arr);

	  EXEC SQL SELECT 'T'
      INTO :d_ummy
      FROM RL_DIFF_REF_HDR
      WHERE DIFF_TEST_CODE = :p_test_code;

	  if (strcmp(d_ummy.arr,"T") == 0)
      {

		  EXEC SQL INSERT INTO RL_DIFF_RESULT_HDR(OPERATING_FACILITY_ID,
		           PATIENT_ID,SPECIMEN_NO,
		           SPEC_REGD_DATE_TIME,ADDED_BY_ID,
		           ADDED_DATE,MODIFIED_BY_ID,
		           MODIFIED_DATE,
				   ADDED_AT_WS_NO,
	               ADDED_FACILITY_ID,
	               MODIFIED_AT_WS_NO,
	               MODIFIED_FACILITY_ID)
		  VALUES   (:nd_operating_facility_id,:rl_req_patient_id,
		            :rl_anl_result_spec_no,
		            TO_DATE(:rl_req_hdr_spec_time,'DD/MM/YYYY HH24:MI'),
		            USER,SYSDATE,USER,SYSDATE,
					sys_context('USERENV','IP_ADDRESS'),
			        :nd_operating_facility_id,
			        sys_context('USERENV','IP_ADDRESS'),
			        :nd_operating_facility_id);
	  }
   }

   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_reflexs()\n");
	return;
}

get_rule_setup()
{

    EXEC SQL SELECT NVL(TEC_REV_YN,'N'),PATH_REV_TYPE,
      NVL(ORDER_TESTS_YN,'N'),'Y'
      INTO :v_tech_rev_yn,:v_path_rev_type,
	  :v_order_tests_yn,:v_found_yn
      FROM RL_RULE
	  WHERE RULE_CODE = :r_rule_code;

   if(OERROR)
        ins_message(ERR_MESG,"Failed on get_rule_setup");

   v_tech_rev_yn.arr[v_tech_rev_yn.len]			= '\0';
   v_path_rev_type.arr[v_path_rev_type.len]		= '\0';
   v_order_tests_yn.arr[v_order_tests_yn.len]	= '\0';
   v_found_yn.arr[v_found_yn.len]				= '\0';

   
   #ifdef DEBUG
      printf("In get_rule_setup() v_order_tests_yn =[%c] \n",
      v_order_test_yn.arr[0]);
   #endif
}

check_age()
{
  
  int v_rule_age = 0;

  EXEC SQL SELECT NVL(TO_NUMBER(SUBSTR(:r_value,1,3)),0)
  INTO :cmt FROM DUAL;
  v_rule_age = cmt * 365;
  EXEC SQL SELECT NVL(TO_NUMBER(SUBSTR(:r_value,5,2)),0)
  INTO :cmt FROM DUAL;
  v_rule_age = v_rule_age + (cmt * 30);
  EXEC SQL SELECT NVL(TO_NUMBER(SUBSTR(:r_value,8,2)),0)
  INTO :cmt FROM DUAL;
  v_rule_age = v_rule_age  + cmt ;
 
  strcpy(v_comp_pass_yn.arr, "N");
  v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);

  if (strcmp(r_operator_1.arr,"GT") == 0)
  {
	if (tot_age_in_days > v_rule_age)
	{
		strcpy(v_comp_pass_yn.arr, "Y");
		v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);
	}

  }
  else if (strcmp(r_operator_1.arr,"LT") == 0)
  {
	if (tot_age_in_days < v_rule_age)
	{
		strcpy(v_comp_pass_yn.arr, "Y");
		v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);
	}

  }
  else if (strcmp(r_operator_1.arr,"EQ") == 0)
  {
	if (tot_age_in_days == v_rule_age)
	{
		strcpy(v_comp_pass_yn.arr, "Y");
		v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);
	}

  }

}

check_sex()
{
	strcpy(v_comp_pass_yn.arr, "N");
	v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

	if (strcmp(r_value.arr,"G") == 0)
	{
		strcpy(v_comp_pass_yn.arr, "Y");
		v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
	}

	if (strcmp(r_operator_1.arr,"EQ") == 0)
	{
		if (strcmp(rl_req_sex.arr, r_value.arr) == 0)
		{
			strcpy(v_comp_pass_yn.arr, "Y");
			v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

		}
	}
	else if (strcmp(r_operator_1.arr,"NE") == 0)
	{ 
		if (strcmp(rl_req_sex.arr, r_value.arr) != 0)
		{
			strcpy(v_comp_pass_yn.arr, "Y");
			v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

		}
    }
} 

check_source()
{

	strcpy(v_comp_pass_yn.arr, "N");
	v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

	if (strcmp(r_operator_1.arr,"EQ") == 0)
	{
	   if (strcmp(rl_req_source_code.arr,r_value.arr) == 0)
	   {
		   strcpy(v_comp_pass_yn.arr, "Y");
	  	   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
	   }
	}
	else
	{
		if (strcmp(rl_req_source_code.arr,r_value.arr) != 0)
	   {
		   strcpy(v_comp_pass_yn.arr, "Y");
	  	   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
	   }
	}

}

check_clinical_comments()
{
	strcpy(v_comp_pass_yn.arr, "N");
	v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

	if (strcmp(r_operator_1.arr,"EQ") == 0)
	{
		if (strcmp(rl_req_cc_1.arr,r_value.arr) == 0 ||
			strcmp(rl_req_cc_2.arr,r_value.arr) == 0 ||
			strcmp(rl_req_cc_3.arr,r_value.arr) == 0)
		{
			strcpy(v_comp_pass_yn.arr, "Y");
			v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
		
		}

	}
	else
	{

		if (strcmp(rl_req_cc_1.arr,r_value.arr) != 0 &&
			strcmp(rl_req_cc_2.arr,r_value.arr) != 0 &&
			strcmp(rl_req_cc_3.arr,r_value.arr) != 0)
		{
			strcpy(v_comp_pass_yn.arr, "Y");
			v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
		
		}

	}
}

declare_snmd_cursor()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE snmd_cur CURSOR FOR
   SELECT SNOMED_CODE
   FROM RL_RESULT_SNOMED
   WHERE PATIENT_ID = :rl_req_patient_id
   AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
   AND OPERATING_FACILITY_ID = :nd_operating_facility_id
   AND TEST_CODE = :r_test_code
   AND SNOMED_CODE IS NOT NULL;

   EXEC SQL OPEN snmd_cur;
   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_snmd_cur()\n");
	return;
}

int fetch_snmd_cur()
{
   #ifdef DEBUG
       printf("In fetch_snmd_cur()\n");
   #endif

   r_snomed_code.arr[0]			= '\0';
   r_snomed_code.len			= 0;

   EXEC SQL FETCH snmd_cur INTO :r_snomed_code;
 
	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_RESULT_SNOMED");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		r_snomed_code.arr[r_snomed_code.len]		= '\0';

        #ifdef DEBUG
            printf("fetch_snomed_cur() r_snomed_code = %s\n",
	        r_snomed_code.arr);
        #endif

	      return 1;
      }
}

check_snomeds()
{
 
  int fetch_snmd_cur(); 
  int cmt1 = 0;
  int cmt2 = 0;

   strcpy(v_comp_pass_yn.arr, "N");
   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
 
   declare_snmd_cursor();
   while(fetch_snmd_cur())
   {
	  
	  if (strcmp(r_operator_1.arr,"EQ") == 0)
	  {
		 if (strcmp(r_value.arr,r_snomed_code.arr) == 0)
		 {
			strcpy(v_comp_pass_yn.arr, "Y");
			v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

		 }
	  }
	  else
	  {
		if(cmt2 == 0)
		{
		     if (strcmp(r_value.arr,r_snomed_code.arr) != 0)	
			 {
				 strcpy(v_comp_pass_yn.arr, "Y");
				 v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
			 }
			 else
			 {
				cmt2 = 1 ;
				strcpy(v_comp_pass_yn.arr, "N");
				v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
			 }
		}

	  }

   }
 
   EXEC SQL CLOSE snmd_cur;
}

/****************** NEWLY ADDED FOR SENSITIVITY ON 02/01/1999 ****************/
declare_sensitivity_hdr_cursor()
{

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE sensitivity_hdr_cur CURSOR FOR
   SELECT organism_code, antibiotic_group_code, operator_1
   FROM RL_RULE_ORGANISM_DTL
   WHERE rule_code = :r_rule_code
   AND test_code = :r_test_code
   ORDER BY seq_no;
   
   EXEC SQL OPEN sensitivity_hdr_cur;
   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_sensitivity_cur()\n");
	return;

}

declare_sensitivity_dtl_cursor()
{

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE sensitivity_dtl_cur CURSOR FOR
   SELECT antibiotic_code, operator_1, sensitivity_indr, operator_2
   FROM RL_RULE_SENSITIVITY_DTL
   WHERE rule_code = :r_rule_code
   AND test_code = :r_test_code
   AND organism_code = :l_organism_code
   AND antibiotic_group_code = :l_antibiotic_group_code
   ORDER BY seq_no;
   
   EXEC SQL OPEN sensitivity_dtl_cur;
   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_sensitivity_dtl_cur()\n");
	return;

}

int fetch_sensitivity_hdr()
{
   #ifdef DEBUG
       printf("In fetch_sensitivity_hdr()\n");
   #endif

   l_organism_code.arr[0]				= '\0';
   l_organism_code.len					= 0;
   l_antibiotic_group_code.arr[0]		= '\0';
   l_antibiotic_group_code.len			= 0;
   l_hdr_operator_1.arr[0]				= '\0';
   l_hdr_operator_1.len					= 0;

   EXEC SQL FETCH sensitivity_hdr_cur INTO 
					:l_organism_code, :l_antibiotic_group_code,
					:l_hdr_operator_1;
 
	 if (ERROR)
	   ins_message(ERR_MESG, "Select failed on table RL_RULE_ORGANISM_DTL");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		l_organism_code.arr[l_organism_code.len]					= '\0';
		l_antibiotic_group_code.arr[l_antibiotic_group_code.len]	= '\0';
		l_hdr_operator_1.arr[l_hdr_operator_1.len]					= '\0';

        #ifdef DEBUG
            printf("fetch_text_blk_cur() l_organism_code = %s\n",
	        l_organism_code.arr);
        #endif

	      return 1;
      }
}

int fetch_sensitivity_dtl()
{
   #ifdef DEBUG
       printf("In fetch_sensitivity_dtl()\n");
   #endif

   l_antibiotic_code.arr[0]				= '\0';
   l_antibiotic_code.len				= 0;
   l_sensitivity_indr.arr[0]			= '\0';
   l_sensitivity_indr.len				= 0;
   l_dtl_operator_1.arr[0]				= '\0';
   l_dtl_operator_1.len					= 0;
   l_dtl_operator_2.arr[0]				= '\0';
   l_dtl_operator_2.len					= 0;

   EXEC SQL FETCH sensitivity_dtl_cur INTO 
					:l_antibiotic_code, :l_dtl_operator_1, :l_sensitivity_indr,
					:l_dtl_operator_2;
 
	 if (ERROR)
	   ins_message(ERR_MESG, "Select failed on table RL_RULE_SENSITIVITY_DTL");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		l_organism_code.arr[l_organism_code.len]					= '\0';
		l_sensitivity_indr.arr[l_sensitivity_indr.len]				= '\0';
		l_dtl_operator_1.arr[l_dtl_operator_1.len]					= '\0';
		l_dtl_operator_2.arr[l_dtl_operator_2.len]					= '\0';

        #ifdef DEBUG
            printf("fetch_text_blk_cur() l_antibiotic_code = %s\n",
	        l_antibiotic_code.arr);
        #endif

	      return 1;
      }
}

check_sensitivities()
{

   int fetch_sensitivity_hdr();
   int fetch_sensitivity_dtl();
   char l_pass_yn, l_temp_pass_yn;
   char l_prev_operator_1[3], l_prev_operator_2[3];

   l_pass_yn = '!';
   l_temp_pass_yn = '!';
   strcpy(l_prev_operator_1, "!");
   strcpy(l_prev_operator_2, "!");
   
   
   strcpy(v_comp_pass_yn.arr, "!");
   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
   declare_sensitivity_hdr_cursor();
   while(fetch_sensitivity_hdr())
   {
	    EXEC SQL SELECT  COUNT(*)
	    INTO :l_count
	    FROM RL_RESULT_ORGANISM
		WHERE PATIENT_ID = :rl_req_patient_id
		AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
		AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND TEST_CODE = :r_test_code
	    AND organism_code = :l_organism_code
	    AND antibiotic_group_code = :l_antibiotic_group_code;

		if (l_count == 0)
		{
			if (strcmp(l_prev_operator_1,"A") == 0 || strcmp(l_hdr_operator_1.arr,"A") == 0)
			{
			  strcpy(v_comp_pass_yn.arr, "N");
			  v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
			}
		}
		else
		{
			strcpy(v_comp_pass_yn.arr, "Y");
			v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);
		}


	    strcpy(l_prev_operator_2, "!");
        l_temp_pass_yn = '!';

		if (strcmp(v_comp_pass_yn.arr,"Y") == 0)
		{

			declare_sensitivity_dtl_cursor();
			while(fetch_sensitivity_dtl())
			{

				if (strcmp(l_dtl_operator_1.arr, "EQ") == 0)
				{
					  EXEC SQL SELECT COUNT(*)
	 				  INTO :l_count
	                  FROM RL_RESULT_ORGANISM_DTL
					  WHERE PATIENT_ID = :rl_req_patient_id
					  AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
					  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :r_test_code
					  AND organism_code = :l_organism_code
					  AND antibiotic_group_code = :l_antibiotic_group_code
					  AND antibiotic_code = :l_antibiotic_code
		              AND sensitivity_ind = :l_sensitivity_indr;					
				}
				else
				{
					  EXEC SQL SELECT COUNT(*)
	 				  INTO :l_count
	                  FROM RL_RESULT_ORGANISM_DTL
					  WHERE PATIENT_ID = :rl_req_patient_id
					  AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
					  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND TEST_CODE = :r_test_code
					  AND organism_code = :l_organism_code
					  AND antibiotic_group_code = :l_antibiotic_group_code
					  AND antibiotic_code = :l_antibiotic_code
		              AND sensitivity_ind <> :l_sensitivity_indr;	

				}

			    if (l_count == 0)
				{
					if (strcmp(l_prev_operator_2, "A") == 0 || strcmp(l_dtl_operator_2.arr,"A") == 0)
					{
						l_temp_pass_yn = 'N';					
					}
				}
				else
				{
					l_temp_pass_yn = 'Y';
				}

				if ((l_temp_pass_yn == 'N') && (strcmp(l_prev_operator_2, "A") == 0 
							|| strcmp(l_dtl_operator_2.arr, "A") == 0))
				{
					break;
				}

				strcpy(l_prev_operator_2, l_dtl_operator_2.arr);

			}

			EXEC SQL CLOSE sensitivity_dtl_cur;

		}


		l_pass_yn = l_temp_pass_yn;

		if ((strcmp(v_comp_pass_yn.arr, "N") == 0 ||
				l_pass_yn == 'N') && (strcmp(l_prev_operator_1, "A") == 0
						|| strcmp(l_hdr_operator_1.arr, "A") == 0))
		{
			break;
		}
        
		strcpy(l_prev_operator_1, l_hdr_operator_1.arr);

   }

   EXEC SQL CLOSE sensitivity_hdr_cur;     
   if (l_pass_yn == '!')
   {
	  strcpy(v_comp_pass_yn.arr, "N");
   	  v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);			
   }		
   else if (l_pass_yn == 'N')
   {
	  strcpy(v_comp_pass_yn.arr, "N");
   	  v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);			
   }


}
/********* UPTO HERE NEWLY ADDED ON 02/01/2000 ******/



declare_text_blk_cursor()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DECLARE text_blk_cur CURSOR FOR
   SELECT RESULT_TEXT_CODE
   FROM RL_RESULT_TEXT
   WHERE PATIENT_ID = :rl_req_patient_id
   AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
   AND OPERATING_FACILITY_ID = :nd_operating_facility_id
   AND TEST_CODE = :r_test_code
   AND RESULT_TEXT_CODE IS NOT NULL;
   
   EXEC SQL OPEN text_blk_cur;
   return;
err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	ins_message(ORA_MESG,"Oracle error occurred at declare_text_blk_cur()\n");
	return;
}

int fetch_text_blk_cur()
{
   #ifdef DEBUG
       printf("In fetch_text_blk_cur()\n");
   #endif

   r_result_text_code.arr[0]			= '\0';
   r_result_text_code.len			= 0;

   EXEC SQL FETCH text_blk_cur INTO :r_result_text_code;
 
	 if (OERROR)
	   ins_message(ERR_MESG,"Select failed on table RL_RESULT_TEXT");

     if (NODATAFOUND)
     {
	     return 0;
     }
     else
     {
        
		r_result_text_code.arr[r_result_text_code.len]		= '\0';

        #ifdef DEBUG
            printf("fetch_text_blk_cur() r_result_text_code = %s\n",
	        r_result_text_code.arr);
        #endif

	      return 1;
      }
}

check_text_blocks()
{
  int fetch_text_blk_cur(); 
  int cmt1 = 0;
  int cmt2 = 0;

   strcpy(v_comp_pass_yn.arr, "N");
   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
 
   declare_text_blk_cursor();
   while(fetch_text_blk_cur())
   {
	  
	  if (strcmp(r_operator_1.arr,"EQ") == 0)
	  {
		 if (strcmp(r_value.arr,r_result_text_code.arr) == 0)
		 {
			strcpy(v_comp_pass_yn.arr, "Y");
			v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

		 }
	  }
	  else
	  {
		if(cmt2 == 0)
		{
		     if (strcmp(r_value.arr,r_result_text_code.arr) != 0)	
			 {
				 strcpy(v_comp_pass_yn.arr, "Y");
				 v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
			 }
			 else
			 {
				cmt2 = 1 ;
				strcpy(v_comp_pass_yn.arr, "N");
				v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
			 }
		}

	  }

   }
 
   EXEC SQL CLOSE text_blk_cur;

}

check_nationality()
{
   strcpy(v_comp_pass_yn.arr, "N");
   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

   if (strcmp(r_operator_1.arr,"EQ") == 0)
   {
     if (strcmp(nation.arr,r_value.arr) == 0)
	 {
		strcpy(v_comp_pass_yn.arr, "Y");
		v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
	 }
   }
   else
   {
    if (strcmp(nation.arr,r_value.arr) != 0)
	 {
		strcpy(v_comp_pass_yn.arr, "Y");
		v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
	 }

   }
  
}

check_numeric_result()
{

   strcpy(v_comp_pass_yn.arr, "N");
   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

   dclr_test_result_cursor_2();
   while(fetch_test_result_cursor_2())
   {
   
     if (strcmp(w_test_code.arr,	r_test_code.arr) == 0)
     {
		if (strlen(rl_test_rslt_numeric_result[x].arr))
		{
			if (strcmp(r_operator_1.arr,"EQ") == 0)
			{
				if (atof(rl_test_rslt_numeric_result[x].arr)  ==
					atof(r_value.arr))
				{
				   strcpy(v_comp_pass_yn.arr, "Y");
			       v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
				}
			}
			else if (strcmp(r_operator_1.arr,"NE") == 0)
			{
				if (atof(rl_test_rslt_numeric_result[x].arr)  !=
					atof(r_value.arr))
				{
				   strcpy(v_comp_pass_yn.arr, "Y");
			       v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
				}
			}
			else if (strcmp(r_operator_1.arr,"GT") == 0)
			{
				
				if (atof(rl_test_rslt_numeric_result[x].arr)  >
					atof(r_value.arr))
				{
				   strcpy(v_comp_pass_yn.arr, "Y");
			       v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
				}
			}
			else if (strcmp(r_operator_1.arr,"LT") == 0)
			{
				if (atof(rl_test_rslt_numeric_result[x].arr) <
					atof(r_value.arr))
				{
				   strcpy(v_comp_pass_yn.arr, "Y");
			       v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		
				}
			}
		}
     }
  }
}

check_result_comments()
{
   strcpy(v_comp_pass_yn.arr, "N");
   v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

   dclr_test_result_cursor_2();
   while(fetch_test_result_cursor_2())
   {

     if (strcmp(w_test_code.arr,	r_test_code.arr) == 0)
    {
	  if (strlen(rl_test_rslt_rcc_1[x].arr) ||
		  strlen(rl_test_rslt_rcc_2[x].arr) ||
		  strlen(rl_test_rslt_rcc_3[x].arr) ||
		  strlen(rl_test_rslt_rcc_4[x].arr))
	  {
		if (strcmp(r_operator_1.arr,"EQ") == 0)
		{
			if (strcmp(r_value.arr,rl_test_rslt_rcc_1[x].arr) == 0 ||
				strcmp(r_value.arr,rl_test_rslt_rcc_2[x].arr) == 0 ||
				strcmp(r_value.arr,rl_test_rslt_rcc_3[x].arr) == 0 ||
				strcmp(r_value.arr,rl_test_rslt_rcc_4[x].arr) == 0)
			{
				strcpy(v_comp_pass_yn.arr, "Y");
			    v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

			}
		}
		else 
		{
			if (strcmp(r_value.arr,rl_test_rslt_rcc_1[x].arr) != 0 &&
				strcmp(r_value.arr,rl_test_rslt_rcc_2[x].arr) != 0 &&
				strcmp(r_value.arr,rl_test_rslt_rcc_3[x].arr) != 0 &&
				strcmp(r_value.arr,rl_test_rslt_rcc_4[x].arr) != 0)
			{
				strcpy(v_comp_pass_yn.arr, "Y");
			    v_comp_pass_yn.len = strlen(v_comp_pass_yn.arr);		

			}
		}


	  }
	
    }
  }
}

void get_entity_id()
{
    nd_entity_id.arr[0] = '\0';
	nd_entity_id.len = 0;

    EXEC SQL
     SELECT acc_entity_id INTO :nd_entity_id
	   FROM SY_ACC_ENTITY
	   WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

    if(OERROR) 
	    ins_message(ERR_MESG, "Select failed on SY_ACC_ENTITY.");
    else 
	    nd_entity_id.arr[nd_entity_id.len] = '\0';
}

update_order_status()
{

	v_ord_status_type.arr[0]		= '\0';
	v_ord_status_type.len			= 0;
	v_ord_line_status_type.arr[0]	= '\0';
	v_ord_line_status_type.len		= 0;


	EXEC SQL SELECT COUNT(1)
			 INTO :i_count 
			 FROM OR_ORDER_LINE
			 WHERE order_id = :d_order_id
			 AND order_type_code = :d_order_type_code
			 AND order_line_status NOT IN 
					(SELECT order_status_code 
					 FROM OR_ORDER_STATUS_CODE
					 WHERE order_status_type = '99');


	EXEC SQL SELECT COUNT(1)
			 INTO :r_count 
			 FROM OR_ORDER_LINE
			 WHERE order_id = :d_order_id
			 AND order_type_code = :d_order_type_code
			 AND order_line_status IN 
					(SELECT order_status_code 
					 FROM OR_ORDER_STATUS_CODE
 					 WHERE order_status_type = '60');
//// 21.06.2003					 WHERE order_status_type = '70');


	EXEC SQL SELECT COUNT(1)
			 INTO :q_count 
			 FROM RL_REQUEST_DETAIL
			 WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			 AND NVL(result_status, 'O') NOT IN ('R', 'P')
			 AND NVL(cancelled_yn, 'N') <> 'Y';


	EXEC SQL SELECT COUNT(1)
			 INTO :w_count 
			 FROM RL_REQUEST_DETAIL
			 WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			 AND NVL(result_status, 'O') <> 'O'
			 AND NVL(cancelled_yn, 'N') <> 'Y';

	if ((q_count == 0) && (i_count == r_count))
	{
////// 21.06.2003		strcpy(v_ord_status_type.arr, "80");

		strcpy(v_ord_status_type.arr, "60");
		v_ord_status_type.len = strlen(v_ord_status_type.arr);

		strcpy(v_ord_line_status_type.arr, "85");
		v_ord_line_status_type.len = strlen(v_ord_line_status_type.arr);

	}
	else
	{
		if ((r_count > 0) || (w_count > 0))
		{
/////// 21.06.2003			strcpy(v_ord_status_type.arr, "67");

			strcpy(v_ord_status_type.arr, "55");
			v_ord_status_type.len = strlen(v_ord_status_type.arr);

			strcpy(v_ord_line_status_type.arr, "80");
			v_ord_line_status_type.len = strlen(v_ord_line_status_type.arr);

		}
		else
		{
////// 21.06.2003			strcpy(v_ord_status_type.arr, "20");

			strcpy(v_ord_status_type.arr, "25");
			v_ord_status_type.len = strlen(v_ord_status_type.arr);

			strcpy(v_ord_line_status_type.arr, "25");
			v_ord_line_status_type.len = strlen(v_ord_line_status_type.arr);


		}

	}

	check_order_status_code();
	check_order_line_status_code();

	if (strcmp(v_valid_yn.arr, "Y") == 0)
	{

		mstatus.arr[0]		= '\0';
		mstatus.len			= 0;    

		EXEC SQL SELECT order_status 
				 INTO :mstatus
				 FROM OR_ORDER
				 WHERE order_id = :d_order_id
				 AND order_type_code = :d_order_type_code
				 FOR UPDATE OF order_status; /// NOWAIT;

		if (OERROR)
		{
			ins_message(ERR_MESG, "Update on Or_order failed --- lock.");
		}
		else
		{
			EXEC SQL UPDATE OR_ORDER
					SET order_status  = :v_ord_status_code,
	         			result_status = :v_ord_line_status_code    
					WHERE order_id = :d_order_id
					AND order_type_code = :d_order_type_code;
		}
		if (NODATAFOUND);


		mstatus.arr[mstatus.len]		= '\0';
    }

}

update_order_line_status()
{

	char l_exit = 'N';
	
	v_ord_status_type.arr[0]		= '\0';
	v_ord_status_type.len			= 0;
	v_ord_line_status_type.arr[0]	= '\0';
	v_ord_line_status_type.len		= 0;


	if (strcmp(v_result_status.arr, "O") == 0)
	{
///// 21.06.2003		strcpy(v_ord_status_type.arr, "45");

		strcpy(v_ord_status_type.arr, "25");
		v_ord_status_type.len = strlen(v_ord_status_type.arr);

		strcpy(v_ord_line_status_type.arr, "25");
		v_ord_line_status_type.len = strlen(v_ord_line_status_type.arr);

	}	
	else if (strcmp(v_result_status.arr, "A") == 0)
	{
///// 21.06.2003		strcpy(v_ord_status_type.arr, "75");

		strcpy(v_ord_status_type.arr, "55");
		v_ord_status_type.len = strlen(v_ord_status_type.arr);

		strcpy(v_ord_line_status_type.arr, "90");
		v_ord_line_status_type.len = strlen(v_ord_line_status_type.arr);

	}	
	else if (strcmp(v_result_status.arr, "R") == 0)
	{
///// 21.06.2003		strcpy(v_ord_status_type.arr, "70");

		strcpy(v_ord_status_type.arr, "60");
		v_ord_status_type.len = strlen(v_ord_status_type.arr);

		strcpy(v_ord_line_status_type.arr, "85");
		v_ord_line_status_type.len = strlen(v_ord_line_status_type.arr);

	}	

	strcpy(v_group_test.arr, v_group_test_code.arr);
	v_group_test.len = strlen(v_group_test.arr);

	l_should_print_yn = 'Y';

	if (interval_specimen > 0)
		check_should_print_yn();

	l_exit = 'N';

	if (l_should_print_yn != 'Y')
	{
		if (strcmp(v_result_status.arr, "R") == 0)
		{
/////// 21.06.2003			strcpy(v_ord_status_type.arr, "75");

			strcpy(v_ord_status_type.arr, "55");
			v_ord_status_type.len = strlen(v_ord_status_type.arr);

			strcpy(v_ord_line_status_type.arr, "90");
			v_ord_line_status_type.len = strlen(v_ord_line_status_type.arr);

		}
	}
	else
	{
		declare_spec_no_curs();
		declare_int_no_curs();
		while(fetch_int_no_curs())
		{
			open_spec_no_curs();	
			while(fetch_spec_no_curs())
			{
				l_exit = 'Y';
				break;
			}	
			close_spec_no_curs();

			if (l_exit == 'Y')
				break;
			
		}
		close_int_no_curs();
	}
		

	check_order_status_code();
	check_order_line_status_code();

	if (strcmp(v_valid_yn.arr, "Y") == 0)
	{

		mstatus.arr[0]		= '\0';
		mstatus.len			= 0;

		get_catalog_from_test();  /// added on 21.06.2003

		EXEC SQL SELECT order_line_status 
				 INTO :mstatus
				 FROM OR_ORDER_LINE
				 WHERE order_id = :d_order_id
				 AND order_type_code = :d_order_type_code
////////// 19.06.2003 				 AND item_code = :v_group_test
				 AND  order_catalog_code = :v_ord_catalog_code
				 FOR UPDATE OF order_line_status; //// 21.06.2003 NOWAIT;

		if (OERROR)
		{
			ins_message(ERR_MESG, "Update on Or_order_line failed --- lock.");
		}
		else
		{
			EXEC SQL UPDATE OR_ORDER_LINE
			SET order_line_status  = :v_ord_status_code,
        		result_line_status = :v_ord_line_status_code
			WHERE order_id = :d_order_id
			AND order_type_code = :d_order_type_code
/////////////// 19.06.2003			AND item_code = :v_group_test;
			AND order_catalog_code = :v_ord_catalog_code;
		}

		if (NODATAFOUND);


		mstatus.arr[mstatus.len]		= '\0';

	}

}

check_order_status_code()
{

	v_ord_status_code.arr[0]		= '\0';
	v_ord_status_code.len			= 0;
	v_valid_yn.arr[0]				= '\0';
	v_valid_yn.len					= 0;
	
   EXEC SQL SELECT order_status_code, 'Y'
		    INTO :v_ord_status_code, :v_valid_yn
			FROM OR_ORDER_STATUS_CODE
			WHERE order_status_type = :v_ord_status_type;

//////////// 19.06.2003			AND NVL(status, 'O') != 'S';

	if (NODATAFOUND)
	{
		strcpy(v_valid_yn.arr, "N");
		v_valid_yn.len = strlen(v_valid_yn.arr);
	}

	v_ord_status_code.arr[v_ord_status_code.len]		= '\0';
	v_valid_yn.arr[v_valid_yn.len]						= '\0';

}

check_order_line_status_code()
{

	v_ord_line_status_code.arr[0]	= '\0';
	v_ord_line_status_code.len		= 0;
	v_valid_yn.arr[0]				= '\0';
	v_valid_yn.len					= 0;
	
   EXEC SQL SELECT order_status_code, 'Y'
		    INTO :v_ord_line_status_code, :v_valid_yn
			FROM OR_ORDER_STATUS_CODE
			WHERE order_status_type = :v_ord_line_status_type;

	if (NODATAFOUND)
	{
		strcpy(v_valid_yn.arr, "N");
		v_valid_yn.len = strlen(v_valid_yn.arr);
	}

	v_ord_line_status_code.arr[v_ord_line_status_code.len]		= '\0';
	v_valid_yn.arr[v_valid_yn.len]						= '\0';

}


/************ added on 21.06.2003 to get the order catalog code for the test code ********/

get_catalog_from_test()
{

	v_ord_catalog_code.arr[0]		= '\0';
	v_ord_catalog_code.len			= 0;

	EXEC SQL SELECT order_catalog_code
			 INTO  :v_ord_catalog_code
		     FROM   OR_ORDER_CATALOG
		     WHERE  contr_msr_panel_id = :v_group_test
		     AND    order_category = 'LB'
 		     AND    contr_mod_id = 'RL';

	if (NODATAFOUND)
	{
		strcpy(v_ord_catalog_code.arr, v_group_test.arr);
		v_ord_catalog_code.len = strlen(v_ord_catalog_code.arr);
	}

	if (OERROR)
	{
		strcpy(v_ord_catalog_code.arr, v_group_test.arr);
		v_ord_catalog_code.len = strlen(v_ord_catalog_code.arr);
	}

	v_ord_catalog_code.arr[v_ord_catalog_code.len]		= '\0';
}

/*************** 19.06.2003 this procedure not required
get_install_flags()
{
	nd_order_installed_yn.arr[0]		= '\0';
	nd_order_installed_yn.len			= 0;
	nd_bill_installed_yn.arr[0]			= '\0';
	nd_bill_installed_yn.len			= 0;

	EXEC SQL SELECT NVL(or_instal_flag, 'N'), NVL(bl_instal_flag, 'N')
			 INTO :nd_order_installed_yn, :nd_bill_installed_yn
			 FROM SY_ACC_ENTITY
			 WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

	nd_bill_installed_yn.arr[nd_bill_installed_yn.len]		= '\0';
	nd_order_installed_yn.arr[nd_order_installed_yn.len]	= '\0';

}
***********************/
get_interface_flags()
{
	nd_order_interfaced_yn.arr[0]		= '\0';
	nd_order_interfaced_yn.len			= 0;
	nd_bill_interfaced_yn.arr[0]			= '\0';
	nd_bill_interfaced_yn.len			= 0;
    nd_non_perfm_test_yn.arr[0]			= '\0';
	nd_non_perfm_test_yn.len			= 0;
	nd_susp_test_yn.arr[0]				= '\0';
	nd_susp_test_yn.len					= 0;
	nd_print_disch_pat_result_yn.arr[0] = '\0';
	nd_print_disch_pat_result_yn.len	= 0;
	nd_in_patient_result_yn.arr[0]		= '\0';
	nd_in_patient_result_yn.len			= 0;
	nd_out_patient_result_yn.arr[0]		= '\0';
	nd_out_patient_result_yn.len		= 0;
	nd_rf_patient_result_yn.arr[0]		= '\0';
	nd_rf_patient_result_yn.len			= 0;
	nd_ex_patient_result_yn.arr[0]		= '\0';
	nd_ex_patient_result_yn.len			= 0;
	nd_low_value_ind.arr[0]				= '\0';
	nd_low_value_ind.len				= 0;
	nd_high_value_ind.arr[0]				= '\0';
	nd_high_value_ind.len				= 0;
	nd_xmatch_test_code.arr[0]			= '\0';
	nd_xmatch_test_code.len				= 0;

/********************* 19.06.2003
	EXEC SQL SELECT NVL(or_interface_yn, 'N'), NVL(bl_interface_yn, 'N'),
					NVL(print_disch_pat_result_yn, 'N'),
					print_inpatient_yn, print_outpatient_yn,
					print_referral_yn, print_external_yn,
					low_value_ind, high_value_ind, xmatch_test_code
			 INTO :nd_order_interfaced_yn, :nd_bill_interfaced_yn,
					:nd_print_disch_pat_result_yn,
					:nd_in_patient_result_yn, :nd_out_patient_result_yn,
					:nd_rf_patient_result_yn, :nd_ex_patient_result_yn,
					:nd_low_value_ind, :nd_high_value_ind,
					:nd_xmatch_test_code
			 FROM RL_PARAM;
******************************/

/********** commented the above lines  and adde all the following lines ********************/

	nd_operational_modules.arr[0]			= '\0';
	nd_operational_modules.len				= 0;

	EXEC SQL EXECUTE 
	        BEGIN 
			   get_operational_modules(:nd_operating_facility_id,:nd_operational_modules); 
			END; 
	END-EXEC;

	nd_operational_modules.arr[nd_operational_modules.len]			   = '\0';
	
////S	pdest = strstr(:nd_operational_modules,'OR|');

// S   sresult = pdest - :nd_operational_modules + 1;

    EXEC SQL SELECT INSTR(:nd_operational_modules,'OR|') 
	         INTO  :l_operational_count
			 FROM   DUAL;

	if (l_operational_count == 0) 
	    EXEC SQL SELECT 'N' INTO :nd_order_interfaced_yn FROM DUAL;
	else
	    EXEC SQL SELECT 'Y' INTO :nd_order_interfaced_yn FROM DUAL;

/**********
	if( pdest != NULL )
	  nd_order_interfaced_yn = 'Y';
	else
	  nd_order_interfaced_yn = 'N';
****************/

    EXEC SQL SELECT low_value_ind, high_value_ind, xmatch_test_code
			 INTO  :nd_low_value_ind, :nd_high_value_ind,:nd_xmatch_test_code
			 FROM   RL_PARAM;
	if(OERROR)
    {
	  ;
    }


	EXEC SQL SELECT NVL(BL_INTERFACE_YN,'N'), NVL(reflex_susp_test_yn, 'Y'),
		    				NVL(reflex_non_perfm_test_yn, 'Y')
		     INTO  :nd_bill_interfaced_yn,:nd_susp_test_yn,
				   :nd_non_perfm_test_yn
		     FROM   RL_PARAM_FOR_FACILITY
		     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id;
    if(OERROR)
    {
	    EXEC SQL SELECT 'N' INTO :nd_bill_interfaced_yn FROM DUAL;
    }


	EXEC SQL SELECT nvl(a.print_disch_pat_result_yn,b.print_disch_pat_result_yn), 
			        nvl(a.print_inpatient_yn,b.print_inpatient_yn),
					nvl(a.print_outpatient_yn,b.print_outpatient_yn),
					nvl(a.print_referral_yn,b.print_referral_yn),
					nvl(a.print_external_yn,b.print_external_yn)
		 	 INTO  	:nd_print_disch_pat_result_yn,
					:nd_in_patient_result_yn, :nd_out_patient_result_yn,
					:nd_rf_patient_result_yn, :nd_ex_patient_result_yn
		     FROM  RL_PARAM_FOR_FACILITY A , RL_PARAM B
		     WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id;

	if(NODATAFOUND)
	{
	  EXEC SQL SELECT  NVL(print_disch_pat_result_yn, 'N'), NVL(print_inpatient_yn, 'N'),
			   		   NVL(print_outpatient_yn, 'N'), NVL(print_referral_yn, 'N'), 
			  		   NVL(print_external_yn, 'N')
			   INTO    :nd_print_disch_pat_result_yn,
					   :nd_in_patient_result_yn, :nd_out_patient_result_yn,
					   :nd_rf_patient_result_yn, :nd_ex_patient_result_yn
			   FROM RL_PARAM;
	}

	nd_bill_interfaced_yn.arr[nd_bill_interfaced_yn.len]			   = '\0';
	nd_susp_test_yn.arr[nd_susp_test_yn.len]						   = '\0';
	nd_non_perfm_test_yn.arr[nd_non_perfm_test_yn.len]				   = '\0';
	nd_order_interfaced_yn.arr[nd_order_interfaced_yn.len]			   = '\0';
	nd_print_disch_pat_result_yn.arr[nd_print_disch_pat_result_yn.len] = '\0';
	nd_in_patient_result_yn.arr[nd_in_patient_result_yn.len]		   = '\0';
	nd_out_patient_result_yn.arr[nd_out_patient_result_yn.len]		   = '\0';
	nd_rf_patient_result_yn.arr[nd_rf_patient_result_yn.len]		   = '\0';
	nd_ex_patient_result_yn.arr[nd_ex_patient_result_yn.len]		   = '\0';
	nd_low_value_ind.arr[nd_low_value_ind.len]						   = '\0';
	nd_high_value_ind.arr[nd_high_value_ind.len]					   = '\0';
	nd_xmatch_test_code.arr[nd_xmatch_test_code.len]				   = '\0';

}

/*------------------------------------------------------------*/
check_should_print_yn()
{
	int i;

	l_should_print_yn = 'N';

	EXEC SQL DECLARE int_curs CURSOR FOR 
				SELECT DISTINCT TO_CHAR(A.interval_test_specimen_no)
				FROM RL_INTERVAL_TEST_SPECIMENS A 
				WHERE A.specimen_no = TO_NUMBER(:rl_anl_result_spec_no) 
				AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				AND NVL(A.cancelled_yn, 'N') <> 'Y'
				AND NVL(A.status, 'O') IN ('R', 'P');

	EXEC SQL OPEN int_curs;

	while(fetch_int_curs())
	{

		EXEC SQL SELECT COUNT(*)
				 INTO :i_count
				 FROM RL_INTERVAL_TEST_SPECIMENS
				 WHERE interval_test_specimen_no = TO_NUMBER(:d_no) 
				 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				 AND NVL(cancelled_yn, 'N') <> 'Y'
				 AND NVL(status, 'O') NOT IN ('R', 'P');

		if (i_count == 0)
		{
			declare_spec_curs();
			while(fetch_spec_curs())
			{

				l_should_print_yn = 'Y';
				d_interval_specimen_yn = 'Y';
				break;
			}
			close_spec_curs();
		}
	}

	close_int_curs();

	EXEC SQL DECLARE req_curs CURSOR FOR 
				SELECT test_code
				FROM RL_REQUEST_DETAIL
				WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no) 
				AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				AND NVL(result_status, 'O') = 'R';
		   	    

	EXEC SQL OPEN req_curs;

	while(fetch_req_curs())
	{
		EXEC SQL SELECT COUNT(*)
		INTO :i_count
		FROM RL_INTERVAL_TEST_SPECIMENS
		WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
		AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND group_test_code = :d_group_test_code
		AND NVL(cancelled_yn, 'N') <> 'Y';

		if (i_count == 0)
		{
			l_should_print_yn = 'Y';
			break;
		}


	}
	close_req_curs();

}
/*------------------------------------------------------------*/
/*
check_should_print_yn1()
{
	
   l_should_print_yn.arr[0]		= '\0';
   l_should_print_yn.len		= 0;

   strcpy(l_should_print_yn.arr, "Y");
   l_should_print_yn.len = strlen(l_should_print_yn.arr);

   EXEC SQL DECLARE detail_curs CURSOR FOR
			SELECT test_code, NVL(group_test_yn, 'N') 
			FROM RL_REQUEST_DETAIL 
			WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND NVL(result_status, 'O') IN ('R')
			ORDER BY test_code;

   	EXEC SQL OPEN detail_curs;
 
	while(fetch_detail())
	{

		nd_no.arr[0]		= '\0';
		nd_no.len		= 0;
		if (nd_group_test_yn.arr[0]	== 'Y')
		{

			EXEC SQL DECLARE group_curs CURSOR FOR
					 SELECT A.test_code
					 FROM RL_TEST_CODE A, RL_GROUP_TEST_DETAIL B
					 WHERE A.test_code = B.test_code
					 AND B.group_test_code = :nd_group_test_code;
			EXEC SQL OPEN group_curs;

			while(fetch_group_curs())
			{

				EXEC SQL SELECT TO_CHAR(interval_test_specimen_no)
					 INTO :nd_no
					 FROM RL_INTERVAL_TEST_SPECIMENS
					 WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
					 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
					 AND group_test_code = :nd_group_test_code
					 AND test_code = :nd_test_code
					 AND NVL(cancelled_yn, 'N') <> 'Y';
				if (strlen(nd_no.arr) > 0) 
				{
					break;
				}
			}
			EXEC SQL CLOSE group_curs;					 
		}
		else
		{

			EXEC SQL SELECT TO_CHAR(interval_test_specimen_no)
				 INTO :nd_no
				 FROM RL_INTERVAL_TEST_SPECIMENS
				 WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
				 AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				 AND test_code = :nd_group_test_code
				 AND NVL(cancelled_yn, 'N') <> 'Y';
		}

		nd_no.arr[nd_no.len]			= '\0';

		if (strlen(nd_no.arr) > 0) 
		{

			interval_count = 0;
			EXEC SQL SELECT COUNT(*)
					 INTO :interval_count
					FROM RL_INTERVAL_TEST_SPECIMENS
					WHERE interval_test_specimen_no = TO_NUMBER(:nd_no)
					AND OPERATING_FACILITY_ID = :nd_operating_facility_id
					AND group_test_code = :nd_group_test_code
					AND NVL(cancelled_yn, 'N') <> 'Y'
					AND NVL(status, 'O')  NOT IN ('R', 'P');
				
			if (interval_count > 0)
			{
			   strcpy(l_should_print_yn.arr, "N");
			   l_should_print_yn.len = strlen(l_should_print_yn.arr);

			}
				
		}
		
		
	}
	close_detail_curs();

	if(OERROR) 
      ins_message(ERR_MESG,"Failed in check_should_print_yn");

}
*/
/*------------------------------------------------------------*/
/*
fetch_detail
{
	nd_group_test_code.arr[0]		= '\0';
	nd_group_test_code.len			= 0;
	nd_group_test_yn.arr[0]			= '\0';
	nd_group_test_yn.len			= 0;

	EXEC SQL FETCH detail_curs
					 INTO :nd_group_test_code, :nd_group_test_yn;

	nd_group_test_code.arr[nd_group_test_code.len]	= '\0';
	nd_group_test_yn.arr[nd_group_test_yn.len]		= '\0';

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_group_curs()");		

    return (LAST_ROW?0:1);

}
*/
/*------------------------------------------------------------*/
/*
close_detail_curs()
{
	EXEC SQL CLOSE detail_curs;
}
*/
/*------------------------------------------------------------*/
/*
fetch_group_curs()
{
	nd_test_code.arr[0]		= '\0';
	nd_test_code.len			= 0;

	EXEC SQL FETCH group_curs 
					 INTO :nd_test_code;

	nd_test_code.arr[nd_test_code.len]	= '\0';

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_group_curs()");		

    return (LAST_ROW?0:1);

}
*/
/***********************************************/
/*------------------------------------------------------------*/
declare_spec_curs()
{
		EXEC SQL DECLARE spec_curs CURSOR FOR 
				SELECT TO_CHAR(A.specimen_no), A.group_test_code, A.test_code
				FROM RL_INTERVAL_TEST_SPECIMENS A 
				WHERE A.interval_test_specimen_no= TO_NUMBER(:d_no) 
				AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				AND NVL(A.cancelled_yn, 'N') <> 'Y'
		   	    ORDER BY A.specimen_no;

		EXEC SQL OPEN spec_curs;

		
}

/*------------------------------------------------------------*/
fetch_spec_curs()
{
	 d_specimen_no.arr[0]		= '\0';
	 d_specimen_no.len			= 0;
	 d_group_test_code.arr[0]	= '\0';
	 d_group_test_code.len		= 0;
	 di_test_code.arr[0]			= '\0';
	 di_test_code.len			= 0;

	EXEC SQL FETCH spec_curs 
				 INTO :d_specimen_no, :d_group_test_code, :di_test_code;


		if (OERROR)
			ins_message(ORA_MESG,"FETCH failed on cursor specimen_curs");

	
		d_specimen_no.arr[d_specimen_no.len]			= '\0';
		d_group_test_code.arr[d_group_test_code.len]	= '\0';
		di_test_code.arr[di_test_code.len]				= '\0';

	return (LAST_ROW?0:1);
	 
}
/*------------------------------------------------------------*/
fetch_int_curs()
{
	 d_no.arr[0]		= '\0';
	 d_no.len			= 0;
	 
	EXEC SQL FETCH int_curs 
				 INTO :d_no;


		if (OERROR)
			ins_message(ORA_MESG,"FETCH failed on cursor int_curs");

	
		d_no.arr[d_no.len]			= '\0';

	return (LAST_ROW?0:1);
	 
}
/*------------------------------------------------------------*/
fetch_req_curs()
{
	 d_group_test_code.arr[0]		= '\0';
	 d_group_test_code.len			= 0;
	 
	EXEC SQL FETCH req_curs 
				 INTO :d_group_test_code;


		if (OERROR)
			ins_message(ORA_MESG,"FETCH failed on cursor req_curs");

	
		d_group_test_code.arr[d_group_test_code.len]			= '\0';

	return (LAST_ROW?0:1);
	 
}
/*------------------------------------------------------------*/
close_int_curs()
{
	EXEC SQL CLOSE int_curs;
}
/*------------------------------------------------------------*/

close_spec_curs()
{
	EXEC SQL CLOSE spec_curs;
}
/*------------------------------------------------------------*/
close_req_curs()
{
	EXEC SQL CLOSE req_curs;
}
/*------------------------------------------------------------*/

declare_int_no_curs()
{
	EXEC SQL DECLARE int_no_curs CURSOR FOR
       SELECT TO_CHAR(interval_test_specimen_no)
       FROM RL_INTERVAL_TEST_SPECIMENS
       WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
	   AND OPERATING_FACILITY_ID = :nd_operating_facility_id
	   AND NVL(cancelled_yn, 'N') <> 'Y';

	EXEC SQL OPEN int_no_curs;
}
/*------------------------------------------------------------*/
fetch_int_no_curs()
{
	 
	d_no.arr[0]		= '\0';
	d_no.len		= 0;

	EXEC SQL FETCH int_no_curs
				 INTO :d_no;


	if (OERROR)
		ins_message(ORA_MESG,"FETCH failed on cursor req_curs");

	d_no.arr[d_no.len]		= '\0';

	return (LAST_ROW?0:1);
	 
}
/*------------------------------------------------------------*/
close_int_no_curs()
{
	EXEC SQL CLOSE int_no_curs;
}
/*------------------------------------------------------------*/

/*------------------------------------------------------------*/

declare_spec_no_curs()
{
    get_catalog_from_test();

	EXEC SQL DECLARE spec_no_curs CURSOR FOR
	   SELECT B.order_catalog_code
       FROM RL_INTERVAL_TEST_SPECIMENS A, OR_ORDER_LINE B
       WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id
	   AND A.interval_test_specimen_no = TO_NUMBER(:d_no)
       AND B.order_type_code = :d_order_type_code
       AND B.order_id = :d_order_id

//// 19.06.2003       AND A.group_test_code = B.item_code  

       AND B.order_catalog_code = :v_ord_catalog_code
       AND (A.test_code = :v_group_test_code
		OR A.group_test_code = :v_group_test_code)
	   AND NVL(A.cancelled_yn, 'N') <> 'Y';

//////// 19.06.2003       SELECT B.item_code
	
}
/*------------------------------------------------------------*/
open_spec_no_curs()
{
	EXEC SQL OPEN spec_no_curs;
}
/*------------------------------------------------------------*/
fetch_spec_no_curs()
{
	 
	EXEC SQL FETCH spec_no_curs
				 INTO :v_group_test;


	if (OERROR)
		ins_message(ORA_MESG,"FETCH failed on cursor spec_no_curs");

	v_group_test.arr[v_group_test.len]		= '\0';

	return (LAST_ROW?0:1);
	 
}
/*------------------------------------------------------------*/
close_spec_no_curs()
{
	EXEC SQL CLOSE spec_no_curs;
}
/*------------------------------------------------------------*/
get_print_status()
{

	rl_section_ctl_print_status.arr[0]		= '\0';
	rl_section_ctl_print_status.len			= 0;
	
	EXEC SQL SELECT NVL(report_only_on_comp_yn, 'N') 
			 INTO :rl_section_ctl_print_status
			 FROM RL_SECTION_CTL
			 WHERE section_code = :d_section_code
			 AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

	rl_section_ctl_print_status.arr[rl_section_ctl_print_status.len] = '\0';

}
/*------------------------------------------------------------*/
insert_reflex_text()
{

	v_test_code.arr[0]			= '\0';
	v_test_code.len				= 0;
	v_gp_test_code.arr[0]	= '\0';
	v_gp_test_code.len		= 0;
	v_res_comment1.arr[0]		= '\0';
    v_res_comment1.len			= 0;
	v_res_comment2.arr[0]		= '\0';
    v_res_comment2.len			= 0;
	v_res_comment3.arr[0]		= '\0';
    v_res_comment3.len			= 0;
	v_res_comment4.arr[0]		= '\0';
    v_res_comment4.len			= 0;

	strcpy(v_test_code.arr, t_test_code.arr);
    v_test_code.len = strlen(v_test_code.arr);

	strcpy(v_gp_test_code.arr, t_group_test_code.arr);
	v_gp_test_code.len = strlen(v_gp_test_code.arr);

	strcpy(v_res_comment1.arr, t_rcc_1.arr);
	v_res_comment1.len = strlen(v_res_comment1.arr);			

	strcpy(v_res_comment2.arr, t_rcc_2.arr);
	v_res_comment2.len = strlen(v_res_comment2.arr);			

	strcpy(v_res_comment3.arr, t_rcc_3.arr);
	v_res_comment3.len = strlen(v_res_comment3.arr);			

	strcpy(v_res_comment4.arr, t_rcc_4.arr);
	v_res_comment4.len = strlen(v_res_comment4.arr);			



	declare_reflex_text_cur();
	while(fetch_reflex_text_cur())
	{

		EXEC SQL SELECT result_text, NVL(cancer_register_yn, 'Y'),NVL(diagnosis_yn,'N')
		INTO :nd_result_text, :nd_cancer_register_yn, :nd_diagnosis_yn
		FROM RL_RESULT_TEXT_CODE
		WHERE result_text_code = :nd_reflex_text_code
		AND section_code = :d_section_code;
		
		if (NODATAFOUND);


		EXEC SQL SELECT COUNT(*)
		INTO :l_count
		FROM RL_RESULT_TEXT
		WHERE patient_id = :rl_req_patient_id
		AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
		AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND group_test_code = :v_gp_test_code
		AND test_code = :v_test_code
		AND result_text_code = :nd_reflex_text_code;

		if (l_count == 0)
		{

			EXEC SQL SELECT NVL(MAX(serial_no), 0)
			INTO :l_count
			FROM RL_RESULT_TEXT
			WHERE patient_id = :rl_req_patient_id
			AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND group_test_code = :v_gp_test_code
			AND test_code = :v_test_code;

			EXEC SQL INSERT INTO RL_RESULT_TEXT
					(operating_facility_id,specimen_no, patient_id, group_test_code, 
					test_code,result_text_code, result_text, hide_text_yn, 
					user_marker_code, cancer_register_yn, serial_no, 
					added_by_id, added_date, modified_by_id, modified_date,
					ADDED_AT_WS_NO,
	                ADDED_FACILITY_ID,
	                MODIFIED_AT_WS_NO,
	                MODIFIED_FACILITY_ID,
					diagnosis_yn)
			VALUES
					(:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no), :rl_req_patient_id, :v_gp_test_code,
					:v_test_code, :nd_reflex_text_code, :nd_result_text, NULL,
					NULL, :nd_cancer_register_yn, :l_count + 1,
					USER, SYSDATE, USER, SYSDATE,
					sys_context('USERENV','IP_ADDRESS'),
			        :nd_operating_facility_id,
			        sys_context('USERENV','IP_ADDRESS'),
			        :nd_operating_facility_id,
					:nd_diagnosis_yn);

			
		}

	}

	close_reflex_text_cur();

}
/*------------------------------------------------------------*/
declare_reflex_text_cur()
{
   EXEC SQL DECLARE reflex_text_cur CURSOR FOR
		SELECT reflex_text_code
		FROM RL_ALLOWABLE_COMMENT_CODE
		WHERE test_code = :v_test_code
		AND allowable_comment_code IN (:v_res_comment1, :v_res_comment2,
													:v_res_comment3, :v_res_comment4)
		AND reflex_text_code IS NOT NULL;

      EXEC SQL OPEN reflex_text_cur;


}
/*------------------------------------------------------------*/
fetch_reflex_text_cur()
{
	nd_reflex_text_code.arr[0]	= '\0';
	nd_reflex_text_code.len		= 0;

	EXEC SQL FETCH reflex_text_cur
					 INTO :nd_reflex_text_code;

	nd_reflex_text_code.arr[nd_reflex_text_code.len]	= '\0';

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_reflex_text_cur()");		

    return (LAST_ROW?0:1);

}
/*------------------------------------------------------------*/
close_reflex_text_cur()
{

    EXEC SQL CLOSE reflex_text_cur;
}
/*------------------------------------------------------------*/
update_result_workload_daily()
{
	l_1 = 0; 
	l_2 = 0; 
	l_3 = 0;
	l_4 = 0; 
	l_5 = 0; 
	l_6 = 0; 
	l_7 = 0; 
	l_8 = 0; 
	l_9 = 0; 
	l_10 = 0;
	l_11 = 0; 
	l_12 = 0; 
	l_13 = 0; 
	l_14 = 0; 
	l_15 = 0; 
	l_16 = 0; 
	l_17 = 0; 
	l_18 = 0; 
	l_19 = 0; 
	l_20 = 0; 
	l_21 = 0; 
	l_22 = 0; 
	l_23 = 0; 
	l_24 = 0; 


	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('00:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('01:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_1 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';


	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('01:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('02:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_2 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('02:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('03:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_3 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('03:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('04:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_4 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('04:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('05:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_5 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('05:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('06:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_6 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('06:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('07:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_7 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('07:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('08:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_8 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('08:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('09:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_9 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('09:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('10:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_10 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('10:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('11:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_11 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('11:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('12:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_12 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('12:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('13:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_13 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('13:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('14:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_14 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('14:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('15:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_15 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('15:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('16:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_16 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('16:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('17:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_17 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}

	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('17:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('18:00', 'HH24:MI') );


		if (NODATAFOUND);
		else
		{
			l_18 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';


	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('18:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('19:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_19 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('19:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('20:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_20 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('20:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('21:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_21 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('21:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('22:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_22 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('22:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					< TO_DATE('23:00', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_23 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}
	if (w_load_char.arr[0]	== 'N')
	{

		EXEC SQL SELECT 'Y' 
			 INTO :w_load_char
			 FROM DUAL
			 WHERE ( TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					>= TO_DATE('23:00', 'HH24:MI') 
				AND TO_DATE(TO_CHAR(SYSDATE, 'HH24:MI'), 'HH24:MI') 
					<= TO_DATE('23:59', 'HH24:MI') );

		if (NODATAFOUND);
		else
		{
			l_24 = 1;
		}

	  w_load_char.arr[w_load_char.len]		= '\0';

	}



    EXEC SQL SELECT COUNT(*)
    INTO :l_count
    FROM RL_RESULT_WORKLOAD_DAILY
    WHERE result_date = TRUNC(SYSDATE)
    AND test_code = :rl_url_test_code
	AND OPERATING_FACILITY_ID = :nd_operating_facility_id;
	
    if (l_count == 0) 
	{
	  	
	  	  EXEC SQL INSERT INTO RL_RESULT_WORKLOAD_DAILY
	  	  		(operating_facility_id,test_code, result_date, h1, h2, h3, h4, h5, h6, h7, h8, h9, h10, 
	  	  		h11, h12, h13, h14, h15, h16, h17, h18, h19, h20, h21, h22, h23, h24,
				ah1, ah2, ah3, ah4, ah5, ah6, ah7, ah8, ah9, ah10, 
	  	  		ah11, ah12, ah13, ah14, ah15, ah16, ah17, ah18, ah19, ah20, 
				ah21, ah22, ah23, ah24,
				ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID)
	  	  VALUES
	  	  		(:nd_operating_facility_id,:rl_url_test_code, TRUNC(SYSDATE), :l_1, :l_2, :l_3, :l_4, :l_5, :l_6, :l_7, 
	  	  					:l_8, :l_9, :l_10, :l_11, :l_12, :l_13, :l_14, :l_15, :l_16, :l_17, 
	  	  					:l_18, :l_19, :l_20, :l_21, :l_22, :l_23, :l_24,
							0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
							0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
							0, 0, 0, 0,
							sys_context('USERENV','IP_ADDRESS'),
			                :nd_operating_facility_id,
			                sys_context('USERENV','IP_ADDRESS'),
			                :nd_operating_facility_id);

	}
	else
	{
	  	EXEC SQL UPDATE RL_RESULT_WORKLOAD_DAILY
		  SET h1  = h1  + :l_1,
		  	  h2  = h2  + :l_2,
	  	  	  h3  = h3  + :l_3,
	  	  	  h4  = h4  + :l_4,
	  	  	  h5  = h5  + :l_5,
	  	  	  h6  = h6  + :l_6,
	  	  	  h7  = h7  + :l_7,
	  	  	  h8  = h8  + :l_8,
	  	  	  h9  = h9  + :l_9,
	  	  	  h10 = h10 + :l_10,
	  	  	  h11 = h11 + :l_11,
	  	  	  h12 = h12 + :l_12,
	  	  	  h13 = h13 + :l_13,
	  	  	  h14 = h14 + :l_14,
	  	  	  h15 = h15 + :l_15,
	  	  	  h16 = h16 + :l_16,
	  	  	  h17 = h17 + :l_17,
	  	  	  h18 = h18 + :l_18,
	  	  	  h19 = h19 + :l_19,
	  	  	  h20 = h20 + :l_20,
	  	  	  h21 = h21 + :l_21,
	  	  	  h22 = h22 + :l_22,
	  	  	  h23 = h23 + :l_23,
	  	  	  h24 = h24 + :l_24
       WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	   AND result_date = TRUNC(SYSDATE)
       AND test_code = :rl_url_test_code;

	}

}
/*------------------------------------------------------------*/
insert_reflex_test()
{

	declare_order_reflex_test();
	while(fetch_order_reflex_test())
	{
		EXEC SQL SELECT COUNT(*)
			INTO :l_count
			FROM RL_REQUEST_DETAIL
			WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND test_code = :nd_reflex_test_code;

		if (l_count == 0)
		{
		
			strcpy(v_billed_yn.arr, "N");
			v_billed_yn.len = strlen(v_billed_yn.arr);

			if (nd_bill_yn.arr[0] == 'Y')
			{
/******** BILLING PROCEDURE TO BE ADDED *******************/
			}

			nd_group_test_yn.arr[0]		= '\0';
			nd_group_test_yn.len		= 0;
					
			EXEC SQL SELECT NVL(group_test_yn, 'N')
			INTO :nd_group_test_yn
			FROM RL_TEST_CODE
			WHERE test_code = :nd_reflex_test_code;
		
			nd_group_test_yn.arr[nd_group_test_yn.len]		= '\0';

			l_line_no++;

			EXEC SQL INSERT INTO RL_REQUEST_DETAIL
				(operating_facility_id,specimen_no, patient_id, test_code, group_test_yn, 
				num_tests, num_essential, result_status, print_yn,
				numeric_result, numeric_prefix, line_no, order_line_no, 
				billed_yn, base_rate, addl_blng_factor, discount_percent,
				effective_charge, gross_charge, discount_value, net_charge,
				blng_serv_code, section_code, cancelled_yn, cancelled_reason,
				referred_test_yn, referred_lab_code, date_sent, date_recd, 
				added_by_id, modified_by_id, added_date, modified_date,
				released_by_id, released_date, result_printed_date,
				reflex_type,
				ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID)
	  		VALUES
				(:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no), 
				:rl_req_patient_id, :nd_reflex_test_code,
				 :nd_group_test_yn, 
				NULL,NULL, 'O', 'N',
				NULL, NULL, :l_line_no, NULL, 
				:v_billed_yn, NULL, NULL, NULL,
				NULL, NULL, NULL, NULL,
				NULL, :d_section_code, 'N', NULL,
				NULL, NULL, NULL, NULL, 
				USER, USER, SYSDATE, SYSDATE,
				NULL, NULL, NULL, 'RO',
				sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id,
			    sys_context('USERENV','IP_ADDRESS'),
			    :nd_operating_facility_id);


		 insert_bt_request();

		 insert_rl_diff_result_hdr_gtt();

		 insert_rl_retic_result_hdr_gtt();

		 insert_analyzer_test();

		 insert_analyzer_test_balert();

		 strcpy(p_test_code.arr, nd_reflex_test_code.arr);
		 p_test_code.len = strlen(p_test_code.arr);

		 get_reflex_test_details();

		 insert_test_result();

		 get_seq_patient_marker_info();

		 if (nd_patient_marker_yn.arr[0] == 'Y')
		 {
			insert_mp_patient_markers();
		 }

		}

	}

	close_order_reflex_test();

}
/*------------------------------------------------------------*/
declare_order_reflex_test()
{
   EXEC SQL DECLARE order_reflex_test CURSOR FOR
   			SELECT reflex_test_code, bill_yn
			FROM RL_ORDER_REFLEX_TEST
			WHERE test_code = :p_test_code;

      EXEC SQL OPEN order_reflex_test;

}
/*------------------------------------------------------------*/
fetch_order_reflex_test()
{
	nd_reflex_test_code.arr[0]		= '\0';
	nd_reflex_test_code.len			= 0;
	nd_bill_yn.arr[0]				= '\0';
	nd_bill_yn.len					= 0;

	EXEC SQL FETCH order_reflex_test
					 INTO :nd_reflex_test_code, :nd_bill_yn;

	nd_reflex_test_code.arr[nd_reflex_test_code.len]		= '\0';
	nd_bill_yn.arr[nd_bill_yn.len]							= '\0';


	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_reflex_text_cur()");		

    return (LAST_ROW?0:1);

}
/*------------------------------------------------------------*/
close_order_reflex_test()
{
	EXEC SQL CLOSE order_reflex_test;
}
/*------------------------------------------------------------*/
insert_bt_request()
{
	if (strcmp(nd_xmatch_test_code.arr, nd_reflex_test_code.arr) == 0)
	{
/***************************** 19.06.2003
	   	EXEC SQL INSERT INTO RL_SPEC_ALLOC_TRN
               (SPECIMEN_NO,PATIENT_ID,EPISODE_TYPE,EPISODE_NO,TFR_VISIT_NO,
				SPECIMEN_DATE_TIME,SOURCE_TYPE,SOURCE_CODE,
                CONSULTANT_CODE,CANCELLED_YN,PROCESS_STARTED_YN,VERIFIED_YN,
				ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,MODIFIED_DATE)
          VALUES
               (TO_NUMBER(:rl_anl_result_spec_no),:rl_req_patient_id,:rl_req_episode_type,
                TO_NUMBER(:nd_episode_no), TO_NUMBER(:nd_tfr_visit_no), 
				TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),
				:rl_req_source_type,:rl_req_source_code, :nd_consultant_code, 
				'N','N', 'Y', USER,USER,SYSDATE,SYSDATE);
*****************************/
		;


	}
}
/*------------------------------------------------------------*/
insert_rl_diff_result_hdr_gtt()
{


	if (nd_group_test_yn.arr[0] == 'Y')
	{


           EXEC SQL SELECT 'T' 
		   INTO :diff_request
           FROM RL_DIFF_REF_HDR
           WHERE diff_test_code = :nd_reflex_test_code;
	
		   if (NODATAFOUND);
		   else
		   {
              EXEC SQL SELECT 'Y' 
			  INTO :diff_request
              FROM RL_DIFF_RESULT_HDR
              WHERE patient_id = :rl_req_patient_id
              AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

			  if (NODATAFOUND)
			  {

                      EXEC SQL INSERT INTO RL_DIFF_RESULT_HDR
					          (OPERATING_FACILITY_ID,PATIENT_ID,
					           SPECIMEN_NO,SPEC_REGD_DATE_TIME,ADDED_BY_ID,
                               ADDED_DATE,MODIFIED_BY_ID,
                               MODIFIED_DATE,CANCELLED_YN,
							   ADDED_AT_WS_NO,
	                           ADDED_FACILITY_ID,
	                           MODIFIED_AT_WS_NO,
	                           MODIFIED_FACILITY_ID)
                      VALUES(  :nd_operating_facility_id,:rl_req_patient_id,
                               TO_NUMBER(:rl_anl_result_spec_no),
                               TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),
                               USER,SYSDATE,USER,SYSDATE,'N',
							   sys_context('USERENV','IP_ADDRESS'),
			                   :nd_operating_facility_id,
			                   sys_context('USERENV','IP_ADDRESS'),
			                   :nd_operating_facility_id);
				
			  }

		   }


	}
}
/*------------------------------------------------------------*/
insert_rl_retic_result_hdr_gtt()
{

           EXEC SQL SELECT 'T' 
		   INTO :diff_request
           FROM RL_RETIC_REF_HDR
           WHERE retic_test_code = :nd_reflex_test_code;
	
		   if (NODATAFOUND);
		   else
		   {
              EXEC SQL SELECT 'Y' 
			  INTO :diff_request
              FROM RL_RETIC_RESULT_HDR
              WHERE patient_id = :rl_req_patient_id
              AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

			  if (NODATAFOUND)
			  {

                      EXEC SQL INSERT INTO RL_RETIC_RESULT_HDR
								(OPERATING_FACILITY_ID,PATIENT_ID,SPECIMEN_NO, 
								SPEC_REGD_DATE_TIME,CANCELLED_YN)
                      VALUES(:nd_operating_facility_id,:rl_req_patient_id, 
					        TO_NUMBER(:rl_anl_result_spec_no),
							TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),'N');
				
			  }

		   }


}
/*------------------------------------------------------------*/
insert_analyzer_test()
{
   
   l_instrument_code.arr[0]		= '\0';
   l_instrument_code.len		= 0;

   EXEC SQL SELECT instrument_code
   INTO :l_instrument_code
   FROM RL_ONLINE_INSTRUMENT
   WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
   AND procedure_name IN ('RLR_BACTEC9000_1', 'RLR_BACTEC9240_1');

   l_instrument_code.arr[l_instrument_code.len]		= '\0';

   if (nd_group_test_yn.arr[0] == 'Y')
   {

		declare_group_detail_cur();

		while(fetch_group_detail_cur())
		{

           EXEC SQL SELECT 'Y'
           INTO :diff_request
           FROM RL_ONLINE_INSTRUMENT_TEST
           WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		   AND instrument_code = :l_instrument_code
           AND test_code = :inst_test_code;

		   if (NODATAFOUND);
		   else
		   {
              EXEC SQL SELECT COUNT(*)
              INTO :l_count
              FROM RL_SPECIMEN_BARCODE
              WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
	          AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			  AND inst_code = :l_instrument_code
              AND test_code = :inst_test_code;

			  if (l_count == 0)
			  {
                  
				  EXEC SQL INSERT INTO RL_SPECIMEN_BARCODE
   		                (operating_facility_id,specimen_no, inst_code, test_code, section_code, added_date,
	      		         added_by_id, modified_date, modified_by_id,
						 ADDED_AT_WS_NO,
	                     ADDED_FACILITY_ID,
	                     MODIFIED_AT_WS_NO,
	                     MODIFIED_FACILITY_ID)
			      VALUES
					   (:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no), 
					    :l_instrument_code, :inst_test_code, :d_section_code, SYSDATE,
						USER, SYSDATE, USER,
						sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id,
			            sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id);
				
			  }
			  
		   }

		}
		close_group_detail_cur();
   }
   else
   {
           EXEC SQL SELECT 'Y'
           INTO :diff_request
           FROM RL_ONLINE_INSTRUMENT_TEST
           WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		   AND instrument_code = :l_instrument_code
           AND test_code = :nd_reflex_test_code;

		   if (NODATAFOUND);
		   else
		   {
              EXEC SQL SELECT COUNT(*)
              INTO :l_count
              FROM RL_SPECIMEN_BARCODE
              WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
	          AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			  AND inst_code = :l_instrument_code
              AND test_code = :nd_reflex_test_code;

			  if (l_count == 0)
			  {
                  
				  EXEC SQL INSERT INTO RL_SPECIMEN_BARCODE
   		                (operating_facility_id,specimen_no, inst_code, test_code, section_code, added_date,
	      		         added_by_id, modified_date, modified_by_id,
						 ADDED_AT_WS_NO,
	                     ADDED_FACILITY_ID,
	                     MODIFIED_AT_WS_NO,
	                     MODIFIED_FACILITY_ID)
			      VALUES
					   (:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no), :l_instrument_code, 
						:nd_reflex_test_code, :d_section_code, SYSDATE,
						USER, SYSDATE, USER,
						sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id,
			            sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id);
				
			  }
			  
		   }


   }
   

}
/*------------------------------------------------------------*/
declare_group_detail_cur()
{
   EXEC SQL DECLARE group_detail_cur CURSOR FOR
       SELECT test_code
       FROM RL_GROUP_TEST_DETAIL
       WHERE group_test_code = :nd_reflex_test_code;

      EXEC SQL OPEN group_detail_cur;

}
/*------------------------------------------------------------*/
fetch_group_detail_cur()
{

	inst_test_code.arr[inst_test_code.len]		= '\0';

	EXEC SQL FETCH group_detail_cur
					 INTO :inst_test_code;


	inst_test_code.arr[inst_test_code.len]		= '\0';

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_group_test_detail()");		

    return (LAST_ROW?0:1);

}
/*------------------------------------------------------------*/
close_group_detail_cur()
{
	EXEC SQL CLOSE group_detail_cur;
}
/*------------------------------------------------------------*/
insert_analyzer_test_balert()
{
   
   l_instrument_code.arr[0]		= '\0';
   l_instrument_code.len		= 0;

   EXEC SQL SELECT instrument_code
   INTO :l_instrument_code
   FROM RL_ONLINE_INSTRUMENT
   WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
   AND procedure_name IN ('RLR_BACTALERT_1');

   l_instrument_code.arr[l_instrument_code.len]		= '\0';


   if (nd_group_test_yn.arr[0] == 'Y')
   {

		declare_group_detail_cur();

		while(fetch_group_detail_cur())
		{

           EXEC SQL SELECT 'Y'
           INTO :diff_request
           FROM RL_ONLINE_INSTRUMENT_TEST
           WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		   AND instrument_code = :l_instrument_code
           AND test_code = :inst_test_code;

		   if (NODATAFOUND);
		   else
		   {
              EXEC SQL SELECT COUNT(*)
              INTO :l_count
              FROM RL_SPECIMEN_BARCODE
              WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
	          AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			  AND inst_code = :l_instrument_code
              AND test_code = :inst_test_code;

			  if (l_count == 0)
			  {
                  
				  EXEC SQL INSERT INTO RL_SPECIMEN_BARCODE
   		                (operating_facility_id,specimen_no, inst_code, 
						test_code, section_code, added_date,
	      		        added_by_id, modified_date, modified_by_id,
						ADDED_AT_WS_NO,
	                    ADDED_FACILITY_ID,
	                    MODIFIED_AT_WS_NO,
	                    MODIFIED_FACILITY_ID)
			      VALUES
					   (:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no), :l_instrument_code, 
						:inst_test_code, :d_section_code, SYSDATE,
						USER, SYSDATE, USER,
						sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id,
			            sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id);
				
			  }
			  
		   }

		}
		close_group_detail_cur();
   }
   else
   {
           EXEC SQL SELECT 'Y'
           INTO :diff_request
           FROM RL_ONLINE_INSTRUMENT_TEST
           WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		   AND instrument_code = :l_instrument_code
           AND test_code = :nd_reflex_test_code;

		   if (NODATAFOUND);
		   else
		   {
              EXEC SQL SELECT COUNT(*)
              INTO :l_count
              FROM RL_SPECIMEN_BARCODE
              WHERE specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
	          AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			  AND inst_code = :l_instrument_code
              AND test_code = :nd_reflex_test_code;

			  if (l_count == 0)
			  {
                  
				  EXEC SQL INSERT INTO RL_SPECIMEN_BARCODE
   		                (operating_facility_id,specimen_no, inst_code, test_code, section_code, added_date,
	      		         added_by_id, modified_date, modified_by_id,
						 ADDED_AT_WS_NO,
	                     ADDED_FACILITY_ID,
	                     MODIFIED_AT_WS_NO,
	                     MODIFIED_FACILITY_ID)
			      VALUES
					   (:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no), :l_instrument_code, 
						:nd_reflex_test_code, :d_section_code, SYSDATE,
						USER, SYSDATE, USER,
						sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id,
			            sys_context('USERENV','IP_ADDRESS'),
			            :nd_operating_facility_id);
				
			  }
			  
		   }


   }
   

}
/*------------------------------------------------------------*/
get_seq_patient_marker_info()
{

	nd_patient_marker_yn.arr[0]		= '\0';
	nd_patient_marker_yn.len		= 0;

	nd_seq_no = 0;

    EXEC SQL SELECT NVL(patient_marker_yn, 'N'), seq_no
    INTO :nd_patient_marker_yn, :nd_seq_no
    FROM RL_TEST_CODE
    WHERE test_code = :nd_reflex_test_code;


	nd_patient_marker_yn.arr[nd_patient_marker_yn.len]	= '\0';

}
/*------------------------------------------------------------*/
insert_mp_patient_markers()
{
    EXEC SQL SELECT COUNT(*) 
	INTO :l_count
	FROM RL_PATIENT_MARKERS
    WHERE PATIENT_ID = :rl_req_patient_id
	AND TEST_CODE = :nd_reflex_test_code;

    if (l_count == 0)
	{
       EXEC SQL INSERT INTO RL_PATIENT_MARKERS
				(PATIENT_ID,TEST_CODE,
                ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,
                MODIFIED_DATE,
				ADDED_AT_WS_NO,
	            ADDED_FACILITY_ID,
	            MODIFIED_AT_WS_NO,
	            MODIFIED_FACILITY_ID)
       VALUES( :rl_req_patient_id, :nd_reflex_test_code, USER,USER,SYSDATE,SYSDATE,
	           sys_context('USERENV','IP_ADDRESS'),
			   :nd_operating_facility_id,
			   sys_context('USERENV','IP_ADDRESS'),
			   :nd_operating_facility_id);

    }


}
/*------------------------------------------------------------*/
get_reflex_test_details()
{
   EXEC SQL SELECT NVL(GROUP_TEST_YN,'N'),NVL(PATIENT_MARKER_YN,'N'),SEQ_NO,NVL(REFERRED_TEST_YN,'N') 
   INTO :v_grp_tst_yn,:v_pat_mark_yn,:v_seq_no, :v_referred_test_yn
   FROM RL_TEST_CODE
   WHERE TEST_CODE = :p_test_code;

}
/*------------------------------------------------------------*/
get_infection_details()
{
	  l_count = 0;

	  EXEC SQL SELECT COUNT(*)
			  INTO :l_count
              FROM RL_RESULT_ORGANISM_DTL
			  WHERE patient_id = :rl_req_patient_id
			  AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			  AND OPERATING_FACILITY_ID = :nd_operating_facility_id;


	 if (l_count > 0)
		rl_infection_statistics();

}
/*------------------------------------------------------------*/
declare_infect_cnt_cur()
{
   EXEC SQL DECLARE infect_control_cur CURSOR FOR
       SELECT A.organism_count, A.organism_code, A.antibiotic_code, 
	   A.sensitivity_ind, A.infect_duration
       FROM RL_INFECTION_CONTROL A
       WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	   AND A.source_code = :rl_req_source_code
       AND A.source_type = :rl_req_source_type;

      EXEC SQL OPEN infect_control_cur;

}
/*------------------------------------------------------------*/
fetch_infect_cnt_cur()
{

	l_organism_code.arr[0]		= '\0';
	l_organism_code.len			= 0;
	l_antibiotic_code.arr[0]	= '\0';
	l_antibiotic_code.len		= 0;
	l_sensitivity_indr.arr[0]	= '\0';
	l_sensitivity_indr.len		= 0;



	EXEC SQL FETCH infect_control_cur
					 INTO :s_organism_count, :l_organism_code, 
						  :l_antibiotic_code, :l_sensitivity_indr,
						  :l_infect_duration;

	l_organism_code.arr[l_organism_code.len]		= '\0';
	l_antibiotic_code.arr[l_antibiotic_code.len]	= '\0';
	l_sensitivity_indr.arr[l_sensitivity_indr.len]	= '\0';
	

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_infect_cnt_cur()");		

    return (LAST_ROW?0:1);

}
/*------------------------------------------------------------*/
close_infect_cnt_cur()
{
	EXEC SQL CLOSE infect_control_cur;
}

/*------------------------------------------------------------*/
rl_infection_statistics()
{
		 
		 v_infection_print_yn = 'N';

		 v_date.arr[0]		= '\0';
		 v_date.len			= 0;

		 EXEC SQL SELECT TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS')
				  INTO :v_date
				  FROM DUAL;

		 v_date.arr[v_date.len]		= '\0';

		 EXEC SQL DELETE FROM RL_INFECTION_STAT
		 WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND source_code = :rl_req_source_code
		 AND source_type = :rl_req_source_type
		 AND patient_id = :rl_req_patient_id
		 AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no);

		 declare_infect_cnt_cur();
		 while(fetch_infect_cnt_cur())
		 {


		     EXEC SQL DELETE FROM RL_INFECTION_STAT
		   	 WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
			 AND source_code = :rl_req_source_code
     		 AND source_type = :rl_req_source_type
 	   		 AND organism_code = :l_organism_code
 	   		 AND antibiotic_code = :l_antibiotic_code
 	   		 AND sensitivity_ind = :l_sensitivity_indr
     		 AND organism_report_date < (TRUNC(TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI')) + 1)  - :l_infect_duration;


			 get_details_include();

			 strcpy(l_prev_organism_code, l_organism_code.arr);
			 strcpy(l_prev_antibiotic_code, l_antibiotic_code.arr);
			 strcpy(l_prev_sensitivity_ind, l_sensitivity_indr.arr);

			 declare_infect_stat_cur();
			 while(fetch_infect_stat_cur())
			 {

				if ( (strcmp(l_prev_organism_code, l_organism_code.arr) == 0) &&
					 (strcmp(l_prev_antibiotic_code, l_antibiotic_code.arr) == 0) &&	
					 (strcmp(l_prev_sensitivity_ind, l_sensitivity_indr.arr) == 0) )

				{	
						EXEC SQL SELECT COUNT(*)
								 INTO :l_count
								 FROM RL_INFECTION_STAT
								 WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
								 AND patient_id = :rl_req_patient_id
								 AND organism_report_date > ( TRUNC(TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI')) - :l_infect_duration)
								 AND organism_code = :l_organism_code
		      					 AND antibiotic_code = :l_antibiotic_code
		      					 AND sensitivity_ind = :l_sensitivity_indr;


						if (l_count > 0)
							l_include_yn = 'N';
						else
							l_include_yn = 'Y';

				}

			    strcpy(l_organism_code.arr, l_prev_organism_code);
			    strcpy(l_antibiotic_code.arr, l_prev_antibiotic_code);
			    strcpy(l_sensitivity_indr.arr, l_prev_sensitivity_ind);

			 	EXEC SQL INSERT INTO RL_INFECTION_STAT
								(operating_facility_id,source_type, source_code, organism_code, antibiotic_code, 
								sensitivity_ind, organism_report_count, organism_report_date,
							   	include_report_yn, specimen_no, patient_id, group_test_code, test_code,
							   	added_date, added_by_id,
								ADDED_AT_WS_NO,
                                ADDED_FACILITY_ID)
			 				VALUES
								(:nd_operating_facility_id,:rl_req_source_type, :rl_req_source_code, :l_organism_code, :l_antibiotic_code,
								:l_sensitivity_indr, 1, TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'), :l_include_yn,
								TO_NUMBER(:rl_anl_result_spec_no), :rl_req_patient_id, :stat_group_test_code, :stat_test_code,
								SYSDATE, USER,
								sys_context('USERENV','IP_ADDRESS'),
			                    :nd_operating_facility_id);


			 }

			 close_infect_stat_cur();

			 update_total_count();
	
			 if (u_organism_count > s_organism_count)
			 {
				 EXEC SQL SELECT rl_infection_ctl_seq.nextval
						INTO :l_sq_no
						FROM DUAL;


				 EXEC SQL INSERT INTO RL_INFECTION_LIST_HDR
						 	(operating_facility_id,sequence_no, source_type, source_code,
						 	organism_code, antibiotic_code, sensitivity_ind, 
							added_by_id, added_date,
							ADDED_AT_WS_NO,
	                        ADDED_FACILITY_ID)
						 VALUES
						   (:nd_operating_facility_id,:l_sq_no, :rl_req_source_type, :rl_req_source_code, 
						 	:l_organism_code, :l_antibiotic_code, :l_sensitivity_indr,
						 	USER, TO_DATE(:v_date, 'DD/MM/YYYY HH24:MI:SS'),
							sys_context('USERENV','IP_ADDRESS'),
			                :nd_operating_facility_id);

				 declare_list_cur();
				 while(fetch_list_cur())
				 {

					 EXEC SQL INSERT INTO RL_INFECTION_LIST_DTL
							   		(operating_facility_id,sequence_no, patient_id, specimen_no, organism_report_date)
							   VALUES
							   		(:nd_operating_facility_id,:l_sq_no, :list_patient_id, :list_specimen_no, TO_DATE(:list_org_report_date, 'DD/MM/YYYY HH24:MI'));

					 EXEC SQL DELETE FROM RL_INFECTION_STAT
						  		WHERE rowid = :list_rowid;
					

				 }
				 close_list_cur();

				 get_details_include();
				 update_total_count();

				 v_infection_print_yn = 'Y';
			 }

		 }
		 close_infect_cnt_cur();

}
/*------------------------------------------------------------*/
get_details_include()
{

	g_report_date.arr[0]		= '\0';
	g_report_date.len			= 0;
	g_added_date.arr[0]			= '\0';
	g_added_date.len			= 0;

	EXEC SQL SELECT TO_CHAR(NVL(MIN(organism_report_date), TRUNC(TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'))), 'DD/MM/YYYY HH24:MI'),
 	   				TO_CHAR(NVL(MIN(added_date), TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI')), 'DD/MM/YYYY HH24:MI:SS')
 	   			INTO :g_report_date, :g_added_date
 	   			FROM RL_INFECTION_STAT
	   			WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
				AND source_code = :rl_req_source_code
		 	   	AND source_type = :rl_req_source_type
 	   			AND organism_code = :l_organism_code
 	   			AND antibiotic_code = :l_antibiotic_code
 	   			AND sensitivity_ind = :l_sensitivity_indr
 				AND patient_id = :rl_req_patient_id;


	g_report_date.arr[g_report_date.len]		= '\0';
	g_added_date.arr[g_added_date.len]			= '\0';

	EXEC SQL    UPDATE RL_INFECTION_STAT
			    SET include_report_yn = 'Y'
		 	    WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
				AND patient_id = :rl_req_patient_id
		 	    AND organism_report_date = TO_DATE(:g_report_date, 'DD/MM/YYYY HH24:MI')
	   			AND source_code = :rl_req_source_code
		 	   	AND source_type = :rl_req_source_type
 	   			AND organism_code = :l_organism_code
 	   			AND antibiotic_code = :l_antibiotic_code
 	   			AND sensitivity_ind = :l_sensitivity_indr
     			AND added_date = TO_DATE(:g_added_date, 'DD/MM/YYYY HH24:MI:SS');
    	


}
/*------------------------------------------------------------*/
update_total_count()
{
	 u_report_date.arr[0]		= '\0';
	 u_report_date.len			= 0;

     EXEC SQL   SELECT COUNT(1), 
				TO_CHAR(NVL(MIN(organism_report_date), TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI')), 'DD/MM/YYYY HH24:MI')
		 		INTO :u_organism_count, :u_report_date
 				FROM RL_INFECTION_STAT
	   			WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
				AND source_code = :rl_req_source_code
		 	   	AND source_type = :rl_req_source_type
 	   			AND organism_code = :l_organism_code
 	   			AND antibiotic_code = :l_antibiotic_code
 	   			AND sensitivity_ind = :l_sensitivity_indr
	     		AND NVL(include_report_yn, 'N') = 'Y';

     u_report_date.arr[u_report_date.len]		= '\0';
	 			

		  	EXEC SQL UPDATE RL_INFECTION_CONTROL
		  		SET total_report_count = :u_organism_count,
		  				organism_start_date = TO_DATE(:u_report_date, 'DD/MM/YYYY HH24:MI')
	   			WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
				AND source_code = :rl_req_source_code
		 	   	AND source_type = :rl_req_source_type
 	   			AND organism_code = :l_organism_code
 	   			AND antibiotic_code = :l_antibiotic_code
 	   			AND sensitivity_ind = :l_sensitivity_indr;

}
/*------------------------------------------------------------*/
declare_infect_stat_cur()
{
   
	   EXEC SQL DECLARE infect_stat_cur CURSOR FOR
			 SELECT A.group_test_code, A.test_code
			 FROM RL_RESULT_ORGANISM_DTL A, RL_REQUEST_DETAIL B
			 WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id
             AND B.OPERATING_FACILITY_ID = :nd_operating_facility_id 
			 AND A.patient_id = :rl_req_patient_id
			 AND A.specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			 AND A.organism_code = :l_organism_code
			 AND A.antibiotic_code = :l_antibiotic_code
			 AND A.sensitivity_ind = :l_sensitivity_indr
			 AND A.patient_id = B.patient_id
			 AND A.specimen_no = B.specimen_no
			 AND A.group_test_code = B.test_code
			 AND B.patient_id = :rl_req_patient_id
			 AND B.specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			 AND NVL(B.result_status, 'O') IN ('R', 'P');

		
	   EXEC SQL OPEN infect_stat_cur;

}
/*------------------------------------------------------------*/
fetch_infect_stat_cur()
{

	stat_group_test_code.arr[0]		= '\0';
	stat_group_test_code.len		= 0;
	stat_test_code.arr[0]			= '\0';
	stat_test_code.len				= 0;



	EXEC SQL FETCH infect_stat_cur
					 INTO :stat_group_test_code, :stat_test_code;

	stat_group_test_code.arr[stat_group_test_code.len]		= '\0';
	stat_test_code.arr[stat_test_code.len]					= '\0';
	

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_infect_stat_cur()");		

    return (LAST_ROW?0:1);

}
/*------------------------------------------------------------*/
close_infect_stat_cur()
{
	EXEC SQL CLOSE infect_stat_cur;
}

/*------------------------------------------------------------*/
declare_list_cur()
{
   
	   EXEC SQL DECLARE infect_list_cur CURSOR FOR
	  	 SELECT patient_id, specimen_no, TO_CHAR(organism_report_date, 'DD/MM/YYYY HH24:MI'), rowid
	  	 FROM RL_INFECTION_STAT
	     WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND source_code = :rl_req_source_code
	     AND source_type = :rl_req_source_type
 	   	 AND organism_code = :l_organism_code
 	   	 AND antibiotic_code = :l_antibiotic_code
 	   	 AND sensitivity_ind = :l_sensitivity_indr
 	   	 AND NVL(include_report_yn, 'N') = 'Y' ;

		
	   EXEC SQL OPEN infect_list_cur;

}
/*------------------------------------------------------------*/
fetch_list_cur()
{

	list_patient_id.arr[0]		= '\0';
	list_patient_id.len			= 0;
	list_specimen_no.arr[0]		= '\0';
	list_specimen_no.len		= 0;
	list_org_report_date.arr[0] = '\0';
	list_org_report_date.len	= 0;
	list_rowid.arr[0]			= '\0';
	list_rowid.len				= 0;


	EXEC SQL FETCH infect_list_cur
					 INTO :list_patient_id, :list_specimen_no, 
						  :list_org_report_date, :list_rowid;

	list_patient_id.arr[list_patient_id.len]				= '\0';
	list_specimen_no.arr[list_specimen_no.len]				= '\0';
	list_org_report_date.arr[list_org_report_date.len]		= '\0';
	list_rowid.arr[list_rowid.len]							= '\0';	

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_list_cur()");		

    return (LAST_ROW?0:1);

}
/*------------------------------------------------------------*/
close_list_cur()
{
	EXEC SQL CLOSE infect_list_cur;
}
/*------------------------------------------------------------*/
check_secondary_result_null()
{

	  
	  EXEC SQL SELECT COUNT(*)
			  INTO :l_count
              FROM RL_RESULT_ORGANISM
			  WHERE patient_id = :rl_req_patient_id
			  AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
			  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
			  AND group_test_code = :t_group_test_code
			  AND test_code = :t_test_code;

	
	if (l_count == 0)
	{
		  EXEC SQL SELECT COUNT(*)
				  INTO :l_count
			      FROM RL_RESULT_ORGANISM_DTL
				  WHERE patient_id = :rl_req_patient_id
				  AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
				  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				  AND group_test_code = :t_group_test_code
				  AND test_code = :t_test_code;

		  if (l_count == 0)
		  {

				EXEC SQL SELECT COUNT(*)
				  INTO :l_count
			      FROM RL_RESULT_TEXT
				  WHERE patient_id = :rl_req_patient_id
				  AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
				  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
				  AND group_test_code = :t_group_test_code
				  AND test_code = :t_test_code;


			  if (l_count == 0)			  
			  {
				  EXEC SQL SELECT COUNT(*)
					  INTO :l_count
				      FROM RL_RESULT_SNOMED
					  WHERE patient_id = :rl_req_patient_id
					  AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
					  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
					  AND group_test_code = :t_group_test_code
					  AND test_code = :t_test_code;

				   if (l_count == 0)
				   {
					  EXEC SQL SELECT COUNT(*)
						  INTO :l_count
					      FROM RL_OLE_RESULT_TEXT
						  WHERE patient_id = :rl_req_patient_id
						  AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
						  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
						  AND group_test_code = :t_group_test_code
						  AND test_code = :t_test_code;

				   }



			  }

		  }

	}

	if (l_count > 0)
		v_result_null_yn = 'N';
		
}
/*------------------------------------------------------------*/
delta_review_comment()
{

	char t_rc_1[5],
		 t_rc_2[5],
		 t_rc_3[5],
		 t_rc_4[5];

	  strcpy(t_rc_1, "");
	  strcpy(t_rc_2, "");
	  strcpy(t_rc_3, "");
	  strcpy(t_rc_4, "");
		
	 v_modified_date.arr[0]		= '\0';
	 v_modified_date.len		= 0;
	 v_code1.arr[0]		= '\0';
	 v_code1.len		= 0;
	 v_code2.arr[0]		= '\0';
	 v_code2.len		= 0;
	 v_code3.arr[0]		= '\0';
	 v_code3.len		= 0;
	 v_code4.arr[0]		= '\0';
	 v_code4.len		= 0;

	 v_delta_found = 'Y';

     EXEC SQL SELECT TO_CHAR(MODIFIED_DATE, 'DD/MM/YYYY HH24:MI'), NVL(RESULT_COMMENT_CODE1, '~'),
						NVL(RESULT_COMMENT_CODE2, '~'), NVL(RESULT_COMMENT_CODE3, '~'),
     					NVL(RESULT_COMMENT_CODE4, '~')
		INTO :v_modified_date, :v_code1, :v_code2, :v_code3, :v_code4
       FROM RL_DELTA_PERCENTAGE
      WHERE PATIENT_ID = :rl_req_patient_id
        AND TEST_CODE  = :t_test_code
        AND MODIFIED_DATE = ( SELECT MAX(MODIFIED_DATE)
                                FROM RL_DELTA_PERCENTAGE
                               WHERE PATIENT_ID = :rl_req_patient_id
                                AND TEST_CODE  = :t_test_code);
/*

     EXEC SQL SELECT TO_CHAR(MODIFIED_DATE, 'DD/MM/YYYY HH24:MI'), RESULT_COMMENT_CODE1,
						RESULT_COMMENT_CODE2, RESULT_COMMENT_CODE3,
     					RESULT_COMMENT_CODE4
		INTO :v_modified_date, :v_code1, :v_code2, :v_code3, :v_code4
       FROM RL_DELTA_PERCENTAGE
      WHERE PATIENT_ID = :rl_req_patient_id
        AND TEST_CODE  = :t_test_code
        AND MODIFIED_DATE = ( SELECT MAX(MODIFIED_DATE)
                                FROM RL_DELTA_PERCENTAGE
                               WHERE PATIENT_ID = :rl_req_patient_id
                                 AND TEST_CODE  = :t_test_code);
*/

	if (NODATAFOUND)
		v_delta_found = 'N';


	if (OERROR)
		v_delta_found = 'N';
		
	v_modified_date.arr[v_modified_date.len]	= '\0';
	v_code1.arr[v_code1.len]		= '\0';
	v_code2.arr[v_code2.len]		= '\0';
	v_code3.arr[v_code3.len]		= '\0';
	v_code4.arr[v_code4.len]		= '\0';

//sprintf(string_var, "delta found  %c    ", v_delta_found);
//disp_message(ERR_MESG, string_var);

	if (v_delta_found == 'Y')
	{

	     strcpy(v_date_time.arr,v_modified_date.arr);
		 v_date_time.len = strlen(v_date_time.arr);
		 strcpy(v_validity_period.arr,delta_c_val_period[x]);
		 v_validity_period.len = strlen(v_validity_period.arr);
		 strcpy(v_val_period_units.arr,delta_c_val_units[x]);
		 v_val_period_units.len = strlen(v_val_period_units.arr);


		 check_within_validity_period();

//sprintf(string_var, "delta check %s    ", v_within_validity_period_yn.arr);
//disp_message(ERR_MESG, string_var);

	     strcpy(mwithin_validity_period_yn.arr,v_within_validity_period_yn.arr);
		 mwithin_validity_period_yn.len = 1;

	     if(mwithin_validity_period_yn.arr[0] == 'Y')
		 {

				if (t_rcc_1.arr[0] == '\0')
					strcpy(t_rc_1, "~");
				else
					strcpy(t_rc_1, t_rcc_1.arr);

				if (t_rcc_2.arr[0] == '\0')
					strcpy(t_rc_2, "~");
				else
					strcpy(t_rc_2, t_rcc_2.arr);


				if (t_rcc_3.arr[0] == '\0')
					strcpy(t_rc_3, "~");
				else
					strcpy(t_rc_3, t_rcc_3.arr);


				if (t_rcc_4.arr[0] == '\0')
					strcpy(t_rc_4, "~");
				else
					strcpy(t_rc_4, t_rcc_4.arr);


//sprintf(string_var, "trcc   %s   trc 2 value     %s",  t_rcc_2.arr, t_rc_2);
//disp_message(ERR_MESG, string_var);

				if ((strcmp(v_code1.arr, t_rc_1) != 0 &&
					strcmp(v_code1.arr, t_rc_2) != 0 &&
					strcmp(v_code1.arr, t_rc_3) != 0 &&
					strcmp(v_code1.arr, t_rc_4) != 0) || 
					(strcmp(v_code2.arr, t_rc_1) != 0 &&
					strcmp(v_code2.arr, t_rc_2) != 0 &&
					strcmp(v_code2.arr, t_rc_3) != 0 &&
					strcmp(v_code2.arr, t_rc_4) != 0) ||
					(strcmp(v_code3.arr, t_rc_1) != 0 &&
					strcmp(v_code3.arr, t_rc_2) != 0 &&
					strcmp(v_code3.arr, t_rc_3) != 0 &&
					strcmp(v_code3.arr, t_rc_4) != 0) ||
					(strcmp(v_code4.arr, t_rc_1) != 0 &&
					strcmp(v_code4.arr, t_rc_2) != 0 &&
					strcmp(v_code4.arr, t_rc_3) != 0 &&
					strcmp(v_code4.arr, t_rc_4) != 0))
				{

				      strcpy(rl_test_rslt_status[x].arr,"A");
					  rl_test_rslt_status[x].len = 1;
				      strcpy(rl_test_rslt_delta_status[x].arr,"D");
					  rl_test_rslt_delta_status[x].len = 1;

				}
				else
				{
					update_delta_details_comment();
				}


		 }

	}
    else
    {
  	   insert_delta_details_comment();
    }


}
/*------------------------------------------------------------*/
update_delta_details_comment()
{

   EXEC SQL SELECT prev_delta_result
          INTO :l_test_result
	      FROM RL_DELTA_PERCENTAGE
          WHERE PATIENT_ID = :rl_req_patient_id
	      AND TEST_CODE = :t_test_code
	      FOR UPDATE OF result_comment_code1 NOWAIT;
   if(OERROR)
   {
    ins_message(ERR_MESG,"Record got locked in update_delta_details_comment");
   }
   else
   {
	

	    EXEC SQL UPDATE RL_DELTA_PERCENTAGE
		SET RESULT_COMMENT_CODE1 = :t_rcc_1,
    		RESULT_COMMENT_CODE2 = :t_rcc_2,
    		RESULT_COMMENT_CODE3 = :t_rcc_3,
    		RESULT_COMMENT_CODE4 = :t_rcc_4,
			SPECIMEN_DATE     = TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),
			MODIFIED_BY_ID    = user,
			MODIFIED_DATE     = SYSDATE
		WHERE PATIENT_ID = :rl_req_patient_id
		AND TEST_CODE   = :t_test_code;
	}

}
/*------------------------------------------------------------*/
insert_delta_details_comment()
{

		EXEC SQL  INSERT INTO RL_DELTA_PERCENTAGE
    		(PATIENT_ID,TEST_CODE, RESULT_COMMENT_CODE1, RESULT_COMMENT_CODE2, 
    		 RESULT_COMMENT_CODE3, RESULT_COMMENT_CODE4, PREV_DELTA_RESULT, SPECIMEN_DATE,
     		 ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,MODIFIED_DATE,
			 ADDED_AT_WS_NO,
	         ADDED_FACILITY_ID,
	         MODIFIED_AT_WS_NO,
	         MODIFIED_FACILITY_ID)
		VALUES
    		(:rl_req_patient_id, :t_test_code, :t_rcc_1, :t_rcc_2, :t_rcc_3, :t_rcc_4, NULL, 
     		 TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),USER,USER,SYSDATE,SYSDATE,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id);

   if(OERROR)
   {
	    ins_message(ERR_MESG,"Insertion failed in insert_delta_details_comment");
   }


}
/*------------------------------------------------------------*/
delta_review_organism()
{
	v_delta_found = 'N';

	declare_delta_org_cur();
	while(fetch_delta_org_curs())
	{

		get_delta_organism();

		if (v_delta_found == 'Y')
		{

		     strcpy(v_date_time.arr,v_modified_date.arr);
			 v_date_time.len = strlen(v_date_time.arr);
			 strcpy(v_validity_period.arr,delta_o_val_period[x]);
			 v_validity_period.len = strlen(v_validity_period.arr);
			 strcpy(v_val_period_units.arr,delta_o_val_units[x]);
			 v_val_period_units.len = strlen(v_val_period_units.arr);


			check_within_validity_period();

		     strcpy(mwithin_validity_period_yn.arr,v_within_validity_period_yn.arr);
			 mwithin_validity_period_yn.len = 1;

		     if(mwithin_validity_period_yn.arr[0] == 'Y')
			 {
				if (strcmp(v_delta_sens.arr, v_delta_sensitivity.arr) != 0)
				{

				      strcpy(rl_test_rslt_status[x].arr,"A");
					  rl_test_rslt_status[x].len = 1;
				      strcpy(rl_test_rslt_delta_status[x].arr,"D");
					  rl_test_rslt_delta_status[x].len = 1;

				}
				else
				{
					update_delta_details_organism();
				}

			 }

		}
  	    else
		{
			insert_delta_details_organism();
		}


	}
	close_delta_org_curs();
}
/*------------------------------------------------------------*/
declare_delta_org_cur()
{

	EXEC SQL DECLARE delta_org_curs CURSOR FOR
   		SELECT organism_code, antibiotic_code, sensitivity_ind 
		FROM RL_RESULT_ORGANISM_DTL
   		WHERE PATIENT_ID = :rl_req_patient_id
   		AND SPECIMEN_NO = TO_NUMBER(:rl_anl_result_spec_no)
   		AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND GROUP_TEST_CODE = :t_group_test_code
   		AND TEST_CODE = :t_test_code;

	EXEC SQL OPEN delta_org_curs;


}
/*------------------------------------------------------------*/
fetch_delta_org_curs()
{

	v_delta_org_code.arr[0]		= '\0';
	v_delta_org_code.len		= 0;
	v_delta_ant_code.arr[0]		= '\0';
	v_delta_ant_code.len		= 0;
	v_delta_sens.arr[0]			= '\0';
	v_delta_sens.len			= 0;


	EXEC SQL fetch delta_org_curs INTO :v_delta_org_code, 
					:v_delta_ant_code, :v_delta_sens;
	
	
	v_delta_org_code.arr[v_delta_org_code.len]		= '\0';
	v_delta_ant_code.arr[v_delta_ant_code.len]		= '\0';
	v_delta_sens.arr[v_delta_sens.len]				= '\0';
	
	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_delta_org_curs()");		

    return (LAST_ROW?0:1);
	
}
/*------------------------------------------------------------*/
close_delta_org_curs()
{
	EXEC SQL CLOSE delta_org_curs;

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in close_delta_org_curs()");		

}
/*------------------------------------------------------------*/
get_delta_organism()
{

	 v_modified_date.arr[0]		= '\0';
	 v_modified_date.len		= 0;
	 v_delta_sensitivity.arr[0]   = '\0';
	 v_delta_sensitivity.len		= 0;	

	 v_delta_found = 'Y';

     EXEC SQL SELECT TO_CHAR(MODIFIED_DATE, 'DD/MM/YYYY HH24:MI'), sensitivity_ind
		INTO :v_modified_date, :v_delta_sensitivity
       FROM RL_DELTA_ORGANISM
      WHERE PATIENT_ID = :rl_req_patient_id
        AND TEST_CODE  = :t_test_code
		AND antibiotic_code = :v_delta_ant_code
        AND MODIFIED_DATE = ( SELECT MAX(MODIFIED_DATE)
                                FROM RL_DELTA_ORGANISM
                               WHERE PATIENT_ID = :rl_req_patient_id
                                 AND TEST_CODE  = :t_test_code
								 AND antibiotic_code = :v_delta_ant_code);
	
	 if (OERROR)
		v_delta_found = 'N';

	 
	 if (NODATAFOUND)
		v_delta_found = 'N';

	 v_modified_date.arr[v_modified_date.len]		= '\0';
	 v_delta_sensitivity.arr[v_delta_sensitivity.len]   = '\0';

}
/*------------------------------------------------------------*/
update_delta_details_organism()
{

   EXEC SQL SELECT sensitivity_ind
          INTO :l_test_result
	      FROM RL_DELTA_ORGANISM
          WHERE PATIENT_ID = :rl_req_patient_id
	      AND TEST_CODE = :t_test_code
		  AND antibiotic_code = :v_delta_ant_code
	      FOR UPDATE OF sensitivity_ind NOWAIT;
   if(OERROR)
   {
    ins_message(ERR_MESG,"Record got locked in update_delta_details_organism");
   }
   else
   {
	

	    EXEC SQL UPDATE RL_DELTA_ORGANISM
		SET sensitivity_ind = :v_delta_sens,
			SPECIMEN_DATE     = TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),
			MODIFIED_BY_ID    = user,
			MODIFIED_DATE     = SYSDATE
		WHERE PATIENT_ID = :rl_req_patient_id
		AND TEST_CODE   = :t_test_code
		AND antibiotic_code = :v_delta_ant_code;
	}

}
/*------------------------------------------------------------*/
insert_delta_details_organism()
{

	EXEC SQL  INSERT INTO RL_DELTA_ORGANISM
    		(PATIENT_ID,TEST_CODE, organism_code, antibiotic_code, sensitivity_ind,
			 SPECIMEN_DATE,
     		 ADDED_BY_ID,MODIFIED_BY_ID,ADDED_DATE,MODIFIED_DATE,
			 ADDED_AT_WS_NO,
	         ADDED_FACILITY_ID,
	         MODIFIED_AT_WS_NO,
	         MODIFIED_FACILITY_ID)
    VALUES
    		(:rl_req_patient_id, :t_test_code, 
			 :v_delta_org_code, :v_delta_ant_code, :v_delta_sens, 
     		 TO_DATE(:rl_req_hdr_spec_time, 'DD/MM/YYYY HH24:MI'),USER,USER,SYSDATE,SYSDATE,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id,
			 sys_context('USERENV','IP_ADDRESS'),
			 :nd_operating_facility_id);

   if(OERROR)
   {
	    ins_message(ERR_MESG,"Insertion failed in insert_delta_details_organism ");
   }


}
/*------------------------------------------------------------*/
add_zero_after_result()
{
	int i = 0;
	char rslt[21];
	int l_decimal_position = 0;
	

	  strcpy(rslt, r_rslt.arr);


		v_numeric_result.arr[0]		= '\0';
		v_numeric_result.len		= 0;

		l_exist_decimals = 0;
		l_inst_decimals = 0;
		
		EXEC SQL SELECT TO_NUMBER(:r_rslt) - FLOOR(TO_NUMBER(:r_rslt)),
						LENGTH(SUBSTR(:r_rslt, INSTR(:r_rslt, '.') + 1)), INSTR(:r_rslt, '.')
				 INTO :v_numeric_result, :l_exist_decimals, :l_inst_decimals
				 FROM DUAL;

		

		v_numeric_result.arr[v_numeric_result.len]	= '\0';

		if (l_inst_decimals == 0)
			l_exist_decimals = 0;

		l_decimal_position = l_exist_decimals;


			for (i = l_exist_decimals;i < v_no_of_decimals; i++)
			{

				
				if (l_decimal_position == 0)
					strcat(r_rslt.arr, ".");				
	
				strcat(r_rslt.arr, "0");

				l_decimal_position++;

			}
	
			r_rslt.len = strlen(r_rslt.arr);



}
/*------------------------------------------------------------*/
insert_process_monitor()
{
	
	p_count = 0;  


	EXEC SQL SELECT COUNT(1)
			 INTO :p_count
			 FROM RL_ANALYZER_PROGRAMS_LOG
			 WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
			 AND analyzer_name = 'RLTBGREL';

	if (p_count == 0)
	{
		EXEC SQL INSERT INTO RL_ANALYZER_PROGRAMS_LOG
					(operating_facility_id,analyzer_name, machine_name, last_run_at,
					ADDED_AT_WS_NO,
	                ADDED_FACILITY_ID,
	                MODIFIED_AT_WS_NO,
	                MODIFIED_FACILITY_ID)
				VALUES
					(:nd_operating_facility_id,'RLTBGREL', :d_machine_name, SYSDATE,
					 sys_context('USERENV','IP_ADDRESS'),
			         :nd_operating_facility_id,
			         sys_context('USERENV','IP_ADDRESS'),
			         :nd_operating_facility_id);
	}
	else
	{
		EXEC SQL UPDATE RL_ANALYZER_PROGRAMS_LOG
				 SET last_run_at = SYSDATE,
						machine_name = :d_machine_name
				 WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
				 and analyzer_name = 'RLTBGREL';	

	}

	EXEC SQL COMMIT WORK;

}
/*------------------------------------------------------------*/
rl_workload_stat(y)
int y;
{

	strcpy(rl_url_test_code.arr,rl_test_rslt_test_code[y].arr);
   rl_url_test_code.len = strlen(rl_url_test_code.arr);

	EXEC SQL 	
       SELECT COUNT(1)
       INTO :d_count
       FROM RL_WORKLOAD_STAT_HDR
       WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	   AND trans_date = TRUNC(SYSDATE)
       AND test_code = :rl_url_test_code;

	   if (d_count == 0)
	   {
	    
		  EXEC SQL INSERT INTO RL_WORKLOAD_STAT_HDR
					(operating_facility_id,trans_date, test_code, added_by_id, added_date,
					ADDED_AT_WS_NO,
	                ADDED_FACILITY_ID)
		   VALUES
				(:nd_operating_facility_id,TRUNC(SYSDATE), :rl_url_test_code, USER, SYSDATE,
				 sys_context('USERENV','IP_ADDRESS'),
			     :nd_operating_facility_id);

		  if (OERROR);
	   }


      EXEC SQL INSERT INTO RL_WORKLOAD_STAT_DTL
		(operating_facility_id,trans_date, test_code, work_unit_add_factor,
		 added_by_id, added_date,
		 ADDED_AT_WS_NO,
	     ADDED_FACILITY_ID)
      VALUES
		(:nd_operating_facility_id,TRUNC(SYSDATE), :rl_url_test_code, 
		 0, USER, SYSDATE,
		 sys_context('USERENV','IP_ADDRESS'),
		:nd_operating_facility_id);

		if (OERROR);

}
/*------------------------------------------------------------*/

/***************** added the following on 19.06.2003 *****************/

/*------------------------------------------------------------*/

insert_text_snomed_pair()
{

	v_test_code.arr[0]			= '\0';
	v_test_code.len				= 0;
	v_gp_test_code.arr[0]	= '\0';
	v_gp_test_code.len		= 0;

	strcpy(v_test_code.arr, t_test_code.arr);
    v_test_code.len = strlen(v_test_code.arr);

	strcpy(v_gp_test_code.arr, t_group_test_code.arr);
	v_gp_test_code.len = strlen(v_gp_test_code.arr);

	declare_text_snomed_pair_cur();
	declare_text_snomed_pair_cur();
	while(fetch_text_snomed_pair_cur())
	{
       open_text_snomed_pair_cur_2();
	   while(fetch_text_snomed_pair_cur_2())
	   {	   

		EXEC SQL SELECT COUNT(1) 
				 INTO   :l_count
				 FROM   RL_RESULT_SNOMED
				 WHERE  PATIENT_ID       =  :rl_req_patient_id
				 AND	SPECIMEN_NO      =  TO_NUMBER(:rl_anl_result_spec_no)
				 AND    OPERATING_FACILITY_ID = :nd_operating_facility_id
				 AND	GROUP_TEST_CODE  =  :v_gp_test_code
				 AND	TEST_CODE        =  :v_test_code
				 AND    SNOMED_CODE      =  :l_snomed_code_1
				 AND    SNOMED_CODE_2	 =  :l_snomed_code_2;
		
		if (l_count == 0)
		{
			 EXEC SQL INSERT INTO RL_RESULT_SNOMED
							 (operating_facility_id,specimen_no,patient_id,group_test_code,
							  test_code,snomed_code,snomed_marker_code_1,user_marker_code_1,
							  snomed_code_2,snomed_marker_code_2,user_marker_code_2,
							  serial_no,added_by_id,modified_by_id,added_date,modified_date,
							  added_at_ws_no,added_facility_id,modified_at_ws_no,modified_facility_id)
					  VALUES(:nd_operating_facility_id,TO_NUMBER(:rl_anl_result_spec_no),
							 :rl_req_patient_id,:v_gp_test_code,:v_test_code,:l_snomed_code_1,
 			 				  NULL,NULL,:l_snomed_code_2,NULL,NULL,NULL,USER,USER,SYSDATE,
							  SYSDATE,sys_context('USERENV','IP_ADDRESS'),
							  :nd_operating_facility_id,
							  sys_context('USERENV','IP_ADDRESS'),
							  :nd_operating_facility_id);
		}
      }
	  close_text_snomed_pair_cur_2();

	}

	close_text_snomed_pair_cur();

}

/*------------------------------------------------------------*/
declare_text_snomed_pair_cur()
{
   EXEC SQL DECLARE text_snomed_pair_cur CURSOR FOR
		SELECT result_text_code
		FROM   RL_RESULT_TEXT
		WHERE patient_id = :rl_req_patient_id
		AND specimen_no = TO_NUMBER(:rl_anl_result_spec_no)
		AND OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND group_test_code = :v_gp_test_code
		AND test_code = :v_test_code;

   EXEC SQL OPEN text_snomed_pair_cur;

}
/*------------------------------------------------------------*/

/*------------------------------------------------------------*/

declare_text_snomed_pair_cur_2()
{
   EXEC SQL DECLARE text_snomed_pair_cur_2 CURSOR FOR
 	    SELECT SNOMED_CODE_1,SNOMED_CODE_2 
	 	FROM   RL_TEXT_SNOMED_PAIR
	 	WHERE  RESULT_TEXT_CODE = :nd_result_text_code
	 	AND    SECTION_CODE = :d_section_code
	 	AND    NVL(STATUS,'!') <> 'S';
}

/*------------------------------------------------------------*/
open_text_snomed_pair_cur_2()
{
  EXEC SQL OPEN text_snomed_pair_cur_2;
}


/*------------------------------------------------------------*/
fetch_text_snomed_pair_cur()
{
	nd_result_text_code.arr[0]	= '\0';
	nd_result_text_code.len		= 0;

	EXEC SQL FETCH text_snomed_pair_cur
					 INTO :nd_result_text_code;

	nd_result_text_code.arr[nd_result_text_code.len]	= '\0';

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_text_snomed_pair_cur()");		

    return (LAST_ROW?0:1);

}

/*------------------------------------------------------------*/

fetch_text_snomed_pair_cur_2()
{
	l_snomed_code_1.arr[0]	= '\0';
	l_snomed_code_1.len		= 0;

	l_snomed_code_2.arr[0]	= '\0';
	l_snomed_code_2.len		= 0;

	EXEC SQL FETCH text_snomed_pair_cur_2
					INTO :l_snomed_code_1,:l_snomed_code_2;

	l_snomed_code_1.arr[l_snomed_code_1.len]	= '\0';
	l_snomed_code_2.arr[l_snomed_code_2.len]	= '\0';

	if(OERROR) 
		  ins_message(ERR_MESG,"Failed in fetch_text_snomed_pair_cur_2()");		

    return (LAST_ROW?0:1);

}

/*------------------------------------------------------------*/
close_text_snomed_pair_cur()
{

    EXEC SQL CLOSE text_snomed_pair_cur;
}
/*------------------------------------------------------------*/

/*------------------------------------------------------------*/
close_text_snomed_pair_cur_2()
{

    EXEC SQL CLOSE text_snomed_pair_cur_2;
}
/*------------------------------------------------------------*/
get_spec_regd_datetime()
{

	v_spec_regd_datetime.arr[0]	= '\0';
	v_spec_regd_datetime.len		= 0; 

    EXEC SQL SELECT TO_CHAR(SPEC_REGD_DATE_TIME,'DD/MM/YYYY HH24:MI:SS')
	         INTO  :v_spec_regd_datetime
		     FROM   RL_REQUEST_HEADER
			 WHERE  SPECIMEN_NO = :rl_anl_result_spec_no
			 AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;

   if(OERROR)
        ins_message(ERR_MESG,"Failed on get_spec_regd_datetime");

   v_spec_regd_datetime.arr[v_spec_regd_datetime.len]			= '\0';

}
/*------------------------------------------------------------*/
check_reflex_test_suspended()
{
	
	nd_ref_status.arr[0]		= '\0';
	nd_ref_status.len			= 0; 


 	EXEC SQL SELECT NVL(eff_status, '!')
 		INTO :nd_ref_status
 		FROM RL_REFER_IN_TEST_CODE
 		WHERE operating_facility_id = :nd_operating_facility_id
 		AND test_code = :nd_reflex_test;

//sprintf(string_var, "  [%s]   [%s]",  nd_reflex_test.arr, nd_operating_facility_id.arr);
//disp_message(ERR_MESG, string_var);

	if (NODATAFOUND)
	{
		insert_count = 0;

		EXEC SQL SELECT COUNT(1)
				 INTO :insert_count
				 FROM RL_REFERRED_TEST_CODE
	  			 WHERE operating_facility_id = :nd_operating_facility_id
	  			 AND test_code = :nd_reflex_test;

		if (insert_count == 0)
		{
			strcpy(nd_ref_status.arr, "N");
			nd_ref_status.len = strlen(nd_ref_status.arr);
		}
	}			
	else
	{
			if (strcmp(v_grp_tst_yn.arr,"Y") == 0)
			{
					insert_count = 0;
			
    				EXEC SQL SELECT COUNT(1)
    						INTO :insert_count
    						FROM RL_GROUP_TEST_DETAIL
    						WHERE group_test_code = :nd_reflex_test
    						AND test_code IN(SELECT test_code
    								FROM RL_REFER_IN_TEST_CODE
    								WHERE operating_facility_id = :nd_operating_facility_id
    								AND NVL(eff_status, '!') = 'D');

					if (insert_count > 0)
					{
						strcpy(nd_ref_status.arr, "D");
						nd_ref_status.len = strlen(nd_ref_status.arr);
					}

			  }
	  }

   nd_ref_status.arr[nd_ref_status.len]		= '\0';


	if (OERROR)
	{

		strcpy(nd_ref_status.arr, "N");
		nd_ref_status.len = strlen(nd_ref_status.arr);
	}			

}
/*------------------------------------------------------------*/

/*

**   Last Modified by : HAMEED

*/
#include <stdio.h>   
#include <string.h>
#include <malloc.h>
#include "rl.h"
#include "rl.h"      

#define REP_WIDTH 78
#define VER  "VER : 1.10.01\n"
#define OERROR (sqlca.sqlcode < 0)
#define NO_DATA_FOUND (sqlca.sqlcode == 1403) 
#define VIEW_LOG_FILE 1
#define ONLINE_PRINTING 1

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR nd_operating_facility_id   [3],
	        uid_pwd					   [91],
		    d_pgm_date				   [14],
            rep_date				   [20],
            rep_date1				   [20],
            comp_name				   [1000],
            oper_id					   [21],
            d_curr_pgm_name			   [15],
			nd_session_id			   [31],
			nd_pgm_date				   [21],
			nd_trx_ind		           [2];


	VARCHAR	nd_section_code			[2],
			nd_test_code			[6],
			nd_quality_code			[5],
			nd_fm_process_date		[20],
			nd_to_process_date		[20],
			nd_batch_id				[31],
			nd_inst_code			[10];

	VARCHAR nd_test_name			[61],
			nd_section_name			[41],
			nd_quality_name			[41],
			nd_test_units			[30],
			nd_test_units_desc		[41],
			nd_inst_name			[41]; 

	VARCHAR nd_std_deviation		[20],
			nd_cf_variation			[20],
			nd_mean_value			[20],
			nd_1_sd					[20],
			nd_2_sd					[20],
			nd_3_sd					[20],
			nd_4_sd					[20],
			nd_m1_sd				[20],
			nd_m2_sd				[20],
			nd_m3_sd				[20],
			nd_m4_sd				[20],
			nd_result_value			[20],
			nd_result_date			[20],
			nd_result_date1			[20], //added for globalisation
			nd_quality_status		[20];


	VARCHAR	r_rslt					[30],
		    v_numeric_result		[30],
			l_translated_value		 [500],//added for globalisation
			language_id			[5];//added for globalisation

	int v_no_of_decimals = 0;
	int l_exist_decimals = 0;
	int l_inst_decimals = 0;

    int l_count = 0;
	int i; //added for globalisation
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H; 

#include "winproc.h"

EXEC ORACLE OPTION(HOLD_CURSOR = YES);
//EXEC ORACLE OPTION(REBIND = NO);


char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1],
     hdr_line4[REP_WIDTH+1],
     hdr_line5[REP_WIDTH+1];

char string_var[1000];

char local_legend[35][500];//added for globalisation

//char rep_title1[] = "Levey Jennings Chart";
char rep_title1[40]; //added for globalisation
char rep_title2[30];
char item_title[30];


int end_pgm_control = 0;

FILE *f1;

int page_no,
    line_no;

char filename[150];

float l_result = 0;
char *l_string;
char g_facility_id[50];

void proc_main(argc,argv)
int argc;
char *argv[];
{

   if(argc < 8) {
     disp_message(ORA_MESG,"Usage rlrljgph uid/passwd session_id pgm_date section quality process from & to \n");
     proc_exit();
   }

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   strcpy(nd_operating_facility_id.arr, argv[4]);
   nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr);

	strcpy(g_facility_id, nd_operating_facility_id.arr);
   
   strcpy(nd_section_code.arr, argv[5]);
   nd_section_code.len = strlen(nd_section_code.arr);

   strcpy(nd_quality_code.arr, argv[6]);
   nd_quality_code.len = strlen(nd_quality_code.arr);

   strcpy(nd_fm_process_date.arr, argv[7]);
   nd_fm_process_date.len = strlen(nd_fm_process_date.arr);

   strcpy(nd_to_process_date.arr, argv[8]);
   nd_to_process_date.len = strlen(nd_to_process_date.arr);

/*
   strcpy(nd_test_code.arr, argv[4]);
   nd_test_code.len = strlen(nd_test_code.arr);
   
   strcpy(nd_batch_id.arr, argv[8]);
   nd_batch_id.len = strlen(nd_batch_id.arr);

//   strcpy(nd_inst_code.arr, argv[9]);
//   nd_inst_code.len = strlen(nd_inst_code.arr);

   strcpy(nd_inst_code.arr, "INST 1");
   nd_inst_code.len = strlen(nd_inst_code.arr);
*/

	EXEC SQL CONNECT :uid_pwd;

    if(OERROR) 
	{
        disp_message(ORA_MESG,"Unable to connect to oracle.\n");
        proc_exit();
    }
    
    set_meduser_role();

/*********************** added for globalisation ******************************/
    strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
/*********************** added for globalisation ******************************/

    get_params();
	
	get_legend_value(33); //added for globalisation

	fetch_sys_info();

    strcpy(filename,WORKING_DIR);
    strcat(filename,"rlrljgph.lis");


    if( (f1=fopen(filename,"w")) == NULL)
	{
        disp_message(ERR_MESG,"Error in opening output file...\n");
		proc_exit();
    }

    page_no=1;
    line_no=1;

	fetch_sys_info();

    do_report();

    print_end_of_rep();

    fclose(f1);

    EXEC SQL COMMIT WORK RELEASE;

	print_job();

    return;

}


do_report()
{
	get_quality_std_values();

	line_no = 65;

	chk_break(1, 'N');

	print_std_values();

	line_no = 65;

	dclr_quality_cur();	
	while(fetch_quality_cur())
	{

		chk_break(1, 'Y');
		print_dtls();

	}

	close_quality_cur();

}

print_param_values() 
{

//    fprintf(f1, "Section			:	 %-1.1s %s\n", nd_section_code.arr, 
    fprintf(f1, "%-30.30s:	 %-1.1s %s\n", local_legend[1], nd_section_code.arr, //added for globalisation
								nd_section_name.arr);
//	fprintf(f1, "Quality			:	 %-1.1s %s\n", nd_quality_code.arr,
	fprintf(f1, "%-30.30s:	 %-1.1s %s\n", local_legend[2], nd_quality_code.arr, //added for globalisation
									nd_quality_name.arr);
//	fprintf(f1, "Test			:	 %s %s\n", nd_test_code.arr,
	fprintf(f1, "%-30.30s:	 %s %s\n", local_legend[3], nd_test_code.arr, //added for globalisation
								nd_test_name.arr);
//	fprintf(f1, "Test Units		:	 %s\n", nd_test_units_desc.arr);
	fprintf(f1, "%-30.30s:	 %s\n", local_legend[4], nd_test_units_desc.arr);//added for globalisation
//	fprintf(f1, "Batch ID		:	 %s\n", nd_batch_id.arr);
//	fprintf(f1, "Batch/Lot No.	:	 %s\n", nd_batch_id.arr);
	fprintf(f1, "%-30.30s:	 %s\n", local_legend[5], nd_batch_id.arr);//added for globalisation
//	fprintf(f1, "Instrument		:	 %s %s\n\n", nd_inst_code.arr,
	fprintf(f1, "%-30.30s:	 %s %s\n\n", local_legend[6], nd_inst_code.arr, //added for globalisation
								nd_inst_name.arr);			
	line_no += 7;
}

print_std_values()
{
	get_test_name();
	get_section_name();
	get_instrument_name();
	get_quality_name();

//    fprintf(f1, "Section			:	 %-1.1s %s\n", nd_section_code.arr, 
    fprintf(f1, "%-30.30s:	 %-1.1s %s\n", local_legend[1], nd_section_code.arr, //added for globalisation
								nd_section_name.arr);
//	fprintf(f1, "Quality			:	 %-1.1s %s\n", nd_quality_code.arr,
	fprintf(f1, "%-30.30s:	 %-1.1s %s\n", local_legend[2], nd_quality_code.arr, //added for globalisation
								nd_quality_name.arr);
//	fprintf(f1, "Test			:	 %s %s\n", nd_test_code.arr,
	fprintf(f1, "%-30.30s:	 %s %s\n", local_legend[3], nd_test_code.arr, //added for globalisation
								nd_test_name.arr);
//	fprintf(f1, "Test Units		:	 %s\n", nd_test_units_desc.arr);
	fprintf(f1, "%-30.30s:	 %s\n", local_legend[4], nd_test_units_desc.arr);//added for globalisation
//	fprintf(f1, "Batch ID		:	 %s\n", nd_batch_id.arr);
//	fprintf(f1, "Batch/Lot No.  :	 %s\n", nd_batch_id.arr);
	fprintf(f1, "%-30.30s:	 %s\n", local_legend[5], nd_batch_id.arr);//added for globalisation
//	fprintf(f1, "Instrument		:	 %s %s\n\n", nd_inst_code.arr,
	fprintf(f1, "%-30.30s:	 %s %s\n\n", local_legend[6], nd_inst_code.arr, //added for globalisation
								nd_inst_name.arr);			


// 	fprintf(f1, "Control Parameters \n\n");
 	fprintf(f1, "%s \n\n", local_legend[7]);

    add_zero_after_result(nd_std_deviation.arr);
 	fprintf(f1, "SD 	- %-10.10s\n", nd_std_deviation.arr);
	add_zero_after_result(nd_cf_variation.arr);
	fprintf(f1, "CV 	- %-10.10s\n", nd_cf_variation.arr);

	add_zero_after_result(nd_4_sd.arr);
	fprintf(f1, "4SD	- %-10.10s\n", nd_4_sd.arr);
	add_zero_after_result(nd_3_sd.arr);
	fprintf(f1, "3SD	- %-10.10s\n", nd_3_sd.arr);
	add_zero_after_result(nd_2_sd.arr);
	fprintf(f1, "2SD	- %-10.10s\n", nd_2_sd.arr);
	add_zero_after_result(nd_1_sd.arr);
	fprintf(f1, "1SD	- %-10.10s\n", nd_1_sd.arr);
	
	add_zero_after_result(nd_mean_value.arr);
	fprintf(f1, "MEAN	- %-10.10s\n", nd_mean_value.arr);

	add_zero_after_result(nd_m1_sd.arr);
	fprintf(f1, "-1SD	- %-10.10s\n", nd_m1_sd.arr);
	add_zero_after_result(nd_m2_sd.arr);
	fprintf(f1, "-2SD	- %-10.10s\n", nd_m2_sd.arr);
	add_zero_after_result(nd_m3_sd.arr);
	fprintf(f1, "-3SD	- %-10.10s\n", nd_m3_sd.arr);
	add_zero_after_result(nd_m4_sd.arr);
	fprintf(f1, "-4SD	- %-10.10s\n", nd_m4_sd.arr);

	line_no += 20;
}

print_dtls()
{
        EXEC SQL EXECUTE
			DECLARE
				t_date   date;
			BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_result_date,'dd/mm/yyyy hh24:mi'), :language_id , t_date);
				:nd_result_date1 := to_char(t_date,'dd/mm/yyyy hh24:mi');
			END;
		END-EXEC;

	add_zero_after_result(nd_result_value.arr);
	fprintf(f1, "%-16.16s        %-20.20s   %-20.20s\n", nd_result_date1.arr, nd_result_value.arr, nd_quality_status.arr);
	line_no++;
}

get_quality_std_values()
{

	nd_std_deviation.arr[0]			= '\0';
	nd_cf_variation.arr[0]			= '\0';
	nd_mean_value.arr[0]			= '\0';
	nd_1_sd.arr[0]					= '\0';
	nd_2_sd.arr[0]					= '\0';
	nd_3_sd.arr[0]					= '\0';
	nd_4_sd.arr[0]					= '\0';
	nd_m1_sd.arr[0]					= '\0';
	nd_m2_sd.arr[0]					= '\0';
	nd_m3_sd.arr[0]					= '\0';
	nd_m4_sd.arr[0]					= '\0';

	nd_std_deviation.len			= 0;
	nd_cf_variation.len				= 0;
	nd_mean_value.len				= 0;
	nd_1_sd.len						= 0;
	nd_2_sd.len						= 0;
	nd_3_sd.len						= 0;
	nd_4_sd.len						= 0;
	nd_m1_sd.len					= 0;
	nd_m2_sd.len					= 0;
	nd_m3_sd.len					= 0;
	nd_m4_sd.len					= 0;

	
	EXEC SQL SELECT  TO_CHAR(std_deviation), TO_CHAR(cf_variation),
			TO_CHAR(mean_value), 
			TO_CHAR(A.mean_value + (1 * A.std_deviation)),
			TO_CHAR(A.mean_value + (2 * A.std_deviation)),
			TO_CHAR(A.mean_value + (3 * A.std_deviation)),
			TO_CHAR(A.mean_value + (4 * A.std_deviation)),
			TO_CHAR(A.mean_value + (-1 * A.std_deviation)),
			TO_CHAR(A.mean_value + (-2 * A.std_deviation)),
			TO_CHAR(A.mean_value + (-3 * A.std_deviation)),
			TO_CHAR(A.mean_value + (-4 * A.std_deviation))
	INTO    :nd_std_deviation, :nd_cf_variation,
			:nd_mean_value, 
			:nd_1_sd, :nd_2_sd, :nd_3_sd, :nd_4_sd,
			:nd_m1_sd, :nd_m2_sd, :nd_m3_sd, :nd_m4_sd
		FROM RL_TEST_QUALITY_MAST A
	    WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND A.qlty_code = :nd_quality_code
		AND A.section_code = :nd_section_code
		AND A.batch_id = :nd_batch_id
		AND A.inst_code = :nd_inst_code
		AND A.test_code = :nd_test_code;


    if(OERROR)
	    err_mesg("SELECT failed on table  RL_TEST_QUALITY_MAST",0,"");


	if (NO_DATA_FOUND)
		err_mesg("SELECT failed on table  RL_TEST_QUALITY_MAST",0,"");

	nd_std_deviation.arr[nd_std_deviation.len]			= '\0';
	nd_cf_variation.arr[nd_cf_variation.len]			= '\0';
	nd_mean_value.arr[nd_mean_value.len]				= '\0';
	nd_1_sd.arr[nd_1_sd.len]							= '\0';
	nd_2_sd.arr[nd_2_sd.len]							= '\0';
	nd_3_sd.arr[nd_3_sd.len]							= '\0';
	nd_4_sd.arr[nd_4_sd.len]							= '\0';
	nd_m1_sd.arr[nd_m1_sd.len]							= '\0';
	nd_m2_sd.arr[nd_m2_sd.len]							= '\0';
	nd_m3_sd.arr[nd_m3_sd.len]							= '\0';
	nd_m4_sd.arr[nd_m4_sd.len]							= '\0';


}

/********* DECLARE TEST_CURSOR **********/
dclr_quality_cur()
{
	

	EXEC SQL DECLARE quality_cursor CURSOR FOR
		SELECT TO_CHAR(result_value), 
	    TO_CHAR(B.result_date_time,'dd/mm/yyyy hh24:mi'),
		DECODE( B.quality_status, 'R', 'Rejected', 'Accepted')
		FROM RL_TEST_QUALITY_MAST A, RL_TEST_QUALITY_RESULTS B
		WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND B.OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND A.qlty_code = :nd_quality_code
		AND A.qlty_code = B.qlty_code
		AND A.section_code = :nd_section_code
		AND A.section_code = B.section_code
		AND A.batch_id	= :nd_batch_id
		AND A.batch_id = B.batch_id
		AND A.inst_code = :nd_inst_code
		AND A.inst_code = B.inst_code
		AND A.test_code = :nd_test_code
		AND A.test_code = B.test_code
		AND B.result_date_time >=
		TO_DATE(:nd_fm_process_date, 'DD/MM/YYYYHH24:MI')
		AND B.result_date_time <
		TO_DATE(:nd_to_process_date, 'DD/MM/YYYYHH24:MI') + 1
		ORDER BY B.result_date_time;

	 EXEC SQL OPEN quality_cursor;

    if(OERROR)
	    err_mesg("Declare failed at dclr_quality_cur",0,"");


	#ifdef DEBUG
		printf("leaving dclr_quality_cur()\n");
		fflush(stdout);
	#endif
 }

close_quality_cur()
{
	

    EXEC SQL CLOSE quality_cursor;

    if(OERROR)
	    err_mesg("Close failed at close_quality_cur",0,"");

	#ifdef DEBUG
		printf("leaving close_test_cur()\n");
		fflush(stdout);
	#endif
 }

/********************* FETCH SPECIMEN CURSOR ************************/
fetch_quality_cur()
{
	
	nd_result_value.arr[0]		= '\0';
	nd_result_value.len			= 0;
	nd_result_date.arr[0]			= '\0';
	nd_result_date.len			= 0;
	nd_quality_status.arr[0]	= '\0';
	nd_quality_status.len		= 0;

	EXEC SQL FETCH quality_cursor
			 INTO :nd_result_value, :nd_result_date, :nd_quality_status;


	if(OERROR)
	    err_mesg("FETCH failed on cursor QUALITY_CURSOR CURSOR",0,"");

    if(NO_DATA_FOUND)
		return 0;

	nd_result_value.arr[nd_result_value.len]				= '\0';
	nd_result_date.arr[nd_result_date.len]					= '\0';
	nd_quality_status.arr[nd_quality_status.len]			= '\0';

	return 1;
}

/********************* PRINT END OF REPORT ************************/
print_end_of_rep()
{
    int col;
    char buff[REP_WIDTH+1];


    memset(buff,' ',REP_WIDTH-11);
    col = (int)(REP_WIDTH-19)/2;

    strncpy(buff+col,"** END OF REPORT **",19);

    fprintf(f1,"\n%s\n",buff);
		fprintf(f1,"\f");  // 28.04.2003 added  

}


/********************* FETCH HOSPITAL NAME ************************/
fetch_sys_info()
{

    EXEC SQL SELECT ACC_ENTITY_NAME,
		    TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER 
	     INTO   :comp_name,
		    :rep_date,
		    :oper_id
	     FROM   SY_ACC_ENTITY_lang_vw
		 WHERE ACC_ENTITY_ID = :nd_operating_facility_id
		 and language_id = :language_id;

    if(OERROR)
	    err_mesg("SELECT failed on table  SY_ACC_ENTITY",0,"");

    comp_name.arr[comp_name.len] = '\0';
    rep_date.arr[rep_date.len] = '\0';
    oper_id.arr[oper_id.len] = '\0';
}

print_job()
{
	if (strcmp(nd_trx_ind.arr,"Y") == 0)

		 PrintDocument
			   (
				uid_pwd.arr,		//char	*PUidPwd;
				nd_session_id.arr,	//char	*PSessionID;
				nd_operating_facility_id.arr,	//char	*PFacilityID;
				"RL",				//char	*PModuleID;
				"RLROSWRG",			//char	*PDocumentID;
				filename,			//char	*POnlinePrintFileNames;
				"O",				//char	*PLocationTypes;
				nd_section_code.arr,				//char	*PLocationCodes;
				1,					//int		PNumOfCopies;
				1,					//int		PPageFrom;
				9999					//int		PPageTo;
			   );
						   

	else 

		 PrintDocument
			   (
				uid_pwd.arr,		//char	*PUidPwd;
				nd_session_id.arr,	//char	*PSessionID;
				nd_operating_facility_id.arr,	//char	*PFacilityID;
				"RL",				//char	*PModuleID;
				"RLROSWRG",			//char	*PDocumentID;
				filename,			//char	*POnlinePrintFileNames;
				"O",				//char	*PLocationTypes;
				"~",				//char	*PLocationCodes;
				1,					//int		PNumOfCopies;
				1,					//int		PPageFrom;
				9999					//int		PPageTo;
			   );  
}

/********************* CHECK PAGE BREAK ************************/
chk_break(nol, l_flag)
int nol;
char l_flag;
{

	if(line_no + nol >= 63)
	{
       line_no = 1;
	   form_hdr();

	   if (l_flag == 'Y')
			print_param_values();
			put_hdr();
	}
}

/********************* FORM HDR ************************/
form_hdr()
{

    static int first = 1;
    char buf[15];
    int col;

        strcpy(rep_title2,"");

    if(first) 
	{
        memset(hdr_line1,' ',REP_WIDTH+1);
        memset(hdr_line2,' ',REP_WIDTH+1);
        memset(hdr_line4,' ',REP_WIDTH+1);
		memset(hdr_line5,'-',REP_WIDTH);
		hdr_line5[REP_WIDTH] = '\0';

        strncpy(hdr_line1,"MDL : RL",8);
        col = (int)(REP_WIDTH-strlen(comp_name.arr))/2;
        strncpy(hdr_line1+col,comp_name.arr,strlen(comp_name.arr));
 
		  EXEC SQL EXECUTE
			DECLARE
				t_date   date;
			BEGIN
				t_date := GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
				:rep_date1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
			END;
		  END-EXEC;

        col = (REP_WIDTH-strlen(rep_date1.arr));
        strcpy(hdr_line1+col,rep_date1.arr);
    
        strncpy(hdr_line2,"OPR :",5);
        strcpy(hdr_line2+6,oper_id.arr);

    }

    memset(hdr_line3,' ',REP_WIDTH+1);

    strncpy(hdr_line3,"REP : RLRLJGPH",14);
    strcpy(rep_title1,local_legend[8]); //added for globalisation
    col = (int)(REP_WIDTH-strlen(rep_title1))/2;
    strncpy(hdr_line3+col,rep_title1,strlen(rep_title1));
    //sprintf(buf,"PAGE : %4d",page_no++);
    sprintf(buf,"%-4.4s : %4d",local_legend[9],page_no++); //added for globalisation
    strcpy(hdr_line3+(REP_WIDTH-strlen(buf)),buf);

    col = (int)(REP_WIDTH-strlen(rep_title2))/2;
    strcpy(hdr_line4+col,rep_title2);

    if(first)
        fprintf(f1,"%s\n",hdr_line1);
    else
	  {
	    fprintf(f1,"\n");
        fprintf(f1,"\f%s\n",hdr_line1);
	  }
    fprintf(f1,"%s\n",hdr_line2);
    fprintf(f1,"%s\n",hdr_line3);
    fprintf(f1,"%s\n",hdr_line4);
    fprintf(f1,"%s\n",hdr_line5);

    first = 0;
}

/********************* REPORT HEADER ************************/
put_hdr()
{
   
//   fprintf(f1,"Result Date             Value                  Status\n");
   fprintf(f1,"%-15.15s         %-11.11s            %-13.13s\n", local_legend[10], local_legend[11], local_legend[12] ); //added for globalisation
   fprintf(f1, "--------------------------------------------------------------------------------\n");
   
   line_no += 2;

}

/********* GET SECTION_NAME  **********/
 get_section_name()
 {
    nd_section_name.arr[0]	= '\0';
	nd_section_name.len		= 0;


	EXEC SQL SELECT long_name
	INTO :nd_section_name
	FROM RL_SECTION_CODE_lang_vw
	WHERE section_code = :nd_section_code
	and language_id = :language_id;

#ifdef DEBUG
    printf("leaving dclr_section_cur()\n");
    fflush(stdout);
#endif

	nd_section_name.arr[nd_section_name.len]	= '\0';

 }


/********* GET TEST_NAME  **********/
  get_test_name()
  {
    nd_test_name.arr[0]		= '\0';
	nd_test_name.len		= 0;
	nd_test_units.arr[0]	= '\0';
	nd_test_units.len		= 0;


//	EXEC SQL SELECT short_desc
	EXEC SQL SELECT long_desc, test_units, no_of_decimals
	INTO :nd_test_name, :nd_test_units, v_no_of_decimals
	FROM RL_TEST_CODE_lang_vw 
	WHERE test_code = :nd_test_code
	and language_id = :language_id;

#ifdef DEBUG
    printf("leaving dclr_source_cur()\n");
    fflush(stdout);
#endif

	nd_test_name.arr[nd_test_name.len]		= '\0';
	nd_test_units.arr[nd_test_units.len]	= '\0';

    get_test_units_desc_from_sy_uom();  //// 20.02.2006

  }


/********* GET QUALITY_NAME  **********/
 get_quality_name()
 {
    nd_quality_name.arr[0]	= '\0';
	nd_quality_name.len		= 0;


	EXEC SQL SELECT long_desc
	INTO :nd_quality_name
	FROM RL_QUALITY_CODE_lang_vw
	WHERE section_code = :nd_section_code
	AND qlty_code = :nd_quality_code
	and language_id = :language_id;

#ifdef DEBUG
    printf("leaving dclr_section_cur()\n");
    fflush(stdout);
#endif

	nd_quality_name.arr[nd_quality_name.len]	= '\0';

 }

/********* GET INSTRUMENT_NAME  **********/
 get_instrument_name()
 {
    nd_inst_name.arr[0]	= '\0';
	nd_inst_name.len		= 0;

	EXEC SQL SELECT long_desc
	INTO :nd_inst_name
	FROM RL_ONLINE_INSTRUMENT_lang_vw
	WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND section_code = :nd_section_code
	AND instrument_code = :nd_inst_code
	and language_id = :language_id;

#ifdef DEBUG
    printf("leaving dclr_section_cur()\n");
    fflush(stdout);
#endif

	nd_inst_name.arr[nd_inst_name.len]	= '\0';

 }

/************* get_params ***************/
get_params()
{
	nd_test_code.arr[0]			= '\0' ;
	nd_test_code.len			= 0;
	nd_batch_id.arr[0]			= '\0';
	nd_batch_id.len				= 0;
	nd_inst_code.arr[0]			= '\0';
	nd_inst_code.len			= 0;

   if(OERROR)
      disp_message(ORA_MESG,"get parameter function using : \n");

   /* read the parameter record */
   EXEC SQL SELECT 
               OPERATING_FACILITY_ID,
               PARAM1,
			   PARAM2,
			   PARAM3
   	     INTO 
		    :nd_operating_facility_id,
			:nd_test_code,
			:nd_batch_id,
			:nd_inst_code
         FROM SY_PROG_PARAM
	     WHERE  UPPER(PGM_ID) = 'RLRLJGPH'
		 AND SESSION_ID = TO_NUMBER(:nd_session_id)
		 AND PGM_DATE = :nd_pgm_date;
	
   if(OERROR)
      disp_message(ORA_MESG,"get_parameter_function2 : \n");
   

	nd_test_code.arr[nd_test_code.len]			= '\0' ;
	nd_batch_id.arr[nd_batch_id.len]			= '\0';
	nd_inst_code.arr[nd_inst_code.len]			= '\0';


  #ifdef DEBUG
   printf("**********Parameters from SY_PROG_PARAM *******************\n");
   printf(" nd_test_code = %s\n",nd_test_code.arr);
   getchar();  
	#endif
  /* delete the parameter record */
   
   EXEC SQL DELETE FROM SY_PROG_PARAM
	        WHERE  UPPER(PGM_ID) = 'RLRLJGPH'
	        AND    SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND    PGM_DATE = :nd_pgm_date;

   if(OERROR)
      disp_message(ORA_MESG,"delete on sy_prog_param failed : \n");

}
/*--------------------------------------------------------------------------------*/
add_zero_after_result(char *t_str)
{
	int i = 0;
	char rslt[21];
	int l_decimal_position = 0;
	float l_r_value = 0;
	char s_r_value[20];

    	strcpy(rslt, t_str);

		strcpy(r_rslt.arr, t_str);
		r_rslt.len = strlen(r_rslt.arr);

		l_r_value = atof(r_rslt.arr);
	
		if (l_r_value > 0  &&  l_r_value < 1)
		{
			if (r_rslt.arr[0] != '0')
			{
				strcpy(s_r_value, "0");
				strcat(s_r_value, r_rslt.arr);

				strcpy(r_rslt.arr, s_r_value);
				r_rslt.len = strlen(r_rslt.arr);

			}
		}

		v_numeric_result.arr[0]		= '\0';
		v_numeric_result.len		= 0;

		l_exist_decimals = 0;
		l_inst_decimals = 0;


		
		EXEC SQL SELECT TO_NUMBER(:r_rslt) - FLOOR(TO_NUMBER(:r_rslt)),
						LENGTH(SUBSTR(:r_rslt, INSTR(:r_rslt, '.') + 1)), INSTR(:r_rslt, '.')
				 INTO :v_numeric_result, :l_exist_decimals, :l_inst_decimals
				 FROM DUAL;

	
		v_numeric_result.arr[v_numeric_result.len]	= '\0';

		if (l_inst_decimals == 0)
			l_exist_decimals = 0;

		l_decimal_position = l_exist_decimals;


		for (i = l_exist_decimals;i < v_no_of_decimals; i++)
		{

				
				if (l_decimal_position == 0)
					strcat(r_rslt.arr, ".");				
	
				strcat(r_rslt.arr, "0");

				l_decimal_position++;

		}

		r_rslt.len = strlen(r_rslt.arr);

	
		for (i = 0; i < 10; i++)
		{
			rslt[i] = r_rslt.arr[i];
		}

		rslt[i] = '\0';

	    strcpy(r_rslt.arr, rslt);
	    r_rslt.len = strlen(r_rslt.arr);

    	strcpy(t_str, r_rslt.arr);

}

/*--------- added the below on 20.02.2006 -------------------------------------*/
get_test_units_desc_from_sy_uom()
{

   nd_test_units_desc.arr[0]		= '\0';      
   nd_test_units_desc.len		= 0;

   EXEC SQL SELECT  short_desc
			  INTO :nd_test_units_desc
		  	  FROM SY_UOM_lang_vw
			 WHERE uom_code = :nd_test_units
			 and language_id = :language_id;

	if (NO_DATA_FOUND)
	{
		strcpy(nd_test_units_desc.arr,nd_test_units.arr);    
		nd_test_units_desc.len = strlen(nd_test_units_desc.arr);
//		rl_tst_cd_test_units_desc.arr[rl_tst_cd_test_units_desc.len]	= '\0';

	}

    if (OERROR)
	{
		strcpy(nd_test_units_desc.arr,nd_test_units.arr);    
		nd_test_units_desc.len = strlen(nd_test_units_desc.arr);
	}

	nd_test_units_desc.arr[nd_test_units_desc.len]	= '\0';

}
/*------------------------------------------------------------*/
/****************************** added for globalisation *****************************/
get_legend_value(int cou)
 {
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLRLJGPH.LEGEND_');
	END;
	END-EXEC;

	for (i=1; i<=cou; i++)
	{
	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRLJGPH.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);
	}
 }


/****************************OCS MEDICOM ver 1.0*****************************
*  File	  : rlrwrkst.pc
   Author : S.Sheelvant 
   Date Created  : 13/02/1997
   Last Modified : 13/02/1997

*  Ver 1.10.01
   
*  Purpose : To generate a report for WORKLOAD STATISTICS.

*  Input Parameters : 
                      Command line inputs
		              1. Usr_id/Password
                      2. Session id
		              3. Program Date

                      Parameters from SY_PROG_PARAM table 
                      4. Preferred range of Departments 
                      5. Range of Months 
  
*  Table Accessed : RL_RESULT_WORKLOAD, RL_TEST_CODE

*  Output File : rlrwrkst.lis
 ****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <gl.h>
/*#include <string.h> */

#define MAX_LINES 55
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define ESC 0x1B
#define VER  "VER : 1.10.01\n"
#define REP_WIDTH 78
/*
#define DEBUG 1
*/
EXEC SQL BEGIN DECLARE SECTION;

       /* increased the length all varchar variables by one to take care */
       /* for null termination */
	VARCHAR  nd_operating_facility_id   [3],
	         uid_pwd		            [42],
		     nd_file_name               [150],
			 d_version_no			    [20],
			 d_version  			    [20],


        /* Variables to recieve data from RESULT_WORKLOAD cursor*/ 
        d_section_code          [2],
        d_test_code             [11],
		d_test_desc             [41],
		d_work_units            [8],
		d_no_of_tests           [6],
		d_jan                   [6],
		d_feb                   [6],
		d_mar                   [6],
        d_apr                   [6],
		d_may                   [6],
		d_jun                   [6],
		d_jul                   [6],
		d_aug                   [6],
		d_sep                   [6],
		d_oct                   [6],
		d_nov                   [6],
		d_dec                   [6],
		d_fr_month              [3],
        t_section_code          [2],  /* to perform section break */
        t_section_desc          [41],
        d_year                  [5],


                /* input parameters to main() */
        nd_session_id      	[16],
		nd_pgm_date	   	[20],
		nd_printer_name	   	[20],

		/* input parameters through from SY_PROG_PARAM */
        d_section_code_fm       [2],
		d_section_code_to       [2],
		d_date_from             [11],

		/* for header routine */
	    //d_acc_entity_name        [41],
		d_acc_entity_name        [300],
		d_user                   [31],
		d_sysdate                [17],
		d_sysdate1                [17],
		/* Added for globalization */
		l_translated_value		 [100],
		language_id			[5];

        int l_count = 0;
    	int  l_tab_exists ;
		int i;
	char local_legend[100][100];
	char hdr_line1[REP_WIDTH+1],
		 hdr_line2[REP_WIDTH+1],
		hdr_line3[REP_WIDTH+1];
int col;
char rep_title1[100] ;
char rep_title2[60];
int rec_len;


EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

int   line_no=0, page_no=1;
long   dept_no_of_tests = 0;
double dept_total_units = 0;
int test_printed = 0;
int fr_month = 0;
/* summary fields for calculating No. of records */ 
void print_page_header();
void print_col_heading();
void print_section_desc();
FILE *f1;
char string_var[100];

void proc_main(argc, argv)
int argc;
char *argv[];
{
  char command_line[300];
  void  get_params(),
  	get_header_dtls(),
  	dclr_result_workload(),
  	do_report();
	
   
   if(argc < 4) {
     disp_message(ORA_MESG,"Usage rlrwrkst uid/passwd session_id pgm_date\n");
     proc_exit();
   }

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   set_meduser_role();
	strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
	
   get_legend_value(24);

   gen_file_name();

   get_params();
   
   get_header_dtls();
   
   dclr_result_workload();
   
   do_report();
   

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL COMMIT WORK RELEASE;

   
   fclose(f1);
   return ;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();
}   


/* get the parameters from the SY_PROG_PARM table and */
/* delete the record after reading it.                 */
void get_params()
{
   /* read the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT OPERATING_FACILITY_ID,PARAM1,
		   PARAM2,
		   TO_CHAR(TO_DATE(PARAM3,'DD/MM/YYYY'),'DD/MM/YYYY'),
		   TO_CHAR(TO_DATE(PARAM3,'DD/MM/YYYY'),'MM'),
		   TO_CHAR(TO_DATE(PARAM3,'DD/MM/YYYY'),'YYYY')
            INTO :nd_operating_facility_id,:d_section_code_fm, 
		    :d_section_code_to,
            :d_date_from,
		    :d_fr_month,
		    :d_year
            FROM SY_PROG_PARAM
	    WHERE   PGM_ID = 'RLRWRKST'
		    AND SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND PGM_DATE = :nd_pgm_date;

   nd_operating_facility_id.arr[nd_operating_facility_id.len] = '\0';
   d_section_code_fm.arr[d_section_code_fm.len]     = '\0';
   d_section_code_to.arr[d_section_code_to.len]     = '\0';
   d_date_from.arr[d_date_from.len]   = '\0';
   d_fr_month.arr[d_fr_month.len] = '\0';
   d_year.arr[d_year.len] = '\0';


  /* delete the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DELETE SY_PROG_PARAM
	   WHERE PGM_ID = 'RLRWRKST'
	         AND SESSION_ID = :nd_session_id
		 AND PGM_DATE = :nd_pgm_date;

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_params() occured....\n");
   proc_exit();
}
 

/* get the header details */
void get_header_dtls()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT ACC_ENTITY_NAME, /* description of the institution */
		   USER,
		   TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')
	    INTO :d_acc_entity_name,
		 :d_user,
		 :d_sysdate
            FROM SY_ACC_ENTITY_LANG_VW
            WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			AND   LANGUAGE_ID = :language_id;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';

  
  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_header_dtls() occured....\n");
   proc_exit();
}
 

/* function declares RESULT_WORKLOAD cursor */
void dclr_result_workload()
{
  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  EXEC SQL DECLARE RESULT_WORKLOAD CURSOR FOR
     SELECT A.SECTION_CODE,A.TEST_CODE,A.LONG_DESC,NVL(A.WORK_UNITS,0),
	    NVL(B.JAN,0),NVL(B.FEB,0),NVL(B.MAR,0),NVL(B.APR,0),NVL(B.MAY,0),
	    NVL(B.JUN,0),NVL(B.JUL,0),NVL(B.AUG,0),NVL(B.SEP,0),NVL(B.OCT,0),
	    NVL(B.NOV,0),NVL(B.DEC,0)
     FROM   RL_TEST_CODE A, RL_RESULT_WORKLOAD B 
     WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id 
	   AND A.TEST_CODE = B.TEST_CODE
	   AND B.year = TO_NUMBER(:d_year)
       AND  A.SECTION_CODE BETWEEN :d_section_code_fm 
	                       AND :d_section_code_to
       AND  NVL(A.STATISTICS_YN,'N') = 'Y' 
     ORDER BY  A.SECTION_CODE, A.TEST_CODE;
   EXEC SQL OPEN RESULT_WORKLOAD;
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  
  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_result_workload() occured....\n");
   proc_exit();
}


/* prints the master-detail record until the cursor is empty */
void do_report()
{
  void print_rep_header();
  void prepare_new_page(); 
  void print_detl_rec();
  void end_report();
  void print_section_total();
  int fetch_result_workload();
  int still_rec_left;

  print_rep_header(); /*  once for the report */
  
  page_no += 1; /* icrement by 1 as it is moving to second page */
 
  print_page_header();
  
  /* read the first cursor record */
  still_rec_left = fetch_result_workload();

  print_section_desc();
  print_col_heading();
  line_no = 11;
  fr_month = atoi(d_fr_month.arr);
  while(still_rec_left)
  {
    strcpy(t_section_code.arr,d_section_code.arr);
    t_section_code.len = strlen(d_section_code.arr);
    while(still_rec_left && strcmp(d_section_code.arr,t_section_code.arr)==0)
    {
	if(line_no > MAX_LINES)
	  prepare_new_page();
	print_detl_rec();
        still_rec_left = fetch_result_workload();
    }
    print_section_total();
    if(still_rec_left)
       prepare_new_page();
  }

   if(line_no + 6 >= MAX_LINES)
       prepare_new_page();

  end_report();
}

void print_section_total()
{
 fprintf(f1,"\n\n********** D E P A R T M E N T   T O T A L **********  ");
 fprintf(f1,"%30ld%25.3f",dept_no_of_tests,dept_total_units);
 dept_no_of_tests = 0;
 dept_total_units = 0;
}

void print_section_desc()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT LONG_NAME /* description of the section */
	    INTO :t_section_desc
            FROM RL_SECTION_CODE_LANG_VW
	    WHERE SECTION_CODE = :d_section_code
		AND   LANGUAGE_ID = :language_id;

  t_section_desc.arr[t_section_desc.len] = '\0';
  fprintf(f1,"%-40s\n",t_section_desc.arr);

  
  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at print_section_desc() occured....\n");
   proc_exit();
}
   
/* prepares for the new page */
void prepare_new_page()
{
   
   page_no += 1; /* incr. by 1 to move to subsequent pages */
   fprintf(f1,"\f");
   print_page_header();
   print_section_desc();
   print_col_heading(); 
   line_no = 11;
}

/* fetches the next record from SPECIMEN REGISTER CURSOR */
/* returns 0 if the end of cursor is reached else returns 1. */
int fetch_result_workload()
{
  d_section_code.arr[0] = '\0';
  d_test_code.arr[0] = '\0';
  d_test_desc.arr[0] = '\0';
  d_work_units.arr[0] = '\0';
  d_jan.arr[0] = '\0';
  d_feb.arr[0] = '\0';
  d_mar.arr[0] = '\0';
  d_apr.arr[0] = '\0';
  d_may.arr[0] = '\0';
  d_jun.arr[0] = '\0';
  d_jul.arr[0] = '\0';
  d_aug.arr[0] = '\0';
  d_sep.arr[0] = '\0';
  d_oct.arr[0] = '\0';
  d_nov.arr[0] = '\0';
  d_dec.arr[0] = '\0';

  d_section_code.len = 0;
  d_test_code.len = 0;
  d_test_desc.len = 0;
  d_work_units.len = 0;
  d_jan.len = 0;
  d_feb.len = 0;
  d_mar.len = 0;
  d_apr.len = 0;
  d_may.len = 0;
  d_jun.len = 0;
  d_jul.len = 0;
  d_aug.len = 0;
  d_sep.len = 0;
  d_oct.len = 0;
  d_nov.len = 0;
  d_dec.len = 0;

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  EXEC SQL FETCH RESULT_WORKLOAD INTO
		d_section_code,
                d_test_code,
		d_test_desc,
		d_work_units,
		d_jan,      
		d_feb,    
		d_mar,     
                d_apr,    
		d_may,   
		d_jun,  
		d_jul, 
		d_aug,        
		d_sep,       
		d_oct,      
		d_nov,     
		d_dec ;   
   
  if (NODATAFOUND)
    return 0;

d_section_code.arr[d_section_code.len] = '\0';
d_test_code.arr[d_test_code.len]    = '\0';
d_test_desc.arr[d_test_desc.len]    = '\0';
d_work_units.arr[d_work_units.len]  = '\0';
d_jan.arr[d_jan.len]    = '\0';      
d_feb.arr[d_feb.len]    = '\0';    
d_mar.arr[d_mar.len]    = '\0';     
d_apr.arr[d_apr.len]    = '\0';
d_may.arr[d_may.len]    = '\0';   
d_jun.arr[d_jun.len]    = '\0';  
d_jul.arr[d_jul.len]    = '\0'; 
d_aug.arr[d_aug.len]    = '\0';        
d_sep.arr[d_sep.len]    = '\0';       
d_oct.arr[d_oct.len]    = '\0';      
d_nov.arr[d_nov.len]    = '\0';     
d_dec.arr[d_dec.len]    = '\0';   


  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_result_workload() occured....\n");
   proc_exit();
}

/************get_legend_value*******************/
get_legend_value(int cou)
 {
     
   
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLRWRKST.LEGEND_');
	END;
	END-EXEC;




 for (i=1; i<=cou; i++)
	{


	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRWRKST.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);

	

	}
	

 }
/****************End****************/
/**********PRINT SPACE*************/
print_space(int aa, int bb, int cc)
{
	if (cc ==1)
	{
  		for(i=1;i <= (aa - bb) ;i++)
		{
			fprintf(f1,"%s"," ");
		}	
	}
	else if (cc ==0)
	{
  		for(i= (aa - bb);i <= aa ;i++)
		{
			fprintf(f1,"%s","-");
		}	
	}
}
/**********end***************/
/* print the finishing line of the report */
void end_report()
{
  fprintf(f1,"\n\n\n");
  fprintf(f1,"\n");
  fprintf(f1,"                                                   ");
  fprintf(f1,"** End of Report **");
  fprintf(f1,"\f");
}

/* to print the detailed record */
void print_detl_rec()
{   long period_tests = 0;
    double period_units = 0;
    int i;
    long tests[12];
	char msg[100];
	
	tests[0] = (long)atoi(d_jan.arr);
    tests[1] = (long)atoi(d_feb.arr);
    tests[2] = (long)atoi(d_mar.arr);
    tests[3] = (long)atoi(d_apr.arr);
    tests[4] = (long)atoi(d_may.arr);
    tests[5] = (long)atoi(d_jun.arr);
    tests[6] = (long)atoi(d_jul.arr);
    tests[7] = (long)atoi(d_aug.arr);
    tests[8] = (long)atoi(d_sep.arr);
    tests[9] = (long)atoi(d_oct.arr);
    tests[10]= (long)atoi(d_nov.arr);
    tests[11]= (long)atoi(d_dec.arr);
    period_tests = tests[fr_month - 1];
    period_units = period_tests * atof((char *)d_work_units.arr);
    if (period_tests > 0) 
    {
       fprintf(f1,"%-15s%-45s%10.3f%15ld%25.3f\n",d_test_code.arr,
					     d_test_desc.arr,
					     atof((char *)d_work_units.arr),
					     period_tests,
					     period_units);
       dept_no_of_tests = dept_no_of_tests + period_tests;
       dept_total_units = dept_total_units + period_units;
       line_no = line_no + 1;
    }

return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at print_detl_rec() occured....\n");
   proc_exit();
}


/* to print the header page for the report */
void print_rep_header()
{
  char nd_fr_section_desc[16],
       nd_to_section_desc[16],
       nd_fr_process_date_desc[11],
       nd_to_process_date_desc[11];

  if(strcmp(d_section_code_fm.arr, "!") == 0)
    strcpy(nd_fr_section_desc, "LOWEST");
    else strcpy(nd_fr_section_desc, d_section_code_fm.arr);

  if(strcmp(d_section_code_to.arr, "~") == 0)
    strcpy(nd_to_section_desc, "HIGHEST");
    else strcpy(nd_to_section_desc, d_section_code_to.arr);

 get_mon_desc(nd_fr_process_date_desc,atoi(d_fr_month.arr));

  print_page_header();

  get_version_no();   ///// added 01.07.2003

///////// 01.07.2003  fprintf(f1,VER);

  fprintf(f1,"%s\n",d_version.arr);  

  fprintf(f1,"\n\n\n\n");
  
  /******************COMMENTED FOR GLOBALIZATION
  fprintf(f1,"        ");
  fprintf(f1,"INPUT PARAMETERS :\n");
  fprintf(f1,"        ");
  fprintf(f1,"------------------\n\n");
  fprintf(f1,"                ");
  fprintf(f1,"SECTION : \n");
  fprintf(f1,"                   FROM : %s\n", nd_fr_section_desc);
  fprintf(f1,"                   TO   : %s\n\n", nd_to_section_desc);
  fprintf(f1,"                ");
  fprintf(f1,"PERIOD  :\n");
  fprintf(f1,"                        : %s %4s\n",nd_fr_process_date_desc,d_year.arr);

  *********************END**************************/

  /***************ADDED BY BABU FOR GLOBALIZATION**********************/
  rec_len = strlen(local_legend[3]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s :\n",local_legend[3]);
  print_space(40, rec_len,1);//added for globalisation
  print_space(40, rec_len,0);//added for globalisation
  fprintf(f1,"\n");
  rec_len = strlen(local_legend[4]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s :\n",local_legend[4]);
  rec_len = strlen(local_legend[5]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s : %s\n",local_legend[5],nd_fr_section_desc);
  rec_len = strlen(local_legend[6]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s : %s\n",local_legend[6],nd_to_section_desc);
  rec_len = strlen(local_legend[7]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s : %s%4s \n",local_legend[7],nd_fr_process_date_desc,d_year.arr);
  
  
  
  

/**************************END*******************************/
						  
  fprintf(f1,"\f");
}


/* to print page headers the header details */ 
void print_page_header()
{
 register int i;
  char nd_fr_section_desc[16],
       nd_to_section_desc[16],
       nd_fr_process_date_desc[11],
       nd_to_process_date_desc[11];
   char buf[100];
  if(strcmp(d_section_code_fm.arr, "!!!!!!!!!") == 0)
    strcpy(nd_fr_section_desc, "LOWEST");
    else strcpy(nd_fr_section_desc, d_section_code_fm.arr);

  if(strcmp(d_section_code_to.arr, "~~~~~~~~~") == 0)
    strcpy(nd_to_section_desc, "HIGHEST");
    else strcpy(nd_to_section_desc, d_section_code_to.arr);

 get_mon_desc(nd_fr_process_date_desc,atoi(d_fr_month.arr));

fprintf(f1,"%c&l1O",ESC);
 /**************commented by babu for globalization******************

 fprintf(f1,"MDL : RL                                 ");
 fprintf(f1,"%-30.30s", d_acc_entity_name.arr);
 fprintf(f1,"                     ");  
 fprintf(f1,"%s", d_sysdate.arr);
 fprintf(f1,"\n");
 fprintf(f1,"OPR : %-21.21s", d_user.arr);
 fprintf(f1,"             WORKLOAD STATISTICS                                 ");  
 fprintf(f1,"Page : %4d", page_no);
 fprintf(f1,"\n");
 fprintf(f1,"REP : RLRWRKST");
 fprintf(f1,"                                     ");
 fprintf(f1,"For The Period %-10s %4s ",nd_fr_process_date_desc,
	     d_year.arr);
**********************************end ********************/

  /**********************Added by babu for globalization****************************/
	  fprintf(f1,"\n");
	  memset(hdr_line1,' ',REP_WIDTH+1);
	  memset(hdr_line2,' ',REP_WIDTH+1);
	  memset(hdr_line3,' ',REP_WIDTH+1);
        strncpy(hdr_line1,"MDL:RB",6);
        col = (int)(REP_WIDTH - strlen(d_acc_entity_name.arr))/2;
        strncpy(hdr_line1 + col -1,d_acc_entity_name.arr,strlen(d_acc_entity_name.arr));
        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				
				BEGIN
				t_date:=GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
				:d_sysdate1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
				END;
			END-EXEC;
		col = (REP_WIDTH-strlen(d_sysdate1.arr));
		strcpy(hdr_line1+col,d_sysdate1.arr);

		  strncpy(hdr_line2,"OPR:",4);
		  strncpy(hdr_line2+4,d_user.arr,strlen(d_user.arr));
		  strcpy(rep_title1, local_legend[8] );
		  col = (int)(REP_WIDTH-strlen(rep_title1))/2;
		  strncpy(hdr_line2+col,rep_title1,strlen(rep_title1));
		  sprintf(buf,"%s : %4d",local_legend[1],page_no);
		  strcpy(hdr_line2+(REP_WIDTH-strlen(buf)),buf);
    	  fprintf(f1,hdr_line1);
		  fprintf(f1,"\n");
		  fprintf(f1,hdr_line2);
		  fprintf(f1,"\n");
		  strncpy(hdr_line3,"REP : RLRWRKST",14);
   		  sprintf(buf,"%s %-10.10s - %-10.10s",local_legend[9],nd_fr_process_date_desc,d_year.arr); 
		  col = (int)(REP_WIDTH-strlen(buf))/2;
		  strcpy(hdr_line3+col,buf);
         
		 fprintf(f1,hdr_line3);
	     fprintf(f1,"\n");


/**********************end by babu for globalization****************************/  




 
 
 fprintf(f1,"\n");


 fprintf(f1,"--------------------------------------------------------------------");
 fprintf(f1,"----------------------------------------------------------------");
 fprintf(f1,"\n");
}

get_mon_desc(mon_desc,mon)
char *mon_desc;
int mon;
{
    switch(mon)
    {
      case 1:   strcpy(mon_desc,"JANUARY");break;
      case 2:   strcpy(mon_desc,"FEBRUARY");break;
      case 3:   strcpy(mon_desc,"MARCH");break;
      case 4:   strcpy(mon_desc,"APRIL");break;
      case 5:   strcpy(mon_desc,"MAY");break;
      case 6:   strcpy(mon_desc,"JUNE");break;
      case 7:   strcpy(mon_desc,"JULY");break;
      case 8:   strcpy(mon_desc,"AUGUST");break;
      case 9:   strcpy(mon_desc,"SEPTEMBER");break;
      case 10:  strcpy(mon_desc,"OCTOBER");break;
      case 11:  strcpy(mon_desc,"NOVEMBER");break;
      case 12:  strcpy(mon_desc,"DECEMBER");break;
    }
}
/* print the heading */
void print_col_heading()
{
 //fprintf(f1,"TEST CODE      TEST DESCRIPTION                             WORK UNITS        NO. OF TESTS         TOTAL UNITS\n"); 
 fprintf(f1,"%-9.9s      %-16.16s                             %-10.10s        %-12.12s         %-11.11s\n",local_legend[10],local_legend[11],local_legend[12],local_legend[13],local_legend[14]); 
 fprintf(f1,"--------------------------------------------------------------------");
 fprintf(f1,"----------------------------------------------------------------");
 fprintf(f1,"\n");
}
/*--------------------------------------------------------------------------*/
gen_file_name()
{
     /*nd_file_name.arr[0]   = '\0';
     nd_file_name.len      = 0;
     EXEC SQL SELECT DECODE(PRINT_FILE_NO,NULL,'0',TO_CHAR(PRINT_FILE_NO)),
		     LOWER(USER)
	      INTO   :nd_file_no,
		     :nd_user
	      FROM   RL_PARAM;

     if (OERROR)
         err_mesg("Fetch failed on table RL_PARAM",0,"");
      
     nd_file_no.arr[nd_file_no.len] = '\0';
     nd_user.arr[nd_user.len] = '\0';
     sprintf(nd_file_name.arr,"rlrhpwkl_%s.lis",nd_file_no.arr);*/

     
	 /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 strcat(nd_file_name.arr,"rlrwrkst.lis");
	 nd_file_name.len = strlen(nd_file_name.arr);
	 if ((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var) ;
       proc_exit();
     }

}

////////////////// 

get_version_no()
{

////////    This function is used to get the version number of the product.
///////      Added by Srinivas on 1 July 2003

     d_version_no.arr[0] = '\0';
     d_version_no.len    =  0;

     strcpy(d_version.arr,"VER : ");

	 EXEC SQL EXECUTE 
	      begin
			if SM_INSTALLATION_TAB_CHECK THEN
			   :l_tab_exists := 1;
			else
			   :l_tab_exists := 0;
			end if;
		  end;
	 END-EXEC;


    if (l_tab_exists) 
    {
	    EXEC SQL SELECT VERSION_NO INTO :d_version_no 
                 FROM   SM_INSTALLATION; 
        d_version_no.arr[d_version_no.len] = '\0';
    }
    else
	    strcpy(d_version_no.arr,"2.1");

	    strcat(d_version.arr,d_version_no.arr);


    if (OERROR)
	{
	    strcpy(d_version_no.arr,"2.1");
	    strcat(d_version.arr,d_version_no.arr);
    }

}
//////////// UPTO HERE   



#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER

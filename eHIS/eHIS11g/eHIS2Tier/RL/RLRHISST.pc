/*
#define DEBUG
*/

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <rl.h>

#define MAX_LINES 45
#define OERROR (sqlca.sqlcode < 0)
#define NO_DATA_FOUND sqlca.sqlcode==1403
#define VER  "VER : 1.10.01\n"
#define ESC 0x1B


EXEC SQL BEGIN DECLARE SECTION;

VARCHAR  nd_facility_id           [3]  ,
         nd_from_date             [20] ,
         nd_from_date1             [20] , //added for globalisation
		 nd_to_date               [20] ,
		 nd_to_date1               [20] , //added for globalisation
		 nd_task_code			  [6]  ,
		 nd_task_desc			  [31] ,
		 //d_acc_entity_name        [61] ,
		 d_acc_entity_name        [300] ,
		 d_user                   [21] ,
		 d_sysdate                [17] ,
		 d_sysdate1                [17] , // adde4d fror globalisation
		 d_version_no			  [20] ,
		 d_version  			  [20] ,
		 uid_pwd		          [91] ,
		 nd_user_id               [21] ,
		 nd_session_id            [16] ,
		 nd_pgm_date	          [20] , 
		 nd_user	              [15] ,
		 nd_section_code		  [3]  ,
		 nd_file_name			  [150],
		/***************added for globalisation*************************/
		l_translated_value		 [500],
		language_id			[5];
		/***************added for globalisation*************************/

	 int nd_task_count,
		 nd_work_unit = 0,
		 nd_work_load = 0,
		 l_tab_exists ;

	int i; //added for globalisation

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

FILE *f1;
char filename[150];
char string_var[500];
int line_no;
int page_no;

char local_legend[35][500];//added for globalisation

void proc_main(argc, argv)
int argc;
char *argv[];
{
	
	void get_header_dtls();
	void gen_file_name();

	if(argc < 4) 
	{
     disp_message(ORA_MESG,"Usage rlrhisst uid/passwd session_id pgm_date\n");
     proc_exit();
    }

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   strcpy(OUTPUT_FILE_NAME, argv[5]);
  
   
   strcpy(nd_facility_id.arr, argv[6]);
   nd_facility_id.len = strlen(nd_facility_id.arr);

   strcpy(nd_from_date.arr, argv[7]);
   nd_from_date.len = strlen(nd_from_date.arr);

   strcpy(nd_to_date.arr,argv[8]);
   nd_to_date.len = strlen(nd_to_date.arr);


   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   if(OERROR)
      disp_message(ORA_MESG,"Failed to connect\n: \n");
    
	set_meduser_role();
/*********************** added for globalisation ******************************/
    strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
/*********************** added for globalisation ******************************/
	get_legend_value(12);

	get_header_dtls();
	gen_file_name(); 
	print_page_header();
    get_version_no();
	do_report();

    fprintf(f1,"%cE",ESC);	

	fclose(f1);	 
  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();	
	
}	


/*------------------ GENERATE FILE NAME ----------------*/
void gen_file_name()
{

  	 /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 //strcat(nd_file_name.arr,"rlrhisst.lis");
	 strcat(nd_file_name.arr,OUTPUT_FILE_NAME);
	 nd_file_name.len = strlen(nd_file_name.arr);

	 if((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var) ;
       proc_exit();
     }
    
}

/*------------------ GET HEADER DETAILS -------------------*/
void get_header_dtls()
{
     d_acc_entity_name.arr[0]   = '\0';
	 d_acc_entity_name.len		= 0;
	 d_user.arr[0]				= '\0';
	 d_user.len                 = 0;
	 d_sysdate.arr[0]			= '\0';
	 d_sysdate.len              = 0;


   EXEC SQL SELECT ACC_ENTITY_NAME,
				   USER,
				   TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')
			  INTO :d_acc_entity_name,
				   :d_user,
			       :d_sysdate
              FROM SY_ACC_ENTITY_lang_vw
			 WHERE ACC_ENTITY_ID = :nd_facility_id
			 and language_id = :language_id;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';


    if (OERROR)
	{
		sprintf(string_var,"get_header_dtls() -> %s\n", sqlca.sqlerrm.sqlerrmc);
		disp_message(ORA_MESG, string_var);
     }

	 if (NO_DATA_FOUND)
        return 0;

  return;
}


/*------------------ PRINT PAGE HEADER -------------------*/
print_page_header()
{
 register int i;
 char nd_f_date[20],
      nd_t_date[20];
 int spc_len;


        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_from_date,'DD/MM/YYYY'), :language_id , t_date);
				:nd_from_date1 := to_char(t_date,'DD/MM/YYYY');
				END;
			END-EXEC;

        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_to_date,'DD/MM/YYYY'), :language_id , t_date);
				:nd_to_date1 := to_char(t_date,'DD/MM/YYYY');
				END;
			END-EXEC;

  if(strcmp(nd_from_date.arr, "!") == 0)
    //strcpy(nd_f_date, "LOWEST");
    strcpy(nd_f_date, local_legend[1]);
    else strcpy(nd_f_date, nd_from_date1.arr);

  if(strcmp(nd_to_date.arr, "~") == 0)
    //strcpy(nd_t_date, "HIGHEST");
    strcpy(nd_f_date, local_legend[2]);
    else strcpy(nd_t_date,nd_to_date1.arr);

 line_no = 0;
 page_no++;

 fprintf(f1,"%c&l1O",ESC);
 fprintf(f1,"%c&k4S",ESC);
 fprintf(f1,"\n") ;	

  fprintf(f1,"MDL : RL");
  spc_len = (94 - (strlen(d_acc_entity_name.arr)))/2;
  for(i=1;i<=spc_len;i++)
  fprintf(f1," ");
  //fprintf(f1,"%-60.60s", d_acc_entity_name.arr);
  fprintf(f1,"%s", d_acc_entity_name.arr);
  for(i=1;i<=spc_len;i++)
  fprintf(f1," ");
        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_sysdate,'DD/MM/YYYY'), :language_id , t_date);
				:d_sysdate1 := to_char(t_date,'DD/MM/YYYY');
				END;
			END-EXEC;

  fprintf(f1,"%s", d_sysdate1.arr);
  fprintf(f1,"\n");
 fprintf(f1,"OPR : %s", d_user.arr);
 fprintf(f1,"                    ") ;
 //fprintf(f1,"        HISTOPATHOLOGY STATISTICS                          ");
 fprintf(f1,"        %30.30s                          ", local_legend[3]); //added for globalisation
 //fprintf(f1,"        Page : %4d", page_no);
 fprintf(f1,"        %-4.4s : %4d", local_legend[4], page_no);
 fprintf(f1,"\n");
 fprintf(f1,"REP : RLRHISST");
 //fprintf(f1,"                     DATE  FROM : %s TO : %s                           ",nd_f_date,nd_t_date);
 fprintf(f1,"                   %6.6s  %4.4s : %s %-2.2s : %s                           ",local_legend[5],local_legend[6],nd_f_date,local_legend[7], nd_t_date);
 fprintf(f1,"\n");


 fprintf(f1,"-------------------------------------------------------------------------------");
 fprintf(f1,"---------------------------------------------------") ;
 fprintf(f1,"\n");
 //fprintf(f1,"\n\n                                                               WORK    WORK");
 fprintf(f1,"\n\n                                                               %-5.5s    %-5.5s", local_legend[8], local_legend[8]);
 //fprintf(f1,"\n            TASK                                      COUNT    UNIT    LOAD");
 fprintf(f1,"\n            %-4.4s                                      %-5.5s    %-4.4s    %-4.4s", local_legend[9], local_legend[10], local_legend[11], local_legend[12]);
 fprintf(f1,"\n           ----------------------------------------   ------  ------  ------ \n");
 

 line_no = line_no + 12;
}

/*------------------------ VERSION NO --------------------*/
get_version_no()
{

////////    This function is used to get the version number of the product.
///////      Added by Srinivas on 1 July 2003

     d_version_no.arr[0] = '\0';
     d_version_no.len    =  0;

     strcpy(d_version.arr,"VER : ");

	 EXEC SQL EXECUTE 
	      begin
			if SM_INSTALLATION_TAB_CHECK THEN
			   :l_tab_exists := 1;
			else
			   :l_tab_exists := 0;
			end if;
		  end;
	 END-EXEC;


    if(l_tab_exists) 
    {
	    EXEC SQL SELECT VERSION_NO INTO :d_version_no 
                 FROM   SM_INSTALLATION; 
        d_version_no.arr[d_version_no.len] = '\0';
    }
    else
	    strcpy(d_version_no.arr,"2.1");

	    strcat(d_version.arr,d_version_no.arr);


    if(OERROR)
	{
	    strcpy(d_version_no.arr,"2.1");
	    strcat(d_version.arr,d_version_no.arr);
    }

}


dclr_task_cur()
{

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;

  EXEC SQL DECLARE task_cur CURSOR FOR 
		    SELECT task_code,count(1) task_count
			  FROM rl_sample_task_dtl 
			 WHERE operating_facility_id = :nd_facility_id
			   AND task_ordered_at >= TO_DATE(:nd_from_date,'DD/MM/YYYY')
			   AND task_ordered_at < TO_DATE(:nd_to_date,'DD/MM/YYYY') + 1
			 GROUP BY task_code 
			 ORDER BY task_code;

   EXEC SQL OPEN task_cur;

   return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_test_cur() occured....\n");
   proc_exit();	
 }


int fetch_task_code()
{

  nd_task_code.arr[0]  = '\0';  
  nd_task_code.len     = 0;  

  
  EXEC SQL FETCH task_cur 
            INTO :nd_task_code,:nd_task_count;

  nd_task_code.arr[nd_task_code.len]  = '\0';


  if (OERROR)
	{
		sprintf(string_var,"%s  fetch_task_code() -> %s\n", sqlca.sqlerrm.sqlerrmc);
		disp_message(ORA_MESG, string_var);
	 }

 if (NO_DATA_FOUND)
	return 0;

  return 1;
	
 }

/*------------------- GET TASK CODE -------------------*/
do_report()
{

  dclr_task_cur();
  
  while (fetch_task_code())
   {
	 
	 nd_task_desc.arr[0] = '\0';
     nd_task_desc.len	 = 0;

	 EXEC SQL SELECT SUBSTR(long_desc,1,30) long_desc,
	                 nvl(work_units,0) work_unit
			    INTO :nd_task_desc,
				     :nd_work_unit
			    FROM RL_TASK_MAST
			   WHERE /*section_code = :nd_section_code
			     AND */task_code    = :nd_task_code; 

	  if (OERROR)
		{
			sprintf(string_var,"%s  fetch_task_code() -> %s\n", sqlca.sqlerrm.sqlerrmc);
			disp_message(ORA_MESG, string_var);
		 }

	 if (NO_DATA_FOUND)
		return 0;

	 nd_task_desc.arr[nd_task_desc.len] = '\0';
	 
	 nd_work_load = nd_work_unit * nd_task_count;
	 
	 fprintf(f1,"           %4.4s  %-30.30s      %6d  %6d  %6d\n",nd_task_code.arr,nd_task_desc.arr,nd_task_count,nd_work_unit,nd_work_load);
	 line_no += 1;
	 chk_break(3);
     
    }

   EXEC SQL CLOSE task_cur;	   

 
 }

/*--------------------------------------------------------*/
chk_break(int lin)
{
   if((line_no + lin) >= MAX_LINES)
   {
     fprintf(f1,"\f");
	 print_page_header();
	 line_no += 1;
   }
}

/****************************** added for globalisation *****************************/
get_legend_value(int cou)
 {
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_facility_id,:language_id,'RLRHISST.LEGEND_');
	END;
	END-EXEC;

	for (i=1; i<=cou; i++)
	{
	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRHISST.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);
	}
 }

print_space(int aa, int bb, int cc)
{
	if (cc ==1)
	{
  		for(i=1;i <= (aa - bb) ;i++)
		{
			fprintf(f1,"%s"," ");
		}	
	}
	else if (cc ==0)
	{
  		for(i= (aa - bb);i <= aa ;i++)
		{
			fprintf(f1,"%s","-");
		}	
	}
}

/*************************** added for globalisation*************************************/


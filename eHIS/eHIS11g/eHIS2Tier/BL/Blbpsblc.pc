/************************************************************************/
/* OCS MEDICOM VER 1.10                                                 */
/************************************************************************/
/* PROGRAM NAME          : BLBPSBLC.PC                                  */
/* AUTHOR                : NITIN NAIK                                   */
/* Converted To Windows  : Prasad B G S 3/7/96                          */
/* DATE WRITTEN          : 10-SEP-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                               */ 
/*                                                                      */  
/*  FUNCTION             : Post Bills and Cashier Transactions          */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*       S. No.       TABLENAMES                 INPUT/OUTPUT           */
/*           1.       BL_RECEIPT_REFUND_DTL      Query/Update           */
/*           2.       BL_SLMT_CASH_COUNTER       Query                  */
/*           3.       BL_GL_ACCOUNT              Query                  */
/*           4.       BL_SLMT_TYPE               Query                  */
/*           5.       BL_DCP_TRN                 Insert                 */
/*           6.       BL_GL_DISTRIBUTION         Insert                 */
/*           7.       BL_PATIENT_LEDGER_TRN      Insert                 */
/*           8.       AR_REC_HDR                 Insert                 */
/*           9.       SY_PROG_PARAM              Query/Delete           */
/*          11.       BL_PARAMETERS              Query                  */
/*          12.       BL_BILLS_FOR_CONS_RECEIPT  Query/Update           */
/*          13.       BL_BILLS_FOR_CONS_RCPT_CANC Query/Update          */
/************************************************************************/
                   
/*
#define DEBUG         
*/

                 
#define RECORD_EXISTS  sqlca.sqlerrd[2]
#define LAST_ROW (sqlca.sqlcode == 1403)
#define ROW_COUNT (sqlca.sqlerrd[2])
#define BANK (0)
#define OTHER (1)
#define RECREF (0)
#define BILL (1)
#define RD (2)
#define DC (3)
#define VIEW_LOG_FILE 1

#include <stdio.h>  
#include <string.h>
#include <bl.h>

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR uid_pwd					[91],
            d_session_id			[20],
            d_pgm_date				[20],
	    nd_operating_facility_id	[3],
	    nd_cash_counter_code        [7] ,
	    nd_shift_id				    [2],
	    nd_reason_text				[51],
		nd_reason_text_for_update	[51],
        nd_date						[13];		

    /* STATIC INFORMATION */
    VARCHAR hosp_name				[30],
            date_time				[30],
            user_id					[40],
            blparam_post_month		[3],   
            blparam_post_year		[5],
			nd_acc_entity_code		[5];


    long    next_doc_no				= 0,
            t_df_pay_alcn_num		= 0,   
            next_line_no			= 0;

            /* BL_RECEIPT_REFUND_DTL */

    VARCHAR recref_rowid				[21], 
		    nd_dcp_bill_type_code		[3],
            recref_recpt_refund_ind		[2],
            recref_doc_type_code		[7],
            recref_doc_number			[9],
			recref_doc_srno				[5],
            recref_trx_type_code		[2],
            recref_recpt_nature_code	[3],
            recref_debtor_category_code	[2],
            recref_doc_date				[13],
            recref_post_month			[3],
            recref_post_year			[5],	    
            recref_trx_date_time		[12],	 
            recref_episode_type			[2],
            recref_patient_id			[21],
            recref_episode_id			[9],
            recref_visit_id				[5],
            recref_bill_doc_type_code	[7],
            recref_bill_doc_number		[9],
            recref_customer_code		[9],
            recref_cash_counter_code	[7],
            recref_shift_id				[2],
            recref_doc_amt				[21],
            recref_doc_amt_negative		[21],
            recref_recpt_type_code		[4],
            recref_slmt_type_code		[3],
            recref_slmt_doc_ref_desc	[21],
            recref_slmt_doc_ref_date	[13],
            recref_slmt_doc_remarks		[31],
            recref_bank_recon_ref		[11],
            recref_print_flag			[2],
			t_bill_print_flag			[2],
            recref_cancelled_ind		[2],
			recref_dcp_ind				[2],
            recref_posted_ind			[2],
            recref_narration			[51],
			recref_cons_receipt_yn		[2],
            blsl_slmt_desc				[11],

            /* DERIVED FIELDS */

		    disc_post_month				[3],
            disc_post_year				[5],

			wo_post_month				[3],
			wo_post_year				[5],

            bankac_main_acc1_code		[7],
            bankac_main_acc2_code		[5],
            bankac_dept_code			[11],
            bankac_subledger_group_code	[4],
            bankac_subledger_line_code	[9],
            bankac_product_group_code	[4],
            bankac_product_line_code	[5],	    

            othrac_main_acc1_code		[7],
            othrac_main_acc2_code		[5],
            othrac_dept_code			[11],
            othrac_subledger_group_code	[4],
            othrac_subledger_line_code	[9],
            othrac_product_group_code	[4],
            othrac_product_line_code	[5],
	    othrac_recpt_type_code			[3],
            dr_main_acc1_code			[7],
            dr_main_acc2_code			[5],
            dr_dept_code				[11],
            dr_subledger_group_code		[4],
            dr_subledger_line_code		[9],
            dr_product_group_code		[4],
            dr_product_line_code		[5],

            cr_main_acc1_code			[7],
            cr_main_acc2_code			[5],
            cr_dept_code				[11],
            cr_subledger_group_code		[4],
            cr_subledger_line_code		[9],
            cr_product_group_code		[4],  
            cr_product_line_code		[5],

            xxxxxx_main_acc1_code		[7],
            xxxxxx_main_acc2_code		[5],
            xxxxxx_dept_code			[11],
            xxxxxx_subledger_group_code	[4],
            xxxxxx_subledger_line_code	[9],
            xxxxxx_product_group_code	[4],
            xxxxxx_product_line_code	[5],    
            xxxxxx_doc_amt				[21],
            dflt_dept_code				[11],
            blpat_doc_amt				[21],
			nd_ws_no					[31],
			nd_doc_type					[7],
			nd_doc_num					[35],   
			nd_doc_date					[30],
			nd_dummy					[30],
			nd_bill_doc_type_code		[7],
			nd_bill_doc_num				[9];

    VARCHAR patltr_rowid				[21],
            patltr_max_line_num			[10],
            pendoc_rowid				[21],
            pendoc_max_line_num			[10];
	 

    char    dummy,
	    d_pmnt_mode,
	    l_mesg[300],
	    nd_cash_control_use_flag,
	    d_pmnt_status;

    /******* TEMP **********/

		VARCHAR	t_doc_type_code     [7],
				t_doc_num           [9],
				t_doc_date          [13],
				t_dpf_doc_type_code [7],
				t_dpf_doc_number    [9],
				t_bill_type_code    [3],
                t_overall_int_code  [7],
                t_round_int_code    [7],
                t_man_int_code      [7],
                t_bill_type_int_code[7],
				t_bill_disc_recv_acc_int_code[7],
                t_tot_disc_char     [21],
                t_tot_disc_nega     [21],
                t_man_disc_char     [21],
                t_man_disc_nega     [21],
				t_physician_id      [16];

    char	t_bill_posted_flag,
			t_bill_status;

    double      t_bill_drfee_tot_amt,
				t_bill_drfee_tot_outst_amt,
				t_bill_hosp_tot_outst_amt,
				t_drfee_amt,
                t_org_rec_amt,
                t_man_disc_amt,
                t_tot_disc_amt,
                t_overall_disc_amt,
				t_recpt_amt,
				tot_alloc_amt;

    double      rec_remaining_amt,
                df_pend_amt,
                cust_outst_amt,
                df_alloc_amt,
				t_round_amt;    

	
    VARCHAR	df_doc_type_code     [7],
			df_doc_num           [9],
			df_doc_date          [13],
			visit_id_fm          [5],
			visit_id_to          [5],
			df_physician_id      [16],
			t_sign_ind           [2];


    VARCHAR t_episode_type         [2],
	        t_patient_id           [21],
			t_episode_id           [9],
			t_visit_id             [5],
			t_bill_trx_type_code   [2],
			t_bill_nature_code     [2],
			t_bill_tot_amt         [23],
			t_bill_tot_outst_amt   [23],
			t_prv_bill_tot_outst_amt [23],
			t_added_by_id          [31],
			t_modified_by_id       [31],
			t_added_date           [31],
			t_modified_date        [31];

   long t_ref_num,
		t_start_ref_num,
		ae_doc_slno,
		ae_post_month,
		ae_post_year,                              
		ae_episode_id,                             
		ae_visit_id,
		wo_doc_slno,
		wo_episode_id,
		wo_visit_id;
    
VARCHAR t_tmp_date			[9],
		nd_error_level		[10],
		nd_sys_message_id	[10],
		nd_error_text		[1000];

    VARCHAR     c_recpt_refund_ind      [2],
                c_doc_type_code         [7],
                c_doc_number            [9],
				c_doc_srno              [5],
                c_cancelled_ind         [2],
                c_bounced_yn            [2],
                c_bounced_status_ind    [2],
                c_narration             [51],
				c_cancelled_date        [13],
				c_bounced_date          [13],
				c_bounced_status_date   [13],
				c_post_date             [13],
				c_trx_rowid				[21],
				c_cons_rec_yn			[2],
				c_bill_doc_type_code    [7],
				c_bill_doc_num			[9],
				ae_rowid				[30],
				ae_doc_type_code		[7],                   	       	                                      
				ae_doc_num				[20],
				ae_doc_date				[30],                                
				ae_adj_exempt_acc_int_code[7],                
				ae_adjust_exempt_ind	[2],                      
				ae_posted_ind			[2],	                                    	       
				ae_bill_type_code		[3],
				ae_unposted_reason		[51],                        
				ae_episode_type			[2],	       	       
				ae_adj_doc_type_code	[7],               	       
				ae_adj_doc_num			[30],
				ae_adj_doc_date			[30],
				ae_remarks				[201],                    	
				ae_bill_dcp_ind			[2],
				ae_trx_type_code		[2],
				ae_patient_id			[21],
				ae_doc_amt				[30],
				ae_doc_rev_amt			[30],
				ae_cancelled_ind		[2],
				ae_adj_exm_doc_ref		[31],
				ae_cust_code			[9],
				wo_rowid				[30],
				wo_doc_type_code		[7],
				wo_doc_num				[20],
				wo_doc_date				[30],	
				wo_posted_ind			[2],
				wo_episode_type			[2],
				wo_org_doc_type_code	[7],
				wo_org_doc_num			[30],
				wo_org_doc_date			[30],
				wo_remarks				[201],
				wo_trx_type_code		[2],
				wo_bill_type_code		[3],
				wo_bill_recv_int_code	[7],
				wo_int_code				[7],
				wo_patient_id			[21],
				wo_doc_amt				[30],
				wo_doc_rev_amt			[30],
				wo_org_num				[30],
				wo_cust_code			[9];	

    int         amt_sign_ind;
				
    int         err_ctr = 0,
				l_dcp_trn_rec_exist = 0;

	int    		bl_mth,
	   			bl_yr,
	   			cur_mth,
	   			cur_yr,
           		nd_month,
           		nd_year;

    VARCHAR df_rct_doc_type_code[7],
			df_rct_doc_num      [9],
			df_rct_doc_date     [13],
			df_slmt_type_code   [3];
	
    double  df_interface_amt;

    char	d_ip_gl_yn,
			d_op_gl_yn,
			d_rf_gl_yn;

	char	string_var[1000];
	char	msg_str_var[1000];

    /***********************/

EXEC SQL END DECLARE SECTION;

char msg_str[132];


 EXEC ORACLE OPTION(HOLD_CURSOR = YES);
// EXEC ORACLE OPTION(REBIND = NO);

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

void get_param(),
     sql_connect(),
     declare_cur(),
     open_recref_dtl(),
     ins_blgl_distrib(),
     ins_arrec_hdr(),
     ins_bldcp_trn(),
     ins_blpat_ledger_trn(),
     get_static_info(),
     get_slmt_desc(),
     get_bank_acc(),
     get_other_acc(int i),
     move_into_post_acc(int i),
     open_recref_dtl_bl(),
     init_old(),
     //declare_df_phys_ldgr_cur(),
    // open_df_phys_ldgr_cur(),
     update_recref_dtl(),
     open_bl_bill_adj_exempt_cur(), 
     open_bl_bill_adj_canc_cur(),
     get_bank_acc_ae(),
     get_other_acc_ae(int i),
     move_into_post_acc_ae(int i),
     update_bill_adj_exempt(),
     update_bill_adj_exempt_canc(),
     ins_blgl_distrib_ae(),
     ins_bldcp_trn_ae();

int  fetch_recref_dtl(),
     fetch_df_phys_ldgr(),
     insrt_df_pay_alcn(),
     fetch_recref_dtl_bl(),
     fetch_bl_bill_adj_exempt_cur(),
     fetch_bl_bill_adj_canc_cur();


char old_slmt_type_code[3],
     old_cash_counter_code[7];

int g_error;
int g_savepoint;

void proc_main(argc,argv)  
int argc;
char *argv[];
{

    if(argc < 7) {
	/*disp_message(ERR_MESG,argv[1]);
	disp_message(ERR_MESG,argv[2]);
	disp_message(ERR_MESG,argv[3]);
	disp_message(ERR_MESG,argv[4]);
	disp_message(ERR_MESG,argv[5]);
	disp_message(ERR_MESG,argv[6]);
	disp_message(ERR_MESG,argv[7]);*/
	disp_message(ERR_MESG,"Usage : BLBPSBLC userid/password session_id pgm_date Facility Ws-No");
        proc_exit();
    }

    strcpy(uid_pwd.arr,argv[1]);
    uid_pwd.len = strlen(uid_pwd.arr);

    strcpy(d_session_id.arr,argv[2]);
    d_session_id.len = strlen(d_session_id.arr);
    strcpy(g_session_id,argv[2]);
    
    strcpy(d_pgm_date.arr,argv[3]);
    d_pgm_date.len = strlen(d_pgm_date.arr);

    strcpy(g_pgm_id,"BLBPSTFL");
    strcpy(g_pgm_date,argv[3]);

    strcpy(nd_operating_facility_id.arr,argv[5]);
    nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr);  
    strcpy(g_facility_id,nd_operating_facility_id.arr);

    strcpy(nd_ws_no.arr,argv[6]);
    nd_ws_no.len = strlen(nd_ws_no.arr);  

    sql_connect();    

    set_meduser_role();   

    start_prog_msg();

    /** NK **/
    t_start_ref_num = 0;

//disp_message(ERR_MESG,"After start prog mesg");

    get_param();

//disp_message(ERR_MESG,"After get param");

    get_static_info();

//disp_message(ERR_MESG,"After get  static info");

    declare_cur();

//disp_message(ERR_MESG,"After declare cur");

    cash_control_use_chec();
   
//disp_message(ERR_MESG,"After cash control use check...");

    process_dpf();

   //disp_message(ERR_MESG,"After  process DPF..");
   //disp_message(ERR_MESG,"nd_bill_doc_type_code:");
   //disp_message(ERR_MESG,nd_bill_doc_type_code.arr);

    if (nd_bill_doc_type_code.arr[0] != '\0')           /* Added the enhancement on 26-MAR-2007 */
			  {
						end_prog_msg();

						EXEC   SQL DELETE SY_PROG_PARAM
						WHERE  PGM_ID     = 'BLBPSTFL' 
						AND    PGM_DATE   = :d_pgm_date
						AND    SESSION_ID = :d_session_id
						AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;

						if(OERROR) 
							err_mesg("DELETE failed on table SY_PROG_PARAM",0,""); 
 
						EXEC SQL COMMIT WORK RELEASE;

						return; 
			  }

//disp_message(ERR_MESG,"After aggr doc type code if...");

    open_recref_dtl();

//disp_message(ERR_MESG,"After recref dtl...");
    g_error = 0;
    g_savepoint = 0;

    

    while(fetch_recref_dtl())
    { 
      if(g_error) do_rollback();

      EXEC SQL SAVEPOINT LAST_DOC_REF;     

      if (OERROR)
         err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

      g_savepoint = 1;

      upd_reasons_in_receipt_refund_for_unposting(1) ; 	 

      if (nd_reason_text.arr[0] != '\0')
         continue;      

      if (brk_slmt())
      {  
	 get_bank_acc();
	 if(g_error) continue;
             get_slmt_desc();
      }
      else if (brk_cash())
        get_bank_acc();

      if(g_error) continue;

      if ((strcmp(recref_recpt_nature_code.arr, "AD")==0) ||
         (strcmp(recref_recpt_nature_code.arr, "PR")==0)  ||
         (strcmp(recref_recpt_nature_code.arr, "RD")==0)  ||
         (strcmp(recref_recpt_nature_code.arr, "PD")==0)  ||
	 (strcmp(recref_recpt_nature_code.arr, "CR")==0)  ) {   

             if (recref_recpt_refund_ind.arr[0]=='R')
               get_other_acc(RECREF);
             else 
               get_other_acc (RD);	 
	     if(g_error) continue;

             move_into_post_acc(BANK);
             ins_blpat_ledger_trn();
	     if(g_error) continue;

             ins_blgl_distrib();
	     if(g_error) continue;

             move_into_post_acc(OTHER);
             ins_blgl_distrib();
	     if(g_error) continue;
          }
      else if (strcmp(recref_recpt_nature_code.arr, "CU")==0)
          {
             get_other_acc(RECREF);
	     if(g_error) continue;
             move_into_post_acc(BANK);
             ins_arrec_hdr();
	     if(g_error) continue;
             ins_blgl_distrib();
	     if(g_error) continue;
             move_into_post_acc(OTHER);
             ins_blgl_distrib();
	     if(g_error) continue;
          }
      else if (strcmp(recref_recpt_nature_code.arr, "DC")==0)
          {
             get_other_acc(DC);
	     if(g_error) continue;
             move_into_post_acc(BANK);
		
             //----This is for inserting record to BL_DCP_TRN----
	     recref_dcp_ind.arr[0] = '\0';
	     recref_dcp_ind.len = 0;
	     strcpy(recref_dcp_ind.arr,"N");
	     recref_dcp_ind.len = strlen(recref_dcp_ind.arr);
	     //--------------------------------------------------


             ins_bldcp_trn();
	     if(g_error) continue;
             ins_blgl_distrib();
	     if(g_error) continue;
             move_into_post_acc(OTHER);
             ins_blgl_distrib();
	     if(g_error) continue;
             if (recref_recpt_refund_ind.arr[0] == 'R') {
                process_dpf_rec_DC();
	        if(g_error) continue;
	     }
          }
      else if ((strcmp(recref_recpt_nature_code.arr, "MI")==0) ||
	  		 (strcmp(recref_recpt_nature_code.arr, "HC")==0) ) 
          {
             //move_into_post_acc(BANK);
             //ins_blgl_distrib();
	     //if(g_error) continue;

             get_other_acc(RECREF);
	     if(g_error) continue;
		
	     move_into_post_acc(BANK);
             ins_blgl_distrib();
	     if(g_error) continue;

             move_into_post_acc(OTHER);
             ins_blgl_distrib();
	     if(g_error) continue;

          }          

      update_recref_dtl();
      if(g_error) continue;
      EXEC SQL COMMIT;      
    }


    /* **** TEMP ****
    process_dpf();
    */

    init_old();
    open_recref_dtl_bl();

    g_error = 0;
    g_savepoint = 0;

    

    while(fetch_recref_dtl_bl())
     {       

      if(g_error) 
	  do_rollback();

      EXEC SQL SAVEPOINT LAST_DOC_REF;
      if(OERROR)
	  err_mesg("SAVEPOINT failed on LAST_DOC_REF",0,"");

      g_savepoint = 1;

      upd_reasons_in_receipt_refund_for_unposting(1);      

      if (nd_reason_text.arr[0] != '\0')
         continue;

      if (brk_slmt())
      {
         get_bank_acc();
	 if(g_error) continue;
         get_slmt_desc();
      }
      else if (brk_cash())
         get_bank_acc();
      
      if(g_error) continue;
      get_other_acc(BILL);
      if(g_error) continue;

      ins_blpat_ledger_trn();
      if(g_error) continue;
      move_into_post_acc(BANK);
      ins_blgl_distrib();
      if(g_error) continue;
      move_into_post_acc(OTHER);
      ins_blgl_distrib();
      if(g_error) continue;
      if (recref_recpt_refund_ind.arr[0] == 'R') {
         process_dpf_rec();
	 if(g_error) continue;
      }
      update_recref_dtl();
      if(g_error) continue;
      EXEC SQL COMMIT;
    }

    

    post_cancelled_trx();


    

    post_cancelled_bills();

    
		
    if ( nd_cash_control_use_flag = 'Y')
    { 
        post_cash_control_rcpts();
    }

    

    post_bill_adj_exempt();

    

    post_bill_adj_exempt_cancel();

    

    post_bill_wo();
    post_bill_wo_cancel();


    post_instl_wo();              /* Added the enhancement on 27-MAR-2007 */
    post_instl_wo_cancel();		  /* Added the enhancement on 27-MAR-2007 */	

    end_prog_msg();

    EXEC SQL DELETE SY_PROG_PARAM
    WHERE  PGM_ID     = 'BLBPSTFL' 
    AND    PGM_DATE   = :d_pgm_date
    AND    SESSION_ID = :d_session_id
    AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;

    if(OERROR) 
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,""); 

    update_cons_rec();

    // Updating posted indicator 'Y' to consolidated receipts

    EXEC SQL COMMIT WORK RELEASE;

    return;
}


update_cons_rec()
{
   EXEC SQL EXECUTE
   BEGIN
	DECLARE
	     Cursor cons_rec is select rowid, doc_type_code, doc_number, doc_srno
	     from bl_receipt_refund_dtl
	     where operating_facility_id = :nd_operating_facility_id
	     and nvl(consolidated_receipt_yn,'N') = 'Y'
	     and nvl(posted_ind,'N') = 'N' 
	     for update of posted_ind;
		
	     cursor cons_rec_canc is select rowid,doc_type_code, doc_number, doc_srno
	     from bl_cancelled_bounced_trx
	     where operating_facility_id = :nd_operating_facility_id
	     and NVL(consolidated_receipt_yn,'N') = 'Y'
	     and nvl(posted_ind,'N') = 'N'
	     for update of posted_ind;
	Begin
	    for i in cons_rec loop
		update bl_receipt_refund_dtl
		set posted_ind = 'Y',
		unposted_reason = null
		where rowid = i.rowid
		and 0 = ( select count(*) from bl_bills_for_cons_receipt
			  where operating_facility_id = :nd_operating_facility_id
			  and doc_type_code = i.doc_type_code
			  and doc_number = i.doc_number
			  and doc_srno = i.doc_srno
			  and nvl(posted_ind,'N') = 'N'
			  and rownum = 1);
	   end loop;

	   for i in cons_rec_canc loop
		update bl_cancelled_bounced_trx
		set posted_ind = 'Y',
		unposted_reason = null
		where rowid = i.rowid
		and 0 = ( select count(*) from bl_bills_for_cons_rcpt_canc
			  where operating_facility_id = :nd_operating_facility_id
			  and doc_type_code = i.doc_type_code
			  and doc_number = i.doc_number
			  and doc_srno = i.doc_srno
			  and nvl(posted_ind,'N') = 'N'
			  and rownum = 1);
	   end loop;
	end;
   END;
   END-EXEC;
}

cash_control_use_chec()
{
   nd_cash_control_use_flag = 'N'; 		
   
   EXEC SQL SELECT NVL(CASH_CTRL_RCPT_IN_USE_YN,'N') INTO :nd_cash_control_use_flag 
   FROM BL_PARAMETERS
   WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id;

      if(OERROR) 
        err_mesg("SELECT failed on table BL_PARAMETERS",0,""); 
}

do_rollback()  
{

  if(g_savepoint) {
      EXEC SQL ROLLBACK WORK TO SAVEPOINT LAST_DOC_REF;
      if (OERROR)
         err_mesg("ROLLBACK TO LAST_DOC_REF failed 1",0,""); 
      g_savepoint = 0;
  }

/*
  else {
      EXEC SQL ROLLBACK WORK;
      if (OERROR)
         err_mesg("ROLLBACK failed",0,""); 
  }
*/  

  g_error = 0;
}

void get_param()
{

    t_tmp_date.arr[0]       = '\0';
    nd_date.arr[0]   = '\0';
    t_tmp_date.len       = 0;
    nd_date.len          = 0;

// NEW ONE -- ASSIGNING ND_DATE IN YYYYMMDD ORDER. 21/02/98 VSK

     /*disp_message(ERR_MESG,nd_operating_facility_id.arr);
	 disp_message(ERR_MESG,d_pgm_date.arr);
	 disp_message(ERR_MESG,d_session_id.arr);*/

    EXEC SQL SELECT PARAM3,
                    PARAM1,
                    PARAM2,
		    TO_CHAR(TO_DATE(PARAM3,'DD/MM/YYYY'),'YYYYMMDD'),
			PARAM4,PARAM5
             INTO   :nd_date,
                    :nd_month,
                    :nd_year,
		            :t_tmp_date,
					:nd_bill_doc_type_code,
					:nd_bill_doc_num
             FROM   SY_PROG_PARAM
             WHERE   OPERATING_FACILITY_ID = :nd_operating_facility_id
	         and    PGM_ID     = 'BLBPSTFL'
             AND    PGM_DATE   = :d_pgm_date
             AND    SESSION_ID = TO_NUMBER(:d_session_id);

    if(OERROR || NO_DATA_FOUND)
        err_mesg("SELECT failed on table  SY_PROG_PARAM",0,"");


       EXEC SQL DELETE SY_PROG_PARAM
    WHERE  PGM_ID     = 'BLBPSTFL' 
    AND    PGM_DATE   = :d_pgm_date
    AND    SESSION_ID = :d_session_id
    AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;

    if(OERROR) 
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

    nd_date.arr[nd_date.len]   = '\0';
	t_tmp_date.arr[t_tmp_date.len]   = '\0';
    nd_bill_doc_type_code.arr[nd_bill_doc_type_code.len] = '\0';
    nd_bill_doc_num.arr[nd_bill_doc_num.len] = '\0';
    
    /* EXEC SQL DELETE SY_PROG_PARAM
         WHERE  PGM_ID     = 'BLBPSBLC' 
         AND    PGM_DATE   = :d_pgm_date
         AND    SESSION_ID = :d_session_id;

    if(OERROR) 
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,""); */

    dflt_dept_code.arr[0]  = '\0';
    dflt_dept_code.len     = 0;

    d_ip_gl_yn       = '\0';
    d_op_gl_yn       = '\0';
    d_rf_gl_yn       = '\0';

   EXEC SQL SELECT CURRENT_PROC_ACC_MONTH,
		   CURRENT_PROC_ACC_YEAR,
		   TO_NUMBER(TO_CHAR(SYSDATE,'MM')),
		   TO_NUMBER(TO_CHAR(SYSDATE,'YYYY')),
		   DEF_ACCT_DEPT_CODE,
		   NVL(IP_GL_REQD_YN,'N'),
		   NVL(OP_GL_REQD_YN,'N'),
		   NVL(RF_GL_REQD_YN,'N')
	    INTO   :bl_mth,
		   :bl_yr,
		   :cur_mth,
		   :cur_yr,
		   :dflt_dept_code,
		   :d_ip_gl_yn,
		   :d_op_gl_yn,
		   :d_rf_gl_yn
	    FROM   BL_PARAMETERS
	    WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id;

    if(OERROR)
	err_mesg("SELECT failed on table BL_PARAMETERS",0,"");

    dflt_dept_code.arr[dflt_dept_code.len]  = '\0';

    if( (cur_yr > bl_yr) || (cur_yr==bl_yr && cur_mth > bl_mth) ) {
	nd_month = cur_mth;
	nd_year  = cur_yr;
    }
    else {
	nd_month = bl_mth;
	nd_year  = bl_yr;
    }

}

void sql_connect()
{

    EXEC SQL CONNECT :uid_pwd;

    if(OERROR) {
        disp_message(ORA_MESG,"Unable to connect to oracle.");
        proc_exit();
    }
}
void get_static_info()
{

    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
	nd_acc_entity_code.arr[0]='\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;
	nd_acc_entity_code.len=0;

    EXEC SQL   SELECT ACC_ENTITY_CODE,ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
               USER
               INTO nd_acc_entity_code,:hosp_name,:date_time,:user_id
               FROM SY_ACC_ENTITY
	       WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

    if (OERROR || NO_DATA_FOUND) 
       err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

    hosp_name.arr[hosp_name.len]           = '\0';
    date_time.arr[date_time.len]           = '\0';
    user_id.arr[user_id.len]               = '\0';
	nd_acc_entity_code.arr[nd_acc_entity_code.len]='\0';
    
    blparam_post_month.arr[0] = '\0';
    blparam_post_year.arr[0]  = '\0';
    
    blparam_post_month.len    = 0;
    blparam_post_year.len     = 0;

    EXEC SQL SELECT CURRENT_PROC_ACC_MONTH, CURRENT_PROC_ACC_YEAR
             INTO   :blparam_post_month, :blparam_post_year
             FROM   BL_PARAMETERS
	     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id ;

    if (OERROR || NO_DATA_FOUND) 
       err_mesg("SELECT failed on table BL_PARAMETERS",0,"");


    blparam_post_month.arr[blparam_post_month.len] = '\0';
    blparam_post_year.arr[blparam_post_year.len]   = '\0';
}

void update_recref_dtl()
{
   if (strcmp(recref_cons_receipt_yn.arr,"Y") == 0)
   {
	EXEC SQL UPDATE BL_BILLS_FOR_CONS_RECEIPT
		SET POSTED_IND = 'Y',
		UNPOSTED_REASON	       = NULL,
		MODIFIED_BY_ID         = user,
		MODIFIED_DATE          = SYSDATE,
		ADDED_AT_WS_NO         = :nd_ws_no,
		ADDED_FACILITY_ID      = :nd_operating_facility_id,
		MODIFIED_AT_WS_NO      = :nd_ws_no,
		MODIFIED_FACILITY_ID   = :nd_operating_facility_id
              WHERE ROWID = :recref_rowid;

	if (OERROR || NO_DATA_FOUND) 
		err_mesg("UPDATE failed on table BL_BILLS_FOR_CONS_RECEIPT",0,"");
   }
   else
   {
	EXEC SQL UPDATE BL_RECEIPT_REFUND_DTL
		SET POSTED_IND	       = 'Y',
		UNPOSTED_REASON	       = NULL,
		MODIFIED_BY_ID         = user,
		MODIFIED_DATE          = SYSDATE,
		ADDED_AT_WS_NO         = :nd_ws_no,
		ADDED_FACILITY_ID      = :nd_operating_facility_id,
		MODIFIED_AT_WS_NO      = :nd_ws_no,
		MODIFIED_FACILITY_ID   = :nd_operating_facility_id
              WHERE ROWID = :recref_rowid;

	if (OERROR || NO_DATA_FOUND) 
		err_mesg("UPDATE failed on table BL_RECEIPT_REFUND_DTL",0,"");
    }

    
}
void declare_cur()
{
     EXEC SQL DECLARE BL_RECEIPT_REFUND_DTL_CUR CURSOR FOR
               SELECT RID,
                      RECPT_REFUND_IND,
                      DOC_TYPE_CODE,
                      DOC_NUMBER,
					  DOC_SRNO,
                      TRX_TYPE_CODE,
                      RECPT_NATURE_CODE,
                      DEBTOR_CATEGORY_CODE,
                      TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                      POST_MONTH,
                      POST_YEAR,
                      TRX_DATE_TIME,
                      NVL(EPISODE_TYPE,'R'),
                      PATIENT_ID,
                      NVL(EPISODE_ID,0),
                      NVL(VISIT_ID,1),
                      BILL_DOC_TYPE_CODE,
                      BILL_DOC_NUMBER,
                      CUSTOMER_CODE,
                      CASH_COUNTER_CODE,
                      SHIFT_ID,
                      DOC_AMT,
                      DOC_AMT * (-1),
                      RECPT_TYPE_CODE,
                      SLMT_TYPE_CODE,
                      SLMT_DOC_REF_DESC,
                      TO_CHAR(SLMT_DOC_REF_DATE,'DD/MM/YYYY'),
                      SLMT_DOC_REMARKS,
                      BANK_RECON_REF,
                      nvl(PRINT_FLAG,'N'),
                      NVL(CANCELLED_IND,'N'),
                      NVL(POSTED_IND,'N'),
                      NARRATION,
	              CASH_CTRL_DOC_TYPE_CODE,
		      CASH_CTRL_DOC_NUMBER,   
		      CASH_CTRL_DOC_DATE,
		      NVL(CONSOLIDATED_RECEIPT_YN,'N')
                FROM  BL_RECEIPT_REFUND_DTL_VW		
     // View is for posting consolidated 'DC' receipt on 22/07/2004
                WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND DOC_DATE <= TO_DATE(:nd_date||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
                AND   NVL(POSTED_IND,'N') != 'Y'
		AND   NVL(RECPT_NATURE_CODE, 'XX') != 'BI'
//AND NVL(PRINT_FLAG, 'N') = 'Y'   /* Error will be displayed */
                ORDER BY RECPT_REFUND_IND DESC, CASH_COUNTER_CODE, 
                      SLMT_TYPE_CODE, DOC_TYPE_CODE, DOC_NUMBER;


     EXEC SQL DECLARE BL_RECEIPT_REFUND_DTL_BL_CUR CURSOR FOR
               SELECT RID,  // Rowid
                      RECPT_REFUND_IND,
                      DOC_TYPE_CODE,
                      DOC_NUMBER,
                      TRX_TYPE_CODE,
                      RECPT_NATURE_CODE,
                      DEBTOR_CATEGORY_CODE,
                      TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                      POST_MONTH,
                      POST_YEAR,
                      TRX_DATE_TIME,
                      NVL(EPISODE_TYPE,'R'),
                      PATIENT_ID,
                      NVL(EPISODE_ID,0),
                      NVL(VISIT_ID,1),
                      BILL_DOC_TYPE_CODE,
                      BILL_DOC_NUMBER,
                      CUSTOMER_CODE,
                      CASH_COUNTER_CODE,
                      SHIFT_ID,
                      DOC_AMT,
                      DOC_AMT * (-1),
                      RECPT_TYPE_CODE,
                      SLMT_TYPE_CODE,
                      SLMT_DOC_REF_DESC,
                      TO_CHAR(SLMT_DOC_REF_DATE,'DD/MM/YYYY'),
                      SLMT_DOC_REMARKS,
                      BANK_RECON_REF,
                      NVL(PRINT_FLAG,'N'),
                      NVL(CANCELLED_IND,'N'),
                      NVL(POSTED_IND,'N'),
                      NARRATION,
		      CASH_CTRL_DOC_TYPE_CODE,
		      CASH_CTRL_DOC_NUMBER,   
		      CASH_CTRL_DOC_DATE,
		      NVL(CONSOLIDATED_RECEIPT_YN,'N')
                FROM BL_RECEIPT_REFUND_DTL_VW
     // View is for posting consolidated receipts on 22/07/2004
                WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND DOC_DATE <= TO_DATE(:nd_date||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
                AND NVL(POSTED_IND,'N') != 'Y'
		//Comment removed, ie, cancelled entries will not be allowed to post.  Since posted
		//Receipts cannot be cancelled in the cancell receipt/refund function.
		//20/01/2004 Harish
		AND   NVL(CANCELLED_IND, 'N')     != 'Y'
		AND   NVL(RECPT_NATURE_CODE, 'XX') = 'BI'
		//AND   NVL(PRINT_FLAG, 'N')         = 'Y'		
                ORDER BY RECPT_REFUND_IND DESC, CASH_COUNTER_CODE, 
                         SLMT_TYPE_CODE, DOC_TYPE_CODE, DOC_NUMBER;

     EXEC SQL DECLARE BL_GL_ACCOUNT_CUR CURSOR FOR
               SELECT MAIN_ACC1_CODE ,
                      MAIN_ACC2_CODE ,
                      DEPT_CODE,
                      SUBLEDGER_GROUP_CODE,
                      SUBLEDGER_LINE_CODE,
                      PRODUCT_GROUP_CODE,
                      PRODUCT_LINE_CODE
               FROM   BL_GL_ACCOUNT A, BL_SLMT_CASH_COUNTER B, BL_SLMT_CASH_COUNTER_INT C
               WHERE  A.ACC_INT_CODE      = C.SLMT_CTR_ACC_INT_CODE 
	       AND    B.SLMT_TYPE_CODE    = :recref_slmt_type_code
               AND    B.CASH_COUNTER_CODE = :recref_cash_counter_code
	       AND    B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	       AND    B.SLMT_TYPE_CODE    = C.SLMT_TYPE_CODE
	       AND    B.CASH_COUNTER_CODE = C.CASH_COUNTER_CODE
	       AND    B.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
	       AND    TO_DATE(:recref_doc_date,'DD/MM/YYYY') between 
		      NVL(C.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(C.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
	       AND    A.ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					     WHERE ACC_ENTITY_ID = :nd_operating_facility_id);

     EXEC SQL DECLARE BL_GL_ACCOUNT_OTHER_CUR CURSOR FOR
               SELECT MAIN_ACC1_CODE ,
                      MAIN_ACC2_CODE ,
                      DEPT_CODE,
                      SUBLEDGER_GROUP_CODE,
                      SUBLEDGER_LINE_CODE,
                      PRODUCT_GROUP_CODE,
                      PRODUCT_LINE_CODE
               FROM   BL_GL_ACCOUNT A, BL_RECEIPT_TYPE B, BL_RECEIPT_TYPE_INT C
               WHERE  A.ACC_INT_CODE      = C.RECEIPT_ACC_INT_CODE 
               AND    B.RECEIPT_TYPE_CODE = :recref_recpt_type_code
	       AND    A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE
	       AND    B.RECEIPT_TYPE_CODE = C.RECEIPT_TYPE_CODE
	       AND    B.ACC_ENTITY_CODE = C.ACC_ENTITY_CODE
	       AND    TO_DATE(:recref_doc_date,'DD/MM/YYYY') between 
		      NVL(C.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(C.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
       	       AND    A.ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					     WHERE ACC_ENTITY_ID = :nd_operating_facility_id);

     EXEC SQL DECLARE BL_GL_ACCOUNT_OTHER_RD_CUR CURSOR FOR
               SELECT MAIN_ACC1_CODE ,
                      MAIN_ACC2_CODE ,
                      DEPT_CODE,
                      SUBLEDGER_GROUP_CODE,
                      SUBLEDGER_LINE_CODE,
                      PRODUCT_GROUP_CODE,
                      PRODUCT_LINE_CODE			    
               FROM   BL_GL_ACCOUNT A, BL_RECEIPT_TYPE B, BL_PATIENT_LEDGER C, BL_RECEIPT_TYPE_INT D
               WHERE  C.EPISODE_TYPE = NVL(:recref_episode_type,'R')
               AND    C.PATIENT_ID = :recref_patient_id
               AND    NVL(C.EPISODE_ID,0) = NVL(:recref_episode_id,0)
	       AND    NVL(C.VISIT_ID,1) = 
	              DECODE(:recref_episode_type,'I',NVL(C.VISIT_ID,1),'D',NVL(C.VISIT_ID,1), nvl(:recref_visit_id,1))
               AND    C.ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
               AND    C.ORG_DOC_NUM = :recref_bill_doc_number
               AND    B.RECEIPT_TYPE_CODE = C.RECPT_TYPE_CODE
               AND    A.ACC_INT_CODE = D.RECEIPT_ACC_INT_CODE 
	       AND    C.OPERATING_FACILITY_ID = :nd_operating_facility_id 
	       AND    A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
		  			    FROM   SY_ACC_ENTITY 
					    WHERE  ACC_ENTITY_ID = :nd_operating_facility_id)
	       AND    A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE
	       AND    B.ACC_ENTITY_CODE = D.ACC_ENTITY_CODE
	       AND    B.RECEIPT_TYPE_CODE = D.RECEIPT_TYPE_CODE
	       AND TRUNC(C.ORG_DOC_DATE) between 
		      NVL(D.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(D.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
		;

     EXEC SQL DECLARE BL_GL_ACCOUNT_OTHER_DC_CUR CURSOR FOR
               SELECT A.MAIN_ACC1_CODE ,
                      A.MAIN_ACC2_CODE ,
                      A.DEPT_CODE,
                      A.SUBLEDGER_GROUP_CODE,
                      A.SUBLEDGER_LINE_CODE,
                      A.PRODUCT_GROUP_CODE,
                      A.PRODUCT_LINE_CODE
               FROM   BL_GL_ACCOUNT A, BL_BILL_TYPE B, BL_DCP_PENDING_DOC C, BL_BILL_TYPE_INT D
               WHERE  C.PATIENT_ID = :recref_patient_id
               AND    C.ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
               AND    C.ORG_DOC_NUMBER = :recref_bill_doc_number
               AND    B.BILL_TYPE_CODE = C.BILL_TYPE_CODE
               AND    A.ACC_INT_CODE = D.DCP_RECV_ACC_INT_CODE
	       AND    C.OPERATING_FACILITY_ID = :nd_operating_facility_id 
	       AND    A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					  FROM   SY_ACC_ENTITY 
					  WHERE  ACC_ENTITY_ID = :nd_operating_facility_id)
	       AND    B.ACC_ENTITY_CODE = A.ACC_ENTITY_CODE
	       AND    B.ACC_ENTITY_CODE = D.ACC_ENTITY_CODE
	       AND    B.BILL_TYPE_CODE = D.BILL_TYPE_CODE
	       AND TRUNC(C.ORG_DOC_DATE) between 
		      NVL(D.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(D.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
	      ;



     EXEC SQL DECLARE BL_GL_ACCOUNT_OTHER_BL_CUR CURSOR FOR
               SELECT A.MAIN_ACC1_CODE ,
                      A.MAIN_ACC2_CODE ,
                      A.DEPT_CODE,
                      A.SUBLEDGER_GROUP_CODE,
                      A.SUBLEDGER_LINE_CODE,
                      A.PRODUCT_GROUP_CODE,
                      A.PRODUCT_LINE_CODE

               FROM   BL_GL_ACCOUNT A, BL_BILL_TYPE B, BL_BILL_HDR C, BL_BILL_TYPE_INT D
               WHERE  C.DOC_TYPE_CODE  = :recref_bill_doc_type_code
               AND    C.DOC_NUM        = :recref_bill_doc_number
               AND    B.BILL_TYPE_CODE = C.BILL_TYPE_CODE
               AND    A.ACC_INT_CODE   = D.BL_RECV_ACC_INT_CODE
	       AND    C.OPERATING_FACILITY_ID = :nd_operating_facility_id 
	       AND    A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					  FROM   SY_ACC_ENTITY 
					  WHERE  ACC_ENTITY_ID = :nd_operating_facility_id)
	       AND    B.ACC_ENTITY_CODE = A.ACC_ENTITY_CODE
	       AND    B.ACC_ENTITY_CODE = D.ACC_ENTITY_CODE
	       AND    B.BILL_TYPE_CODE = D.BILL_TYPE_CODE
	       AND    TRUNC(C.DOC_DATE) between 
		      NVL(D.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(D.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
	       ;


     EXEC SQL DECLARE BL_SLMT_TYPE_CUR CURSOR FOR
               SELECT DECODE(CASH_SLMT_FLAG,'A','CREDITCARD','B','CHEQUE','CASH')
               FROM   BL_SLMT_TYPE
               WHERE  SLMT_TYPE_CODE = :recref_slmt_type_code;

	

    EXEC SQL DECLARE T_PATIENT_FOLIO_CUR CURSOR FOR
	    SELECT  DISTINCT  DOC_TYPE_CODE,
			       DOC_NUMBER,
			       PHYSICIAN_ID
	    FROM     BL_PATIENT_CHARGES_FOLIO
	    WHERE    OPERATING_FACILITY_ID = :nd_operating_facility_id
	    AND	     BILL_DOC_TYPE_CODE = :t_doc_type_code
	    AND      BILL_DOC_NUM       = :t_doc_num
	    AND      NVL(DF_UPD_FLAG,'X') = 'Y'
	    AND      NVL(DF_SERVICE_IND,'X') = 'D';

    /* KGA Included the Shift Id, Cash Counter Code*/

    EXEC SQL DECLARE CANCEL_TRX_CUR CURSOR FOR
	    SELECT       A.ROWID,
		         A.RECPT_REFUND_IND,
                         A.DOC_TYPE_CODE,
                         A.DOC_NUMBER,
						 A.DOC_SRNO,
                         NVL(A.CANCELLED_IND,'N'),
                         NVL(A.BOUNCED_YN,'N'),
                         NVL(A.BOUNCED_STATUS_IND,'N'),
                         A.NARRATION,
		         TO_CHAR(NVL(A.CANCELLED_DATE,SYSDATE),'DD/MM/YYYY'),
		         TO_CHAR(NVL(A.BOUNCED_DATE,SYSDATE),'DD/MM/YYYY'),
		         TO_CHAR(NVL(A.BOUNCED_STATUS_DATE,SYSDATE),'DD/MM/YYYY'),
                         A.DR_MAIN_ACC1_CODE,
                         A.DR_MAIN_ACC2_CODE,
                         A.DR_DEPT_CODE,
                         A.DR_PRODUCT_GROUP_CODE,
          		 A.DR_PRODUCT_LINE_CODE,
			 A.DR_SUBLEDGER_GROUP_CODE,
			 A.DR_SUBLEDGER_LINE_CODE,
			 A.CR_MAIN_ACC1_CODE,
			 A.CR_MAIN_ACC2_CODE,
			 A.CR_DEPT_CODE,
			 A.CR_PRODUCT_GROUP_CODE,
			 A.CR_PRODUCT_LINE_CODE,
			 A.CR_SUBLEDGER_GROUP_CODE,
			 A.CR_SUBLEDGER_LINE_CODE,
			 A.CASH_CTRL_DOC_TYPE_CODE,
			 A.CASH_CTRL_DOC_NUMBER,   
			 A.CASH_CTRL_DOC_DATE,
			 A.SHIFT_ID,
			 A.CASH_COUNTER_CODE,
			 NVL(A.CONSOLIDATED_RECEIPT_YN, B.CONSOLIDATED_RECEIPT_YN),
			 B.BILL_DOC_TYPE_CODE,
			 B.BILL_DOC_NUMBER        
	      FROM BL_CANCELLED_BOUNCED_TRX A, BL_RECEIPT_REFUND_HDRDTL_VW B        /* Modified to HDRDTL View */
	      WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	      AND A.DOC_TYPE_CODE = B.DOC_TYPE_CODE
	      AND A.DOC_NUMBER = B.DOC_NUMBER
		  AND A.DOC_SRNO   = B.DOC_SRNO
	      AND A.ADDED_DATE <= to_date(:t_tmp_date||'235959','YYYYMMDDHH24MISS') 
	      AND NVL(A.POSTED_IND,'N') != 'Y'
	      AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID	      
	      AND NVL(A.CONSOLIDATED_RECEIPT_YN,'N') = 'N'
	UNION ALL
	      SELECT     B.ROWID,
		         A.RECPT_REFUND_IND,
                         B.DOC_TYPE_CODE,
                         B.DOC_NUMBER,
						 B.DOC_SRNO,
                         NVL(A.CANCELLED_IND,'N'),
                         NVL(A.BOUNCED_YN,'N'),
                         NVL(A.BOUNCED_STATUS_IND,'N'),
                         A.NARRATION,
		         TO_CHAR(NVL(A.CANCELLED_DATE,SYSDATE),'DD/MM/YYYY'),
		         TO_CHAR(NVL(A.BOUNCED_DATE,SYSDATE),'DD/MM/YYYY'),
		         TO_CHAR(NVL(A.BOUNCED_STATUS_DATE,SYSDATE),'DD/MM/YYYY'),
                         A.DR_MAIN_ACC1_CODE,
                         A.DR_MAIN_ACC2_CODE,
                         A.DR_DEPT_CODE,
                         A.DR_PRODUCT_GROUP_CODE,
          		 A.DR_PRODUCT_LINE_CODE,
			 A.DR_SUBLEDGER_GROUP_CODE,
			 A.DR_SUBLEDGER_LINE_CODE,
			 A.CR_MAIN_ACC1_CODE,
			 A.CR_MAIN_ACC2_CODE,
			 A.CR_DEPT_CODE,
			 A.CR_PRODUCT_GROUP_CODE,
			 A.CR_PRODUCT_LINE_CODE,
			 A.CR_SUBLEDGER_GROUP_CODE,
			 A.CR_SUBLEDGER_LINE_CODE,
			 A.CASH_CTRL_DOC_TYPE_CODE,
			 A.CASH_CTRL_DOC_NUMBER,   
			 A.CASH_CTRL_DOC_DATE,
			 A.SHIFT_ID,
			 A.CASH_COUNTER_CODE,
			 NVL(A.CONSOLIDATED_RECEIPT_YN,'N'),
			 B.BILL_DOC_TYPE_CODE,
			 B.BILL_DOC_NUM        
	      FROM BL_CANCELLED_BOUNCED_TRX A, BL_BILLS_FOR_CONS_RCPT_CANC B
// Added for posting Consolidated receipts
	      WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	      AND A.DOC_TYPE_CODE = B.DOC_TYPE_CODE
	      AND A.DOC_NUMBER = B.DOC_NUMBER
	      AND A.ADDED_DATE <= to_date(:t_tmp_date||'235959','YYYYMMDDHH24MISS') 
	      AND NVL(B.POSTED_IND,'N') != 'Y'
	      AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID	      
	      AND NVL(A.CONSOLIDATED_RECEIPT_YN,'N') = 'Y'
	      ORDER BY 2,3,4;
	      // A.RECPT_REFUND_IND,A.DOC_TYPE_CODE,A.DOC_NUMBER ;
	      // FOR UPDATE OF POSTED_IND;
              // TRUNC(ADDED_DATE) <= TO_DATE(:nd_date,'DD/MM/YYYY')


    EXEC SQL DECLARE CANCEL_BILL_CUR CURSOR FOR
	     SELECT  ROWID,DOC_TYPE_CODE,
                     DOC_NUMBER,
		     TO_CHAR(NVL(ADDED_DATE,SYSDATE),'DD/MM/YYYY'),
			 CASH_CTRL_DOC_TYPE_CODE ,       
			CASH_CTRL_DOC_NUMBER,           
			 TO_CHAR(CASH_CTRL_DOC_DATE,'DD/MM/YYYY'),
			 SHIFT_ID,
			 CASH_COUNTER_CODE       
	      FROM   BL_CANCELLED_BILLS
	      WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
	      AND    NVL(POSTED_IND,'N') != 'Y'
	      AND ADDED_DATE <= TO_DATE(:nd_date||' 23:59:59','DD/MM/YYYY HH24:MI:SS');
	      // FOR    UPDATE OF POSTED_IND;

    EXEC SQL DECLARE BL_BILL_LINE_CUR CURSOR FOR
	     SELECT  MAN_DISC_AMT,
		     -MAN_DISC_AMT,
		     MAN_DISC_ACC_INT_CODE
	     FROM    BL_BILL_LINE
	     WHERE   OPERATING_FACILITY_ID = :nd_operating_facility_id
	     AND     DOC_TYPE_CODE = :t_doc_type_code
	     AND     DOC_NUM       = :t_doc_num
	     AND     NVL(MAN_DISC_AMT,0) > 0;

   

/*    EXEC SQL DECLARE BL_DF_INTERFACE_CUR CURSOR FOR
	     SELECT  RCT_DOC_TYPE_CODE,
		     RCT_DOC_NUM,
		     TO_CHAR(RCT_DOC_DATE,'DD/MM/YYYY'),
		     SLMT_TYPE_CODE,
		     DF_INTERFACE_AMT
	       FROM  BL_DF_INTERFACE
	      WHERE  BILL_DOC_TYPE_CODE = :t_doc_type_code
		AND  BILL_DOC_NUM       = :t_doc_num
		AND  OPERATING_FACILITY_ID = :nd_operating_facility_id;*/

 EXEC SQL DECLARE BL_BILL_ADJ_EXEMPT_CUR CURSOR FOR
	SELECT B.ROWID,
	       B.DOC_TYPE_CODE,                   
	       B.DOC_NUM,                         
	       B.DOC_SLNO,                               
	       TO_CHAR(B.DOC_DATE,'DD/MM/YYYY'),                        
	       NVL(B.DOC_AMT,0),                                
	       (-1) * NVL(B.DOC_AMT,0),
	       B.ADJ_EXEMPT_ACC_INT_CODE,                
	       B.ADJUST_EXEMPT_IND,                      
	       NVL(B.POSTED_IND,'N'),                             
	       B.POST_MONTH,                             
	       B.POST_YEAR,                              
	       B.UNPOSTED_REASON,                        
	       NVL(B.EPISODE_TYPE,'R'),                           
	       B.EPISODE_ID,                             
	       B.VISIT_ID,                               	       
	       B.ADJ_DOC_TYPE_CODE,               
	       B.ADJ_DOC_NUM,                     
	       TO_CHAR(B.ADJ_DOC_DATE,'DD/MM/YYYY'),
	       B.REMARKS,                                	
	       NVL(B.BILL_DCP_IND,'B'),                         
	       '4' TRX_TYPE_CODE,
	       A.BILL_TYPE_CODE,
		   A.CUST_CODE
	FROM BL_BILL_ADJ_DTL B, BL_BILL_HDR A
	WHERE A.DOC_TYPE_CODE = B.ADJ_DOC_TYPE_CODE
	AND A.DOC_NUM = B.ADJ_DOC_NUM
	AND B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND B.DOC_DATE <= TO_DATE(:nd_date||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
	AND NVL(B.POSTED_IND,'N') != 'Y'
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID;


EXEC SQL DECLARE BL_BILL_ADJ_EXEMPT_CANC_CUR CURSOR FOR
	SELECT A.ROWID,
	       A.DOC_TYPE_CODE,                   
	       A.DOC_NUM,                         
	       A.DOC_SLNO,                               
	       TO_CHAR(A.CANCELLED_DATE,'DD/MM/YYYY'),                        
	       (-1) * NVL(B.DOC_AMT,0),                                
	       NVL(B.DOC_AMT,0),
	       A.ADJ_EXEMPT_ACC_INT_CODE,                
	       B.ADJUST_EXEMPT_IND,                      
	       NVL(A.POSTED_IND,'N'),                             
	       A.POST_MONTH,                             
	       A.POST_YEAR,                              
	       A.UNPOSTED_REASON,                        
	       NVL(A.EPISODE_TYPE,'R'),                           
	       A.EPISODE_ID,                             
	       A.VISIT_ID,                               	       
	       B.ADJ_DOC_TYPE_CODE,               
	       B.ADJ_DOC_NUM,                     
	       TO_CHAR(B.ADJ_DOC_DATE,'DD/MM/YYYY'),
	       B.REMARKS,                                	
	       NVL(B.BILL_DCP_IND,'B'),                         
	       '4' TRX_TYPE_CODE,
	       C.BILL_TYPE_CODE,
		   C.CUST_CODE
	FROM BL_BILL_ADJ_DTL_CANC A, BL_BILL_ADJ_DTL B,
	     BL_BILL_HDR C
	WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND TRUNC(A.CANCELLED_DATE) <= TO_DATE(:nd_date, 'DD/MM/YYYY')
	AND NVL(A.POSTED_IND,'N') != 'Y'
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
	AND A.DOC_TYPE_CODE = B.DOC_TYPE_CODE
	AND A.DOC_NUM = B.DOC_NUM
	AND A.DOC_SLNO = B.DOC_SLNO
	AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
	AND B.ADJ_DOC_TYPE_CODE = C.DOC_TYPE_CODE
	AND B.ADJ_DOC_NUM = C.DOC_NUM;


EXEC SQL DECLARE BL_GL_ACCOUNT_AE_CUR CURSOR FOR
       SELECT A.MAIN_ACC1_CODE ,
	      A.MAIN_ACC2_CODE ,
	      A.DEPT_CODE,
	      A.SUBLEDGER_GROUP_CODE,
	      A.SUBLEDGER_LINE_CODE,
	      A.PRODUCT_GROUP_CODE,
	      A.PRODUCT_LINE_CODE
       FROM BL_GL_ACCOUNT A
       WHERE A.ACC_INT_CODE = :ae_adj_exempt_acc_int_code
       AND A.ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
				  WHERE ACC_ENTITY_ID = :nd_operating_facility_id);

EXEC SQL DECLARE BL_GL_ACCOUNT_OTHER_AE_BL_CUR CURSOR FOR
               SELECT A.MAIN_ACC1_CODE,
                      A.MAIN_ACC2_CODE,
                      A.DEPT_CODE,
                      A.SUBLEDGER_GROUP_CODE,
                      A.SUBLEDGER_LINE_CODE,
                      A.PRODUCT_GROUP_CODE,
                      A.PRODUCT_LINE_CODE
               FROM BL_GL_ACCOUNT A, BL_BILL_HDR C, BL_BILL_TYPE_INT D
               WHERE C.OPERATING_FACILITY_ID = :nd_operating_facility_id 
	       AND C.DOC_TYPE_CODE  = :ae_adj_doc_type_code
               AND C.DOC_NUM        = :ae_adj_doc_num               
               AND A.ACC_INT_CODE   = D.BL_RECV_ACC_INT_CODE
	       AND A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					 FROM SY_ACC_ENTITY 
					 WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
	       AND D.ACC_ENTITY_CODE = A.ACC_ENTITY_CODE	      
	       AND C.BILL_TYPE_CODE = D.BILL_TYPE_CODE
	       AND TRUNC(C.DOC_DATE) between 
		   NVL(D.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		   NVL(D.EFF_TO_DATE,SYSDATE);


EXEC SQL DECLARE BL_GL_ACCOUNT_OTHER_AE_DC_CUR CURSOR FOR
               SELECT A.MAIN_ACC1_CODE ,
                      A.MAIN_ACC2_CODE ,
                      A.DEPT_CODE,
                      A.SUBLEDGER_GROUP_CODE,
                      A.SUBLEDGER_LINE_CODE,
                      A.PRODUCT_GROUP_CODE,
                      A.PRODUCT_LINE_CODE
               FROM BL_GL_ACCOUNT A, BL_DCP_PENDING_DOC C, BL_BILL_TYPE_INT D
               WHERE C.OPERATING_FACILITY_ID = :nd_operating_facility_id 
	       AND C.PATIENT_ID = :ae_patient_id
               AND C.ORG_DOC_TYPE_CODE = :ae_adj_doc_type_code
               AND C.ORG_DOC_NUMBER = :ae_adj_doc_num               
               AND A.ACC_INT_CODE = D.DCP_RECV_ACC_INT_CODE
	       AND A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					 FROM SY_ACC_ENTITY 
					 WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
	       AND D.ACC_ENTITY_CODE = A.ACC_ENTITY_CODE	    
	       AND C.BILL_TYPE_CODE = D.BILL_TYPE_CODE
	       AND TRUNC(C.ORG_DOC_DATE) between 
		      NVL(D.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(D.EFF_TO_DATE,SYSDATE);
		

 EXEC SQL DECLARE BL_BILL_WO_CUR CURSOR FOR
	  SELECT A.ROWID,
	       A.DOC_TYPE_CODE,                   
	       A.DOC_NUM,                         
	       A.DOC_SLNO,                               
	       TO_CHAR(A.DOC_DATE,'DD/MM/YYYY'),                        
	       NVL(A.WO_APPROVED_AMT,0),                                
	       (-1) * NVL(A.WO_APPROVED_AMT,0),
	       NVL(A.POSTED_IND,'N'),                             
	       NVL(A.EPISODE_TYPE,'R'),                           
	       A.EPISODE_ID,                             
	       A.VISIT_ID,                               	       
	       A.ORG_DOC_TYPE_CODE,			
	       A.ORG_DOC_NUM,                     
	       TO_CHAR(A.ORG_DOC_DATE,'DD/MM/YYYY'),
	       A.REMARKS,                                	
	       '4' TRX_TYPE_CODE,
	       B.BILL_TYPE_CODE,
		   B.CUST_CODE
	FROM BL_WO_REQUEST_DTL A, BL_BILL_DCP_DTL_VW B
	WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
	AND A.DOC_DATE  <= TO_DATE(:nd_date||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
	AND NVL(A.POSTED_IND,'N')	  != 'Y'
	AND NVL(WO_APPROVED_YN, 'N')  = 'Y'
	AND A.ORG_DOC_TYPE_CODE = B.DOC_TYPE_CODE
	AND A.ORG_DOC_NUM = B.DOC_NUM;

	EXEC SQL DECLARE BL_INSTL_WO_CUR CURSOR FOR
	  SELECT A.ROWID,
	       A.DOC_TYPE_CODE,                   
	       A.DOC_NUM,                         
	       A.DOC_SLNO,                               
	       TO_CHAR(A.DOC_DATE,'DD/MM/YYYY'),                        
	       NVL(A.WO_APPROVED_AMT,0),                                
	       (-1) * NVL(A.WO_APPROVED_AMT,0),
	       NVL(A.POSTED_IND,'N'),                             
	       NVL(B.EPISODE_TYPE,'R'),                           
	       B.EPISODE_ID,                             
	       B.VISIT_ID,                               	       
	       A.AGGR_DOC_TYPE_CODE,			
	       A.AGGR_DOC_NUM,                     
	       TO_CHAR(A.AGGR_DOC_DATE,'DD/MM/YYYY'),
	       A.REMARKS,                                	
	       '4' TRX_TYPE_CODE,
	       B.BILL_TYPE_CODE,
		   B.CUST_CODE
	FROM BL_INST_WO_REQUEST_DTL A, BL_BILL_DCP_DTL_VW B
	WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
	AND A.DOC_DATE  <= TO_DATE(:nd_date||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
	AND NVL(A.POSTED_IND,'N')	  != 'Y'
	AND NVL(WO_APPROVED_YN, 'N')  = 'Y'
	AND A.AGGR_DOC_TYPE_CODE = B.DOC_TYPE_CODE
	AND A.AGGR_DOC_NUM = B.DOC_NUM;

	EXEC SQL DECLARE BL_GL_ACCOUNT_WO_CUR CURSOR FOR
       SELECT A.MAIN_ACC1_CODE ,
	      A.MAIN_ACC2_CODE ,
	      A.DEPT_CODE,
	      A.SUBLEDGER_GROUP_CODE,
	      A.SUBLEDGER_LINE_CODE,
	      A.PRODUCT_GROUP_CODE,
	      A.PRODUCT_LINE_CODE
       FROM BL_GL_ACCOUNT A
       WHERE A.ACC_INT_CODE = :wo_int_code
       AND A.ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
				  WHERE ACC_ENTITY_ID = :nd_operating_facility_id);


	EXEC SQL DECLARE BL_GL_ACCOUNT_BILL_RECV_CUR CURSOR FOR
        SELECT A.MAIN_ACC1_CODE ,
	      A.MAIN_ACC2_CODE ,
	      A.DEPT_CODE,
	      A.SUBLEDGER_GROUP_CODE,
	      A.SUBLEDGER_LINE_CODE,
	      A.PRODUCT_GROUP_CODE,
	      A.PRODUCT_LINE_CODE
       FROM BL_GL_ACCOUNT A
       WHERE A.ACC_INT_CODE = :wo_bill_recv_int_code
       AND A.ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
				  WHERE ACC_ENTITY_ID = :nd_operating_facility_id);


	EXEC SQL DECLARE BL_BILL_WO_CANC_CUR CURSOR FOR
	  SELECT A.ROWID,
	       A.DOC_TYPE_CODE,                   
	       A.DOC_NUM,                         
	       A.DOC_SLNO,                               
	       TO_CHAR(A.CANCELLED_DATE,'DD/MM/YYYY'),                        	       
	       (-1) * NVL(C.WO_APPROVED_AMT,0),
	       NVL(C.WO_APPROVED_AMT,0),                                
	       NVL(A.POSTED_IND,'N'),                             
	       NVL(A.EPISODE_TYPE,'R'),                           
	       A.EPISODE_ID,                             
	       A.VISIT_ID,                               	       
	       A.ORG_DOC_TYPE_CODE,			
	       A.ORG_DOC_NUM,                     
	       TO_CHAR(A.ORG_DOC_DATE,'DD/MM/YYYY'),
	       A.CANCELLED_REMARKS,                                	
	       '4' TRX_TYPE_CODE,
	       B.BILL_TYPE_CODE,
		   B.CUST_CODE
	FROM BL_WO_REQUEST_CANC_DTL A, BL_BILL_DCP_DTL_VW B,
	     BL_WO_REQUEST_DTL C
	WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND A.CANCELLED_DATE <= TO_DATE(:nd_date||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
	AND NVL(A.POSTED_IND,'N')  != 'Y'
	AND A.ORG_DOC_TYPE_CODE = B.DOC_TYPE_CODE
	AND A.ORG_DOC_NUM = B.DOC_NUM
	AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
	AND A.DOC_TYPE_CODE = C.DOC_TYPE_CODE
	AND A.DOC_NUM = C.DOC_NUM
	AND A.DOC_SLNO = C.DOC_SLNO;



	EXEC SQL DECLARE BL_INSTL_WO_CANC_CUR CURSOR FOR
	  SELECT A.ROWID,
	       A.DOC_TYPE_CODE,                   
	       A.DOC_NUM,                         
	       A.DOC_SLNO,                               
	       TO_CHAR(A.CANCELLED_DATE,'DD/MM/YYYY'),                        	       
	       (-1) * NVL(C.WO_APPROVED_AMT,0),
	       NVL(C.WO_APPROVED_AMT,0),                                
	       NVL(A.POSTED_IND,'N'),                             
	       NVL(B.EPISODE_TYPE,'R'),                           
	       B.EPISODE_ID,                             
	       B.VISIT_ID,                               	       
	       A.AGGR_DOC_TYPE_CODE,			
	       A.AGGR_DOC_NUM,                     
	       TO_CHAR(A.AGGR_DOC_DATE,'DD/MM/YYYY'),
	       A.CANCELLED_REMARKS,                                	
	       '4' TRX_TYPE_CODE,
	       B.BILL_TYPE_CODE,
		   B.CUST_CODE
	FROM BL_INST_WO_REQUEST_CANC_DTL A, BL_BILL_DCP_DTL_VW B,
	     BL_INST_WO_REQUEST_DTL C
	WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id
	AND A.CANCELLED_DATE <= TO_DATE(:nd_date||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
	AND NVL(A.POSTED_IND,'N')  != 'Y'
	AND A.AGGR_DOC_TYPE_CODE = B.DOC_TYPE_CODE
	AND A.AGGR_DOC_NUM = B.DOC_NUM
	AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
	AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
	AND A.DOC_TYPE_CODE = C.DOC_TYPE_CODE
	AND A.DOC_NUM = C.DOC_NUM
	AND A.DOC_SLNO = C.DOC_SLNO;
}

void ins_bldcp_trn()
{
   l_dcp_trn_rec_exist = 0;   

   /* l_dcp_trn_rec_exist -> 1 means Record Exist.*/

   EXEC SQL SELECT 1 INTO :l_dcp_trn_rec_exist 
	    FROM BL_DCP_TRN
	    WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	    AND PATIENT_ID = :recref_patient_id
	    AND ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
            AND ORG_DOC_NUMBER = :recref_bill_doc_number
	    AND DOC_TYPE_CODE = :recref_doc_type_code 
	    AND DOC_NUMBER = :recref_doc_number
	    AND NVL(CANCELLED_ENTRY_YN,'N') = NVL(:recref_dcp_ind,'N')
	    FOR UPDATE OF TRX_STATUS;	    

   if (NO_DATA_FOUND) 
	l_dcp_trn_rec_exist = 0;
		
   if (l_dcp_trn_rec_exist == 1)
   {
	  EXEC SQL UPDATE BL_DCP_TRN
	  SET POSTED_DATE = SYSDATE,
	      POSTED_BY_ID = USER
	  WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	  AND PATIENT_ID = :recref_patient_id
	  AND ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
          AND ORG_DOC_NUMBER = :recref_bill_doc_number
	  AND DOC_TYPE_CODE = :recref_doc_type_code 
	  AND DOC_NUMBER = :recref_doc_number
	  AND POSTED_DATE IS NULL
	  AND NVL(CANCELLED_ENTRY_YN,'N') = NVL(:recref_dcp_ind,'N');
    }
   else
   {	   
	   /* Rec/Ref fun. is inserting one record from front end. So, no need ti insert record here */

	   pendoc_max_line_num.arr[0] = '\0';
	   pendoc_max_line_num.len = 0;

	   EXEC SQL SELECT ROWID, nvl(max_line_num,0) + 1
		    INTO :pendoc_rowid, :pendoc_max_line_num
		    FROM BL_DCP_PENDING_DOC
		    WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		    AND PATIENT_ID = :recref_patient_id
		    AND ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
		    AND ORG_DOC_NUMBER = :recref_bill_doc_number;		

	   if (OERROR || NO_DATA_FOUND) 
	   {
	      log_mesg("SELECT failed on BL_DCP_PENDING_DOC",0,"");
	      return;
	   }

	   pendoc_max_line_num.arr[pendoc_max_line_num.len] = '\0';

	/******************* Commented by G Sriram ******************
		EXEC SQL UPDATE BL_PATIENT_FIN_DTLS
			SET TOT_DEF_PAT_OUTST_AMT = NVL(TOT_DEF_PAT_OUTST_AMT,0) -
			NVL(:recref_doc_amt, 0),
			MODIFIED_BY_ID         = USER,
			MODIFIED_DATE          = SYSDATE,
			ADDED_AT_WS_NO         = :nd_ws_no,
			ADDED_FACILITY_ID      = :nd_operating_facility_id,
			MODIFIED_AT_WS_NO      = :nd_ws_no,
			MODIFIED_FACILITY_ID   = :nd_operating_facility_id
			WHERE  PATIENT_ID = :recref_patient_id;

	   if (OERROR || NO_DATA_FOUND)
	      err_mesg("UPDATE failed on BL_PATIENT_FIN_DTLS",0,"");
	********************* End of Comment by G Sriram **************/

	EXEC SQL INSERT INTO BL_DCP_TRN
		     ( OPERATING_FACILITY_ID,
		       PATIENT_ID,
		       ORG_DOC_TYPE_CODE,
		       ORG_DOC_NUMBER,
		       LINE_NUM,
		       DOC_TYPE_CODE,
		       DOC_NUMBER,
		       DOC_DATE,
		       PAT_DOC_REFERENCE,
		       DOC_NATURE_CODE,
		       DOC_AMT,
		       TRX_TYPE_CODE,
		       NARRATION,
		       POST_MONTH,
		       POST_YEAR,
		       POSTED_DATE,
		       POSTED_BY_ID,
		       ADDED_BY_ID,
		       MODIFIED_BY_ID,         
		       ADDED_DATE,             
		       MODIFIED_DATE,          
		       ADDED_AT_WS_NO,         
		       ADDED_FACILITY_ID,      
		       MODIFIED_AT_WS_NO,      
		       MODIFIED_FACILITY_ID,
		       DOC_SRL_NO,             
		       CANCELLED_ENTRY_YN )
	    VALUES   ( :nd_operating_facility_id,
		       :recref_patient_id,
		       :recref_bill_doc_type_code,
		       :recref_bill_doc_number ,
		       :pendoc_max_line_num,
		       :recref_doc_type_code,
		       :recref_doc_number,
		       TO_DATE(:recref_doc_date,'DD/MM/YYYY'),
		       NULL,
		       NULL,
		       :recref_doc_amt_negative, 
		       :recref_trx_type_code,
		       :recref_narration,
		       :recref_post_month,
		       :recref_post_year,
		       NULL,
		       NULL,
		       user,
		       user,
		       sysdate,
		       sysdate,
		       :nd_ws_no,
		       :nd_operating_facility_id,
		       :nd_ws_no,
		       :nd_operating_facility_id,
		       NULL,
		       :recref_dcp_ind);

	   if (OERROR) {
	       log_mesg("INSERT failed on table BL_DCP_TRN",0,"");
	       return;
	   }

	   EXEC SQL UPDATE	BL_DCP_PENDING_DOC
		    SET		MAX_LINE_NUM = NVL(MAX_LINE_NUM,0) + 1,
				MODIFIED_BY_ID         = user,
				MODIFIED_DATE          = SYSDATE,
				ADDED_AT_WS_NO         = :nd_ws_no,
				ADDED_FACILITY_ID      = :nd_operating_facility_id,
				MODIFIED_AT_WS_NO      = :nd_ws_no,
				MODIFIED_FACILITY_ID   = :nd_operating_facility_id
		    WHERE	ROWID = :pendoc_rowid
		    AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

	   if (OERROR || NO_DATA_FOUND)
	   {
	      log_mesg("UPDATE failed on BL_DCP_PENDING_DOC",0,"");
	      return;
	   }
    }
}

void ins_blgl_distrib()
{    
    if( (recref_episode_type.arr[0] == 'I' && d_ip_gl_yn == 'N') ||
        (recref_episode_type.arr[0] == 'D' && d_ip_gl_yn == 'N') || 
        (recref_episode_type.arr[0] == 'O' && d_op_gl_yn == 'N') ||
        (recref_episode_type.arr[0] == 'E' && d_op_gl_yn == 'N') ||
        (recref_episode_type.arr[0] == 'R' && d_rf_gl_yn == 'N') ) 

	return;

	

   EXEC SQL INSERT INTO BL_GL_DISTRIBUTION 
             ( OPERATING_FACILITY_ID,	
	           MAIN_ACC1_CODE,
               MAIN_ACC2_CODE,
               DEPT_CODE,
               PRODUCT_GROUP_CODE,
               PRODUCT_LINE_CODE,
               SUBLEDGER_GROUP_CODE,
               SUBLEDGER_LINE_CODE,
               POST_YEAR,
               POST_MONTH,
               TRX_DATE,
               TRX_DOC_REF,
               TRX_DOC_REF_LINE_NUM,
               TRX_DOC_REF_SEQ_NUM,
               EPISODE_TYPE,
               PATIENT_ID,
               EPISODE_ID,
               VISIT_ID,
               SOURCE_DOC_REF,
               SOURCE_DOC_DATE,
               NARRATION,
               TRX_TYPE_CODE,
               DISTRIBUTION_AMT,
               GL_INTERFACE_BY_ID,
               GL_INTERFACE_DATE,
               GL_INTERFACE_FLAG,
               DOC_REF,
	           ADDED_BY_ID,
	           MODIFIED_BY_ID,         
	           ADDED_DATE,             
               MODIFIED_DATE,          
               ADDED_AT_WS_NO,         
               ADDED_FACILITY_ID,      
               MODIFIED_AT_WS_NO,      
               MODIFIED_FACILITY_ID,
	       CASH_CTRL_DOC_TYPE,     
	       CASH_CTRL_DOC_NUMBER,   
	       CASH_CTRL_DOC_DATE,
	       CUST_CODE      
		)
    VALUES   ( :nd_operating_facility_id,
	       :xxxxxx_main_acc1_code,
               :xxxxxx_main_acc2_code,
               :xxxxxx_dept_code,
               :xxxxxx_product_group_code,
               :xxxxxx_product_line_code,
               :xxxxxx_subledger_group_code,
               :xxxxxx_subledger_line_code,
               :recref_post_year,
               :recref_post_month,
               TO_DATE(:recref_doc_date,'DD/MM/YYYY'),
               RPAD(:recref_doc_type_code,6)||
               SUBSTR(TO_CHAR(to_number(:recref_doc_number),'00000009'),2,8)||
			   SUBSTR(TO_CHAR(to_number(:recref_doc_srno),'0009'),1,4),
               0,
               0,
               :recref_episode_type,
               :recref_patient_id,
               :recref_episode_id,
               :recref_visit_id,
               NULL,
               NULL,
               :recref_narration,
               :recref_trx_type_code,
               :xxxxxx_doc_amt,
               NULL,
               NULL,
               'N',
               :recref_bank_recon_ref,		
	       user,
	       user,
	       sysdate,
	       sysdate,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       :nd_doc_type,
	       :nd_doc_num,
	       :nd_doc_date,
	       :recref_customer_code
		);


   if (OERROR) {
       log_mesg("INSERT failed on table BL_GL_DISTRIBUTION",0,"");
       return;
   }

}

void ins_blgl_distrib_bl()
{

    if( (t_episode_type.arr[0] == 'I' && d_ip_gl_yn == 'N') ||
        (t_episode_type.arr[0] == 'D' && d_ip_gl_yn == 'N') || 
        (t_episode_type.arr[0] == 'O' && d_op_gl_yn == 'N') ||
        (t_episode_type.arr[0] == 'E' && d_op_gl_yn == 'N') ||
        (t_episode_type.arr[0] == 'R' && d_rf_gl_yn == 'N'))

	return;

      
	disc_post_month.arr[0] = '\0';
	disc_post_month.len = 0;

        disc_post_year.arr[0] = '\0';
	disc_post_year.len = 0;


       exec sql select nvl(acc_per_year, to_char(to_date(:t_doc_date,'DD/MM/YYYY'),'YYYY')),
        nvl(acc_per_month,to_char(to_date(:t_doc_date,'DD/MM/YYYY'),'MM'))  
	into :disc_post_year, :disc_post_month
	from sy_acc_period_defn
	where to_date(:t_doc_date,'DD/MM/YYYY') 
	between acc_per_start_date and acc_per_end_date;	

	disc_post_month.arr[disc_post_month.len] = '\0';
	disc_post_year.arr[disc_post_year.len] = '\0';
	

   EXEC SQL INSERT INTO BL_GL_DISTRIBUTION 
             ( OPERATING_FACILITY_ID,
	       MAIN_ACC1_CODE,
               MAIN_ACC2_CODE,
               DEPT_CODE,
               PRODUCT_GROUP_CODE,
               PRODUCT_LINE_CODE,
               SUBLEDGER_GROUP_CODE,
               SUBLEDGER_LINE_CODE,
               POST_YEAR,
               POST_MONTH, 
               TRX_DATE,
               TRX_DOC_REF,
               TRX_DOC_REF_LINE_NUM,
               TRX_DOC_REF_SEQ_NUM,
               EPISODE_TYPE,
               PATIENT_ID,
               EPISODE_ID,
               VISIT_ID,
               SOURCE_DOC_REF,
               SOURCE_DOC_DATE,
               NARRATION,
               TRX_TYPE_CODE,
               DISTRIBUTION_AMT,
               GL_INTERFACE_BY_ID,
               GL_INTERFACE_DATE,
               GL_INTERFACE_FLAG,
               DOC_REF,
	       ADDED_BY_ID,
	       MODIFIED_BY_ID,         
	       ADDED_DATE,             
               MODIFIED_DATE,          
               ADDED_AT_WS_NO,         
               ADDED_FACILITY_ID,      
               MODIFIED_AT_WS_NO,      
               MODIFIED_FACILITY_ID,
	       CASH_CTRL_DOC_TYPE,     
	       CASH_CTRL_DOC_NUMBER,   
	       CASH_CTRL_DOC_DATE,
	       CUST_CODE   )

    VALUES   ( :nd_operating_facility_id,
	       :xxxxxx_main_acc1_code,
               :xxxxxx_main_acc2_code,
               :xxxxxx_dept_code,
               :xxxxxx_product_group_code,
               :xxxxxx_product_line_code,
               :xxxxxx_subledger_group_code,
               :xxxxxx_subledger_line_code,
	       nvl(:disc_post_year, TO_NUMBER(TO_CHAR(TO_DATE(:t_doc_date,'DD/MM/YYYY'),'YYYY'))),
	       nvl(:disc_post_month, TO_NUMBER(TO_CHAR(TO_DATE(:t_doc_date,'DD/MM/YYYY'),'MM'))), 
               TO_DATE(:t_doc_date,'DD/MM/YYYY'),
               RPAD(:t_doc_type_code,6)||SUBSTR(TO_CHAR(to_number(:t_doc_num),'00000009'),2,8),
               0,
               0,
               :t_episode_type,
               :t_patient_id,
               :t_episode_id,
               :t_visit_id,
               NULL,
               NULL,
               NULL,
               :t_bill_trx_type_code,
               :xxxxxx_doc_amt,
               NULL,
               NULL,
               'N',
               NULL,
	       user,
	       user,
	       sysdate,
	       sysdate,
	      :nd_ws_no,
	      :nd_operating_facility_id,
	      :nd_ws_no,
	      :nd_operating_facility_id,
	      :nd_doc_type,
	      :nd_doc_num,
	      :nd_doc_date,
	      :recref_customer_code
		);

   if (OERROR) {
       err_mesg("INSERT failed on table BL_GL_DISTRIBUTION",0,"");
       return;
   }
}
get_disc_interface_for_bill()
{

t_bill_disc_recv_acc_int_code.arr[0]='\0';
t_bill_disc_recv_acc_int_code.len =0;

EXEC SQL SELECT B.BILL_DISC_RECV_ACC_INT_CODE
		  INTO   :t_bill_disc_recv_acc_int_code
        FROM BL_BILL_TYPE A, BL_BILL_TYPE_INT B
        WHERE A.BILL_TYPE_CODE = :t_bill_type_code
        AND   A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
				FROM   SY_ACC_ENTITY 
				WHERE  ACC_ENTITY_ID = :nd_operating_facility_id)
		AND  A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE
		AND  A.BILL_TYPE_CODE = B.BILL_TYPE_CODE
		AND TO_DATE(:t_doc_date,'DD/MM/YYYY') between 
		      NVL(B.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(B.EFF_TO_DATE,SYSDATE);   /* Effective date range is included ON 01/06/2004 */

		if(OERROR)
	    err_mesg("SELECT failed on table BL_BILL_TYPE_INT",0,"");

        if(NO_DATA_FOUND)
		{  
		 sprintf(string_var,"Record - %s not found in BL_BILL_TYPE_INT",t_bill_type_code.arr);
	         err_mesg(string_var,0,"");
 		}   

        t_bill_disc_recv_acc_int_code.arr[t_bill_disc_recv_acc_int_code.len] = '\0';


}
void ins_blpat_ledger_trn()
{

     patltr_max_line_num.arr[0] = '\0';
     patltr_rowid.arr[0]        = '\0';

     patltr_max_line_num.len    = 0;
     patltr_rowid.len           = 0;

     if(!strcmp(recref_recpt_nature_code.arr,"BI")) {

         EXEC SQL SELECT ROWID, NVL(MAX_LINE_NUM,0) + 1
                  INTO   :patltr_rowid, :patltr_max_line_num
                  FROM   BL_PATIENT_LEDGER
                  WHERE  NVL(EPISODE_TYPE,'R') = NVL(:recref_episode_type,'R')
	            AND    OPERATING_FACILITY_ID = :nd_operating_facility_id		  
                  AND    PATIENT_ID = :recref_patient_id
                  AND    NVL(EPISODE_ID,0) = NVL(:recref_episode_id,0)
		  //AND    NVL(VISIT_ID,1) = DECODE(:recref_episode_type,'O',NVL(:recref_visit_id,VISIT_ID),VISIT_ID)
		  AND    NVL(VISIT_ID,1) = 
	    	         DECODE(:recref_episode_type,'O',NVL(:recref_visit_id,1),'E',NVL(:recref_visit_id,1),
        		 NVL(VISIT_ID,1))
                  AND    ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
                  AND    ORG_DOC_NUM = :recref_bill_doc_number;

         if (OERROR) {
            log_mesg("SELECT failed on BL_PATIENT_LEDGER",0,"");
	    return;
	 } 

         if (NO_DATA_FOUND)
            do_insrt();
	    if (g_error) return; // Added new

     }
     else {
    
         EXEC SQL SELECT ROWID, NVL(MAX_LINE_NUM,0) + 1
                  INTO   :patltr_rowid, :patltr_max_line_num
                  FROM   BL_PATIENT_LEDGER
                  WHERE  NVL(EPISODE_TYPE,'R') = NVL(:recref_episode_type,'R')
                  AND    PATIENT_ID = :recref_patient_id
	          AND    OPERATING_FACILITY_ID = :nd_operating_facility_id		  
                  AND    NVL(EPISODE_ID,0) = NVL(:recref_episode_id,0)
                  AND    NVL(VISIT_ID,1)  = NVL(:recref_visit_id,1)
                  AND    ORG_DOC_TYPE_CODE = :recref_doc_type_code
                  AND    ORG_DOC_NUM = :recref_doc_number
				  AND    ORG_DOC_SRNO = :recref_doc_srno;

         if (OERROR||NO_DATA_FOUND) {
            log_mesg("SELECT failed on BL_PATIENT_LEDGER",0,"");
	    return;
	 }
    }
    

     patltr_max_line_num.arr[patltr_max_line_num.len] = '\0';
     patltr_rowid.arr[patltr_rowid.len] = '\0';

     if (recref_recpt_refund_ind.arr[0]=='R') /* RECEIPT */
     {
       strcpy(blpat_doc_amt.arr,recref_doc_amt_negative.arr);
       blpat_doc_amt.len = strlen(blpat_doc_amt.arr);
     }
     else /* REFUND CASE */
     {
       strcpy(blpat_doc_amt.arr,recref_doc_amt.arr);
       blpat_doc_amt.len = strlen(blpat_doc_amt.arr);
     }

     EXEC SQL INSERT INTO BL_PATIENT_LEDGER_TRN
                        ( OPERATING_FACILITY_ID,
		          EPISODE_TYPE,
                          PATIENT_ID,
                          EPISODE_ID,
                          VISIT_ID,
                          ORG_DOC_TYPE_CODE,
                          ORG_DOC_NUM,
                          LINE_NUM,
                          DOC_TYPE_CODE,
                          DOC_NUM,
                          DOC_DATE,
                          DOC_AMT,
                          TRX_TYPE_CODE,
                          BILL_TRX_TYPE_CODE,
                          BILL_NATURE_CODE,
                          RECPT_NATURE_CODE,
                          RECPT_TYPE_CODE,
                          NARRATION,
                          ADDED_BY_ID,
                          ADDED_DATE,
                          MODIFIED_BY_ID,
                          MODIFIED_DATE,
                          ADDED_AT_WS_NO,         
                          ADDED_FACILITY_ID,      
                          MODIFIED_AT_WS_NO,      
                          MODIFIED_FACILITY_ID    	
)
               VALUES   ( :nd_operating_facility_id,	
		          :recref_episode_type,
                          :recref_patient_id,
                          :recref_episode_id,
                          NVL(:recref_visit_id,0),
                          DECODE(:recref_recpt_nature_code,'BI',
                                 :recref_bill_doc_type_code,
                                 :recref_doc_type_code),
                          DECODE(:recref_recpt_nature_code,'BI',
                                 :recref_bill_doc_number,
                                 :recref_doc_number),
                          :patltr_max_line_num,
                          :recref_doc_type_code,
                          :recref_doc_number,
                          TO_DATE(:recref_doc_date,'DD/MM/YYYY'),
                          :blpat_doc_amt,
                          :recref_trx_type_code,
                          NULL,
                          NULL,
                          :recref_recpt_nature_code,
                          :recref_recpt_type_code,
                          :recref_narration,
                          USER,
                          TO_DATE(:date_time, 'DD/MM/YYYY HH24:MI'),
                          USER,
                          SYSDATE,
		   	  :nd_ws_no,
		          :nd_operating_facility_id,
		          :nd_ws_no,
		          :nd_operating_facility_id
			  );

     if(OERROR) {
         log_mesg("INSERT failed on table BL_PATIENT_LEDGER_TRN",0,"");
	 return;
     }

/**************** Commented by G Sriram ***********************
     EXEC SQL UPDATE BL_PATIENT_LEDGER
              SET    MAX_LINE_NUM = MAX_LINE_NUM + 1,
                     DOC_OUTST_AMT = DECODE(:recref_recpt_nature_code,
                          'BI', NVL(DOC_OUTST_AMT,0) -:recref_doc_amt,
                          DOC_OUTST_AMT),
                     ADJ_AMT       = DECODE(:recref_recpt_nature_code,
                          'BI', NVL(ADJ_AMT,0) + :recref_doc_amt,
                          ADJ_AMT),
		    MODIFIED_BY_ID         = user,
	            MODIFIED_DATE          = SYSDATE,
		    ADDED_AT_WS_NO         = :nd_ws_no,
		    ADDED_FACILITY_ID      = :nd_operating_facility_id,
	            MODIFIED_AT_WS_NO      = :nd_ws_no,
		    MODIFIED_FACILITY_ID   = :nd_operating_facility_id
              WHERE  ROWID = :patltr_rowid	      ;	

     if (OERROR||NO_DATA_FOUND)
        err_mesg("UPDATE failed on BL_PATIENT_LEDGER",0,"");
******************************* End of Comment by G Sriram  *****/

}

void ins_arrec_hdr()
{

   EXEC SQL INSERT INTO AR_REC_HDR
                     (  ACC_ENTITY_CODE,
                        DOC_TYPE_CODE,
                        DOC_NUM,
                        LAST_LINE_NUM,
                        DOC_DATE,
                        DOC_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE,
                        MAIN_ACC2_CODE,
                        SUBLEDGER_GROUP_CODE,
                        SUBLEDGER_LINE_CODE,
                        DEPT_CODE,
                        PRODUCT_GROUP_CODE,
                        PRODUCT_LINE_CODE,
                        AMT_FOREIGN,
                        AMT_LOCAL,
                        NARRATION,
                        POST_MONTH,
                        POST_YEAR,
                        CURRENCY_CODE,
                        EXCHG_RATE,
                        BANK_DESC,
                        CHEQUE_NUM,
                        CHEQUE_DATE,
                        MISC_CUST_LONG_NAME,
                        MISC_CUST_SHORT_NAME,
                        MISC_CUST_ADD1_DESC,
                        MISC_CUST_ADD2_DESC,
                        MISC_CUST_ADD3_DESC,
                        MISC_CUST_ZIP_DESC,
                        MISC_CUST_LONG_NAME_CHINESE,
                        MISC_CUST_SHORT_NAME_CHINESE,
                        MISC_CUST_ADD1_DESC_CHINESE,
                        MISC_CUST_ADD2_DESC_CHINESE,
                        MISC_CUST_ADD3_DESC_CHINESE,
                        MISC_CUST_ZIP_DESC_CHINESE,
                        TEL_NUM,
                        CONTACT_NAME,
                        CONTACT_NAME_TITLE,

                        ERROR_FLAG,
                        PRINT_FLAG,
                        POSTED_FLAG,
                        INTERFACE_FLAG,
                        POSTED_DATE,
                        POSTED_BY_ID,
			ADDED_BY_ID    ,
			MODIFIED_BY_ID,
			ADDED_DATE     ,
			MODIFIED_DATE  )
             VALUES  (  :nd_acc_entity_code,
                        :recref_doc_type_code,
                        :recref_doc_number,
                        0,
                        TO_DATE(:recref_doc_date,'DD/MM/YYYY'),
                        :blsl_slmt_desc,
                        :recref_customer_code,
                        :othrac_main_acc1_code,
                        :othrac_main_acc2_code,
                        :othrac_subledger_group_code,
                        :othrac_subledger_line_code,
                        :othrac_dept_code,
                        :othrac_product_group_code,
                        :othrac_product_line_code,
                        0,
                        :recref_doc_amt,
                        :recref_narration,
                        :recref_post_month,
                        :recref_post_year,
                        NULL,
                        NULL,
                        :recref_slmt_doc_remarks,
                        substr(:recref_slmt_doc_ref_desc,1,10),
                        TO_DATE(:recref_slmt_doc_ref_date,'DD/MM/YYYY'),
                        NULL, /* :recref_misc_cust_long_name, */
                        NULL, /* :recref_misc_cust_short_name, */
                        NULL, /* :recref_misc_cust_add1_desc, */
                        NULL, /* :recref_misc_cust_add2_desc, */
                        NULL, /* :recref_misc_cust_add3_desc, */
                        NULL, /* :recref_misc_cust_zip_desc, */
                        NULL, /* :recref_misc_cust_long_name_chinese, */
                        NULL, /* :recref_misc_cust_short_name_chinese, */
                        NULL, /* :recref_misc_cust_add1_desc_chinese, */
                        NULL, /* :recref_misc_cust_add2_desc_chinese, */
                        NULL, /* :recref_misc_cust_add3_desc_chinese, */
                        NULL, /* :recref_misc_cust_zip_desc_chinese, */
                        NULL, /*:recref_tel_num, */
                        NULL, /*:recref_contact_name, */
                        NULL, /*:recref_contact_name_title, */
                        NULL,
                        'Y',
                        NULL,
                        NULL,
                        NULL,
                        NULL,
			USER,
			USER,
			SYSDATE,
			SYSDATE);

   if(OERROR) {
       log_mesg("INSERT failed on table AR_REC_HDR",0,"");
       return;
   }
}
void open_recref_dtl()
{

   EXEC SQL OPEN BL_RECEIPT_REFUND_DTL_CUR ;
   if (OERROR)
         err_mesg("OPEN failed on cursor PAT_TRN_HDR_CUR",0,"");
}

int fetch_recref_dtl()
{		      
   recref_rowid.arr[0]                = '\0';
   recref_recpt_refund_ind.arr[0]     = '\0';
   recref_doc_type_code.arr[0]        = '\0';
   recref_doc_number.arr[0]           = '\0';
   recref_doc_srno.arr[0]           = '\0';
   recref_trx_type_code.arr[0]        = '\0';
   recref_recpt_nature_code.arr[0]    = '\0';
   recref_debtor_category_code.arr[0] = '\0';
   recref_doc_date.arr[0]             = '\0';
   recref_post_month.arr[0]           = '\0';
   recref_post_year.arr[0]            = '\0';
   recref_trx_date_time.arr[0]        = '\0';
   recref_episode_type.arr[0]         = '\0';
   recref_patient_id.arr[0]           = '\0';
   recref_episode_id.arr[0]           = '\0';
   recref_visit_id.arr[0]             = '\0';
   recref_bill_doc_type_code.arr[0]   = '\0';
   recref_bill_doc_number.arr[0]      = '\0';
   recref_customer_code.arr[0]        = '\0';
   recref_cash_counter_code.arr[0]    = '\0';
   recref_shift_id.arr[0]             = '\0';
   recref_doc_amt.arr[0]              = '\0';
   recref_doc_amt_negative.arr[0]     = '\0';
   recref_recpt_type_code.arr[0]      = '\0';
   recref_slmt_type_code .arr[0]      = '\0';
   recref_slmt_doc_ref_desc.arr[0]    = '\0';
   recref_slmt_doc_ref_date.arr[0]    = '\0';
   recref_slmt_doc_remarks.arr[0]     = '\0';
   recref_bank_recon_ref .arr[0]      = '\0';
   recref_print_flag.arr[0]           = '\0';
   recref_cancelled_ind.arr[0]        = '\0';
   recref_posted_ind.arr[0]           = '\0';
   recref_narration.arr[0]            = '\0';
   recref_cons_receipt_yn.arr[0]      = '\0';


   nd_doc_type.arr[0]		      = '\0';
   nd_doc_num.arr[0]		      = '\0';
   nd_doc_date.arr[0]		      = '\0';

   recref_rowid.len                   = 0;
   recref_recpt_refund_ind.len        = 0;
   recref_doc_type_code.len           = 0;
   recref_doc_number.len              = 0;
   recref_doc_srno.len                = 0;
   recref_trx_type_code.len           = 0;
   recref_recpt_nature_code.len       = 0;
   recref_debtor_category_code.len    = 0;
   recref_doc_date.len                = 0;
   recref_post_month.len              = 0;
   recref_post_year.len               = 0;
   recref_trx_date_time.len           = 0;
   recref_episode_type.len            = 0;
   recref_patient_id.len              = 0;
   recref_episode_id.len              = 0;
   recref_visit_id.len                = 0;
   recref_bill_doc_type_code.len      = 0;
   recref_bill_doc_number.len         = 0;
   recref_customer_code.len           = 0;
   recref_cash_counter_code.len       = 0;
   recref_shift_id.len                = 0;
   recref_doc_amt.len                 = 0;
   recref_doc_amt_negative.len        = 0;
   recref_recpt_type_code.len         = 0;
   recref_slmt_type_code .len         = 0;
   recref_slmt_doc_ref_desc.len       = 0;
   recref_slmt_doc_ref_date.len       = 0;
   recref_slmt_doc_remarks.len        = 0;
   recref_bank_recon_ref .len         = 0;
   recref_print_flag.len              = 0;
   recref_cancelled_ind.len           = 0;
   recref_posted_ind.len              = 0;
   recref_narration.len               = 0;
   recref_cons_receipt_yn.len	      = 0;

   nd_doc_type.len = 0;
   nd_doc_num.len = 0;
   nd_doc_date.len = 0;

   EXEC SQL FETCH BL_RECEIPT_REFUND_DTL_CUR INTO
                  :recref_rowid,
                  :recref_recpt_refund_ind,
                  :recref_doc_type_code,
                  :recref_doc_number,
				  :recref_doc_srno,
                  :recref_trx_type_code,
                  :recref_recpt_nature_code,
                  :recref_debtor_category_code,
                  :recref_doc_date,
                  :recref_post_month,
                  :recref_post_year,
                  :recref_trx_date_time,
                  :recref_episode_type,
                  :recref_patient_id,
                  :recref_episode_id,
                  :recref_visit_id,
                  :recref_bill_doc_type_code,
                  :recref_bill_doc_number,
                  :recref_customer_code,
                  :recref_cash_counter_code,
                  :recref_shift_id,
                  :recref_doc_amt,
                  :recref_doc_amt_negative,
                  :recref_recpt_type_code,
                  :recref_slmt_type_code ,
                  :recref_slmt_doc_ref_desc,
                  :recref_slmt_doc_ref_date,
                  :recref_slmt_doc_remarks,
                  :recref_bank_recon_ref ,
                  :recref_print_flag,
                  :recref_cancelled_ind,
                  :recref_posted_ind,
                  :recref_narration,
		  :nd_doc_type,
		  :nd_doc_num,
		  :nd_doc_date,
		  :recref_cons_receipt_yn;          
   

   if (OERROR)
      err_mesg("FETCH failed on BL_RECEIPT_REFUND_DTL_CUR",0,"");

   if (LAST_ROW) return (0);   

   recref_rowid.arr[recref_rowid.len]                               = '\0';
   recref_recpt_refund_ind.arr[recref_recpt_refund_ind.len]         = '\0';
   recref_doc_type_code.arr[recref_doc_type_code.len]               = '\0';
   recref_doc_number.arr[recref_doc_number.len]                     = '\0';
   recref_doc_srno.arr[recref_doc_srno.len]                     = '\0';
   recref_trx_type_code.arr[recref_trx_type_code.len]               = '\0';
   recref_recpt_nature_code.arr[recref_recpt_nature_code.len]       = '\0';
   recref_debtor_category_code.arr[recref_debtor_category_code.len] = '\0';
   recref_doc_date.arr[recref_doc_date.len]                         = '\0';
   recref_post_month.arr[recref_post_month.len]                     = '\0';
   recref_post_year.arr[recref_post_year.len]                       = '\0';
   recref_trx_date_time.arr[recref_trx_date_time.len]               = '\0';
   recref_episode_type.arr[recref_episode_type.len]                 = '\0';
   recref_patient_id.arr[recref_patient_id.len]                     = '\0';
   recref_episode_id.arr[recref_episode_id.len]                     = '\0';
   recref_visit_id.arr[recref_visit_id.len]                         = '\0';
   recref_bill_doc_type_code.arr[recref_bill_doc_type_code.len]     = '\0';
   recref_bill_doc_number.arr[recref_bill_doc_number.len]           = '\0';
   recref_customer_code.arr[recref_customer_code.len]               = '\0';
   recref_cash_counter_code.arr[recref_cash_counter_code.len]       = '\0';
   recref_shift_id.arr[recref_shift_id.len]                         = '\0';
   recref_doc_amt.arr[recref_doc_amt.len]                           = '\0';
   recref_doc_amt_negative.arr[recref_doc_amt_negative.len]         = '\0';
   recref_recpt_type_code.arr[recref_recpt_type_code.len]           = '\0';
   recref_slmt_type_code .arr[recref_slmt_type_code .len]           = '\0';
   recref_slmt_doc_ref_desc.arr[recref_slmt_doc_ref_desc.len]       = '\0';
   recref_slmt_doc_ref_date.arr[recref_slmt_doc_ref_date.len]       = '\0';
   recref_slmt_doc_remarks.arr[recref_slmt_doc_remarks.len]         = '\0';
   recref_bank_recon_ref .arr[recref_bank_recon_ref .len]           = '\0';
   recref_print_flag.arr[recref_print_flag.len]                     = '\0';
   recref_cancelled_ind.arr[recref_cancelled_ind.len]               = '\0';
   recref_posted_ind.arr[recref_posted_ind.len]                     = '\0';
   recref_narration.arr[recref_narration.len]                       = '\0';
   nd_doc_type.arr[nd_doc_type.len]	                            = '\0';
   nd_doc_num.arr[nd_doc_num.len]	                            = '\0';
   nd_doc_date.arr[nd_doc_date.len]	                            = '\0';
   recref_cons_receipt_yn.arr[recref_cons_receipt_yn.len]	    = '\0';

   if(!recref_trx_type_code.arr[0]) {
       if(recref_recpt_refund_ind.arr[0] == 'R')
	   strcpy(recref_trx_type_code.arr,"5");
       else if(recref_recpt_refund_ind.arr[0] == 'F')
	   strcpy(recref_trx_type_code.arr,"6");

      recref_trx_type_code.len = strlen(recref_trx_type_code.arr);
    }

   return 1;
}


void open_recref_dtl_bl()
{

   EXEC SQL OPEN BL_RECEIPT_REFUND_DTL_BL_CUR ;
   if (OERROR)
         err_mesg("OPEN failed on cursor BL_RECEIPT_REFUND_DTL_BL_CUR",0,"");
}

int fetch_recref_dtl_bl()
{

   recref_rowid.arr[0]                = '\0';
   recref_recpt_refund_ind.arr[0]     = '\0';
   recref_doc_type_code.arr[0]        = '\0';
   recref_doc_number.arr[0]           = '\0';
   recref_doc_srno.arr[0]             = '\0';
   recref_trx_type_code.arr[0]        = '\0';
   recref_recpt_nature_code.arr[0]    = '\0';
   recref_debtor_category_code.arr[0] = '\0';
   recref_doc_date.arr[0]             = '\0';
   recref_post_month.arr[0]           = '\0';
   recref_post_year.arr[0]            = '\0';
   recref_trx_date_time.arr[0]        = '\0';
   recref_episode_type.arr[0]         = '\0';
   recref_patient_id.arr[0]           = '\0';
   recref_episode_id.arr[0]           = '\0';
   recref_visit_id.arr[0]             = '\0';
   recref_bill_doc_type_code.arr[0]   = '\0';
   recref_bill_doc_number.arr[0]      = '\0';
   recref_customer_code.arr[0]        = '\0';
   recref_cash_counter_code.arr[0]    = '\0';
   recref_shift_id.arr[0]             = '\0';
   recref_doc_amt.arr[0]              = '\0';
   recref_doc_amt_negative.arr[0]     = '\0';
   recref_recpt_type_code.arr[0]      = '\0';
   recref_slmt_type_code .arr[0]      = '\0';
   recref_slmt_doc_ref_desc.arr[0]    = '\0';
   recref_slmt_doc_ref_date.arr[0]    = '\0';
   recref_slmt_doc_remarks.arr[0]     = '\0';
   recref_bank_recon_ref .arr[0]      = '\0';
   recref_print_flag.arr[0]           = '\0';
   recref_cancelled_ind.arr[0]        = '\0';
   recref_posted_ind.arr[0]           = '\0';
   recref_narration.arr[0]            = '\0';

   nd_doc_type.arr[0]		      = '\0';
   nd_doc_num.arr[0]		      = '\0';
   nd_doc_date.arr[0]	              = '\0';
   recref_cons_receipt_yn.arr[0]      = '\0';

   recref_rowid.len                   = 0;
   recref_recpt_refund_ind.len        = 0;
   recref_doc_type_code.len           = 0;
   recref_doc_number.len              = 0;
   recref_doc_srno.len                = 0;
   recref_trx_type_code.len           = 0;
   recref_recpt_nature_code.len       = 0;
   recref_debtor_category_code.len    = 0;
   recref_doc_date.len                = 0;
   recref_post_month.len              = 0;
   recref_post_year.len               = 0;
   recref_trx_date_time.len           = 0;
   recref_episode_type.len            = 0;
   recref_patient_id.len              = 0;
   recref_episode_id.len              = 0;
   recref_visit_id.len                = 0;
   recref_bill_doc_type_code.len      = 0;
   recref_bill_doc_number.len         = 0;
   recref_customer_code.len           = 0;
   recref_cash_counter_code.len       = 0;
   recref_shift_id.len                = 0;
   recref_doc_amt.len                 = 0;
   recref_doc_amt_negative.len        = 0;
   recref_recpt_type_code.len         = 0;
   recref_slmt_type_code .len         = 0;
   recref_slmt_doc_ref_desc.len       = 0;
   recref_slmt_doc_ref_date.len       = 0;
   recref_slmt_doc_remarks.len        = 0;
   recref_bank_recon_ref .len         = 0;
   recref_print_flag.len              = 0;
   recref_cancelled_ind.len           = 0;
   recref_posted_ind.len              = 0;
   recref_narration.len               = 0;
   
   nd_doc_type.len = 0;
   nd_doc_num.len = 0;
   nd_doc_date.len = 0;
   recref_cons_receipt_yn.len = 0;


   EXEC SQL FETCH BL_RECEIPT_REFUND_DTL_BL_CUR INTO
                  :recref_rowid,
                  :recref_recpt_refund_ind,
                  :recref_doc_type_code,
                  :recref_doc_number,
                  :recref_trx_type_code,
                  :recref_recpt_nature_code,
                  :recref_debtor_category_code,
                  :recref_doc_date,
                  :recref_post_month,
                  :recref_post_year,
                  :recref_trx_date_time,
                  :recref_episode_type,
                  :recref_patient_id,
                  :recref_episode_id,
                  :recref_visit_id,
                  :recref_bill_doc_type_code,
                  :recref_bill_doc_number,
                  :recref_customer_code,
                  :recref_cash_counter_code,
                  :recref_shift_id,
                  :recref_doc_amt,
                  :recref_doc_amt_negative,
                  :recref_recpt_type_code,
                  :recref_slmt_type_code ,
                  :recref_slmt_doc_ref_desc,
                  :recref_slmt_doc_ref_date,
                  :recref_slmt_doc_remarks,
                  :recref_bank_recon_ref ,
                  :recref_print_flag,
                  :recref_cancelled_ind,
                  :recref_posted_ind,
                  :recref_narration,
		  :nd_doc_type,
		  :nd_doc_num,
		  :nd_doc_date,
		  :recref_cons_receipt_yn;

   if (OERROR)
      err_mesg("FETCH failed on BL_RECEIPT_REFUND_DTL_BL_CUR",0,"");

   if (LAST_ROW) return (0);

   recref_rowid.arr[recref_rowid.len]                               = '\0';
   recref_recpt_refund_ind.arr[recref_recpt_refund_ind.len]         = '\0';
   recref_doc_type_code.arr[recref_doc_type_code.len]               = '\0';
   recref_doc_number.arr[recref_doc_number.len]                     = '\0';
   recref_trx_type_code.arr[recref_trx_type_code.len]               = '\0';
   recref_recpt_nature_code.arr[recref_recpt_nature_code.len]       = '\0';
   recref_debtor_category_code.arr[recref_debtor_category_code.len] = '\0';
   recref_doc_date.arr[recref_doc_date.len]                         = '\0';
   recref_post_month.arr[recref_post_month.len]                     = '\0';
   recref_post_year.arr[recref_post_year.len]                       = '\0';
   recref_trx_date_time.arr[recref_trx_date_time.len]               = '\0';
   recref_episode_type.arr[recref_episode_type.len]                 = '\0';
   recref_patient_id.arr[recref_patient_id.len]                     = '\0';
   recref_episode_id.arr[recref_episode_id.len]                     = '\0';
   recref_visit_id.arr[recref_visit_id.len]                         = '\0';
   recref_bill_doc_type_code.arr[recref_bill_doc_type_code.len]     = '\0';
   recref_bill_doc_number.arr[recref_bill_doc_number.len]           = '\0';
   recref_customer_code.arr[recref_customer_code.len]               = '\0';
   recref_cash_counter_code.arr[recref_cash_counter_code.len]       = '\0';
   recref_shift_id.arr[recref_shift_id.len]                         = '\0';
   recref_doc_amt.arr[recref_doc_amt.len]                           = '\0';
   recref_doc_amt_negative.arr[recref_doc_amt_negative.len]         = '\0';
   recref_recpt_type_code.arr[recref_recpt_type_code.len]           = '\0';
   recref_slmt_type_code .arr[recref_slmt_type_code .len]           = '\0';
   recref_slmt_doc_ref_desc.arr[recref_slmt_doc_ref_desc.len]       = '\0';
   recref_slmt_doc_ref_date.arr[recref_slmt_doc_ref_date.len]       = '\0';
   recref_slmt_doc_remarks.arr[recref_slmt_doc_remarks.len]         = '\0';
   recref_bank_recon_ref .arr[recref_bank_recon_ref .len]           = '\0';
   recref_print_flag.arr[recref_print_flag.len]                     = '\0';
   recref_cancelled_ind.arr[recref_cancelled_ind.len]               = '\0';
   recref_posted_ind.arr[recref_posted_ind.len]                     = '\0';
   recref_narration.arr[recref_narration.len]                       = '\0';
   nd_doc_type.arr[nd_doc_type.len]		                    = '\0';
   nd_doc_num.arr[nd_doc_num.len]		                    = '\0';
   nd_doc_date.arr[nd_doc_date.len]		                    = '\0';
   recref_cons_receipt_yn.arr[recref_cons_receipt_yn.len]	    = '\0';

   if(!recref_trx_type_code.arr[0]) {
       if(recref_recpt_refund_ind.arr[0] == 'R')
	   strcpy(recref_trx_type_code.arr,"5");
       else if(recref_recpt_refund_ind.arr[0] == 'P')
	   strcpy(recref_trx_type_code.arr,"6");

      recref_trx_type_code.len = strlen(recref_trx_type_code.arr);
    }


   return 1;
}

void init_old()
{
   old_cash_counter_code[0] = '\0';
   old_slmt_type_code[0]    = '\0';
}

int brk_cash()
{
   if (strcmp(old_cash_counter_code, recref_cash_counter_code.arr)!=0)
   {
      strcpy(old_cash_counter_code, recref_cash_counter_code.arr);
      return 1;
   }
   return 0;
}

int brk_slmt()
{
   if (strcmp(old_slmt_type_code, recref_slmt_type_code.arr)!=0)
   {
      strcpy(old_slmt_type_code, recref_slmt_type_code.arr);
      return 1;
   }
   return 0;
}

void get_slmt_desc()
{
    EXEC SQL OPEN BL_SLMT_TYPE_CUR;

    if (OERROR) {
       log_mesg("OPEN failed on BL_STMT_TYPE_CUR",0,"");
	return ;
    }   

    blsl_slmt_desc.arr[0] = '\0';

    blsl_slmt_desc.len    = 0;

    EXEC SQL FETCH BL_SLMT_TYPE_CUR INTO
                   :blsl_slmt_desc;

    if (OERROR) {
       log_mesg("FETCH failed on BL_STMT_TYPE_CUR",0,"");
       return;
    }

     if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s  not found in BL_SLMT_TYPE",recref_slmt_type_code.arr);
	   disp_message(ERR_MESG,msg_str);
	   loc_log_msg(msg_str);
     }



    blsl_slmt_desc.arr[blsl_slmt_desc.len] = '\0';
}

void get_bank_acc()
{
    bankac_main_acc1_code.arr[0]       = '\0';
    bankac_main_acc2_code.arr[0]       = '\0';
    bankac_dept_code.arr[0]            = '\0';
    bankac_subledger_group_code.arr[0] = '\0';
    bankac_subledger_line_code.arr[0]  = '\0';
    bankac_product_group_code.arr[0]   = '\0';
    bankac_product_line_code.arr[0]    = '\0';

    bankac_main_acc1_code.len         = 0;
    bankac_main_acc2_code.len         = 0;
    bankac_dept_code.len              = 0;
    bankac_subledger_group_code.len   = 0;
    bankac_subledger_line_code.len    = 0;
    bankac_product_group_code.len     = 0;
    bankac_product_line_code.len      = 0;

    EXEC SQL OPEN BL_GL_ACCOUNT_CUR;
 
    if (OERROR)
       err_mesg("OPEN failed on BL_GL_ACCOUNT_CUR",0,"");

    EXEC SQL FETCH BL_GL_ACCOUNT_CUR INTO
                      :bankac_main_acc1_code ,
                      :bankac_main_acc2_code ,
                      :bankac_dept_code,
                      :bankac_subledger_group_code,
                      :bankac_subledger_line_code,
                      :bankac_product_group_code,
                      :bankac_product_line_code;

    if (OERROR) {
       log_mesg("FETCH failed on BL_GL_ACCOUNT_CUR",0,"");
       init_old();
       return;
		}

    if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s - %s - %s not found in BL_SLMT_CASH_COUNTER_INT",
			  nd_operating_facility_id.arr,
			  recref_cash_counter_code.arr,
			  recref_slmt_type_code.arr
			  );
	  //disp_message(ERR_MESG,msg_str);
	  loc_log_msg(msg_str);
	  // log_mesg("msg_str",0,"");
	   return;
     }

    bankac_main_acc1_code.arr[bankac_main_acc1_code.len]             = '\0';
    bankac_main_acc2_code.arr[bankac_main_acc2_code.len]             = '\0';
    bankac_dept_code.arr[bankac_dept_code.len]                       = '\0';
    bankac_subledger_group_code.arr[bankac_subledger_group_code.len] = '\0';
    bankac_subledger_line_code.arr[bankac_subledger_line_code.len]   = '\0';
    bankac_product_group_code.arr[bankac_product_group_code.len]     = '\0';
    bankac_product_line_code.arr[bankac_product_line_code.len]       = '\0';
}

void get_other_acc(int i) /* 0 - RECEIPT REFUND 1 - BILLS  2 - RD  3 - DC */
{    
    othrac_main_acc1_code.arr[0]       = '\0';
    othrac_main_acc2_code.arr[0]       = '\0';
    othrac_dept_code.arr[0]            = '\0';
    othrac_subledger_group_code.arr[0] = '\0';
    othrac_subledger_line_code.arr[0]  = '\0';
    othrac_product_group_code.arr[0]   = '\0';
    othrac_product_line_code.arr[0]    = '\0';

    othrac_main_acc1_code.len         = 0;
    othrac_main_acc2_code.len         = 0;
    othrac_dept_code.len              = 0;
    othrac_subledger_group_code.len   = 0;
    othrac_subledger_line_code.len    = 0;
    othrac_product_group_code.len     = 0;
    othrac_product_line_code.len      = 0;

    switch (i) {
    case 0 :
        EXEC SQL OPEN BL_GL_ACCOUNT_OTHER_CUR;
 
        if (OERROR) {
           log_mesg("OPEN failed on BL_GL_ACCOUNT_OTHER_CUR",0,"");
	   return;
	}     

        EXEC SQL FETCH BL_GL_ACCOUNT_OTHER_CUR INTO
                          :othrac_main_acc1_code ,
                          :othrac_main_acc2_code ,
                          :othrac_dept_code,
                          :othrac_subledger_group_code,
                          :othrac_subledger_line_code,
                          :othrac_product_group_code,
                          :othrac_product_line_code;

        if (OERROR) {    

           log_mesg("FETCH failed on BL_GL_ACCOUNT_OTHER_CUR",0,"");
	   return;
	}

       if (ROW_COUNT == 0)
       {          
	   sprintf(msg_str,"Record for %s - %s not found in BL_RECEIPT_TYPE_INT",
			  nd_operating_facility_id.arr,
			  recref_recpt_type_code.arr);
	   
	   //disp_message(ERR_MESG,msg_str);
	   //log_mesg(msg_str,0,"");

	   loc_log_msg(msg_str);
	   strcpy(msg_str_var,msg_str);
	   g_error = 1;	   	    
	   upd_recref_unpost_reason();	   
	  return;
       }     
		
        EXEC SQL CLOSE BL_GL_ACCOUNT_OTHER_CUR;
        break;

    case 1: 

        EXEC SQL OPEN BL_GL_ACCOUNT_OTHER_BL_CUR;
 
        if (OERROR) {
           log_mesg("OPEN failed on BL_GL_ACCOUNT_OTHER_BL_CUR",0,"");
	   return;
	}

        EXEC SQL FETCH BL_GL_ACCOUNT_OTHER_BL_CUR INTO
                          :othrac_main_acc1_code ,
                          :othrac_main_acc2_code ,
                          :othrac_dept_code,
                          :othrac_subledger_group_code,
                          :othrac_subledger_line_code,
                          :othrac_product_group_code,
                          :othrac_product_line_code;

        if (OERROR) {
           log_mesg("FETCH failed on BL_GL_ACCOUNT_OTHER_BL_CUR",0,"");
	   return;
	}
     if (ROW_COUNT == 0)     
      {
	   sprintf(msg_str,"Record for %s - %s not found in BL_BILL_TYPE_INT for the document %s - %s",
			  nd_operating_facility_id.arr,
			  t_bill_type_code.arr,
			  recref_bill_doc_type_code.arr,
			  recref_bill_doc_number.arr);
	   //disp_message(ERR_MESG,msg_str);
	   loc_log_msg(msg_str);
	   //log_mesg(msg_str,0,"");
	   g_error = 1;
	   return;
      }

         EXEC SQL CLOSE BL_GL_ACCOUNT_OTHER_BL_CUR;
         break;

    case 2:     

        EXEC SQL OPEN BL_GL_ACCOUNT_OTHER_RD_CUR;
 
        if (OERROR) {
           log_mesg("OPEN failed on BL_GL_ACCOUNT_OTHER_RD_CUR",0,"");
	   return;
	}

        EXEC SQL FETCH BL_GL_ACCOUNT_OTHER_RD_CUR INTO
                          :othrac_main_acc1_code ,
                          :othrac_main_acc2_code ,
                          :othrac_dept_code,
                          :othrac_subledger_group_code,
                          :othrac_subledger_line_code,
                          :othrac_product_group_code,
                          :othrac_product_line_code;
        if (OERROR) {
           log_mesg("FETCH failed on BL_GL_ACCOUNT_OTHER_RD_CUR",0,"");
	   return;
	}

	if (ROW_COUNT == 0)
     {
	   sprintf(msg_str,"Record for %s - %s not found in BL_RECEIPT_TYPE_INT for the document %s - %s",
			  nd_operating_facility_id.arr,
			  recref_recpt_type_code.arr,
			  recref_bill_doc_type_code.arr,
			  recref_bill_doc_number.arr);

	   //disp_message(ERR_MESG,msg_str);
	   loc_log_msg(msg_str);
	   //log_mesg(msg_str,0,"");
	   g_error = 1;	   
	   upd_recref_unpost_reason();
	   return;
     }

     

        EXEC SQL CLOSE BL_GL_ACCOUNT_OTHER_RD_CUR;
        break;


    case 3: 

        EXEC SQL OPEN BL_GL_ACCOUNT_OTHER_DC_CUR;
 
        if (OERROR) {
           log_mesg("OPEN failed on BL_GL_ACCOUNT_OTHER_DC_CUR",0,"");
	   return;
	}

        EXEC SQL FETCH BL_GL_ACCOUNT_OTHER_DC_CUR INTO
                          :othrac_main_acc1_code ,
                          :othrac_main_acc2_code ,
                          :othrac_dept_code,
                          :othrac_subledger_group_code,
                          :othrac_subledger_line_code,
                          :othrac_product_group_code,
                          :othrac_product_line_code;

        if (OERROR) {
           log_mesg("FETCH failed on BL_GL_ACCOUNT_OTHER_DC_CUR",0,"");
	   return;
	}
      nd_dcp_bill_type_code.arr[0] = '\0';
      nd_dcp_bill_type_code.len = 0;

      EXEC SQL SELECT BILL_TYPE_CODE INTO :nd_dcp_bill_type_code 
      FROM BL_DCP_PENDING_DOC 
      WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
      AND ORG_DOC_TYPE_CODE  = :recref_bill_doc_type_code
      AND  ORG_DOC_NUMBER     = :recref_bill_doc_number;

      if (OERROR) {
           log_mesg("FETCH failed on BL_GL_ACCOUNT_OTHER_DC_CUR",0,"");
	   return;
	}
      nd_dcp_bill_type_code.arr[nd_dcp_bill_type_code.len] = '\0';

      if (ROW_COUNT == 0)
      {
	 sprintf(msg_str,"Record for %s - %s not found in BL_BILL_TYPE_INT for the document %s - %s",
			  nd_operating_facility_id.arr,
			  nd_dcp_bill_type_code.arr,
			  recref_bill_doc_type_code.arr,
			  recref_bill_doc_number.arr);
	   //disp_message(ERR_MESG,msg_str);
	   loc_log_msg(msg_str);
	   //log_mesg(msg_str,0,"");
	   g_error = 1;
	   upd_recref_unpost_reason();
	   return;
      }


        EXEC SQL CLOSE BL_GL_ACCOUNT_OTHER_DC_CUR;
        break;
    }

    othrac_main_acc1_code.arr[othrac_main_acc1_code.len]             = '\0';
    othrac_main_acc2_code.arr[othrac_main_acc2_code.len]             = '\0';
    othrac_dept_code.arr[othrac_dept_code.len]                       = '\0';
    othrac_subledger_group_code.arr[othrac_subledger_group_code.len] = '\0';
    othrac_subledger_line_code.arr[othrac_subledger_line_code.len]   = '\0';
    othrac_product_group_code.arr[othrac_product_group_code.len]     = '\0';
    othrac_product_line_code.arr[othrac_product_line_code.len]       = '\0';

}

void move_into_post_acc(int i /* 0 - BANK ; 1 - OTHER */)
{
   if (i==0)
   {
    strcpy(xxxxxx_main_acc1_code.arr,bankac_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);
    strcpy(xxxxxx_main_acc2_code.arr,bankac_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);
    strcpy(xxxxxx_dept_code.arr,bankac_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);
    strcpy(xxxxxx_subledger_group_code.arr,bankac_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);
    strcpy(xxxxxx_subledger_line_code.arr,bankac_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);
    strcpy(xxxxxx_product_group_code.arr,bankac_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);
    strcpy(xxxxxx_product_line_code.arr,bankac_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    strcpy(xxxxxx_doc_amt.arr,recref_doc_amt.arr);
    xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

    /*
    if (recref_recpt_refund_ind.arr[0]=='R')
    {
       strcpy(xxxxxx_doc_amt.arr,recref_doc_amt.arr);
       xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
    else
    {
       strcpy(xxxxxx_doc_amt.arr,recref_doc_amt_negative.arr);
       xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
    */

   }
   else
   {
    strcpy(xxxxxx_main_acc1_code.arr,othrac_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);
    strcpy(xxxxxx_main_acc2_code.arr,othrac_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);
    strcpy(xxxxxx_dept_code.arr,othrac_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);
    strcpy(xxxxxx_subledger_group_code.arr,othrac_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);
    strcpy(xxxxxx_subledger_line_code.arr,othrac_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);
    strcpy(xxxxxx_product_group_code.arr,othrac_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);
    strcpy(xxxxxx_product_line_code.arr,othrac_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    strcpy(xxxxxx_doc_amt.arr,recref_doc_amt_negative.arr);
    xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

/*
    if (recref_recpt_refund_ind.arr[0]=='R')
    {
       strcpy(xxxxxx_doc_amt.arr,recref_doc_amt_negative.arr);
       xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
    else
    {
       strcpy(xxxxxx_doc_amt.arr,recref_doc_amt.arr);
       xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
*/

   }
}

process_dpf()
{

//disp_message(ERR_MESG,nd_operating_facility_id.arr);
//disp_message(ERR_MESG,nd_date.arr);
//disp_message(ERR_MESG,nd_bill_doc_type_code.arr);
//disp_message(ERR_MESG,nd_bill_doc_num.arr);

    EXEC SQL DECLARE T_BILL_HDR_CUR CURSOR FOR
	     SELECT  EPISODE_TYPE,
		 PATIENT_ID,
		 NVL(EPISODE_ID,0),
		 NVL(VISIT_ID,1),
		 BILL_TRX_TYPE_CODE,
		 BILL_NATURE_CODE,
		 BILL_TOT_AMT,
		 BILL_TOT_OUTST_AMT,
		 BILL_PRV_OUTST_AMT,
		 ADDED_BY_ID,
		 MODIFIED_BY_ID,
		 ADDED_DATE,
		 MODIFIED_DATE,
		 DOC_TYPE_CODE,
		 DOC_NUM,
		 TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                 NVL(MAN_DISC_AMT,0),
                 NVL(OVERALL_DISC_AMT,0),
                 OVR_DISC_ACC_INT_CODE,
                 BILL_TYPE_CODE,
                 NVL(OVERALL_DISC_AMT,0),
                 NVL(OVERALL_DISC_AMT,0) * -1,  
			     NVL(BILL_DRFEE_AMT,0),
                 NVL(BILL_DRFEE_TOT_OUTST_AMT,0),
                 NVL(DRFEE_RECEIPT_AMT,0),
				 NVL(BILL_HOSP_TOT_OUTST_AMT,0),
				 NVL(BILL_ROUNDING_AMT,0) ROUND_AMT,
				 DECODE(SIGN(NVL(BILL_ROUNDING_AMT,0)),1,'+','-') SIGN_IND,
				 NVL(BILL_PRINT_FLAG,'N') PRINT_FLAG,
				 BILL_TYPE_CODE,
				 CASH_CTRL_DOC_TYPE_CODE,
                 CASH_CTRL_DOC_NUMBER   ,
                 CASH_CTRL_DOC_DATE,
				 CASH_COUNTER_CODE,
				 SHIFT_ID
	     FROM    BL_BILL_HDR
	     WHERE   NVL(BILL_POSTED_FLAG,'X') != 'Y'
	    /* //AND   NVL(BILL_PRINT_FLAG,'X')   = 'Y'
		 //Comment removed the above statement.  Cancelled bills are processed seperately.
		 //A. Harish 08/01/2004.*/
          AND     NVL(BILL_STATUS,'X') != 'C'
	      AND     OPERATING_FACILITY_ID = :nd_operating_facility_id
		  /*
		  AND     ((BILL_STATUS IS NULL) OR
				(BILL_STATUS = 'D') OR
				(BILL_TRX_TYPE_CODE = 'I' AND BILL_STATUS = 'S'))
		  */
          AND    TRUNC(DOC_DATE) <= TO_DATE(:nd_date, 'DD/MM/YYYY')
		  AND    (:nd_bill_doc_type_code is null or (:nd_bill_doc_type_code is not null and 
		          DOC_TYPE_CODE =  :nd_bill_doc_type_code AND 
				  DOC_NUM = :nd_bill_doc_num))
	      FOR    UPDATE OF BILL_POSTED_FLAG;

    EXEC SQL OPEN T_BILL_HDR_CUR;

    if(OERROR)
			err_mesg("FETCH failed on cursor T_BILL_HDR_CUR",0,"");

    while(fetch_bill_hdr()) 
	{
       //disp_message(ERR_MESG,"In while(fetch_bill_hdr())");
	    
		if(g_error) 
			do_rollback();

		EXEC SQL SAVEPOINT LAST_DOC_REF;
		
		/*
		ins_pat_ledger_bill();
		ins_pat_ledger_trn_bill();
		*/
        if (t_bill_trx_type_code.arr[0] == 'I')
            ins_pat_inhouse_bill();

		/*	
		if(t_bill_drfee_tot_amt > 0)
			upd_phys_ledger();
		*/

		/*	
		if(t_org_rec_amt > 0)	
			process_dpf_rec_BI();
		*/

//disp_message(ERR_MESG,"Before update of reasons...");

	upd_reasons_in_receipt_refund_for_unposting(4); 		
	
		if (nd_reason_text.arr[0] != '\0')
			continue;

//disp_message(ERR_MESG,"After reason text is null...");

		post_discounts(0);
		if (g_error) continue; // Added new

//disp_message(ERR_MESG,"After postaccounts...");        

        if (t_round_amt != 0)
           post_rounding_amt(0);
	    if (g_error) continue;

//disp_message(ERR_MESG,"After post rounding amt...");        

		EXEC SQL UPDATE BL_BILL_HDR
				SET BILL_POSTED_FLAG		= 'Y',
				UNPOSTED_REASON			= NULL,
				MODIFIED_BY_ID			= user,
				MODIFIED_DATE			= SYSDATE,		    
				MODIFIED_AT_WS_NO		= :nd_ws_no,
				MODIFIED_FACILITY_ID	= :nd_operating_facility_id
				WHERE  
				CURRENT OF T_BILL_HDR_CUR;

		if(OERROR)
			err_mesg("UPDATE failed on table BL_BILL_HDR",0,"");

        post_dr_share();
 
  //disp_message(ERR_MESG,"end of while fetch bill_hdr");

    } /* end of while fetch bill_hdr */

    EXEC SQL CLOSE T_BILL_HDR_CUR;
    EXEC SQL CLOSE T_PATIENT_FOLIO_CUR;
    return 1;
}

fetch_bill_hdr()
{
    t_round_amt = 0;
    t_sign_ind.arr[0] = '\0';
    t_doc_type_code.arr[0]  = '\0';
    t_doc_num.arr[0]  = '\0';
    t_doc_date.arr[0]  = '\0';
    t_overall_int_code.arr[0] = '\0';
    t_bill_type_code.arr[0]   = '\0';
    t_tot_disc_char.arr[0]   = '\0';
    t_tot_disc_nega.arr[0]   = '\0';

    t_episode_type.arr[0]  = '\0';
    t_patient_id.arr[0]  = '\0';
    t_episode_id.arr[0]  = '\0';
    t_visit_id.arr[0]  = '\0';  
    t_bill_trx_type_code.arr[0]  = '\0';
    t_bill_nature_code.arr[0]  = '\0';
    t_bill_tot_amt.arr[0]  = '\0';
    t_bill_tot_outst_amt.arr[0]  = '\0';
    t_prv_bill_tot_outst_amt.arr[0]  = '\0';
    t_added_by_id.arr[0]  = '\0';
    t_modified_by_id.arr[0]  = '\0';
    t_added_date.arr[0]  = '\0';
    t_modified_date.arr[0]  = '\0';
    t_bill_print_flag.arr[0] = '\0';
    t_bill_type_code.arr[0]  = '\0';
    nd_doc_type.arr[0]  = '\0';
    nd_doc_num.arr[0]  = '\0';
    nd_doc_date.arr[0]  = '\0';

    t_doc_type_code.len     = 0;
    t_doc_num.len     = 0;
    t_doc_date.len     = 0;
    t_overall_int_code.len  = 0;
    t_bill_type_code.len    = 0;
    t_tot_disc_char.len     = 0;
    t_tot_disc_nega.len     = 0;

    t_episode_type.len     = 0;
    t_patient_id.len     = 0;
    t_episode_id.len     = 0;
    t_visit_id.len     = 0;
    t_bill_trx_type_code.len     = 0;
    t_bill_nature_code.len     = 0;
    t_bill_tot_amt.len     = 0;
    t_bill_tot_outst_amt.len     = 0;
    t_prv_bill_tot_outst_amt.len     = 0;
    t_added_by_id.len     = 0;
    t_modified_by_id.len     = 0;
    t_added_date.len     = 0;
    t_modified_date.len     = 0;

    t_bill_drfee_tot_amt = 0;
    t_man_disc_amt       = 0;
    t_overall_disc_amt   = 0;

    t_bill_drfee_tot_outst_amt  = 0;
    t_org_rec_amt               = 0;
    t_bill_hosp_tot_outst_amt   = 0;
    t_bill_print_flag.len = 0;
    t_bill_type_code.len  = 0;
    nd_doc_type.len=0;
    nd_doc_num.len=0;
    nd_doc_date.len=0;
   
    recref_cash_counter_code.arr[0]='\0';
    recref_shift_id.arr[0]='\0';

    EXEC SQL FETCH T_BILL_HDR_CUR
	  INTO :t_episode_type,
                   :t_patient_id,
                   :t_episode_id,
                   :t_visit_id,
                   :t_bill_trx_type_code,
                   :t_bill_nature_code,
                   :t_bill_tot_amt,
                   :t_bill_tot_outst_amt,
                   :t_prv_bill_tot_outst_amt,
                   :t_added_by_id,
                   :t_modified_by_id,
                   :t_added_date,
                   :t_modified_date,
		   :t_doc_type_code,
		   :t_doc_num,
		   :t_doc_date,
                   :t_man_disc_amt,
                   :t_overall_disc_amt,
                   :t_overall_int_code,
                   :t_bill_type_code,
                   :t_tot_disc_char,
                   :t_tot_disc_nega,
		   :t_bill_drfee_tot_amt,
	           :t_bill_drfee_tot_outst_amt,
                   :t_org_rec_amt,
		   :t_bill_hosp_tot_outst_amt,
		   :t_round_amt,
		   :t_sign_ind,
		   :t_bill_print_flag,
		   :t_bill_type_code,
                   :nd_doc_type,
                   :nd_doc_num,
                   :nd_doc_date,
		   :recref_cash_counter_code,
		   :recref_shift_id;


    if(OERROR)
		err_mesg("FETCH failed on table T_BILL_HDR_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;
    t_sign_ind.arr[t_sign_ind.len] = '\0' ;    
    t_doc_type_code.arr[t_doc_type_code.len]  = '\0';
    t_doc_num.arr[t_doc_num.len]  = '\0';
    t_doc_date.arr[t_doc_date.len]  = '\0';
    t_overall_int_code.arr[t_overall_int_code.len] = '\0';
    t_bill_type_code.arr[t_bill_type_code.len] = '\0';
    t_tot_disc_char.arr[t_tot_disc_char.len] = '\0';
    t_tot_disc_nega.arr[t_tot_disc_nega.len] = '\0';
    t_episode_type.arr[t_episode_type.len]  = '\0';
    t_patient_id.arr[t_patient_id.len]  = '\0';
    t_episode_id.arr[t_episode_id.len]  = '\0';
    t_visit_id.arr[t_visit_id.len]  = '\0';
    t_bill_trx_type_code.arr[t_bill_trx_type_code.len]  = '\0';
    t_bill_nature_code.arr[t_bill_nature_code.len]  = '\0';
    t_bill_tot_amt.arr[t_bill_tot_amt.len]  = '\0';
    t_bill_tot_outst_amt.arr[t_bill_tot_outst_amt.len]  = '\0';
    t_prv_bill_tot_outst_amt.arr[t_prv_bill_tot_outst_amt.len]  = '\0';
    t_added_by_id.arr[t_added_by_id.len]  = '\0';
    t_modified_by_id.arr[t_modified_by_id.len]  = '\0';
    t_added_date.arr[t_added_date.len]  = '\0';
    t_modified_date.arr[t_modified_date.len]  = '\0';
    t_bill_print_flag.arr[t_bill_print_flag.len]  = '\0';
    t_bill_type_code.arr[t_bill_type_code.len] = '\0';
    nd_doc_type.arr[nd_doc_type.len]= '\0';
    nd_doc_num.arr[nd_doc_num.len]='\0';
    nd_doc_date.arr[nd_doc_date.len]='\0';

	recref_cash_counter_code.arr[recref_cash_counter_code.len]='\0';
	recref_shift_id.arr[recref_shift_id.len]='\0';
    
	return 1;
}

open_bill_line()
{
    EXEC SQL OPEN BL_BILL_LINE_CUR;

    if(OERROR)
	err_mesg("OPEN failed on CURSOR BL_BILL_LINE_CUR",0,"");
}

fetch_bill_line()
{
    t_man_disc_char.arr[0]  = '\0';
    t_man_disc_nega.arr[0]  = '\0';
    t_man_int_code.arr[0]   = '\0';

    t_man_disc_char.len     = 0;
    t_man_disc_nega.len     = 0;
    t_man_int_code.len      = 0;

    EXEC SQL FETCH BL_BILL_LINE_CUR 
	     INTO      :t_man_disc_char,
                   :t_man_disc_nega,
                   :t_man_int_code;

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_BILL_LINE_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    t_man_disc_char.arr[t_man_disc_char.len]  = '\0';
    t_man_disc_nega.arr[t_man_disc_nega.len]  = '\0';
    t_man_int_code.arr[t_man_int_code.len]    = '\0';

    return 1;
}

fetch_folio()
{

    t_dpf_doc_type_code.arr[0]  = '\0';
    t_dpf_doc_number.arr[0]  = '\0';
    t_physician_id.arr[0]  = '\0';

    t_dpf_doc_type_code.len     = 0;
    t_dpf_doc_number.len     = 0;
    t_physician_id.len     = 0;

    EXEC SQL FETCH T_PATIENT_FOLIO_CUR 
	     INTO :t_dpf_doc_type_code,
		   :t_dpf_doc_number,
		   :t_physician_id;

    if(OERROR)
	err_mesg("FETCH failed on cursor T_PATIENT_FOLIO_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    t_dpf_doc_type_code.arr[t_dpf_doc_type_code.len]  = '\0';
    t_dpf_doc_number.arr[t_dpf_doc_number.len]  = '\0';
    t_physician_id.arr[t_physician_id.len]  = '\0';

    return 1;
}

process_dpf_rec()
{

    t_bill_drfee_tot_outst_amt = 0;
    t_bill_hosp_tot_outst_amt = 0;
    t_org_rec_amt             = 0;

    t_bill_status = '\0';

    EXEC SQL SELECT NVL(BILL_DRFEE_TOT_OUTST_AMT,0),
                    NVL(DRFEE_RECEIPT_AMT,0),
		    NVL(BILL_HOSP_TOT_OUTST_AMT,0),
		    BILL_STATUS,
		    Nvl(BILL_ROUNDING_AMT,0)
	     INTO   :t_bill_drfee_tot_outst_amt,
                    :t_org_rec_amt,
		    :t_bill_hosp_tot_outst_amt,
		    :t_bill_status,
                    :t_round_amt  
	     FROM BL_BILL_HDR
	     WHERE DOC_TYPE_CODE = :recref_bill_doc_type_code
	     AND DOC_NUM = :recref_bill_doc_number
	     AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

    if(OERROR||NO_DATA_FOUND) {
	log_mesg("SELECT failed on table BL_BILL_HDR",0,"");
	return 0;
    }

    if(t_bill_status == 'D') 
	process_dpf_rec_DC();
    else {

        t_recpt_amt = atof(recref_doc_amt.arr);

        if( (t_recpt_amt > t_bill_hosp_tot_outst_amt) && 
        (t_bill_drfee_tot_outst_amt > 0) ) {

	t_drfee_amt = t_recpt_amt - t_bill_hosp_tot_outst_amt;
        t_drfee_amt = t_drfee_amt + t_org_rec_amt;

    /***************** New Code for Doctor's Fee Interface ** G Sriram *******/
    
    /***** Allocation of DF receipt amt will be done if DF system  *****/
    
/*	    EXEC SQL SELECT NVL(NEXT_REF_NUM,1) 
		     INTO   :t_ref_num
		     FROM   DF_PARAMETER;
    
	    if(OERROR) {
	        log_mesg("SELECT failed on table DF_PARAMETER",0,"");
	        return 0;
	    }*/
    
            t_df_pay_alcn_num = 0;
    
    /************ End of New Code for Doctor's Fee Interface * G Sriram *****/
    
	    d_pmnt_mode = '\0';
	    d_pmnt_status = '\0';
    
            EXEC SQL SELECT DECODE(CASH_SLMT_FLAG,'Y','1','A','3','B','2',
			          'C','1','D','1',' ')
		     INTO   :d_pmnt_mode
		     FROM   BL_SLMT_TYPE
		     WHERE  SLMT_TYPE_CODE = :recref_slmt_type_code;
    
	    if(OERROR) {
	        log_mesg("SELECT failed on table BL_SLMT_TYPE",0,"");
	        return 0;
	    }
    
	    if(d_pmnt_mode == '1') 
	        d_pmnt_status = 'N';
	    else
	        d_pmnt_status = 'H';
    
/*	    EXEC SQL INSERT INTO DF_CUST_PMNT_INTERFACE_HDR
                            (    MODULE_ID,
                                 REF_NUM,
                                 AMOUNT,
                                 PMNT_DATE,
                                 PMNT_MODE,
			         PMNT_STATUS_FLAG,
                                 LAST_PAY_ALCN_LINE_NUM,
                                 RCT_DOC_TYPE_CODE,
                                 RCT_DOC_NUM,
			         EPISODE_TYPE,
			         EPISODE_ID,
			         VISIT_ID,
			         PATIENT_ID
			    )
		    VALUES  (    'BL',
			         :t_ref_num,
			         :t_drfee_amt,
			         TO_DATE(:recref_doc_date,'DD/MM/YYYY'),
			         :d_pmnt_mode,
			         :d_pmnt_status,
			         :t_df_pay_alcn_num,
			         :recref_doc_type_code,
			         :recref_doc_number,
                                 :recref_episode_type,
                                 :recref_episode_id,
                                 :recref_visit_id,
                                 :recref_patient_id
			    );
    
            if(OERROR) {
	        log_mesg("INSERT failed on table DF_CUST_PMNT_INTERFACE_HDR",0,"");
	        return 0;
	    }
    
            EXEC SQL INSERT INTO DF_CUST_PMNT_INTERFACE_LINE
                            (    MODULE_ID,
                                 REF_NUM,
                                 LINE_NUM,
                                 BILL_DOC_TYPE_CODE,
                                 BILL_NUM
			    )
		    VALUES  (    'BL',
			         :t_ref_num,
			         1,
                                 NULL,
                                 NULL
			    );
    
            if(OERROR) {
	        log_mesg("INSERT failed on table DF_CUST_PMNT_INTERFACE_LINE",0,"");
	        return 0;
	    }
*/
	    EXEC SQL UPDATE BL_BILL_HDR
		     SET    BILL_HOSP_TOT_OUTST_AMT = 0,
                            DRFEE_RECEIPT_AMT       = 0,
			    BILL_DRFEE_TOT_OUTST_AMT = 
			         NVL(BILL_DRFEE_TOT_OUTST_AMT,0) -
                                            :t_drfee_amt + :t_org_rec_amt,
		    	    MODIFIED_BY_ID         = user,
	            	    MODIFIED_DATE          = SYSDATE,		    	    
	                    MODIFIED_AT_WS_NO      = :nd_ws_no,
		            MODIFIED_FACILITY_ID   = :nd_operating_facility_id
	             WHERE  DOC_TYPE_CODE = :recref_bill_doc_type_code
	             AND    DOC_NUM       = :recref_bill_doc_number
	      	     AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;
    
	    if(OERROR) {
	        log_mesg("UPDATE failed on table BL_BILL_HDR",0,"");
	        return 0;
	    };
    
/*	    EXEC SQL UPDATE DF_PARAMETER
		     SET    NEXT_REF_NUM = NVL(NEXT_REF_NUM,1) +1;
    
	    if(OERROR) {
	        log_mesg("UPDATE failed on table DF_PARAMETER",0,"");
	        return 0;
	    }*/
    
        }
        else {
    
	    EXEC SQL UPDATE BL_BILL_HDR
		     SET    BILL_HOSP_TOT_OUTST_AMT = 
			        BILL_HOSP_TOT_OUTST_AMT - :t_recpt_amt,
		    MODIFIED_BY_ID         = user,
	            MODIFIED_DATE          = SYSDATE,
	            MODIFIED_AT_WS_NO      = :nd_ws_no,
		    MODIFIED_FACILITY_ID   = :nd_operating_facility_id
	             WHERE  DOC_TYPE_CODE = :recref_bill_doc_type_code
	             AND    DOC_NUM       = :recref_bill_doc_number
	      	     AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;
    
	    if(OERROR) {
	        log_mesg("UPDATE failed on table BL_BILL_HDR",0,"");
	        return 0;
	    }
        }
    }
}

process_dpf_rec_DC()
{

    t_bill_drfee_tot_outst_amt = 0;
    t_bill_hosp_tot_outst_amt = 0;
    t_org_rec_amt             = 0;

    EXEC SQL SELECT NVL(DRFEE_CHG_OUTST_AMT,0),
		    NVL(HOSP_CHG_OUTST_AMT,0)
	     INTO   :t_bill_drfee_tot_outst_amt,
		    :t_bill_hosp_tot_outst_amt
	     FROM   BL_DCP_PENDING_DOC
	     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
	     AND ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
	     AND    ORG_DOC_NUMBER    = :recref_bill_doc_number;
	

    if(OERROR||NO_DATA_FOUND) {
	log_mesg("SELECT failed on table BL_BILL_HDR",0,"");
	return;
    }

    t_recpt_amt = atof(recref_doc_amt.arr);

    if( (t_recpt_amt > t_bill_hosp_tot_outst_amt) && 
        (t_bill_drfee_tot_outst_amt > 0) ) {

	t_drfee_amt = t_recpt_amt - t_bill_hosp_tot_outst_amt;
        t_drfee_amt = t_drfee_amt + t_org_rec_amt;

/***************** New Code for Doctor's Fee Interface ** G Sriram *******/

/*	EXEC SQL SELECT NVL(NEXT_REF_NUM,1) 
		 INTO   :t_ref_num
		 FROM   DF_PARAMETER;

	if(OERROR) {
	    log_mesg("SELECT failed on table DF_PARAMETER",0,"");
	    return;
	}
*/
        t_df_pay_alcn_num = 0;

/****************** End of New Code for Doctor's Fee Interface * G Sriram *****/

	d_pmnt_mode = '\0';
	d_pmnt_status = '\0';

        EXEC SQL SELECT DECODE(CASH_SLMT_FLAG,'Y','1','A','3','B','2',
			      'C','1','D','1',' ')
		 INTO   :d_pmnt_mode
		 FROM   BL_SLMT_TYPE
		 WHERE  SLMT_TYPE_CODE = :recref_slmt_type_code;

	if(OERROR) {
	    log_mesg("SELECT failed on table BL_SLMT_TYPE",0,"");
	    return;
	}

	if(d_pmnt_mode == '1') 
	    d_pmnt_status = 'N';
	else
	    d_pmnt_status = 'H';

/*	EXEC SQL INSERT INTO DF_CUST_PMNT_INTERFACE_HDR
                        (    MODULE_ID,
                             REF_NUM,
                             AMOUNT,
                             PMNT_DATE,
                             PMNT_MODE,
			     PMNT_STATUS_FLAG,
                             LAST_PAY_ALCN_LINE_NUM,
                             RCT_DOC_TYPE_CODE,
                             RCT_DOC_NUM,
			     EPISODE_TYPE,
			     EPISODE_ID,
			     VISIT_ID,
			     PATIENT_ID
			)
		VALUES  (    'BL',
			     :t_ref_num,
			     :t_drfee_amt,
			     TO_DATE(:recref_doc_date,'DD/MM/YYYY'),
			     :d_pmnt_mode,
			     :d_pmnt_status,
			     :t_df_pay_alcn_num,
			     :recref_doc_type_code,
			     :recref_doc_number,
                             :recref_episode_type,
                             :recref_episode_id,
                             :recref_visit_id,
                             :recref_patient_id
			);

        if(OERROR) {
	    log_mesg("INSERT failed on table DF_CUST_PMNT_INTERFACE_HDR",0,"");
	    return;
	}

        EXEC SQL INSERT INTO DF_CUST_PMNT_INTERFACE_LINE
                        (    MODULE_ID,
                             REF_NUM,
                             LINE_NUM,
                             BILL_DOC_TYPE_CODE,
                             BILL_NUM
			)
		VALUES  (    'BL',
			     :t_ref_num,
			     1,
                             NULL,
                             NULL
			);

        if(OERROR) {
	    log_mesg("INSERT failed on table DF_CUST_PMNT_INTERFACE_LINE",0,"");
	    return;
	}
*/
	EXEC SQL UPDATE BL_DCP_PENDING_DOC
		 SET    HOSP_CHG_OUTST_AMT = 0,
			DRFEE_CHG_OUTST_AMT = 
			     NVL(DRFEE_CHG_OUTST_AMT,0) - :t_drfee_amt,
		    MODIFIED_BY_ID         = user,
	            MODIFIED_DATE          = SYSDATE,
	            MODIFIED_AT_WS_NO      = :nd_ws_no,
		    MODIFIED_FACILITY_ID   = :nd_operating_facility_id
	         WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
	         AND ORG_DOC_NUMBER    = :recref_bill_doc_number;


	if(OERROR) {
	    log_mesg("UPDATE failed on table BL_DCP_PENDING_DOC",0,"");
	    return;
	}

/*	EXEC SQL UPDATE DF_PARAMETER
		 SET    NEXT_REF_NUM = NVL(NEXT_REF_NUM,1) +1;

	if(OERROR) {
	    log_mesg("UPDATE failed on table DF_PARAMETER",0,"");
	    return;
	}
*/
    }
    else {

	EXEC SQL UPDATE BL_DCP_PENDING_DOC
		 SET    HOSP_CHG_OUTST_AMT = 
 		        HOSP_CHG_OUTST_AMT - :t_recpt_amt,
		    MODIFIED_BY_ID         = user,
	            MODIFIED_DATE          = SYSDATE,
	            MODIFIED_AT_WS_NO      = :nd_ws_no,
		    MODIFIED_FACILITY_ID   = :nd_operating_facility_id
	         WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
		 and ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
	         AND ORG_DOC_NUMBER    = :recref_bill_doc_number;

	if(OERROR) {
	    log_mesg("UPDATE failed on table BL_DCP_PENDING_DOC",0,"");
	    return;
	}
    }

}

process_dpf_rec_BI()
{

/*    t_drfee_amt = t_org_rec_amt;

    EXEC SQL OPEN BL_DF_INTERFACE_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor BL_DF_INTERFACE_CUR",0,"");

    while(fetch_bl_df_int()) {

	EXEC SQL SELECT NVL(NEXT_REF_NUM,1) 
		 INTO   :t_ref_num
		 FROM   DF_PARAMETER;

	if(OERROR) {
	    log_mesg("SELECT failed on table DF_PARAMETER",0,"");
	    return;
	}

        t_df_pay_alcn_num = 0;

	d_pmnt_mode = '\0';
	d_pmnt_status = '\0';

        EXEC SQL SELECT DECODE(CASH_SLMT_FLAG,'Y','1','A','3','B','2',
			      'C','1','D','1',' ')
		 INTO   :d_pmnt_mode
		 FROM   BL_SLMT_TYPE
		 WHERE  SLMT_TYPE_CODE = :df_slmt_type_code;

	if(OERROR) {
	    err_mesg("SELECT failed on table BL_SLMT_TYPE",0,"");
	}

	if(d_pmnt_mode == '1') 
	    d_pmnt_status = 'N';
	else
	    d_pmnt_status = 'H';

	EXEC SQL INSERT INTO DF_CUST_PMNT_INTERFACE_HDR
                        (    MODULE_ID,
                             REF_NUM,
                             AMOUNT,
                             PMNT_DATE,
                             PMNT_MODE,
			     PMNT_STATUS_FLAG,
                             LAST_PAY_ALCN_LINE_NUM,
                             RCT_DOC_TYPE_CODE,
                             RCT_DOC_NUM,
			     EPISODE_TYPE,
			     EPISODE_ID,
			     VISIT_ID,
			     PATIENT_ID
			)
		VALUES  (    'BL',
			     :t_ref_num,
			     :df_interface_amt,
			     TO_DATE(:df_rct_doc_date,'DD/MM/YYYY'),
			     :d_pmnt_mode,
			     :d_pmnt_status,
			     :t_df_pay_alcn_num,
			     :df_rct_doc_type_code,
			     :df_rct_doc_num,
                             :t_episode_type,
                             :t_episode_id,
                             :t_visit_id,
                             :t_patient_id
			);

        if(OERROR) {
	    log_mesg("INSERT failed on table DF_CUST_PMNT_INTERFACE_HDR",0,"");
	    return;
	}

        EXEC SQL INSERT INTO DF_CUST_PMNT_INTERFACE_LINE
                        (    MODULE_ID,
                             REF_NUM,
                             LINE_NUM,
                             BILL_DOC_TYPE_CODE,
                             BILL_NUM
			)
		VALUES  (    'BL',
			     :t_ref_num,
			     1,
                             NULL,
                             NULL
			);

        if(OERROR) {
	    log_mesg("INSERT failed on table DF_CUST_PMNT_INTERFACE_LINE",0,"");
	    return;
	}

	EXEC SQL UPDATE BL_BILL_HDR
		 SET    DRFEE_RECEIPT_AMT       = 0,
		        MODIFIED_BY_ID          = USER,      
			MODIFIED_DATE           = SYSDATE,       
			MODIFIED_AT_WS_NO       = :nd_ws_no,       
			MODIFIED_FACILITY_ID    = :nd_operating_facility_id_id      
	         WHERE  DOC_TYPE_CODE = :t_doc_type_code
	         AND    DOC_NUM       = :t_doc_num
		 AND    OPERATING_FACILITY_ID = :nd_operating_facility_id_id;

	if(OERROR) {
	    log_mesg("UPDATE failed on table BL_BILL_HDR",0,"");
	    return;
	}

	EXEC SQL UPDATE DF_PARAMETER
		 SET    NEXT_REF_NUM = NVL(NEXT_REF_NUM,1) +1;

	if(OERROR) {
	    log_mesg("UPDATE failed on table DF_PARAMETER",0,"");
	    return;
	}
    } 
*/
}

fetch_bl_df_int()
{

    df_rct_doc_type_code.arr[0] = '\0';
    df_rct_doc_num.arr[0]		= '\0';
    df_rct_doc_date.arr[0]		= '\0';
    df_slmt_type_code.arr[0]	= '\0';

    df_rct_doc_type_code.len    = 0;
    df_rct_doc_num.len			= 0;
    df_rct_doc_date.len			= 0;
    df_slmt_type_code.len		= 0;

    df_interface_amt = 0;

/*    EXEC SQL FETCH BL_DF_INTERFACE_CUR 
	      INTO :df_rct_doc_type_code,
                   :df_rct_doc_num,
                   :df_rct_doc_date,
                   :df_slmt_type_code,
		   :df_interface_amt;

    if(OERROR)
	err_mesg("FETCH failed on BL_DF_INTERFACE_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;
*/
    return 1;
}


void   declare_df_phys_ldgr_cur()
{
 /*    EXEC SQL DECLARE DF_PHYS_LDGR_CUR CURSOR FOR
         SELECT PHYSICIAN_ID,
                DOC_TYPE_CODE,
                DOC_NUM,
                TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                (NVL(PENDING_AMT,0)-NVL(SCHD_PAY_AMT,0)),
                CUST_OUTSTANDING_AMT  FROM DF_PHYSICIAN_LDGR
            WHERE
              PATIENT_ID = :recref_patient_id AND
              EPISODE_TYPE = :recref_episode_type AND
              NVL(EPISODE_ID,0)   = NVL(:recref_episode_id,0)   AND
              (VISIT_ID  BETWEEN :visit_id_fm AND :visit_id_to) AND
              (NVL(PENDING_AMT,0)-NVL(SCHD_PAY_AMT,0)) > 0
            ORDER BY TO_CHAR(SERVICE_DATE,'DDMMYYYYHH24MI')
            FOR UPDATE OF PHYSICIAN_ID;*/
	return;
}


void open_df_phys_ldgr_cur()
{

/*   EXEC SQL OPEN DF_PHYS_LDGR_CUR;
   if (OERROR)
         err_mesg("OPEN failed on cursor DF_PHYS_LDGR_CUR",0,"");
*/
return;
}


int fetch_df_phys_ldgr()
{

   df_physician_id.arr[0]       = '\0';
   df_doc_type_code.arr[0]      = '\0';
   df_doc_num.arr[0]            = '\0';
   df_doc_date.arr[0]           = '\0';
   df_pend_amt                  = 0;
   cust_outst_amt               = 0;

   df_physician_id.len          = 0;
   df_doc_type_code.len         = 0;
   df_doc_num.len               = 0;
   df_doc_date.len              = 0;

/*   EXEC SQL FETCH DF_PHYS_LDGR_CUR INTO
                  :df_physician_id,
                  :df_doc_type_code,
                  :df_doc_num,
                  :df_doc_date,
                  :df_pend_amt,
                  :cust_outst_amt;*/

   if (OERROR)
      err_mesg("FETCH failed on DF_PHYS_LDGR_CUR",0,"");

   if (LAST_ROW) return (0);

   df_physician_id.arr[df_physician_id.len]		= '\0';
   df_doc_type_code.arr[df_doc_type_code.len]	= '\0';
   df_doc_num.arr[df_doc_num.len]				= '\0';
   df_doc_date.arr[df_doc_date.len]				= '\0';

   if (rec_remaining_amt == 0)
     return (0);

   return 1;
}

int insrt_df_pay_alcn()
{
/*	EXEC SQL INSERT INTO DF_PAY_ALCN
                        (    MODULE_ID,
                             REF_NUM,
                             LINE_NUM,
                             DOC_TYPE_CODE,
                             DOC_NUM,
                             BILL_DOC_TYPE_CODE,
                             BILL_NUM,
                             CUST_OUTSTANDING_AMT,
                             ALLOCATED_AMT,
                             PHYSICIAN_ID
			)
		VALUES  (    'BL',
			     :t_ref_num,
                             :t_df_pay_alcn_num,
                             :df_doc_type_code,
                             :df_doc_num,
                             NULL,
                             NULL,
                             :cust_outst_amt,
                             :df_alloc_amt,
                             :df_physician_id
			);
*/

        if(OERROR)
	    err_mesg("INSERT failed on table DF_PAY_ALCN",0,"");

}

ins_pat_ledger_bill()
{
    EXEC SQL INSERT INTO BL_PATIENT_LEDGER
                 (    OPERATING_FACILITY_ID,
		      EPISODE_TYPE,
                      PATIENT_ID,
                      EPISODE_ID,
                      VISIT_ID,
                      ORG_DOC_TYPE_CODE,
                      ORG_DOC_NUM,
                      ORG_DOC_DATE,
                      TRX_TYPE_CODE,
                      BILL_TRX_TYPE_CODE,
                      BILL_NATURE_CODE,
                      RECPT_NATURE_CODE,
                      RECPT_TYPE_CODE,
                      MAX_LINE_NUM,
                      DOC_AMT,
                      DOC_OUTST_AMT,
                      ADDED_BY_ID,
                      ADDED_DATE,
                      MODIFIED_BY_ID,
                      MODIFIED_DATE,
		      ADDED_AT_WS_NO   ,              
		      ADDED_FACILITY_ID ,             
		      MODIFIED_AT_WS_NO ,             
		      MODIFIED_FACILITY_ID           
                 )
          values (    :nd_operating_facility_id,
		      :t_episode_type,
                      :t_patient_id,
                      :t_episode_id,
                      NVL(:t_visit_id,0),
                      :t_doc_type_code,
                      :t_doc_num,
                      TO_DATE(:t_doc_date,'DD/MM/YYYY'),
                      '1',
                      :t_bill_trx_type_code,
                      :t_bill_nature_code,
                      NULL,
                      NULL,
                      1,
                      :t_bill_tot_amt,
                      :t_bill_tot_amt,
                      :t_added_by_id,
                      TO_DATE(:t_added_date,'DD/MM/YYYY'),
                      :t_modified_by_id,
                      TO_DATE(:t_modified_date,'DD/MM/YYYY'),
		      :nd_ws_no,
		      :nd_operating_facility_id,
		      :nd_ws_no,
		      :nd_operating_facility_id
                 );

    if(OERROR)
	err_mesg("INSERT failed on table BL_PATIENT_LEDGER",0,"");
}

ins_pat_ledger_trn_bill()
{

     EXEC SQL INSERT INTO BL_PATIENT_LEDGER_TRN
                        ( OPERATING_FACILITY_ID,
		          EPISODE_TYPE,
                          PATIENT_ID,
                          EPISODE_ID,
                          VISIT_ID,
                          ORG_DOC_TYPE_CODE,
                          ORG_DOC_NUM,
                          LINE_NUM,
                          DOC_TYPE_CODE,
                          DOC_NUM,
                          DOC_DATE,
                          DOC_AMT,
                          TRX_TYPE_CODE,
                          BILL_TRX_TYPE_CODE,
                          BILL_NATURE_CODE,
                          RECPT_NATURE_CODE,
                          RECPT_TYPE_CODE,
                          ADDED_BY_ID,
                          ADDED_DATE,
                          MODIFIED_BY_ID,
                          MODIFIED_DATE,
						  ADDED_AT_WS_NO ,                
						  ADDED_FACILITY_ID,              
						  MODIFIED_AT_WS_NO,              
						  MODIFIED_FACILITY_ID           
			  )
               VALUES   ( :nd_operating_facility_id,
						  :t_episode_type,
                          :t_patient_id,
                          :t_episode_id,
                          NVL(:t_visit_id,0),
                          :t_doc_type_code,
                          :t_doc_num,
                          1,
                          :t_doc_type_code,
                          :t_doc_num,
                          TO_DATE(:t_doc_date,'DD/MM/YYYY'),
                          :t_bill_tot_amt,
                          '1',
                          :t_bill_trx_type_code,
                          :t_bill_nature_code,
                          NULL,
                          NULL,
                          :t_added_by_id,
                          TO_DATE(:t_added_date,'DD/MM/YYYY'),
                          :t_modified_by_id,
                          TO_DATE(:t_modified_date,'DD/MM/YYYY'),
						  :nd_ws_no,
						  :nd_operating_facility_id,
						  :nd_ws_no,
						  :nd_operating_facility_id	
                        );

     if(OERROR)
         err_mesg("INSERT failed on table BL_PATIENT_LEDGER_TRN",0,"");
}

ins_pat_inhouse_bill()
{
    EXEC SQL INSERT INTO BL_INHOUSE_BILL
                 (    OPERATING_FACILITY_ID,
					  EPISODE_TYPE,
                      PATIENT_ID,
                      EPISODE_ID,
                      VISIT_ID,
                      DOC_TYPE_CODE,
                      DOC_NUMBER,
                      DOC_DATE,
                      BILL_TRX_TYPE_CODE,
                      BILL_NATURE_CODE,
                      DOC_AMT,
                      DOC_OUTST_AMT,
					  ADDED_BY_ID,
					  MODIFIED_BY_ID,         
					  ADDED_DATE,             
					  MODIFIED_DATE,          
                      ADDED_AT_WS_NO,         
					  ADDED_FACILITY_ID,      
                      MODIFIED_AT_WS_NO,      
					  MODIFIED_FACILITY_ID    
                 )
          values ( 
			:nd_operating_facility_id,
			:t_episode_type,
			:t_patient_id,
			:t_episode_id,
			NVL(:t_visit_id,0),
			:t_doc_type_code,
			:t_doc_num,
			TO_DATE(:t_doc_date,'DD/MM/YYYY'),
			:t_bill_trx_type_code,
			:t_bill_nature_code,
			:t_bill_tot_amt - :t_prv_bill_tot_outst_amt,
			:t_bill_tot_amt - :t_prv_bill_tot_outst_amt,
			user,
			user,
			sysdate,
			sysdate,
			:nd_ws_no,
			:nd_operating_facility_id,
			:nd_ws_no,
			:nd_operating_facility_id
                 );

    if(OERROR)
	err_mesg("INSERT failed on table BL_INHOUSE_BILL",0,"");
}

do_insrt()
{

    t_doc_type_code.arr[0]  = '\0';
    t_doc_num.arr[0]  = '\0';
    t_doc_date.arr[0]  = '\0';
    t_overall_int_code.arr[0] = '\0';
    t_bill_type_code.arr[0]   = '\0';
    t_tot_disc_char.arr[0]   = '\0';
    t_tot_disc_nega.arr[0]   = '\0';

    t_episode_type.arr[0]  = '\0';
    t_patient_id.arr[0]  = '\0';
    t_episode_id.arr[0]  = '\0';
    t_visit_id.arr[0]  = '\0';
    t_bill_trx_type_code.arr[0]  = '\0';
    t_bill_nature_code.arr[0]  = '\0';
    t_bill_tot_amt.arr[0]  = '\0';
    t_bill_tot_outst_amt.arr[0]  = '\0';
    t_added_by_id.arr[0]  = '\0';
    t_modified_by_id.arr[0]  = '\0';
    t_added_date.arr[0]  = '\0';
    t_modified_date.arr[0]  = '\0';
    nd_doc_type.arr[0]  = '\0';
    nd_doc_num.arr[0]  = '\0';
    nd_doc_date.arr[0]  = '\0';

    t_doc_type_code.len     = 0;
    t_doc_num.len     = 0;
    t_doc_date.len     = 0;
    t_overall_int_code.len  = 0;
    t_bill_type_code.len    = 0;
    t_tot_disc_char.len     = 0;
    t_tot_disc_nega.len     = 0;

    t_episode_type.len     = 0;
    t_patient_id.len     = 0;
    t_episode_id.len     = 0;
    t_visit_id.len     = 0;
    t_bill_trx_type_code.len     = 0;
    t_bill_nature_code.len     = 0;
    t_bill_tot_amt.len     = 0;
    t_bill_tot_outst_amt.len     = 0;
    t_added_by_id.len     = 0;
    t_modified_by_id.len     = 0;
    t_added_date.len     = 0;
    t_modified_date.len     = 0;
    nd_doc_type.len   = 0;
    nd_doc_num.len   = 0;
    nd_doc_date.len  = 0;


    t_bill_drfee_tot_amt = 0;
    t_man_disc_amt       = 0;
    t_overall_disc_amt   = 0;

    EXEC SQL SELECT  EPISODE_TYPE,
		     PATIENT_ID,
		     NVL(EPISODE_ID,0),
		     NVL(VISIT_ID,1),
		     BILL_TRX_TYPE_CODE,
		     BILL_NATURE_CODE,
		     BILL_TOT_AMT,
		     BILL_TOT_OUTST_AMT,
		     ADDED_BY_ID,
		     MODIFIED_BY_ID,
		     TO_CHAR(ADDED_DATE,'DD/MM/YYYY'),
		     TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY'),
		     DOC_TYPE_CODE,
		     DOC_NUM,
		     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                     NVL(MAN_DISC_AMT,0),
                     NVL(OVERALL_DISC_AMT,0),
                     OVR_DISC_ACC_INT_CODE,
                     BILL_TYPE_CODE,
                     NVL(MAN_DISC_AMT,0) + NVL(OVERALL_DISC_AMT,0),
                     (NVL(MAN_DISC_AMT,0) + NVL(OVERALL_DISC_AMT,0)) * -1,
		     NVL(BILL_DRFEE_AMT,0),
		     NVL(BILL_POSTED_FLAG,'N'),
		     CASH_CTRL_DOC_TYPE_CODE,
                     CASH_CTRL_DOC_NUMBER,
                     CASH_CTRL_DOC_DATE             
	     INTO  :t_episode_type,
                   :t_patient_id,
                   :t_episode_id,
                   :t_visit_id,
                   :t_bill_trx_type_code,
                   :t_bill_nature_code,
                   :t_bill_tot_amt,
                   :t_bill_tot_outst_amt,
                   :t_added_by_id,
                   :t_modified_by_id,
                   :t_added_date,
                   :t_modified_date,
	           :t_doc_type_code,
		   :t_doc_num,
		   :t_doc_date,
                   :t_man_disc_amt,
                   :t_overall_disc_amt,
                   :t_overall_int_code,
                   :t_bill_type_code,
                   :t_tot_disc_char,
                   :t_tot_disc_nega,
		   :t_bill_drfee_tot_amt,
		   :t_bill_posted_flag,
		   :nd_doc_type,
                   :nd_doc_num,
                   :nd_doc_date
	     FROM    BL_BILL_HDR
	     WHERE   DOC_TYPE_CODE = :recref_bill_doc_type_code
	     AND     DOC_NUM       = :recref_bill_doc_number
	     AND     OPERATING_FACILITY_ID = :nd_operating_facility_id;

    if(OERROR)
	err_mesg("SELECT failed on table BL_BILL_HDR",0,"");

	   if(NO_DATA_FOUND)
		{  
	 sprintf(string_var,"Record %s - %s not found in BL_BILL_HDR",recref_bill_doc_type_code.arr,recref_bill_doc_number.arr);
	         err_mesg(string_var,0,"");
 		}   


    t_doc_type_code.arr[t_doc_type_code.len]  = '\0';
    t_doc_num.arr[t_doc_num.len]  = '\0';
    t_doc_date.arr[t_doc_date.len]  = '\0';
    t_overall_int_code.arr[t_overall_int_code.len] = '\0';
    t_bill_type_code.arr[t_bill_type_code.len] = '\0';
    t_tot_disc_char.arr[t_tot_disc_char.len] = '\0';
    t_tot_disc_nega.arr[t_tot_disc_nega.len] = '\0';
    t_episode_type.arr[t_episode_type.len]  = '\0';
    t_patient_id.arr[t_patient_id.len]  = '\0';
    t_episode_id.arr[t_episode_id.len]  = '\0';
    t_visit_id.arr[t_visit_id.len]  = '\0';
    t_bill_trx_type_code.arr[t_bill_trx_type_code.len]  = '\0';
    t_bill_nature_code.arr[t_bill_nature_code.len]  = '\0';
    t_bill_tot_amt.arr[t_bill_tot_amt.len]  = '\0';
    t_bill_tot_outst_amt.arr[t_bill_tot_outst_amt.len]  = '\0';
    t_added_by_id.arr[t_added_by_id.len]  = '\0';
    t_modified_by_id.arr[t_modified_by_id.len]  = '\0';
    t_added_date.arr[t_added_date.len]  = '\0';
    t_modified_date.arr[t_modified_date.len]  = '\0';
    nd_doc_type.arr[nd_doc_type.len]='\0';
    nd_doc_num.arr[nd_doc_num.len]='\0';
    nd_doc_date.arr[nd_doc_date.len]='\0';


    ins_pat_ledger_bill();
    ins_pat_ledger_trn_bill();

    if(t_bill_posted_flag != 'Y') {

/*        if(t_bill_drfee_tot_amt > 0)
	    upd_phys_ledger();
*/
    
        post_discounts(0);
	if (g_error) return; // Added new	

    
        EXEC SQL UPDATE BL_BILL_HDR
	         SET    BILL_POSTED_FLAG = 'Y',
			UNPOSTED_REASON	 = NULL,
		    MODIFIED_BY_ID         = user,
	            MODIFIED_DATE          = SYSDATE,
		    ADDED_AT_WS_NO         = :nd_ws_no,
		    ADDED_FACILITY_ID      = :nd_operating_facility_id,
	            MODIFIED_AT_WS_NO      = :nd_ws_no,
		    MODIFIED_FACILITY_ID   = :nd_operating_facility_id
	         WHERE   DOC_TYPE_CODE = :recref_bill_doc_type_code
	         AND     DOC_NUM       = :recref_bill_doc_number
		 AND     OPERATING_FACILITY_ID = :nd_operating_facility_id;

	    if(OERROR)
	        err_mesg("UPDATE failed on table BL_BILL_HDR",0,"");
    }

     EXEC SQL SELECT ROWID, nvl(MAX_LINE_NUM,0) + 1
              INTO   :patltr_rowid, :patltr_max_line_num
              FROM   BL_PATIENT_LEDGER
              WHERE  EPISODE_TYPE = :recref_episode_type
              AND    PATIENT_ID = :recref_patient_id
	      AND    OPERATING_FACILITY_ID = :nd_operating_facility_id        
              AND    NVL(EPISODE_ID,0) = NVL(:recref_episode_id,0)
	      AND    NVL(VISIT_ID,1) = 
	      DECODE(:recref_episode_type,'O',NVL(:recref_visit_id,1),
	      'E',NVL(:recref_visit_id,1),NVL(VISIT_ID,1))
              AND    ORG_DOC_TYPE_CODE = :recref_bill_doc_type_code
              AND    ORG_DOC_NUM = :recref_bill_doc_number;

     if (OERROR)
        err_mesg("SELECT failed on BL_PATIENT_LEDGER",0,"");

}

upd_phys_ledger()
{
        EXEC SQL OPEN T_PATIENT_FOLIO_CUR;

        if(OERROR)
	        err_mesg("OPEN failed on cursor T_PATIENT_FOLIO_CUR",0,"");

	    while(fetch_folio()) 
		{

		/*EXEC SQL UPDATE DF_PHYSICIAN_LDGR
			 SET    BILL_DOC_TYPE_CODE = :t_doc_type_code,
				BILL_NUM           = :t_doc_num,
				BILL_DATE          = TO_DATE(:t_doc_date,'DD/MM/YYYY')
			 WHERE  PHYSICIAN_ID       = :t_physician_id
			 AND    DOC_TYPE_CODE      = :t_dpf_doc_type_code
			 AND    DOC_NUM            = :t_dpf_doc_number;*/

		if(OERROR)
		    err_mesg("UPDATE failed on table DF_PHYSICIAN_LDGR",0,"");

	    } /* end of while fetch foilo */

		EXEC SQL CLOSE T_PATIENT_FOLIO_CUR;
}

post_discounts(cancel_flg)
int cancel_flg;
{

/*************** GL Posting of Bill Discounts  G Sriram ***********/
     if(cancel_flg) {
	 strcpy(t_doc_date.arr,c_post_date.arr);
	 t_doc_date.len = strlen(t_doc_date.arr);
          }      

        t_tot_disc_amt = 0;
        t_tot_disc_amt = t_man_disc_amt + t_overall_disc_amt;
        if (t_overall_disc_amt != 0)
          {
           t_bill_type_int_code.arr[0] = '\0';
           t_bill_type_int_code.len    = 0;
		   t_bill_disc_recv_acc_int_code.arr[0] = '\0';
           t_bill_disc_recv_acc_int_code.len    = 0;


           EXEC SQL SELECT B.BL_RECV_ACC_INT_CODE,B.BILL_DISC_RECV_ACC_INT_CODE 
		   INTO :t_bill_type_int_code,:t_bill_disc_recv_acc_int_code
           FROM BL_BILL_TYPE A, BL_BILL_TYPE_INT B
           WHERE A.BILL_TYPE_CODE = :t_bill_type_code
	   AND A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
	     			     WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
	   AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE
	   AND A.BILL_TYPE_CODE = B.BILL_TYPE_CODE
	   AND TO_DATE(:t_doc_date,'DD/MM/YYYY') between 
	       NVL(B.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
	       NVL(B.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
	   ;

            if(OERROR)
	       err_mesg("SELECT failed on table BL_BILL_TYPE_INT",0,"");

	      if(NO_DATA_FOUND)
	       {
	       sprintf(msg_str,"Record %s not found in BL_BILL_TYPE_INT",t_bill_type_code.arr);	 
	       //err_mesg(msg_str,0,"");
	       loc_log_msg(msg_str);
	       g_error = 1;
	       return;
	       }

            t_bill_type_int_code.arr[t_bill_type_int_code.len] = '\0';
			t_bill_disc_recv_acc_int_code.arr[t_bill_disc_recv_acc_int_code.len] = '\0';


           xxxxxx_main_acc1_code.arr[0]     = '\0';
           xxxxxx_main_acc2_code.arr[0]     = '\0';
           xxxxxx_dept_code.arr[0]     = '\0';
           xxxxxx_subledger_group_code.arr[0] = '\0';
           xxxxxx_subledger_line_code.arr[0] = '\0';
           xxxxxx_product_group_code.arr[0] = '\0';
           xxxxxx_product_line_code.arr[0] = '\0';

           xxxxxx_main_acc1_code.len                 = 0;
           xxxxxx_main_acc2_code.len                 = 0;
           xxxxxx_dept_code.len                      = 0;
           xxxxxx_subledger_group_code.len           = 0;
           xxxxxx_subledger_line_code.len            = 0;
           xxxxxx_product_group_code.len             = 0;
           xxxxxx_product_line_code.len              = 0;

           EXEC SQL SELECT MAIN_ACC1_CODE,
                  MAIN_ACC2_CODE,
                  DEPT_CODE,
                  SUBLEDGER_GROUP_CODE,
                  SUBLEDGER_LINE_CODE,
                  PRODUCT_GROUP_CODE,
                  PRODUCT_LINE_CODE     INTO
                  :xxxxxx_main_acc1_code,
                  :xxxxxx_main_acc2_code,
                  :xxxxxx_dept_code,
                  :xxxxxx_subledger_group_code,
                  :xxxxxx_subledger_line_code,
                  :xxxxxx_product_group_code,
                  :xxxxxx_product_line_code
                FROM BL_GL_ACCOUNT
                WHERE ACC_INT_CODE = :t_bill_type_int_code
	        AND   ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);

            if(OERROR)
		{                 
	         err_mesg("SELECT failed on table BL_GL_ACCOUNT",0,"");
 		}

		if(NO_DATA_FOUND)
		{  
		 sprintf(string_var,"Record %s- %s not found in BL_GL_ACCOUNT",t_bill_type_code.arr,t_bill_type_int_code.arr);
	     err_mesg(string_var,0,"");
 		}

     xxxxxx_main_acc1_code.arr[xxxxxx_main_acc1_code.len] = '\0';
     xxxxxx_main_acc2_code.arr[xxxxxx_main_acc2_code.len] = '\0';
     xxxxxx_dept_code.arr[xxxxxx_dept_code.len]           = '\0';
     xxxxxx_subledger_group_code.arr[xxxxxx_subledger_group_code.len] = '\0';
     xxxxxx_subledger_line_code.arr[xxxxxx_subledger_line_code.len] = '\0';
     xxxxxx_product_group_code.arr[xxxxxx_product_group_code.len] = '\0';
     xxxxxx_product_line_code.arr[xxxxxx_product_line_code.len] = '\0';

     if(cancel_flg)
         strcpy(xxxxxx_doc_amt.arr,t_tot_disc_char.arr);
     else
         strcpy(xxxxxx_doc_amt.arr,t_tot_disc_nega.arr);

	   xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

           ins_blgl_distrib_bl();

           xxxxxx_main_acc1_code.arr[0]     = '\0';
           xxxxxx_main_acc2_code.arr[0]     = '\0';
           xxxxxx_dept_code.arr[0]     = '\0';
           xxxxxx_subledger_group_code.arr[0] = '\0';
           xxxxxx_subledger_line_code.arr[0] = '\0';
           xxxxxx_product_group_code.arr[0] = '\0';
           xxxxxx_product_line_code.arr[0] = '\0';

           xxxxxx_main_acc1_code.len                 = 0;
           xxxxxx_main_acc2_code.len                 = 0;
           xxxxxx_dept_code.len                      = 0;
           xxxxxx_subledger_group_code.len           = 0;
           xxxxxx_subledger_line_code.len           = 0;
           xxxxxx_product_group_code.len           = 0;
           xxxxxx_product_line_code.len           = 0;

           EXEC SQL SELECT MAIN_ACC1_CODE,
                  MAIN_ACC2_CODE,
                  DEPT_CODE,
                  SUBLEDGER_GROUP_CODE,
                  SUBLEDGER_LINE_CODE,
                  PRODUCT_GROUP_CODE,
                  PRODUCT_LINE_CODE     INTO
                  :xxxxxx_main_acc1_code,
                  :xxxxxx_main_acc2_code,
                  :xxxxxx_dept_code,
                  :xxxxxx_subledger_group_code,
                  :xxxxxx_subledger_line_code,
                  :xxxxxx_product_group_code,
                  :xxxxxx_product_line_code
                FROM BL_GL_ACCOUNT
                WHERE ACC_INT_CODE = nvl(:t_overall_int_code,:t_bill_disc_recv_acc_int_code)
	        AND   ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);

            if(OERROR)
			{ //disp_message(ERR_MESG,t_overall_int_code.arr);
			         //disp_message(ERR_MESG, " 2 ");

	       err_mesg("SELECT failed on table BL_GL_ACCOUNT",0,"");
            }

	    if(NO_DATA_FOUND)
		{  
		 sprintf(string_var,"Record overall discount - %s not found in BL_GL_ACCOUNT",t_overall_int_code.arr);
	         err_mesg(string_var,0,"");
 		}

             xxxxxx_main_acc1_code.arr[xxxxxx_main_acc1_code.len] = '\0';
             xxxxxx_main_acc2_code.arr[xxxxxx_main_acc2_code.len] = '\0';
             xxxxxx_dept_code.arr[xxxxxx_dept_code.len]           = '\0';
     xxxxxx_subledger_group_code.arr[xxxxxx_subledger_group_code.len] = '\0';
     xxxxxx_subledger_line_code.arr[xxxxxx_subledger_line_code.len] = '\0';
     xxxxxx_product_group_code.arr[xxxxxx_product_group_code.len] = '\0';
     xxxxxx_product_line_code.arr[xxxxxx_product_line_code.len] = '\0';

    // strcpy(xxxxxx_dept_code.arr,dflt_dept_code.arr);
    // xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);

     if(cancel_flg)
         strcpy(xxxxxx_doc_amt.arr,t_tot_disc_nega.arr);
     else
         strcpy(xxxxxx_doc_amt.arr,t_tot_disc_char.arr);
     xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

             ins_blgl_distrib_bl();

          }
/**** post manual disc seperately if any  added NK 02/06/94 ***/

    if (t_man_disc_amt != 0)
    {
        t_bill_type_int_code.arr[0] = '\0';
        t_bill_type_int_code.len    = 0;
		t_bill_disc_recv_acc_int_code.arr[0] = '\0';
        t_bill_disc_recv_acc_int_code.len    = 0;

        EXEC SQL SELECT B.BL_RECV_ACC_INT_CODE,B.BILL_DISC_RECV_ACC_INT_CODE 
		INTO :t_bill_type_int_code,
			 :t_bill_disc_recv_acc_int_code
        FROM BL_BILL_TYPE A, BL_BILL_TYPE_INT B
        WHERE A.BILL_TYPE_CODE = :t_bill_type_code
        AND   A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
				FROM   SY_ACC_ENTITY 
				WHERE  ACC_ENTITY_ID = :nd_operating_facility_id)
	AND  A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE
	AND  A.BILL_TYPE_CODE = B.BILL_TYPE_CODE
	AND TO_DATE(:t_doc_date,'DD/MM/YYYY') between 
		      NVL(B.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(B.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
	;

        if(OERROR)
	    err_mesg("SELECT failed on table BL_BILL_TYPE_INT",0,"");

        if(NO_DATA_FOUND)
		{  
		 sprintf(string_var,"Record - %s not found in BL_BILL_TYPE_INT",t_bill_type_code.arr);
	         err_mesg(string_var,0,"");
 		}   

        t_bill_type_int_code.arr[t_bill_type_int_code.len] = '\0';
		t_bill_disc_recv_acc_int_code.arr[t_bill_disc_recv_acc_int_code.len] = '\0';

	open_bill_line();
	while(fetch_bill_line()) {

            xxxxxx_main_acc1_code.arr[0]       = '\0';
            xxxxxx_main_acc2_code.arr[0]       = '\0';
            xxxxxx_dept_code.arr[0]            = '\0';
            xxxxxx_subledger_group_code.arr[0] = '\0';
            xxxxxx_subledger_line_code.arr[0]  = '\0';
            xxxxxx_product_group_code.arr[0]   = '\0';
            xxxxxx_product_line_code.arr[0]    = '\0';
    
            xxxxxx_main_acc1_code.len              = 0;
            xxxxxx_main_acc2_code.len              = 0;
            xxxxxx_dept_code.len                   = 0;
            xxxxxx_subledger_group_code.len        = 0;
            xxxxxx_subledger_line_code.len         = 0;
            xxxxxx_product_group_code.len          = 0;
            xxxxxx_product_line_code.len           = 0;
    
            EXEC SQL SELECT MAIN_ACC1_CODE,
                            MAIN_ACC2_CODE,
                            DEPT_CODE,
                            SUBLEDGER_GROUP_CODE,
                            SUBLEDGER_LINE_CODE,
                            PRODUCT_GROUP_CODE,
                            PRODUCT_LINE_CODE     
		     INTO   :xxxxxx_main_acc1_code,
                            :xxxxxx_main_acc2_code,
                            :xxxxxx_dept_code,
                            :xxxxxx_subledger_group_code,
                            :xxxxxx_subledger_line_code,
                            :xxxxxx_product_group_code,
                            :xxxxxx_product_line_code
                     FROM   BL_GL_ACCOUNT
                     WHERE  ACC_INT_CODE = :t_bill_type_int_code
	             AND    ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
			    FROM   SY_ACC_ENTITY 
			    WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);

    
            if(OERROR)
	    {
			  //disp_message(ERR_MESG,t_bill_type_int_code.arr);
			    //               disp_message(ERR_MESG, " 3 ");

	         err_mesg("SELECT failed on table BL_GL_ACCOUNT",0,"");
	     }

	        if(NO_DATA_FOUND)
		{  
		 sprintf(string_var,"Record line level discount - %s not found in BL_GL_ACCOUNT for the document %s-%s",t_bill_type_int_code.arr,t_doc_type_code.arr,t_doc_num.arr);
	         err_mesg(string_var,0,"");
 		}   

    
            xxxxxx_main_acc1_code.arr[xxxxxx_main_acc1_code.len] = '\0';
            xxxxxx_main_acc2_code.arr[xxxxxx_main_acc2_code.len] = '\0';
            xxxxxx_dept_code.arr[xxxxxx_dept_code.len]           = '\0';
            xxxxxx_subledger_group_code.arr[xxxxxx_subledger_group_code.len] = '\0';
            xxxxxx_subledger_line_code.arr[xxxxxx_subledger_line_code.len] = '\0';
            xxxxxx_product_group_code.arr[xxxxxx_product_group_code.len] = '\0';
            xxxxxx_product_line_code.arr[xxxxxx_product_line_code.len] = '\0';
    
            if(cancel_flg)
                strcpy(xxxxxx_doc_amt.arr,t_man_disc_char.arr);
            else
                strcpy(xxxxxx_doc_amt.arr,t_man_disc_nega.arr);

            xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

            ins_blgl_distrib_bl();

            xxxxxx_main_acc1_code.arr[0]       = '\0';
            xxxxxx_main_acc2_code.arr[0]       = '\0';
            xxxxxx_dept_code.arr[0]            = '\0';
            xxxxxx_subledger_group_code.arr[0] = '\0';
            xxxxxx_subledger_line_code.arr[0]  = '\0';
            xxxxxx_product_group_code.arr[0]   = '\0';
            xxxxxx_product_line_code.arr[0]    = '\0';
 
            xxxxxx_main_acc1_code.len          = 0;
            xxxxxx_main_acc2_code.len          = 0;
            xxxxxx_dept_code.len               = 0;
            xxxxxx_subledger_group_code.len    = 0;
            xxxxxx_subledger_line_code.len     = 0;
            xxxxxx_product_group_code.len      = 0;
            xxxxxx_product_line_code.len       = 0;

            EXEC SQL SELECT MAIN_ACC1_CODE,
                            MAIN_ACC2_CODE,
                            DEPT_CODE,
                            SUBLEDGER_GROUP_CODE,
                            SUBLEDGER_LINE_CODE,
                            PRODUCT_GROUP_CODE,
                            PRODUCT_LINE_CODE     
	             INTO   :xxxxxx_main_acc1_code,
                            :xxxxxx_main_acc2_code,
                            :xxxxxx_dept_code,
                            :xxxxxx_subledger_group_code,
                            :xxxxxx_subledger_line_code,
                            :xxxxxx_product_group_code,
                            :xxxxxx_product_line_code
                     FROM   BL_GL_ACCOUNT
                     WHERE  ACC_INT_CODE = nvl(:t_man_int_code,:t_bill_disc_recv_acc_int_code)
	             AND    ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
			    FROM   SY_ACC_ENTITY 
			    WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);

             if(OERROR)
			 {
			  //disp_message(ERR_MESG,t_man_int_code.arr);
			//	                 disp_message(ERR_MESG, " 4 ");

	        err_mesg("SELECT failed on table BL_GL_ACCOUNT",0,"");
			}

        if(NO_DATA_FOUND)
		{  
		   	 sprintf(string_var,"Record - %s not found in BL_GL_ACCOUNT",t_man_int_code.arr);
	         err_mesg(string_var,0,"");
 		 }   


             xxxxxx_main_acc1_code.arr[xxxxxx_main_acc1_code.len] = '\0';
             xxxxxx_main_acc2_code.arr[xxxxxx_main_acc2_code.len] = '\0';
             xxxxxx_dept_code.arr[xxxxxx_dept_code.len]           = '\0';
             xxxxxx_subledger_group_code.arr[xxxxxx_subledger_group_code.len] = '\0';
             xxxxxx_subledger_line_code.arr[xxxxxx_subledger_line_code.len] = '\0';
             xxxxxx_product_group_code.arr[xxxxxx_product_group_code.len] = '\0';
             xxxxxx_product_line_code.arr[xxxxxx_product_line_code.len] = '\0';

            // strcpy(xxxxxx_dept_code.arr,dflt_dept_code.arr);
            // xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);

             if(cancel_flg)
                 strcpy(xxxxxx_doc_amt.arr,t_man_disc_nega.arr);
             else
                 strcpy(xxxxxx_doc_amt.arr,t_man_disc_char.arr);
                 xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

             ins_blgl_distrib_bl();

          }
    }
/*************** End of GL Posting   G Sriram *********************/
}

get_alloc_amt()
{

    tot_alloc_amt = 0;

   /* EXEC SQL SELECT SUM(ALLOCATED_AMT)
	     INTO   :tot_alloc_amt
	     FROM   DF_PAY_ALCN
	     WHERE  MODULE_ID     = 'BL'
	     AND    REF_NUM BETWEEN :t_start_ref_num AND :t_ref_num
	     AND    DOC_TYPE_CODE = :df_doc_type_code
             AND    DOC_NUM       = :df_doc_num;*/

    if(OERROR)
	err_mesg("SELECT failed on table DF_PAY_ALCN",0,"");
}

/****** NEW CODE ADDED NK ***********/

post_cancelled_trx()
{
    open_cancelled_trx();
    g_error = 0;
    g_savepoint = 0;
    while(fetch_cancelled_trx()) 
    {
	//  -added on 12/07/2003

	if(g_error) 
	  do_rollback();

    EXEC SQL SAVEPOINT LAST_DOC_REF;

    if (OERROR)
	err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

    g_savepoint = 1;

    //  added on 12/07/2003

    upd_reasons_in_receipt_refund_for_unposting(3);

    if (nd_reason_text.arr[0] != '\0')
         continue;

    amt_sign_ind = 0;	

    if(c_cancelled_ind.arr[0] == 'Y') 
	{
	   amt_sign_ind = -1;
	   strcpy(c_post_date.arr, c_cancelled_date.arr);
	}
    else if ((c_bounced_yn.arr[0] == 'Y') &&
                (c_bounced_status_ind.arr[0]  == 'N')) 
	{
	        amt_sign_ind = -1;
	        strcpy(c_post_date.arr, c_bounced_date.arr);
	}
     else if ((c_bounced_yn.arr[0] == 'Y') &&
                (c_bounced_status_ind.arr[0]  == 'C')) 
	{
	        amt_sign_ind = 1;
	        strcpy(c_post_date.arr, c_bounced_status_date.arr);
	}

	c_post_date.len = strlen(c_post_date.arr);
         
        	
	if(amt_sign_ind != 0) 
	{

	    // sprintf(string_var,"%s === %s ",c_doc_type_code.arr,c_doc_number.arr);
	    // disp_message(ERR_MESG,string_var);	    

	    process_cancel();	    

	    if(g_error) continue;  // added on 02/06/2004		    

	    if (nd_reason_text.arr[0] != '\0') continue;      // added on 02/06/2004	
	
	    if (strcmp(c_cons_rec_yn.arr,"Y") == 0)
	    {
		EXEC SQL UPDATE BL_BILLS_FOR_CONS_RCPT_CANC
				    SET POSTED_IND = 'Y',
					UNPOSTED_REASON = NULL,
					MODIFIED_BY_ID         = user,
					MODIFIED_DATE          = SYSDATE,
					ADDED_AT_WS_NO         = :nd_ws_no,
					ADDED_FACILITY_ID      = :nd_operating_facility_id,
					MODIFIED_AT_WS_NO      = :nd_ws_no,
					MODIFIED_FACILITY_ID   = :nd_operating_facility_id
				 WHERE  ROWID = :c_trx_rowid 
				   AND  OPERATING_FACILITY_ID = :nd_operating_facility_id;
		if(OERROR)
			err_mesg("UPDATE failed on table BL_BILLS_FOR_CONS_RCPT_CANC",0,"");

	    }
	    else
	    {
		EXEC SQL UPDATE BL_CANCELLED_BOUNCED_TRX
				    SET POSTED_IND = 'Y',
					UNPOSTED_REASON = NULL,
					MODIFIED_BY_ID         = user,
					MODIFIED_DATE          = SYSDATE,
					ADDED_AT_WS_NO         = :nd_ws_no,
					ADDED_FACILITY_ID      = :nd_operating_facility_id,
					MODIFIED_AT_WS_NO      = :nd_ws_no,
					MODIFIED_FACILITY_ID   = :nd_operating_facility_id
				 WHERE  ROWID = :c_trx_rowid 
				   AND  OPERATING_FACILITY_ID = :nd_operating_facility_id;
		if(OERROR)
			err_mesg("UPDATE failed on table BL_CANCELLED_BOUNCED_TRX",0,"");

	    }	    
	}
    		 //CURRENT OF CANCEL_TRX_CUR;

    }

    EXEC SQL CLOSE CANCEL_TRX_CUR ; 
}

process_cancel()
{
    char t_amt[21];

    recref_doc_date.len                = 0;
    EXEC SQL SELECT :c_post_date INTO  :recref_doc_date  FROM DUAL;
    recref_doc_date.arr[recref_doc_date.len] = '\0';

    // new

    g_savepoint = 0;
    g_error = 0;

    //

    fetch_rec_ref_trx();

    //

    if(g_error) do_rollback();

    EXEC SQL SAVEPOINT LAST_DOC_REF;

    if (OERROR)
        err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

    g_savepoint = 1;

    if(recref_posted_ind.arr[0] != 'Y') 
    {
       upd_reasons_in_receipt_refund_for_unposting(1); 	 
    }

    if (nd_reason_text.arr[0] != '\0')  return;      

    // new

    get_bank_acc();
    if(g_error) return;  // added on 02/06/2004
    get_slmt_desc();    

    if(recref_posted_ind.arr[0] != 'Y') {

        if(amt_sign_ind == -1) 
	{
           strcpy(t_amt, recref_doc_amt.arr);
           strcpy(recref_doc_amt.arr, recref_doc_amt_negative.arr);
           strcpy(recref_doc_amt_negative.arr, t_amt);
	   recref_doc_amt.len = strlen(recref_doc_amt.arr);
	   recref_doc_amt_negative.len = strlen(recref_doc_amt_negative.arr);
	}	

	//----This is for inserting record to BL_DCP_TRN----
	     recref_dcp_ind.arr[0] = '\0';
	     recref_dcp_ind.len = 0;
	     strcpy(recref_dcp_ind.arr,"N");
	     recref_dcp_ind.len = strlen(recref_dcp_ind.arr);
	//--------------------------------------------------

	post_trx();
	if(g_error) return;  // added on 02/06/2004	

	if (strcmp(recref_cons_receipt_yn.arr,"Y") == 0)
	{
		EXEC SQL UPDATE BL_BILLS_FOR_CONS_RECEIPT
		    SET POSTED_IND = 'Y',
				UNPOSTED_REASON = NULL,
				MODIFIED_BY_ID         = user,
				MODIFIED_DATE          = SYSDATE,
				ADDED_AT_WS_NO         = :nd_ws_no,
				ADDED_FACILITY_ID      = :nd_operating_facility_id,
				MODIFIED_AT_WS_NO      = :nd_ws_no,
				MODIFIED_FACILITY_ID   = :nd_operating_facility_id
			 WHERE ROWID		= :recref_rowid;
	 if(OERROR)
	    err_mesg("UPDATE failed on table BL_BILLS_FOR_CONS_RCPT_CANC",0,"");

	 }
	else
	 {	 
		EXEC SQL UPDATE BL_RECEIPT_REFUND_DTL
	         SET POSTED_IND			= 'Y' ,
		     UNPOSTED_REASON		= NULL,
		     MODIFIED_BY_ID		= user,
		     MODIFIED_DATE		= SYSDATE,
		     ADDED_AT_WS_NO		= :nd_ws_no,
		     ADDED_FACILITY_ID		= :nd_operating_facility_id,
		     MODIFIED_AT_WS_NO		= :nd_ws_no,
		     MODIFIED_FACILITY_ID	= :nd_operating_facility_id
		  WHERE ROWID			= :recref_rowid;
	  if(OERROR)
	    err_mesg("UPDATE failed on table BL_RECEIPT_REFUND_DTL",0,"");
	 }        

        if(amt_sign_ind == -1) 
	{
           strcpy(t_amt, recref_doc_amt.arr);
           strcpy(recref_doc_amt.arr, recref_doc_amt_negative.arr);
           strcpy(recref_doc_amt_negative.arr, t_amt);
	   recref_doc_amt.len = strlen(recref_doc_amt.arr);
	   recref_doc_amt_negative.len = strlen(recref_doc_amt_negative.arr);

	}
    }

/*-- While posting the cancelled or bounced record the bounced date/month and
     year should go to bl_gl_distribution. VSK 14/06/1999 */

   recref_doc_date.arr[0]             = '\0';
   recref_post_month.arr[0]           = '\0';
   recref_post_year.arr[0]            = '\0';
   
   recref_doc_date.len                = 0;
   recref_post_month.len              = 0;
   recref_post_year.len               = 0;
	
	/*	
	EXEC SQL SELECT :c_post_date,
		   TO_CHAR(TO_DATE(:c_post_date,'DD/MM/YYYY'),'MM'),
		   TO_CHAR(TO_DATE(:c_post_date,'DD/MM/YYYY'),'YYYY') 
		   INTO 
		   :recref_doc_date,
		   :recref_post_month,
		   :recref_post_year
		   FROM DUAL;
	*/

   // Value from sy_acc_period_defn

   EXEC SQL SELECT :c_post_date
		   INTO  :recref_doc_date  FROM DUAL;

   recref_doc_date.arr[recref_doc_date.len]                         = '\0';


   exec sql select nvl(acc_per_year, to_char(to_date(:c_post_date,'DD/MM/YYYY'),'YYYY')),
		   nvl(acc_per_month,to_char(to_date(:c_post_date,'DD/MM/YYYY'),'MM'))  
	into :recref_post_year, :recref_post_month
	from sy_acc_period_defn
	where to_date(:recref_doc_date,'DD/MM/YYYY') 
	between acc_per_start_date and acc_per_end_date;	

   recref_post_month.arr[recref_post_month.len]                     = '\0';
   recref_post_year.arr[recref_post_year.len]                       = '\0';  

   //----This is for inserting record to BL_DCP_TRN----
	     recref_dcp_ind.arr[0] = '\0';
	     recref_dcp_ind.len = 0;
	     strcpy(recref_dcp_ind.arr,"Y");
	     recref_dcp_ind.len = strlen(recref_dcp_ind.arr);
   //--------------------------------------------------

    if (c_bounced_yn.arr[0] == 'Y')
	post_trx();	 // post_trx_bounced();
    else
        post_trx();

    if(g_error) return;  // added on 02/06/2004
}

post_trx_bounced()
{
    strcpy(xxxxxx_main_acc1_code.arr,dr_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);
    strcpy(xxxxxx_main_acc2_code.arr,dr_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);
    strcpy(xxxxxx_dept_code.arr,dr_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);
    strcpy(xxxxxx_subledger_group_code.arr,dr_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);
    strcpy(xxxxxx_subledger_line_code.arr,dr_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);
    strcpy(xxxxxx_product_group_code.arr,dr_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);
    strcpy(xxxxxx_product_line_code.arr,dr_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    if(amt_sign_ind == 1) {
        strcpy(xxxxxx_doc_amt.arr,recref_doc_amt.arr);
        xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
    else {
        strcpy(xxxxxx_doc_amt.arr,recref_doc_amt_negative.arr);
        xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
    ins_blgl_distrib();
    if(g_error) return;  // added on 02/06/2004

    strcpy(xxxxxx_main_acc1_code.arr,cr_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);
    strcpy(xxxxxx_main_acc2_code.arr,cr_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);
    strcpy(xxxxxx_dept_code.arr,cr_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);
    strcpy(xxxxxx_subledger_group_code.arr,cr_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);
    strcpy(xxxxxx_subledger_line_code.arr,cr_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);
    strcpy(xxxxxx_product_group_code.arr,cr_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);
    strcpy(xxxxxx_product_line_code.arr,cr_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    if(amt_sign_ind == 1) {
        strcpy(xxxxxx_doc_amt.arr,recref_doc_amt_negative.arr);
        xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
    else {
        strcpy(xxxxxx_doc_amt.arr,recref_doc_amt.arr);
        xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
    }
    ins_blgl_distrib();
    if(g_error) return;  // added on 02/06/2004

}

post_trx()
{
      if (
	 (strcmp(recref_recpt_nature_code.arr, "AD")==0)  ||
         (strcmp(recref_recpt_nature_code.arr, "PR")==0)  ||
         (strcmp(recref_recpt_nature_code.arr, "RD")==0)  ||
	 (strcmp(recref_recpt_nature_code.arr, "PD")==0)  ||
	 (strcmp(recref_recpt_nature_code.arr, "CR")==0)     ) 
      {
         if (recref_recpt_refund_ind.arr[0]=='R')
           get_other_acc (RECREF);
         else
           get_other_acc (RD);

	 if(g_error) return;  // added on 02/06/2004

         move_into_post_acc(BANK);
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004
         move_into_post_acc(OTHER);
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004
      }
      else if (strcmp(recref_recpt_nature_code.arr, "CU")==0)
      {
         get_other_acc(RECREF);
	 if(g_error) return;  // added on 02/06/2004
         move_into_post_acc(BANK);
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004
         move_into_post_acc(OTHER);
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004
      }
      else if (strcmp(recref_recpt_nature_code.arr, "DC")==0)
      {
         get_other_acc(DC);
	 if(g_error) return;  // added on 02/06/2004
         move_into_post_acc(BANK);
	 if(g_error) return;
	 ins_bldcp_trn();
	 if(g_error) return;
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004
         move_into_post_acc(OTHER);
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004

      }
      else if (strcmp(recref_recpt_nature_code.arr, "MI")==0)
      {
         //move_into_post_acc(BANK);
         //ins_blgl_distrib();
	 //if(g_error) return;  // added on 02/06/2004
	 
        get_other_acc(RECREF);
	if(g_error) return;  // added on 02/06/2004

	move_into_post_acc(BANK);
        ins_blgl_distrib();	
	if(g_error) return;  // added on 02/06/2004	

         move_into_post_acc(OTHER);
         ins_blgl_distrib();	 
	 if(g_error) return;  // added on 02/06/2004
	 
      }
      else if (strcmp(recref_recpt_nature_code.arr, "BI")==0)
      {
         get_other_acc(BILL);
	 if(g_error) return;  // added on 02/06/2004
         move_into_post_acc(BANK);
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004
         move_into_post_acc(OTHER);
         ins_blgl_distrib();
	 if(g_error) return;  // added on 02/06/2004
      }
}

post_cancelled_bills()
{

    open_cancelled_bill();
    while(fetch_cancelled_bill()) 
    {



//  added on 12/07/2003

	if(g_error) 
	  do_rollback();

      EXEC SQL SAVEPOINT LAST_DOC_REF;

      if (OERROR)
         err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

      g_savepoint = 1;

//  added on 12/07/2003

      upd_reasons_in_receipt_refund_for_unposting(2) ;

      if (nd_reason_text.arr[0] != '\0')
         continue;


	fetch_bill_dtls();
	if (g_error) continue; // Added new


	if (nd_reason_text.arr[0] != '\0')
         continue;

	post_discounts(1);
	if (g_error) continue; // Added new
	//KGA
	if  ( t_round_amt != 0 )
	  post_rounding_amt(1);
	  if (g_error) continue; // Added new

	EXEC SQL UPDATE BL_CANCELLED_BILLS
	        SET POSTED_IND				= 'Y',
		UNPOSTED_REASON			= NULL,
		MODIFIED_BY_ID			= user,
		MODIFIED_DATE			= SYSDATE,
		ADDED_AT_WS_NO			= :nd_ws_no,
		ADDED_FACILITY_ID		= :nd_operating_facility_id,
		MODIFIED_AT_WS_NO		= :nd_ws_no,
		MODIFIED_FACILITY_ID	= :nd_operating_facility_id
	        WHERE ROWID = :c_trx_rowid;
		 
		 //CURRENT OF CANCEL_BILL_CUR;

	if(OERROR)
	    err_mesg("UPDATE failed on table BL_CANCELLED_BILLS",0,"");

    }

}

open_cancelled_trx()
{

    EXEC SQL OPEN CANCEL_TRX_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor CANCEL_TRX_CUR",0,"");

}

fetch_cancelled_trx()
{
    c_trx_rowid.arr[0] = '\0';
    c_recpt_refund_ind.arr[0]  = '\0';
    c_doc_type_code.arr[0]  = '\0';
    c_doc_number.arr[0]  = '\0';
	c_doc_srno.arr[0]  = '\0';
    c_cancelled_ind.arr[0]  = '\0';
    c_bounced_yn.arr[0]  = '\0';
    c_bounced_status_ind.arr[0]  = '\0';
    c_narration.arr[0]  = '\0';
    c_cancelled_date.arr[0]  = '\0';
    c_bounced_date.arr[0]  = '\0';
    c_bounced_status_date.arr[0]  = '\0';
    c_cons_rec_yn.arr[0] = '\0';
    c_bill_doc_type_code.arr[0] = '\0';
    c_bill_doc_num.arr[0] = '\0';
    

    dr_main_acc1_code.arr[0]  = '\0';
    dr_main_acc2_code.arr[0]  = '\0';
    dr_dept_code.arr[0]  = '\0';
    dr_subledger_group_code.arr[0]  = '\0';
    dr_subledger_line_code.arr[0]  = '\0';
    dr_product_group_code.arr[0]  = '\0';
    dr_product_line_code.arr[0]  = '\0';
    cr_main_acc1_code.arr[0]  = '\0';
    cr_main_acc2_code.arr[0]  = '\0';
    cr_dept_code.arr[0]  = '\0';
    cr_subledger_group_code.arr[0]  = '\0';
    cr_subledger_line_code.arr[0]  = '\0';
    cr_product_group_code.arr[0]  = '\0';
    cr_product_line_code.arr[0]  = '\0';

    nd_doc_type.arr[0]				     = '\0';
    nd_doc_num.arr[0]				     = '\0';
    nd_doc_date.arr[0]		              	     = '\0';
    recref_cash_counter_code.arr[0]             = '\0';
    recref_shift_id.arr[0]                             = '\0';

    dr_main_acc1_code.len     = 0;
    dr_main_acc2_code.len     = 0;
    dr_dept_code.len     = 0;
    dr_subledger_group_code.len     = 0;
    dr_subledger_line_code.len     = 0;
    dr_product_group_code.len     = 0;
    dr_product_line_code.len     = 0;
    cr_main_acc1_code.len     = 0;
    cr_main_acc2_code.len     = 0;
    cr_dept_code.len     = 0;
    cr_subledger_group_code.len     = 0;
    cr_subledger_line_code.len     = 0;
    cr_product_group_code.len     = 0;
    cr_product_line_code.len     = 0;
    c_trx_rowid.len = 0;
    c_recpt_refund_ind.len     = 0;
    c_doc_type_code.len     = 0;
    c_doc_number.len     = 0;
	c_doc_srno.len     = 0;
    c_cancelled_ind.len     = 0;
    c_bounced_yn.len     = 0;
    c_bounced_status_ind.len     = 0;
    c_narration.len     = 0;
    c_cancelled_date.len     = 0;
    c_bounced_date.len     = 0;
    c_bounced_status_date.len     = 0;
    c_cons_rec_yn.len = 0;
    c_bill_doc_type_code.len = 0;
    c_bill_doc_num.len = 0;

   nd_doc_type.len = 0;
   nd_doc_num.len = 0;
   nd_doc_date.len = 0;
   recref_cash_counter_code.len=0;
   recref_shift_id.len=0;
    
    EXEC SQL FETCH CANCEL_TRX_CUR 
	     INTO  :c_trx_rowid,
		   :c_recpt_refund_ind,
                   :c_doc_type_code,
                   :c_doc_number,
				   :c_doc_srno,
                   :c_cancelled_ind,
                   :c_bounced_yn,
                   :c_bounced_status_ind,
                   :c_narration,
                   :c_cancelled_date,
                   :c_bounced_date,
                   :c_bounced_status_date,
                   :dr_main_acc1_code,
                   :dr_main_acc2_code,
                   :dr_dept_code,
                   :dr_product_group_code,
                   :dr_product_line_code,
                   :dr_subledger_group_code,
                   :dr_subledger_line_code,
                   :cr_main_acc1_code,
                   :cr_main_acc2_code,
                   :cr_dept_code,
                   :cr_product_group_code,
                   :cr_product_line_code,
                   :cr_subledger_group_code,
                   :cr_subledger_line_code,
		   :nd_doc_type,
		   :nd_doc_num,
		   :nd_doc_date,
                   :recref_shift_id,
		   :recref_cash_counter_code,
		   :c_cons_rec_yn,
		   :c_bill_doc_type_code,
		   :c_bill_doc_num;
    if(OERROR)
	err_mesg("FETCH failed on table CANCEL_TRX_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    c_trx_rowid.arr[c_trx_rowid.len] = '\0';
    c_recpt_refund_ind.arr[c_recpt_refund_ind.len]  = '\0';
    c_doc_type_code.arr[c_doc_type_code.len]  = '\0';
    c_doc_number.arr[c_doc_number.len]  = '\0';
	c_doc_srno.arr[c_doc_srno.len]  = '\0';
    c_cancelled_ind.arr[c_cancelled_ind.len]  = '\0';
    c_bounced_yn.arr[c_bounced_yn.len]  = '\0';
    c_bounced_status_ind.arr[c_bounced_status_ind.len]  = '\0';
    c_narration.arr[c_narration.len]  = '\0';
    c_cancelled_date.arr[c_cancelled_date.len]  = '\0';
    c_bounced_date.arr[c_bounced_date.len]  = '\0';
    c_bounced_status_date.arr[c_bounced_status_date.len]  = '\0';
    dr_main_acc1_code.arr[dr_main_acc1_code.len]  = '\0';
    dr_main_acc2_code.arr[dr_main_acc2_code.len]  = '\0';
    dr_dept_code.arr[dr_dept_code.len]  = '\0';
    dr_subledger_group_code.arr[dr_subledger_group_code.len]  = '\0';
    dr_subledger_line_code.arr[dr_subledger_line_code.len]  = '\0';
    dr_product_group_code.arr[dr_product_group_code.len]  = '\0';
    dr_product_line_code.arr[dr_product_line_code.len]  = '\0';
    cr_main_acc1_code.arr[cr_main_acc1_code.len]  = '\0';
    cr_main_acc2_code.arr[cr_main_acc2_code.len]  = '\0';
    cr_dept_code.arr[cr_dept_code.len]  = '\0';
    cr_subledger_group_code.arr[cr_subledger_group_code.len]    = '\0';
    cr_subledger_line_code.arr[cr_subledger_line_code.len]          = '\0';
    cr_product_group_code.arr[cr_product_group_code.len]         = '\0';
    cr_product_line_code.arr[cr_product_line_code.len]               = '\0';
    nd_doc_type.arr[nd_doc_type.len]	                                = '\0';
    nd_doc_num.arr[nd_doc_num.len]	                                = '\0';
    nd_doc_date.arr[nd_doc_date.len]	                                = '\0';
    recref_cash_counter_code.arr[recref_cash_counter_code.len] ='\0';
    recref_shift_id.arr[recref_shift_id.len]='\0';
    c_cons_rec_yn.arr[c_cons_rec_yn.len] = '\0';
    c_bill_doc_type_code.arr[c_bill_doc_type_code.len] = '\0';
    c_bill_doc_num.arr[c_bill_doc_num.len] = '\0';


    return 1;

}

open_cancelled_bill()
{

    EXEC SQL OPEN CANCEL_BILL_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor CANCEL_BILL_CUR",0,"");

}

fetch_cancelled_bill()
{
    c_trx_rowid.arr[0] = '\0';
    c_doc_type_code.arr[0]  = '\0';
    c_doc_number.arr[0]  = '\0';
    c_post_date.arr[0]  = '\0';
    nd_doc_type.arr[0]	= '\0';
    nd_doc_num.arr[0]	= '\0';
    nd_doc_date.arr[0]	= '\0';
    recref_cash_counter_code.arr[0]='\0';
    recref_shift_id.arr[0]='\0';


    c_trx_rowid.len		= 0;
    c_doc_type_code.len = 0;
    c_doc_number.len    = 0;
    c_post_date.len     = 0;
    nd_doc_type.len = 0;
    nd_doc_num.len = 0;
    nd_doc_date.len = 0;
	recref_cash_counter_code.len=0;
	recref_shift_id.len=0;

    
    EXEC SQL FETCH CANCEL_BILL_CUR 
	     INTO  :c_trx_rowid,
		       :c_doc_type_code,
               :c_doc_number,
			   :c_post_date,
		       :nd_doc_type,
			  :nd_doc_num,
			  :nd_doc_date,
			  :recref_shift_id,
			  :recref_cash_counter_code;

    if(OERROR)
		err_mesg("FETCH failed on table CANCEL_BILL_CUR",0,"");

    if(NO_DATA_FOUND)
		return 0;

    c_trx_rowid.arr[c_trx_rowid.len] = '\0';
    c_doc_type_code.arr[c_doc_type_code.len]  = '\0';
    c_doc_number.arr[c_doc_number.len]  = '\0';
	c_doc_srno.arr[c_doc_srno.len] = '\0';
    c_post_date.arr[c_post_date.len]  = '\0';

	nd_doc_type.arr[nd_doc_type.len]	                            = '\0';
    nd_doc_num.arr[nd_doc_num.len]	                                = '\0';
    nd_doc_date.arr[nd_doc_date.len]	                            = '\0';
	recref_cash_counter_code.arr[recref_cash_counter_code.len]='\0';
	recref_shift_id.arr[recref_shift_id.len]='\0';


    return 1;

}

fetch_rec_ref_trx()
{
   recref_rowid.arr[0]                = '\0';
   recref_recpt_refund_ind.arr[0]     = '\0';
   recref_doc_type_code.arr[0]        = '\0';
   recref_doc_number.arr[0]           = '\0';
   recref_doc_srno.arr[0]             = '\0';
   recref_trx_type_code.arr[0]        = '\0';
   recref_recpt_nature_code.arr[0]    = '\0';
   recref_debtor_category_code.arr[0] = '\0';
   recref_doc_date.arr[0]             = '\0';
   recref_post_month.arr[0]           = '\0';
   recref_post_year.arr[0]            = '\0';
   recref_trx_date_time.arr[0]        = '\0';
   recref_episode_type.arr[0]         = '\0';
   recref_patient_id.arr[0]           = '\0';
   recref_episode_id.arr[0]           = '\0';
   recref_visit_id.arr[0]             = '\0';
   recref_bill_doc_type_code.arr[0]   = '\0';
   recref_bill_doc_number.arr[0]      = '\0';
   recref_customer_code.arr[0]        = '\0';
   recref_cash_counter_code.arr[0]    = '\0';
   recref_shift_id.arr[0]             = '\0';
   recref_doc_amt.arr[0]              = '\0';
   recref_doc_amt_negative.arr[0]     = '\0';
   recref_recpt_type_code.arr[0]      = '\0';
   recref_slmt_type_code .arr[0]      = '\0';
   recref_slmt_doc_ref_desc.arr[0]    = '\0';
   recref_slmt_doc_ref_date.arr[0]    = '\0';
   recref_slmt_doc_remarks.arr[0]     = '\0';
   recref_bank_recon_ref .arr[0]      = '\0';
   recref_print_flag.arr[0]           = '\0';
   recref_cancelled_ind.arr[0]        = '\0';
   recref_posted_ind.arr[0]           = '\0';
   recref_narration.arr[0]            = '\0';
   recref_cons_receipt_yn.arr[0]      = '\0';

   recref_rowid.len                   = 0;
   recref_recpt_refund_ind.len        = 0;
   recref_doc_type_code.len           = 0;
   recref_doc_number.len              = 0;
   recref_doc_srno.len                = 0;
   recref_trx_type_code.len           = 0;
   recref_recpt_nature_code.len       = 0;
   recref_debtor_category_code.len    = 0;
   recref_doc_date.len                = 0;
   recref_post_month.len              = 0;
   recref_post_year.len               = 0;
   recref_trx_date_time.len           = 0;
   recref_episode_type.len            = 0;
   recref_patient_id.len              = 0;
   recref_episode_id.len              = 0;
   recref_visit_id.len                = 0;
   recref_bill_doc_type_code.len      = 0;
   recref_bill_doc_number.len         = 0;
   recref_customer_code.len           = 0;
   recref_cash_counter_code.len       = 0;
   recref_shift_id.len                = 0;
   recref_doc_amt.len                 = 0;
   recref_doc_amt_negative.len        = 0;
   recref_recpt_type_code.len         = 0;
   recref_slmt_type_code .len         = 0;
   recref_slmt_doc_ref_desc.len       = 0;
   recref_slmt_doc_ref_date.len       = 0;
   recref_slmt_doc_remarks.len        = 0;
   recref_bank_recon_ref .len         = 0;
   recref_print_flag.len              = 0;
   recref_cancelled_ind.len           = 0;
   recref_posted_ind.len              = 0;
   recref_narration.len               = 0;
   recref_cons_receipt_yn.len         = 0;

   if (strcmp(c_cons_rec_yn.arr,"Y") == 0)
   {
	EXEC SQL SELECT 
	     A.ROWID,
             D.RECPT_REFUND_IND,
             B.DOC_TYPE_CODE,
             B.DOC_NUMBER,
             B.DOC_SRNO,
             A.TRX_TYPE_CODE,
             A.RECPT_NATURE_CODE,
             A.DEBTOR_CATEGORY_CODE,
	     TO_CHAR(D.DOC_DATE,'DD/MM/YYYY'),
             D.POST_MONTH,
             D.POST_YEAR,
             D.TRX_DATE_TIME,
             A.EPISODE_TYPE,
             A.PATIENT_ID,
             NVL(A.EPISODE_ID,0),
             NVL(A.VISIT_ID,1),
             B.BILL_DOC_TYPE_CODE,
             B.BILL_DOC_NUM,
             D.CUSTOMER_CODE,
             D.CASH_COUNTER_CODE,
             D.SHIFT_ID,
             DECODE(:amt_sign_ind,1,A.SETTLED_AMT, -A.SETTLED_AMT),
             DECODE(:amt_sign_ind,1,-A.SETTLED_AMT,A.SETTLED_AMT),
             A.RECPT_TYPE_CODE,
             D.SLMT_TYPE_CODE,
             D.SLMT_DOC_REF_DESC,
             TO_CHAR(D.SLMT_DOC_REF_DATE,'DD/MM/YYYY'),
             D.SLMT_DOC_REMARKS,
             D.BANK_RECON_REF,
             NVL(D.PRINT_FLAG,'N'),
             NVL(D.CANCELLED_IND,'N'),
             NVL(A.POSTED_IND,'N'),
             D.NARRATION,
	     NVL(D.CONSOLIDATED_RECEIPT_YN,'N')	
    INTO     :recref_rowid,
             :recref_recpt_refund_ind,
             :recref_doc_type_code,
             :recref_doc_number,
			 :recref_doc_srno,
             :recref_trx_type_code,
             :recref_recpt_nature_code,
             :recref_debtor_category_code,
             :recref_doc_date,
             :recref_post_month,
             :recref_post_year,
             :recref_trx_date_time,
             :recref_episode_type,
             :recref_patient_id,
             :recref_episode_id,
             :recref_visit_id,
             :recref_bill_doc_type_code,
             :recref_bill_doc_number,
             :recref_customer_code,
             :recref_cash_counter_code,
             :recref_shift_id,
             :recref_doc_amt,
             :recref_doc_amt_negative,
             :recref_recpt_type_code,
             :recref_slmt_type_code ,
             :recref_slmt_doc_ref_desc,
             :recref_slmt_doc_ref_date,
             :recref_slmt_doc_remarks,
             :recref_bank_recon_ref ,
             :recref_print_flag,
             :recref_cancelled_ind,
             :recref_posted_ind,
             :recref_narration,
	     :recref_cons_receipt_yn
    FROM  BL_BILLS_FOR_CONS_RECEIPT A, BL_BILLS_FOR_CONS_RCPT_CANC B,
          BL_CANCELLED_BOUNCED_TRX C, BL_RECEIPT_REFUND_HDRDTL_VW D			/* Modified to HDRDTL_VW */
    WHERE B.OPERATING_FACILITY_ID = :nd_operating_facility_id
    AND B.DOC_TYPE_CODE = :c_doc_type_code
    AND B.DOC_NUMBER    = :c_doc_number
	AND B.DOC_SRNO      = :c_doc_srno
	AND B.BILL_DOC_TYPE_CODE = :c_bill_doc_type_code
    AND B.BILL_DOC_NUM = :c_bill_doc_num
    AND A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID
    AND A.DOC_TYPE_CODE = B.DOC_TYPE_CODE
    AND A.DOC_NUMBER = B.DOC_NUMBER
	AND A.DOC_SRNO   = B.DOC_SRNO
    AND A.BILL_DOC_TYPE_CODE = B.BILL_DOC_TYPE_CODE
    AND A.BILL_DOC_NUM= B.BILL_DOC_NUM
    AND A.OPERATING_FACILITY_ID = C.OPERATING_FACILITY_ID
    AND A.DOC_TYPE_CODE = C.DOC_TYPE_CODE
    AND A.DOC_NUMBER = C.DOC_NUMBER
	AND A.DOC_SRNO   = C.DOC_SRNO
    AND C.OPERATING_FACILITY_ID = D.OPERATING_FACILITY_ID
    AND C.DOC_TYPE_CODE = D.DOC_TYPE_CODE
    AND C.DOC_NUMBER = D.DOC_NUMBER
	AND C.DOC_SRNO   = D.DOC_SRNO;

    if (OERROR)
      err_mesg("SELECT failed on BL_BILLS_FOR_CONS_RECEIPT",0,"");

    if(NO_DATA_FOUND)
    {  
	sprintf(string_var,"Record - %s/%s not found in BL_BILLS_FOR_CONS_RECEIPT",c_doc_type_code.arr,c_doc_number.arr);
	err_mesg(string_var,0,"");
    }   
}
else
{
	EXEC SQL SELECT 
	     ROWID,
             RECPT_REFUND_IND,
             DOC_TYPE_CODE,
             DOC_NUMBER,
			 DOC_SRNO,
             TRX_TYPE_CODE,
             RECPT_NATURE_CODE,
             DEBTOR_CATEGORY_CODE,
	     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
             POST_MONTH,
             POST_YEAR,
             TRX_DATE_TIME,
             EPISODE_TYPE,
             PATIENT_ID,
             NVL(EPISODE_ID,0),
             NVL(VISIT_ID,1),
             BILL_DOC_TYPE_CODE,
             BILL_DOC_NUMBER,
             CUSTOMER_CODE,
             CASH_COUNTER_CODE,
             SHIFT_ID,
             DECODE(:amt_sign_ind,1,DOC_AMT, -DOC_AMT),
             DECODE(:amt_sign_ind,1,-DOC_AMT, DOC_AMT),
             RECPT_TYPE_CODE,
             SLMT_TYPE_CODE,
             SLMT_DOC_REF_DESC,
             TO_CHAR(SLMT_DOC_REF_DATE,'DD/MM/YYYY'),
             SLMT_DOC_REMARKS,
             BANK_RECON_REF,
             NVL(PRINT_FLAG,'N'),
             NVL(CANCELLED_IND,'N'),
             NVL(POSTED_IND,'N'),
             NARRATION,
	     NVL(CONSOLIDATED_RECEIPT_YN,'N')
    INTO     :recref_rowid,
             :recref_recpt_refund_ind,
             :recref_doc_type_code,
             :recref_doc_number,
			 :recref_doc_srno,
             :recref_trx_type_code,
             :recref_recpt_nature_code,
             :recref_debtor_category_code,
             :recref_doc_date,
             :recref_post_month,
             :recref_post_year,
             :recref_trx_date_time,
             :recref_episode_type,
             :recref_patient_id,
             :recref_episode_id,
             :recref_visit_id,
             :recref_bill_doc_type_code,
             :recref_bill_doc_number,
             :recref_customer_code,
             :recref_cash_counter_code,
             :recref_shift_id,
             :recref_doc_amt,
             :recref_doc_amt_negative,
             :recref_recpt_type_code,
             :recref_slmt_type_code ,
             :recref_slmt_doc_ref_desc,
             :recref_slmt_doc_ref_date,
             :recref_slmt_doc_remarks,
             :recref_bank_recon_ref ,
             :recref_print_flag,
             :recref_cancelled_ind,
             :recref_posted_ind,
             :recref_narration,
	     :recref_cons_receipt_yn
    FROM  BL_RECEIPT_REFUND_HDRDTL_VW
    WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
    AND DOC_TYPE_CODE = :c_doc_type_code
    AND DOC_NUMBER    = :c_doc_number
	AND DOC_SRNO      = :c_doc_srno;


    if (OERROR)
      err_mesg("SELECT failed on BL_RECEIPT_REFUND_DTL_CUR",0,"");

   if(NO_DATA_FOUND)
	{  
	sprintf(string_var,"Record %s - %s not found in BL_RECEIPT_REFUND_DTL",c_doc_type_code.arr,c_doc_number.arr);
	err_mesg(string_var,0,"");
	}   


}
  
   recref_rowid.arr[recref_rowid.len]                               = '\0';
   recref_recpt_refund_ind.arr[recref_recpt_refund_ind.len]         = '\0';
   recref_doc_type_code.arr[recref_doc_type_code.len]               = '\0';
   recref_doc_number.arr[recref_doc_number.len]                     = '\0';
   recref_doc_srno.arr[recref_doc_srno.len]                         = '\0';
   recref_trx_type_code.arr[recref_trx_type_code.len]               = '\0';
   recref_recpt_nature_code.arr[recref_recpt_nature_code.len]       = '\0';
   recref_debtor_category_code.arr[recref_debtor_category_code.len] = '\0';
   recref_doc_date.arr[recref_doc_date.len]                         = '\0';
   recref_post_month.arr[recref_post_month.len]                     = '\0';
   recref_post_year.arr[recref_post_year.len]                       = '\0';
   recref_trx_date_time.arr[recref_trx_date_time.len]               = '\0';
   recref_episode_type.arr[recref_episode_type.len]                 = '\0';
   recref_patient_id.arr[recref_patient_id.len]                     = '\0';
   recref_episode_id.arr[recref_episode_id.len]                     = '\0';
   recref_visit_id.arr[recref_visit_id.len]                         = '\0';
   recref_bill_doc_type_code.arr[recref_bill_doc_type_code.len]     = '\0';
   recref_bill_doc_number.arr[recref_bill_doc_number.len]           = '\0';
   recref_customer_code.arr[recref_customer_code.len]               = '\0';
   recref_cash_counter_code.arr[recref_cash_counter_code.len]       = '\0';
   recref_shift_id.arr[recref_shift_id.len]                         = '\0';
   recref_doc_amt.arr[recref_doc_amt.len]                           = '\0';
   recref_doc_amt_negative.arr[recref_doc_amt_negative.len]         = '\0';
   recref_recpt_type_code.arr[recref_recpt_type_code.len]           = '\0';
   recref_slmt_type_code .arr[recref_slmt_type_code .len]           = '\0';
   recref_slmt_doc_ref_desc.arr[recref_slmt_doc_ref_desc.len]       = '\0';
   recref_slmt_doc_ref_date.arr[recref_slmt_doc_ref_date.len]       = '\0';
   recref_slmt_doc_remarks.arr[recref_slmt_doc_remarks.len]         = '\0';
   recref_bank_recon_ref .arr[recref_bank_recon_ref .len]           = '\0';
   recref_print_flag.arr[recref_print_flag.len]                     = '\0';
   recref_cancelled_ind.arr[recref_cancelled_ind.len]               = '\0';
   recref_posted_ind.arr[recref_posted_ind.len]                     = '\0';
   recref_narration.arr[recref_narration.len]                       = '\0';
   recref_cons_receipt_yn.arr[recref_cons_receipt_yn.len]	    = '\0';

   if(!recref_trx_type_code.arr[0]) 
   {
	if(recref_recpt_refund_ind.arr[0] == 'R')
	   strcpy(recref_trx_type_code.arr,"5");
	else if(recref_recpt_refund_ind.arr[0] == 'F')
	   strcpy(recref_trx_type_code.arr,"6");

	recref_trx_type_code.len = strlen(recref_trx_type_code.arr);
   }

   strcpy(recref_narration.arr,c_narration.arr);
   recref_narration.len = strlen(c_narration.arr);
}


fetch_bill_dtls()
{
    t_doc_type_code.arr[0]  = '\0';
    t_doc_num.arr[0]  = '\0';
    t_doc_date.arr[0]  = '\0';
    t_overall_int_code.arr[0] = '\0';
    t_bill_type_code.arr[0]   = '\0';
    t_tot_disc_char.arr[0]   = '\0';
    t_tot_disc_nega.arr[0]   = '\0';
    t_bill_print_flag.arr[0] = '\0';

    t_episode_type.arr[0]  = '\0';
    t_patient_id.arr[0]  = '\0';
    t_episode_id.arr[0]  = '\0';
    t_visit_id.arr[0]  = '\0';
    t_bill_trx_type_code.arr[0]  = '\0';
    t_bill_nature_code.arr[0]  = '\0';
    t_bill_tot_amt.arr[0]  = '\0';
    t_bill_tot_outst_amt.arr[0]  = '\0';
    t_prv_bill_tot_outst_amt.arr[0]  = '\0';
    t_added_by_id.arr[0]  = '\0';
    t_modified_by_id.arr[0]  = '\0';
    t_added_date.arr[0]  = '\0';
    t_modified_date.arr[0]  = '\0';

    t_doc_type_code.len     = 0;
    t_doc_num.len     = 0;
    t_doc_date.len     = 0;
    t_overall_int_code.len  = 0;
    t_bill_type_code.len    = 0;
    t_tot_disc_char.len     = 0;
    t_tot_disc_nega.len     = 0;

    t_episode_type.len     = 0;
    t_patient_id.len     = 0;
    t_episode_id.len     = 0;
    t_visit_id.len     = 0;
    t_bill_trx_type_code.len     = 0;
    t_bill_nature_code.len     = 0;
    t_bill_tot_amt.len     = 0;
    t_bill_tot_outst_amt.len     = 0;
    t_prv_bill_tot_outst_amt.len     = 0;
    t_added_by_id.len     = 0;
    t_modified_by_id.len     = 0;
    t_added_date.len     = 0;
    t_modified_date.len     = 0;

    t_bill_drfee_tot_amt = 0;
    t_man_disc_amt       = 0;
    t_overall_disc_amt   = 0;
    t_bill_print_flag.len = 0;
   
    t_bill_posted_flag = '\0';

    EXEC SQL SELECT  EPISODE_TYPE,
		     PATIENT_ID,
		     NVL(EPISODE_ID,0),
		     NVL(VISIT_ID,1),
		     BILL_TRX_TYPE_CODE,
		     BILL_NATURE_CODE,
		     BILL_TOT_AMT,
		     BILL_TOT_OUTST_AMT,
		     BILL_PRV_OUTST_AMT,
		     ADDED_BY_ID,
		     MODIFIED_BY_ID,
		     TO_CHAR(ADDED_DATE,'DD/MM/YYYY'),
		     TO_CHAR(MODIFIED_DATE,'DD/MM/YYYY'),
		     DOC_TYPE_CODE,
		     DOC_NUM,
		     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
		     NVL(MAN_DISC_AMT,0),
		     NVL(OVERALL_DISC_AMT,0),
		     OVR_DISC_ACC_INT_CODE,
                     BILL_TYPE_CODE,
                     NVL(MAN_DISC_AMT,0) + NVL(OVERALL_DISC_AMT,0),
                     (NVL(MAN_DISC_AMT,0) + NVL(OVERALL_DISC_AMT,0)) * -1,
		     NVL(BILL_DRFEE_AMT,0),
		     NVL(BILL_POSTED_FLAG,'N'),
		     CASH_CTRL_DOC_TYPE_CODE,   
		     CASH_CTRL_DOC_NUMBER,           
		     CASH_CTRL_DOC_DATE ,
		     BILL_ROUNDING_AMT,
		     NVL(BILL_PRINT_FLAG,'N')
	     INTO  :t_episode_type,
                   :t_patient_id,
                   :t_episode_id,
                   :t_visit_id,
                   :t_bill_trx_type_code,
                   :t_bill_nature_code,
                   :t_bill_tot_amt,
                   :t_bill_tot_outst_amt,
                   :t_prv_bill_tot_outst_amt,
                   :t_added_by_id,
                   :t_modified_by_id,
                   :t_added_date,
                   :t_modified_date,
	           :t_doc_type_code,
		   :t_doc_num,
		   :t_doc_date,
                   :t_man_disc_amt,
                   :t_overall_disc_amt,
                   :t_overall_int_code,
                   :t_bill_type_code,
                   :t_tot_disc_char,
                   :t_tot_disc_nega,
		   :t_bill_drfee_tot_amt,
		   :t_bill_posted_flag,
		   nd_doc_type,
		   :nd_doc_num,                     
		   :nd_doc_date,
		   :t_round_amt,
		   :t_bill_print_flag
	     FROM   BL_BILL_HDR
	     WHERE   DOC_TYPE_CODE = :c_doc_type_code
	     AND     DOC_NUM       = :c_doc_number
	     AND     OPERATING_FACILITY_ID = :nd_operating_facility_id;

    if(OERROR)
	err_mesg("FETCH failed on table T_BILL_HDR_CUR",0,"");

  	if(NO_DATA_FOUND)
		{  
	 sprintf(string_var,"Record - %s/%s not found in BL_BILL_HDR",c_doc_type_code.arr,c_doc_number.arr);
	         err_mesg(string_var,0,"");
 		}   


    t_doc_type_code.arr[t_doc_type_code.len]  = '\0';
    t_doc_num.arr[t_doc_num.len]  = '\0';
    t_doc_date.arr[t_doc_date.len]  = '\0';
    t_overall_int_code.arr[t_overall_int_code.len] = '\0';
    t_bill_type_code.arr[t_bill_type_code.len] = '\0';
    t_tot_disc_char.arr[t_tot_disc_char.len] = '\0';
    t_tot_disc_nega.arr[t_tot_disc_nega.len] = '\0';
    t_episode_type.arr[t_episode_type.len]  = '\0';
    t_patient_id.arr[t_patient_id.len]  = '\0';
    t_episode_id.arr[t_episode_id.len]  = '\0';
    t_visit_id.arr[t_visit_id.len]  = '\0';
    t_bill_trx_type_code.arr[t_bill_trx_type_code.len]  = '\0';
    t_bill_nature_code.arr[t_bill_nature_code.len]  = '\0';
    t_bill_tot_amt.arr[t_bill_tot_amt.len]  = '\0';
    t_bill_tot_outst_amt.arr[t_bill_tot_outst_amt.len]  = '\0';
    t_prv_bill_tot_outst_amt.arr[t_prv_bill_tot_outst_amt.len]  = '\0';
    t_added_by_id.arr[t_added_by_id.len]  = '\0';
    t_modified_by_id.arr[t_modified_by_id.len]  = '\0';
    t_added_date.arr[t_added_date.len]  = '\0';
    t_modified_date.arr[t_modified_date.len]  = '\0';
    t_bill_print_flag.arr[t_bill_print_flag.len] = '\0';
   

	//  GANESH

	if(g_error) 
	  do_rollback();

      EXEC SQL SAVEPOINT LAST_DOC_REF;

      if (OERROR)
         err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

      g_savepoint = 1;

//  GANESH

	//This procedure is only called by cancelled bills function.
	//Commented by Harish on 08/01/2004.
	upd_reasons_in_receipt_refund_for_unposting(4);

      if (nd_reason_text.arr[0] != '\0')
         return;


    if(t_bill_posted_flag != 'Y') 
	{
        post_discounts(0);
	if (g_error) return; // Added new

        EXEC SQL UPDATE BL_BILL_HDR
		SET BILL_POSTED_FLAG		= 'Y',
		UNPOSTED_REASON			= NULL,
		MODIFIED_BY_ID			= user,
		MODIFIED_DATE			= SYSDATE,
		ADDED_AT_WS_NO			= :nd_ws_no,
		ADDED_FACILITY_ID		= :nd_operating_facility_id,
		MODIFIED_AT_WS_NO		= :nd_ws_no,
		MODIFIED_FACILITY_ID	= :nd_operating_facility_id
		WHERE  DOC_TYPE_CODE			= :t_doc_type_code
		 AND  DOC_NUM					= :t_doc_num;

	    if(OERROR)
	        err_mesg("UPDATE failed on table BL_BILL_HDR",0,"");

    }

}

log_mesg(l_errmsg,l_errtype,l_errid)
int l_errtype;
char l_errmsg[],
     l_errid[];
/*  l_errtype = 1 for application errors  */
/*            = 0 for oracle errors       */
{
        char l_msg_desc[70],l_message_text[80];

	long l_sqlcode;
	char app_err_msg[79];

	l_sqlcode = sqlca.sqlcode;
	app_err_msg[0]='\0';

	if(l_errtype)  {
	     
		if(get_message(l_errid,l_msg_desc) == -1) 
		    disp_message(INFO_MESG,l_msg_desc);
		else {
		    strcpy(app_err_msg,"APP-");
		    strncat(app_err_msg,l_errid,6);
		    strncat(app_err_msg,"-",1);
		    strncat(app_err_msg,l_msg_desc,68);
		    disp_message(INFO_MESG,app_err_msg);
		}

	}
	else  
      g_error = 1;
      if(g_savepoint) {
          EXEC SQL ROLLBACK WORK TO SAVEPOINT LAST_DOC_REF;
          if (OERROR)
             err_mesg("ROLLBACK TO LAST_DOC_REF failed 2",0,""); 
          g_savepoint = 0;
      }
      else {
          EXEC SQL ROLLBACK WORK;
          if (OERROR)
             err_mesg("ROLLBACK failed",0,""); 
      }
      return(0);   
}



post_cash_control_rcpts()
{

EXEC SQL EXECUTE
BEGIN
	BL_CASH_CONTROL_GL_POSTING(
		:nd_operating_facility_id,
		:nd_ws_no,
		:nd_date, 
		user,
		:nd_error_level,
		:nd_sys_message_id,
		:nd_error_text);
END;
END-EXEC;       

if (nd_error_text.arr[0])
	disp_message(ERR_MESG,nd_error_text.arr);

}


post_dr_share()
{

EXEC SQL EXECUTE
BEGIN
BL_INSERT_DR_SHARE(:nd_operating_facility_id,:t_doc_type_code,:t_doc_num,:nd_date,:nd_ws_no, user);

END;
END-EXEC;

}

post_rounding_amt(cancel_flg)
int cancel_flg;
{

/*************** GL Posting of Bill Discounts  G Sriram ***********/
     if(cancel_flg) 
		{
		strcpy(t_doc_date.arr,c_post_date.arr);
		t_doc_date.len = strlen(t_doc_date.arr);
		}

        if (t_round_amt != 0)
          {
           t_bill_type_int_code.arr[0] = '\0';
           t_bill_type_int_code.len    = 0;
           EXEC SQL SELECT B.BL_RECV_ACC_INT_CODE,B.BL_ROUNDING_ACC_INT_CODE
                    INTO :t_bill_type_int_code, :t_round_int_code
             FROM BL_BILL_TYPE A, BL_BILL_TYPE_INT B
             WHERE A.BILL_TYPE_CODE = :t_bill_type_code
	     AND A.ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
	     			     WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
	     AND A.ACC_ENTITY_CODE = B.ACC_ENTITY_CODE
	     AND A.BILL_TYPE_CODE = B.BILL_TYPE_CODE
	     AND TO_DATE(:t_doc_date,'DD/MM/YYYY') between 
		      NVL(B.EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(B.EFF_TO_DATE,SYSDATE)   /* Effective date range is included ON 01/06/2004 */
	    ;

            if(OERROR)
	       err_mesg("SELECT failed on table BL_BILL_TYPE",0,"");

	    if(NO_DATA_FOUND)
	       {
	       sprintf(msg_str,"Record %s not found in BL_BILL_TYPE_INT",t_bill_type_code.arr);	 
	       //err_mesg(msg_str,0,"");
	       loc_log_msg(msg_str);
	       g_error = 1;
	       return;
	       }
	       

            t_bill_type_int_code.arr[t_bill_type_int_code.len] = '\0';
            t_round_int_code.arr[t_round_int_code.len] = '\0';

           xxxxxx_main_acc1_code.arr[0]     = '\0';
           xxxxxx_main_acc2_code.arr[0]     = '\0';
           xxxxxx_dept_code.arr[0]     = '\0';
           xxxxxx_subledger_group_code.arr[0] = '\0';
           xxxxxx_subledger_line_code.arr[0] = '\0';
           xxxxxx_product_group_code.arr[0] = '\0';
           xxxxxx_product_line_code.arr[0] = '\0';

           xxxxxx_main_acc1_code.len                 = 0;
           xxxxxx_main_acc2_code.len                 = 0;
           xxxxxx_dept_code.len                      = 0;
           xxxxxx_subledger_group_code.len           = 0;
           xxxxxx_subledger_line_code.len           = 0;
           xxxxxx_product_group_code.len           = 0;
           xxxxxx_product_line_code.len           = 0;

           EXEC SQL SELECT MAIN_ACC1_CODE,
                  MAIN_ACC2_CODE,
                  DEPT_CODE,
                  SUBLEDGER_GROUP_CODE,
                  SUBLEDGER_LINE_CODE,
                  PRODUCT_GROUP_CODE,
                  PRODUCT_LINE_CODE     INTO
                  :xxxxxx_main_acc1_code,
                  :xxxxxx_main_acc2_code,
                  :xxxxxx_dept_code,
                  :xxxxxx_subledger_group_code,
                  :xxxxxx_subledger_line_code,
                  :xxxxxx_product_group_code,
                  :xxxxxx_product_line_code
                FROM BL_GL_ACCOUNT
                WHERE ACC_INT_CODE = :t_bill_type_int_code
	        AND   ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);


            if(OERROR)
			{
			 //disp_message(ERR_MESG,t_bill_type_int_code.arr);
			 //disp_message(ERR_MESG, " 5 ");

	       err_mesg("SELECT failed on table BL_GL_ACCOUNT",0,"");
		   }

	   if(NO_DATA_FOUND)
		{  
			 sprintf(string_var,"Record %s - %s not found in BL_GL_ACCOUNT",t_bill_type_code.arr, t_bill_type_int_code.arr);
	         err_mesg(string_var,0,"");
 		}   


             xxxxxx_main_acc1_code.arr[xxxxxx_main_acc1_code.len] = '\0';
             xxxxxx_main_acc2_code.arr[xxxxxx_main_acc2_code.len] = '\0';
             xxxxxx_dept_code.arr[xxxxxx_dept_code.len]           = '\0';
             xxxxxx_subledger_group_code.arr[xxxxxx_subledger_group_code.len] = '\0';
             xxxxxx_subledger_line_code.arr[xxxxxx_subledger_line_code.len] = '\0';
             xxxxxx_product_group_code.arr[xxxxxx_product_group_code.len] = '\0';
             xxxxxx_product_line_code.arr[xxxxxx_product_line_code.len] = '\0';

           //KGA 
           if  (cancel_flg)
             sprintf(xxxxxx_doc_amt.arr,"%f",(-1)*t_round_amt);
          else
	     sprintf(xxxxxx_doc_amt.arr,"%f",t_round_amt);

           xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

            ins_blgl_distrib_bl();

           xxxxxx_main_acc1_code.arr[0]     = '\0';
           xxxxxx_main_acc2_code.arr[0]     = '\0';
           xxxxxx_dept_code.arr[0]     = '\0';
           xxxxxx_subledger_group_code.arr[0] = '\0';
           xxxxxx_subledger_line_code.arr[0] = '\0';
           xxxxxx_product_group_code.arr[0] = '\0';
           xxxxxx_product_line_code.arr[0] = '\0';

           xxxxxx_main_acc1_code.len                 = 0;
           xxxxxx_main_acc2_code.len                 = 0;
           xxxxxx_dept_code.len                      = 0;
           xxxxxx_subledger_group_code.len           = 0;
           xxxxxx_subledger_line_code.len           = 0;
           xxxxxx_product_group_code.len           = 0;
           xxxxxx_product_line_code.len           = 0;

           EXEC SQL SELECT MAIN_ACC1_CODE,
                  MAIN_ACC2_CODE,
                  DEPT_CODE,
                  SUBLEDGER_GROUP_CODE,
                  SUBLEDGER_LINE_CODE,
                  PRODUCT_GROUP_CODE,
                  PRODUCT_LINE_CODE     INTO
                  :xxxxxx_main_acc1_code,
                  :xxxxxx_main_acc2_code,
                  :xxxxxx_dept_code,
                  :xxxxxx_subledger_group_code,
                  :xxxxxx_subledger_line_code,
                  :xxxxxx_product_group_code,
                  :xxxxxx_product_line_code
                FROM BL_GL_ACCOUNT
                WHERE ACC_INT_CODE = :t_round_int_code
	        AND   ACC_ENTITY_CODE IN (SELECT ACC_ENTITY_CODE 
					FROM   SY_ACC_ENTITY 
					WHERE  ACC_ENTITY_ID = :nd_operating_facility_id);

            if(OERROR)
			{
			 //disp_message(ERR_MESG,t_round_int_code.arr);
			   //               disp_message(ERR_MESG, " 6 ");

	       err_mesg("SELECT failed on table BL_GL_ACCOUNT",0,"");
		   }

		if(NO_DATA_FOUND)
		{  
			
			 sprintf(string_var,"Record %s - %s not found in BL_GL_ACCOUNT",t_bill_type_code.arr, t_round_int_code.arr);
	         err_mesg(string_var,0,"");
 		}   

             xxxxxx_main_acc1_code.arr[xxxxxx_main_acc1_code.len] = '\0';
             xxxxxx_main_acc2_code.arr[xxxxxx_main_acc2_code.len] = '\0';
             xxxxxx_dept_code.arr[xxxxxx_dept_code.len]           = '\0';
			 xxxxxx_subledger_group_code.arr[xxxxxx_subledger_group_code.len] = '\0';
			 xxxxxx_subledger_line_code.arr[xxxxxx_subledger_line_code.len] = '\0';
			 xxxxxx_product_group_code.arr[xxxxxx_product_group_code.len] = '\0';
			 xxxxxx_product_line_code.arr[xxxxxx_product_line_code.len] = '\0';

     //strcpy(xxxxxx_dept_code.arr,dflt_dept_code.arr);
     //xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);
     
     //KGA 
     if  (cancel_flg)
       sprintf(xxxxxx_doc_amt.arr,"%f",t_round_amt);
     else
        sprintf(xxxxxx_doc_amt.arr,"%f",(-1)*t_round_amt);

     xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

 

             ins_blgl_distrib_bl();
    }
/*************** End of GL Posting   G Sriram *********************/
}

upd_reasons_in_receipt_refund_for_unposting(p_flag)
int p_flag ;
{
     nd_reason_text.arr[0]=  '\0';
	 nd_reason_text.len = 0;
     nd_reason_text_for_update.arr[0] = '\0';
	 nd_reason_text_for_update.len = 0;

     if (recref_cash_counter_code.arr[0] == '\0')
	 {
        strcpy(nd_reason_text.arr,"Cash counter code not available  ");
		strcpy(nd_reason_text_for_update.arr,"Cash counter code not available  ");
	 }
     else
     {   
		if (recref_shift_id.arr[0] == '\0')
        {   
			strcpy(nd_reason_text.arr,"Shift Id not available  ");     
			strcpy(nd_reason_text_for_update.arr,"Shift Id not available  ");     
        }
		else
		{
			if (nd_doc_type.arr[0] == '\0' && nd_cash_control_use_flag == 'Y')
			{   
			    //disp_message(ERR_MESG,nd_doc_type.arr);
    		    //disp_message(ERR_MESG,nd_cash_control_use_flag);

				strcpy(nd_reason_text.arr,"Cash Control Document Type not available  ");
				strcpy(nd_reason_text_for_update.arr,"Cash Control Document Type not available  ");
			} 
			else
			{
				if (nd_doc_num.arr[0] == '\0' && nd_cash_control_use_flag == 'Y')
				{
					strcpy(nd_reason_text.arr,"Cash Control Document Number not available  ");     
					strcpy(nd_reason_text_for_update.arr,"Cash Control Document Number not available  ");     
				}
				else
				{
					if (nd_doc_date.arr[0] == '\0' && nd_cash_control_use_flag == 'Y')
					{
						strcpy(nd_reason_text.arr,"Cash Control Document Date not available  ");     
						strcpy(nd_reason_text_for_update.arr,"Cash Control Document Date not available  ");     
					}
				}	
			}
		}
	}

	if ((p_flag == 1  &&  strcmp(recref_print_flag.arr,"N") == 0 )||
	    (p_flag == 4 && strcmp(t_bill_print_flag.arr ,"N") == 0 ))
	{
	 	strcpy(nd_reason_text.arr,"Document not printed  ");     
		strcpy(nd_reason_text_for_update.arr,"Document not printed  ");

	}

	nd_reason_text.len = strlen(nd_reason_text.arr);
	nd_reason_text_for_update.len = strlen(nd_reason_text_for_update.arr);

	if (nd_reason_text.arr[0] && p_flag == 1)
	{
		strcat(nd_reason_text.arr," Receipt/Refund ");
		nd_reason_text.len = strlen(nd_reason_text.arr);		
		strcat(nd_reason_text.arr,recref_doc_type_code.arr);
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr," / ");
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr,recref_doc_number.arr);
	}
	else if (nd_reason_text.arr[0] && p_flag == 2)
	{
		strcat(nd_reason_text.arr," Cancelled Bill ");
		nd_reason_text.len = strlen(nd_reason_text.arr);		
		strcat(nd_reason_text.arr,c_doc_type_code.arr);
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr," / ");
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr,c_doc_number.arr);
	}
	else if (nd_reason_text.arr[0] && p_flag == 3)
	{
		strcat(nd_reason_text.arr," Cancelled Receipt/Refund ");
		nd_reason_text.len = strlen(nd_reason_text.arr);		
		strcat(nd_reason_text.arr,c_doc_type_code.arr);
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr," / ");
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr,c_doc_number.arr);
	}
	else if (nd_reason_text.arr[0] && p_flag == 4)
	{
		strcat(nd_reason_text.arr," Bill ");
		nd_reason_text.len = strlen(nd_reason_text.arr);		
		strcat(nd_reason_text.arr,t_doc_type_code.arr);
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr," / ");
		nd_reason_text.len = strlen(nd_reason_text.arr);
		strcat(nd_reason_text.arr,t_doc_num.arr);
	}

	nd_reason_text.len = strlen(nd_reason_text.arr);

	if (nd_reason_text.arr[0])  
	{
		loc_log_msg(nd_reason_text.arr);		
	} 
	

	if (nd_reason_text.arr[0] && p_flag == 1)
	{
	   if (strcmp(recref_cons_receipt_yn.arr,"Y") == 0)
	   {

		EXEC SQL UPDATE	BL_BILLS_FOR_CONS_RECEIPT
			 SET	UNPOSTED_REASON			= :nd_reason_text_for_update,
				POSTED_IND			= 'N',  
				MODIFIED_BY_ID			= user,
				MODIFIED_DATE			= SYSDATE,
				MODIFIED_AT_WS_NO		= :nd_ws_no,
				MODIFIED_FACILITY_ID	= :nd_operating_facility_id 
			 WHERE OPERATING_FACILITY_ID	= :nd_operating_facility_id 
			 AND	DOC_TYPE_CODE			= :recref_doc_type_code
			 AND	DOC_NUMBER				= TO_NUMBER(:recref_doc_number) 
			 AND    DOC_SRNO				= TO_NUMBER(:recref_doc_srno)
			 //AND	TRUNC(DOC_DATE)			= to_date(:recref_doc_date,'DD/MM/YYYY')
			 AND    BILL_DOC_TYPE_CODE		= :recref_bill_doc_type_code
			 AND    BILL_DOC_NUM            = TO_NUMBER(:recref_bill_doc_number);

		if (OERROR)
		err_mesg("UPDATE failed on table BL_BILLS_FOR_CONS_RECEIPT",0,"");
	  }
	  else
	  {
		EXEC SQL UPDATE	BL_RECEIPT_REFUND_DTL
			 SET	UNPOSTED_REASON			= :nd_reason_text_for_update,
				POSTED_IND			= 'N',  
				MODIFIED_BY_ID			= user,
				MODIFIED_DATE			= SYSDATE,
				MODIFIED_AT_WS_NO		= :nd_ws_no,
				MODIFIED_FACILITY_ID	= :nd_operating_facility_id 
			 WHERE OPERATING_FACILITY_ID	= :nd_operating_facility_id 
			 AND	DOC_TYPE_CODE			= :recref_doc_type_code
			 AND	DOC_NUMBER			= TO_NUMBER(:recref_doc_number) 
			 AND    DOC_SRNO            = TO_NUMBER(:recref_doc_srno)
			 AND	trunc(DOC_DATE)			= to_date(:recref_doc_date,'DD/MM/YYYY') ;

		if (OERROR)
		err_mesg("UPDATE failed on table BL_RECEIPT_REFUND_DTL",0,"");
	 }
	 
	}


	if (nd_reason_text.arr[0] && p_flag == 2)
	{
		EXEC SQL UPDATE	BL_CANCELLED_BILLS
					SET	UNPOSTED_REASON			= :nd_reason_text_for_update,
						POSTED_IND				= 'N',  
						MODIFIED_BY_ID			= user,
						MODIFIED_DATE			= SYSDATE,
						MODIFIED_AT_WS_NO		= :nd_ws_no,
						MODIFIED_FACILITY_ID	= :nd_operating_facility_id 
				  WHERE	OPERATING_FACILITY_ID	= :nd_operating_facility_id 
    				AND	DOC_TYPE_CODE			= :c_doc_type_code
					AND	DOC_NUMBER				= TO_NUMBER(:c_doc_number);

		if (OERROR)
			err_mesg("UPDATE failed on table BL_CANCELLED_BILLS",0,"");
	}

	if (nd_reason_text.arr[0] && p_flag == 3)
	{
	      if (strcmp(c_cons_rec_yn.arr,"Y") == 0)
	      {
			EXEC SQL  UPDATE BL_BILLS_FOR_CONS_RCPT_CANC
				 SET UNPOSTED_REASON        = :nd_reason_text_for_update,
				 POSTED_IND             = 'N',  
				 MODIFIED_BY_ID         = user,
				 MODIFIED_DATE          = SYSDATE,
				 MODIFIED_AT_WS_NO	= :nd_ws_no,
				 MODIFIED_FACILITY_ID   = :nd_operating_facility_id 
			         WHERE OPERATING_FACILITY_ID  = :nd_operating_facility_id 
				 AND DOC_TYPE_CODE	= :c_doc_type_code
				 AND DOC_NUMBER		= TO_NUMBER(:c_doc_number)
				 AND DOC_SRNO       = TO_NUMBER(:c_doc_srno)
				 AND BILL_DOC_TYPE_CODE = :c_bill_doc_type_code
				 AND BILL_DOC_NUM = TO_NUMBER(:c_bill_doc_num);	
		if (OERROR)
		err_mesg("UPDATE failed on table BL_BILLS_FOR_CONS_RCPT_CANC",0,"");
	      }
	      else
	      {
			EXEC SQL UPDATE BL_CANCELLED_BOUNCED_TRX
				 SET UNPOSTED_REASON    = :nd_reason_text_for_update,
				 POSTED_IND             = 'N',  
				 MODIFIED_BY_ID         = user,
				 MODIFIED_DATE          = SYSDATE,
				 MODIFIED_AT_WS_NO	= :nd_ws_no,
				 MODIFIED_FACILITY_ID   = :nd_operating_facility_id 
			         WHERE OPERATING_FACILITY_ID  = :nd_operating_facility_id 
				 AND DOC_TYPE_CODE	= :c_doc_type_code
				 AND DOC_NUMBER		= TO_NUMBER(:c_doc_number)
				 AND DOC_SRNO       = TO_NUMBER(:c_doc_srno);		  
		if (OERROR)
		err_mesg("UPDATE failed on table BL_CANCELLED_BOUNCED_TRX",0,"");
		}

	 
	}

	if (nd_reason_text.arr[0] && p_flag == 4)
	{
		EXEC SQL UPDATE BL_BILL_HDR
				    SET UNPOSTED_REASON			= :nd_reason_text_for_update,
						BILL_POSTED_FLAG		= 'N',  
						MODIFIED_BY_ID			= user,
						MODIFIED_DATE			= SYSDATE,
						MODIFIED_AT_WS_NO		= :nd_ws_no,
						MODIFIED_FACILITY_ID	= :nd_operating_facility_id 
				  WHERE OPERATING_FACILITY_ID	= :nd_operating_facility_id 
					AND DOC_TYPE_CODE			= :t_doc_type_code
					AND DOC_NUM					= TO_NUMBER(:t_doc_num);		  

	 if (OERROR)
		err_mesg("UPDATE failed on table BL_BILL_HDR",0,"");
	}  
}

 
loc_log_msg(str)
char str[];
{
	  disp_message(INFO_MESG,str);
  
	  if (strlen(str) > 70)
		  str[70] = '\0';
  
	  if (err_ctr == 0)
	  continue_to_next_ref();
  
	  log_err_mesg(str,0,"");
	  err_ctr++;
}  

lock_msg(str)
char str[];
{
  if (strlen(str) > 70)
      str[70] = '\0';
  log_err_mesg(str,0,"");
}

continue_to_next_ref()
{
    EXEC SQL ROLLBACK WORK TO SAVEPOINT LAST_DOC_REF;

    if (OERROR)
		err_mesg("ROLLBACK TO LAST_DOC_REF failed 3",0,""); 
}

upd_recref_unpost_reason()
{
EXEC SQL EXECUTE 
DECLARE
PRAGMA AUTONOMOUS_TRANSACTION;
BEGIN
	UPDATE	BL_RECEIPT_REFUND_DTL
		 SET	UNPOSTED_REASON			= SUBSTR(:msg_str_var,1,50)		
		 WHERE	OPERATING_FACILITY_ID		= :nd_operating_facility_id 
		 AND	DOC_TYPE_CODE			= :recref_doc_type_code
		 AND	DOC_NUMBER			= TO_NUMBER(:recref_doc_number) 
		 AND    DOC_SRNO            = TO_NUMBER(:recref_doc_srno)
		 AND	trunc(DOC_DATE)			= to_date(:recref_doc_date,'DD/MM/YYYY');
	commit;
END;
END-EXEC; 
}


get_acc_int_code()
{
		ae_adj_exempt_acc_int_code.arr[0] = '\0';
		ae_adj_exempt_acc_int_code.len = 0;

		EXEC SQL SELECT DECODE(:ae_adjust_exempt_ind,'E',EXEMPTION_RECV_ACC_INT_CODE,
				                             'A',ADJUSTMENT_RECV_ACC_INT_CODE)
		INTO :ae_adj_exempt_acc_int_code
		FROM BL_BILL_TYPE_INT
		WHERE ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
		AND BILL_TYPE_CODE  = :ae_bill_type_code
		AND to_date(:ae_doc_date,'DD/MM/YYYY') between 
		    NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
		AND NVL(EFF_TO_DATE,SYSDATE);


		if (ROW_COUNT == 0)    
		{	   
		      sprintf(msg_str,"Record for %s - %s not found in BL_BILL_TYPE_INT",
				  nd_operating_facility_id.arr,
				  ae_bill_type_code.arr);
				  
		      loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		}		

	       if (strcmp(ae_adj_exempt_acc_int_code.arr, "\0")==0) 	
		   {
                     if (ae_adjust_exempt_ind.arr[0] == 'A' )
			sprintf(msg_str,"Adjustment Account code is not defined for Bill Type %s",
				  ae_bill_type_code.arr);
		     else
			sprintf(msg_str,"Exemption Account code is not defined for Bill Type %s",
				  ae_bill_type_code.arr);
				  
		     loc_log_msg(msg_str);	   
		     g_error = 1;
		     return;
		   }
		   ae_adj_exempt_acc_int_code.arr[ae_adj_exempt_acc_int_code.len] = '\0';
}


get_acc_int_code_by_payer()
{
		ae_adj_exempt_acc_int_code.arr[0] = '\0';
		ae_adj_exempt_acc_int_code.len = 0;

		EXEC SQL SELECT DECODE(:ae_adjust_exempt_ind,'E',EXEMPTION_RECV_ACC_INT_CODE,
				                             'A',ADJUSTMENT_RECV_ACC_INT_CODE)
		INTO :ae_adj_exempt_acc_int_code
		FROM BL_BILL_TYPE_BY_PAYER_INT
		WHERE ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
					   WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
		AND BILL_TYPE_CODE  = :ae_bill_type_code AND CUST_CODE = :ae_cust_code
		AND to_date(:ae_doc_date,'DD/MM/YYYY') between 
		    NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
		AND NVL(EFF_TO_DATE,SYSDATE);
     
	   ae_adj_exempt_acc_int_code.arr[ae_adj_exempt_acc_int_code.len] = '\0';
}



void get_bank_acc_ae()
{
    bankac_main_acc1_code.arr[0]       = '\0';
    bankac_main_acc2_code.arr[0]       = '\0';
    bankac_dept_code.arr[0]            = '\0';
    bankac_subledger_group_code.arr[0] = '\0';
    bankac_subledger_line_code.arr[0]  = '\0';
    bankac_product_group_code.arr[0]   = '\0';
    bankac_product_line_code.arr[0]    = '\0';

    bankac_main_acc1_code.len         = 0;
    bankac_main_acc2_code.len         = 0;
    bankac_dept_code.len              = 0;
    bankac_subledger_group_code.len   = 0;
    bankac_subledger_line_code.len    = 0;
    bankac_product_group_code.len     = 0;
    bankac_product_line_code.len      = 0;

    
    EXEC SQL OPEN BL_GL_ACCOUNT_AE_CUR;
 
    if (OERROR)
       err_mesg("OPEN failed on BL_GL_ACCOUNT_AE_CUR",0,"");

    EXEC SQL FETCH BL_GL_ACCOUNT_AE_CUR INTO
		      :bankac_main_acc1_code ,
		      :bankac_main_acc2_code ,
		      :bankac_dept_code,
		      :bankac_subledger_group_code,
		      :bankac_subledger_line_code,
		      :bankac_product_group_code,
		      :bankac_product_line_code;
   if (OERROR) {
	log_mesg("FETCH failed on BL_GL_ACCOUNT_AE_CUR",0,"");		
	return;}

  
   if (ROW_COUNT == 0)    
        {	   
	   sprintf(msg_str,"Record for %s - %s not found in BL_GL_ACCOUNT",
			  nd_operating_facility_id.arr,
			  ae_adj_exempt_acc_int_code.arr);
			  
	   loc_log_msg(msg_str);	   
	   g_error = 1;
	   return;
       }


   bankac_main_acc1_code.arr[bankac_main_acc1_code.len]             = '\0';
   bankac_main_acc2_code.arr[bankac_main_acc2_code.len]             = '\0';
   bankac_dept_code.arr[bankac_dept_code.len]                       = '\0';
   bankac_subledger_group_code.arr[bankac_subledger_group_code.len] = '\0';
   bankac_subledger_line_code.arr[bankac_subledger_line_code.len]   = '\0';
   bankac_product_group_code.arr[bankac_product_group_code.len]     = '\0';
   bankac_product_line_code.arr[bankac_product_line_code.len]       = '\0';
}

void get_other_acc_ae(int i) /* 1 - BILL, 3 - DC */
{    
    othrac_main_acc1_code.arr[0]       = '\0';
    othrac_main_acc2_code.arr[0]       = '\0';
    othrac_dept_code.arr[0]            = '\0';
    othrac_subledger_group_code.arr[0] = '\0';
    othrac_subledger_line_code.arr[0]  = '\0';
    othrac_product_group_code.arr[0]   = '\0';
    othrac_product_line_code.arr[0]    = '\0';

    othrac_main_acc1_code.len         = 0;
    othrac_main_acc2_code.len         = 0;
    othrac_dept_code.len              = 0;
    othrac_subledger_group_code.len   = 0;
    othrac_subledger_line_code.len    = 0;
    othrac_product_group_code.len     = 0;
    othrac_product_line_code.len      = 0;

    switch (i) {
    case 1: 

        EXEC SQL OPEN BL_GL_ACCOUNT_OTHER_AE_BL_CUR;
 
        if (OERROR)
	{
       log_mesg("OPEN failed on BL_GL_ACCOUNT_OTHER_AE_BL_CUR",0,"");
	   return;
	}

        EXEC SQL FETCH BL_GL_ACCOUNT_OTHER_AE_BL_CUR INTO
		:othrac_main_acc1_code,
		:othrac_main_acc2_code,
		:othrac_dept_code,
		:othrac_subledger_group_code,
		:othrac_subledger_line_code,
		:othrac_product_group_code,
		:othrac_product_line_code;

        if (OERROR) 
	{
           log_mesg("FETCH failed on BL_GL_ACCOUNT_OTHER_AE_BL_CUR",0,"");
	   return;
	}
        if (ROW_COUNT == 0)    
        {

	   nd_dcp_bill_type_code.arr[0] = '\0';
	   nd_dcp_bill_type_code.len = 0;

	   EXEC SQL SELECT BILL_TYPE_CODE INTO :nd_dcp_bill_type_code 
	   FROM BL_BILL_HDR
	   WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	   AND DOC_TYPE_CODE = :ae_adj_doc_type_code
	   AND DOC_NUM = :ae_adj_doc_num;

	   nd_dcp_bill_type_code.arr[nd_dcp_bill_type_code.len] = '\0';

	   if (OERROR)
	   {
		log_mesg("FETCH failed on BL_BILL_HDR",0,"");
		return;
	   }

	   if (ROW_COUNT == 0)
	   {
		sprintf(msg_str,"Record for %s - %s not found in BL_BILL_HDR",
				 ae_adj_doc_type_code.arr,
				 ae_adj_doc_num.arr);				
	   }	
	   else
	   {
		sprintf(msg_str,"SELECT failed for Bill Type %s - %s in BL_GL_ACCOUNT for the bill document %s - %s",
				 nd_operating_facility_id.arr,
				 nd_dcp_bill_type_code.arr,
				 ae_adj_doc_type_code.arr,
				 ae_adj_doc_num.arr);						
	   }		  


			  
	   loc_log_msg(msg_str);	   
	   g_error = 1;
	   return;
       }

         EXEC SQL CLOSE BL_GL_ACCOUNT_OTHER_BL_CUR;
         break;
    
    case 3: 

        EXEC SQL OPEN BL_GL_ACCOUNT_OTHER_AE_DC_CUR;
 
        if (OERROR) {
           log_mesg("OPEN failed on BL_GL_ACCOUNT_OTHER_AE_DC_CUR",0,"");
	   return;
	}

        EXEC SQL FETCH BL_GL_ACCOUNT_OTHER_AE_DC_CUR INTO
                          :othrac_main_acc1_code ,
                          :othrac_main_acc2_code ,
                          :othrac_dept_code,
                          :othrac_subledger_group_code,
                          :othrac_subledger_line_code,
                          :othrac_product_group_code,
                          :othrac_product_line_code;

        if (OERROR) {
           log_mesg("FETCH failed on BL_GL_ACCOUNT_OTHER_AE_DC_CUR",0,"");
	   return;
	}
	

	if (ROW_COUNT == 0)
	{
		
		nd_dcp_bill_type_code.arr[0] = '\0';
		nd_dcp_bill_type_code.len = 0;

		EXEC SQL SELECT BILL_TYPE_CODE INTO :nd_dcp_bill_type_code 
		FROM BL_BILL_HDR
		WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		AND DOC_TYPE_CODE = :ae_adj_doc_type_code
		AND DOC_NUM = :ae_adj_doc_num;	

		if (OERROR)
		{
			log_mesg("FETCH failed on BL_BILL_HDR",0,"");
			return;
		}

		nd_dcp_bill_type_code.arr[nd_dcp_bill_type_code.len] = '\0';

		if (ROW_COUNT == 0)
		{
		sprintf(msg_str,"Record for %s - %s not found in BL_BILL_HDR",
				 ae_adj_doc_type_code.arr,
				 ae_adj_doc_num.arr);				
		}	
		else
		{
			sprintf(msg_str,"SELECT failed for Bill Type %s - %s in BL_GL_ACCOUNT for the DCP document %s - %s",
				 nd_operating_facility_id.arr,
				 nd_dcp_bill_type_code.arr,
				 ae_adj_doc_type_code.arr,
				 ae_adj_doc_num.arr);								
		}	
			
		

	   loc_log_msg(msg_str);
	   g_error = 1;	   
	   return;
	}

        EXEC SQL CLOSE BL_GL_ACCOUNT_OTHER_DC_CUR;
        break;
    }

    othrac_main_acc1_code.arr[othrac_main_acc1_code.len]             = '\0';
    othrac_main_acc2_code.arr[othrac_main_acc2_code.len]             = '\0';
    othrac_dept_code.arr[othrac_dept_code.len]                       = '\0';
    othrac_subledger_group_code.arr[othrac_subledger_group_code.len] = '\0';
    othrac_subledger_line_code.arr[othrac_subledger_line_code.len]   = '\0';
    othrac_product_group_code.arr[othrac_product_group_code.len]     = '\0';
    othrac_product_line_code.arr[othrac_product_line_code.len]       = '\0';
}

void open_bl_bill_adj_exempt_cur()
{
   EXEC SQL OPEN BL_BILL_ADJ_EXEMPT_CUR;
   if (OERROR)
       err_mesg("OPEN failed on cursor BL_BILL_ADJ_EXEMPT_CUR",0,"");
}

void open_bl_bill_adj_canc_cur()
{
   EXEC SQL OPEN BL_BILL_ADJ_EXEMPT_CANC_CUR;
   if (OERROR)
       err_mesg("OPEN failed on cursor BL_BILL_ADJ_EXEMPT_CANC_CUR",0,"");
}



int fetch_bl_bill_adj_exempt_cur()
{
       ae_rowid.arr[0] = '\0';
       ae_doc_type_code.arr[0] = '\0';                   	       	                                      
       ae_doc_num.arr[0] = '\0';
       ae_doc_date.arr[0] = '\0';                                
       ae_adj_exempt_acc_int_code.arr[0] = '\0';                
       ae_adjust_exempt_ind.arr[0] = '\0';                      
       ae_posted_ind.arr[0] = '\0';	                                    	       
       ae_unposted_reason.arr[0] = '\0';                        
       ae_episode_type.arr[0] = '\0';
       ae_adj_doc_type_code.arr[0] = '\0';
       ae_adj_doc_num.arr[0] = '\0';
       ae_adj_doc_date.arr[0] = '\0';
       ae_remarks.arr[0] = '\0';
       ae_bill_dcp_ind.arr[0] = '\0';
       ae_trx_type_code.arr[0] = '\0';
       
       ae_doc_amt.arr[0] = '\0';
       ae_doc_rev_amt.arr[0] = '\0';
       //ae_cancelled_ind.arr[0] = '\0';
       //ae_adj_exm_doc_ref.arr[0] = '\0';
       ae_bill_type_code.arr[0] = '\0';
       ae_cust_code.arr[0] = '\0';

       ae_rowid.len = 0;
       ae_doc_type_code.len = 0;
       ae_doc_num.len = 0;
       ae_doc_date.len = 0;
       ae_adj_exempt_acc_int_code.len = 0;
       ae_adjust_exempt_ind.len = 0;
       ae_posted_ind.len = 0;
       ae_unposted_reason.len = 0;
       ae_episode_type.len = 0;
       ae_adj_doc_type_code.len = 0;
       ae_adj_doc_num.len = 0;
       ae_adj_doc_date.len = 0;
       ae_remarks.len = 0;
       ae_bill_dcp_ind.len = 0;
       ae_trx_type_code.len = 0;
       ae_cust_code.len = 0;

       ae_doc_amt.len = 0;
       ae_doc_rev_amt.len = 0;
       //ae_cancelled_ind.len = 0;
       //ae_adj_exm_doc_ref.len = 0;
       ae_bill_type_code.len = 0;

       ae_doc_slno = 0;
       ae_post_month = 0;
       ae_post_year = 0;
       ae_episode_id = 0;
       ae_visit_id = 0;

       EXEC SQL FETCH BL_BILL_ADJ_EXEMPT_CUR INTO	       
	       ae_rowid,
	       ae_doc_type_code,                   
	       ae_doc_num,                         
	       ae_doc_slno,                               
	       ae_doc_date,                      
	       ae_doc_amt,                                
	       ae_doc_rev_amt,
	       ae_adj_exempt_acc_int_code,                
	       ae_adjust_exempt_ind,                      
	       ae_posted_ind,                             
	       ae_post_month,                             
	       ae_post_year,                              
	       ae_unposted_reason,                        
	       ae_episode_type,
	       ae_episode_id,                             
	       ae_visit_id,                               	       
	       ae_adj_doc_type_code,               
	       ae_adj_doc_num,                     
	       ae_adj_doc_date,
	       ae_remarks,                                	
	       ae_bill_dcp_ind,
	       ae_trx_type_code,
	       ae_bill_type_code,
		   ae_cust_code;

	      if (OERROR)
	      err_mesg("FETCH failed on BL_BILL_ADJ_EXEMPT_CUR",0,"");

	      if (LAST_ROW) return (0);
	       
	       ae_rowid.arr[ae_rowid.len] = '\0';
	       ae_doc_type_code.arr[ae_doc_type_code.len] = '\0';                   	       	                                      
	       ae_doc_num.arr[ae_doc_num.len] = '\0';
	       ae_doc_date.arr[ae_doc_date.len] = '\0';                                
	       ae_adj_exempt_acc_int_code.arr[ae_adj_exempt_acc_int_code.len] = '\0';                
	       ae_adjust_exempt_ind.arr[ae_adjust_exempt_ind.len] = '\0';                      
	       ae_posted_ind.arr[ae_posted_ind.len] = '\0';	                                    	       
	       ae_unposted_reason.arr[ae_unposted_reason.len] = '\0';                        
	       ae_episode_type.arr[ae_episode_type.len] = '\0';
	       ae_adj_doc_type_code.arr[ae_adj_doc_type_code.len] = '\0';
	       ae_adj_doc_num.arr[ae_adj_doc_num.len] = '\0';
	       ae_adj_doc_date.arr[ae_adj_doc_date.len] = '\0';
	       ae_remarks.arr[ae_remarks.len] = '\0';
	       ae_bill_dcp_ind.arr[ae_bill_dcp_ind.len] = '\0';	
	       ae_trx_type_code.arr[ae_trx_type_code.len] = '\0';	       
	       ae_doc_amt.arr[ae_doc_amt.len] = '\0';
	       ae_doc_rev_amt.arr[ae_doc_rev_amt.len] = '\0';
	       ae_bill_type_code.arr[ae_bill_type_code.len] = '\0';

	       ae_patient_id.arr[0] = '\0';
	       ae_cancelled_ind.arr[0] = '\0';
	       ae_adj_exm_doc_ref.arr[0] = '\0';	       

	       ae_patient_id.len = 0;
	       ae_cancelled_ind.len = 0;
	       ae_adj_exm_doc_ref.len = 0;

	       EXEC SQL SELECT A.PATIENT_ID, 'N', A.ADJ_EXM_DOC_REF
			INTO :ae_patient_id, :ae_cancelled_ind, :ae_adj_exm_doc_ref
			FROM BL_BILL_ADJ_HDR A
			WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id			
			AND A.DOC_TYPE_CODE = :ae_doc_type_code
			AND A.DOC_NUM = :ae_doc_num;

		if (OERROR)
	        err_mesg("SELECT failed on BL_BILL_ADJ_HDR",0,"");

		/* Cancelled always 'N' only */

		ae_patient_id.arr[ae_patient_id.len] = '\0';
		ae_cancelled_ind.arr[ae_cancelled_ind.len] = '\0';
	        ae_adj_exm_doc_ref.arr[ae_adj_exm_doc_ref.len] = '\0';

		return 1;
   }


int fetch_bl_bill_adj_canc_cur()
{
       ae_rowid.arr[0] = '\0';
       ae_doc_type_code.arr[0] = '\0';                   	       	                                      
       ae_doc_num.arr[0] = '\0';
       ae_doc_date.arr[0] = '\0';                                
       ae_adj_exempt_acc_int_code.arr[0] = '\0';                
       ae_adjust_exempt_ind.arr[0] = '\0';                      
       ae_posted_ind.arr[0] = '\0';	                                    	       
       ae_unposted_reason.arr[0] = '\0';                        
       ae_episode_type.arr[0] = '\0';
       ae_adj_doc_type_code.arr[0] = '\0';
       ae_adj_doc_num.arr[0] = '\0';
       ae_adj_doc_date.arr[0] = '\0';
       ae_remarks.arr[0] = '\0';
       ae_bill_dcp_ind.arr[0] = '\0';
       ae_trx_type_code.arr[0] = '\0'; 
       ae_doc_amt.arr[0] = '\0';
       ae_doc_rev_amt.arr[0] = '\0';  
       ae_bill_type_code.arr[0] = '\0';
       
       ae_rowid.len = 0;
       ae_doc_type_code.len = 0;
       ae_doc_num.len = 0;
       ae_doc_date.len = 0;
       ae_adj_exempt_acc_int_code.len = 0;
       ae_adjust_exempt_ind.len = 0;
       ae_posted_ind.len = 0;
       ae_unposted_reason.len = 0;
       ae_episode_type.len = 0;
       ae_adj_doc_type_code.len = 0;
       ae_adj_doc_num.len = 0;
       ae_adj_doc_date.len = 0;
       ae_remarks.len = 0;
       ae_bill_dcp_ind.len = 0;
       ae_trx_type_code.len = 0;
       ae_doc_amt.len = 0;
       ae_doc_rev_amt.len = 0;
       ae_bill_type_code.len = 0;
       
       ae_doc_slno = 0;
       ae_post_month = 0;
       ae_post_year = 0;
       ae_episode_id = 0;
       ae_visit_id = 0;

       EXEC SQL FETCH BL_BILL_ADJ_EXEMPT_CANC_CUR INTO	       
	       ae_rowid,
	       ae_doc_type_code,                   
	       ae_doc_num,                         
	       ae_doc_slno,                               
	       ae_doc_date,                      
	       ae_doc_amt,                                
	       ae_doc_rev_amt,
	       ae_adj_exempt_acc_int_code,                
	       ae_adjust_exempt_ind,                      
	       ae_posted_ind,                             
	       ae_post_month,                             
	       ae_post_year,                              
	       ae_unposted_reason,                        
	       ae_episode_type,
	       ae_episode_id,                             
	       ae_visit_id,                               	       
	       ae_adj_doc_type_code,               
	       ae_adj_doc_num,                     
	       ae_adj_doc_date,
	       ae_remarks,                                	
	       ae_bill_dcp_ind,
	       ae_trx_type_code,
	       ae_bill_type_code,
		   ae_cust_code;

	      if (OERROR)
	      err_mesg("FETCH failed on BL_BILL_ADJ_EXEMPT_CANC_CUR",0,"");

	      if (LAST_ROW) return (0);
	       
	       ae_rowid.arr[ae_rowid.len] = '\0';
	       ae_doc_type_code.arr[ae_doc_type_code.len] = '\0';                   	       	                                      
	       ae_doc_num.arr[ae_doc_num.len] = '\0';
	       ae_doc_date.arr[ae_doc_date.len] = '\0';                                
	       ae_adj_exempt_acc_int_code.arr[ae_adj_exempt_acc_int_code.len] = '\0';                
	       ae_adjust_exempt_ind.arr[ae_adjust_exempt_ind.len] = '\0';                      
	       ae_posted_ind.arr[ae_posted_ind.len] = '\0';	                                    	       
	       ae_unposted_reason.arr[ae_unposted_reason.len] = '\0';                        
	       ae_episode_type.arr[ae_episode_type.len] = '\0';
	       ae_adj_doc_type_code.arr[ae_adj_doc_type_code.len] = '\0';
	       ae_adj_doc_num.arr[ae_adj_doc_num.len] = '\0';
	       ae_adj_doc_date.arr[ae_adj_doc_date.len] = '\0';
	       ae_remarks.arr[ae_remarks.len] = '\0';
	       ae_bill_dcp_ind.arr[ae_bill_dcp_ind.len] = '\0';	
	       ae_trx_type_code.arr[ae_trx_type_code.len] = '\0';	       
	       ae_doc_amt.arr[ae_doc_amt.len] = '\0';
	       ae_doc_rev_amt.arr[ae_doc_rev_amt.len] = '\0';
	       ae_bill_type_code.arr[ae_bill_type_code.len] = '\0';
		   ae_cust_code.arr[ae_cust_code.len] = '\0';
		

	       ae_patient_id.arr[0] = '\0';
	       ae_cancelled_ind.arr[0] = '\0';
	       ae_adj_exm_doc_ref.arr[0] = '\0';

	       ae_patient_id.len = 0;
	       ae_cancelled_ind.len = 0;
	       ae_adj_exm_doc_ref.len = 0;
		   


	       EXEC SQL SELECT A.PATIENT_ID, NVL(A.CANCELLED_YN,'N'), A.ADJ_EXM_DOC_REF
			INTO :ae_patient_id, :ae_cancelled_ind, :ae_adj_exm_doc_ref
			FROM BL_BILL_ADJ_HDR A
			WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id			
			AND A.DOC_TYPE_CODE = :ae_doc_type_code
			AND A.DOC_NUM = :ae_doc_num;

		ae_patient_id.arr[ae_patient_id.len] = '\0';
		ae_cancelled_ind.arr[ae_cancelled_ind.len] = '\0';
	        ae_adj_exm_doc_ref.arr[ae_adj_exm_doc_ref.len] = '\0';

		return 1;
   }



   void move_into_post_acc_ae(int i /* 0 - BANK ; 1 - OTHER */)
   {
   if (i==0)
   {
    strcpy(xxxxxx_main_acc1_code.arr,bankac_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);

    strcpy(xxxxxx_main_acc2_code.arr,bankac_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);

    strcpy(xxxxxx_dept_code.arr,bankac_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);

    strcpy(xxxxxx_subledger_group_code.arr,bankac_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);

    strcpy(xxxxxx_subledger_line_code.arr,bankac_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);

    strcpy(xxxxxx_product_group_code.arr,bankac_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);

    strcpy(xxxxxx_product_line_code.arr,bankac_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    strcpy(xxxxxx_doc_amt.arr,ae_doc_amt.arr);
    xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
   }
   else
   {
    strcpy(xxxxxx_main_acc1_code.arr,othrac_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);

    strcpy(xxxxxx_main_acc2_code.arr,othrac_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);

    strcpy(xxxxxx_dept_code.arr,othrac_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);

    strcpy(xxxxxx_subledger_group_code.arr,othrac_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);

    strcpy(xxxxxx_subledger_line_code.arr,othrac_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);

    strcpy(xxxxxx_product_group_code.arr,othrac_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);

    strcpy(xxxxxx_product_line_code.arr,othrac_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    strcpy(xxxxxx_doc_amt.arr,ae_doc_rev_amt.arr);
    xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

   }
}

void ins_bldcp_trn_ae()
{
   l_dcp_trn_rec_exist = 0;   

   /* l_dcp_trn_rec_exist -> 1 means Record Exist */

   EXEC SQL SELECT 1 INTO :l_dcp_trn_rec_exist 
	    FROM BL_DCP_TRN
	    WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	    AND PATIENT_ID = :ae_patient_id
	    AND ORG_DOC_TYPE_CODE = :ae_adj_doc_type_code
            AND ORG_DOC_NUMBER = :ae_adj_doc_num 
	    AND DOC_TYPE_CODE = :ae_doc_type_code 
	    AND DOC_NUMBER = :ae_doc_num
	    AND NVL(DOC_SRL_NO,0) = NVL(:ae_doc_slno,0)
	    AND NVL(CANCELLED_ENTRY_YN,'N') = NVL(:ae_cancelled_ind,'N')
	    FOR UPDATE OF TRX_STATUS;	    

   if (NO_DATA_FOUND) 
	l_dcp_trn_rec_exist = 0;
		
   if (l_dcp_trn_rec_exist == 1)
   {
	  EXEC SQL UPDATE BL_DCP_TRN
	  SET POSTED_DATE = SYSDATE,
	      POSTED_BY_ID = USER
	  WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
	  AND PATIENT_ID = :ae_patient_id
	  AND ORG_DOC_TYPE_CODE = :ae_adj_doc_type_code
          AND ORG_DOC_NUMBER = :ae_adj_doc_num 
	  AND DOC_TYPE_CODE = :ae_doc_type_code 
	  AND DOC_NUMBER = :ae_doc_num
	  AND NVL(DOC_SRL_NO,0) = NVL(:ae_doc_slno,0)
	  AND NVL(CANCELLED_ENTRY_YN,'N') = NVL(:ae_cancelled_ind,'N');
    }
   else
   {	   
	   /* Rec/Ref fun. is inserting one record from front end. So, no need to insert record here */

	   pendoc_max_line_num.arr[0] = '\0';
	   pendoc_max_line_num.len = 0;

	   EXEC SQL SELECT ROWID, nvl(max_line_num,0) + 1
		    INTO :pendoc_rowid, :pendoc_max_line_num
		    FROM BL_DCP_PENDING_DOC
		    WHERE OPERATING_FACILITY_ID = :nd_operating_facility_id
		    AND PATIENT_ID = :ae_patient_id
		    AND ORG_DOC_TYPE_CODE = :ae_adj_doc_type_code
		    AND ORG_DOC_NUMBER = :ae_adj_doc_num;		

	   if (OERROR || NO_DATA_FOUND) 
	   {
	      log_mesg("SELECT failed on BL_DCP_PENDING_DOC",0,"");
	      return;
	   }

	   pendoc_max_line_num.arr[pendoc_max_line_num.len] = '\0';


	EXEC SQL INSERT INTO BL_DCP_TRN
		     ( OPERATING_FACILITY_ID,
		       PATIENT_ID,
		       ORG_DOC_TYPE_CODE,
		       ORG_DOC_NUMBER,
		       LINE_NUM,
		       DOC_TYPE_CODE,
		       DOC_NUMBER,
		       DOC_DATE,
		       PAT_DOC_REFERENCE,
		       DOC_NATURE_CODE,
		       DOC_AMT,
		       TRX_TYPE_CODE,
		       NARRATION,
		       POST_MONTH,
		       POST_YEAR,
		       POSTED_DATE,
		       POSTED_BY_ID,
		       ADDED_BY_ID,
		       MODIFIED_BY_ID,         
		       ADDED_DATE,             
		       MODIFIED_DATE,          
		       ADDED_AT_WS_NO,         
		       ADDED_FACILITY_ID,      
		       MODIFIED_AT_WS_NO,      
		       MODIFIED_FACILITY_ID,
		       DOC_SRL_NO,             
		       CANCELLED_ENTRY_YN )

	    VALUES   ( :nd_operating_facility_id,
		       :ae_patient_id,
		       :ae_adj_doc_type_code,
		       :ae_adj_doc_num ,
		       :pendoc_max_line_num,
		       :ae_doc_type_code,
		       :ae_doc_num,
		       TO_DATE(:ae_doc_date,'DD/MM/YYYY'),
		       substr(:ae_adj_exm_doc_ref,1,10),
		       NULL,
		       :ae_doc_rev_amt, 
		       :ae_trx_type_code,
		       substr(:ae_remarks,1,50),
		       :ae_post_month,
		       :ae_post_year,
		       sysdate,
		       user,
		       user,
		       user,
		       sysdate,
		       sysdate,
		       :nd_ws_no,
		       :nd_operating_facility_id,
		       :nd_ws_no,
		       :nd_operating_facility_id,
		       :ae_doc_slno,
		       :ae_cancelled_ind);

	   if (OERROR) {
	       log_mesg("INSERT failed on table BL_DCP_TRN",0,"");
	       return;
	   }

	   EXEC SQL UPDATE	BL_DCP_PENDING_DOC
		    SET		MAX_LINE_NUM = NVL(MAX_LINE_NUM,0) + 1,
				MODIFIED_BY_ID         = user,
				MODIFIED_DATE          = SYSDATE,
				ADDED_AT_WS_NO         = :nd_ws_no,
				ADDED_FACILITY_ID      = :nd_operating_facility_id,
				MODIFIED_AT_WS_NO      = :nd_ws_no,
				MODIFIED_FACILITY_ID   = :nd_operating_facility_id
		    WHERE	ROWID = :pendoc_rowid
		    AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

	   if (OERROR || NO_DATA_FOUND)
	   {
	      log_mesg("UPDATE failed on BL_DCP_PENDING_DOC",0,"");
	      return;
	   }
    }
}


void ins_blgl_distrib_ae()
{    
    if( (ae_episode_type.arr[0] == 'I' && d_ip_gl_yn == 'N') ||
        (ae_episode_type.arr[0] == 'D' && d_ip_gl_yn == 'N') ||
        (ae_episode_type.arr[0] == 'O' && d_op_gl_yn == 'N') ||
	(ae_episode_type.arr[0] == 'E' && d_op_gl_yn == 'N') ||
        (ae_episode_type.arr[0] == 'R' && d_rf_gl_yn == 'N') ) 

	return;	

   EXEC SQL INSERT INTO BL_GL_DISTRIBUTION 
             ( OPERATING_FACILITY_ID,	
	       MAIN_ACC1_CODE,
               MAIN_ACC2_CODE,
               DEPT_CODE,
               PRODUCT_GROUP_CODE,
               PRODUCT_LINE_CODE,
               SUBLEDGER_GROUP_CODE,
               SUBLEDGER_LINE_CODE,
               POST_YEAR,
               POST_MONTH,
               TRX_DATE,
               TRX_DOC_REF,
               TRX_DOC_REF_LINE_NUM,
               TRX_DOC_REF_SEQ_NUM,
               EPISODE_TYPE,
               PATIENT_ID,
               EPISODE_ID,
               VISIT_ID,
               SOURCE_DOC_REF,
               SOURCE_DOC_DATE,
               NARRATION,
               TRX_TYPE_CODE,
               DISTRIBUTION_AMT,
               GL_INTERFACE_BY_ID,
               GL_INTERFACE_DATE,
               GL_INTERFACE_FLAG,
               DOC_REF,
	       ADDED_BY_ID,
	       MODIFIED_BY_ID,         
	       ADDED_DATE,             
               MODIFIED_DATE,          
               ADDED_AT_WS_NO,         
               ADDED_FACILITY_ID,      
               MODIFIED_AT_WS_NO,      
               MODIFIED_FACILITY_ID,
	       CASH_CTRL_DOC_TYPE,     
	       CASH_CTRL_DOC_NUMBER,   
	       CASH_CTRL_DOC_DATE,
	       CUST_CODE      
	     )
    VALUES(    :nd_operating_facility_id,
	       :xxxxxx_main_acc1_code,
               :xxxxxx_main_acc2_code,
               :xxxxxx_dept_code,
               :xxxxxx_product_group_code,
               :xxxxxx_product_line_code,
               :xxxxxx_subledger_group_code,
               :xxxxxx_subledger_line_code,
               :ae_post_year,
               :ae_post_month,
               TO_DATE(:ae_doc_date,'DD/MM/YYYY'),
               RPAD(:ae_doc_type_code,6)||SUBSTR(TO_CHAR(to_number(:ae_doc_num),'00000009'),2,8),
               :ae_doc_slno,
               0,
               :ae_episode_type,
               :ae_patient_id,
               :ae_episode_id,
               :ae_visit_id,
               NULL,
               NULL,
               substr(:ae_remarks,1,50),
               :ae_trx_type_code,
               :xxxxxx_doc_amt,
               NULL,
               NULL,
               'N',
               null, /* :recref_bank_recon_ref, */
	       user,
	       user,
	       sysdate,
	       sysdate,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       :nd_ws_no,
	       :nd_operating_facility_id,
	       null, // :nd_doc_type,
	       null, //:nd_doc_num,
	       null, //:nd_doc_date,
	       null //:recref_customer_code
	);


   if (OERROR) 
   {
       log_mesg("INSERT failed on table BL_GL_DISTRIBUTION",0,"");
       return;
   }
}

post_bill_adj_exempt()
{
	open_bl_bill_adj_exempt_cur();
	g_error = 0;
	g_savepoint = 0;

	while(fetch_bl_bill_adj_exempt_cur())
	{
	     if(g_error) do_rollback();

	     EXEC SQL SAVEPOINT LAST_DOC_REF;
	     if (OERROR)
		err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

             g_savepoint = 1;
	     
	     get_acc_int_code();
	     if(g_error) continue;

		if (ae_cust_code.arr[0] != '\0')
		   {
		     get_acc_int_code_by_payer(); /* New Enhancement 2007 */
				if (ROW_COUNT == 0) 
				get_acc_int_code();
			}
			else
			{
			get_acc_int_code();
			}

	     get_bank_acc_ae();
	     if(g_error) continue;

	     if (ae_bill_dcp_ind.arr[0] == 'D') 
		 get_other_acc_ae(DC);
	     else
		 get_other_acc_ae(BILL);

	     if(g_error) continue;

	     move_into_post_acc_ae(BANK);
	     if (ae_bill_dcp_ind.arr[0] == 'D' )
	     {
		ins_bldcp_trn_ae();
		if(g_error) continue;
             }
             ins_blgl_distrib_ae();
	     if(g_error) continue;
             move_into_post_acc_ae(OTHER);
             ins_blgl_distrib_ae();
	     if(g_error) continue;	
	     
	     update_bill_adj_exempt();
	     if(g_error) continue;

	     EXEC SQL COMMIT;
	}
}

post_bill_adj_exempt_cancel()
{
	open_bl_bill_adj_canc_cur();
	g_error = 0;
	g_savepoint = 0;

	while(fetch_bl_bill_adj_canc_cur())
	{
	     if(g_error) do_rollback();

	     EXEC SQL SAVEPOINT LAST_DOC_REF;
	     if (OERROR)
		err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

             g_savepoint = 1;

	     get_acc_int_code();
	     if(g_error) continue;

		 if (ae_cust_code.arr[0] != '\0')
		     get_acc_int_code_by_payer(); /* New Enhancement 2007 */

	     get_bank_acc_ae();
	     if(g_error) continue;

	     if (ae_bill_dcp_ind.arr[0] == 'D') 
		get_other_acc_ae(DC);
	     else
		get_other_acc_ae(BILL);

	     if(g_error) continue;

	     move_into_post_acc_ae(BANK);
	     if (ae_bill_dcp_ind.arr[0] == 'D' )
	     {
		ins_bldcp_trn_ae();
		if(g_error) continue;
             }
             ins_blgl_distrib_ae();
	     if(g_error) continue;
             move_into_post_acc_ae(OTHER);
             ins_blgl_distrib_ae();
	     if(g_error) continue;		     
	  
	     update_bill_adj_exempt_canc();
	     if(g_error) continue;

	     EXEC SQL COMMIT;
	}
}

void update_bill_adj_exempt()
{
    EXEC SQL UPDATE BL_BILL_ADJ_DTL
	     SET POSTED_IND = 'Y',
	     UNPOSTED_REASON = NULL,
	     MODIFIED_BY_ID = USER,
	     MODIFIED_DATE  = SYSDATE,
	     ADDED_AT_WS_NO = :nd_ws_no,
	     ADDED_FACILITY_ID = :nd_operating_facility_id,
	     MODIFIED_AT_WS_NO = :nd_ws_no,
	     MODIFIED_FACILITY_ID = :nd_operating_facility_id
          WHERE ROWID = :ae_rowid;

    if (OERROR) 
       err_mesg("UPDATE failed on table BL_BILL_ADJ_DTL",0,"");
       
    if (sqlca.sqlerrd[2] == 0 )
       err_mesg("UPDATE failed on table BL_BILL_ADJ_DTL",0,"");
}

void update_bill_adj_exempt_canc()
{
    EXEC SQL UPDATE BL_BILL_ADJ_DTL_CANC
	     SET POSTED_IND = 'Y',
	     UNPOSTED_REASON = NULL,
	     MODIFIED_BY_ID = USER,
	     MODIFIED_DATE  = SYSDATE,
	     ADDED_AT_WS_NO = :nd_ws_no,
	     ADDED_FACILITY_ID = :nd_operating_facility_id,
	     MODIFIED_AT_WS_NO = :nd_ws_no,
	     MODIFIED_FACILITY_ID = :nd_operating_facility_id
          WHERE ROWID = :ae_rowid;

    if (OERROR) 
       err_mesg("UPDATE failed on table BL_BILL_ADJ_DTL_CANC",0,"");
       
    if (sqlca.sqlerrd[2] == 0 )
       err_mesg("UPDATE failed on table BL_BILL_ADJ_DTL_CANC",0,"");
}

//added by deepali on 29/08/2004

void open_bl_bill_wo_cur()
{
   EXEC SQL OPEN BL_BILL_WO_CUR;
   if (OERROR)
       err_mesg("OPEN failed on cursor BL_BILL_WO_CUR",0,"");
}

int fetch_bl_bill_wo_cur()
{
       wo_rowid.arr[0] = '\0';
       wo_doc_type_code.arr[0] = '\0';                   	       	                                      
       wo_doc_num.arr[0] = '\0';
       wo_doc_date.arr[0] = '\0';                                
       wo_posted_ind.arr[0] = '\0';	                                    	       
       wo_episode_type.arr[0] = '\0';
       wo_org_doc_type_code.arr[0] = '\0';
       wo_org_doc_num.arr[0] = '\0';
       wo_org_doc_date.arr[0] = '\0';
       wo_remarks.arr[0] = '\0';
       wo_trx_type_code.arr[0] = '\0';
       wo_bill_type_code.arr[0] = '\0';
	   wo_cust_code.arr[0] = '\0';

       wo_doc_amt.arr[0] = '\0';
       wo_doc_rev_amt.arr[0] = '\0';
       
       wo_rowid.len = 0;
       wo_doc_type_code.len = 0;
       wo_doc_num.len = 0;
       wo_doc_date.len = 0;
       wo_posted_ind.len = 0;
       wo_episode_type.len = 0;
       wo_org_doc_type_code.len = 0;
       wo_org_doc_num.len = 0;
       wo_org_doc_date.len = 0;
       wo_remarks.len = 0;
       wo_trx_type_code.len = 0;
	   wo_bill_type_code.len = 0;
	   wo_cust_code.len = 0;
	   	
       wo_doc_amt.len = 0;
       wo_doc_rev_amt.len = 0;

       wo_doc_slno = 0;
       //ae_post_month = 0;
       //ae_post_year = 0;
       wo_episode_id = 0;
       wo_visit_id = 0;


       EXEC SQL FETCH BL_BILL_WO_CUR INTO	       
	       wo_rowid,
	       wo_doc_type_code,                   
	       wo_doc_num,                         
	       wo_doc_slno,                               
	       wo_doc_date,                      
	       wo_doc_amt,                                
	       wo_doc_rev_amt,
	       wo_posted_ind,                             
	       //ae_post_month,                             
	       //ae_post_year,                              
	       //ae_unposted_reason,                        
	       wo_episode_type,
	       wo_episode_id,                             
	       wo_visit_id,                               	       
	       wo_org_doc_type_code,               
	       wo_org_num,                     
	       wo_org_doc_date,
	       wo_remarks,                                	
	       wo_trx_type_code,
		   wo_bill_type_code,
		   wo_cust_code;

	      if (OERROR)
	      err_mesg("FETCH failed on BL_BILL_WO_CUR",0,"");

	      if (LAST_ROW)
		return (0);
		
	       wo_rowid.arr[wo_rowid.len] = '\0';
	       wo_doc_type_code.arr[wo_doc_type_code.len] = '\0';                   	       	                                      
	       wo_doc_num.arr[wo_doc_num.len] = '\0';
	       wo_doc_date.arr[wo_doc_date.len] = '\0';                                
	       wo_posted_ind.arr[wo_posted_ind.len] = '\0';	                                    	       
	       wo_episode_type.arr[wo_episode_type.len] = '\0';
	       wo_org_doc_type_code.arr[wo_org_doc_type_code.len] = '\0';
	       wo_org_doc_num.arr[wo_org_doc_num.len] = '\0';
	       wo_org_doc_date.arr[wo_org_doc_date.len] = '\0';
	       wo_remarks.arr[wo_remarks.len] = '\0';
	       wo_trx_type_code.arr[wo_trx_type_code.len] = '\0';	       
		   wo_bill_type_code.arr[wo_bill_type_code.len] = '\0';
		   wo_cust_code.arr[wo_cust_code.len] = '\0';		
		   
		   wo_doc_amt.arr[wo_doc_amt.len] = '\0';
	       wo_doc_rev_amt.arr[wo_doc_rev_amt.len] = '\0';
			
	   	
		   //get control ac and write off account from BL_BILL_TYPE_INT	
		   wo_bill_recv_int_code.arr[0] = '\0';
		   wo_int_code.arr[0] = '\0';			

			
		   wo_bill_recv_int_code.len = 0;
		   wo_int_code.len = 0;			   
		   

		   EXEC SQL SELECT BL_RECV_ACC_INT_CODE, WAIVAL_RECV_ACC_INT_CODE  
					INTO   :wo_bill_recv_int_code, :wo_int_code		
					FROM   BL_BILL_TYPE_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND    to_date(:wo_doc_date,'dd/mm/yyyy')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);


		   if (ROW_COUNT == 0)    
		   {	   
		      sprintf(msg_str,"Record(WO) for %s - %s not found in BL_BILL_TYPE_INT",
				  nd_operating_facility_id.arr,
				  wo_bill_type_code.arr);
				  
		      loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }
	
		   if (strcmp(wo_int_code.arr, "\0")==0) 	
		   {
		      sprintf(msg_str,"Write Off Account code is not defined for Bill Type %s",
				  wo_bill_type_code.arr);
				  
			  loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }

		   wo_bill_recv_int_code.arr[wo_bill_recv_int_code.len] = '\0';
		   wo_int_code.arr[wo_int_code.len] = '\0';	


		 if (wo_cust_code.arr[0] != '\0')	 		/* Modified on 23-MAR-2007 for Enhancement */
		 {
		   
		   wo_int_code.arr[0] = '\0';			
		   wo_int_code.len = 0;
			 
			 EXEC SQL SELECT  WAIVAL_RECV_ACC_INT_CODE  
					INTO     :wo_int_code		
					FROM   BL_BILL_TYPE_BY_PAYER_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND	   CUST_CODE = :wo_cust_code
					AND    to_date(:wo_doc_date,'dd/mm/yyyy')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);

              wo_int_code.arr[wo_int_code.len] = '\0';	
		 }                                         /* Modified on 23-MAR-2007 for Enhancement */



		return 1;
}

void get_bank_acc_wo()
{
    bankac_main_acc1_code.arr[0]       = '\0';
    bankac_main_acc2_code.arr[0]       = '\0';
    bankac_dept_code.arr[0]            = '\0';
    bankac_subledger_group_code.arr[0] = '\0';
    bankac_subledger_line_code.arr[0]  = '\0';
    bankac_product_group_code.arr[0]   = '\0';
    bankac_product_line_code.arr[0]    = '\0';

    bankac_main_acc1_code.len         = 0;
    bankac_main_acc2_code.len         = 0;
    bankac_dept_code.len              = 0;
    bankac_subledger_group_code.len   = 0;
    bankac_subledger_line_code.len    = 0;
    bankac_product_group_code.len     = 0;
    bankac_product_line_code.len      = 0;

    
    EXEC SQL OPEN BL_GL_ACCOUNT_WO_CUR;
 
    if (OERROR)
       err_mesg("OPEN failed on BL_GL_ACCOUNT_WO_CUR",0,"");

    EXEC SQL FETCH BL_GL_ACCOUNT_WO_CUR INTO
		      :bankac_main_acc1_code ,
		      :bankac_main_acc2_code ,
		      :bankac_dept_code,
		      :bankac_subledger_group_code,
		      :bankac_subledger_line_code,
		      :bankac_product_group_code,
		      :bankac_product_line_code;
   if (OERROR) {
	log_mesg("FETCH failed on BL_GL_ACCOUNT_WO_CUR",0,"");		
	return;}

  
   if (ROW_COUNT == 0)    
        {	   
	   sprintf(msg_str,"Record for %s - %s not found in BL_GL_ACCOUNT",
			  nd_operating_facility_id.arr,
			  wo_int_code.arr);
			  
	   loc_log_msg(msg_str);	   
	   g_error = 1;
	   return;
       }


   bankac_main_acc1_code.arr[bankac_main_acc1_code.len]             = '\0';
   bankac_main_acc2_code.arr[bankac_main_acc2_code.len]             = '\0';
   bankac_dept_code.arr[bankac_dept_code.len]                       = '\0';
   bankac_subledger_group_code.arr[bankac_subledger_group_code.len] = '\0';
   bankac_subledger_line_code.arr[bankac_subledger_line_code.len]   = '\0';
   bankac_product_group_code.arr[bankac_product_group_code.len]     = '\0';
   bankac_product_line_code.arr[bankac_product_line_code.len]       = '\0';
}


void get_bank_acc_bill_recv_int()
{
    bankac_main_acc1_code.arr[0]       = '\0';
    bankac_main_acc2_code.arr[0]       = '\0';
    bankac_dept_code.arr[0]            = '\0';
    bankac_subledger_group_code.arr[0] = '\0';
    bankac_subledger_line_code.arr[0]  = '\0';
    bankac_product_group_code.arr[0]   = '\0';
    bankac_product_line_code.arr[0]    = '\0';

    bankac_main_acc1_code.len         = 0;
    bankac_main_acc2_code.len         = 0;
    bankac_dept_code.len              = 0;
    bankac_subledger_group_code.len   = 0;
    bankac_subledger_line_code.len    = 0;
    bankac_product_group_code.len     = 0;
    bankac_product_line_code.len      = 0;

    
    EXEC SQL OPEN BL_GL_ACCOUNT_BILL_RECV_CUR;
 
    if (OERROR)
       err_mesg("OPEN failed on BL_GL_ACCOUNT_BILL_RECV_CUR",0,"");

    EXEC SQL FETCH BL_GL_ACCOUNT_BILL_RECV_CUR INTO
		      :bankac_main_acc1_code ,
		      :bankac_main_acc2_code ,
		      :bankac_dept_code,
		      :bankac_subledger_group_code,
		      :bankac_subledger_line_code,
		      :bankac_product_group_code,
		      :bankac_product_line_code;
   if (OERROR) {
	log_mesg("FETCH failed on BL_GL_ACCOUNT_BILL_RECV_CUR",0,"");		
	return;}

  
   if (ROW_COUNT == 0)    
        {	   
	   sprintf(msg_str,"Record for %s - %s not found in BL_GL_ACCOUNT",
			  nd_operating_facility_id.arr,
			  wo_bill_recv_int_code.arr);
			  
	   loc_log_msg(msg_str);	   
	   g_error = 1;
	   return;
       }


   bankac_main_acc1_code.arr[bankac_main_acc1_code.len]             = '\0';
   bankac_main_acc2_code.arr[bankac_main_acc2_code.len]             = '\0';
   bankac_dept_code.arr[bankac_dept_code.len]                       = '\0';
   bankac_subledger_group_code.arr[bankac_subledger_group_code.len] = '\0';
   bankac_subledger_line_code.arr[bankac_subledger_line_code.len]   = '\0';
   bankac_product_group_code.arr[bankac_product_group_code.len]     = '\0';
   bankac_product_line_code.arr[bankac_product_line_code.len]       = '\0';
}

void move_into_post_acc_wo(int i /* 0 - BANK ; 1 - OTHER */)
   {
   if (i==0)
   {
    strcpy(xxxxxx_main_acc1_code.arr,bankac_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);

    strcpy(xxxxxx_main_acc2_code.arr,bankac_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);

    strcpy(xxxxxx_dept_code.arr,bankac_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);

    strcpy(xxxxxx_subledger_group_code.arr,bankac_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);

    strcpy(xxxxxx_subledger_line_code.arr,bankac_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);

    strcpy(xxxxxx_product_group_code.arr,bankac_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);

    strcpy(xxxxxx_product_line_code.arr,bankac_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    strcpy(xxxxxx_doc_amt.arr,wo_doc_amt.arr);
    xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);
   }
   else
   {
    strcpy(xxxxxx_main_acc1_code.arr,othrac_main_acc1_code.arr);
    xxxxxx_main_acc1_code.len = strlen(xxxxxx_main_acc1_code.arr);

    strcpy(xxxxxx_main_acc2_code.arr,othrac_main_acc2_code.arr);
    xxxxxx_main_acc2_code.len = strlen(xxxxxx_main_acc2_code.arr);

    strcpy(xxxxxx_dept_code.arr,othrac_dept_code.arr);
    xxxxxx_dept_code.len = strlen(xxxxxx_dept_code.arr);

    strcpy(xxxxxx_subledger_group_code.arr,othrac_subledger_group_code.arr);
    xxxxxx_subledger_group_code.len = strlen(xxxxxx_subledger_group_code.arr);

    strcpy(xxxxxx_subledger_line_code.arr,othrac_subledger_line_code.arr);
    xxxxxx_subledger_line_code.len = strlen(xxxxxx_subledger_line_code.arr);

    strcpy(xxxxxx_product_group_code.arr,othrac_product_group_code.arr);
    xxxxxx_product_group_code.len = strlen(xxxxxx_product_group_code.arr);

    strcpy(xxxxxx_product_line_code.arr,othrac_product_line_code.arr);
    xxxxxx_product_line_code.len = strlen(xxxxxx_product_line_code.arr);

    strcpy(xxxxxx_doc_amt.arr,wo_doc_rev_amt.arr);
    xxxxxx_doc_amt.len = strlen(xxxxxx_doc_amt.arr);

   }
}

void ins_blgl_distrib_wo()
{    
    if( (wo_episode_type.arr[0] == 'I' && d_ip_gl_yn == 'N') ||
        (wo_episode_type.arr[0] == 'D' && d_ip_gl_yn == 'N') ||
        (wo_episode_type.arr[0] == 'O' && d_op_gl_yn == 'N') ||
	(wo_episode_type.arr[0] == 'E' && d_op_gl_yn == 'N') ||
        (wo_episode_type.arr[0] == 'R' && d_rf_gl_yn == 'N') ) 

	return;	


	wo_post_month.arr[0] = '\0';
	wo_post_month.len = 0;

    wo_post_year.arr[0] = '\0';
	wo_post_year.len = 0;


    EXEC SQL SELECT nvl(acc_per_year, to_char(to_date(:wo_doc_date,'DD/MM/YYYY'),'YYYY')),
				    nvl(acc_per_month,to_char(to_date(:wo_doc_date,'DD/MM/YYYY'),'MM'))  
			 INTO   :wo_post_year, :wo_post_month
			 FROM   sy_acc_period_defn
			 WHERE  to_date(:wo_doc_date,'DD/MM/YYYY') 
					BETWEEN acc_per_start_date AND acc_per_end_date;	

	wo_post_month.arr[wo_post_month.len] = '\0';
	wo_post_year.arr[wo_post_year.len]   = '\0';

   EXEC SQL INSERT INTO BL_GL_DISTRIBUTION 
             ( OPERATING_FACILITY_ID,	
			   MAIN_ACC1_CODE,
               MAIN_ACC2_CODE,
               DEPT_CODE,
               PRODUCT_GROUP_CODE,
               PRODUCT_LINE_CODE,
               SUBLEDGER_GROUP_CODE,
               SUBLEDGER_LINE_CODE,
               POST_YEAR,
               POST_MONTH,
               TRX_DATE,
               TRX_DOC_REF,
               TRX_DOC_REF_LINE_NUM,
               TRX_DOC_REF_SEQ_NUM,
               EPISODE_TYPE,
               PATIENT_ID,
               EPISODE_ID,
               VISIT_ID,
               SOURCE_DOC_REF,
               SOURCE_DOC_DATE,
               NARRATION,
               TRX_TYPE_CODE,
               DISTRIBUTION_AMT,
               GL_INTERFACE_BY_ID,
               GL_INTERFACE_DATE,
               GL_INTERFACE_FLAG,
               DOC_REF,
	           ADDED_BY_ID,
	           MODIFIED_BY_ID,         
	           ADDED_DATE,             
               MODIFIED_DATE,          
               ADDED_AT_WS_NO,         
               ADDED_FACILITY_ID,      
               MODIFIED_AT_WS_NO,      
               MODIFIED_FACILITY_ID,
	           CASH_CTRL_DOC_TYPE,     
	           CASH_CTRL_DOC_NUMBER,   
	           CASH_CTRL_DOC_DATE,
	           CUST_CODE      
	     )
    VALUES(    :nd_operating_facility_id,
			   :xxxxxx_main_acc1_code,
               :xxxxxx_main_acc2_code,
               :xxxxxx_dept_code,
               :xxxxxx_product_group_code,
               :xxxxxx_product_line_code,
               :xxxxxx_subledger_group_code,
               :xxxxxx_subledger_line_code,
               :wo_post_year,
               :wo_post_month,
               TO_DATE(:wo_doc_date,'DD/MM/YYYY'),
               RPAD(:wo_doc_type_code,6)||SUBSTR(TO_CHAR(to_number(:wo_doc_num),'00000009'),2,8),
               :wo_doc_slno,
               0,
               :wo_episode_type,
               :wo_patient_id,
               :wo_episode_id,
               :wo_visit_id,
               NULL,
               NULL,
               substr(:wo_remarks,1,50),
               :wo_trx_type_code,
               :xxxxxx_doc_amt,
               NULL,
               NULL,
               'N',
               null, /* :recref_bank_recon_ref, */
			   user,
			   user,
	           sysdate,
	           sysdate,
	           :nd_ws_no,
	           :nd_operating_facility_id,
	           :nd_ws_no,
	           :nd_operating_facility_id,
	           null, // :nd_doc_type,
	           null, //:nd_doc_num,
	           null, //:nd_doc_date,
	           null //:recref_customer_code
	);


   if (OERROR) 
   {
       log_mesg("INSERT failed on table BL_GL_DISTRIBUTION",0,"");
       return;
   }
}


update_bill_wo()
{
    EXEC SQL UPDATE BL_WO_REQUEST_DTL
	     SET POSTED_IND = 'Y',
	     MODIFIED_BY_ID = USER,
	     MODIFIED_DATE  = SYSDATE,
	     ADDED_AT_WS_NO = :nd_ws_no,
	     ADDED_FACILITY_ID = :nd_operating_facility_id,
	     MODIFIED_AT_WS_NO = :nd_ws_no,
	     MODIFIED_FACILITY_ID = :nd_operating_facility_id
          WHERE ROWID = :wo_rowid;

    if (OERROR) 
       err_mesg("UPDATE failed on table BL_WO_REQUEST_DTL",0,"");
       
    if (sqlca.sqlerrd[2] == 0 )
       err_mesg("UPDATE failed on table BL_WO_REQUEST_DTL",0,"");    
}


post_bill_wo()
{
	open_bl_bill_wo_cur();
	g_error = 0;
	g_savepoint = 0;

	while(fetch_bl_bill_wo_cur())
	{
	     
	     if(g_error) do_rollback();

	     EXEC SQL SAVEPOINT LAST_DOC_REF;
	     if (OERROR)
		err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

             g_savepoint = 1;


	     get_bank_acc_wo();				//positive entry for waival account
	     if(g_error) continue;



	     move_into_post_acc_wo(BANK);
	     ins_blgl_distrib_wo();
	     if(g_error) continue;	


	     get_bank_acc_bill_recv_int();
	     if(g_error) continue;	



	     move_into_post_acc_wo(OTHER);
	     ins_blgl_distrib_wo();
	     if(g_error) continue;



	     update_bill_wo();
	     if(g_error) continue;

	     EXEC SQL COMMIT;
	     if (OERROR)
		err_mesg("COMMIT failed",0,""); 
	}
}


void open_bl_bill_wo_canc_cur()
{
   EXEC SQL OPEN BL_BILL_WO_CANC_CUR;
   if (OERROR)
       err_mesg("OPEN failed on cursor BL_BILL_WO_CANC_CUR",0,"");
}

int fetch_bl_bill_wo_canc_cur()
{
       wo_rowid.arr[0] = '\0';
       wo_doc_type_code.arr[0] = '\0';                   	       	                                      
       wo_doc_num.arr[0] = '\0';
       wo_doc_date.arr[0] = '\0';                                
       wo_posted_ind.arr[0] = '\0';	                                    	       
       wo_episode_type.arr[0] = '\0';
       wo_org_doc_type_code.arr[0] = '\0';
       wo_org_doc_num.arr[0] = '\0';
       wo_org_doc_date.arr[0] = '\0';
       wo_remarks.arr[0] = '\0';
       wo_trx_type_code.arr[0] = '\0';
       wo_bill_type_code.arr[0] = '\0';
	   wo_cust_code.arr[0] = '\0';

       wo_doc_amt.arr[0] = '\0';
       wo_doc_rev_amt.arr[0] = '\0';
       
       wo_rowid.len = 0;
       wo_doc_type_code.len = 0;
       wo_doc_num.len = 0;
       wo_doc_date.len = 0;
       wo_posted_ind.len = 0;
       wo_episode_type.len = 0;
       wo_org_doc_type_code.len = 0;
       wo_org_doc_num.len = 0;
       wo_org_doc_date.len = 0;
       wo_remarks.len = 0;
       wo_trx_type_code.len = 0;
       wo_bill_type_code.len = 0;
	   wo_cust_code.len = 0;
	   	
       wo_doc_amt.len = 0;
       wo_doc_rev_amt.len = 0;

       wo_doc_slno = 0;
       wo_episode_id = 0;
       wo_visit_id = 0;

       EXEC SQL FETCH BL_BILL_WO_CANC_CUR INTO	       
	       wo_rowid,
	       wo_doc_type_code,                   
	       wo_doc_num,                         
	       wo_doc_slno,                               
	       wo_doc_date,                      
	       wo_doc_amt,                                
	       wo_doc_rev_amt,
	       wo_posted_ind,                             
	       //ae_post_month,                             
	       //ae_post_year,                              
	       //ae_unposted_reason,                        
	       wo_episode_type,
	       wo_episode_id,                             
	       wo_visit_id,                               	       
	       wo_org_doc_type_code,               
	       wo_org_num,                     
	       wo_org_doc_date,
	       wo_remarks,                                	
	       wo_trx_type_code,
		   wo_bill_type_code,
		   wo_cust_code;

	      if (OERROR)
	      err_mesg("FETCH failed on BL_BILL_WO_CANC_CUR",0,"");



	      if (LAST_ROW) return (0);


	       
	       wo_rowid.arr[wo_rowid.len] = '\0';
	       wo_doc_type_code.arr[wo_doc_type_code.len] = '\0';                   	       	                                      
	       wo_doc_num.arr[wo_doc_num.len] = '\0';
	       wo_doc_date.arr[wo_doc_date.len] = '\0';                                
	       wo_posted_ind.arr[wo_posted_ind.len] = '\0';	                                    	       
	       wo_episode_type.arr[wo_episode_type.len] = '\0';
	       wo_org_doc_type_code.arr[wo_org_doc_type_code.len] = '\0';
	       wo_org_doc_num.arr[wo_org_doc_num.len] = '\0';
	       wo_org_doc_date.arr[wo_org_doc_date.len] = '\0';
	       wo_remarks.arr[wo_remarks.len] = '\0';
	       wo_trx_type_code.arr[wo_trx_type_code.len] = '\0';	       
		   wo_bill_type_code.arr[wo_bill_type_code.len] = '\0';	
		        
	       wo_doc_amt.arr[wo_doc_amt.len] = '\0';
	       wo_doc_rev_amt.arr[wo_doc_rev_amt.len] = '\0';
		   wo_cust_code.arr[wo_cust_code.len] = '\0';
	   	
		   //get control ac and write off account from BL_BILL_TYPE_INT	
		   wo_bill_recv_int_code.arr[0] = '\0';
		   wo_int_code.arr[0] = '\0';			

		   wo_bill_recv_int_code.len = 0;
		   wo_int_code.len = 0;	
		   


		   EXEC SQL SELECT BL_RECV_ACC_INT_CODE, WAIVAL_RECV_ACC_INT_CODE  
					INTO   :wo_bill_recv_int_code, :wo_int_code		
					FROM   BL_BILL_TYPE_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND    to_date(:wo_doc_date,'DD/MM/YYYY')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);



		   if (ROW_COUNT == 0)    
		   {	   
		      sprintf(msg_str,"Record(WO) for %s - %s not found in BL_BILL_TYPE_INT",
				  nd_operating_facility_id.arr,
				  wo_bill_type_code.arr);
				  
			  loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }		

		   if (strcmp(wo_int_code.arr, "\0")==0) 	
		   {
		      sprintf(msg_str,"Write Off Account code is not defined for Bill Type %s",
				  wo_bill_type_code.arr);
				  
		      loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }

		   wo_bill_recv_int_code.arr[wo_bill_recv_int_code.len] = '\0';
		   wo_int_code.arr[wo_int_code.len] = '\0';	

		    if (wo_cust_code.arr[0] != '\0')	 		/* Modified on 23-MAR-2007 for Enhancement */
		 {
		   
		   wo_int_code.arr[0] = '\0';			
		   wo_int_code.len = 0;
			 
			 EXEC SQL SELECT WAIVAL_RECV_ACC_INT_CODE  
					INTO    :wo_int_code		
					FROM   BL_BILL_TYPE_BY_PAYER_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND	   CUST_CODE = :wo_cust_code
					AND    to_date(:wo_doc_date,'dd/mm/yyyy')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);

           
		    wo_int_code.arr[wo_int_code.len] = '\0';	
		 }                                         /* Modified on 23-MAR-2007 for Enhancement */





		return 1;
}


void update_bill_canc_wo()
{
    EXEC SQL UPDATE BL_WO_REQUEST_CANC_DTL
	     SET POSTED_IND = 'Y',
	     MODIFIED_BY_ID = USER,
	     MODIFIED_DATE  = SYSDATE,
	     ADDED_AT_WS_NO = :nd_ws_no,
	     ADDED_FACILITY_ID = :nd_operating_facility_id,
	     MODIFIED_AT_WS_NO = :nd_ws_no,
	     MODIFIED_FACILITY_ID = :nd_operating_facility_id
         WHERE ROWID = :wo_rowid;

    if (OERROR) 
       err_mesg("UPDATE failed on table BL_WO_REQUEST_CANC_DTL",0,"");
       
    if (sqlca.sqlerrd[2] == 0 )
       err_mesg("UPDATE failed on table BL_WO_REQUEST_CANC_DTL",0,"");
}


post_bill_wo_cancel()
{
	open_bl_bill_wo_canc_cur();
	g_error = 0;
	g_savepoint = 0;

	while(fetch_bl_bill_wo_canc_cur())
	{
	   
	     if(g_error) do_rollback();

	     EXEC SQL SAVEPOINT LAST_DOC_REF;
	     if (OERROR)
		err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

             g_savepoint = 1;


	     get_bank_acc_wo();				//-ve entry for waival account
	     if(g_error) continue;

		 move_into_post_acc_wo(OTHER);
		 ins_blgl_distrib_wo();
		 if(g_error) continue;	

		 get_bank_acc_bill_recv_int();
		 if(g_error) continue;	

		 move_into_post_acc_wo(BANK);
		 ins_blgl_distrib_wo();
		 if(g_error) continue;

		 update_bill_canc_wo();
		 if(g_error) continue;

	     EXEC SQL COMMIT;
	}
}


post_instl_wo()
{
	open_bl_instl_wo_cur();
	g_error = 0;
	g_savepoint = 0;

	while(fetch_bl_instl_wo_cur())
	{
	     
	     if(g_error) do_rollback();

	     EXEC SQL SAVEPOINT LAST_DOC_REF;
	     if (OERROR)
		err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

             g_savepoint = 1;


	     get_bank_acc_wo();				//positive entry for waival account
	     if(g_error) continue;



	     move_into_post_acc_wo(BANK);
	     ins_blgl_distrib_wo();
	     if(g_error) continue;	


	     get_bank_acc_bill_recv_int();
	     if(g_error) continue;	



	     move_into_post_acc_wo(OTHER);
	     ins_blgl_distrib_wo();
	     if(g_error) continue;



	     update_instl_wo();
	     if(g_error) continue;

	     EXEC SQL COMMIT;
	     if (OERROR)
		err_mesg("COMMIT failed",0,""); 
	}
}

 open_bl_instl_wo_cur()
{
   EXEC SQL OPEN BL_INSTL_WO_CUR;
   if (OERROR)
       err_mesg("OPEN failed on cursor BL_INSTL_WO_CUR",0,"");
}

int fetch_bl_instl_wo_cur()
{
       wo_rowid.arr[0] = '\0';
       wo_doc_type_code.arr[0] = '\0';                   	       	                                      
       wo_doc_num.arr[0] = '\0';
       wo_doc_date.arr[0] = '\0';                                
       wo_posted_ind.arr[0] = '\0';	                                    	       
       wo_episode_type.arr[0] = '\0';
       wo_org_doc_type_code.arr[0] = '\0';
       wo_org_doc_num.arr[0] = '\0';
       wo_org_doc_date.arr[0] = '\0';
       wo_remarks.arr[0] = '\0';
       wo_trx_type_code.arr[0] = '\0';
       wo_bill_type_code.arr[0] = '\0';
	   wo_cust_code.arr[0] = '\0';

       wo_doc_amt.arr[0] = '\0';
       wo_doc_rev_amt.arr[0] = '\0';
       
       wo_rowid.len = 0;
       wo_doc_type_code.len = 0;
       wo_doc_num.len = 0;
       wo_doc_date.len = 0;
       wo_posted_ind.len = 0;
       wo_episode_type.len = 0;
       wo_org_doc_type_code.len = 0;
       wo_org_doc_num.len = 0;
       wo_org_doc_date.len = 0;
       wo_remarks.len = 0;
       wo_trx_type_code.len = 0;
	   wo_bill_type_code.len = 0;
	   wo_cust_code.len = 0;
	   	
       wo_doc_amt.len = 0;
       wo_doc_rev_amt.len = 0;

       wo_doc_slno = 0;
       //ae_post_month = 0;
       //ae_post_year = 0;
       wo_episode_id = 0;
       wo_visit_id = 0;


       EXEC SQL FETCH BL_INSTL_WO_CUR INTO	       
	       wo_rowid,
	       wo_doc_type_code,                   
	       wo_doc_num,                         
	       wo_doc_slno,                               
	       wo_doc_date,                      
	       wo_doc_amt,                                
	       wo_doc_rev_amt,
	       wo_posted_ind,                             
	       //ae_post_month,                             
	       //ae_post_year,                              
	       //ae_unposted_reason,                        
	       wo_episode_type,
	       wo_episode_id,                             
	       wo_visit_id,                               	       
	       wo_org_doc_type_code,               
	       wo_org_num,                     
	       wo_org_doc_date,
	       wo_remarks,                                	
	       wo_trx_type_code,
		   wo_bill_type_code,
		   wo_cust_code;

	      if (OERROR)
	      err_mesg("FETCH failed on BL_INSTL_WO_CUR",0,"");

	      if (LAST_ROW)
		return (0);
		
	       wo_rowid.arr[wo_rowid.len] = '\0';
	       wo_doc_type_code.arr[wo_doc_type_code.len] = '\0';                   	       	                                      
	       wo_doc_num.arr[wo_doc_num.len] = '\0';
	       wo_doc_date.arr[wo_doc_date.len] = '\0';                                
	       wo_posted_ind.arr[wo_posted_ind.len] = '\0';	                                    	       
	       wo_episode_type.arr[wo_episode_type.len] = '\0';
	       wo_org_doc_type_code.arr[wo_org_doc_type_code.len] = '\0';
	       wo_org_doc_num.arr[wo_org_doc_num.len] = '\0';
	       wo_org_doc_date.arr[wo_org_doc_date.len] = '\0';
	       wo_remarks.arr[wo_remarks.len] = '\0';
	       wo_trx_type_code.arr[wo_trx_type_code.len] = '\0';	       
		   wo_bill_type_code.arr[wo_bill_type_code.len] = '\0';
		   wo_cust_code.arr[wo_cust_code.len] = '\0';		
		   
		   wo_doc_amt.arr[wo_doc_amt.len] = '\0';
	       wo_doc_rev_amt.arr[wo_doc_rev_amt.len] = '\0';
			
	   	
		   //get control ac and write off account from BL_BILL_TYPE_INT	
		   wo_bill_recv_int_code.arr[0] = '\0';
		   wo_int_code.arr[0] = '\0';			

			
		   wo_bill_recv_int_code.len = 0;
		   wo_int_code.len = 0;			   
		   

		   EXEC SQL SELECT BL_RECV_ACC_INT_CODE, WAIVAL_RECV_ACC_INT_CODE  
					INTO   :wo_bill_recv_int_code, :wo_int_code		
					FROM   BL_BILL_TYPE_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND    to_date(:wo_doc_date,'dd/mm/yyyy')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);


		   if (ROW_COUNT == 0)    
		   {	   
		      sprintf(msg_str,"Record(WO) for %s - %s not found in BL_BILL_TYPE_INT",
				  nd_operating_facility_id.arr,
				  wo_bill_type_code.arr);
				  
		      loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }
	
		   if (strcmp(wo_int_code.arr, "\0")==0) 	
		   {
		      sprintf(msg_str,"Write Off Account code is not defined for Bill Type %s",
				  wo_bill_type_code.arr);
				  
			  loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }

		   wo_bill_recv_int_code.arr[wo_bill_recv_int_code.len] = '\0';
		   wo_int_code.arr[wo_int_code.len] = '\0';	


		 if (wo_cust_code.arr[0] != '\0')	 		/* Modified on 23-MAR-2007 for Enhancement */
		 {
		   
		   wo_int_code.arr[0] = '\0';			
		   wo_int_code.len = 0;
			 
			 EXEC SQL SELECT  WAIVAL_RECV_ACC_INT_CODE  
					INTO     :wo_int_code		
					FROM   BL_BILL_TYPE_BY_PAYER_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND	   CUST_CODE = :wo_cust_code
					AND    to_date(:wo_doc_date,'dd/mm/yyyy')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);

              wo_int_code.arr[wo_int_code.len] = '\0';	
		 }                                         /* Modified on 23-MAR-2007 for Enhancement */



		return 1;
}


update_instl_wo()
{
    EXEC SQL UPDATE BL_INST_WO_REQUEST_DTL
	     SET POSTED_IND = 'Y',
	     MODIFIED_BY_ID = USER,
	     MODIFIED_DATE  = SYSDATE,
	     ADDED_AT_WS_NO = :nd_ws_no,
	     ADDED_FACILITY_ID = :nd_operating_facility_id,
	     MODIFIED_AT_WS_NO = :nd_ws_no,
	     MODIFIED_FACILITY_ID = :nd_operating_facility_id
          WHERE ROWID = :wo_rowid;

    if (OERROR) 
       err_mesg("UPDATE failed on table BL_INST_WO_REQUEST_DTL",0,"");
       
    if (sqlca.sqlerrd[2] == 0 )
       err_mesg("UPDATE failed on table BL_INST_WO_REQUEST_DTL",0,"");    
}


post_instl_wo_cancel()
{
	open_bl_instl_wo_canc_cur();
	g_error = 0;
	g_savepoint = 0;

	while(fetch_bl_instl_wo_canc_cur())
	{
	   
	     if(g_error) do_rollback();

	     EXEC SQL SAVEPOINT LAST_DOC_REF;
	     if (OERROR)
		err_mesg("SAVEPOINT LAST_DOC_REF failed",0,""); 

             g_savepoint = 1;


	     get_bank_acc_wo();				//-ve entry for waival account
	     if(g_error) continue;

		 move_into_post_acc_wo(OTHER);
		 ins_blgl_distrib_wo();
		 if(g_error) continue;	

		 get_bank_acc_bill_recv_int();
		 if(g_error) continue;	

		 move_into_post_acc_wo(BANK);
		 ins_blgl_distrib_wo();
		 if(g_error) continue;

		 update_instl_canc_wo();
		 if(g_error) continue;

	     EXEC SQL COMMIT;
	}
}


 open_bl_instl_wo_canc_cur()
{
   EXEC SQL OPEN BL_INSTL_WO_CANC_CUR;
   if (OERROR)
       err_mesg("OPEN failed on cursor BL_INSTL_WO_CANC_CUR",0,"");
}

int fetch_bl_instl_wo_canc_cur()
{
       wo_rowid.arr[0] = '\0';
       wo_doc_type_code.arr[0] = '\0';                   	       	                                      
       wo_doc_num.arr[0] = '\0';
       wo_doc_date.arr[0] = '\0';                                
       wo_posted_ind.arr[0] = '\0';	                                    	       
       wo_episode_type.arr[0] = '\0';
       wo_org_doc_type_code.arr[0] = '\0';
       wo_org_doc_num.arr[0] = '\0';
       wo_org_doc_date.arr[0] = '\0';
       wo_remarks.arr[0] = '\0';
       wo_trx_type_code.arr[0] = '\0';
       wo_bill_type_code.arr[0] = '\0';
	   wo_cust_code.arr[0] = '\0';

       wo_doc_amt.arr[0] = '\0';
       wo_doc_rev_amt.arr[0] = '\0';
       
       wo_rowid.len = 0;
       wo_doc_type_code.len = 0;
       wo_doc_num.len = 0;
       wo_doc_date.len = 0;
       wo_posted_ind.len = 0;
       wo_episode_type.len = 0;
       wo_org_doc_type_code.len = 0;
       wo_org_doc_num.len = 0;
       wo_org_doc_date.len = 0;
       wo_remarks.len = 0;
       wo_trx_type_code.len = 0;
       wo_bill_type_code.len = 0;
	   wo_cust_code.len = 0;
	   	
       wo_doc_amt.len = 0;
       wo_doc_rev_amt.len = 0;

       wo_doc_slno = 0;
       wo_episode_id = 0;
       wo_visit_id = 0;

       EXEC SQL FETCH BL_INSTL_WO_CANC_CUR INTO	       
	       wo_rowid,
	       wo_doc_type_code,                   
	       wo_doc_num,                         
	       wo_doc_slno,                               
	       wo_doc_date,                      
	       wo_doc_amt,                                
	       wo_doc_rev_amt,
	       wo_posted_ind,                             
	       //ae_post_month,                             
	       //ae_post_year,                              
	       //ae_unposted_reason,                        
	       wo_episode_type,
	       wo_episode_id,                             
	       wo_visit_id,                               	       
	       wo_org_doc_type_code,               
	       wo_org_num,                     
	       wo_org_doc_date,
	       wo_remarks,                                	
	       wo_trx_type_code,
		   wo_bill_type_code,
		   wo_cust_code;

	      if (OERROR)
	      err_mesg("FETCH failed on BL_INSTL_WO_CANC_CUR",0,"");



	      if (LAST_ROW) return (0);


	       
	       wo_rowid.arr[wo_rowid.len] = '\0';
	       wo_doc_type_code.arr[wo_doc_type_code.len] = '\0';                   	       	                                      
	       wo_doc_num.arr[wo_doc_num.len] = '\0';
	       wo_doc_date.arr[wo_doc_date.len] = '\0';                                
	       wo_posted_ind.arr[wo_posted_ind.len] = '\0';	                                    	       
	       wo_episode_type.arr[wo_episode_type.len] = '\0';
	       wo_org_doc_type_code.arr[wo_org_doc_type_code.len] = '\0';
	       wo_org_doc_num.arr[wo_org_doc_num.len] = '\0';
	       wo_org_doc_date.arr[wo_org_doc_date.len] = '\0';
	       wo_remarks.arr[wo_remarks.len] = '\0';
	       wo_trx_type_code.arr[wo_trx_type_code.len] = '\0';	       
		   wo_bill_type_code.arr[wo_bill_type_code.len] = '\0';	
		        
	       wo_doc_amt.arr[wo_doc_amt.len] = '\0';
	       wo_doc_rev_amt.arr[wo_doc_rev_amt.len] = '\0';
		   wo_cust_code.arr[wo_cust_code.len] = '\0';
	   	
		   //get control ac and write off account from BL_BILL_TYPE_INT	
		   wo_bill_recv_int_code.arr[0] = '\0';
		   wo_int_code.arr[0] = '\0';			

		   wo_bill_recv_int_code.len = 0;
		   wo_int_code.len = 0;	
		   


		   EXEC SQL SELECT BL_RECV_ACC_INT_CODE, WAIVAL_RECV_ACC_INT_CODE  
					INTO   :wo_bill_recv_int_code, :wo_int_code		
					FROM   BL_BILL_TYPE_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND    to_date(:wo_doc_date,'DD/MM/YYYY')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);



		   if (ROW_COUNT == 0)    
		   {	   
		      sprintf(msg_str,"Record(WO) for %s - %s not found in BL_BILL_TYPE_INT",
				  nd_operating_facility_id.arr,
				  wo_bill_type_code.arr);
				  
			  loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }		

		   if (strcmp(wo_int_code.arr, "\0")==0) 	
		   {
		      sprintf(msg_str,"Write Off Account code is not defined for Bill Type %s",
				  wo_bill_type_code.arr);
				  
		      loc_log_msg(msg_str);	   
		      g_error = 1;
		      return;
		   }

		   wo_bill_recv_int_code.arr[wo_bill_recv_int_code.len] = '\0';
		   wo_int_code.arr[wo_int_code.len] = '\0';	

		    if (wo_cust_code.arr[0] != '\0')	 		/* Modified on 23-MAR-2007 for Enhancement */
		 {
		   
		   wo_int_code.arr[0] = '\0';			
		   wo_int_code.len = 0;
			 
			 EXEC SQL SELECT WAIVAL_RECV_ACC_INT_CODE  
					INTO    :wo_int_code		
					FROM   BL_BILL_TYPE_BY_PAYER_INT
					WHERE  ACC_ENTITY_CODE IN ( SELECT ACC_ENTITY_CODE FROM SY_ACC_ENTITY
												WHERE ACC_ENTITY_ID = :nd_operating_facility_id)
					AND    BILL_TYPE_CODE  = :wo_bill_type_code
					AND	   CUST_CODE = :wo_cust_code
					AND    to_date(:wo_doc_date,'dd/mm/yyyy')
					between NVL(EFF_FROM_DATE,TO_DATE('01/01/1900','DD/MM/YYYY')) 
					AND     NVL(EFF_TO_DATE,SYSDATE);

           
		    wo_int_code.arr[wo_int_code.len] = '\0';	
		 }                                         /* Modified on 23-MAR-2007 for Enhancement */





		return 1;
}


 update_instl_canc_wo()
{
    EXEC SQL UPDATE BL_INST_WO_REQUEST_CANC_DTL
	     SET POSTED_IND = 'Y',
	     MODIFIED_BY_ID = USER,
	     MODIFIED_DATE  = SYSDATE,
	     ADDED_AT_WS_NO = :nd_ws_no,
	     ADDED_FACILITY_ID = :nd_operating_facility_id,
	     MODIFIED_AT_WS_NO = :nd_ws_no,
	     MODIFIED_FACILITY_ID = :nd_operating_facility_id
         WHERE ROWID = :wo_rowid;

    if (OERROR) 
       err_mesg("UPDATE failed on table BL_INST_WO_REQUEST_CANC_DTL",0,"");
       
    if (sqlca.sqlerrd[2] == 0 )
       err_mesg("UPDATE failed on table BL_INST_WO_REQUEST_CANC_DTL",0,"");
}
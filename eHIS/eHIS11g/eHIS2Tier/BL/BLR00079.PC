/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR00046.PC                                  */
/* AUTHOR                : Deepali                               */  
/* DATE WRITTEN          : 15/06/2005                                   */      
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define OERROR          (sqlca.sqlcode < 0)
#define MAX_LINES 44
#define REP_WIDTH 168				//132
//#define VER  "VER : 4.10\n"
#define ESC  0x1B
/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;


VARCHAR     hosp_name                       [120],
			date							[20],
            date_time                       [20],
			d_acc_entity_name				[61],
			d_user							[31],
			d_head_name						[31],
			d_sysdate						[20],
			d_curr_date						[20],
			nd_facility_id					[3],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
            nd_facility				        [3],
			nd_as_on_date					[15],
			d_episode_type					[2],
			d_patient_id					[21],
			d_patient_name					[61],
			nd_patient_id                   [21],
			d_doc_type_code					[6],
			d_citizen						[10], 

			nd_pre_citizen					[10],     
			nd_pre_blng_grp_catg			[5],
			d_blng_grp_catg					[5],
			d_blng_grp_catg_desc			[31],
			d_bed_class						[3],
			l_translated_value				[201],	
			p_language_id  				[3],
			l_pk_value						[100];

	int i,sl_no=1,page_no=0;
	
	long   	nd_days1=0,
			nd_days2=0,
			nd_days3=0,
			nd_days4=0,
            nd_days5=0,
			doc_date=0,
			nd_from_days=0,
			nd_to_days=0,
			nd_from_year, 
			nd_to_year;

	double d_episode_id,d_visit_id,d_doc_num ;

    double  d_bil_out_amt=0,d_bil_write_off_amt=0,d_bil_tot_ot_amt=0,
			d_bil_out_amt_tot=0, d_bil_write_off_amt_tot=0, d_bil_tot_amt_tot=0,
			grn_tot_tot_amt=0,grn_tot_writeoff_amt=0,grn_tot_outst_amt=0;

	char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char string_var [100];

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0, recctr = 1, ftime = 0, bgftime = 0;


FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }

	strcpy(g_pgm_id,"BLR00079");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);
	 
    EXEC sql connect :nd_pwd;
  	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

		set_meduser_role(); 

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

	    strcpy(p_language_id.arr,l_language_id.arr);        
	    p_language_id.len = l_language_id.len;


	nd_as_on_date.arr[0]				= '\0';	
						
    EXEC SQL SELECT	PARAM1, to_number(PARAM2), to_number(PARAM3), PARAM4,PARAM5	
			 INTO :nd_as_on_date, :nd_from_days, :nd_to_days,
				  :nd_from_year, :nd_to_year		
			 FROM SY_PROG_PARAM
			 WHERE PGM_ID   = :d_curr_pgm_name
			 AND   SESSION_ID = :nd_session_id
			 AND   PGM_DATE   = :nd_pgm_date;


	
	/*sprintf(string_var , "nd fromdays %4d" , nd_from_days);
	disp_message(ERR_MESG, string_var);

	sprintf(string_var , "nd to days %4d" , nd_to_days);
	disp_message(ERR_MESG, string_var);*/


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");


   nd_as_on_date.arr[nd_as_on_date.len]				='\0';			
       
   EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

    open_files();

    declare_cur();

	get_header_dtls();

	fetch_legend_value();

	 fprintf(fp,"%c&l1O",ESC); /* Set Landscape*/ 
 	 fprintf(fp, "%c(s17H", ESC);/* Reduce the font size*/
	 fprintf(fp,"%c&a4L",ESC); 	/* To Set the Left margin  		*/

   print_param();

   open_det_cur();

   nd_pre_citizen.arr[0] = '\0';
   nd_pre_blng_grp_catg.arr[0] = '\0';

   while(fetch_det_cur())
   {


       if (!nd_pre_citizen.arr)
         {

          strcpy(nd_pre_citizen.arr,d_citizen.arr);
          strcpy(nd_pre_blng_grp_catg.arr,d_blng_grp_catg.arr);
         }

       if (strcmp(nd_pre_citizen.arr,d_citizen.arr)!=0) 
          {	
	    
            strcpy(nd_pre_citizen.arr,d_citizen.arr);
			
			if(bgftime != 0)
			  print_bg_catg_tot();
			  			
			if (ftime != 0)
			   next_page();

            //fprintf(fp,"%-12s :  %s\n" ,loc_legend[7], d_citizen.arr);          

	    if (strcmp(d_citizen.arr,"NATIONALS") == 0)
		fprintf(fp,"%-12s :  %s\n" ,loc_legend[7], loc_legend[20]);          
	    else if (strcmp(d_citizen.arr,"OTHERS") == 0)
		fprintf(fp,"%-12s :  %s\n" ,loc_legend[7], loc_legend[21]);          
	    else if (strcmp(d_citizen.arr,"UNRESTRICTED") == 0)
		fprintf(fp,"%-12s :  %s\n" ,loc_legend[7], loc_legend[22]);       
	    else
		fprintf(fp,"%-12s :  %s\n" ,loc_legend[7], d_citizen.arr);          


            lctr++;
            nd_pre_blng_grp_catg.arr[0] = '\0';	    
	  		ftime++;
			bgftime = 0;
          }

       if (strcmp(nd_pre_blng_grp_catg.arr,d_blng_grp_catg.arr)!=0)
          {	
		    if(bgftime != 0)
			  print_bg_catg_tot();
            strcpy(nd_pre_blng_grp_catg.arr,d_blng_grp_catg.arr);
			fprintf(fp,"\n");
  
			d_blng_grp_catg_desc.arr[0] = '\0';	    
			if (strcmp(d_blng_grp_catg.arr, "**")==0)
			{
			   strcpy(d_blng_grp_catg_desc.arr, "Not specified");
               fprintf(fp,"%-22s  :  %2s - %-30s\n" ,loc_legend[14], d_blng_grp_catg.arr, d_blng_grp_catg_desc.arr);          
			}
		    else
			{

			   EXEC SQL SELECT SHORT_DESC
					 INTO   :d_blng_grp_catg_desc
					 FROM   BL_BLNG_GRP_CATG
					 WHERE  BLNG_GRP_CATG = :d_blng_grp_catg;			   
			   d_blng_grp_catg_desc.arr[d_blng_grp_catg_desc.len]	= '\0';	
               fprintf(fp,"%-22s  :  %2s - %-30s\n" ,loc_legend[14], d_blng_grp_catg.arr, d_blng_grp_catg_desc.arr);   
 
       
			}
			

			lctr++;
			recctr = 1;
			bgftime++;
          }

		print_rec();

   }

    if(bgftime != 0)

	  print_bg_catg_tot();

print_grand_tot();

    print_end();


	fprintf(fp,"%cE",ESC); /* To Reset the Printer */

 }

open_files()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00079.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00079.lis");
       proc_exit();
    }

}

declare_cur()
{
	

	EXEC SQL DECLARE DET_CUR CURSOR FOR
	select citizen,BLNG_GRP_CATG,patient_id,patient_name, bed_class_code,episode_type,
	sum(Bill_Outst_amt), sum(WO_Amt), sum(TOT_AMT)
	from (
	select SUBSTR(blcommon.get_reln_code(a.patient_id),1,10) citizen,
       nvl(d.BLNG_GRP_CATG, '**') BLNG_GRP_CATG, a.patient_id patient_id,
	    c.short_name patient_name,
	   nvl(b.bed_class_code,'**') bed_class_code, nvl(a.episode_type,'R') episode_type,    
	   nvl(a.ADJ_DOC_TYPE_CODE,a.DOC_TYPE_CODE) doc_type,
	   nvl(a.ADJ_DOC_NUM,a.DOC_NUMBER) doc_num ,
       sum(a.DEBIT_AMT)-sum(a.CREDIT_AMT) Bill_Outst_amt,
       sum(DECODE(a.TRX_TYPE,'WRITEOFF',a.CREDIT_AMT,
                           'CANC-WRITEOFF',a.CREDIT_AMT,0)) -
       sum(DECODE(a.TRX_TYPE,'WRITEOFF',a.DEBIT_AMT,
                           'CANC-WRITEOFF',a.DEBIT_AMT,0)) WO_Amt,
       (sum(a.DEBIT_AMT)-sum(a.CREDIT_AMT)
       + (sum(DECODE(a.TRX_TYPE,'WRITEOFF',a.CREDIT_AMT,
                           'CANC-WRITEOFF',a.CREDIT_AMT,0)) -
       sum(DECODE(a.TRX_TYPE,'WRITEOFF',a.DEBIT_AMT,
                           'CANC-WRITEOFF',a.DEBIT_AMT,0))))TOT_AMT
	from  BL_PATIENT_STATEMENT_VW a, bl_bill_dcp_dtl_vw b, mp_patient_mast c,
		  BL_BLNG_GRP_BY_CATG d
	where nvl(a.ADJ_DOC_TYPE_CODE,a.DOC_TYPE_CODE) = b.doc_type_code
	and   nvl(a.ADJ_DOC_NUM,a.DOC_NUMBER) = b.doc_num
	and   a.DOCUMENT_NATURE IN ('BI','DC')
	and   a.doc_date <= nvl(to_date(:nd_as_on_date||'23:59:59','DD/MM/YYYY hh24:mi:ss'),sysdate)
	and   a.patient_id = c.patient_id
	and   CEIL(NVL(TO_DATE(:nd_as_on_date,'DD/MM/YYYY'),SYSDATE) - nvl(b.DOC_DATE,a.doc_date))
		  between :nd_from_days and :nd_to_days
        and   NVL(b.blng_grp_id,'X') = d.blng_grp_id(+)
	 AND B.BILL_TOT_AMT > 0   /* Added by robert to avoid negative bills as per discussion*/
	group by SUBSTR(blcommon.get_reln_code(a.patient_id),1,10),
	nvl(d.BLNG_GRP_CATG,'**'),
	a.patient_id, c.short_name, nvl(b.bed_class_code,'**'),nvl(a.episode_type,'R'),
	nvl(a.ADJ_DOC_TYPE_CODE,a.DOC_TYPE_CODE),
	nvl(a.ADJ_DOC_NUM,a.DOC_NUMBER)
	having (sum(a.DEBIT_AMT)-sum(a.CREDIT_AMT)
		   + (sum(DECODE(a.TRX_TYPE,'WRITEOFF',a.CREDIT_AMT,
	                    'CANC-WRITEOFF',a.CREDIT_AMT,0)) -
			sum(DECODE(a.TRX_TYPE,'WRITEOFF',a.DEBIT_AMT,
                           'CANC-WRITEOFF',a.DEBIT_AMT,0)))) > 0
	)
	group by citizen,BLNG_GRP_CATG,patient_id,patient_name, bed_class_code,episode_type
	ORDER BY citizen, 
			 BLNG_GRP_CATG, patient_id;

}

open_det_cur()
{
   EXEC SQL OPEN DET_CUR;
		if (OERROR)
        err_mesg("OPEN failed on cursor DET_CUR",0,"");
}


close_det_cur()
{

	EXEC SQL CLOSE DET_CUR;
    
}

fetch_det_cur()
{ 

        d_citizen.arr[0]			= '\0';	   
		d_blng_grp_catg.arr[0]      = '\0';
        d_patient_id.arr[0]			= '\0';	  
		d_patient_name.arr[0]       = '\0';
		d_bed_class.arr[0]			= '\0';
        d_episode_type.arr[0]		= '\0';
        d_citizen.len			= 0;
		d_blng_grp_catg.len		= 0;
		d_patient_id.len		= 0;
		d_patient_name.len		= 0;
		d_bed_class.len			= 0;
		d_episode_type.len      =0;

		d_bil_out_amt			= 0;
		d_bil_write_off_amt		= 0;
		d_bil_tot_ot_amt		= 0;	   

	EXEC SQL FETCH  DET_CUR INTO 
		:d_citizen,
		:d_blng_grp_catg,
		:d_patient_id,
		:d_patient_name,
		:d_bed_class,
		:d_episode_type,			
		:d_bil_out_amt,
		:d_bil_write_off_amt,
		:d_bil_tot_ot_amt;

	
	

	if (OERROR)
		err_mesg("FETCH failed on cursor DET_CUR ",0,"");	


    d_citizen.arr[d_citizen.len]					= '\0';	
	d_blng_grp_catg.arr[d_blng_grp_catg.len]		= '\0';
	d_patient_id.arr[d_patient_id.len]				= '\0';
	d_patient_name.arr[d_patient_name.len]			= '\0';
	d_bed_class.arr[d_bed_class.len]				= '\0';
	d_episode_type.arr[d_episode_type.len]			= '\0';

	/*recctr++;*/

	return(LAST_ROW?0:1);   
}

print_rec()
{

    if (lctr > 40)
	   next_page();

    fprintf(fp,"%4d ",recctr);
    fprintf(fp,"%-20s %-60s %-2s",d_patient_id.arr,d_patient_name.arr, d_bed_class.arr);

	fprintf(fp,"             ");
    print_formated(d_bil_tot_ot_amt);
	fprintf(fp,"  ");
	print_formated(d_bil_write_off_amt);
	fprintf(fp,"  ");
     print_formated(d_bil_out_amt);
    fprintf(fp,"\n");

	lctr++;
	recctr++;

	d_bil_out_amt_tot	    += d_bil_out_amt;
	d_bil_write_off_amt_tot += d_bil_write_off_amt;
	d_bil_tot_amt_tot	    += d_bil_tot_ot_amt;

}


get_header_dtls()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    d_acc_entity_name.arr[0] ='\0';
    d_curr_date.arr[0]   ='\0';
	d_user.arr[0] ='\0';
    d_sysdate.arr[0] ='\0';
	d_head_name.arr[0] ='\0';
    d_acc_entity_name.len =0;
    d_curr_date.len   =0;
	d_user.len =0;
    d_sysdate.len =0;
	d_head_name.len=0;

	EXEC SQL SELECT upper(ACC_ENTITY_NAME), /* description of the institution */
				   USER, TO_CHAR(SYSDATE, 'DD/MM/YYYY'),TO_CHAR(SYSDATE, 'HH24:MI:SS'),HEAD_OF_COMPANY_NAME
             INTO :d_acc_entity_name,
				  :d_user, :d_sysdate,:d_curr_date,d_head_name
			 FROM SY_ACC_ENTITY
			 WHERE acc_entity_id = :nd_facility;
    
	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
	d_curr_date.arr[d_curr_date.len]			 = '\0';
	d_head_name.arr[d_head_name.len]			 = '\0';

   
	return;
	err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	proc_exit();
}


print_page_title()
{

	int hosp_nm_len,date1_len, rep_title_len = 10,v_title_len,v_title1_len, s1, s2,date_len,user_len,pgm_len,sub_title_len;
	char v_rep_title[200],v_as_on_date[12],v_sub_title[200],v_title[200],v_title1[200];
   
	fprintf(fp,"MDL : BL");
	hosp_nm_len  =  d_acc_entity_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-8);
	fprintf(fp,"%s", d_acc_entity_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);
	date1_len=strlen(loc_legend[3]);
	horz_skip(s2-date1_len-12);
	fprintf(fp,"%s: %s", loc_legend[3],d_sysdate.arr);
    
	next_line(1);
	
	fprintf(fp,"OPR : %s", d_user.arr); 	
        user_len=strlen(d_user.arr);
	strcpy(v_rep_title,loc_legend[1]);
	rep_title_len = strlen(v_rep_title);
	s1 = (REP_WIDTH-rep_title_len)/2;
	 strcpy(v_as_on_date,nd_as_on_date.arr);
	date_len= strlen(v_as_on_date);
	horz_skip(s1-user_len-6);
	fprintf(fp,"%s  %10s",v_rep_title,v_as_on_date);
   	s2 = (REP_WIDTH-s1-rep_title_len-date_len);
	horz_skip(s2-24);
	fprintf(fp,"%9s : %10s",loc_legend[2],d_curr_date.arr);
	next_line(1);

	fprintf(fp,"REP : %s",d_curr_pgm_name.arr);
        pgm_len=strlen(d_curr_pgm_name.arr);
	
	//sprintf(v_sub_title, "PERIOD FROM  : %2d - %2d year",nd_from_year,nd_to_year); 

	sprintf(v_sub_title, "%s  : %2d - %2d %-s",loc_legend[19],nd_from_year,nd_to_year,loc_legend[18]); 

	//strcpy(v_sub_title,d_head_name.arr);

	sub_title_len = strlen(v_sub_title);
	s1 = (REP_WIDTH-sub_title_len)/2;
   	horz_skip(s1-pgm_len-6);
	fprintf(fp,"%s",v_sub_title);

        s2 = (REP_WIDTH-s1-sub_title_len-5);
	    horz_skip(s2-19);
		fprintf(fp,"%11s : %10d",loc_legend[4],++page_no);
	next_line(1);
	//fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/

    //fprintf(fp,"%c(s-3B",ESC); /* release bold style */
   
	lctr = 6;
	print_line('-',REP_WIDTH); next_line(1);

	
}


print_column_title()
 {

  fprintf(fp, "%-4s%-23s%-60s%-5s%20s   %15s   %15s %15s",
  loc_legend[5],loc_legend[6],loc_legend[8],loc_legend[9],loc_legend[10],loc_legend[11],
  loc_legend[12],loc_legend[13]);
  next_line(1);

  print_line('-',REP_WIDTH);
  next_line(1);

 }


print_param()
{
  print_page_title();

//  fprintf(fp,"VER 4.1\n");
 
  fprintf(fp,"\n\n\n\n");
  fprintf(fp,"        ");
  fprintf(fp,"INPUT PARAMETERS :\n");
  fprintf(fp,"        ");
  fprintf(fp,"------------------\n\n");

  fprintf(fp,"                AS ON DATE   : %s\n",nd_as_on_date.arr);  
  fprintf(fp,"                PERIOD FROM  : %2d - %2d year",nd_from_year,nd_to_year);

  next_page();
}


check_line(skip) /* will check for MAX LINE before printing totals */
int skip;
{
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
}

next_line(skip) /* will check for MAX LINE before printing totals */		
int skip;
{
	if ((lctr + skip) > MAX_LINES)
	{
		next_page(); 
	}
	else
	{
		fprintf(fp,"\n"); ++lctr; 
	}
}

next_page() /* will move the cursor to next page */
{
  
	fprintf(fp,"\n");
	fprintf(fp,"\f");
	lctr=0;
	fprintf(fp,"\n"); 
	 
	print_page_title();
	print_column_title();  	
}

print_line(ch,n) /* this is to obtain required characters */
  char ch;
  int n;
{
	int i;
	for(i=0;i<n;i++)
	fprintf(fp,"%c",ch);  
}

horz_skip(num) /* this is to obtain required blank space */
int num;
{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
}

print_end()
{
  fprintf(fp,"\n \n");
  fprintf(fp,"                                                   **   END  OF  REPORT   ** ");
  //next_line(1);
  fflush(fp);
  fclose(fp);
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[50], str_amt[50];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s  ",str_amt);
    }
}  



fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00079.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';


		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC; 

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


print_bg_catg_tot()
{
    /*if (lctr > 52)
       print_head(1);*/

    fprintf(fp,"%69s                                 --------------   ---------------    ---------------\n"," ");
    //fprintf(fp,"%60sTOTAL                                     "," ");
	fprintf(fp,"%96s      ",loc_legend[15]);
	    print_formated(d_bil_tot_amt_tot); fprintf(fp,"  ");
    print_formated(d_bil_write_off_amt_tot); fprintf(fp,"  ");
    print_formated(d_bil_out_amt_tot);
    fprintf(fp,"\n");
    fprintf(fp,"%69s                                 --------------   ---------------    --------------\n"," ");
    lctr +=3;
  calc_grand_tot();
     /*grn_tot_tot_amt_db       += epi_tot_tot_amt_db;
     grn_tot_hosp_tot_amt_db  += epi_tot_hosp_tot_amt_db;
     grn_tot_drfee_tot_amt_db += epi_tot_drfee_tot_amt_db;*/

     d_bil_out_amt_tot        = 0;
     d_bil_write_off_amt_tot   = 0;
     d_bil_tot_amt_tot  = 0;
}

calc_grand_tot()
{
 grn_tot_tot_amt += d_bil_tot_amt_tot;
grn_tot_writeoff_amt  += d_bil_write_off_amt_tot;
    grn_tot_outst_amt += d_bil_out_amt_tot;
}

print_grand_tot()
 {

   // fprintf(fp,"%69s                                 --------------   ---------------    ---------------\n"," ");
    //fprintf(fp,"%60sGRAND TOTAL                               "," ");
	fprintf(fp,"%96s      ",loc_legend[16]);
	    print_formated(grn_tot_tot_amt); fprintf(fp,"  ");
    print_formated(grn_tot_writeoff_amt); fprintf(fp,"  ");
    print_formated(grn_tot_outst_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%69s                                 --------------   ---------------    --------------\n"," ");
    lctr +=3;
  }

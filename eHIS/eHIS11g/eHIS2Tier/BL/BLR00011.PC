/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR00011.PC                                  */
/* AUTHOR                : Jagwinder Kaur                             */  
/* DATE WRITTEN          : 22/04/2004                                   */      
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR     hosp_name                       [120],
			date							[20],
            date_time                       [20],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
			nd_facility				        [3],
			bl_recpt_no						[19],
			bl_recpt_date					[11],
			bl_payer_name					[61],
			bl_payment_mode					[16],
			bl_slmt_doc_ref					[61],
			bl_slmt_doc_date				[11],
			nd_fm_date						[11],
			nd_to_date						[11],
			old_recpt_date					[11],
			l_translated_value				   [201],
			l_cash_book_acc_desc			   [50],
			l_pk_value						   [100],
			p_language_id						[3],
			nd_temp_date1								[31],
			nd_loc_date1								[31],
			nd_temp_date								[31],
		    date_convert								[31],
		    date_convert1								[31],
			nd_loc_date									[31],
		    date_convert2								[31],
			//fm_date[31],
			//to_date[31],
			tmp_date							[11];

double      bl_doc_amt,
			tot_doc_amt,
			tot_amt;

int i;
char nd_trn_type;
char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200];
char fm_date[31],to_date[31];
char convert_fm_date[11],convert_to_date[11];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;
int    first = 1;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLR00011");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;
  
	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 

		strcpy(p_language_id.arr,l_language_id.arr);

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

       nd_fm_date.arr[0]	= '\0';
	   nd_to_date.arr[0]	= '\0';

		nd_fm_date.len		= 0;
		nd_to_date.len		= 0;

        EXEC SQL SELECT	PARAM1,PARAM2,PARAM3
				INTO   :nd_fm_date,:nd_to_date,:nd_trn_type
				FROM SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

		nd_fm_date.arr[nd_fm_date.len]	= '\0';
		nd_to_date.arr[nd_to_date.len]	= '\0';

	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   

    	declare_cur();

    	fetch_hosp_name();

		fetch_legend_value();

    	open_file();

		print_page_header();

		print_head();		

		open_hdr();
        
	    print_detail();

	    end_of_rep();


    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

declare_cur()
{
	EXEC SQL DECLARE RCPT_RFND_CUR CURSOR FOR 
	select	doc_type_code||'/'||to_char(doc_number)||'/'||a.doc_srno receipt_no,
			doc_date,
			to_char(doc_date,'DD/MM/YYYY') Receipt_date,
			payer_name,
			short_desc  Payment_mode,
			slmt_doc_ref_desc,
			to_char(slmt_doc_ref_date,'DD/MM/YYYY'),
			doc_amt
			from bl_receipt_refund_HDRdtl_VW a, bl_slmt_type b, sy_acc_entity c
			where a.operating_facility_id in (select operating_facility_id from bl_parameters)
			and trunc(doc_date) between to_date(nvl(:nd_fm_date,'01/01/1401'),'DD/MM/YYYY') 
			and nvl(to_date(:nd_to_date,'DD/MM/YYYY'),sysdate)
			and a.cash_counter_facility_id=:nd_facility
			and a.slmt_type_code=b.slmt_type_code
			and b.acc_entity_code = c.acc_entity_code
			and nvl(pmnt_thru_mail,'N') = 'Y'
			and nvl(cancelled_ind,'N') = 'N'
			and recpt_refund_ind = :nd_trn_type			
			and a.cash_counter_facility_id=c.acc_entity_id			
			
			order by 2,1;



}



open_hdr() 
{

    EXEC SQL OPEN RCPT_RFND_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor RCPT_RFND_CUR",0,"");
}

fetch_hdr()
{
bl_recpt_no.arr[0]		= '\0';
bl_recpt_date.arr[0]	= '\0';
bl_payer_name.arr[0]	= '\0';
bl_payment_mode.arr[0]	= '\0';
bl_slmt_doc_ref.arr[0]	= '\0';
bl_slmt_doc_date.arr[0]	= '\0';

bl_recpt_no.len			= 0;
bl_recpt_date.len		= 0;
bl_payer_name.len		= 0;
bl_payment_mode.len		= 0;
bl_slmt_doc_ref.len		= 0;
bl_slmt_doc_date.len	= 0;

bl_doc_amt           = 0;

      EXEC SQL FETCH RCPT_RFND_CUR
               INTO :bl_recpt_no,
					:tmp_date,
					:bl_recpt_date,
					:bl_payer_name,
					:bl_payment_mode ,
					:bl_slmt_doc_ref,
					:bl_slmt_doc_date,
					:bl_doc_amt;
       if (OERROR)
            err_mesg("FETCH failed on cursor RCPT_RFND_CUR",0,"");

bl_recpt_no.arr[bl_recpt_no.len]			= '\0';
bl_recpt_date.arr[bl_recpt_date.len]		= '\0';
bl_payer_name.arr[bl_payer_name.len]		= '\0';
bl_payment_mode.arr[bl_payment_mode.len]	= '\0';
bl_slmt_doc_ref.arr[bl_slmt_doc_ref.len]	= '\0';
bl_slmt_doc_date.arr[bl_slmt_doc_date.len]	= '\0';

    return(LAST_ROW?0:1);
}

print_detail()
{
  while(fetch_hdr())
  {

    if(first)
	 {
     strcpy(old_recpt_date.arr,bl_recpt_date.arr);
	 old_recpt_date.len=strlen(old_recpt_date.arr);
	 first = 0;
	 }

    if(strcmp(old_recpt_date.arr,bl_recpt_date.arr) != 0 )
	  print_date_total();
	 
	check_page_end(1,0);  


	fprintf(fp," %-19s %-10s   %-40s %-15s %-20s %-10s  ",
                    bl_recpt_no.arr, 
					bl_recpt_date.arr, 
					bl_payer_name.arr,
					bl_payment_mode.arr,
					bl_slmt_doc_ref.arr,
					bl_slmt_doc_date.arr);
	print_formated(bl_doc_amt);
	fprintf(fp,"\n");
    lctr++;
	

	tot_doc_amt = tot_doc_amt + bl_doc_amt;


    strcpy(old_recpt_date.arr,bl_recpt_date.arr);
	old_recpt_date.len=strlen(old_recpt_date.arr);

	 }
  print_date_total();
  print_total();
	
}   


print_date_total()
{

		if(tot_doc_amt != 0)
		{
        check_page_end(3,0);
		fprintf(fp,"\n%80s"," ");
		fprintf(fp,"%27s %-10s :",loc_legend[16],old_recpt_date.arr);
		print_formated(tot_doc_amt);
		fprintf(fp,"\n\n");
		tot_amt = tot_amt + tot_doc_amt;
		tot_doc_amt = 0;
		lctr+=3;
		}
}

print_total()
{		
		if(tot_amt != 0)
		{
		check_page_end(1,0);
   		fprintf(fp,"%89s"," ");
		fprintf(fp,"  %-27s :",loc_legend[17]);
		print_formated(tot_amt);
		fprintf(fp,"\n");
		lctr+=1;
		}
		
}



end_of_rep()
{
	check_page_end(3,0);
	fprintf(fp,"\n\n %50s   ***  END OF REPORT ***\n\f"," ");
	fflush(fp);
}

open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00011.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00011.lis");
       proc_exit();
    }
}

print_page_header()
{

    if (nd_fm_date.arr[0] == '\0')
	  strcpy(fm_date,"Lowest");
    else
	  strcpy(fm_date,nd_fm_date.arr);

	if (nd_to_date.arr[0] == '\0')
	  strcpy(to_date,"Highest");
    else
	  strcpy(to_date,nd_to_date.arr);




print_page_title();


fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
//fprintf(fp,"VER : 4.1 \n\n\n\n");
fprintf(fp,"\n\n\n\n");
fprintf(fp,"           INPUT PARAMETER \n");
fprintf(fp,"           --------------- \n\n\n\n");
fprintf(fp,"				TRANSACTION TYPE                  : ");

if (nd_trn_type == 'R')
fprintf(fp,"Receipt");
else
fprintf(fp,"Refund");
fprintf(fp,"\n\n");

fprintf(fp,"				RECEIPT DATE     FROM             : %s\n",fm_date);
fprintf(fp,"				                 TO               : %s\n\n",to_date);
fprintf(fp,"\f");
}


print_head()
{
	print_page_title();
	fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp," %-15s %-12s %-40s %-15s   \n"," "," "," ",loc_legend[8]);
	fprintf(fp," %-15s %-12s %-40s %-15s %-20s %-19s   %-10s\n",loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[9],loc_legend[13],loc_legend[14],loc_legend[15]);
	fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
	fflush(fp);  
	lctr = 8;
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;


	l_report_width=133;
	l_acc_entity_length = strlen(hosp_name.arr);

	//Code for Line 1
	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	fprintf(fp,"MDL           : BL");
	l_start_point=l_start_point-18;
	print_spaces(l_start_point);
	fprintf(fp,"%s",hosp_name.arr);
	l_comp_name_end_point=l_start_point+18+l_acc_entity_length;
	l_start_point=(l_report_width-(15+strlen(date.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);

	fprintf(fp,"%-15.15s : %s\n",loc_legend[5],date.arr);

	//Code for Line 2
	if (nd_trn_type == 'R')
	{
	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[1]))/2));
	fprintf(fp,"OPR           : %s",user_id.arr);
	l_start_point=l_start_point-(strlen(user_id.arr)+16);
	print_spaces(l_start_point);
	fprintf(fp,"%s",loc_legend[1]);
	l_comp_name_end_point=l_start_point+(strlen(user_id.arr)+16)+strlen(loc_legend[1]);
	l_start_point=(l_report_width-(17+strlen(date_time.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);

	fprintf(fp,"%-15.15s : %s\n",loc_legend[6],date_time.arr);
    }
	else
    {
	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[18]))/2));
	fprintf(fp,"OPR           : %s",user_id.arr);
	l_start_point=l_start_point-(strlen(user_id.arr)+16);
	print_spaces(l_start_point);
	fprintf(fp,"%s",loc_legend[18]);
	l_comp_name_end_point=l_start_point+(strlen(user_id.arr)+16)+strlen(loc_legend[18]);
	l_start_point=(l_report_width-(17+strlen(date_time.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);

	fprintf(fp,"%-15.15s : %s\n",loc_legend[6],date_time.arr);
    }


	//Code for Line 3
	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-((strlen(fm_date)+strlen(to_date)+strlen(loc_legend[3])+strlen(loc_legend[4])+3)/2));
	fprintf(fp,"%-14.14s: BLR00011",loc_legend[2]);
	l_start_point=l_start_point-24;
	print_spaces(l_start_point);
	fprintf(fp,"%s %s ",loc_legend[3],fm_date);
	fprintf(fp,"%s %s",loc_legend[4],to_date);
	l_comp_name_end_point=l_start_point+24+strlen(loc_legend[3])+strlen(fm_date)+strlen(loc_legend[4])+strlen(to_date)+3;
	l_start_point=(l_report_width-(17+9)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp," %-15.15s : %d\n",loc_legend[7],++pctr);
	
}

fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","-");
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	date.arr[0]		 = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
	date.len		 = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/RRRR'),
					TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    USER
               INTO :hosp_name, 
					:date,
					:date_time, 
					:user_id
               FROM SY_ACC_ENTITY
	          WHERE ACC_ENTITY_ID = :nd_facility;

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	date.arr[date.len]					   = '\0';
	user_id.arr[user_id.len]               = '\0';

}




print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
    }
}                        

check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+10;

	if((lctr+l_lead_lines)> 55) 
	{
		fprintf(fp,"\f");
		print_head();
		lctr = 8;
	}
}

print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}




fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00011.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}




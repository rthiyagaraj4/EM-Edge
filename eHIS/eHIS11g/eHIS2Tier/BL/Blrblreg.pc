/************************************************************************/
/* OCS MEDICOM VER 2.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRBLREG.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 26-AUG-1993                                  */
/* Converted To Windows  : Prasad B G S          4/7/96                 */
/* Modified by / Date    : V. Srikanth           12/04/1999             */
/* Modified by / Date    : Irfan J.S             06/03/2000             */
/* Modified by / Date    : Irfan J.S             28/03/2000             */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */ 
/*                                                                      */
/*  TABLE DETAILS                                                       */    
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>        

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])

/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [91],
			nd_pwd [91],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
			nd_cc_facility_id						   [3],
			nd_pre_facility_id						   [3],
			nd_op_facility_id							[3],
			nd_cash_counter_code						[3],
			nd_pre_cash_counter_code					[3],
			nd_prd_fm                                  [11],
			nd_prd_to									[11],
            nd_epi_type                                [2],
            nd_fm_date                                 [12],
            nd_to_date                                 [12],
            nd_fm_date_prn                             [12],
            nd_to_date_prn                             [12],
            nd_fm_doc_type_code                        [7],
            nd_to_doc_type_code                        [7],
            nd_fm_doc_num                              [9],
            nd_to_doc_num                              [9],
			nd_fm_cust_code							   [9],
			nd_to_cust_code							   [9],
			nd_fm_blng_grp							   [3],
			nd_to_blng_grp							   [3],
			nd_patient_no_fm						   [21],
		    nd_patient_no_to						   [21],
            nd_show_bill                               [2],  
			nd_operating_facility_id				   [3],
			nd_fr_cashcounter						   [3],
			nd_to_cashcounter                          [3],
			nd_fr_facility							   [3],  
			nd_to_facility							   [3],
            d_short_name_full                          [61],
            bl_patient_name_loc_lang                   [61],
            bl_patient_name                            [61],  
            bl_patient_name1                           [61],
            bl_locn_desc                               [41],  
            bl_prt_grp_desc                            [41];   
            
   VARCHAR bl_hdr_episode_type                         [2],
           bl_hdr_doc_type_code                        [7],
           bl_hdr_doc_num                              [9],
           bl_hdr_doc_date                             [13],
           bl_hdr_bill_trx_type_code                   [2],
           bl_hdr_bill_nature_code                     [2],
           bl_hdr_bill_status                          [2],
           bl_hdr_overall_disc_amt                     [23],
           bl_hdr_bill_amt                             [23],
           bl_hdr_bill_prv_outst_amt                   [23],
           bl_hdr_bill_tot_amt                         [23],
           bl_hdr_bill_hosp_tot_amt                    [23],
           bl_hdr_bill_drfee_tot_amt                   [23],
           bl_hdr_prepay_adj_amt                       [23],
           bl_hdr_deposit_adj_amt                      [23],
           bl_hdr_serv_locn_code                       [5],
           bl_hdr_episode_id                           [9],
           bl_hdr_visit_id                             [5],
           bl_hdr_patient_id                           [21],
		   bl_hdr_shift_id							   [2];

   VARCHAR bl_line_prt_grp_hdr_code                    [3],
           bl_line_prt_grp_line_code                   [3],
           bl_line_gross_amt                           [23],
           bl_line_serv_disc_amt                       [23],
           bl_line_man_disc_amt                        [23],
           bl_line_man_disc_perc                       [15],
           bl_line_net_amt                             [23],
		   			nd_temp_date				[21],
			p_language_id				[3],
			date_convert				[21],
			nd_loc_date					[21];

/*------------ 
  SCF 355 VARIABLES 
-------------------*/

	VARCHAR m_doc_type_code								[7],
			d_doc_type_code								[7],
            d_bill_nature_code							[2],
			d_bill_status								[2],
			nd_bill_status								[2];
    
	double  d_bill_tot_amt;

	int     first;

/*--------------
  SCF 355 VARIABLES OVER
  ------------------------*/

double     bl_hdr_bill_tot_amt_db,
           bl_hdr_bill_hosp_tot_amt_db,
           bl_hdr_bill_drfee_tot_amt_db,

           epi_tot_tot_amt_db,
           epi_tot_hosp_tot_amt_db,
           epi_tot_drfee_tot_amt_db,

           grn_tot_tot_amt_db,
           grn_tot_hosp_tot_amt_db,
           grn_tot_drfee_tot_amt_db,

           bl_line_gross_amt_db,
           bl_line_serv_disc_amt_db,
           bl_line_man_disc_amt_db,
           bl_line_net_amt_db,

           tot_valid_cash,
           tot_valid_credit,
           tot_cancel_cash,
           tot_cancel_credit,
	   bl_hdr_bill_tot_adjust_amt  , //EPNH 28/10/2004
           bl_hdr_bill_tot_exempt_amt  ,
           bl_hdr_bill_tot_write_off_amt    ; 

char filename[150];
char string_var[200];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

char       store_episode_type                          [2];

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    
	
    strcpy(g_pgm_id,"BLRBLREG");
    strcpy(nd_pwd.arr,argv[1]);
	 nd_pwd.len = strlen(nd_pwd.arr);

	 EXEC sql connect :nd_pwd;
	  
	  if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }
	set_meduser_role(); 
	strcpy(p_language_id.arr,l_language_id.arr);
	p_language_id.len = l_language_id.len;

/*

    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }
*/
    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

 
    start_prog_msg();

    fetch_prog_param();
    declare_cur();
    fetch_hosp_name();
    open_file();
     
    open_hdr();

    tot_valid_cash   = 0;
    tot_valid_credit = 0;
    tot_cancel_cash  = 0;
    tot_cancel_credit  = 0;
	

    while(fetch_hdr())
    {
     print_rec(1);
    }  
	open_doc_hdr();
    print_grand_tot();

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

}


fetch_prog_param()
{

    nd_epi_type.arr[0]                  = '\0';
    nd_fm_date.arr[0]                   = '\0';
    nd_to_date.arr[0]                   = '\0';
    nd_fm_doc_type_code.arr[0]          = '\0';
    nd_to_doc_type_code.arr[0]          = '\0';
    nd_fm_doc_num.arr[0]                = '\0';
    nd_to_doc_num.arr[0]                = '\0';
    nd_fm_date_prn.arr[0]               = '\0';
    nd_to_date_prn.arr[0]               = '\0';
	nd_fm_cust_code.arr[0]				= '\0';
	nd_to_cust_code.arr[0]				= '\0';
	nd_fm_blng_grp.arr[0]				= '\0';
	nd_to_blng_grp.arr[0]				= '\0';
	nd_patient_no_fm.arr[0]				= '\0';			  
	nd_patient_no_to.arr[0]				= '\0';		
	nd_fr_facility.arr[0]				= '\0';			  
	nd_to_facility.arr[0]				= '\0';		
	nd_fr_cashcounter.arr[0]			= '\0';
	nd_to_cashcounter.arr[0]			= '\0';
	nd_operating_facility_id.arr[0]     = '\0';
	nd_prd_fm.arr[0]					= '\0';
	nd_prd_to.arr[0]                    = '\0';

    nd_epi_type.len                     = 0;
    nd_fm_date.len                      = 0;
    nd_to_date.len                      = 0;
    nd_fm_doc_type_code.len             = 0;
    nd_to_doc_type_code.len             = 0;
    nd_fm_doc_num.len                   = 0;
    nd_to_doc_num.len                   = 0;
    nd_fm_date_prn.len                  = 0;
    nd_to_date_prn.len                  = 0;
	nd_fm_cust_code.len					= 0;
	nd_to_cust_code.len					= 0;
	nd_fm_blng_grp.len					= 0;
	nd_to_blng_grp.len					= 0;
	nd_patient_no_fm.len				= 0;
	nd_patient_no_to.len				= 0;
	nd_fr_facility.len					= 0;			  
	nd_to_facility.len					= 0;		
	nd_fr_cashcounter.len				= 0;
	nd_to_cashcounter.len				= 0;
	nd_operating_facility_id.len        = 0;
	nd_prd_fm.len                       = 0;
	nd_prd_to.len                       = 0;


/*-- Y2K correction. Format introduced for 'FROM AND TO' Date prn variable
     as DD/MM/YYYY in form itself. So, no need to format again below also
	 VSK 14/11/1999 */
/*   Added addtl paramerts to cater for patients range Irfan.J.S 06/03/2000 */

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,PARAM3,PARAM4,
                   PARAM5,PARAM6,PARAM7,PARAM2,PARAM3,
//                 TO_CHAR(TO_DATE(PARAM2,'DD-MON-YY'),'DD/MM/YYYY'),
//                 TO_CHAR(TO_DATE(PARAM3,'DD-MON-YY'),'DD/MM/YYYY'),
				   PARAM8,PARAM9,PARAM10,PARAM11,PARAM12,PARAM13,PARAM14,
				   PARAM15, PARAM16, PARAM17, PARAM18
              INTO :nd_operating_facility_id,
				   :nd_epi_type, 
                   :nd_fm_date,          :nd_to_date,
                   :nd_fm_doc_type_code, :nd_to_doc_type_code,
                   :nd_fm_doc_num,       :nd_to_doc_num,
                   :nd_fm_date_prn,      :nd_to_date_prn,
				   :nd_fm_cust_code,	 :nd_to_cust_code,
				   :nd_fm_blng_grp,		 :nd_to_blng_grp,
				   :nd_patient_no_fm,    :nd_patient_no_to,
				   :nd_bill_status,
				   :nd_fr_cashcounter,   :nd_to_cashcounter,
				   :nd_fr_facility,      :nd_to_facility

              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_epi_type.arr[nd_epi_type.len]                   = '\0';
   nd_fm_date.arr[nd_fm_date.len]                     = '\0';
   nd_to_date.arr[nd_to_date.len]                     = '\0';
   nd_fm_doc_type_code.arr[nd_fm_doc_type_code.len]   = '\0';
   nd_to_doc_type_code.arr[nd_to_doc_type_code.len]   = '\0';
   nd_fm_doc_num.arr[nd_fm_doc_num.len]               = '\0';
   nd_to_doc_num.arr[nd_to_doc_num.len]               = '\0';
   nd_fm_date_prn.arr[nd_fm_date_prn.len]             = '\0';
   nd_to_date_prn.arr[nd_to_date_prn.len]             = '\0';
   nd_fm_cust_code.arr[nd_fm_cust_code.len]			  = '\0';
   nd_to_cust_code.arr[nd_to_cust_code.len]			  = '\0';
   nd_fm_blng_grp.arr[nd_fm_blng_grp.len]			  = '\0';
   nd_to_blng_grp.arr[nd_to_blng_grp.len]			  = '\0';
   nd_patient_no_fm.arr[nd_patient_no_fm.len]		  = '\0';
   nd_patient_no_to.arr[nd_patient_no_to.len]		  = '\0';
   nd_operating_facility_id.arr[nd_operating_facility_id.len]='\0';
   nd_fr_facility.arr[nd_fr_facility.len]             = '\0';
   nd_to_facility.arr[nd_to_facility.len]             = '\0';   
   nd_fr_cashcounter.arr[nd_fr_cashcounter.len]       = '\0';   
   nd_fr_cashcounter.arr[nd_fr_cashcounter.len]       = '\0';
   nd_prd_fm.arr[nd_prd_fm.len]						  = '\0';
   nd_prd_to.arr[nd_prd_to.len]						  = '\0';


   strcpy(g_facility_id, nd_operating_facility_id.arr);

   EXEC SQL DELETE SY_PROG_PARAM
            WHERE PGM_ID     = :d_curr_pgm_name
            AND SESSION_ID = :nd_session_id
            AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

/*-- Y2K correction. Format introduced for 'FROM AND TO' Date 
     as DD/MM/YYYY VSK 15/11/1999 */

     EXEC SQL DECLARE BL_BILL_HDR_CUR CURSOR FOR
               SELECT EPISODE_TYPE,
			          PATIENT_ID,
					  SHIFT_ID,
					  to_char(TRUNC(DOC_DATE),'DD-MON-YY'),
					  DOC_TYPE_CODE,
                      DOC_NUM,
                      BILL_TRX_TYPE_CODE,
                      BILL_NATURE_CODE,
                      NVL(BILL_STATUS,'X'),
                      EPISODE_ID,
                      VISIT_ID,
					  NVL(BILL_AMT,0),
					  CASH_COUNTER_CODE,
					  CASH_COUNTER_FACILITY_ID,
					  OPERATING_FACILITY_ID,
					  NVL(BILL_TOT_ADJUST_AMT,0),   // EPNH 28/10/2004  
                                          NVL(BILL_TOT_EXEMPT_AMT,0),    
                                          NVL(BILL_TOT_WRITE_OFF_AMT,0)  


                 FROM BL_BILL_HDR
/* -- SCF 86 VSK 12/04/1999 New parameters in Where clause (Custcode/Blng grp id) */
/* -- SCF 355 Irfan.J.S 06/03/2000 New parameters in Where clause (Patient id and to include all episodes) */
                 WHERE BLNG_GRP_ID BETWEEN :nd_fm_blng_grp AND :nd_to_blng_grp AND 
					   (CUST_CODE IS NULL OR (CUST_CODE IS NOT NULL AND CUST_CODE BETWEEN :nd_fm_cust_code AND :nd_to_cust_code)) AND
					   TRUNC(DOC_DATE)  BETWEEN
                       NVL(TO_DATE(:nd_fm_date,'DD/MM/YYYY'),to_date('00010101',
                                    'YYYYDDMM'))          AND 
                       NVL(TO_DATE(:nd_to_date,'DD/MM/YYYY'),to_date('47123112',
                                    'YYYYDDMM'))     AND 
					   EPISODE_TYPE = DECODE(:nd_epi_type,'A',EPISODE_TYPE,:nd_epi_type) AND
					   PATIENT_ID  BETWEEN NVL(:nd_patient_no_fm,'!!!!!!!!!!!!!!!!!!!!') AND  NVL(:nd_patient_no_to,'~~~~~~~~~~~~~~~~~~~~') AND
					   RPAD(DOC_TYPE_CODE,6,' ')|| LPAD(DOC_NUM,8,'0')
                       BETWEEN
                       RPAD(NVL(:nd_fm_doc_type_code,' '),6,' ')||
                       LPAD(NVL(:nd_fm_doc_num,0),8,'0')      AND
                       RPAD(NVL(:nd_to_doc_type_code,'~~~~~~'),6,' ')||
                       LPAD(NVL(:nd_to_doc_num,99999999),8,'0')   AND 
					   (NVL(BILL_STATUS,'X') =  DECODE(:nd_bill_status,'C','C','A',NVL(BILL_STATUS,'X'))
					     OR ((NVL(BILL_STATUS,'X') =  DECODE(:nd_bill_status,'V',NVL(BILL_STATUS,'X')) AND  NVL(BILL_STATUS,'X') != 'C') ))
				       AND NVL(BILL_STATUS,'X') != 'S'
					   AND  CASH_COUNTER_CODE BETWEEN NVL(ltrim(rtrim(substr(:nd_fr_cashcounter,1,2))),'  ')
				                        AND NVL(ltrim(rtrim(substr(:nd_to_cashcounter,1,2))),'~~')
					   AND OPERATING_FACILITY_ID  BETWEEN NVL(ltrim(rtrim(substr(:nd_fr_facility,1,2))),'  ')
				                        AND  NVL(ltrim(rtrim(substr(:nd_to_facility,1,2))),'~~')
					   /* 6/8/2001 Irfan corrected for valid,canceled,all bill 
					   (BILL_STATUS IS NULL
                        OR  BILL_STATUS = 'C' OR BILL_STATUS = 'D' OR
                        BILL_STATUS = 'A')  */
				ORDER BY OPERATING_FACILITY_ID, CASH_COUNTER_CODE,
					   EPISODE_TYPE,PATIENT_ID,TRUNC(DOC_DATE),DOC_TYPE_CODE,DOC_NUM;
                 //ORDER BY DOC_DATE,DOC_TYPE_CODE,DOC_NUM;
  
/*-- CURSOR TO PRINT THE DOCUMENT WISE BREAK TOTAL ALONG WITH GRAND TOTAL
     AHD REQUIREMENT ON SCF 355 */

     EXEC SQL DECLARE BL_BILL_HDR_DOC_CUR CURSOR FOR
		SELECT  DOC_TYPE_CODE,
				BILL_NATURE_CODE,
				NVL(BILL_STATUS,'X'),
				SUM(NVL(BILL_AMT,0)),
				CASH_COUNTER_CODE,
				OPERATING_FACILITY_ID
				//SUM(NVL(BILL_TOT_AMT,0))
		FROM    BL_BILL_HDR
		WHERE 	BLNG_GRP_ID BETWEEN :nd_fm_blng_grp AND :nd_to_blng_grp AND 
				(CUST_CODE IS NULL OR (CUST_CODE IS NOT NULL AND CUST_CODE BETWEEN :nd_fm_cust_code AND :nd_to_cust_code)) AND
				TRUNC(DOC_DATE)  BETWEEN
                   NVL(TO_DATE(:nd_fm_date,'DD/MM/YYYY'),to_date('00010101',
                                'YYYYDDMM'))          AND 
                   NVL(TO_DATE(:nd_to_date,'DD/MM/YYYY'),to_date('47123112',
                                'YYYYDDMM'))     AND 
				EPISODE_TYPE = DECODE(:nd_epi_type,'A',EPISODE_TYPE,:nd_epi_type) AND
				PATIENT_ID  BETWEEN NVL(:nd_patient_no_fm,'!!!!!!!!!!') AND     NVL(:nd_patient_no_to,'~~~~~~~~~~') AND
			    RPAD(DOC_TYPE_CODE,6,' ')|| LPAD(DOC_NUM,8,'0')
                       BETWEEN
                       RPAD(NVL(:nd_fm_doc_type_code,' '),6,' ')||
                       LPAD(NVL(:nd_fm_doc_num,0),8,'0')      AND
                       RPAD(NVL(:nd_to_doc_type_code,'~~~~~~'),6,' ')||
                       LPAD(NVL(:nd_to_doc_num,99999999),8,'0')   AND 
					   (NVL(BILL_STATUS,'X') =  DECODE(:nd_bill_status,'C','C','A',NVL(BILL_STATUS,'X'))
					     OR ((NVL(BILL_STATUS,'X') =  DECODE(:nd_bill_status,'V',NVL(BILL_STATUS,'X')) AND  NVL(BILL_STATUS,'X') != 'C') ) )
				        AND NVL(BILL_STATUS,'X') != 'S'
						AND  CASH_COUNTER_CODE BETWEEN NVL(ltrim(rtrim(substr(:nd_fr_cashcounter,1,2))),'  ')
				                        AND NVL(ltrim(rtrim(substr(:nd_to_cashcounter,1,2))),'~~')
						AND  OPERATING_FACILITY_ID  BETWEEN NVL(ltrim(rtrim(substr(:nd_fr_facility,1,2))),'  ')
				                        AND  NVL(ltrim(rtrim(substr(:nd_to_facility,1,2))),'~~')
						/* 6/8/2001 Irfan corrected for valid,canceled,all bill 
					    (BILL_STATUS IS NULL
                        OR  BILL_STATUS = 'C' OR BILL_STATUS = 'D' OR
                        BILL_STATUS = 'A')  */ 
                 GROUP BY OPERATING_FACILITY_ID, CASH_COUNTER_CODE,
					   DOC_TYPE_CODE,BILL_NATURE_CODE,NVL(BILL_STATUS,'X');

   
    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              SELECT SUBSTR(SHORT_NAME_LOC_LANG,1,16),
                     /*SUBSTR(SHORT_NAME,1,25),
					 decode(substr(short_name,26,60),NULL,' ',substr(short_name,28,60)) shortname2 ,
                    */
					short_name
                FROM MP_PATIENT_MAST
                WHERE PATIENT_ID = :bl_hdr_patient_id;
}

open_hdr()
{
    EXEC SQL OPEN BL_BILL_HDR_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_BILL_HDR_CUR",0,"");
}

fetch_hdr()
{
bl_hdr_episode_type.arr[0]                                        = '\0';
bl_hdr_doc_type_code.arr[0]                                       = '\0';
bl_hdr_doc_num.arr[0]                                             = '\0';
bl_hdr_doc_date.arr[0]                                            = '\0';
bl_hdr_bill_trx_type_code.arr[0]                                  = '\0';
bl_hdr_bill_nature_code.arr[0]                                    = '\0';
bl_hdr_bill_status.arr[0]                                         = '\0';
bl_hdr_overall_disc_amt.arr[0]                                    = '\0';
bl_hdr_bill_amt.arr[0]                                            = '\0';
bl_hdr_bill_prv_outst_amt.arr[0]                                  = '\0';
bl_hdr_bill_tot_amt.arr[0]                                        = '\0';
bl_hdr_bill_hosp_tot_amt.arr[0]                                   = '\0';
bl_hdr_bill_drfee_tot_amt.arr[0]                                  = '\0';
bl_hdr_prepay_adj_amt.arr[0]                                      = '\0';
bl_hdr_deposit_adj_amt.arr[0]                                     = '\0';
bl_hdr_serv_locn_code.arr[0]                                      = '\0';
bl_hdr_episode_id.arr[0]                                          = '\0';
bl_hdr_visit_id.arr[0]                                            = '\0';
bl_hdr_patient_id.arr[0]                                          = '\0';
bl_hdr_shift_id.arr[0]                                            = '\0';

bl_hdr_episode_type.len                                           = 0;
bl_hdr_doc_type_code.len                                          = 0;
bl_hdr_doc_num.len                                                = 0;
bl_hdr_doc_date.len                                               = 0;
bl_hdr_bill_trx_type_code.len                                     = 0;
bl_hdr_bill_nature_code.len                                       = 0;
bl_hdr_bill_status.len                                            = 0;
bl_hdr_overall_disc_amt.len                                       = 0;
bl_hdr_bill_amt.len                                              = 0;
bl_hdr_bill_prv_outst_amt.len                                     = 0;
bl_hdr_bill_tot_amt.len                                           = 0;
bl_hdr_bill_hosp_tot_amt.len                                      = 0;
bl_hdr_bill_drfee_tot_amt.len                                     = 0;
bl_hdr_prepay_adj_amt.len                                         = 0;
bl_hdr_deposit_adj_amt.len                                        = 0;
bl_hdr_serv_locn_code.len                                         = 0;
bl_hdr_episode_id.len                                             = 0;
bl_hdr_visit_id.len                                               = 0;
bl_hdr_patient_id.len                                             = 0;
bl_hdr_bill_tot_amt_db                                            = 0;
bl_hdr_shift_id.len												  =0;

      EXEC SQL FETCH BL_BILL_HDR_CUR
               INTO :bl_hdr_episode_type,
			        :bl_hdr_patient_id,
					:bl_hdr_shift_id,
					:bl_hdr_doc_date,
                    :bl_hdr_doc_type_code,
                    :bl_hdr_doc_num,
                    :bl_hdr_bill_trx_type_code,
                    :bl_hdr_bill_nature_code,
                    :bl_hdr_bill_status,
                    :bl_hdr_episode_id,
                    :bl_hdr_visit_id,
                    :bl_hdr_bill_tot_amt_db,
					:nd_cash_counter_code,
					:nd_cc_facility_id,
					:nd_op_facility_id,
      			   	        :bl_hdr_bill_tot_adjust_amt , //EPNH 28/10/2004
                                	:bl_hdr_bill_tot_exempt_amt  ,
                                        :bl_hdr_bill_tot_write_off_amt               ; 



       if (OERROR)
            err_mesg("FETCH failed on cursor BL_BILL_HDR_CUR",0,"");

bl_hdr_episode_type.arr[bl_hdr_episode_type.len]                         = '\0';
bl_hdr_doc_type_code.arr[bl_hdr_doc_type_code.len]                       = '\0';
bl_hdr_doc_num.arr[bl_hdr_doc_num.len]                                   = '\0';
bl_hdr_doc_date.arr[bl_hdr_doc_date.len]                                 = '\0';
bl_hdr_bill_trx_type_code.arr[bl_hdr_bill_trx_type_code.len]             = '\0';
bl_hdr_bill_nature_code.arr[bl_hdr_bill_nature_code.len]                 = '\0';
bl_hdr_bill_status.arr[bl_hdr_bill_status.len]                           = '\0';
bl_hdr_overall_disc_amt.arr[bl_hdr_overall_disc_amt.len]                 = '\0';
bl_hdr_bill_amt.arr[bl_hdr_bill_amt.len]                                 = '\0';
bl_hdr_bill_prv_outst_amt.arr[bl_hdr_bill_prv_outst_amt.len]             = '\0';
bl_hdr_bill_tot_amt.arr[bl_hdr_bill_tot_amt.len]                         = '\0';
bl_hdr_bill_hosp_tot_amt.arr[bl_hdr_bill_hosp_tot_amt.len]               = '\0';
bl_hdr_bill_drfee_tot_amt.arr[bl_hdr_bill_drfee_tot_amt.len]             = '\0';
bl_hdr_prepay_adj_amt.arr[bl_hdr_prepay_adj_amt.len]                     = '\0';
bl_hdr_deposit_adj_amt.arr[bl_hdr_deposit_adj_amt.len]                   = '\0';
bl_hdr_serv_locn_code.arr[bl_hdr_serv_locn_code.len]                     = '\0';
bl_hdr_episode_id.arr[bl_hdr_episode_id.len]                             = '\0';
bl_hdr_visit_id.arr[bl_hdr_visit_id.len]                                 = '\0';
bl_hdr_patient_id.arr[bl_hdr_patient_id.len]                             = '\0';
bl_hdr_shift_id.arr[bl_hdr_shift_id.len]								 = '\0';
nd_cash_counter_code.arr[nd_cash_counter_code.len]                         = '\0';
nd_cc_facility_id.arr[nd_cc_facility_id.len]                         = '\0';
nd_op_facility_id.arr[nd_op_facility_id.len]                         = '\0';


    return(LAST_ROW?0:1);
}

open_doc_hdr()
{
    EXEC SQL OPEN BL_BILL_HDR_DOC_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_BILL_HDR_DOC_CUR",0,"");
}

fetch_doc_hdr()
{

d_doc_type_code.arr[0]                                       = '\0';
d_bill_nature_code.arr[0]                                    = '\0';
d_bill_status.arr[0]                                         = '\0';

d_doc_type_code.len                                          = 0;
d_bill_nature_code.len                                       = 0;
d_bill_status.len                                            = 0;

d_bill_tot_amt = 0.0;


      EXEC SQL FETCH BL_BILL_HDR_DOC_CUR
               INTO :d_doc_type_code,
                    :d_bill_nature_code,
                    :d_bill_status,
                    :d_bill_tot_amt,
					:nd_cash_counter_code,
					:nd_op_facility_id;
                      
       if (OERROR)
            err_mesg("FETCH failed on cursor BL_BILL_HDR_DOC_CUR",0,"");
  
d_doc_type_code.arr[d_doc_type_code.len]                                    = '\0';
d_bill_nature_code.arr[d_bill_nature_code.len]                              = '\0';
d_bill_status.arr[d_bill_status.len]                                        = '\0';
return(LAST_ROW?0:1);
}


fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_name1.arr[0]                    = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_name1.len                       = 0;

    EXEC SQL FETCH BL_PAT_NAME_CUR
             INTO :bl_patient_name_loc_lang,
                  /*:bl_patient_name,
				  :bl_patient_name1,*/
                   :d_short_name_full;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_name1.arr[bl_patient_name1.len] = '\0';
      d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name1    := :bl_patient_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_name1.arr[bl_patient_name1.len]  = '\0';


}



print_rec(ind)
int ind;
{
  if (lctr > 65) {
     print_head(1);
     //fprintf(fp,"\n");
     lctr = 13;

 
  }
  fetch_dtls();
  /*  fprintf(fp,"%s %s/%-8s/%s  %-20s %-20.20s %s/%s/%s ",
                    bl_hdr_doc_date.arr,
                    bl_hdr_doc_type_code.arr,
                    bl_hdr_doc_num.arr,
                    bl_hdr_bill_trx_type_code.arr,
                    bl_hdr_patient_id.arr,
                    bl_patient_name.arr,
                    bl_hdr_episode_type.arr,
                    bl_hdr_episode_id.arr,
                    bl_hdr_visit_id.arr); */
 
 /*--For notations width spedified to maintain the width even there is 
     less value VSL 08/05/1999 */

  /*       if (lctr > 51)
               print_head(1);
*/
       if (!nd_pre_facility_id.arr)
         {
          strcpy(nd_pre_facility_id.arr,nd_op_facility_id.arr);
          strcpy(nd_pre_cash_counter_code.arr,nd_cash_counter_code.arr);
         }
       if (strcmp(nd_pre_facility_id.arr,nd_op_facility_id.arr)!=0) 
          {
            strcpy(nd_pre_facility_id.arr,nd_op_facility_id.arr);
            fprintf(fp,"\nFacility Id :  %2s\n" ,nd_op_facility_id.arr);          
            lctr++;
			lctr++;
            nd_pre_cash_counter_code.arr[0] = '\0';	    
          }

       if (strcmp(nd_pre_cash_counter_code.arr,nd_cash_counter_code.arr)!=0)
          {
            strcpy(nd_pre_cash_counter_code.arr,nd_cash_counter_code.arr);
            fprintf(fp,"\nCash Counter Code  :  %2s\n" ,nd_cash_counter_code.arr);          
            lctr++;
			lctr++;
          }   
  
   		  init_date_temp_var();                              
	      strcpy(date_convert.arr,bl_hdr_doc_date.arr);    
          fun_change_loc_date_format();
		//fprintf(fp,"%-10s %-6s/%-8s/%-1s %-10s %-27s %-1s/%-9s/%-5s",
	fprintf(fp,"%-2s %-9.9s %-6s/%-8s/%-1s %-20.20s %-25.25s %-s/%-8s/%-4s %-1s",
                    nd_op_facility_id.arr, 
					date_convert.arr,
					//bl_hdr_doc_date.arr, 
                    bl_hdr_doc_type_code.arr, 
                    bl_hdr_doc_num.arr, 
                    bl_hdr_bill_trx_type_code.arr, 
                    bl_hdr_patient_id.arr, 
                    bl_patient_name.arr, 
                    bl_hdr_episode_type.arr,     
                    bl_hdr_episode_id.arr, 
					bl_hdr_visit_id.arr, 
					bl_hdr_shift_id.arr);  

     fprintf(fp,"  ");
     print_formated(bl_hdr_bill_tot_adjust_amt);  //EPNH 28/10/2004
     fprintf(fp," ");
     print_formated(bl_hdr_bill_tot_exempt_amt);
     fprintf(fp," ");
     print_formated(bl_hdr_bill_tot_write_off_amt);

    
    if(strcmp(bl_hdr_bill_status.arr,"C") == 0) 
      {
       ncancel = ncancel + 1;       ;
       if(strcmp(bl_hdr_bill_nature_code.arr,"C")==0) {
          tot_cancel_cash  = tot_cancel_cash + bl_hdr_bill_tot_amt_db;
          fprintf(fp,"                                ");
          print_formated(bl_hdr_bill_tot_amt_db);
          fprintf(fp,"\n");
         }
        else if(strcmp(bl_hdr_bill_nature_code.arr,"A") ==0) {
          tot_cancel_credit  = tot_cancel_credit + bl_hdr_bill_tot_amt_db;
          fprintf(fp,"                                               ");
          print_formated(bl_hdr_bill_tot_amt_db);
          fprintf(fp,"\n");
         }
      }
    else 
      {
       nvalid = nvalid + 1;
       if(strcmp(bl_hdr_bill_nature_code.arr,"C")==0) { 
          tot_valid_cash   = tot_valid_cash + bl_hdr_bill_tot_amt_db;
          print_formated(bl_hdr_bill_tot_amt_db); 
          fprintf(fp,"\n");
         }
       else if(strcmp(bl_hdr_bill_nature_code.arr,"A") ==0)
         {
          tot_valid_credit = tot_valid_credit + bl_hdr_bill_tot_amt_db;
          fprintf(fp,"                ");
          print_formated(bl_hdr_bill_tot_amt_db);
          fprintf(fp,"\n");
         }
       
       } 
if(strlen(bl_patient_name1.arr) > 2)
{
 fprintf(fp,"%52s %s \n"," ",bl_patient_name1.arr);
 lctr++;
}

 

    lctr+=1;  
      
}  
print_grand_tot()
{
    if (lctr > 65)
       print_head(0);

    fprintf(fp,"%140s               -------------  ---------------  --------------  -------------\n"," ");
	fprintf(fp,"%112s %-7s  TOTAL          :            "," "," GRAND");
    print_formated(tot_valid_cash);    
    print_formated(tot_valid_credit);  
    print_formated(tot_cancel_cash);   
    print_formated(tot_cancel_credit); 
    fprintf(fp,"\n");
    fprintf(fp,"%140s               -------------  ---------------  --------------  -------------\n"," ");
    lctr +=3;

	first = 1;
	m_doc_type_code.arr[0] = '\0';
	tot_valid_cash = 0;
	tot_valid_credit = 0;
	tot_cancel_cash = 0;
	tot_cancel_credit = 0;
	
	while(fetch_doc_hdr())
	{
		if (first)
		{
			strcpy(m_doc_type_code.arr,d_doc_type_code.arr);
			first = 0;
		}

	   
	   if(strcmp(m_doc_type_code.arr,d_doc_type_code.arr) != 0) 
	   {
			 if (lctr > 65)
					print_head(0);
    fprintf(fp,"%140s               -------------  ---------------  --------------  -------------\n"," ");
			fprintf(fp,"%112s(%-7s) TOTAL          :            "," ",m_doc_type_code.arr);
			print_formated(tot_valid_cash);   
			print_formated(tot_valid_credit); 
			print_formated(tot_cancel_cash); 
			print_formated(tot_cancel_credit); 
			fprintf(fp,"\n");
    fprintf(fp,"%140s               -------------  ---------------  --------------  -------------\n"," ");
			lctr +=3;
			strcpy(m_doc_type_code.arr,d_doc_type_code.arr);	
			tot_valid_cash = 0;
			tot_valid_credit = 0;
			tot_cancel_cash = 0;
			tot_cancel_credit = 0;

	   }
	   
	    
	    if(strcmp(d_bill_status.arr,"C") == 0) 
		{
			if(strcmp(d_bill_nature_code.arr,"C")==0) 
				tot_cancel_cash  = tot_cancel_cash + d_bill_tot_amt;
			else if(strcmp(d_bill_nature_code.arr,"A") ==0) 
	            tot_cancel_credit  = tot_cancel_credit + d_bill_tot_amt;
		} 
	    else 
		{
	       if(strcmp(d_bill_nature_code.arr,"C")==0)  
				tot_valid_cash   = tot_valid_cash + d_bill_tot_amt;
	       else if(strcmp(d_bill_nature_code.arr,"A") ==0)
		        tot_valid_credit = tot_valid_credit + d_bill_tot_amt;
        }
        
	   
   }

   if (lctr > 65)
		print_head(0);
    fprintf(fp,"%140s               -------------  ---------------  --------------  -------------\n"," ");
			fprintf(fp,"%112s(%-7s) TOTAL          :            "," ",m_doc_type_code.arr);
			print_formated(tot_valid_cash);  
			print_formated(tot_valid_credit);
			print_formated(tot_cancel_cash);  
			print_formated(tot_cancel_credit); 
			fprintf(fp,"\n");
    fprintf(fp,"%140s               -------------  ---------------  --------------  -------------\n"," ");
			lctr +=3;
			strcpy(m_doc_type_code.arr,d_doc_type_code.arr);	
			tot_valid_cash = 0;
			tot_valid_credit = 0;
			tot_cancel_cash = 0;
			tot_cancel_credit = 0;

   fprintf(fp,"\n\n");
   lctr +=2;
   fprintf(fp,"%165sNUMBER OF VALID BILLS    : %d\n"," ",nvalid);
   fprintf(fp,"%165sNUMBER OF CANCELLED BILLS: %d\n"," ",ncancel);
                
}


end_of_rep()
{
fprintf(fp,"\n\n                                                      ***  END OF REPORT ***\n\f");
fflush(fp);
}

open_file()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"blrblreg.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrblreg.lis");
       proc_exit();
    }
    print_title();
    print_head(0);
}

print_title()
{
/*fprintf(fp,
"MDL : BL                                         %-30s                                       %-16s\n",
hosp_name.arr,date_time.arr);*/
		  init_date_temp_var();                              
	      strcpy(date_convert.arr,date_time.arr);      
	      fun_change_loc_date_time();

fprintf(fp,
"MDL : BL                                         %-30s                                       %-16s\n",
hosp_name.arr,date_convert.arr);

fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                                PAGE : %4d\n",
"BLRBLREG","                   BILL REGISTER                     ",++pctr);
fprintf(fp,
"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
if (nd_epi_type.arr[0] == 'I') 
    fprintf(fp,"\t\t        EPISODE TYPE          :%s\n"," INPATIENTS");
	else if (nd_epi_type.arr[0] == 'O') 
    fprintf(fp,"\t\t        EPISODE TYPE          :%s\n"," OUTPATIENTS");
	else if (nd_epi_type.arr[0] == 'R') 
    fprintf(fp,"\t\t        EPISODE TYPE          :%s\n"," REFERRALS");
	else if (nd_epi_type.arr[0] == 'A') 
    fprintf(fp,"\t\t        EPISODE TYPE          :%s\n"," ALL PATIENTS");
	else if (nd_epi_type.arr[0] == 'D')   //EPNH 28/10/2004
    fprintf(fp,"\t\t        EPISODE TYPE          :%s\n"," DAY CARE");
	else if (nd_epi_type.arr[0] == 'E')   //EPNH 28/10/2004
    fprintf(fp,"\t\t        EPISODE TYPE          :%s\n"," EMERGENCY");


fprintf(fp,"\n");
	
if (nd_fm_date_prn.arr[0] == '\0') 
	fprintf(fp,"\t\t        BILL DATE        FROM :%s\n"," LOWEST");
	else
	{
		  init_date_temp_var();                              
	      strcpy(date_convert.arr,nd_fm_date_prn.arr);      
	      fun_change_loc_date();

	//fprintf(fp,"\t\t        BILL DATE        FROM :%-10s\n",nd_fm_date_prn.arr);
	fprintf(fp,"\t\t        BILL DATE        FROM :%-10.10s\n",date_convert.arr);
	}
	if (nd_to_date_prn.arr[0] == '\0') 
    fprintf(fp,"\t\t                         TO   :%s\n\n"," HIGHEST");
	else
	{
		  init_date_temp_var();                              
	      strcpy(date_convert.arr,nd_to_date_prn.arr);      
	      fun_change_loc_date();
//	fprintf(fp,"\t\t                         TO   :%-10s\n\n",nd_to_date_prn.arr);
	fprintf(fp,"\t\t                         TO   :%-10.10s\n\n",date_convert.arr);
    }
if (nd_fm_doc_type_code.arr[0] == '\0' ||  nd_fm_doc_num.arr[0] == '\0' ) 
	fprintf(fp,"\t\t        DOC TYPE/NUMBER  FROM : %s\n","LOWEST");
	else
	fprintf(fp,"\t\t        DOC TYPE/NUMBER  FROM : %4s - %4s\n",nd_fm_doc_type_code.arr,nd_fm_doc_num.arr);
	
	if (nd_to_doc_type_code.arr[0] == '\0' || nd_to_doc_num.arr[0] == '\0') 
    fprintf(fp,"\t\t                         TO   : %s\n\n","HIGHEST");
	else
	fprintf(fp,"\t\t                         TO   : %4s - %4s\n",nd_to_doc_type_code.arr,nd_to_doc_num.arr);
	

//fprintf(fp,"                  EPISODE TYPE         : %s\n\n",nd_epi_type.arr);
//fprintf(fp,"                  BILL DATE       FROM : %s\n",nd_fm_date_prn.arr);
//fprintf(fp,"                                  TO   : %s\n\n",nd_to_date_prn.arr);
//fprintf(fp,"                  BILL DOC TYPE   FROM : %s\n",nd_fm_doc_type_code.arr);
//fprintf(fp,"                                  TO   : %s\n\n",nd_to_doc_type_code.arr);
//fprintf(fp,"                  BILL NUMBER     FROM : %s\n",nd_fm_doc_num.arr);
//fprintf(fp,"                                  TO   : %s\n\n",nd_to_doc_num.arr);

/* -- SCF 86 VSK 12/04/1999 New parameters in front sheet */

if (nd_fm_cust_code.arr[0] == '!')
	fprintf(fp,"\t\t        CUSTOMER CODE    FROM : %s\n","LOWEST ");
else
	fprintf(fp,"\t\t        CUSTOMER CODE    FROM : %s\n",nd_fm_cust_code.arr);

if (nd_to_cust_code.arr[0] == '~')
	fprintf(fp,"\t\t                         TO   : %s\n\n","HIGHEST");
else
	fprintf(fp,"\t\t                         TO   : %s\n\n",nd_to_cust_code.arr);

if (nd_fm_blng_grp.arr[0] == '!')
	fprintf(fp,"\t\t        BILLING GROUP    FROM : %s\n","LOWEST");
else
	fprintf(fp,"\t\t        BILLING GROUP    FROM : %s\n",nd_fm_blng_grp.arr);

if (nd_to_blng_grp.arr[0] == '~')
	fprintf(fp,"\t\t                         TO   : %s\n\n","HIGHEST");
else
	fprintf(fp,"\t\t                         TO   : %s\n\n",nd_to_blng_grp.arr);

if (nd_patient_no_fm.arr[0] == '\0') 
	fprintf(fp,"\t\t        PATIENT NO       FROM : %s\n","LOWEST");
else
	fprintf(fp,"\t\t        PATIENT NO       FROM : %-12s\n",nd_patient_no_fm.arr);
	
if (nd_patient_no_to.arr[0] == '\0') 
    fprintf(fp,"\t\t                         TO   : %s\n\n","HIGHEST");
else
    fprintf(fp,"\t\t                         TO   : %-12s\n\n",nd_patient_no_to.arr);

if (nd_fr_facility.arr[0] == '\0') 
	fprintf(fp,"\t\t        FACILITY ID      FROM : %s\n","LOWEST");
else
	fprintf(fp,"\t\t        FACILITY ID      FROM : %-12s\n",nd_fr_facility.arr);
	
if (nd_to_facility.arr[0] == '\0') 
    fprintf(fp,"\t\t                         TO   : %s\n\n","HIGHEST");
else
    fprintf(fp,"\t\t                         TO   : %-12s\n\n",nd_to_facility.arr);

if (nd_fr_cashcounter.arr[0] == '\0') 
	fprintf(fp,"\t\t        CASH COUNTER     FROM : %s\n","LOWEST");
else
	fprintf(fp,"\t\t        CASH COUNTER     FROM : %-12s\n",nd_fr_cashcounter.arr);
	
if (nd_fr_cashcounter.arr[0] == '\0') 
    fprintf(fp,"\t\t                         TO   : %s\n\n","HIGHEST");
else
    fprintf(fp,"\t\t                         TO   : %-12s\n\n",nd_fr_cashcounter.arr);

if (nd_bill_status.arr[0] == 'C') 
	fprintf(fp,"\t\t        BILLS                 : %s\n","CANCELLED BILLS");

if (nd_bill_status.arr[0] == 'V') 
	fprintf(fp,"\t\t        BILLS                 : %s\n","VALID BILLS");

if (nd_bill_status.arr[0] == 'A') 
	fprintf(fp,"\t\t        BILLS                 : %s\n","ALL BILLS");


fprintf(fp,"\n");

}


print_head(l_flg)
int l_flg;
{
/*fprintf(fp,
"\fMDL : BL                                         %-30s                                       %-16s\n",
hosp_name.arr,date_time.arr);*/
		  init_date_temp_var();                              
	      strcpy(date_convert.arr,date_time.arr);      
	      fun_change_loc_date_time();

fprintf(fp,
"\fMDL : BL                                         %-30s                                       %-16s\n",
hosp_name.arr,date_convert.arr);

fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                                PAGE : %4d\n",
"BLRBLREG","                     BILL REGISTER                   ",++pctr);

 if (nd_fm_date_prn.arr[0] == '\0') 
     strcpy(nd_prd_fm.arr,"LOWEST");
 else
 {
     		  init_date_temp_var();                              
	      strcpy(date_convert.arr,nd_fm_date_prn.arr);      
	      fun_change_loc_date(); 
	 //strcpy(nd_prd_fm.arr,nd_fm_date_prn.arr);
   }
fprintf(fp,"                                           FOR THE PERIOD (%-10.10s TO", 
               date_convert.arr);


  if (nd_fm_date_prn.arr[0] == '\0') 
      strcpy(nd_prd_to.arr,"HIGHEST");
  else
  {     		  init_date_temp_var();                              
	      strcpy(date_convert.arr,nd_to_date_prn.arr);      
	      fun_change_loc_date();

      //strcpy(nd_prd_to.arr,date_convert.arr);
	 }
fprintf(fp," %-10.10s)\n",date_convert.arr);

//fprintf(fp,"                                           FOR THE PERIOD (%-10.10s TO %-10.10s)\n",
/*             nd_fm_date_prn.arr,nd_to_date_prn.arr);*/
             //  date_convert.arr, nd_prd_to.arr);

fprintf(fp,"---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"FAC. BILL       BILL NUMBER       PATIENT NO & NAME                            EPISODE TYPE  SHIFT    BILL ADJ AMT    BILL EXM AMT        BILL WRT OFF       VALID BILLS --------->      CANCELLED BILLS ------------>\n");
fprintf(fp,"ID   DATE       NUMBER & TYPE                                                  /ID VISIT NO   NO                                                               CASH         CREDIT            CASH            CREDIT  \n");
fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 13;
}


fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

/*-- Y2K correction. Format introduced for year as YYYY instead of YY 
     VSK 14/11/1999 */

    EXEC SQL SELECT ACCOUNTING_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
             INTO :hosp_name, :date_time, :user_id
             FROM SY_ACC_ENTITY
			 WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}
/*
print_formated(loc_amount)
double loc_amount;
{
   char out_str[15],out_str1[15];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
      str_comma(out_str);
      sprintf(out_str1,"%15s",out_str);
      fprintf(fp,"%-15s",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",loc_amount);
      str_comma(out_str);
      sprintf(out_str1,"%15s",out_str);
      fprintf(fp,"%-15s",out_str1);
   }
}
*/
print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        strcat(s_amt,"-");
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s ",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s ",str_amt);
        }

}                        

fun_change_loc_date_time()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date_time();


strcpy(date_convert.arr,nd_loc_date.arr);


}

init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}

get_local_date_time()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	

	:nd_loc_date :=  	sm_convert_datetime_2t(to_date(:nd_temp_date,'DD/MM/RRRR HH24:MI'),:p_language_id);  

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	

	:nd_loc_date :=  	sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/RRRR HH24:MI'),:p_language_id);  
 	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date();


strcpy(date_convert.arr,nd_loc_date.arr);


}

get_local_date_format()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	

	:nd_loc_date :=  	sm_convert_date_2t(to_date(:nd_temp_date,'DD-MON-rr'),:p_language_id);  
	:nd_loc_date :=     to_char(to_date(:nd_temp_date,'DD-MON-rr'),'DD-MON-rr');
 	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

fun_change_loc_date_format()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date_format();


strcpy(date_convert.arr,nd_loc_date.arr);


}

/*--------- OVER -------------*/
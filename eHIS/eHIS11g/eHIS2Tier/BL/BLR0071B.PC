/************************************************************************/
/*  MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR0071B.PC                                  */
/* AUTHOR                : Robert Joseph                               */  
/* DATE WRITTEN          : 18/08/2005                                   */      
/************************************************************************/
          


#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define MAX_LINES 62
/*
#define DEBUG 0
*/
#define ESC 0x1B




EXEC SQL BEGIN DECLARE SECTION;  


VARCHAR  
			hosp_name                       [120],
			date							[20],
            date_time                       [20],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
			d_curr_pgm_name                 [15],
			nd_facility				        [3], 
			nd_acct_code					[11],
			nd_dept_code					[11],
			nd_fm_date						[15],
            nd_month						[18],
			nd_year							[5],
			cost_centre                      [11],
			d_currency						[9],

		 bl_batch_doc_type				[7],		
		 bl_doc_date					[16],		
		 bl_doc_no						[21],
		 p_language_id                   [3],	
			 
		
			l_translated_value				[201],
			l_pk_value						[100];
	 
		double bl_debit_amt=0,bl_credit_amt=0,tot_debit=0,tot_credit=0;
      
int i,sl_no=0;
char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200],arg_cnt[5];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;
int    first = 1,r_fst = 1;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLR0071B");

    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);    

    EXEC sql connect :nd_pwd;


	  
    if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 
        
    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

		strcpy(p_language_id.arr,l_language_id.arr);
	    p_language_id.len = l_language_id.len;

	  
             
	         nd_acct_code.arr[0]		= '\0';
             //nd_dept_code.arr[0]		= '\0';
			 nd_fm_date.arr[0]			= '\0';
             nd_month.arr[0]			= '\0';
			 nd_year.arr[0]				= '\0';


            nd_acct_code.len		    = 0;
			//nd_dept_code.len			= 0;
	        nd_fm_date.len				= 0;
          	nd_month.len				= 0;
			nd_year.len					= 0;

        EXEC SQL SELECT	NVL(PARAM1,'ZZ'),PARAM2,to_char(to_date(PARAM2,'MM-YYYY'),'fmMonth YYYY'),to_char(to_date(PARAM2,'MM-YYYY'),'YYYY')
			INTO :nd_acct_code,
                 //:nd_dept_code,
				 :nd_fm_date,
				 :nd_month,
				 :nd_year				
				FROM SY_PROG_PARAM
            WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;
 
  nd_acct_code.arr[nd_acct_code.len]		= '\0';
 //nd_dept_code.arr[nd_dept_code.len]		= '\0';
  nd_fm_date.arr[nd_fm_date.len]			= '\0';
   nd_month.arr[nd_month.len]	= '\0';
  nd_year.arr[nd_year.len]	= '\0';


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");


   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

       
 

	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
  

     	declare_cursor();
     

		fetch_hosp_name();

		fetch_cost_centre();


		fetch_legend_value();

    	open_file();
          
       open_hosp_cur();

fprintf(fp,"%c&a2L",ESC); 	/* To Set the Left margin  		*/
fprintf(fp, "%c(s12.5H", ESC);/* Reduce the font size*/

     //print_front_end();

     print_page_title();

	 print_head();

   while (fetch_hosp_cur())
     {
	 sl_no=sl_no+1;
      fprintf(fp,"%5d %-13s %-20s %-20s",sl_no,bl_doc_date.arr,bl_doc_no.arr," ");
	  print_formated(bl_debit_amt);
      print_formated(bl_credit_amt);
	  tot_debit=tot_debit+bl_debit_amt;
      tot_credit=tot_credit+bl_credit_amt;
          fprintf(fp,"\n");  lctr=lctr+1;
        check_page_end(8,0);   
	}   
       

print_tail();


fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/
fprintf(fp, "%c(s12H", ESC);/* Reduce the font size*/
  fill_dash(90);
  fprintf(fp,"\n");lctr=lctr+1;
 fprintf(fp,"%45s %10s "," ",loc_legend[19]);
print_formated(tot_debit);
print_formated(tot_credit);
  fprintf(fp,"\n");lctr=lctr+1;
  fill_dash(90);
    fprintf(fp,"\n\n");lctr=lctr+2;
 fprintf(fp,"%32s"," ");
fprintf(fp,"%20s : ____________________\n\n",loc_legend[12]);lctr=lctr+2;

fprintf(fp,"%-12s : _______________",loc_legend[18]);
 fprintf(fp,"%2s"," ");
fprintf(fp,"%20s : ____________________\n\n",loc_legend[13]);lctr=lctr+2;
 fprintf(fp,"%32s"," ");
fprintf(fp,"%20s : ____________________\n",loc_legend[14]);lctr=lctr+1;

fprintf(fp,"%c(s-3B",ESC); /* release bold style */



  EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,""); 

  fclose(fp);
fprintf(fp,"%cE",ESC); /* To Reset the Printer */

}

declare_cursor()
  {

 EXEC SQL DECLARE HOSP_CUR CURSOR FOR 
       Select BANK_IN_BATCH_DOC_TYPE,
	          BANK_IN_DATE,
			  BANK_IN_DOC_NO,
			  decode(DR_CR_IND,'DR',ACCT_CODE_AMT,0),
			  decode(DR_CR_IND,'CR',ACCT_CODE_AMT,0)                    
	 	    From  BL_BANK_IN_BY_ACCT_CODE 
		Where 
			NVL(EXT_ACCT_CODE,'ZZ') =:nd_acct_code and
		//	Nvl(ext_acct_dept_code,'XX')=:nd_dept_code and
		//  to_char(nvl(bank_in_date,sysdate),'RRRRMM')  <= TO_CHAR(TO_DATE(:nd_fm_date,'MM-RRRR'),'RRRRMM')  and
	    	TRUNC(nvl(bank_in_date,sysdate))  <= TRUNC(LAST_DAY(TO_DATE(:nd_fm_date,'MM-YYYY')))  and
	    	nvl(reconciled_ind,'N')='N' and
			bank_in_date is not null
        Order by BANK_IN_DATE;
  
 }

open_hosp_cur()
{


	EXEC SQL OPEN HOSP_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor HOSP_CUR",0,"");
}

close_hosp_cur()
{

	EXEC SQL CLOSE HOSP_CUR;
    
}


 fetch_hosp_cur()
  {

            bl_batch_doc_type.arr[0]	='\0';		
			bl_doc_date.arr[0]			='\0';			
			bl_doc_no.arr[0]			='\0';		
			bl_debit_amt				=0;
            bl_credit_amt				=0;
         
		    bl_batch_doc_type.len			=0;		
			bl_doc_date.len					=0;		
			bl_doc_no.len					=0;		

								  
          EXEC SQL FETCH HOSP_CUR INTO
                     :bl_batch_doc_type,		
					 :bl_doc_date,	
					 :bl_doc_no,
					 :bl_debit_amt,	
					 :bl_credit_amt;

 if (OERROR)
          err_mesg("FETCH failed on cursor HOSP_CUR",0,"");

            bl_batch_doc_type.arr[bl_batch_doc_type.len]			='\0';		
			bl_doc_date.arr[bl_doc_date.len]						='\0';			
			bl_doc_no.arr[bl_doc_no.len]							='\0';		
						 
 
           
       return(LAST_ROW?0:1);

     }


   open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR0071B.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR0071B.lis");
       proc_exit();
    }
}


print_front_end()
{
 
 print_page_title();
    fill_dash(93);
    fprintf(fp,"\nVER : 4.1\n");
   	fprintf(fp,"\n\n\n        INPUT PARAMETERS :\n\n");
	if(strcmp(nd_acct_code.arr,"ZZ")==0)
    fprintf(fp,"%25s :%-s\n",loc_legend[22],loc_legend[24]);
	else
   	fprintf(fp,"%25s :%-s\n",loc_legend[22],nd_acct_code.arr);
   // if(strcmp(nd_dept_code.arr,"XX")==0)
   // fprintf(fp,"%25s :%-s\n",loc_legend[23],loc_legend[24]);
	//else
	//fprintf(fp,"%25s :%-s\n",loc_legend[23],nd_dept_code.arr);   
	     
    fprintf(fp,"\f");  
  } 

print_page_title()
{


	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;

    lctr=0;
    l_start_point=0;
	l_report_width=93;
	l_acc_entity_length = strlen(hosp_name.arr);

fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/

	l_start_point=0;

	l_start_point=ceill((l_report_width/2)-(strlen(loc_legend[5])/2));
    print_spaces(l_start_point);
  fprintf(fp,"%s\n",loc_legend[5]);  lctr=lctr+1;

	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-(strlen(loc_legend[6])/2));
   print_spaces(l_start_point);
  fprintf(fp,"%s\n",loc_legend[6]);  lctr=lctr+1;
  
  fill_dash(93);

  fprintf(fp,"\n");lctr=lctr+1;
  	l_start_point=0;

	l_start_point=ceill((l_report_width/2)-30);
	print_spaces(l_start_point);
    fprintf(fp,"%30s : %s\n",loc_legend[3],nd_month.arr);  lctr=lctr+1;

   //Line  3

  	l_start_point=0;
    l_start_point=ceill((l_report_width/2)-30);
    print_spaces(l_start_point);
    fprintf(fp,"%30s : %-s \n",loc_legend[1],hosp_name.arr);  lctr=lctr+1;

   //Line  4

  	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-30);
      print_spaces(l_start_point);
    fprintf(fp,"%30s : %-s \n",loc_legend[2],cost_centre.arr);  lctr=lctr+1;


   //Line  5

  	l_start_point=0;

	   l_start_point=ceill((l_report_width/2)-30);
        print_spaces(l_start_point);
    fprintf(fp,"%30s : %-s \n",loc_legend[22],nd_acct_code.arr);  lctr=lctr+1;


fprintf(fp,"%c(s-3B",ESC); /* release bold style */
  	
}

           
print_head()
          {
		  fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/
	  fill_dash(93);
		   fprintf(fp,"\n");  lctr=lctr+1;

		   fprintf(fp,"%-5s %-13s %-20s %-20s       %15s(%-s\n",loc_legend[4],loc_legend[8],loc_legend[9],loc_legend[23],loc_legend[24],d_currency.arr);
            lctr=lctr+1;

		   fprintf(fp,"%-5s %-13s %-20s %-20s %14s   %14s\n"," "," "," "," ",loc_legend[10],loc_legend[11]);

		     lctr=lctr+1;
		   fill_dash(93);
		   fprintf(fp,"\n");  lctr=lctr+1;
	
 		     fprintf(fp,"%c(s-3B",ESC); /* release bold style */
			 
		   }

 
fetch_hosp_name()
   {
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	date.arr[0]		 = '\0';
    user_id.arr[0]   = '\0';
	d_currency.arr[0]      = '\0';

    hosp_name.len    = 0;
    date_time.len    = 0;
	date.len		 = 0;
    user_id.len      = 0;
	d_currency.len   =0;     

   // EXEC SQL SELECT ACCOUNTING_NAME, 
    EXEC SQL SELECT ACC_ENTITY_NAME,
					TO_CHAR(SYSDATE,'DD/MM/RRRR'),
					TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    USER,BASE_CURRENCY||')' currency
               INTO :hosp_name, 
					:date,
					:date_time, 
					:user_id,
					:d_currency
               FROM SY_ACC_ENTITY
	          WHERE ACC_ENTITY_ID = :nd_facility;  

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	date.arr[date.len]					   = '\0';
	user_id.arr[user_id.len]               = '\0';
	d_currency.arr[d_currency.len]         = '\0';

}



fetch_cost_centre()
 {

   cost_centre.arr[0] = '\0';
   cost_centre.len  =0;
	 EXEC SQL SELECT  COST_CENTRE_CODE    INTO :cost_centre  FROM
		BL_PARAMETERS  Where	
	    OPERATING_FACILITY_ID=:nd_facility;
	  
   if (OERROR) 
		err_mesg("SELECT failed on table BL_PARAMETERS",0,"");

   cost_centre.arr[cost_centre.len] = '\0';

  }



print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
    }
}                        


print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}


fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","-");
}

fill_line(flg)
{
  int j;
  for (j=1;j<=flg;j++)
	fprintf(fp,"%s","_");
}

print_tail()
 {
 int k;
 for(k=lctr;k<=(MAX_LINES-8);k++)
   {
     fprintf(fp,"\n");
	 lctr=lctr+1;
	 }
 }

fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR0071B.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+12;

	if((lctr+l_lead_lines)> 62) 
	{
    	fprintf(fp,"\f");
		
	  print_page_title();
 
	    print_head();
	   
		//lctr=4;
	}
}




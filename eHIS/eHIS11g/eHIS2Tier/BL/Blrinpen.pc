/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRINPEN.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 15-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                        */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                                      
#include <stdio.h>
#include <string.h>
#include "bl.h"

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
/*
#define DEBUG 0
*/

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [91],
			nd_pwd                                     [91],
            row_id                                     [25],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
            nd_from_adm_no                             [9],
            nd_to_adm_no                               [9],
			nd_operating_facility_id				   [3];

    int     nd_no_of_days,
            bl_no_of_days;

   VARCHAR bl_ip_open_patient_id                       [21],
           bl_ip_open_episode_id                       [9],

           bl_ip_admission_date_time                   [15],

           bl_patient_name_loc_lang                    [61],
           bl_patient_name                             [61],
		   bl_patient_name1                            [61];

   VARCHAR bl_pat_org_doc_type_code                    [7],
           bl_pat_org_doc_num                          [9],
           bl_pat_org_doc_date                         [13],
           bl_pat_doc_outst_amt_prn                    [23],
           bl_pat_doc_amt_prn                          [23];

  double   bl_pat_doc_outst_amt,
           bl_tot_bill_paid_amt,
           bl_bill_paid_rem_amt,
           bl_pat_doc_amt,
           bl_doc_outst_amt,
           bl_pat_outst_amt,
           bl_pat_outst_doc_amt;

EXEC SQL END DECLARE SECTION;

  double adm_amt_tot,
         adm_amt_outst_tot,
         grand_amt_tot,
         grand_amt_outst_tot;

  int    tot_admissions = 0;

  int    lctr = 0,pctr = 0;

char filename[150];

FILE *fp;  

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0;

    if (argc < 4)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRINPEN");
    strcpy(nd_pwd.arr,argv[1]);
	 nd_pwd.len = strlen(nd_pwd.arr);

	 EXEC sql connect :nd_pwd;
	  
	  if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }
	set_meduser_role(); 


    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    start_prog_msg();

    fetch_prog_param();
    declare_cur();
    fetch_hosp_name();
    open_file();
     
    open_ip_open_episode();

    while(fetch_ip_open_episode())
    {
       fetch_ip_episode();
       fetch_financial_dtl();
       bl_bill_paid_rem_amt = bl_tot_bill_paid_amt;
       open_pat_ledger();

       adm_amt_tot   = 0;
       adm_amt_outst_tot   = 0;
       rec_ctr = 0;

       while(fetch_pat_ledger())
       {
           bl_pat_outst_amt = bl_pat_doc_amt;
           bl_doc_outst_amt = bl_pat_outst_amt;
           if (bl_bill_paid_rem_amt > 0) 
           {
             if (bl_pat_outst_amt < bl_bill_paid_rem_amt) 
             {
               bl_doc_outst_amt = 0;
               bl_bill_paid_rem_amt -= bl_pat_outst_amt;
              }
             else
             {
               bl_doc_outst_amt = bl_pat_outst_amt-bl_bill_paid_rem_amt;
               bl_bill_paid_rem_amt -= bl_pat_outst_amt;
             }
           }
           update_inhouse_bill_outst();
           if (bl_doc_outst_amt != 0 &&  bl_no_of_days > nd_no_of_days)
           { 
               if (!rec_ctr) print_rec(0);
               rec_ctr++;
               print_rec(1);
           }
       }
       if (rec_ctr)
           print_adm_tot();
    }

    print_grand_tot();

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

fetch_prog_param()
{
   nd_from_adm_no.arr[0]   = '\0';
   nd_to_adm_no.arr[0]     = '\0';

   nd_from_adm_no.len      = 0;
   nd_to_adm_no.len        = 0;

   nd_no_of_days           = 0;


   EXEC SQL SELECT  OPERATING_FACILITY_ID,
					PARAM1,PARAM2,nvl(PARAM3,0)
              INTO :nd_operating_facility_id, 
			       :nd_from_adm_no,
                   :nd_to_adm_no,
                   :nd_no_of_days
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   nd_from_adm_no.arr[nd_from_adm_no.len] = '\0';
   nd_to_adm_no.arr[nd_to_adm_no.len]     = '\0';

   strcpy(g_facility_id,nd_operating_facility_id.arr);

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

     EXEC SQL DECLARE IP_OPEN_EPISODE_CUR CURSOR FOR
               SELECT OPEN_EPISODE_ID,
                      PATIENT_ID
                 FROM IP_OPEN_EPISODE
                WHERE OPEN_EPISODE_ID BETWEEN
                      NVL(:nd_from_adm_no,0) AND NVL(:nd_to_adm_no,99999999)
				AND   FACILITY_ID    = :nd_operating_facility_id
                ORDER BY OPEN_EPISODE_ID;

     EXEC SQL DECLARE IP_EPISODE_CUR CURSOR FOR
               SELECT TO_CHAR(ADMISSION_DATE_TIME,'DD/MM/YYYY')
                 FROM IP_EPISODE
                WHERE EPISODE_ID = :bl_ip_open_episode_id
				AND   FACILITY_ID = :nd_operating_facility_id;

     EXEC SQL DECLARE BL_PAT_LEDGER_CUR CURSOR FOR
               SELECT DOC_TYPE_CODE,
                      DOC_NUMBER,
                      TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                      TO_CHAR(DOC_OUTST_AMT,'999,999,990.99'),
                      DOC_OUTST_AMT,
                      TO_CHAR(DOC_AMT,'999,999,990.99'), 
                      DOC_AMT,
                      NVL((SYSDATE - DOC_DATE),0),
                      ROWID
                 FROM BL_INHOUSE_BILL   
                WHERE EPISODE_TYPE in ('I','D') 
				  AND OPERATING_FACILITY_ID = :nd_operating_facility_id
                  AND EPISODE_ID = :bl_ip_open_episode_id
                  AND PATIENT_ID = :bl_ip_open_patient_id
         /*       AND TRX_TYPE_CODE = '1'
                  AND NVL(DOC_OUTST_AMT,0) != 0;  */
                  AND BILL_TRX_TYPE_CODE = 'I'
         /*       AND SYSDATE - ORG_DOC_DATE > NVL(:nd_no_of_days,0)  */
                  ORDER BY DOC_DATE, DOC_TYPE_CODE, DOC_NUMBER;

    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              SELECT SUBSTR(SHORT_NAME_LOC_LANG,1,16),
                     SUBSTR(SHORT_NAME,1,30),
					 decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname2
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_ip_open_patient_id;

    EXEC SQL DECLARE BL_EPISODE_FIN_CUR CURSOR FOR
              SELECT NVL(TOT_BILLS_PAID_AMT,0)
                FROM BL_EPISODE_FIN_DTLS
               WHERE EPISODE_TYPE in ('I','D') 
                 AND EPISODE_ID   = :bl_ip_open_episode_id
				 AND OPERATING_FACILITY_ID = :nd_operating_facility_id;

}

open_ip_open_episode()
{
    EXEC SQL OPEN IP_OPEN_EPISODE_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor IP_OPEN_EPISODE_CUR",0,"");
}

open_ip_episode()
{
    EXEC SQL OPEN IP_EPISODE_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor IP_EPISODE_CUR",0,"");
}

open_pat_ledger()
{
    EXEC SQL OPEN BL_PAT_LEDGER_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_PAT_LEDGER_CUR",0,"");
}

fetch_ip_open_episode()
{
   bl_ip_open_episode_id.arr[0]  = '\0';
   bl_ip_open_patient_id.arr[0]  = '\0';

   bl_ip_open_episode_id.len     = 0;
   bl_ip_open_patient_id.len     = 0;

    EXEC SQL FETCH IP_OPEN_EPISODE_CUR
              INTO :bl_ip_open_episode_id,
                   :bl_ip_open_patient_id;

    if (OERROR)
         err_mesg("FETCH failed on cursor IP_OPEN_EPISODE_CUR",0,"");

    bl_ip_open_episode_id.arr[bl_ip_open_episode_id.len] = '\0';
    bl_ip_open_patient_id.arr[bl_ip_open_patient_id.len] = '\0';

    return(LAST_ROW?0:1);
}

fetch_ip_episode()
{
     open_ip_episode();

bl_ip_admission_date_time.arr[0]                                  = '\0';
bl_ip_admission_date_time.len                                     = 0;

     EXEC SQL FETCH IP_EPISODE_CUR
               INTO :bl_ip_admission_date_time;

     if (OERROR)
         err_mesg("FETCH failed on cursor IP_EPISODE_CUR",0,"");

bl_ip_admission_date_time.arr[bl_ip_admission_date_time.len]             = '\0';

return(ROW_COUNT);
}

fetch_pat_ledger()
{

bl_pat_org_doc_type_code.arr[0]                                   = '\0';
bl_pat_org_doc_num.arr[0]                                         = '\0';
bl_pat_org_doc_date.arr[0]                                        = '\0';
bl_pat_doc_outst_amt_prn.arr[0]                                   = '\0';
bl_pat_doc_amt_prn.arr[0]                                         = '\0';
row_id.arr[0]                                                     = '\0';

bl_pat_org_doc_type_code.len                                      = 0;
bl_pat_org_doc_num.len                                            = 0;
bl_pat_org_doc_date.len                                           = 0;
bl_pat_doc_outst_amt_prn.len                                      = 0;
bl_pat_doc_amt_prn.len                                            = 0;
row_id.len                                                        = 0;

bl_pat_doc_outst_amt                                              = 0;
bl_pat_doc_amt                                                    = 0;

     EXEC SQL FETCH BL_PAT_LEDGER_CUR
               INTO :bl_pat_org_doc_type_code,
                    :bl_pat_org_doc_num,
                    :bl_pat_org_doc_date,
                    :bl_pat_doc_outst_amt_prn,
                    :bl_pat_doc_outst_amt,
                    :bl_pat_doc_amt_prn,
                    :bl_pat_doc_amt,
                    :bl_no_of_days,
                    :row_id;

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_LEDGER_CUR",0,"");

bl_pat_org_doc_type_code.arr[bl_pat_org_doc_type_code.len]               = '\0';
bl_pat_org_doc_num.arr[bl_pat_org_doc_num.len]                           = '\0';
bl_pat_org_doc_date.arr[bl_pat_org_doc_date.len]                         = '\0';
bl_pat_doc_outst_amt_prn.arr[bl_pat_doc_outst_amt_prn.len]               = '\0';
bl_pat_doc_amt_prn.arr[bl_pat_doc_amt_prn.len]                           = '\0';
row_id.arr[row_id.len]                                                   = '\0';

    return(LAST_ROW?0:1);
}

fetch_financial_dtl()
{
bl_tot_bill_paid_amt     = 0;

     EXEC SQL OPEN BL_EPISODE_FIN_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor BL_EPISODE_FIN_CUR",0,"");

     EXEC SQL FETCH BL_EPISODE_FIN_CUR
               INTO :bl_tot_bill_paid_amt ;   

     if (OERROR)
         err_mesg("FETCH failed on cursor BL_EPISODE_FIN_CUR",0,"");
     
}

update_inhouse_bill_outst()
{

     EXEC SQL SELECT ROWID
                into :row_id
                FROM BL_INHOUSE_BILL       
                WHERE ROWID = :row_id   
                 FOR UPDATE OF DOC_OUTST_AMT;

     if (OERROR)
         err_mesg("SELECT failed on table BL_INHOUSE_BILL",0,"");

     if (NOT_FOUND)
         err_mesg("Record not found in BL_INHOUSE_BILL",0,"");

     row_id.arr[row_id.len] = '\0';

     EXEC SQL UPDATE BL_INHOUSE_BILL 
                 SET DOC_OUTST_AMT = :bl_doc_outst_amt   
               WHERE ROWID = :row_id;

      if (OERROR)
         err_mesg("UPDATE failed on table BL_INHOUSE_BILL",0,"");
}

fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;

   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_name1.arr[0]                    = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_name1.len                       = 0;

    EXEC SQL FETCH BL_PAT_NAME_CUR
              INTO :bl_patient_name_loc_lang,
                   :bl_patient_name,
				   :bl_patient_name1;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_name1.arr[bl_patient_name1.len] = '\0';
}

print_rec(ind)
int ind;
{

   if (lctr > 53)
       print_head();

  fetch_dtls();

  if (ind == 0)
  {
      tot_admissions++;
      fprintf(fp,"%8s %-10s %-20s %-16.16s %-30.30s\n",
           bl_ip_open_episode_id.arr,
           bl_ip_admission_date_time.arr,
           bl_ip_open_patient_id.arr,
           bl_patient_name_loc_lang.arr,
           bl_patient_name.arr);

	  if(strlen(bl_patient_name1.arr) > 2)
		{
		 fprintf(fp,"%57s %s \n\n"," ",bl_patient_name1.arr);
		 lctr++;
		}
	  else
	    fprintf(fp,"\n");

     lctr+=2;
  }
  else
  {
      fprintf(fp,"        %-6s %8s %-10s ",
              bl_pat_org_doc_type_code.arr,
              bl_pat_org_doc_num.arr,
              bl_pat_org_doc_date.arr);
	  print_formated(bl_pat_doc_amt);
//              bl_pat_doc_amt_prn.arr);
      print_formated(bl_doc_outst_amt);fprintf(fp,"\n");
     lctr++;
     adm_amt_tot         += bl_pat_doc_amt;
 /*  adm_amt_outst_tot   += bl_pat_doc_outst_amt;  */
     adm_amt_outst_tot   += bl_doc_outst_amt;  
  }
  fflush(fp);
}

print_adm_tot()
{
   if (lctr > 50)
       print_head();

      fprintf(fp,"\n                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n");
      fprintf(fp,"                      Total        ");
      print_formated(adm_amt_tot);fprintf(fp," ");
      print_formated(adm_amt_outst_tot);fprintf(fp,"\n");
      fprintf(fp,"                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n\n");
      lctr +=5;
      grand_amt_tot         += adm_amt_tot;
      grand_amt_outst_tot   += adm_amt_outst_tot;

}  

print_grand_tot()
{
   if (lctr > 50)
       print_head();

      fprintf(fp,"\n              Number of Admissions ");
      fprintf(fp,"   %12d\n",tot_admissions);
      fprintf(fp,"\n                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n");
      fprintf(fp,"              Grand Total          ");
      print_formated(grand_amt_tot);fprintf(fp," ");
      print_formated(grand_amt_outst_tot);fprintf(fp,"\n");
      fprintf(fp,"                                   ");
      fprintf(fp,"--------------------------------------------------------------------------------------------------\n\n");
      lctr +=5;

}

end_of_rep()
{
fprintf(fp,"\n\n                                                      ***  END OF REPORT ***\n");
fflush(fp);
}

open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"blrinpen.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrinpen.lis");
       proc_exit();
    }
    print_title();
    print_head();
}

print_title()
{
fprintf(fp,
"MDL : BL                                         %-30s                                        %-16s\n",
hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                               PAGE : %4d\n",
"BLRINPEN","INHOUSE BILLS OUTSTANDING FOR MORE THAN SPECIFIED DAYS",
++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
fprintf(fp,"                  ADMISSION NO    FROM : %s\n",nd_from_adm_no.arr);
fprintf(fp,"                                   TO  : %s\n\n",nd_to_adm_no.arr);
fprintf(fp,"                  NO OF DAYS           : %d\n\n",nd_no_of_days);

}
print_head()
{
fprintf(fp,
"\fMDL : BL                                         %-30s                                        %-16s\n",
hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                               PAGE : %4d\n",
"BLRINPEN","INHOUSE BILLS OUTSTANDING FOR MORE THAN SPECIFIED DAYS",++pctr);
fprintf(fp,"            NO. OF DAYS : %d\n",nd_no_of_days);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,
"ADM  NO. ADM DATE   PATIENT NO LOCAL   NAME     NAME\n");
fprintf(fp,
"        BILL NUMBER     BILL DATE           AMOUNT     OUTST AMOUNT\n");
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 11;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

/*-- Y2K correction. Format introduced for year as YYYY instead of YY 
     VSK 15/11/1999 */

    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY
			   WHERE  ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
        //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
                //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }
}
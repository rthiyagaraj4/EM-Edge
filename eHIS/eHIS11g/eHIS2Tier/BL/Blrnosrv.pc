  
/************************************************************************/
/* OCS MEDICOM VER 2.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRNOSRV.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 26-AUG-1993                                  */
/* Modified By			 : V. Srikanth									*/
/*						   (Billing Service Summary Func. added)	    */
/* Date Written			 : 18/04/1999									*/
/* Correction Log		 : 27/06/1999  V.Srikanth					    */
/*						   Service Quantity item also added in the      */
/*                         Billing Service Summary Report				*/
/*                                                                      */
/* Modified By			  : VSK for BLENH Purpose                        */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                                                         
#include <stdio.h>       
#include <string.h>
#include "bl.h"
 
#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
     
#define INIT_MESG "Report Generation In Progress"

#define MAX_LINES            55
#define CHARGE_DETAILS       (nd_chg_dtls.arr[0] == 'Y')

/*
#define DEBUG
*/

int lctr = 0,pctr = 0;

FILE *fp;


EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR uid_pwd           [91],
            hosp_name         [120],
            date_time         [20],
            user_id           [41],
            d_curr_pgm_name   [15],
            nd_session_id     [16],
            nd_pgm_date       [25],
            nd_fm_date        [17],
            nd_to_date        [17],
            nd_fm_date_prn    [17],
            nd_to_date_prn    [17],
            nd_fm_blng_serv   [11],
            nd_to_blng_serv   [11],
			nd_fm_blng_grp	  [3],
			nd_to_blng_grp	  [3],
            nd_chg_dtls       [2],
            nd_pkg_serv       [2],
			nd_operating_facility_id [3];

   VARCHAR bl_blng_serv_code                           [11],
           bl_blng_serv_code_desc                      [41],
		   bl_blng_serv_grp_desc                       [16],
		   bl_blng_serv_grp_desc_long                  [41],
           bl_service_date                             [15];

   double  bl_upd_gross_charge_amt,
           bl_upd_disc_amt,
           bl_upd_net_charge_amt,
		   bl_upd_serv_qty,

           bl_upd_gross_charge_amt_tot,
           bl_upd_disc_amt_tot,
           bl_upd_net_charge_amt_tot,
		   bl_upd_serv_qty_tot,

           bl_upd_gross_charge_amt_gtot,
           bl_upd_disc_amt_gtot,
           bl_upd_net_charge_amt_gtot,
		   bl_upd_serv_qty_gtot,

           bl_upd_gross_charge_amt_stot,
           bl_upd_disc_amt_stot,
           bl_upd_net_charge_amt_stot,
		   bl_upd_serv_qty_stot;

   long    bl_pat_no_of_recs = 0,
           bl_pat_no_of_recs_stot = 0,
           bl_pat_no_of_recs_gtot = 0;

   VARCHAR pre_blng_serv  [11],
	   pre_serv_grp   [3],
	   pre_serv_grp_1 [3],
           pre_serv_date  [15];


   char    nd_summary;
   char    string_var [150];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char filename[100];
int  rec_no;
 
void proc_main(argc,argv)
char *argv[];
int argc;
{
 
    strcpy(g_pgm_id,"BLRNOSRV");

    if (sql_connect(argv[1]) == -1)
    {
         disp_message(ORA_MESG,"Error in connecting to Oracle");
         proc_exit();
    }
    strcpy(d_curr_pgm_name.arr,g_pgm_id);
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr);

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    set_meduser_role();
    
    fetch_prog_param();
    declare_cur();
    fetch_hosp_name();
    open_file();

/*-- Due to a new finctionality added the existing code made conditionally
     intact (undisturbed) VSK 18/04/1999 */
	     
	if (nd_summary == 'N' || nd_summary == 'Y')
	{

	open_cur();

	bl_upd_gross_charge_amt_tot = bl_upd_disc_amt_tot =
    bl_upd_net_charge_amt_tot = rec_no = bl_upd_gross_charge_amt_gtot =
    bl_upd_disc_amt_gtot = bl_upd_net_charge_amt_gtot = bl_pat_no_of_recs = 
    bl_pat_no_of_recs_gtot = 0;
    pre_blng_serv.arr[0] = pre_serv_date.arr[0] = '\0';
    pre_serv_grp.arr[0] = '\0';

    while(fetch_cur())
    {
        if (!rec_no) {
           strcpy(pre_blng_serv.arr,bl_blng_serv_code.arr);
           strcpy(pre_serv_date.arr,bl_service_date.arr);
	   strncpy(pre_serv_grp.arr, bl_blng_serv_code.arr,2);
	}
        
        if (strcmp(pre_blng_serv.arr,bl_blng_serv_code.arr) ||
              strcmp(pre_serv_date.arr,bl_service_date.arr))
        {
            fetch_blng_desc();
            print_rec();
            if (strncmp(pre_serv_grp.arr, bl_blng_serv_code.arr,2))
	      print_sub_tot();
	    strncpy(pre_serv_grp.arr, bl_blng_serv_code.arr,2);
            strcpy(pre_blng_serv.arr,bl_blng_serv_code.arr);
            strcpy(pre_serv_date.arr,bl_service_date.arr);
        }
        bl_pat_no_of_recs++;
        bl_upd_gross_charge_amt_tot += bl_upd_gross_charge_amt; 
        bl_upd_disc_amt_tot += bl_upd_disc_amt;
        bl_upd_net_charge_amt_tot += bl_upd_net_charge_amt;

        rec_no++;
    }
    if (rec_no)
    {
	    
        fetch_blng_desc();

        print_rec();
		print_sub_tot();
        print_total();
    }
    end_of_rep();
	} /* End of Existing functionalities */
	else
	{ 
/*-- New function. SCF 83 VSK 18/04/1999. Billing Service Summary Report */
		
		open_1_cur();
		
		do_report();
		end_of_rep();
	}	
	

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT failed",0,"");

    return;
}

fetch_prog_param()
{
   nd_fm_date.arr[0]       = '\0';
   nd_to_date.arr[0]       = '\0';
   nd_fm_date_prn.arr[0]       = '\0';
   nd_to_date_prn.arr[0]       = '\0';
   nd_fm_blng_serv.arr[0]  = '\0';
   nd_to_blng_serv.arr[0]  = '\0';
   nd_chg_dtls.arr[0]      = '\0';
   nd_pkg_serv.arr[0]      = '\0';
   nd_fm_blng_grp.arr[0]		=	'\0';
   nd_to_blng_grp.arr[0]		=	'\0';
   nd_operating_facility_id.arr[0] = '\0';

   nd_fm_date.len          = 0;
   nd_to_date.len          = 0;
   nd_fm_date_prn.len          = 0;
   nd_to_date_prn.len          = 0;
   nd_fm_blng_serv.len     = 0;
   nd_to_blng_serv.len     = 0;
   nd_chg_dtls.len         = 0;
   nd_pkg_serv.len         = 0;
   nd_fm_blng_grp.len		=	0;
   nd_to_blng_grp.len		=	0;   
   nd_operating_facility_id.len = 0;

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,PARAM6,PARAM7,
                   TO_CHAR(TO_DATE(PARAM1,'YYYYMMDD'),'DD/MM/YYYY'),
                   TO_CHAR(TO_DATE(PARAM2,'YYYYMMDD'),'DD/MM/YYYY'),
				   PARAM8,PARAM9
              INTO :nd_operating_facility_id,
			       :nd_fm_date,      :nd_to_date,  :nd_fm_blng_serv,
                   :nd_to_blng_serv, :nd_chg_dtls, :nd_pkg_serv, :nd_summary,
                   :nd_fm_date_prn,  :nd_to_date_prn, :nd_fm_blng_grp,
				   :nd_to_blng_grp
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_fm_date.arr[nd_fm_date.len] = '\0';
   nd_to_date.arr[nd_to_date.len] = '\0';
   nd_fm_blng_serv.arr[nd_fm_blng_serv.len] = '\0';
   nd_to_blng_serv.arr[nd_to_blng_serv.len] = '\0';
   nd_chg_dtls.arr[nd_chg_dtls.len] = '\0';
   nd_pkg_serv.arr[nd_pkg_serv.len] = '\0';
   nd_fm_date_prn.arr[nd_fm_date_prn.len] = '\0';
   nd_to_date_prn.arr[nd_to_date_prn.len] = '\0';
   nd_fm_blng_grp.arr[nd_fm_blng_grp.len]		=	'\0';
   nd_to_blng_grp.arr[nd_to_blng_grp.len]		=	'\0';
   nd_operating_facility_id.arr[nd_operating_facility_id.len] = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);

   EXEC SQL DELETE FROM SY_PROG_PARAM
                  WHERE PGM_ID     = :d_curr_pgm_name
                    AND SESSION_ID = :nd_session_id
                    AND PGM_DATE   = :nd_pgm_date;
   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
}

declare_cur()
{
/* 
	Select Statement corrected by Venkat
	on 20/09/1999 by adding
	TRUNC(SERVICE_DATE) instead of SERVICE_DATE 
	in WHERE clause
 */

     EXEC SQL DECLARE BL_PATIENT_CHG_FOLIO_CUR CURSOR FOR
               SELECT TRUNC(SERVICE_DATE),
                      BLNG_SERV_CODE,
                      UPD_GROSS_CHARGE_AMT,
                      UPD_DISC_AMT,
                      UPD_NET_CHARGE_AMT
                 FROM BL_PATIENT_CHARGES_FOLIO
                WHERE BLNG_GRP_ID BETWEEN :nd_fm_blng_grp AND :nd_to_blng_grp AND
				      OPERATING_FACILITY_ID = :nd_operating_facility_id AND
//				      TO_DATE(SERVICE_DATE) BETWEEN
					  TRUNC(SERVICE_DATE) BETWEEN
                       TO_DATE(NVL(:nd_fm_date,'00010101'),'YYYYMMDD')
                      AND
                       TO_DATE(NVL(:nd_to_date,'47121201'),'YYYYMMDD')
                      AND BLNG_SERV_CODE  BETWEEN
                       NVL(:nd_fm_blng_serv,' ')
                      AND
                       NVL(:nd_to_blng_serv,'~~~~~~')
                      AND NVL(PACKAGE_TRX_IND,'N') = 'N'
                      AND ((PACKAGE_IND = 'S' AND :nd_pkg_serv = 'N')
                          OR PACKAGE_IND IN ('S','P') AND :nd_pkg_serv = 'Y')
                 ORDER BY BLNG_SERV_CODE,TRUNC(SERVICE_DATE);
//			  TO_DATE(SERVICE_DATE,'DD-MON-YYYY');


/*-- SCF 83 AH requirement VSK 18/04/1999. Folio Cursor--------- */
/*-- SCF 327 AH requirement adding serv_qty also. VSK 28/06/1999 */


/* 
	Select Statement below is corrected by Venkat
	on 20/09/1999 by adding
	TRUNC(SERVICE_DATE) instead of SERVICE_DATE 
	in WHERE clause
 */


     EXEC SQL DECLARE BL_PATIENT_CHG_FOLIO_1_CUR CURSOR FOR
               SELECT SUBSTR(BLNG_SERV_CODE,1,2),
                      BLNG_SERV_CODE,
                      COUNT(*),
/*BLENH VSK */		  SUM(DECODE(TRX_DOC_REF_SEQ_NUM,0,NVL(SERV_QTY,0),0.00)),
					  SUM(ORG_GROSS_CHARGE_AMT),
					  SUM(ORG_DISC_AMT),
					  SUM(ORG_NET_CHARGE_AMT)
                 FROM BL_PATIENT_CHARGES_FOLIO
                WHERE BLNG_GRP_ID BETWEEN :nd_fm_blng_grp AND :nd_to_blng_grp AND
				      OPERATING_FACILITY_ID = :nd_operating_facility_id AND
					  TRUNC(SERVICE_DATE) BETWEEN
                       TO_DATE(NVL(:nd_fm_date,'00010101'),'YYYYMMDD')
                      AND
                       TO_DATE(NVL(:nd_to_date,'47121201'),'YYYYMMDD')
                      AND BLNG_SERV_CODE  BETWEEN
                       NVL(:nd_fm_blng_serv,' ')
                      AND
                       NVL(:nd_to_blng_serv,'~~~~~~')
                      AND NVL(PACKAGE_TRX_IND,'N') = 'N'
                      AND ((PACKAGE_IND = 'S' AND :nd_pkg_serv = 'N')
                          OR PACKAGE_IND IN ('S','P') AND :nd_pkg_serv = 'Y')
					  GROUP BY BLNG_SERV_CODE
                      ORDER BY BLNG_SERV_CODE;



     EXEC SQL DECLARE BL_BLGN_SERV_CUR CURSOR FOR
               SELECT LONG_DESC
                 FROM BL_BLNG_SERV
                WHERE BLNG_SERV_CODE = :pre_blng_serv;

     
     EXEC SQL DECLARE BL_BLNG_SERV_GRP_CUR CURSOR FOR
               SELECT LONG_DESC,
		      SHORT_DESC
                 FROM BL_BLNG_SERV_GRP
                WHERE SERV_GRP_CODE = :pre_serv_grp;

/*-- Cursor for Service group desc VSK 18/04/1999 */

	 EXEC SQL DECLARE BL_BLNG_SERV_GRP_1_CUR CURSOR FOR
               SELECT LONG_DESC,
		      SHORT_DESC
                 FROM BL_BLNG_SERV_GRP
                WHERE SERV_GRP_CODE = :pre_serv_grp_1;
}

open_cur()
{
    EXEC SQL OPEN BL_PATIENT_CHG_FOLIO_CUR;

    if (OERROR)
        err_mesg("OPEN failed on cursor BL_PATIENT_CHG_FOLIO_CUR",0,"");

}


/*-- SCF 83 VSK 18/04/1999 Open folio cursor */

open_1_cur()
{
    EXEC SQL OPEN BL_PATIENT_CHG_FOLIO_1_CUR;

    if (OERROR)
        err_mesg("OPEN failed on cursor BL_PATIENT_CHG_FOLIO_1_CUR",0,"");

}


end_of_rep()
{
fprintf(fp,"\n                                                      ***  END OF REPORT ***\n\f");
fclose(fp);
}

fetch_cur()
{

bl_blng_serv_code.arr[0]                                          = '\0';
bl_service_date.arr[0]                                            = '\0';

bl_blng_serv_code.len                                             = 0;
bl_service_date.len                                               = 0;

bl_upd_gross_charge_amt                                           = 0;
bl_upd_disc_amt                                                   = 0;
bl_upd_net_charge_amt                                             = 0;

     EXEC SQL FETCH BL_PATIENT_CHG_FOLIO_CUR
               INTO :bl_service_date,
                    :bl_blng_serv_code,
                    :bl_upd_gross_charge_amt,
                    :bl_upd_disc_amt,
                    :bl_upd_net_charge_amt;

    if (OERROR)
       err_mesg("Error while fetching BL_PATIENT_CHG_FOLIO_CUR",0,"");

bl_service_date.arr[bl_service_date.len]                                 = '\0';
bl_blng_serv_code.arr[bl_blng_serv_code.len]                             = '\0';

    return (LAST_ROW?0:1);
}


/*-- SCF 83 VSK 18/04/1999 Fetch Folio Cursor */

fetch_1_cur()
{

pre_blng_serv.arr[0]                                          = '\0';
pre_serv_grp.arr[0]                                           = '\0';

pre_blng_serv.len                                             = 0;
pre_serv_grp.len                                              = 0;

bl_pat_no_of_recs = 0;
bl_upd_serv_qty = 0.0;

     EXEC SQL FETCH BL_PATIENT_CHG_FOLIO_1_CUR
               INTO :pre_serv_grp,
					:pre_blng_serv,
					:bl_pat_no_of_recs,
					:bl_upd_serv_qty,
					:bl_upd_gross_charge_amt,
                    :bl_upd_disc_amt,
                    :bl_upd_net_charge_amt;

    if (OERROR)
       err_mesg("Error while fetching BL_PATIENT_CHG_FOLIO_1_CUR",0,"");

pre_blng_serv.arr[pre_blng_serv.len]                            = '\0';
pre_serv_grp.arr[pre_serv_grp.len]                              = '\0';

    return (LAST_ROW?0:1);
}


fetch_blng_desc()
{
     pre_blng_serv.len  =   strlen(pre_blng_serv.arr);

     EXEC SQL OPEN BL_BLGN_SERV_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_SERV_CUR",0,"");

     bl_blng_serv_code_desc.arr[0]  = '\0';
     bl_blng_serv_code_desc.len     = 0;

     EXEC SQL FETCH BL_BLGN_SERV_CUR
               INTO :bl_blng_serv_code_desc;
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_SERV_CUR",0,"");

     bl_blng_serv_code_desc.arr[bl_blng_serv_code_desc.len] = '\0';
}

fetch_serv_grp_desc()
{
	
     pre_serv_grp.len = strlen(pre_serv_grp.arr);

     EXEC SQL OPEN BL_BLNG_SERV_GRP_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_SERV_GRP_CUR",0,"");

     bl_blng_serv_grp_desc.arr[0]  = '\0';
     bl_blng_serv_grp_desc.len     = 0;

     bl_blng_serv_grp_desc_long.arr[0]  = '\0';
     bl_blng_serv_grp_desc_long.len     = 0;

     EXEC SQL FETCH BL_BLNG_SERV_GRP_CUR
               INTO :bl_blng_serv_grp_desc_long,
	            :bl_blng_serv_grp_desc;
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_SERV_GRP_CUR",0,"");

     bl_blng_serv_grp_desc.arr[bl_blng_serv_grp_desc.len]  = '\0';
     bl_blng_serv_grp_desc_long.arr[bl_blng_serv_grp_desc_long.len]  = '\0';

}

/*-- SCF 83 VSK 18/04/1999 Fetch Service Group description */

fetch_serv_grp_desc_1()
{
	
     pre_serv_grp_1.len = strlen(pre_serv_grp_1.arr);

     EXEC SQL OPEN BL_BLNG_SERV_GRP_1_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_SERV_GRP_1_CUR",0,"");

     bl_blng_serv_grp_desc.arr[0]  = '\0';
     bl_blng_serv_grp_desc.len     = 0;

     bl_blng_serv_grp_desc_long.arr[0]  = '\0';
     bl_blng_serv_grp_desc_long.len     = 0;

     EXEC SQL FETCH BL_BLNG_SERV_GRP_1_CUR
               INTO :bl_blng_serv_grp_desc_long,
	            :bl_blng_serv_grp_desc;
     if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_SERV_GRP_1_CUR",0,"");

     bl_blng_serv_grp_desc.arr[bl_blng_serv_grp_desc.len]  = '\0';
     bl_blng_serv_grp_desc_long.arr[bl_blng_serv_grp_desc_long.len]  = '\0';

}

open_file()
{
   strcat(filename,CHARGE_DETAILS?"blrnosrv.lis":"blrnosrv.lis");

   if ((fp = fopen(filename,"w")) == NULL)
   {
       disp_message(ERR_MESG,"Error in opening file BLRNOSRV.LIS");
       proc_exit();
   }    
   strcpy(OUTPUT_FILE_NAME,filename);
   print_title();
   print_head();
}

  
print_rec()
{

 if(nd_summary == 'N') {
     fprintf(fp,"%-10s %-40s %-10s ",
           pre_blng_serv.arr,
           bl_blng_serv_code_desc.arr,
           pre_serv_date.arr);

     if (!CHARGE_DETAILS)
          print_formated1(bl_pat_no_of_recs);
     else 
     {
          print_formated1(bl_pat_no_of_recs);
          fprintf(fp,"  ");
          print_formated(bl_upd_gross_charge_amt_tot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_disc_amt_tot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_net_charge_amt_tot, fp);
     }
     fprintf(fp,"\n");
     page_break(1);

 }

bl_upd_gross_charge_amt_gtot += bl_upd_gross_charge_amt_tot;
bl_upd_disc_amt_gtot         += bl_upd_disc_amt_tot;
bl_upd_net_charge_amt_gtot   += bl_upd_net_charge_amt_tot;
bl_pat_no_of_recs_gtot       += bl_pat_no_of_recs;

bl_upd_gross_charge_amt_stot += bl_upd_gross_charge_amt_tot;
bl_upd_disc_amt_stot         += bl_upd_disc_amt_tot;
bl_upd_net_charge_amt_stot   += bl_upd_net_charge_amt_tot;
bl_pat_no_of_recs_stot       += bl_pat_no_of_recs;

bl_pat_no_of_recs = bl_upd_gross_charge_amt_tot = bl_upd_disc_amt_tot =
bl_upd_net_charge_amt_tot = 0;

}
// $$$$$$$$$$$$$$$$$
print_sub_tot()
{
   fflush(fp);
   fetch_serv_grp_desc();
if(nd_summary == 'Y') {
     fprintf(fp,"%-6s %-40s      ",
           pre_serv_grp.arr,
           bl_blng_serv_grp_desc_long.arr);

     if (!CHARGE_DETAILS)
          print_formated1(bl_pat_no_of_recs_stot);
     else 
     {
          print_formated1(bl_pat_no_of_recs_stot);
          fprintf(fp,"  ");
          print_formated(bl_upd_gross_charge_amt_stot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_disc_amt_stot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_net_charge_amt_stot, fp);
     }
     fprintf(fp,"\n");
     page_break(1);

}
else {
    fprintf(fp,"\n");
    page_break(4);
    fprintf(fp,
    "                                                                     ----------------------------------------------------------------\n");
    
       fprintf(fp,"Sub Total for Billing Service Group : %2s  %-15s :",
               pre_serv_grp.arr,bl_blng_serv_grp_desc.arr);
       fflush(fp);
       print_formated1(bl_pat_no_of_recs_stot);
       fprintf(fp,"  ");
       fflush(fp);
       if CHARGE_DETAILS
       {
          print_formated(bl_upd_gross_charge_amt_stot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_disc_amt_stot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_net_charge_amt_stot, fp);
       }
    fprintf(fp,
    "\n                                                                     ================================================================\n");
}
   fprintf(fp,"\n");
   fflush(fp);

bl_upd_gross_charge_amt_stot = bl_upd_disc_amt_stot =  
bl_upd_net_charge_amt_stot   = bl_pat_no_of_recs_stot = 0;

}

print_total()
{
   fprintf(fp,"\n");
   fflush(fp);
   page_break(4);
if(nd_summary == 'Y') {
    fprintf(fp,
    "---------------------------------------------------------------------------------------------------------------------------\n");
   fprintf(fp,"                                TOTAL           ");
}
else {
    fprintf(fp,
    "-------------------------------------------------------------------------------------------------------------------------------------\n");
   fprintf(fp,"                                TOTAL                      ");
}  

   fflush(fp);
   print_formated1(bl_pat_no_of_recs_gtot);
   fprintf(fp,"  ");
   fflush(fp);
   if CHARGE_DETAILS
   {
      print_formated(bl_upd_gross_charge_amt_gtot, fp);
      fprintf(fp,"  ");
      print_formated(bl_upd_disc_amt_gtot, fp);
      fprintf(fp,"  ");
      print_formated(bl_upd_net_charge_amt_gtot, fp);
   }
if(nd_summary == 'Y')
fprintf(fp,
"\n---------------------------------------------------------------------------------------------------------------------------\n");
else
fprintf(fp,
"\n-------------------------------------------------------------------------------------------------------------------------------------\n");
   fprintf(fp,"\n\n");
   fflush(fp);
}


/*-- SCF 83 VSK 18/04/1999  Body of the Report */

do_report()
{
	int fst;

	bl_upd_gross_charge_amt = bl_upd_disc_amt = bl_upd_net_charge_amt = 0;
	bl_upd_gross_charge_amt_tot = bl_upd_disc_amt_tot =
    bl_upd_net_charge_amt_tot = rec_no = bl_upd_gross_charge_amt_gtot =
    bl_upd_disc_amt_gtot = bl_upd_net_charge_amt_gtot = bl_pat_no_of_recs = 
    bl_pat_no_of_recs_gtot = bl_pat_no_of_recs_stot = 0;
	bl_upd_serv_qty = bl_upd_serv_qty_tot = bl_upd_serv_qty_gtot = bl_upd_serv_qty_stot =0;
    pre_blng_serv.arr[0] = pre_serv_date.arr[0] = '\0';
    pre_serv_grp.arr[0] = '\0';
	pre_serv_grp_1.arr[0] = '\0';

	fst = 1;
	
	while(fetch_1_cur())
	{
		
		if (fst)
		{
			strcpy(pre_serv_grp_1.arr,pre_serv_grp.arr);
			fst = 0;
		}

		
		if (strcmp( pre_serv_grp_1.arr,pre_serv_grp.arr) != 0)
		{
			prt_sub_total();
			strcpy(pre_serv_grp_1.arr,pre_serv_grp.arr);
		}

		fetch_blng_desc();

        fprintf(fp,"%-10s %-40s ", pre_blng_serv.arr, 
								  bl_blng_serv_code_desc.arr);

        if (!CHARGE_DETAILS)
		{
		  print_formated1(bl_pat_no_of_recs);
		  fprintf(fp,"   ");
          print_formated(bl_upd_serv_qty, fp); /* Added by VSK 28/06/1999 */
		}
        else 
		{
          print_formated1(bl_pat_no_of_recs);
          print_formated(bl_upd_serv_qty, fp); /* Added by VSK 28/06/1999 */
          fprintf(fp,"  ");
          print_formated(bl_upd_gross_charge_amt, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_disc_amt, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_net_charge_amt, fp);
		}
		fprintf(fp,"\n");

		bl_pat_no_of_recs_stot		 += bl_pat_no_of_recs;
		bl_upd_serv_qty_stot		 += bl_upd_serv_qty;
		bl_upd_gross_charge_amt_stot += bl_upd_gross_charge_amt;
		bl_upd_disc_amt_stot		 += bl_upd_disc_amt;
		bl_upd_net_charge_amt_stot	 += bl_upd_net_charge_amt;

		page_break(1);

	}
	prt_sub_total();
	prt_grand_total();
}

/*-- SCF 83 VSK 18/04/1999 Print Subtotal for every break of Service Group */

prt_sub_total()
{
   fflush(fp);
   fetch_serv_grp_desc_1();
   fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
   fprintf(fp,"%-6s %-40s ",
           pre_serv_grp_1.arr,
           bl_blng_serv_grp_desc_long.arr);

     if (!CHARGE_DETAILS)
	 {
          print_formated1(bl_pat_no_of_recs_stot);
		  fprintf(fp,"   ");
          print_formated(bl_upd_serv_qty_stot, fp); /* Added by VSK 28/06/1999 */
	 }
     else 
     {
          print_formated1(bl_pat_no_of_recs_stot);
          print_formated(bl_upd_serv_qty_stot, fp); /* Added by VSK 28/06/1999 */
          fprintf(fp,"  ");
          print_formated(bl_upd_gross_charge_amt_stot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_disc_amt_stot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_net_charge_amt_stot, fp);
    }
	 fprintf(fp,"\n");
     fprintf(fp,
     "-------------------------------------------------------------------------------------------------------------------------------------\n");
     fprintf(fp,"\n");
     page_break(4);


     fflush(fp);
	 
	 bl_upd_gross_charge_amt_gtot += bl_upd_gross_charge_amt_stot;
	 bl_upd_serv_qty_gtot		  += bl_upd_serv_qty_stot;
	 bl_upd_disc_amt_gtot		  += bl_upd_disc_amt_stot;
	 bl_upd_net_charge_amt_gtot   += bl_upd_net_charge_amt_stot;
	 bl_pat_no_of_recs_gtot       += bl_pat_no_of_recs_stot;
	 
	 bl_upd_gross_charge_amt_stot  = bl_upd_disc_amt_stot = bl_upd_serv_qty_stot =   
	 bl_upd_net_charge_amt_stot    = bl_pat_no_of_recs_stot = 0;
}

/*-- SCF 83 VSK 18/04/1999 Print Grand total */

prt_grand_total()
{
   fflush(fp);
  
   fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
   fprintf(fp,"%-6s %-40s ",
           " ","         GRAND TOTAL ----->  ");

   if (!CHARGE_DETAILS)
   {
          print_formated1(bl_pat_no_of_recs_gtot);
		  fprintf(fp,"   ");
          print_formated(bl_upd_serv_qty_gtot, fp); /* Added by VSK 28/06/1999 */
   }
   else 
   {
          print_formated1(bl_pat_no_of_recs_gtot);
          print_formated(bl_upd_serv_qty_gtot, fp); /* Added by VSK 28/06/1999 */
          fprintf(fp,"  ");
          print_formated(bl_upd_gross_charge_amt_gtot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_disc_amt_gtot, fp);
          fprintf(fp,"  ");
          print_formated(bl_upd_net_charge_amt_gtot, fp);
   }
   fprintf(fp,"\n");
   fprintf(fp,
   "-------------------------------------------------------------------------------------------------------------------------------------\n");
   fprintf(fp,"\n");
   page_break(4);


   fflush(fp);
	 
   
   bl_upd_gross_charge_amt_gtot  = bl_upd_disc_amt_gtot =  bl_upd_serv_qty_gtot =
   bl_upd_net_charge_amt_gtot    = bl_pat_no_of_recs_gtot = 0;
}


sql_connect(l_uid)
char l_uid[];
{
  EXEC SQL BEGIN DECLARE SECTION;
       VARCHAR l_d_ap_uid_pwd[75];
   EXEC SQL END DECLARE SECTION;
    strcpy(l_d_ap_uid_pwd.arr,l_uid);
    l_d_ap_uid_pwd.len = strlen(l_d_ap_uid_pwd.arr);

    EXEC SQL CONNECT :l_d_ap_uid_pwd;

    if (sqlca.sqlcode < 0)
       return(-1);
return(0);
}



print_title()
{
if (nd_summary != 'B')
{
fprintf(fp,
"MDL : BL                                         %-30s                                      %-18s\n",
hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                              %-45s                                 PAGE : %4d\n",
CHARGE_DETAILS?"BLRNOSRV":"BLRNOSRQ",
CHARGE_DETAILS?"BILLING SERVICES BY DATE WITH CHARGE DETAILS":
"        BILLING SERVICES BY DATE",
++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
}
else
{

/*-- SCF 83 VSK 18/04/1999 Print Title*/
    fprintf(fp,
    "MDL : BL                                         %-30s                                      %-15s\n",
    hosp_name.arr,date_time.arr);
    fprintf(fp,"OPR : %-10s \n", user_id.arr);
    fprintf(fp,
	"REP : %-8s                              %-45s                                 PAGE : %4d\n",
	CHARGE_DETAILS?"BLRNOSRV":"BLRNOSRQ",
	CHARGE_DETAILS?"BILLING SERVICE SUMMARY WITH CHARGE DETAILS":
	"        BILLING SERVICE SUMMARY ",
	++pctr);
    fprintf(fp,
    "-------------------------------------------------------------------------------------------------------------------------------------\n");
}
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
fprintf(fp,"             SERVICE DATE      FROM  : %s\n",nd_fm_date_prn.arr);
fprintf(fp,"                               TO    : %s\n\n",nd_to_date_prn.arr);

if (nd_fm_blng_grp.arr[0] == '!')
	fprintf(fp,"             BILLING GROUP     FROM  : %s\n"," ");
else
	fprintf(fp,"             BILLING GROUP     FROM  : %s\n",nd_fm_blng_grp.arr);

if (nd_to_blng_grp.arr[0] == '~')
	fprintf(fp,"                               TO    : %s\n\n"," ");
else
	fprintf(fp,"                               TO    : %s\n\n",nd_to_blng_grp.arr);

fprintf(fp,"             BILLING SERVICE   FROM  : %s\n",nd_fm_blng_serv.arr);
fprintf(fp,"                               TO    : %s\n\n",nd_to_blng_serv.arr);
fprintf(fp,"                     CHARGE DETAILS? : %s\n\n",nd_chg_dtls.arr);
fprintf(fp,"             INCLUDE PACKAGE SERVICE : %s\n\n",nd_pkg_serv.arr);

if (nd_summary == 'N')
fprintf(fp,"             SUMMARY REPORT          : %s\n","Billing Service Detail");
else if (nd_summary == 'Y')
fprintf(fp,"             SUMMARY REPORT          : %s\n","Billing Service Group Summary");
else if (nd_summary == 'B')
fprintf(fp,"             SUMMARY REPORT          : %s\n","Billing Service Summary");
}

print_head()
{

if(nd_summary == 'Y') {
    fprintf(fp,
    "\fMDL : BL                                    %-30s                                   %-18s\n",
    hosp_name.arr,date_time.arr);
    fprintf(fp,"OPR : %-10s \n", user_id.arr);
    fprintf(fp,
    "REP : %-8s                         %-45s                            PAGE : %4d\n",
    CHARGE_DETAILS?"BLRNOSRV":"BLRNOSRQ",
    CHARGE_DETAILS?"BILLING SERVICES BY DATE WITH CHARGE DETAILS":
    "        BILLING SERVICES BY DATE",
    ++pctr);

    fprintf(fp,
    "---------------------------------------------------------------------------------------------------------------------------\n");
    if CHARGE_DETAILS
    fprintf(fp,
    "BLNG SERV GROUP & DESCRIPTION                                NO.        GROSS CHG.          DISC AMT          NET CHG.\n");
    else
    fprintf(fp,
    "BLNG SERV & DESCRIPTION                                     NO.\n");
    fprintf(fp,
    "---------------------------------------------------------------------------------------------------------------------------\n");
}
else if (nd_summary == 'N')
{
    fprintf(fp,
    "\fMDL : BL                                         %-30s                                        %-15s\n",
    hosp_name.arr,date_time.arr);
    fprintf(fp,"OPR : %-10s \n", user_id.arr);
    fprintf(fp,
    "REP : %-8s                              %-45s                                 PAGE : %4d\n",
    CHARGE_DETAILS?"BLRNOSRV":"BLRNOSRQ",
    CHARGE_DETAILS?"BILLING SERVICES BY DATE WITH CHARGE DETAILS":
    "        BILLING SERVICES BY DATE",
    ++pctr);

    fprintf(fp,
    "-------------------------------------------------------------------------------------------------------------------------------------\n");
    if CHARGE_DETAILS
    fprintf(fp,
    "BLNG SERV & DESCRIPTION                         SERVICE DT              NO.        GROSS CHG.          DISC AMT          NET CHG.\n");
    else
    fprintf(fp,
    "BLNG SERV & DESCRIPTION                         SERVICE DT             NO.\n");
    fprintf(fp,
    "-------------------------------------------------------------------------------------------------------------------------------------\n");
}
else if (nd_summary == 'B')
{

/*-- SCF 83 VSK 18/04/1999 Print header */

    fprintf(fp,
    "\fMDL : BL                                         %-30s                                      %-15s\n",
    hosp_name.arr,date_time.arr);
    fprintf(fp,"OPR : %-10s \n", user_id.arr);
    
	if (CHARGE_DETAILS)
	{
		fprintf(fp,
		"REP : %-8s                           %-45s                                    PAGE : %4d\n",
		"BLRNOSRV", "      BILLING SERVICE SUMMARY WITH CHARGE DETAILS",  ++pctr);
		fprintf(fp,
		"-------------------------------------------------------------------------------------------------------------------------------------\n");
		fprintf(fp,
		"BLNG SERV & DESCRIPTION                            NO.OF TRANS.       SERV.QTY.        GROSS CHG.          DISC AMT          NET CHG.\n");
	}
    else
	{
		fprintf(fp,
		"REP : %-8s                           %-45s                                    PAGE : %4d\n",
		"BLRNOSRV", "      BILLING SERVICE SUMMARY ",  ++pctr);
		fprintf(fp,
		"-------------------------------------------------------------------------------------------------------------------------------------\n");
		fprintf(fp,
		"BLNG SERV & DESCRIPTION                            NO.OF TRANS.          SERV.QTY.\n");
	}
    fprintf(fp,
    "-------------------------------------------------------------------------------------------------------------------------------------\n");
}

fflush(fp);
lctr = 7;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;
    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY
			   WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");
hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}
/*
print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
      ltrim(out_str);l_put_comma(out_str);
      sprintf(out_str1,"%15s",out_str);
      fprintf(fp,"%-15s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
      ltrim(out_str);l_put_comma(out_str);
      sprintf(out_str1,"%15s",out_str);
      fprintf(fp,"%-15s-",out_str1);
   }
}
*/

print_formated(loc_amount,fp)
double loc_amount;
FILE *fp;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
        ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
                ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }
}

print_formated2(loc_amount)
double loc_amount;
{
   char out_str[10],out_str1[10];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%7.2f",loc_amount);
      ltrim(out_str);l_put_comma(out_str);
      sprintf(out_str1,"%10s",out_str);
      fprintf(fp,"%-10s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%7.2f",-loc_amount);
      ltrim(out_str);l_put_comma(out_str);
      sprintf(out_str1,"%10s",out_str);
      fprintf(fp,"%-10s-",out_str1);
   }
}


print_formated1(loc_amount)
long loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15ld",loc_amount);
      strcat(out_str,".00");
      ltrim(out_str);put_comma1(out_str);
      sprintf(out_str1,"%15s",out_str);
      fprintf(fp,"%-15s ",out_str1);
   }
}

l_put_comma(str)
char *str;
{
  int i,l,m,a,b,c;
  float j,k;
  char arr[120],o_arr[120],l_str1[10],minus[2];
  strcpy(minus,"");
  if (str[0] == '-')
  {
     str[0] = ' ';
     strcpy(minus,"-");
  }
  ltrim(str); 
  strcpy(arr,str);
  strncpy(l_str1,arr + (strlen(arr) - 2),2);
  l_str1[2] = '\0';
  arr[strlen(str)-3] = '\0';
  i = strlen(arr);
  j = i;
  k = j/3;
  l = k;
  m = i - (l*3);
  if (i > 3)
  {
      for (a=0;a<m;a++)
         o_arr[a] = arr[a];
   if (m)
   {
     o_arr[m] = ','; b=m+1;
   }
   else b = m;
  for (c=1,a=m;arr[a]!= '\0';a++,b++)
  {
     o_arr[b] = arr[a]; 
     c++;
     if (c > 3 && arr[a+1] != '\0')
     {
       o_arr[++b] = ','; c = 1;
     }
   }
   o_arr[b] = '\0';
  }
  else
      strcpy(o_arr,arr);
  sprintf(str,"%s%s.%s",minus,o_arr,l_str1);
}

put_comma1(str)
char *str;
{
  int i,l,m,a,b,c;
  float j,k;
  char arr[120],o_arr[120],l_str1[10],minus[2];
  strcpy(minus,"");
  if (str[0] == '-')
  {
     str[0] = ' ';
     strcpy(minus,"-");
  }
  ltrim(str); 
  strcpy(arr,str);
  strncpy(l_str1,arr + (strlen(arr) - 2),2);
  l_str1[2] = '\0';
  arr[strlen(str)-3] = '\0';
  i = strlen(arr);
  j = i;
  k = j/3;
  l = k;
  m = i - (l*3);
  if (i > 3)
  {
      for (a=0;a<m;a++)
         o_arr[a] = arr[a];
   if (m)
   {
     o_arr[m] = ','; b=m+1;
   }
   else b = m;
  for (c=1,a=m;arr[a]!= '\0';a++,b++)
  {
     o_arr[b] = arr[a]; 
     c++;
     if (c > 3 && arr[a+1] != '\0')
     {
       o_arr[++b] = ','; c = 1;
     }
   }
   o_arr[b] = '\0';
  }
  else
      strcpy(o_arr,arr);
  sprintf(str,"%s%s",minus,o_arr);
}

page_break(skip)
int skip;
{
   lctr+= skip;
   if  (lctr > MAX_LINES)
      print_head();
}

ltrim(l_str)
char *l_str;
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}

rtrim(l_str)
char *l_str;
{
  while (*l_str != '\0') *l_str++;
  l_str--;
  while (*l_str == ' ') *l_str--;
  *(l_str+1) = '\0';
}



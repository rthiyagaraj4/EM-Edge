/************************************************************************/
/*  MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRRECON.PC                                  */
/* AUTHOR                : Robert Joseph                               */  
/* DATE WRITTEN          : 23/09/2004                                   */      
/************************************************************************/
          


#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
/*
#define DEBUG 0
*/
#define ESC 0x1B



EXEC SQL BEGIN DECLARE SECTION;


VARCHAR  
			hosp_name                       [120],
			date							[20],
            date_time                       [20],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
			d_curr_pgm_name                 [15],
			nd_facility				        [3], 
			nd_acct_code					[11],
			nd_dept_code					[11],
			nd_fm_date					[15],
            nd_to_date						[15],
			bl_ext_acct_code_re				[11],
            bl_bank_in_docno_re				[21],
			bl_bank_in_date_re				[15],
            bl_bank_name					[31],
			bl_bank_name_py					[31],
			bl_slmt_desc_re					[16],
			bl_receiver_stmt_ref			[31],
			bl_ext_acct_code_py				[11],
			bl_bank_in_doc_no_py			[21],
			bl_bank_date_py					[15],
			bl_slmnt_desc_py				[16],
			bl_account_code					[11],
			bl_batch_doc_num_py				[30],			
			bl_ext_acct_code_re_old          [11],
			p_language_id                    [3],
			l_translated_value				[201],
			l_pk_value						[100];
	 
		double bl_bank_amt_re=0,bl_acct_code_amt_py=0,bl_sum_rec_amt=0;
        double bl_sum_bank_amt_re=0,bl_sum_bank_amt_py=0;
int i,sl_no=1;
char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200],arg_cnt[5];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0;
int    first = 1,r_fst = 1;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRRECON");

    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);

    EXEC sql connect :nd_pwd;


	  
    if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }

		set_meduser_role(); 
        
    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

	    strcpy(p_language_id.arr,l_language_id.arr);
	    p_language_id.len = l_language_id.len;
  
	  
             
	         nd_acct_code.arr[0]		= '\0';
             nd_dept_code.arr[0]		= '\0';
			 nd_fm_date.arr[0]			= '\0';
             nd_to_date.arr[0]			= '\0';

            nd_acct_code.len		    = 0;
			nd_dept_code.len			= 0;
	        nd_fm_date.len				= 0;
            nd_to_date.len				= 0;

        EXEC SQL SELECT	PARAM1,PARAM2,PARAM3,PARAM4
			INTO :nd_acct_code,
                 :nd_dept_code,
				 :nd_fm_date,
				 :nd_to_date 
			FROM SY_PROG_PARAM
            WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;
 
  nd_acct_code.arr[nd_acct_code.len]		= '\0';
  nd_dept_code.arr[nd_dept_code.len]		= '\0';
  nd_fm_date.arr[nd_fm_date.len]			= '\0';
  nd_to_date.arr[nd_to_date.len]			= '\0';


   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");


   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

       
 

	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
  
     	declare_cursor();

        

		fetch_hosp_name();

		fetch_legend_value();

		open_file();

		fprintf(fp,"%c&l1O",ESC); /* To Print in Landscape Mode */
		fprintf(fp,"%c&a2L",ESC); 	/* To Set the Left margin  		*/
		fprintf(fp, "%c(s12H", ESC);/* Reduce the font size*/
		 print_page_header();

        print_hdr();
	
        fprintf(fp,"%cE",ESC); /* To Reset the Printer */

     fclose(fp);

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

declare_cursor()
  {

  EXEC SQL DECLARE RECON_CUR CURSOR FOR 
      Select e.ext_acct_code,
	   		e.bank_in_doc_no,         
			e.bank_in_date,
			e.bank_in_amt , 
			b.bank_name  ,
			s.short_desc  ,
			e.receiver_statement_ref  	                   
			from  bl_ext_acct_recon_dtl e,bl_Bank_Name b,bl_slmt_type s 
		Where
		    	e.bank_code=b.bank_code and
				e.slmt_type_code=s.slmt_type_code and
				e.ext_acct_code =:nd_acct_code and
				/*Nvl(e.ext_acct_dept_code,'XX')=:nd_dept_code and*/
			   e.bank_in_date between nvl(:nd_fm_date,e.bank_in_date) and nvl(:nd_to_date,e.bank_in_date) and
         	     nvl(e.reconciled_ind,'N')='N';


 EXEC SQL DECLARE PAYER_CUR CURSOR FOR 
       Select P.EXT_ACCT_CODE,P.BANK_IN_DOC_NO,         
			P.BANK_IN_DATE,
			P.ACCT_CODE_AMT ,
			S.SHORT_DESC, P.BANK_IN_BATCH_DOC_TYPE||'/'||P.BANK_IN_BATCH_DOC_NO Batch_Doc_Num  
	    From  BL_BANK_IN_BY_ACCT_CODE P,BL_SLMT_TYPE S
		Where 
			P.SLMT_TYPE_CODE=S.SLMT_TYPE_CODE and
			P.EXT_ACCT_CODE =:nd_acct_code and
			/*Nvl(P.ext_acct_dept_code,'XX')=:nd_dept_code and*/
             P.bank_in_date  between nvl(:nd_fm_date,P.bank_in_date) and nvl(:nd_to_date,P.bank_in_date) and
	    	nvl(P.reconciled_ind,'N')='N' and
			P.bank_in_date is not null
        Order by P.BANK_IN_DATE;

   

 }

  open_recon_cur()
{


	EXEC SQL OPEN RECON_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor RECON_CUR",0,"");
}

close_recon_cur()
{

	EXEC SQL CLOSE RECON_CUR;
    
}

open_payer_cur()
{


	EXEC SQL OPEN PAYER_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor PAYER_CUR",0,"");
}

close_payer_cur()
{

	EXEC SQL CLOSE PAYER_CUR;
    
}



fetch_recon_cur()
{


	bl_ext_acct_code_re.arr[0]		=	'\0';			
        bl_bank_in_docno_re.arr[0]		=	'\0';				
		bl_bank_in_date_re.arr[0]		=	'\0';				
        bl_bank_name.arr[0]				=	'\0';				
		bl_slmt_desc_re.arr[0]			=	'\0';				
		bl_receiver_stmt_ref.arr[0]		=	'\0';

       
		bl_ext_acct_code_re.len			= 0;			
        bl_bank_in_docno_re.len			= 0;				
		bl_bank_in_date_re.len			= 0;				
        bl_bank_name.len				= 0;				
		bl_slmt_desc_re.len				= 0;			
		bl_receiver_stmt_ref.len		= 0;
		
      EXEC SQL  
	  FETCH RECON_CUR 
	   INTO :bl_ext_acct_code_re,		
			:bl_bank_in_docno_re,			
			:bl_bank_in_date_re,	
			:bl_bank_amt_re,			
			:bl_bank_name,				
			:bl_slmt_desc_re,			
			:bl_receiver_stmt_ref;
				
			

	
    						
     	bl_ext_acct_code_re.arr[bl_ext_acct_code_re.len]		=	'\0';			
        bl_bank_in_docno_re.arr[bl_bank_in_docno_re.len]		=	'\0';				
		bl_bank_in_date_re.arr[bl_bank_in_date_re.len]			=	'\0';				
        bl_bank_name.arr[bl_bank_name.len]						=	'\0';				
		bl_slmt_desc_re.arr[bl_slmt_desc_re.len]				=	'\0';				
		bl_receiver_stmt_ref.arr[bl_receiver_stmt_ref.len]		=	'\0';



	if (OERROR){
		
	      err_mesg("FETCH failed on cursor RECON_CUR",0,"");
	}

		return(LAST_ROW?0:1);
	}

 
 fetch_payer_cur()
  {


			bl_ext_acct_code_py.arr[0]		=	'\0';			
			bl_bank_in_doc_no_py.arr[0]		=	'\0';		
			bl_bank_date_py.arr[0]			=	'\0';				
			bl_slmnt_desc_py.arr[0]			=	'\0';
				
			bl_batch_doc_num_py.arr[0]		=	'\0';

			bl_ext_acct_code_py.len			=	0;			
			bl_bank_in_doc_no_py.len		=	0;		
			bl_bank_date_py.len				=	0;				
			bl_slmnt_desc_py.len			=	0;
           
			bl_batch_doc_num_py.len			=	0;

		EXEC SQL FETCH PAYER_CUR INTO
		              :bl_ext_acct_code_py,			
					  :bl_bank_in_doc_no_py,
					  :bl_bank_date_py,
					  :bl_acct_code_amt_py,	
					  :bl_slmnt_desc_py,
					  :bl_batch_doc_num_py ;
					  

     if (OERROR)
          err_mesg("FETCH failed on cursor PAYER_CUR",0,"");
 
            bl_ext_acct_code_py.arr[bl_ext_acct_code_py.len]		=	'\0';			
			bl_bank_in_doc_no_py.arr[bl_bank_in_doc_no_py.len]		=	'\0';		
			bl_bank_date_py.arr[bl_bank_date_py.len]				=	'\0';				
			bl_slmnt_desc_py.arr[bl_slmnt_desc_py.len]				=	'\0'; 
			bl_batch_doc_num_py.arr[bl_batch_doc_num_py.len]		=	'\0';
          
       return(LAST_ROW?0:1);
     }

fetch_bank_name()
 {
  EXEC SQL Select B.Bank_Name into :bl_bank_name_py From 
      BL_BANK_IN_DOC BD ,bl_Bank_Name b
	  Where
	    BD.OPERATING_FACILITY_ID=:nd_facility and
			BD.BANK_IN_DOC_NO=:bl_bank_in_doc_no_py and
			BD.BANK_CODE=B.BANK_CODE;
    }


fetch_sum_rec_amt()
 {
    EXEC SQL select sum(bank_in_amt)smamt into :bl_sum_rec_amt 
	          from BL_EXT_ACCT_RECON_DTL
	          Where  ext_acct_code=:nd_acct_code and
			         Nvl(reconciled_ind,'N')='Y';
   }
   
  print_hdr()
	{
      lctr=0;
	  open_recon_cur();
	  bl_sum_bank_amt_re=0;
	  if(first) 
		 {
		    print_page_title();
			fetch_sum_rec_amt();
            lctr=lctr+4; 
			   
		   fprintf(fp,"\n"); 
		   fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/
		   //fprintf(fp,"%c&d0D",ESC); /* set Underline mode */
           /*fprintf(fp,"%15s %11s \n",loc_legend[6],nd_acct_code.arr);
           fprintf(fp,"============================");*/
           fprintf(fp,"\n");
		   fprintf(fp,"%c&d0D",ESC); /* set Underline mode */
		   fprintf(fp,"%31s ",loc_legend[7]);
		   fprintf(fp,"%c&d@",ESC); /* release underline mode */
			    print_formated(bl_sum_rec_amt);
		   fprintf(fp,"\n");
				//fill_dash(strlen(loc_legend[7])+15);
		   fprintf(fp,"\n\n");
		  fprintf(fp,"%c&d0D",ESC); /* set Underline mode */	   
		   fprintf(fp,"%31s \n",loc_legend[8]);
		     fprintf(fp, "%c(s12H", ESC);
		     fprintf(fp,"%c(s-3B",ESC); /* release bold style */
			 fprintf(fp,"%c&d@",ESC); /* release underline mode */
		     fprintf(fp,"\n");

			first=0;
			lctr=lctr+4;
			print_head();
			lctr=lctr+3;
          }

   while(fetch_recon_cur())
  	 {
	   
		
		fprintf(fp,"%-18s%-14s",bl_bank_in_docno_re.arr,bl_bank_in_date_re.arr);	  
		    print_formated(bl_bank_amt_re);
		fprintf(fp,"%-31s%-15s %-31s \n",bl_bank_name.arr,bl_slmt_desc_re.arr,bl_receiver_stmt_ref.arr);	   
		    bl_sum_bank_amt_re=bl_sum_bank_amt_re+bl_bank_amt_re;
			lctr=lctr+1;
		    check_page_end(2,0);   
     }
       fprintf(fp,"%30s ================\n"," ");
       fprintf(fp,"%32s",loc_legend[16]);
			print_formated(bl_sum_bank_amt_re);
       fprintf(fp,"\n");
	     lctr=lctr+3;
			strcpy(loc_legend[9],loc_legend[17]);
			open_payer_cur(); 
			first=1;  
        fprintf(fp,"\n");
			 bl_sum_bank_amt_py=0;

			  if(first) 
			{
			  strcpy(loc_legend[15],loc_legend[23]);
			  print_head();
			  lctr=lctr+4;
			  first=0;
             }

   while(fetch_payer_cur())
	  {
		   
	   
		fprintf(fp,"%-18s%-14s",bl_bank_in_doc_no_py.arr,bl_bank_date_py.arr);

			 print_formated(bl_acct_code_amt_py);
			
	 if(strcmp(bl_bank_in_doc_no_py.arr,"\0")!= 0)
	     {
	       fetch_bank_name();
         fprintf(fp,"%-31s%-15s %s \n",bl_bank_name_py.arr,bl_slmnt_desc_py.arr,bl_batch_doc_num_py.arr);
		  }
        else
		fprintf(fp,"%-31s%-15s %s \n"," ",bl_slmnt_desc_py.arr,bl_batch_doc_num_py.arr);

			 bl_sum_bank_amt_py=bl_sum_bank_amt_py+bl_acct_code_amt_py;
             lctr=lctr+1;
			 sprintf(arg_cnt,"%d",lctr);
		//	disp_message(ERR_MESG, arg_cnt);

			 check_page_end(2,1);  
	  }

    fprintf(fp,"%30s ================\n"," ");
	fprintf(fp,"%32s",loc_legend[16]);
	  print_formated(bl_sum_bank_amt_py);
    fprintf(fp,"\n");
	fprintf(fp,"\f"); 
      lctr=0;

 }
   

   open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLRRECON.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLRRECON.lis");
       proc_exit();
    }
}

print_page_header()
{

print_page_title();
//	fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp,"VER : 4.1 \n\n\n\n");
	fprintf(fp,"           INPUT PARAMETER \n");
	fprintf(fp,"           --------------- \n\n\n\n");
	fprintf(fp,"				%15s  %-11s  \n",loc_legend[6],nd_acct_code.arr);
	/*
  if(strcmp(nd_dept_code.arr,"XX") == 0)
	fprintf(fp,"				%15s  %-11s  ",loc_legend[20],"-----------");  
   else
	fprintf(fp,"				%15s  %-11s  ",loc_legend[20],nd_dept_code.arr);
	*/

	fprintf(fp,"\n\n");
  if(strcmp(nd_fm_date.arr,"\0") != 0)
	{
	fprintf(fp,"		   %15s  FROM      : %s\n",loc_legend[11],nd_fm_date.arr);
	fprintf(fp,"		   %15s    TO      : %s\n\n"," ",nd_to_date.arr);
	}
	fprintf(fp,"\f");

 }

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;

    l_start_point=0;
	l_report_width=132;
	l_acc_entity_length = strlen(hosp_name.arr);

	//Code for Line 1
	fprintf(fp,"\n");
	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	fprintf(fp,"MDL           : BL");
	l_start_point=l_start_point-18;
	print_spaces(l_start_point);
	fprintf(fp,"%s",hosp_name.arr);
	l_comp_name_end_point=l_start_point+18+l_acc_entity_length;
	l_start_point=(l_report_width-(17+strlen(date.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp,"%15.15s : %s\n",loc_legend[2],date.arr);

	//Code for Line 2
	
	l_start_point=0;

	l_start_point=ceill((l_report_width/2)-(strlen(loc_legend[5])+3));
	fprintf(fp,"OPR           : %s",user_id.arr);
//	l_start_point=l_start_point-(strlen(user_id.arr));
	print_spaces(l_start_point);
	fprintf(fp,"%s ",loc_legend[5]);  
	l_start_point=0;
	//l_comp_name_end_point=l_start_point+(strlen(user_id.arr));
		l_start_point=ceill((l_report_width/2)-(strlen(loc_legend[5])+strlen(loc_legend[3])));

//	l_start_point=(l_report_width-(strlen(date_time.arr)-l_comp_name_end_point));
	print_spaces(l_start_point);
	fprintf(fp,"%15.15s : %s\n",loc_legend[3],date_time.arr);  
    
	//Code for Line 3
	l_start_point=0;
	l_start_point=ceill(l_report_width/2)-((strlen(loc_legend[6]))/2);
	fprintf(fp,"%-14.14s: BLRRECON",loc_legend[1]);
	l_start_point=l_start_point-31;
	print_spaces(l_start_point);
	fprintf(fp,"%s %s ",loc_legend[6],nd_acct_code.arr);
	l_comp_name_end_point=l_start_point+24+strlen(loc_legend[6])+strlen(nd_acct_code.arr)+2;
	l_start_point=(l_report_width-(17+11)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp," %15.15s : %d\n",loc_legend[4],++pctr);
    fill_dash(132);
	fprintf(fp,"\n");   
  	
}

             
print_head()
          {
		  fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style 			*/
		   fprintf(fp,"%25s \n",loc_legend[9]);
		  fprintf(fp,"%c(s-3B",ESC); /* release bold style */
		   fill_dash(132);
		   fprintf(fp,"\n");
		   fprintf(fp,"%-18s%-14s%15s  %-31s%-15s %-31s \n",loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[14],loc_legend[15]);
		   fill_dash(132);
		   fprintf(fp,"\n");
		   }
	         
 
fetch_hosp_name()
   {
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	date.arr[0]		 = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
	date.len		 = 0;
    user_id.len      = 0;

   // EXEC SQL SELECT ACCOUNTING_NAME, //saif
     EXEC SQL SELECT ACC_ENTITY_NAME,
					TO_CHAR(SYSDATE,'DD/MM/RRRR'),
					TO_CHAR(SYSDATE,'HH24:MI:SS'),
                    USER
               INTO :hosp_name, 
					:date,
					:date_time, 
					:user_id
               FROM SY_ACC_ENTITY
	          WHERE ACC_ENTITY_ID = :nd_facility;

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	date.arr[date.len]					   = '\0';
	user_id.arr[user_id.len]               = '\0';

}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(fp,"%15s  ",str_amt);
    }
}                        


print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}


fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","-");
}

fill_line(flg)
{
  int j;
  for (j=1;j<=flg;j++)
	fprintf(fp,"%s","_");
}

fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRRECON.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;  

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+12;

	if((lctr+l_lead_lines)> 52) 
	{
    	fprintf(fp,"\f");
		
	  print_page_title();
 
	    print_head();
	   
		lctr=4;
	}
}




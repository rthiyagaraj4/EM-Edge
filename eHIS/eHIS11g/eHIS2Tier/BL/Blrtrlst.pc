/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRTRLST.PC                                     */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 23-AUG-1993                                  */
/* DATE MODIFIED		 : VSK -- FOR BLENH PURPOSE 18/12/2000          */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                        */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
    
#include <stdio.h>
#include <string.h>      
#include "bl.h"       

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define INIT_MESG "Report Generation In Progress"
/*
#define DEBUG 0
*/
  

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
	    date_time                                  [20],
	    user_id                                    [40],
		nd_pwd									   [100],
	    nd_session_id                              [16],
	    nd_pgm_date                                [25],
	    d_curr_pgm_name                            [15],
	    nd_fm_date                                 [12],
	    nd_to_date                                 [12],
	    nd_serv_ind                                [2],
	    nd_fm_date_prn                             [12],
	    nd_to_date_prn                             [12],
        d_short_name_full                         [61],
	    bl_patient_name_loc_lang                   [61],
	    bl_patient_name                            [61],
		bl_patient_name1                           [61],
	    bl_blng_long_desc                          [31],
	    bl_pkg_long_desc                           [41],
	    bl_blng_class_desc                         [16],
		date_convert							   [21],
		nd_temp_date                               [21],
		nd_loc_date									[21],
		l_fm_patient_id								[21],
		l_to_patient_id								[21],
		p_language_id								[3],
		d_facility_id								[10],
		l_transaction_type							[3],
		l_pk_value		                            [100],
		nd_facility_id                              [3],
		l_translated_value	                        [201],
		l_confirm_yn								[3];

   VARCHAR bl_pat_trx_date                             [13],
		bl_pat_trx_doc_ref                          [21],
		bl_pat_patient_id                           [21],
		bl_pat_episode_type                         [2],
		bl_pat_episode_id                           [9],
		bl_pat_visit_id                             [5],
		bl_pat_blng_grp_id                          [3],
		bl_pat_blng_class_code                      [3],
		bl_pat_trx_doc_ref_line_num                 [5],
		bl_pat_trx_doc_ref_seq_num                  [5],
		bl_pat_package_ind                          [2],
		bl_pat_package_service_code                 [11],
		bl_pat_serv_qty                             [23],
		bl_pat_base_charge_amt                      [23],
		bl_pat_upd_gross_charge_amt                 [23],
		bl_pat_upd_disc_amt                         [23],
		bl_pat_upd_net_charge_amt                   [23],
		bl_pat_service_date                         [21],
		bl_pat_serv_item_code                       [21],
		bl_pat_serv_item_desc                       [41],
		bl_pat_physician_id                         [16],
		bl_pat_canadj_reason_text                   [51];

 char   bl_pat_trx_status,
		bl_pat_rev_adj_trx_ind;   

 double bl_pat_base_charge_amt_db,
		bl_pat_gross_charge_amt_db,
		bl_pat_disc_amt_db,
		bl_pat_net_charge_amt_db,

		bl_ref_tot_base_charge_amt,
		bl_ref_tot_gross_charge_amt,
		bl_ref_tot_disc_amt,
		bl_ref_tot_net_charge_amt,

		bl_grn_tot_base_charge_amt,
		bl_grn_tot_gross_charge_amt,
		bl_grn_tot_disc_amt,
		bl_grn_tot_net_charge_amt;

VARCHAR m_ins_pat_ind[20];

char	l_mesg[200];
char loc_legend[999][201];
char x_msg[200];

  int i;	
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    lctr = 0,pctr = 0;

char   store_doc_ref              [21];
char   store_line_num             [21];

FILE *fp;

int rec_ctr = 0,dtl_ctr = 0;
int dtl_head = 0;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRTRLST");

     strcpy(nd_pwd.arr,argv[1]);
	 nd_pwd.len = strlen(nd_pwd.arr);

	 EXEC sql connect :nd_pwd;
	  
	  if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }
	set_meduser_role(); 
	strcpy(p_language_id.arr,l_language_id.arr);
    p_language_id.len = l_language_id.len;

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    start_prog_msg();

    fetch_prog_param();
	fetch_legend_value();
    declare_cur();
    fetch_hosp_name();
    open_file();
     
    open_cur();
	

    while(fetch_cur())
    {

       if (rec_ctr == 0)
       {
		  strcpy(store_line_num,bl_pat_trx_doc_ref_line_num.arr);
		  strcpy(store_doc_ref,bl_pat_trx_doc_ref.arr);
		  print_rec(0);
	      //print_rec(1);
       }
       if (strcmp(store_doc_ref,bl_pat_trx_doc_ref.arr))
       {
			print_doc_tot();
			print_rec(0);
			store_line_num[0] = '\0';
			strcpy(store_doc_ref,bl_pat_trx_doc_ref.arr);
       }
       print_rec(1);
       rec_ctr++;
     
	 }
     
	 if (rec_ctr)
		print_grand_tot();

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
	 err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

fetch_prog_param()
{
    nd_fm_date.arr[0]           = '\0';
    nd_to_date.arr[0]           = '\0';
    nd_serv_ind.arr[0]          = '\0';
    nd_fm_date_prn.arr[0]           = '\0';
    nd_to_date_prn.arr[0]           = '\0';

    nd_fm_date.len              = 0;
    nd_to_date.len              = 0;
    nd_serv_ind.len             = 0;
    nd_fm_date_prn.len              = 0;
    nd_to_date_prn.len              = 0;

/*-- Y2K correction. Format introduced for 'FROM AND TO' Date prn variable
     as DD/MM/YYYY in form itself. So, no need to format again below also
	 VSK 15/11/1999 */

   EXEC SQL SELECT PARAM1,PARAM2,PARAM3,PARAM1,PARAM2,
//		   TO_CHAR(TO_DATE(PARAM1,'DD-MON-YY'),'DD/MM/YYYY'),
//		   TO_CHAR(TO_DATE(PARAM2,'DD-MON-YY'),'DD/MM/YYYY')
			param4, param5, param6, operating_facility_id	
	      INTO :nd_fm_date,
		   :nd_to_date,
		   :nd_serv_ind,
		   :nd_fm_date_prn,
		   :nd_to_date_prn,
		   :l_fm_patient_id,
		   :l_to_patient_id,
		   :l_transaction_type,
		   :d_facility_id
	      FROM SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_name
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;


   if (OERROR)
		err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
		err_mesg("No Record found in SY_PROG_PARAM",0,"");

    nd_fm_date.arr[nd_fm_date.len]                = '\0';
    nd_to_date.arr[nd_to_date.len]                = '\0';
    nd_serv_ind.arr[nd_serv_ind.len] = '\0';
    nd_fm_date_prn.arr[nd_fm_date_prn.len]                = '\0';
    nd_to_date_prn.arr[nd_to_date_prn.len]                = '\0';
	d_facility_id.arr[d_facility_id.len]                = '\0';

	strcpy(g_facility_id, d_facility_id.arr);

   EXEC SQL DELETE SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_name
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
	 err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

	/*Y2K correction. Format introduced for 'FROM AND TO' Date 
	as DD/MM/YYYY VSK 15/11/1999 */

     EXEC SQL DECLARE BL_PAT_CHG_FOLIO_CUR CURSOR FOR
	   SELECT TO_CHAR(TRUNC(TRX_DATE),'DD/MM/YYYY'),
		      TRX_DOC_REF,
		      PATIENT_ID,
		      EPISODE_TYPE,
		      EPISODE_ID,
		      VISIT_ID,
		      BLNG_GRP_ID,
		      BLNG_CLASS_CODE,
		      TRX_DOC_REF_LINE_NUM,
		      TRX_DOC_REF_SEQ_NUM,
		      PACKAGE_IND,
		      PACKAGE_SERVICE_CODE,
		      TO_CHAR(NVL(SERV_QTY,0),'999,990.99MI'),
		      TO_CHAR(NVL(BASE_CHARGE_AMT,0),'999,999,990.99MI'),
		      TO_CHAR(NVL(UPD_GROSS_CHARGE_AMT,0),'999,999,990.99MI'),
		      TO_CHAR(NVL(UPD_DISC_AMT,0),'999,999,990.99MI'),
		      TO_CHAR(NVL(UPD_NET_CHARGE_AMT,0),'999,999,990.99MI'),
		      TO_CHAR(SERVICE_DATE,'DD/MM/YYYY HH24:MI'),
		      SERV_ITEM_CODE,
			  decode(:p_language_id,'en', substr(SERV_ITEM_DESC,1,30),substr(SERV_ITEM_DESC_OTH_LANG,1,30)),
		      //SERV_ITEM_DESC,
		      PHYSICIAN_ID,
		      NVL(BASE_CHARGE_AMT,0),
		      NVL(UPD_GROSS_CHARGE_AMT,0),
		      NVL(UPD_DISC_AMT,0), 
		      NVL(UPD_NET_CHARGE_AMT,0),
			  TRX_STATUS,
			  REV_ADJ_TRX_IND,
			  CANADJ_REASON_TEXT,
			  INS_PKG_PAT_IND,
			  DECODE(NVL(CONFIRMED_YN,'N'),'Y','C','N','I')
		 FROM BL_PATIENT_CHARGES_FOLIO
		WHERE TRUNC(TRX_DATE) BETWEEN TO_DATE(:nd_fm_date,'DD/MM/YYYY')
						   AND TO_DATE(:nd_to_date,'DD/MM/YYYY')
		  AND patient_id BETWEEN NVL(:l_fm_patient_id,'!!!!!!!!!!!!!!!!!!!!')
		  				     AND NVL(:l_to_patient_id,'~~~~~~~~~~~~~~~~~~~~')
		  AND NVL(confirmed_yn,'N') = decode(:l_transaction_type,'C','Y','I','N','B',NVL(confirmed_yn,'N'))
		  AND NVL(operating_facility_id,'X') = NVL(:d_facility_id,'X')
		  AND	(
					(
						NVL(:nd_serv_ind,'O') = 'B' 
						AND 
						FOLIO_REMARKS IN ( 'BED CHARGES','ROUNDING FEE','STD CONSUMABLES',
				 						   'BED CHARGES AT DISCHARGE', 'ROUNDING FEE AT DISCHARGE',
										   'STD CONSUMABLES AT DISCHARGE')					  
					)
					OR
					(
						NVL(:nd_serv_ind,'O') = 'O' 
						AND
						EPISODE_TYPE = 'O'
					)
					OR
					(
						NVL(:nd_serv_ind,'O') = 'I' 
						AND
						EPISODE_TYPE = 'I'
					)
					OR
					(
						NVL(:nd_serv_ind,'O') = 'A'
						AND 
						1=1 
					) 
                                        OR  //EPNH 30/10/2004
					(
						NVL(:nd_serv_ind,'O') = 'E' 
						AND
						EPISODE_TYPE = 'E'
					)
					OR  //EPNH 30/10/2004
					(
						NVL(:nd_serv_ind,'O') = 'D' 
						AND
						EPISODE_TYPE = 'D'
					)

				)
		  AND TRX_FINALIZE_IND = 'Y'
		ORDER 
		   BY TRX_DOC_REF,
			  TRX_DOC_REF_LINE_NUM;

    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
	      SELECT 
		  //SUBSTR(SHORT_NAME_LOC_LANG,1,16),
		     /*substr(SHORT_NAME,1,30),
			   decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname2,
               */
			     //short_name
				 
			decode(:p_language_id,'en', substr(short_name,1,30),substr(SHORT_NAME_LOC_LANG,1,30)),
			null
		FROM MP_PATIENT_MAST
	       WHERE PATIENT_ID = :bl_pat_patient_id;

    EXEC SQL DECLARE BL_BLNG_GRP_CUR CURSOR FOR
	      SELECT LONG_DESC
		FROM BL_BLNG_GRP_LANG_VW
	       WHERE BLNG_GRP_ID = :bl_pat_blng_grp_id
		   AND language_id=:p_language_id;

    EXEC SQL DECLARE BL_PACKAGE_HDR_CUR CURSOR FOR
	      SELECT SHORT_DESC
		FROM BL_PACKAGE_HDR
	       WHERE PACKAGE_CODE = :bl_pat_package_service_code;


    EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR
	      SELECT SHORT_DESC
		FROM BL_BLNG_SERV_lang_vw
	       WHERE BLNG_SERV_CODE = :bl_pat_package_service_code
		   and language_id=:p_language_id;

    EXEC SQL DECLARE BL_BLNG_CLASS_CUR CURSOR FOR
	      SELECT SHORT_DESC
		FROM BL_BLNG_CLASS_lang_vw
	       WHERE BLNG_CLASS_CODE = :bl_pat_blng_class_code
		   and language_id=:p_language_id;
}

open_cur()
{
    EXEC SQL OPEN BL_PAT_CHG_FOLIO_CUR;
    if (OERROR)
	 err_mesg("OPEN failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");
}

fetch_cur()
{

	m_ins_pat_ind.arr[0] = '\0';
	bl_pat_trx_date.arr[0]                                            = '\0';
	bl_pat_trx_doc_ref.arr[0]                                         = '\0';
	bl_pat_patient_id.arr[0]                                          = '\0';
	bl_pat_episode_type.arr[0]                                        = '\0';
	bl_pat_episode_id.arr[0]                                          = '\0';
	bl_pat_visit_id.arr[0]                                            = '\0';
	bl_pat_blng_grp_id.arr[0]                                         = '\0';
	bl_pat_blng_class_code.arr[0]                                     = '\0';
	bl_pat_trx_doc_ref_line_num.arr[0]                                = '\0';
	bl_pat_trx_doc_ref_seq_num.arr[0]                                 = '\0';
	bl_pat_package_ind.arr[0]                                         = '\0';
	bl_pat_package_service_code.arr[0]                                = '\0';
	bl_pat_serv_qty.arr[0]                                            = '\0';
	bl_pat_base_charge_amt.arr[0]                                     = '\0';
	bl_pat_upd_gross_charge_amt.arr[0]                                = '\0';
	bl_pat_upd_disc_amt.arr[0]                                        = '\0';
	bl_pat_upd_net_charge_amt.arr[0]                                  = '\0';
	bl_pat_service_date.arr[0]                                        = '\0';
	bl_pat_serv_item_code.arr[0]                                      = '\0';
	bl_pat_serv_item_desc.arr[0]                                      = '\0';
	bl_pat_physician_id.arr[0]                                        = '\0';
	bl_pat_canadj_reason_text.arr[0]                                  = '\0';

	bl_pat_trx_status       = '\0';
	bl_pat_rev_adj_trx_ind  = '\0';

	bl_pat_trx_date.len                                               = 0;
	bl_pat_trx_doc_ref.len                                            = 0;
	bl_pat_patient_id.len                                             = 0;
	bl_pat_episode_type.len                                           = 0;
	bl_pat_episode_id.len                                             = 0;
	bl_pat_visit_id.len                                               = 0;
	bl_pat_blng_grp_id.len                                            = 0;
	bl_pat_blng_class_code.len                                        = 0;
	bl_pat_trx_doc_ref_line_num.len                                   = 0;
	bl_pat_trx_doc_ref_seq_num.len                                    = 0;
	bl_pat_package_ind.len                                            = 0;
	bl_pat_package_service_code.len                                   = 0;
	bl_pat_serv_qty.len                                               = 0;
	bl_pat_base_charge_amt.len                                        = 0;
	bl_pat_upd_gross_charge_amt.len                                   = 0;
	bl_pat_upd_disc_amt.len                                           = 0;
	bl_pat_upd_net_charge_amt.len                                     = 0;
	bl_pat_service_date.len                                           = 0;
	bl_pat_serv_item_code.len                                         = 0;
	bl_pat_serv_item_desc.len                                         = 0;
	bl_pat_physician_id.len                                           = 0;
	bl_pat_canadj_reason_text.len                                     = 0;
	m_ins_pat_ind.len = 0;
	bl_pat_base_charge_amt_db                                         = 0;
	bl_pat_gross_charge_amt_db                                        = 0;
	bl_pat_disc_amt_db                                                = 0;
	bl_pat_net_charge_amt_db                                          = 0;



     EXEC SQL FETCH BL_PAT_CHG_FOLIO_CUR
	       INTO :bl_pat_trx_date,
		    :bl_pat_trx_doc_ref,
		    :bl_pat_patient_id,
		    :bl_pat_episode_type,
		    :bl_pat_episode_id,
		    :bl_pat_visit_id,
		    :bl_pat_blng_grp_id,
		    :bl_pat_blng_class_code,
		    :bl_pat_trx_doc_ref_line_num,
		    :bl_pat_trx_doc_ref_seq_num,
		    :bl_pat_package_ind,
		    :bl_pat_package_service_code,
		    :bl_pat_serv_qty,
		    :bl_pat_base_charge_amt,
		    :bl_pat_upd_gross_charge_amt,
		    :bl_pat_upd_disc_amt,
		    :bl_pat_upd_net_charge_amt,
		    :bl_pat_service_date,
		    :bl_pat_serv_item_code,
		    :bl_pat_serv_item_desc,
		    :bl_pat_physician_id,
		    :bl_pat_base_charge_amt_db,
		    :bl_pat_gross_charge_amt_db,
		    :bl_pat_disc_amt_db,
		    :bl_pat_net_charge_amt_db,
		    :bl_pat_trx_status,
		    :bl_pat_rev_adj_trx_ind,
		    :bl_pat_canadj_reason_text,
			:m_ins_pat_ind,
			:l_confirm_yn;
	

      if (OERROR)
	 err_mesg("FETCH failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");

	bl_pat_trx_date.arr[bl_pat_trx_date.len]                                 = '\0';
	bl_pat_trx_doc_ref.arr[bl_pat_trx_doc_ref.len]                           = '\0';
	bl_pat_patient_id.arr[bl_pat_patient_id.len]                             = '\0';
	bl_pat_episode_type.arr[bl_pat_episode_type.len]                         = '\0';
	bl_pat_episode_id.arr[bl_pat_episode_id.len]                             = '\0';
	bl_pat_visit_id.arr[bl_pat_visit_id.len]                                 = '\0';
	bl_pat_blng_grp_id.arr[bl_pat_blng_grp_id.len]                           = '\0';
	bl_pat_blng_class_code.arr[bl_pat_blng_class_code.len]                   = '\0';
	bl_pat_trx_doc_ref_line_num.arr[bl_pat_trx_doc_ref_line_num.len]         = '\0';
	bl_pat_trx_doc_ref_seq_num.arr[bl_pat_trx_doc_ref_seq_num.len]           = '\0';
	bl_pat_package_ind.arr[bl_pat_package_ind.len]                           = '\0';
	bl_pat_package_service_code.arr[bl_pat_package_service_code.len]         = '\0';
	bl_pat_serv_qty.arr[bl_pat_serv_qty.len]                                 = '\0';
	bl_pat_base_charge_amt.arr[bl_pat_base_charge_amt.len]                   = '\0';
	bl_pat_upd_gross_charge_amt.arr[bl_pat_upd_gross_charge_amt.len]         = '\0';
	bl_pat_upd_disc_amt.arr[bl_pat_upd_disc_amt.len]                         = '\0';
	bl_pat_upd_net_charge_amt.arr[bl_pat_upd_net_charge_amt.len]             = '\0';
	bl_pat_service_date.arr[bl_pat_service_date.len]                         = '\0';
	bl_pat_serv_item_code.arr[bl_pat_serv_item_code.len]                     = '\0';
	bl_pat_serv_item_desc.arr[bl_pat_serv_item_desc.len]                     = '\0';
	bl_pat_physician_id.arr[bl_pat_physician_id.len]                         = '\0';
	bl_pat_canadj_reason_text.arr[bl_pat_canadj_reason_text.len]             = '\0';
	m_ins_pat_ind.arr[m_ins_pat_ind.len] = '\0';
	l_confirm_yn.arr[l_confirm_yn.len] = '\0';

    return(LAST_ROW?0:1);
}

fetch_dtls()    
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;  

   if (OERROR)
		err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_name1.arr[0]                    = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_name1.len                       = 0;

   EXEC SQL FETCH BL_PAT_NAME_CUR
	         INTO :bl_patient_name_loc_lang,
		          /*:bl_patient_name,
				  :bl_patient_name1,*/
                  :d_short_name_full;

   if (OERROR)
		err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
   bl_patient_name.arr[bl_patient_name.len] = '\0';
   bl_patient_name1.arr[bl_patient_name1.len] = '\0';
   d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
  EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name1    := :bl_patient_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_name1.arr[bl_patient_name1.len]  = '\0';

   EXEC SQL OPEN BL_BLNG_GRP_CUR;
   
   if (OERROR)
		err_mesg("OPEN failed on cursor BL_BLNG_GRP_CUR",0,"");

    bl_blng_long_desc.arr[0]                                          = '\0';
    bl_blng_long_desc.len                                             = 0;

    EXEC SQL FETCH BL_BLNG_GRP_CUR
	         INTO :bl_blng_long_desc;

	if (OERROR)
		err_mesg("FETCH failed on cursor BL_BLNG_GRP_CUR",0,"");

	bl_blng_long_desc.arr[bl_blng_long_desc.len]                       = '\0';

    EXEC SQL OPEN BL_BLNG_CLASS_CUR;
    
	if (OERROR)
		err_mesg("OPEN failed on cursor BL_BLNG_CLASS_CUR",0,"");

    bl_blng_class_desc.arr[0]                                          = '\0';
    bl_blng_class_desc.len                                             = 0;

    EXEC SQL FETCH BL_BLNG_CLASS_CUR
	      INTO :bl_blng_class_desc;

	if (OERROR)
		err_mesg("FETCH failed on cursor BL_BLNG_CLASS_CUR",0,"");

	bl_blng_class_desc.arr[bl_blng_class_desc.len]                       = '\0';
}

fetch_dtls1()
{
    bl_pkg_long_desc.arr[0]     = '\0';
    bl_pkg_long_desc.len		= 0;

    if (bl_pat_package_ind.arr[0] == 'P')
    {
		EXEC SQL OPEN BL_PACKAGE_HDR_CUR;
		
		if (OERROR)
			err_mesg("OPEN failed on cursor BL_PACKAGE_HDR_CUR",0,"");
   
	
		EXEC SQL FETCH BL_PACKAGE_HDR_CUR
				  INTO :bl_pkg_long_desc;

		if (OERROR)
			err_mesg("FETCH failed on cursor BL_PACKAGE_HDR_CUR",0,"");
	}
	else if (bl_pat_package_ind.arr[0] == 'S')
	{
		EXEC SQL OPEN BL_BLNG_SERV_CUR;
		
		if (OERROR)
			err_mesg("OPEN failed on cursor BL_BLNG_SERV_CUR",0,"");
   
		EXEC SQL FETCH BL_BLNG_SERV_CUR
			     INTO :bl_pkg_long_desc;

		if (OERROR)
			err_mesg("FETCH failed on cursor BL_BLNG_SERV_CUR",0,"");
	}

	bl_pkg_long_desc.arr[bl_pkg_long_desc.len]                      = '\0';
}

print_rec(ind)
int ind;
{

	char s_status;


	if (ind == 0)
	{
		fetch_dtls();
		if (lctr > 51)
			print_head();
	    init_date_temp_var();
		strcpy(date_convert.arr,bl_pat_trx_date.arr);
		if (date_convert.arr[0]!='\0')
		{
		fun_change_loc_date();
		}
 		fprintf(fp,"%-10s %-20s %-20s %-16.16s %-30.30s %1s %8s %4s\n",
		date_convert.arr,
		bl_pat_trx_doc_ref.arr,
		bl_pat_patient_id.arr,
		bl_patient_name_loc_lang.arr,
		bl_patient_name.arr,
		bl_pat_episode_type.arr,
		bl_pat_episode_id.arr,
		bl_pat_visit_id.arr);

		if(strlen(bl_patient_name1.arr) > 2)
	  {
		fprintf(fp,"%69s %s \n"," ",bl_patient_name1.arr);
		lctr++;
	  }


		fprintf(fp,"%4s %-24.24s  %-2s %-15s           %s\n",
		bl_pat_blng_grp_id.arr,
		bl_blng_long_desc.arr,
		bl_pat_blng_class_code.arr,
		bl_blng_class_desc.arr,
		l_confirm_yn.arr);



		lctr+=2;

		
		if(dtl_head)
			print_det_head();
	}
	else
	{
		fetch_dtls1();
		if (lctr > 50)
		{
			print_head();
			print_det_head();
		}
		
		if (strcmp(store_line_num,bl_pat_trx_doc_ref_line_num.arr))
		{
			dtl_ctr = 0;
			strcpy(store_line_num,bl_pat_trx_doc_ref_line_num.arr);
		}
		
		if (dtl_ctr == 0)
		{
			fprintf(fp,"\n");
			lctr++;
		}

		if(bl_pat_rev_adj_trx_ind)
			s_status = bl_pat_rev_adj_trx_ind;
		else
			s_status = bl_pat_trx_status;

     
	        	//fprintf(fp,"%-10s%4s %4s %1s %-10s %-15s  %1s %s ",
					//fprintf(fp,"%-5s%4s %4s %1s %-10s %-15s %1s %s ",
		//fprintf(fp,"%-5s%4s %4s %1s %-10s %-18.18s %1s %s ",
		fprintf(fp,"%-5s%4.4s %4.4s %1s    %-10s%-13.13s %1s  %s ",
	       " ",
	       (dtl_ctr==0)?bl_pat_trx_doc_ref_line_num.arr:" ",
	       bl_pat_trx_doc_ref_seq_num.arr,
	       bl_pat_package_ind.arr,
	       bl_pat_package_service_code.arr,
	       bl_pkg_long_desc.arr,
		   m_ins_pat_ind.arr,
	       bl_pat_serv_qty.arr);
	       print_formated(bl_pat_base_charge_amt_db);
		   fprintf(fp," ");
	       print_formated(bl_pat_gross_charge_amt_db);
		   fprintf(fp," ");
	       print_formated(bl_pat_disc_amt_db);
		   fprintf(fp," ");
	       print_formated(bl_pat_net_charge_amt_db);
	       fprintf(fp,"  %c   %c\n",bl_pat_trx_status, bl_pat_rev_adj_trx_ind);
		//fprintf(fp,"%-10s%-15s%-16s %-6s  %-50s\n"," "," ",bl_pat_service_date.arr,bl_pat_physician_id.arr,bl_pat_canadj_reason_text.arr);
	    init_date_temp_var();
		strcpy(date_convert.arr,bl_pat_service_date.arr);
		if (date_convert.arr[0]!='\0')
		{
		fun_change_loc_date();
		} 
		fprintf(fp,"%-5s%-15s%-16s %-6s  %-50s\n"," "," ",date_convert.arr,bl_pat_physician_id.arr,bl_pat_canadj_reason_text.arr);

		dtl_ctr++;
		if (bl_pat_serv_item_code.len != 0)
		{
			fprintf(fp,"%-10s%-12s%-20s %-40s\n"," "," ",bl_pat_serv_item_code.arr,bl_pat_serv_item_desc.arr);
			lctr++;
		}
		lctr+=2;

		bl_ref_tot_base_charge_amt  += bl_pat_base_charge_amt_db;
		bl_ref_tot_gross_charge_amt += bl_pat_gross_charge_amt_db;
		bl_ref_tot_disc_amt         += bl_pat_disc_amt_db;
		bl_ref_tot_net_charge_amt   += bl_pat_net_charge_amt_db;
	}

	fflush(fp);
}

print_doc_tot()
{
    if (lctr > 52)
       print_head();

    fprintf(fp,"%59s---------------  --------------  --------------  --------------\n"," ");
    fprintf(fp,"%26s%13.13s                    "," ",loc_legend[52]);
    print_formated(bl_ref_tot_base_charge_amt); fprintf(fp," ");
    print_formated(bl_ref_tot_gross_charge_amt); fprintf(fp," ");
    print_formated(bl_ref_tot_disc_amt); fprintf(fp," ");
    print_formated(bl_ref_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%59s---------------  --------------  --------------  --------------\n\n"," ");
    lctr +=4;

     bl_grn_tot_base_charge_amt  += bl_ref_tot_base_charge_amt;
     bl_grn_tot_gross_charge_amt += bl_ref_tot_gross_charge_amt;
     bl_grn_tot_disc_amt         += bl_ref_tot_disc_amt;
     bl_grn_tot_net_charge_amt   += bl_ref_tot_net_charge_amt;

     bl_ref_tot_base_charge_amt = 0;
     bl_ref_tot_gross_charge_amt = 0;
     bl_ref_tot_disc_amt = 0;
     bl_ref_tot_net_charge_amt = 0;
}

print_grand_tot()
{
    print_doc_tot();

    if (lctr > 52)
       print_head();

    fprintf(fp,"%59s---------------  --------------  --------------  --------------\n"," ");
    fprintf(fp,"%26s%19.19s              "," ",loc_legend[53]);
    print_formated(bl_grn_tot_base_charge_amt); fprintf(fp," ");
    print_formated(bl_grn_tot_gross_charge_amt); fprintf(fp," ");
    print_formated(bl_grn_tot_disc_amt); fprintf(fp," ");
    print_formated(bl_grn_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%59s---------------  --------------  --------------  --------------\n\n"," ");
    lctr +=3;
}

end_of_rep()
{
fprintf(fp,"\n\n                                                      ***%15.15s***\n",loc_legend[54]);
fflush(fp);
}

open_file()
{
char filename[30];
	strcpy(filename,WORKING_DIR);
    strcat(filename,"blrtrlst.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrtrlst.lis");
       proc_exit();
    }
    print_title();
    print_head();
}


/***** Printing of the Title    **********/

print_title()
{
    init_date_temp_var();
	strcpy(date_convert.arr,date_time.arr);
	fun_change_loc_date();
 	fprintf(fp,"\f%-6.6s : %-5s                                         %-30s                                     %-15s\n",loc_legend[02],loc_legend[5],hosp_name.arr,date_convert.arr);
	fprintf(fp,"%-6.6s : %-10s \n",loc_legend[3], user_id.arr);
	fprintf(fp,"%-6.6s : %-10.10s                              %-50.50s                   %8.8s: %4d\n",loc_legend[4],loc_legend[7],loc_legend[8],loc_legend[6],++pctr);
    init_date_temp_var();
	strcpy(date_convert.arr,nd_fm_date_prn.arr);
	fun_change_loc_date();
 	fprintf(fp,"                                             (%5s : %10s ",loc_legend[16],date_convert.arr);
	init_date_temp_var();
	strcpy(date_convert.arr,nd_to_date_prn.arr);
	fun_change_loc_date();
 	fprintf(fp,"  %5.5s : %10s)\n",loc_legend[17],date_convert.arr);

	if (nd_serv_ind.arr[0] == 'A')
		fprintf(fp,"%-20.20s\n",loc_legend[9]);
	else if (nd_serv_ind.arr[0] == 'O')
		fprintf(fp,"%-33.33s\n",loc_legend[10]);
	else if (nd_serv_ind.arr[0] == 'E')
		fprintf(fp,"%-26.26s\n",loc_legend[11]);        
	else if (nd_serv_ind.arr[0] == 'I')
		fprintf(fp,"%-26.26s\n",loc_legend[12]);
        else if (nd_serv_ind.arr[0] == 'D')
		fprintf(fp,"%-26.26s\n",loc_legend[13]);
	else if (nd_serv_ind.arr[0] == 'B')
		fprintf(fp,"%-35.35s\n",loc_legend[14]);
    
	fprintf(fp,"-------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp,"%6.6s : 4.1\n",loc_legend[55]);
	fflush(fp);

	fprintf(fp,"\n\n\n\n        %-22s :\n        -----------------\n\n",loc_legend[01]);
    init_date_temp_var();
	strcpy(date_convert.arr,nd_fm_date_prn.arr);
	fun_change_loc_date();
 	fprintf(fp,"                  %-10.10s           %-10.10s : %s\n",loc_legend[15],loc_legend[16],date_convert.arr);
	init_date_temp_var();
	strcpy(date_convert.arr,nd_to_date_prn.arr);
	fun_change_loc_date();
 	fprintf(fp,"                                       %-10.10s : %s\n\n",loc_legend[17],date_convert.arr);
	if(l_fm_patient_id.arr[0]=='\0')
	fprintf(fp,"                  %-15.15s      %-10.10s : %-10s\n",loc_legend[18],loc_legend[16],loc_legend[50]);
	else
	fprintf(fp,"                  %-15.15s      %-10.10s : %-20s\n",loc_legend[18],loc_legend[16],l_fm_patient_id.arr);
	if(l_to_patient_id.arr[0]=='\0')
	fprintf(fp,"                                       %-10.10s : %-10s\n\n",loc_legend[17],loc_legend[51]);
	else
		fprintf(fp,"                                       %-10.10s : %-20s\n\n",loc_legend[17],l_to_patient_id.arr);

	fprintf(fp,"                  %-20.20s            : %1s\n",loc_legend[19],l_transaction_type.arr);
	fprintf(fp,"                  (%-15.15s     %-17.17s     %-12.12s)\n\n",loc_legend[21],loc_legend[22],loc_legend[23]);

	if (nd_serv_ind.arr[0] == 'A')
   		fprintf(fp,"                  %-25.25s       : %s\n\n",loc_legend[20],loc_legend[9]);
		//fprintf(fp,"%-20.20s\n",loc_legend[9]);
	else if (nd_serv_ind.arr[0] == 'O')
		//fprintf(fp,"%-33.33s\n",loc_legend[10]);
		   fprintf(fp,"                  %-25.25s       : %s\n\n",loc_legend[20],loc_legend[10]);	 
	else if (nd_serv_ind.arr[0] == 'E')
	     //fprintf(fp,"%-26.26s\n",loc_legend[11]);        
		 		   fprintf(fp,"                  %-25.25s       : %s\n\n",loc_legend[20],loc_legend[11]);	 
	else if (nd_serv_ind.arr[0] == 'I')
		//fprintf(fp,"%-26.26s\n",loc_legend[12]);
		 	   fprintf(fp,"                  %-25.25s       : %s\n\n",loc_legend[20],loc_legend[12]);	 
        else if (nd_serv_ind.arr[0] == 'D')
		//fprintf(fp,"%-26.26s\n",loc_legend[13]);
				  fprintf(fp,"                  %-25.25s       : %s\n\n",loc_legend[20],loc_legend[13]);	 
	else if (nd_serv_ind.arr[0] == 'B')
		//fprintf(fp,"%-35.35s\n",loc_legend[14]);
				  fprintf(fp,"                  %-25.25s       : %s\n\n",loc_legend[20],loc_legend[14]);	 
  

	//fprintf(fp,"                  %-25.25s       : %s\n\n",loc_legend[20],nd_serv_ind.arr);

}

/***** Printing of the Header    **********/    
print_head()
{
	init_date_temp_var();
	strcpy(date_convert.arr,date_time.arr);
	fun_change_loc_date();
 	fprintf(fp,
	"\f%-6.6s : %-5s                                         %-30s                                     %-15s\n",loc_legend[02],loc_legend[05],
	hosp_name.arr,date_convert.arr);
	fprintf(fp,"%-6.6s : %-10s \n",loc_legend[03], user_id.arr);
	fprintf(fp,
	"%-6.6s : %-10.10s                              %-50.50s                   %8.8s: %4d\n",loc_legend[04],loc_legend[07],
	loc_legend[8],loc_legend[06],++pctr);
	init_date_temp_var();
	strcpy(date_convert.arr,nd_fm_date_prn.arr);
	fun_change_loc_date();
 	fprintf(fp,"                                              (%5s : %-10s ",loc_legend[16],date_convert.arr);
	init_date_temp_var();
	strcpy(date_convert.arr,nd_to_date_prn.arr);
	fun_change_loc_date();
 	fprintf(fp,"  %5.5s : %10s)\n",loc_legend[17],date_convert.arr);
	if (nd_serv_ind.arr[0] == 'A')
		fprintf(fp,"%-20.20s\n",loc_legend[9]);
	else if (nd_serv_ind.arr[0] == 'O')
		fprintf(fp,"%-33.33s\n",loc_legend[10]);
	else if (nd_serv_ind.arr[0] == 'E')
		fprintf(fp,"%-26.26s\n",loc_legend[11]);
	else if (nd_serv_ind.arr[0] == 'I')
		fprintf(fp,"%-26.26s\n",loc_legend[12]);
	else if (nd_serv_ind.arr[0] == 'D')
		fprintf(fp,"%-26.26s\n",loc_legend[13]);
	else if (nd_serv_ind.arr[0] == 'B')
		fprintf(fp,"%-35.35s\n",loc_legend[14]);

 /*   fprintf(fp,"TRX DATE   TRX DOC REF          PATIENT NO & NAME                                                 EPISODE DTLS\n");
   	  fprintf(fp,"           BILLING GROUP                   BILLING CLASS   TRN TYPE\n");*/


	
	fprintf(fp,"-------------------------------------------------------------------------------------------------------------------------------------\n");
	fprintf(fp,"%-10.10s %-16.16s     %-35.35s                               %-25.25s\n",loc_legend[24],loc_legend[25],loc_legend[26],loc_legend[27]);
	fprintf(fp,"%-20.20s     %20.20s        %-15.15s\n",loc_legend[28],loc_legend[29],loc_legend[30]);
	fprintf(fp,"-------------------------------------------------------------------------------------------------------------------------------------\n");
	fflush(fp);
	lctr = 11;
	dtl_head = 1;
}

print_det_head()
{
	if (lctr > 52)
		 print_head();
      /*fprintf(fp,"%-10sLINE  SEQ SRV  SERV DESCRIPTION         SERVICE QTY            BASE           GROSS            DISC             NET\n"," ");
        fprintf(fp,"%-10s NUM  NUM IND  SERVICE DATE  DOCTOR  I/P Ind.                   CHG             CHG             AMT             CHG STS ADJ   \n"," ");*/

 fprintf(fp,"%-5s--------------------------------------------------------------------------------------------------------------------------------\n"," ");
 fprintf(fp,"%-5s%4.4s %4.4s %3.3s  %-23.23s %13.13s    %13.13s   %13.13s   %13.13s   %13.13s %4.4s %-6.6s\n"," ",loc_legend[31],loc_legend[33],loc_legend[34],loc_legend[36],loc_legend[37],loc_legend[38],loc_legend[39],loc_legend[40],loc_legend[41],loc_legend[47],loc_legend[48]);
 fprintf(fp,"%-5s%4.4s %4.4s %3.3s  %-13.13s %7.7s %-15.15s      %11.11s     %11.11s    %12.12s   %13.13s\n"," ",loc_legend[32],loc_legend[32],loc_legend[35],loc_legend[42],loc_legend[43],loc_legend[44],loc_legend[45],loc_legend[45],loc_legend[46],loc_legend[45]);
 fprintf(fp,"%-5s               %-40.40s\n"," ",loc_legend[49]);
 fprintf(fp,"%-5s--------------------------------------------------------------------------------------------------------------------------------\n"," ");

	lctr+=3;
	dtl_head = 0;
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

/*-- Y2K correction. Format introduced for year as YYYY instead of YY 
     VSK 15/11/1999 */

    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
		    USER
	     INTO :hosp_name, :date_time, :user_id
	     FROM SY_ACC_ENTITY_lang_vw
		WHERE acc_entity_id = :d_facility_id
		and language_id=:p_language_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

      
print_formated(loc_amount)
double loc_amount;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount); 
        format_amt(s_amt); 
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%13sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount); 
        format_amt(s_amt); 
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%15s",str_amt);
        }
}


get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	  
	     :nd_loc_date :=sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id);
       	//get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date);  
      
	   //:nd_loc_date := to_char(t_date,'DD/MM/YYYY');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}


fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);
nd_temp_date.arr[nd_temp_date.len]='\0';

get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}


fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRTRLST.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}
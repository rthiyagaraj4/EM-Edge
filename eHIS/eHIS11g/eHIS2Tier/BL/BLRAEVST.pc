/*************************************************************

Author    :  Harish A   24/01/2004
Name      :  Day End Visit Bill Generation Report
Project   :  ML

*************************************************************/

#include <stdio.h>          
#include <string.h>      
#include <math.h>
#include <bl.h> 

#define MAX_LINES 55
#define OERROR (sqlca.sqlcode < 0) 
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 4.1\n"     
                          
EXEC SQL BEGIN DECLARE SECTION;

	VARCHAR uid_pwd						[42],
			nd_session_id        		[16],
			nd_pgm_date	    			[20],
			l_function_id				[50],
			l_oper_facility_id			[10],
			l_start_date				[30],
			l_end_date					[30],
			l_gen_user_id				[30],
			l_cash_counter_code			[10],
			l_doc_type_code				[10],
			l_doc_num					[15],
			l_doc_date					[30],
			l_bill_nature_code			[10],
			l_bill_print_flag			[10],
			p_language_id			     [3],
			nd_facility_id				 [3],
			nd_temp_date							   [21],
			nd_temp_date1							   [21],
			date_convert							   [21],
			date_convert1							   [21],
			nd_loc_date								   [21],
			nd_loc_date1							   [21],
			l_visit_regn_date_time		[30],
			l_discharge_date_time		[30],
			l_blng_grp_id				[10],
			l_patient_id				[25],
			l_episode_id				[20],
			l_visit_id					[10],
			l_short_name				[41],
			l_previous_visit_date		[30],
			l_previous_discharge_date	[30],	
			l_previous_blng_grp			[10],	
			l_blng_grp_shrt_desc		[41],	
			l_visit_type				[20],
			l_episode_type				[20],
			d_acc_entity_name			[41],
			d_user						[21],
			d_sysdate					[30],
			l_pk_value				   [100],
		    l_translated_value		   [201];

	double	l_bill_amt				= 0,
			l_bill_tot_amt			= 0,
			l_no_of_ae_bills		= 0,
			l_no_of_op_bills		= 0,	 
			l_no_of_zero_ae_bills	= 0,	 
			l_no_of_zero_op_bills	= 0, 
			l_tot_bill_ae_amt		= 0, 
			l_tot_bill_op_amt		= 0,
			l_no_of_dy_bills		= 0,
			l_no_of_ip_bills		= 0,	 
			l_no_of_zero_dy_bills	= 0,	 
			l_no_of_zero_ip_bills	= 0, 
			l_tot_bill_dy_amt		= 0, 
			l_tot_bill_ip_amt		= 0;

	int		l_page_no		= 1;
	int		l_line_no		= 0;
	int		i;

	char	filename[150];
	char loc_legend[999][201];

	char	l_print_format_change;
	char    aMesg[300];
	char	f_bill_tot_amt[14];
	char	l_mesg[1000];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

FILE *f1;

int  line_no=0, 
	 page_no=0;

void proc_main(argc, argv)
int argc;
char *argv[];
{

	 
	void	get_params(),
  			get_header_dtls(),
  			do_report();
 
		
	if(argc != 9) 
	{
		disp_message(ERR_MESG,"Usage BLRAEVST uid/passwd session_id pgm_date facility_id start_date end_date user cash_counter");
		proc_exit();
	}

    strcpy(uid_pwd.arr,argv[1]);
    uid_pwd.len = strlen(uid_pwd.arr);

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,argv[2]);
    
    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);

    strcpy(g_pgm_id,"BLRAEVST");
    strcpy(g_pgm_date,argv[3]);

    strcpy(l_oper_facility_id.arr,argv[4]);
    l_oper_facility_id.len = strlen(l_oper_facility_id.arr);
	strcpy(g_facility_id, l_oper_facility_id.arr);

    strcpy(l_start_date.arr,argv[5]);
    l_start_date.len = strlen(l_start_date.arr);

    strcpy(l_end_date.arr,argv[6]);
    l_end_date.len = strlen(l_end_date.arr);

    strcpy(l_gen_user_id.arr,argv[7]);
    l_gen_user_id.len = strlen(l_gen_user_id.arr);

    strcpy(l_cash_counter_code.arr,argv[8]);
    l_cash_counter_code.len = strlen(l_cash_counter_code.arr);

	/*strcpy(filename,WORKING_DIR);
	strcat(filename,"blraevst.lis");
	
	
	if((f1 = fopen(filename, "w")) == NULL) 
	{
		disp_message(ERR_MESG,".... Error opening output file ....");
		proc_exit();
	} */

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL CONNECT :uid_pwd;  

	set_meduser_role();
	strcpy(p_language_id.arr,l_language_id.arr);
    p_language_id.len = l_language_id.len;

	l_function_id.arr[0] = '\0';

	
	EXEC SQL SELECT PARAM1            /* FUNCTION ID */
			 INTO :l_function_id
			 FROM   SY_PROG_PARAM
			 WHERE  PGM_ID     = 'BLRAEVST'
			 //AND    PGM_DATE   = :nd_pgm_date
			 AND    SESSION_ID = TO_NUMBER(:nd_session_id);

    if(ERROR || NO_DATA_FOUND)
	    err_mesg("SELECT failed on table  SY_PROG_PARAM",0,"");


	EXEC SQL DELETE SY_PROG_PARAM
	 WHERE  PGM_ID     = 'BLRAEVST' 
	 //AND    PGM_DATE   = :nd_pgm_date
	 AND    SESSION_ID = TO_NUMBER(:nd_session_id);

	  if(ERROR) 
	err_mesg("DELETE failed on table SY_PROG_PARAM",0,""); 

	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0)
	 {
	strcpy(filename,WORKING_DIR);
	strcat(filename,"blraevst.lis");
	 }
	
	if (strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0)
	 {
	strcpy(filename,WORKING_DIR);
	strcat(filename,"blraevst.lis");
	//strcat(filename,"BLBIPBLG.lis");
	 }
	
	if((f1 = fopen(filename, "w")) == NULL) 
	{
		disp_message(ERR_MESG,".... Error opening output file ....");
		proc_exit();
	} 	
fetch_legend_value();
	get_header_dtls();

	declare_cursor();

	do_report();

	close_cursors();

	fclose(f1);

	EXEC SQL COMMIT WORK RELEASE;

	return;
   
	err_exit:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL ROLLBACK WORK RELEASE;
	   disp_message(ERR_MESG,"Oracle error at main() occured....");
	   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	   proc_exit();
}

//get the header details
void get_header_dtls()
{
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	d_acc_entity_name.arr[0] = '\0';
	d_user.arr[0]            = '\0';
	d_sysdate.arr[0]         = '\0';

    EXEC SQL SELECT ltrim(rtrim(acc_entity_name)),
				    ltrim(rtrim(USER)),
				    ltrim(rtrim(TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')))
		       INTO :d_acc_entity_name,
			  	    :d_user,
				    :d_sysdate
               FROM SY_ACC_ENTITY_LANG_VW
			  WHERE acc_entity_id = :l_oper_facility_id
			  AND language_id=:p_language_id;

	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';

	return;

	err_exit:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL ROLLBACK WORK RELEASE;
	   disp_message(ERR_MESG,"Oracle error at get_header_dtls() occured....");
	   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	   proc_exit();
}
 
declare_cursor()

{

		
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0) {
	
	EXEC SQL SELECT		no_of_ae_bills,
						no_of_op_bills, 
						no_of_zero_ae_bills, 
						no_of_zero_op_bills, 
						tot_bill_ae_amt,
						tot_bill_op_amt
				INTO	:l_no_of_ae_bills,
						:l_no_of_op_bills, 
						:l_no_of_zero_ae_bills, 
						:l_no_of_zero_op_bills, 
						:l_tot_bill_ae_amt, 
						:l_tot_bill_op_amt
				FROM	bl_day_end_bill_log_hdr
			   WHERE	operating_facility_id = :l_oper_facility_id
			     AND	user_id				  = :l_gen_user_id
				 AND	cash_counter_code	  = :l_cash_counter_code
				 AND    TO_CHAR(start_date_time,'DD/MM/RRRRHH24:MI:SS') = :l_start_date;

	EXEC SQL DECLARE	bill_dtl_cur
	          CURSOR
			     FOR
  			  SELECT	TO_CHAR(c.visit_regn_date_time,'DD/MM/RRRR'),
						b.blng_grp_id,
						b.patient_id,
						b.episode_id,
						b.visit_id,
						d.short_name,
						a.doc_type_code,
						a.doc_num,
						TO_CHAR(a.doc_date,'DD/MM/RRRR'),
						a.bill_nature_code,
						DECODE(a.bill_print_flag,'Y','Printed'),
						a.bill_amt,
						a.bill_tot_amt,
						DECODE(c.ae_visit_yn,'Y','Emergency','OutPatient')
			    FROM	bl_day_end_bill_log_dtl a,
						bl_bill_hdr				b,
						op_visit				c,
						mp_patient_mast			d
			   WHERE	d.patient_id			=  c.patient_id
				 AND	c.facility_id           =  b.operating_facility_id	
			     AND    c.patient_id			=  b.patient_id	 
			     AND	c.episode_id			=  b.episode_id	
				 AND	c.visit_id				=  b.visit_id	
				 AND	b.operating_facility_id =  a.operating_facility_id
				 AND    b.doc_type_code			=  a.doc_type_code
			     AND    b.doc_num				=  a.doc_num
				 AND	a.operating_facility_id	= :l_oper_facility_id
			     AND	a.user_id				= :l_gen_user_id
				 AND	a.cash_counter_code		= :l_cash_counter_code
				 AND	TO_CHAR(a.start_date_time,'DD/MM/RRRRHH24:MI:SS') = :l_start_date
			   ORDER 
			      BY    TRUNC(c.visit_regn_date_time),
				        b.blng_grp_id,
						a.doc_type_code,
						a.doc_num;			 
	 }


	if (strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0)
	{
		EXEC SQL SELECT	no_of_dy_bills,
						no_of_ip_bills, 
						no_of_zero_dy_bills, 
						no_of_zero_ip_bills, 
						tot_bill_dy_amt,
						tot_bill_ip_amt
				INTO	:l_no_of_dy_bills,
						:l_no_of_ip_bills, 
						:l_no_of_zero_dy_bills, 
						:l_no_of_zero_ip_bills, 
						:l_tot_bill_dy_amt, 
						:l_tot_bill_ip_amt
				FROM	bl_day_end_bill_log_hdr
			   WHERE	operating_facility_id = :l_oper_facility_id
				 AND	function_id			  = :l_function_id
			     AND	user_id				  = :l_gen_user_id
				 AND	cash_counter_code	  = :l_cash_counter_code
				 AND    TO_CHAR(start_date_time,'DD/MM/RRRRHH24:MI:SS')		  = :l_start_date;

	EXEC SQL DECLARE	bill_dtl_cur1
	          CURSOR
			     FOR
  			  SELECT	TO_CHAR(c.DISCHARGE_DATE_TIME,'DD/MM/RRRR'),
						b.blng_grp_id,
						b.patient_id,
						b.episode_id,
						d.short_name,
						a.doc_type_code,
						a.doc_num,
						TO_CHAR(a.doc_date,'DD/MM/RRRR'),
						a.bill_nature_code,
						DECODE(a.bill_print_flag,'Y','Printed'),
						a.bill_amt,
						a.bill_tot_amt,
						DECODE(c.episode_type,'Y','DayCare','InPatient')
			    FROM	bl_day_end_bill_log_dtl a,
						bl_bill_hdr				b,
						ip_episode				c,
						mp_patient_mast			d
			   WHERE	d.patient_id			=  c.patient_id
				 AND	c.facility_id           =  b.operating_facility_id	
			     AND    c.patient_id			=  b.patient_id	 
			     AND	c.episode_id			=  b.episode_id	
				 AND	b.operating_facility_id =  a.operating_facility_id
				 AND    b.doc_type_code			=  a.doc_type_code
			     AND    b.doc_num				=  a.doc_num
				 AND	a.operating_facility_id	= :l_oper_facility_id
			     AND	a.user_id				= :l_gen_user_id
				 AND	a.cash_counter_code		= :l_cash_counter_code
				 AND	TO_CHAR(a.start_date_time,'DD/MM/RRRRHH24:MI:SS') = :l_start_date
			   ORDER 
			      BY    TRUNC(c.DISCHARGE_DATE_TIME),
				        b.blng_grp_id,
						a.doc_type_code,
						a.doc_num;
				}
	
	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0)
	EXEC SQL OPEN bill_dtl_cur;

	if (strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0)
	EXEC SQL OPEN bill_dtl_cur1;

	return;

	err_exit:
	
		   EXEC SQL WHENEVER SQLERROR CONTINUE;
		   EXEC SQL ROLLBACK WORK RELEASE;
		   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
		   disp_message(ERR_MESG,"Oracle error at declare_cursor() occured....");
		   proc_exit();
}

int fetch_bill_dtl_cur()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	l_visit_regn_date_time.arr[0]	= '\0';
	l_blng_grp_id.arr[0]			= '\0';
	l_patient_id.arr[0]				= '\0';
	l_episode_id.arr[0]				= '\0';
	l_visit_id.arr[0]				= '\0';
	l_short_name.arr[0]				= '\0';
	l_doc_type_code.arr[0]			= '\0';          
	l_doc_num.arr[0]				= '\0';                
	l_doc_date.arr[0]				= '\0';               
	l_bill_nature_code.arr[0]		= '\0';
	l_bill_print_flag.arr[0]		= '\0';
	l_visit_type.arr[0]				= '\0';

	l_bill_amt =  0;
	l_bill_tot_amt = 0;  
		  

	EXEC SQL FETCH  bill_dtl_cur
			  INTO  :l_visit_regn_date_time,
					:l_blng_grp_id,
					:l_patient_id,
					:l_episode_id,
					:l_visit_id,
					:l_short_name,
					:l_doc_type_code,
					:l_doc_num,
					:l_doc_date,
					:l_bill_nature_code,
					:l_bill_print_flag,
					:l_bill_amt,
					:l_bill_tot_amt,
					:l_visit_type;
	
	if (NODATAFOUND)
		return 0;

	l_visit_regn_date_time.arr[l_visit_regn_date_time.len]	= '\0';
	l_blng_grp_id.arr[l_blng_grp_id.len]					= '\0';
	l_patient_id.arr[l_patient_id.len]						= '\0';
	l_episode_id.arr[l_episode_id.len]						= '\0';
	l_visit_id.arr[l_visit_id.len]							= '\0';
	l_short_name.arr[l_short_name.len]						= '\0';
	l_doc_type_code.arr[l_doc_type_code.len]				= '\0';          
	l_doc_num.arr[l_doc_num.len]							= '\0';                
	l_doc_date.arr[l_doc_date.len]							= '\0';               
	l_bill_nature_code.arr[l_bill_nature_code.len]			= '\0';
	l_bill_print_flag.arr[l_bill_print_flag.len]			= '\0';
	l_visit_type.arr[l_visit_type.len]						= '\0';

    return 1;
	
	
	err_exit:
		EXEC SQL WHENEVER SQLERROR CONTINUE;
		EXEC SQL ROLLBACK WORK RELEASE;
		disp_message(ERR_MESG,"Oracle error at fetch_blng_serv_code_cur() occured....");
		sprintf(aMesg,"Error: %-100s",sqlca.sqlerrm.sqlerrmc);
		disp_message(ERR_MESG,aMesg);
		proc_exit();
}


int fetch_bill_dtl_cur1()
{

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	l_discharge_date_time.arr[0]	= '\0';
	l_blng_grp_id.arr[0]			= '\0';
	l_patient_id.arr[0]				= '\0';
	l_episode_id.arr[0]				= '\0';
	l_short_name.arr[0]				= '\0';
	l_doc_type_code.arr[0]			= '\0';          
	l_doc_num.arr[0]				= '\0';                
	l_doc_date.arr[0]				= '\0';               
	l_bill_nature_code.arr[0]		= '\0';
	l_bill_print_flag.arr[0]		= '\0';
	l_episode_type.arr[0]				= '\0';

	l_bill_amt =  0;
	l_bill_tot_amt = 0;           

	EXEC SQL FETCH  bill_dtl_cur1
			  INTO  :l_discharge_date_time,
					:l_blng_grp_id,
					:l_patient_id,
					:l_episode_id,
					:l_short_name,
					:l_doc_type_code,
					:l_doc_num,
					:l_doc_date,
					:l_bill_nature_code,
					:l_bill_print_flag,
					:l_bill_amt,
					:l_bill_tot_amt,
					:l_episode_type;
	
	if (NODATAFOUND)
		return 0;

	l_discharge_date_time.arr[l_discharge_date_time.len]	= '\0';
	l_blng_grp_id.arr[l_blng_grp_id.len]					= '\0';
	l_patient_id.arr[l_patient_id.len]						= '\0';
	l_episode_id.arr[l_episode_id.len]						= '\0';
	l_short_name.arr[l_short_name.len]						= '\0';
	l_doc_type_code.arr[l_doc_type_code.len]				= '\0';          
	l_doc_num.arr[l_doc_num.len]							= '\0';                
	l_doc_date.arr[l_doc_date.len]							= '\0';               
	l_bill_nature_code.arr[l_bill_nature_code.len]			= '\0';
	l_bill_print_flag.arr[l_bill_print_flag.len]			= '\0';
	l_episode_type.arr[l_episode_type.len]						= '\0';

    return 1;
	
	err_exit:
		EXEC SQL WHENEVER SQLERROR CONTINUE;
		EXEC SQL ROLLBACK WORK RELEASE;
		disp_message(ERR_MESG,"Oracle error at fetch_blng_serv_code_cur() occured....");
		sprintf(aMesg,"Error: %-100s",sqlca.sqlerrm.sqlerrmc);
		disp_message(ERR_MESG,aMesg);
		proc_exit();
}

close_cursors()
{

	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0)
	EXEC SQL CLOSE bill_dtl_cur;
	
	if (strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0)
	EXEC SQL CLOSE bill_dtl_cur1;
	
}

void do_report()  
{
	print_parameter_page();

	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0)
	print_report();
	
	if (strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0)
	print_report1();

	end_report();
}

print_parameter_page()
{
	print_page_title();

	fprintf(f1,"\n\n\n\n\n\n\t\t%-16.16s\n",loc_legend[1]);
	fprintf(f1,"\t\t----------------\n\n");


	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[2],l_gen_user_id.arr);

	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[3],l_cash_counter_code.arr);
	init_date_temp_var();                              //pradeep
	strcpy(date_convert.arr,l_start_date.arr);            // pradeep
	fun_change_loc_date();
	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[4],date_convert.arr);
	init_date_temp_var();                              //pradeep
	strcpy(date_convert.arr,l_end_date.arr);            // pradeep
	fun_change_loc_date();
	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[5],date_convert.arr);
	check_page_end(55);
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;

	l_line_no= 0;
	l_report_width      = 147;
	l_acc_entity_length = strlen(d_acc_entity_name.arr);

	//Code for Line 1
	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	//fprintf(f1,"MDL : BL");
	fprintf(f1,"%-3.3s : %-2.2s",loc_legend[6],loc_legend[21]);
	l_start_point=l_start_point-8;
	print_spaces(l_start_point);
	fprintf(f1,"%s",d_acc_entity_name.arr);
	l_comp_name_end_point=l_start_point+8+l_acc_entity_length;
	l_start_point=((l_report_width-17)-l_comp_name_end_point);
	print_spaces(l_start_point);
	init_date_temp_var();                             
	strcpy(date_convert.arr,d_sysdate.arr);          
	fun_change_loc_date();
	fprintf(f1,"%s\n",date_convert.arr);

	//Code for Line 2
	l_start_point=0;
	fprintf(f1,"%-3.3s : %-15s",loc_legend[7],d_user.arr);
	l_start_point=ceill((l_report_width/2)-18);
	l_start_point=l_start_point-21;
	print_spaces(l_start_point);
	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0) 
	fprintf(f1,"%-36.36s\n",loc_legend[22]);
	if (strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0)
	fprintf(f1,"%-36.36s\n",loc_legend[23]);

	//Code for Line 3
	l_start_point=0;

	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0) 
	fprintf(f1,"%-3.3s : BLRAEVST",loc_legend[8]);

	if (strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0)
	fprintf(f1,"%-3.3s : BLBIPBLG",loc_legend[8]);

	l_start_point=ceill((l_report_width/2)-8);
	l_start_point=l_start_point-14;
	print_spaces(l_start_point);
	fprintf(f1,"                 ");
	l_comp_name_end_point=l_start_point+14+16;
	l_start_point=((l_report_width-17)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(f1,"%-4.4s : %d\n",loc_legend[24],l_page_no);
	line_no=3;

	l_page_width=l_report_width;
	print_line(l_page_width);
	fprintf(f1,"\n");
	l_line_no = l_line_no + 3; 

	if(l_page_no > 1)
	{
	if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0) 
{
		//fprintf(f1,"Bill Doc Type/Doc Number  Bill Date       Bill Amount  Patient No            Name                            Episode/Visit  Visit Type  Printed?\n");
		fprintf(f1,"%-24.24s  %-10.10s       %-11.11s %-12.12s          %-13.13s                   %-13.13s %-10.10s %-7.7s?\n",loc_legend[9],loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[14],loc_legend[15],loc_legend[16]);
		print_line(l_page_width);
		fprintf(f1,"\n");	
		l_line_no = l_line_no + 2;
}
else if(strcmp(l_function_id.arr,"BL_IP_BILLGEN_PROCESS")==0) 
{
		fprintf(f1,"%-24.24s  %-10.10s       %-11.11s %-12.12s          %-13.13s                   %-13.13s %-10.10s %-7.7s?\n",loc_legend[9],loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[14],loc_legend[15],loc_legend[16]);
		print_line(l_page_width);
		fprintf(f1,"\n");	
		l_line_no = l_line_no + 2;
}


	}
	l_page_no++;
}
  
print_report()
{
	int		l_width;

	while(fetch_bill_dtl_cur())
	{
		
		if((strlen(l_previous_visit_date.arr)==0) || (strcmp(l_previous_visit_date.arr,l_visit_regn_date_time.arr)!=0))
		{	
			if(strlen(l_previous_visit_date.arr)!=0)
				fprintf(f1,"\n");
			
			check_page_end(l_line_no);
			
			if (l_visit_regn_date_time.arr[0] != '\0') 
			{
			init_date_temp_var();                              //pradeep
			strcpy(date_convert1.arr,l_visit_regn_date_time.arr);            // pradeep
			fun_change_loc_date1(); 
			fprintf(f1,"%-10.10s : %s\n",loc_legend[17],date_convert1.arr);
			}
			//l_width = (strlen(l_visit_regn_date_time.arr) + strlen("Visit Date : "));
			l_width = (strlen(l_visit_regn_date_time.arr) + strlen(loc_legend[17]));
			print_double_line(l_width);
			fprintf(f1,"\n");
			l_line_no=l_line_no+3;
			check_page_end(l_line_no);
		}
	
	
		if((strlen(l_previous_blng_grp.arr)==0) || (strcmp(l_previous_blng_grp.arr,l_blng_grp_id.arr)!=0) || (strcmp(l_previous_visit_date.arr,l_visit_regn_date_time.arr)!=0))
		{
			l_blng_grp_shrt_desc.arr[0] = '\0';

			EXEC SQL SELECT short_desc
					   INTO :l_blng_grp_shrt_desc
					   FROM bl_blng_grp
					  WHERE blng_grp_id = :l_blng_grp_id;
			
			l_blng_grp_shrt_desc.arr[l_blng_grp_shrt_desc.len] = '\0';

			check_page_end(l_line_no);
			
			if(strlen(l_previous_blng_grp.arr)!=0)
				fprintf(f1,"\n");
			
			fprintf(f1,"%-10.10s : %s  %s\n",loc_legend[18],l_blng_grp_id.arr,l_blng_grp_shrt_desc.arr);
			//l_width = strlen(l_blng_grp_id.arr) + strlen(l_blng_grp_shrt_desc.arr)+strlen("Blng Group : ")+2;
			l_width = strlen(l_blng_grp_id.arr) + strlen(l_blng_grp_shrt_desc.arr)+strlen(loc_legend[18])+2;
			print_double_line(l_width);
			fprintf(f1,"\n");
			l_line_no=l_line_no+3;
			check_page_end(l_line_no);
		}
		if (l_doc_date.arr[0] != '\0') 
			{
			init_date_temp_var();                              //pradeep
			strcpy(date_convert1.arr,l_doc_date.arr);            // pradeep
			fun_change_loc_date1();
			
		fprintf(f1,"%-10.10s    %-10.10s  %-10.10s  ",l_doc_type_code.arr,l_doc_num.arr,date_convert1.arr);
		}
		print_formated(l_bill_tot_amt);
		if (strcmp(l_function_id.arr,"BL_AE_DAYEND_PROCESS")==0) 
		fprintf(f1,"  %-20.20s  %-30.30s  %-8.8s/%-4.4s  %-10.10s  %-11.11s\n",l_patient_id.arr,l_short_name.arr,l_episode_id.arr,l_visit_id.arr,l_visit_type.arr,l_bill_print_flag.arr);
		l_line_no++;
		check_page_end(l_line_no);	
		
		
		strcpy(l_previous_visit_date.arr,l_visit_regn_date_time.arr);
		l_previous_visit_date.len = strlen(l_previous_visit_date.arr);
		

		strcpy(l_previous_blng_grp.arr,l_blng_grp_id.arr);
		l_previous_blng_grp.len = strlen(l_previous_blng_grp.arr);

	}
}

print_report1()
{
	int		l_width;

	while(fetch_bill_dtl_cur1())
	{
		if((strlen(l_previous_discharge_date.arr)==0) || (strcmp(l_previous_discharge_date.arr,l_discharge_date_time.arr)!=0))
		{	
			if(strlen(l_previous_discharge_date.arr)!=0)
				fprintf(f1,"\n");
			
			check_page_end(l_line_no);
		if (l_discharge_date_time.arr[0] != '\0') 
			{
			init_date_temp_var();                              //pradeep
			strcpy(date_convert1.arr,l_discharge_date_time.arr);            // pradeep
			fun_change_loc_date1();
			fprintf(f1,"%-14.14s : %s\n",loc_legend[19],date_convert1.arr);
			}
			//l_width = (strlen(l_discharge_date_time.arr) + strlen("Discharge Date : "));
			l_width = (strlen(l_discharge_date_time.arr) + strlen(loc_legend[19]));
			print_double_line(l_width);
			fprintf(f1,"\n");
			l_line_no=l_line_no+3;
			check_page_end(l_line_no);
		}

		if((strlen(l_previous_blng_grp.arr)==0) || (strcmp(l_previous_blng_grp.arr,l_blng_grp_id.arr)!=0) || (strcmp(l_previous_discharge_date.arr,l_discharge_date_time.arr)!=0))
		{
			l_blng_grp_shrt_desc.arr[0] = '\0';

			EXEC SQL SELECT short_desc
					   INTO :l_blng_grp_shrt_desc
					   FROM bl_blng_grp
					  WHERE blng_grp_id = :l_blng_grp_id;
			
			l_blng_grp_shrt_desc.arr[l_blng_grp_shrt_desc.len] = '\0';

			check_page_end(l_line_no);
			
			if(strlen(l_previous_blng_grp.arr)!=0)
				fprintf(f1,"\n");
			
			fprintf(f1,"%-10.10s : %s  %s\n",loc_legend[18],l_blng_grp_id.arr,l_blng_grp_shrt_desc.arr);
			//l_width = strlen(l_blng_grp_id.arr) + strlen(l_blng_grp_shrt_desc.arr)+strlen("Blng Group : ")+2;
			l_width = strlen(l_blng_grp_id.arr) + strlen(l_blng_grp_shrt_desc.arr)+strlen(loc_legend[18])+2;
			print_double_line(l_width);
			fprintf(f1,"\n");
			l_line_no=l_line_no+3;
			check_page_end(l_line_no);
		}
			if (l_doc_date.arr[0] != '\0') 
			{
			init_date_temp_var();                     
	
			strcpy(date_convert1.arr,l_doc_date.arr);            // pradeep
			fun_change_loc_date1();
		fprintf(f1,"%-10.10s    %-10.10s  %-10.10s  ",l_doc_type_code.arr,l_doc_num.arr,date_convert1.arr);
	
		}
		print_formated(l_bill_tot_amt);
		fprintf(f1,"  %-20.20s  %-30.30s  %-8.8s  %-10.10s  %-11.11s\n",l_patient_id.arr,l_short_name.arr,l_episode_id.arr,l_episode_type.arr,l_bill_print_flag.arr);
		l_line_no++;
		check_page_end(l_line_no);	

		strcpy(l_previous_discharge_date.arr,l_discharge_date_time.arr);
		l_previous_discharge_date.len = strlen(l_previous_discharge_date.arr);

		strcpy(l_previous_blng_grp.arr,l_blng_grp_id.arr);
		l_previous_blng_grp.len = strlen(l_previous_blng_grp.arr);

	}
}

print_line(l_length)
int l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1,"-");
	}
}

print_double_line(l_length)
int l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1,"=");
	}
}

print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1," ");
	}
}


check_page_end(l_line_no)
{
	if ((l_line_no + 5) >= MAX_LINES)
	{
		l_line_no=0;
		fprintf(f1,"\f");
	    print_page_title();
	}	
	return;
}

//Print the finishing line of the report 
end_report()
{
  fprintf(f1,"\n\n");
  fprintf(f1,"                                                   ");
  fprintf(f1,"%-15.15s",loc_legend[20]);
  fprintf(f1,"");
}

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
	    strcat(s_amt,"-");
        sprintf(str_amt,"%14s",s_amt);
		l_ltrim(s_amt);
        fprintf(f1,"%14s",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
		l_ltrim(s_amt);
        fprintf(f1,"%14s ",str_amt);
    }

}
fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRAEVST.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_temp_date1.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
nd_loc_date1.arr[0]  = '\0';
date_convert.arr[0] = '\0';
date_convert1.arr[0] = '\0';


nd_temp_date.len = 0;
nd_temp_date1.len = 0;

nd_loc_date.len  = 0;
nd_loc_date1.len  = 0;

date_convert.len = 0;
date_convert1.len = 0;

}



fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}

get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
	  
       	get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI:SS'),:p_language_id,t_date);  
      
	   :nd_loc_date := to_char(t_date,'DD/MM/YYYY HH24:MI');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

fun_change_loc_date1()
{

strcpy(nd_temp_date1.arr,date_convert1.arr);
nd_temp_date1.len = strlen(nd_temp_date1.arr);


get_local_date1();

strcpy(date_convert1.arr,nd_loc_date1.arr); 

}

get_local_date1()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date1  date;
	
	BEGIN
	
	  
       	get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date1,'DD/MM/YYYY'),:p_language_id,t_date1);  
      
	   :nd_loc_date1 := to_char(t_date1,'DD/MM/YYYY');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}



#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER
/************************************************************************/
/*   OCS MEDICOM VER 1.10.01                                              */
/************************************************************************/
/* PROGRAM NAME          : BLRINCAD.PC                                    */
/* DATE WRITTEN          : 10-NOV-1996                                  */ 
/* AUTHOR                : ALDRIN ALBERTO                               */
/* CALLED FROM           : BLRINCA1 (FORM)                              */
/*                                                                      */  
/* FUNCTION              :                                              */ 
/*                                                                      */
/*                                                                      */
/*                                                                      */ 
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        BL_SRV_INC_SUM_DTL         Query                   */
/*         2.        BL_PKG_INC_SUM_DTL         Query                   */
/*         3.        BL_BLNG_SERV               Query                   */
/*         4.        BL_PACKAGE_HDR             Lookup                  */
/*         5.        SY_DEPT                    Lookup                  */
/*         6.        SY_PHYSICIAN_MAST          Lookup                  */
/*         7.        SY_PROG_PARAM              Query/Delete            */
/*                                                                      */
/*  PARAMETERS                                                          */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/************************************************************************/
                               

#include <stdio.h>     
#include <string.h>
#include <bl.h>            

#define OERROR (sqlca.sqlcode < 0)

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define INIT_MESG "Report Generation In Progress"
#define MAXLINES 50

EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd                      [132],
           hosp_name                    [120],
           date_time                    [20],
           user_id                      [31],
           nd_session_id                [16],
           nd_pgm_date                  [35];

   VARCHAR nd_pkg_serv_flag             [2],
           nd_rep_flag                  [2],
           nd_fm_blng_serv              [11],
           nd_to_blng_serv              [11],
           nd_fm_ac_dept                [7],
           nd_to_ac_dept                [7],
           nd_fm_or_dept                [7],
           nd_to_or_dept                [7],
           nd_fm_dr                     [7],
           nd_to_dr                     [7],
           nd_fm_date                   [11],
           nd_to_date                   [11],
           nd_fm_month                  [3],
           nd_to_month                  [3],
           nd_fm_year                   [5],
           nd_to_year                   [5],
           nd_rep_type                  [2],
           nd_epi_type                  [2],
		   nd_fr_facility               [3],
		   nd_to_facility               [3],
		   nd_operating_facility_id     [3],
		   l_pk_value					[100],
		   l_translated_value			[201],
		   p_language_id				[3],
		   nd_facility_id				[3];


   VARCHAR incsum_serv_pkg_code         [11],
           incsum_acct_dept_code        [7],
           incsum_orig_dept_code        [7],
           incsum_physician_id          [16],
		   d_facility_id                [3],
           incsum_serv_date             [11],
           incsum_episode_type          [2],
           incsum_blng_class_code       [3],
           incsum_bed_class_code        [3];

   VARCHAR serv_pkg_desc                [41],
           acc_dept_desc                [41],
           org_dept_desc                [41],
           physician_name               [31];


   long double	incsum_base_charge  = 0,
				incsum_gross_charge = 0,
				incsum_disc_amt     = 0,
				incsum_tot_qty      = 0,
				incsum_net_charge   = 0;

   char    sql_stmt                     [2000];
   char    string_var                   [120];
   
   int i;
	
   char g_facility_id[3];

   char filename[150];
   char x_msg[200];
   char loc_legend[999][201];
   char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char   old_serv_pkg_code         [11],
       old_acct_dept_code        [7],
       old_serv_pkg_desc         [41],
       old_acc_dept_desc         [41];


long double reptot_tot_qty      = 0,
       reptot_gross_charge = 0,
       reptot_disc_amt     = 0,
       reptot_net_charge   = 0,
       gr_tot_qty      = 0,
       gr_gross_charge = 0,
       gr_disc_amt     = 0,
       gr_net_charge   = 0;

FILE *fp;
int lctr = 0,pctr =0;
int detail_ctr = 0;

void fetch_desc(),
     fetch_param(),
     delete_param(),
     print_total(),
     print_gr_total(),
     declare_cursors(),
     open_files(),
     print_title(),
     print_head(),
     print_doc_head(),
     print_org_head(),
     print_break_footer(char *brk, 
                        double base_charge_tot, 
                        double gross_charge_tot,
                        double disc_amt_tot,
                        double net_charge_tot),
     print_detail(),
     print_all_breaks(int brkindex),
     init_old(),
     print_end(),
     sql_connect(),
     ltrim(char *str),
//     print_formated(double amount,FILE *fp),
     list_args(int arg_cnt,char **arg_list);

int fetch_inc_sum(),
    check_break();
int fst_time = 0;

void proc_main(int argc,char **argv)
{
   int brkindex;
    
   if (argc < 5)
   {
      list_args(argc, argv);
      proc_exit();
   }

   strcpy(g_pgm_id,"BLRINCA1");

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_facility_id.arr,argv[4]);
   nd_facility_id.len = strlen(nd_facility_id.arr);
   strcpy(g_facility_id,nd_facility_id.arr);

   sql_connect();

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

     
 //  delete_param();
 //  start_prog_msg();

   set_meduser_role();

   strcpy(p_language_id.arr,l_language_id.arr);

   fetch_param();
   
   fetch_legend_value();

   fetch_desc();
   
   open_files();

   declare_cursors();

   detail_ctr = 0;
   print_title();
   init_old();
   print_head();
   while(fetch_inc_sum())
   {
      brkindex = check_break();
      if (lctr > MAXLINES) 
	  {
         print_head();
         pctr += 1;
      }  
      print_all_breaks(brkindex);
      print_detail();
   } 
   if(brkindex != 4)
     print_total(); 
   print_gr_total();
   print_end();
// end_prog_msg();
   EXEC SQL COMMIT WORK RELEASE;
   return;
}

/***************** Database Access & Updation Functions ***********************/
void fetch_desc()
{
   hosp_name.arr[0]         = '\0';
   date_time.arr[0]         = '\0';
   user_id.arr[0]           = '\0';
   hosp_name.len   	   	   = 0;
   date_time.len    	   = 0;
   user_id.len     		   = 0;

   EXEC SQL SELECT ACC_ENTITY_NAME, 
   				   TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                   USER
              INTO :hosp_name, :date_time, :user_id
              FROM SY_ACC_ENTITY
			  WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

   if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]           = '\0';
   date_time.arr[date_time.len]           = '\0';
   user_id.arr[user_id.len]               = '\0';

}

void fetch_param()
{
   nd_pkg_serv_flag.arr[0] = '\0';
   nd_rep_flag.arr[0]      = '\0';
   nd_fm_blng_serv.arr[0]  = '\0';
   nd_to_blng_serv.arr[0]  = '\0';
   nd_fm_ac_dept.arr[0]    = '\0';
   nd_to_ac_dept.arr[0]    = '\0';
   nd_fm_or_dept.arr[0]    = '\0';
   nd_to_or_dept.arr[0]    = '\0';
   nd_fm_dr.arr[0]         = '\0';
   nd_to_dr.arr[0]         = '\0';
   nd_fm_date.arr[0]       = '\0';
   nd_to_date.arr[0]       = '\0';
   nd_fm_month.arr[0]      = '\0';
   nd_to_month.arr[0]      = '\0';
   nd_fm_year.arr[0]       = '\0';
   nd_to_year.arr[0]       = '\0';
   nd_rep_type.arr[0]      = '\0';
   nd_epi_type.arr[0]      = '\0';
   nd_fr_facility.arr[0]      = '\0';
   nd_to_facility.arr[0]  = '\0';

   nd_pkg_serv_flag.len    = 0;
   nd_rep_flag.len         = 0;
   nd_fm_blng_serv.len     = 0;
   nd_to_blng_serv.len     = 0;
   nd_fm_ac_dept.len       = 0;
   nd_to_ac_dept.len       = 0;
   nd_fm_or_dept.len       = 0;
   nd_to_or_dept.len       = 0;
   nd_fm_dr.len            = 0;
   nd_to_dr.len            = 0;
   nd_fm_date.len          = 0;
   nd_to_date.len          = 0;
   nd_fm_month.len         = 0;
   nd_to_month.len         = 0;
   nd_fm_year.len          = 0;
   nd_to_year.len          = 0;
   nd_rep_type.len         = 0;
   nd_epi_type.len         = 0;
   nd_fr_facility.len      = 0;
   nd_to_facility.len      = 0;

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,PARAM3, PARAM4, PARAM5,
                   PARAM6,PARAM7,PARAM8, PARAM9, PARAM10, 
                   PARAM11,PARAM12,PARAM13, PARAM14, PARAM15,PARAM16,
                   PARAM17,PARAM18, PARAM19, PARAM20
              INTO :nd_operating_facility_id,
				   :nd_pkg_serv_flag,
                   :nd_rep_flag,
                   :nd_fm_blng_serv,
                   :nd_to_blng_serv,
                   :nd_fm_ac_dept,
                   :nd_to_ac_dept,
                   :nd_fm_or_dept,
                   :nd_to_or_dept,
                   :nd_fm_dr,
                   :nd_to_dr,
                   :nd_fm_date,
                   :nd_to_date,
                   :nd_fm_month,
                   :nd_to_month,
                   :nd_fm_year,
                   :nd_to_year,
                   :nd_rep_type,
                   :nd_epi_type,
				   :nd_fr_facility,
				   :nd_to_facility
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'BLRINCA1'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NO_DATA_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_pkg_serv_flag.arr[nd_pkg_serv_flag.len] = '\0';
   nd_rep_flag.arr[nd_rep_flag.len]           = '\0';
   
   nd_fm_blng_serv.arr[nd_fm_blng_serv.len]   = '\0';
   nd_to_blng_serv.arr[nd_to_blng_serv.len]   = '\0';
   
   nd_fm_ac_dept.arr[nd_fm_ac_dept.len]       = '\0';
   nd_to_ac_dept.arr[nd_to_ac_dept.len]       = '\0';
   
   nd_fm_or_dept.arr[nd_fm_or_dept.len]       = '\0';
   nd_to_or_dept.arr[nd_to_or_dept.len]       = '\0';
   
   nd_fm_dr.arr[nd_fm_dr.len]                 = '\0';
   nd_to_dr.arr[nd_to_dr.len]                 = '\0';
   
   nd_fm_date.arr[nd_fm_date.len]             = '\0';
   nd_to_date.arr[nd_to_date.len]             = '\0';
   
   nd_fm_month.arr[nd_fm_month.len]           = '\0';
   nd_to_month.arr[nd_to_month.len]           = '\0';
   
   nd_fm_year.arr[nd_fm_year.len]             = '\0';
   nd_to_year.arr[nd_to_year.len]             = '\0';
   
   nd_rep_type.arr[nd_rep_type.len]           = '\0';
   nd_epi_type.arr[nd_epi_type.len]           = '\0';
   nd_fr_facility.arr[nd_fr_facility.len]           = '\0';
   nd_to_facility.arr[nd_to_facility.len]           = '\0';

   strcpy (g_facility_id,nd_operating_facility_id.arr);

   
}

void delete_param()  
{
    EXEC SQL DELETE FROM SY_PROG_PARAM
                    WHERE PGM_ID     = 'BLRINCA1'
                    AND SESSION_ID   = :nd_session_id
                    AND PGM_DATE     = :nd_pgm_date;

    if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

}  

void declare_cursors()
{

  
  if (nd_pkg_serv_flag.arr[0]=='S') 
   {                                
    if(nd_rep_type.arr[0]=='S') {
      strcpy(sql_stmt,"SELECT BLNG_SERV_CODE, 'X', \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_SRV_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND BLNG_SERV_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ACCT_DEPT_CODE BETWEEN NVL(:nd_fm_ac_dept,  '      ') \
           AND NVL(:nd_to_ac_dept,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility \
     GROUP BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,TRUNC(SERV_DATE),EPISODE_TYPE");
   }

   else if(nd_rep_type.arr[0]=='O') {
      strcpy(sql_stmt,"SELECT BLNG_SERV_CODE, ORIG_DEPT_CODE, \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_SRV_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND BLNG_SERV_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ACCT_DEPT_CODE BETWEEN NVL(:nd_fm_ac_dept,  '      ') \
           AND NVL(:nd_to_ac_dept,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility  \
     GROUP BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,ORIG_DEPT_CODE,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,ORIG_DEPT_CODE,TRUNC(SERV_DATE),EPISODE_TYPE");
   }
   else if(nd_rep_type.arr[0]=='A') {
      strcpy(sql_stmt,"SELECT BLNG_SERV_CODE, ACCT_DEPT_CODE, \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_SRV_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND BLNG_SERV_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ACCT_DEPT_CODE BETWEEN NVL(:nd_fm_ac_dept,  '      ') \
           AND NVL(:nd_to_ac_dept,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility  \
     GROUP BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,ACCT_DEPT_CODE,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,ACCT_DEPT_CODE,TRUNC(SERV_DATE),EPISODE_TYPE"); 
   }
   else if(nd_rep_type.arr[0]=='D') {
      strcpy(sql_stmt,"SELECT BLNG_SERV_CODE, PHYSICIAN_ID, \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_SRV_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND BLNG_SERV_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ACCT_DEPT_CODE BETWEEN NVL(:nd_fm_ac_dept,  '      ') \
           AND NVL(:nd_to_ac_dept,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility	  \
     GROUP BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,PHYSICIAN_ID,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,BLNG_SERV_CODE,PHYSICIAN_ID,TRUNC(SERV_DATE),EPISODE_TYPE");
    }
   }
 else
    {      /***** In Case of Package  *****/
    if(nd_rep_type.arr[0]=='S') {
      strcpy(sql_stmt,"SELECT PACKAGE_CODE, 'X', \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_PKG_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND PACKAGE_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility \
     GROUP BY OPERATING_FACILITY_ID,PACKAGE_CODE,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,PACKAGE_CODE,TRUNC(SERV_DATE),EPISODE_TYPE");
   }
   else if(nd_rep_type.arr[0]=='O') {
      strcpy(sql_stmt,"SELECT PACKAGE_CODE, ORIG_DEPT_CODE, \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_PKG_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND PACKAGE_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID between :nd_fr_facility	 and :nd_to_facility \
     GROUP BY OPERATING_FACILITY_ID,PACKAGE_CODE,ORIG_DEPT_CODE,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,PACKAGE_CODE,ORIG_DEPT_CODE,TRUNC(SERV_DATE),EPISODE_TYPE");
               
   }
   else if(nd_rep_type.arr[0]=='A') {
      strcpy(sql_stmt,"SELECT PACKAGE_CODE, 'X', \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_PKG_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND PACKAGE_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID between :nd_fr_facility and :nd_to_facility  \
     GROUP BY OPERATING_FACILITY_ID,PACKAGE_CODE,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,PACKAGE_CODE,TRUNC(SERV_DATE),EPISODE_TYPE");
   }
   else if(nd_rep_type.arr[0]=='D') {
      strcpy(sql_stmt,"SELECT PACKAGE_CODE, PHYSICIAN_ID, \
      TRUNC(SERV_DATE), EPISODE_TYPE, \
	  OPERATING_FACILITY_ID, \
      SUM(BASE_CHARGE),SUM(GROSS_CHARGE),SUM(DISC_AMT), \
      SUM(GROSS_CHARGE - DISC_AMT), \
      SUM(TOT_QTY) \
      FROM BL_PKG_INC_SUM_DTL \
      WHERE EPISODE_TYPE = :nd_epi_type \
      AND   trunc(SERV_DATE) \
      BETWEEN TO_DATE(NVL(:nd_fm_date,'01/01/1800'), 'DD/MM/YYYY') \
      AND TO_DATE(NVL(:nd_to_date,'01/01/4712'),'DD/MM/YYYY') \
      AND PACKAGE_CODE BETWEEN NVL(:nd_fm_blng_serv, '      ') \
          AND NVL(:nd_to_blng_serv,'~~~~~~') \
      AND ORIG_DEPT_CODE BETWEEN NVL(:nd_fm_or_dept, '      ') \
          AND NVL(:nd_to_or_dept,'~~~~~~') \
      AND PHYSICIAN_ID BETWEEN NVL(:nd_fm_dr, '      ') \
          AND NVL(:nd_to_dr,'~~~~~~') \
	  AND OPERATING_FACILITY_ID  and  :nd_fr_facility and :nd_to_facility	  \
     GROUP BY OPERATING_FACILITY_ID,PACKAGE_CODE,PHYSICIAN_ID,TRUNC(SERV_DATE),EPISODE_TYPE \
     ORDER BY OPERATING_FACILITY_ID,PACKAGE_CODE,PHYSICIAN_ID,TRUNC(SERV_DATE),EPISODE_TYPE ");
   }
  } 
   

  EXEC SQL PREPARE S FROM :sql_stmt;

   if (OERROR)
      err_mesg("PREPARE failed on statment S",0,"");

   EXEC SQL DECLARE INC_SUM_DTL_CUR CURSOR FOR S;

   if (OERROR)
      err_mesg("DECLARE failed on CURSOR INC_SUM_DTL_CUR",0,"");

   if (nd_pkg_serv_flag.arr[0]=='S') 
   {
       EXEC SQL OPEN INC_SUM_DTL_CUR USING :nd_epi_type,    
                                           :nd_fm_date,      :nd_to_date,
                                           :nd_fm_blng_serv, :nd_to_blng_serv,
                                           :nd_fm_ac_dept,   :nd_to_ac_dept,
                                           :nd_fm_or_dept,   :nd_to_or_dept,
                                           :nd_fm_dr,        :nd_to_dr,
										   :nd_fr_facility,  :nd_to_facility;
   }
   else
   {
       EXEC SQL OPEN INC_SUM_DTL_CUR USING :nd_epi_type,     :nd_fm_date,      
                                           :nd_to_date,
                                           :nd_fm_blng_serv, :nd_to_blng_serv,
                                           :nd_fm_or_dept,   :nd_to_or_dept,
                                           :nd_fm_dr,        :nd_to_dr,
										   :nd_fr_facility,  :nd_to_facility;

   }

   if (OERROR)
      err_mesg("OPEN failed on cursor INC_SUM_DTL_CUR",0,"");

   EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR 
			   SELECT LONG_DESC
			   FROM   BL_BLNG_SERV
			   WHERE  BLNG_SERV_CODE = :incsum_serv_pkg_code;

   EXEC SQL DECLARE SY_AC_DEPT_CUR CURSOR FOR
		   SELECT LONG_DESC
		   FROM   SY_DEPT
		   WHERE  DEPT_CODE = :incsum_acct_dept_code
		   AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;

   EXEC SQL DECLARE SY_ORG_DEPT_CUR CURSOR FOR
		   SELECT LONG_DESC
		   FROM   SY_DEPT
		   WHERE  DEPT_CODE = :incsum_orig_dept_code
		   AND    OPERATING_FACILITY_ID = :nd_operating_facility_id;

   EXEC SQL DECLARE SY_PHYSICIAN_MAST_CUR CURSOR FOR
		    SELECT FULL_NAME
		    FROM   SY_PHYSICIAN_MAST
		    WHERE  PHYSICIAN_ID = :incsum_physician_id;

}

int fetch_inc_sum()
{
      incsum_serv_pkg_code.arr[0]   = '\0';
      incsum_acct_dept_code.arr[0]  = '\0';
      incsum_orig_dept_code.arr[0]  = '\0';
      incsum_physician_id.arr[0]    = '\0';
      incsum_serv_date.arr[0]       = '\0';
      incsum_episode_type.arr[0]    = '\0';

      incsum_serv_pkg_code.len      = 0;
      incsum_acct_dept_code.len     = 0;
      incsum_orig_dept_code.len     = 0;
      incsum_physician_id.len       = 0;
      incsum_serv_date.len          = 0;
      incsum_episode_type.len       = 0;

/*      incsum_base_charge  = (long double) 0;
      incsum_gross_charge = (long double) 0;
      incsum_disc_amt     = (long double) 0;
      incsum_net_charge   = (long double) 0;
      incsum_tot_qty      = (long double) 0;*/

	  //disp_message(ERR_MESG, "Before Fetch");

      EXEC SQL FETCH INC_SUM_DTL_CUR
               INTO  :incsum_serv_pkg_code,
                     :incsum_acct_dept_code,
                     :incsum_serv_date,
                     :incsum_episode_type,
					 :d_facility_id,
                     :incsum_base_charge,
                     :incsum_gross_charge,
                     :incsum_disc_amt,
                     :incsum_net_charge,
                     :incsum_tot_qty;
  
	//disp_message(ERR_MESG, "After Fetch");

      if (OERROR)
            err_mesg("FETCH failed on cursor INC_SUM_DTL_CUR",0,"");

      if (LAST_ROW)
          return(0);

      incsum_serv_pkg_code.arr[incsum_serv_pkg_code.len]     = '\0';
      incsum_acct_dept_code.arr[incsum_acct_dept_code.len]   = '\0';
      incsum_orig_dept_code.arr[incsum_orig_dept_code.len]   = '\0';
      incsum_physician_id.arr[incsum_physician_id.len]       = '\0';
      incsum_serv_date.arr[incsum_serv_date.len]             = '\0';
      incsum_episode_type.arr[incsum_episode_type.len]       = '\0';

      return(1);
}

/*********************** File Handling & Printing Functions *******************/
void open_files()
{
 //  char *file_name = "blrinca1.lis", err_stmt[70];
   	strcpy(filename,WORKING_DIR);
    strcat(filename,"blrinca1.lis");

   if ((fp = fopen(filename,"w")) == NULL)
   {
    //    sprintf(err_stmt,"Error while opening File %s",file_name);
    //    err_mesg(err_stmt,0,"");
	  sprintf(string_var,"Error while opening File %s",filename);
      disp_message(ERR_MESG,string_var);
        proc_exit();
   }

}

void print_title()
{
  fprintf(fp, "\n\nMDL : %2s %43s %-30s %30s  %-15s\n",loc_legend[150],
      " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-25s                 %s %s\n",
     user_id.arr, loc_legend[50],
     ((nd_pkg_serv_flag.arr[0]=='S')?loc_legend[80]:loc_legend[90]));
  fprintf(fp, "REP : %-8s %45s  %-28s %29s %4s : %4d\n", g_pgm_id, " ", 
    loc_legend[100], "",loc_legend[30], ++pctr);
  fprintf(fp, "%s%s%s\n",
            "--------------------------------------------------------",
            "--------------------------------------------------------",
            "--------------------");
  fprintf(fp,"VER : 4.1\n");
  fflush(fp);

  fprintf(fp,"\n\n\n\n        INPUT PARAMETERS \n        ----------------\n\n");
  fprintf(fp," %14s %12s         : %s\n\n"," ",loc_legend[200], nd_epi_type.arr);
  fprintf(fp," %14s %12s         : %s\n\n"," ",loc_legend[270], nd_rep_type.arr);
  fprintf(fp," %14s %20s : %s\n\n"," ",loc_legend[110], nd_pkg_serv_flag.arr);


  if (nd_pkg_serv_flag.arr[0]=='S')
  {
   fprintf(fp," %14s %15s %4s : %-10s\n"," ",loc_legend[120],loc_legend[60], nd_fm_blng_serv.arr); 
   fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_blng_serv.arr);
   fprintf(fp," %14s %15s %4s : %-10s\n"," ",loc_legend[130],loc_legend[60], nd_fm_ac_dept.arr); 
   fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_ac_dept.arr);
  }
  else
  {
   fprintf(fp," %14s %12s    %4s : %-10s\n"," ",loc_legend[140],loc_legend[60], nd_fm_blng_serv.arr); 
   fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_blng_serv.arr);
  }

  fprintf(fp," %14s %15s %4s : %-10s\n"," ",loc_legend[160],loc_legend[60], nd_fm_or_dept.arr); 
  fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_or_dept.arr);
  fprintf(fp," %14s %6s          %4s : %-10s\n"," ",loc_legend[340],loc_legend[60], nd_fm_dr.arr); 
  fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_dr.arr);
  fprintf(fp," %14s %12s    %4s : %-10s\n"," ",loc_legend[190],loc_legend[60], nd_fm_date.arr); 
  fprintf(fp," %14s                 %2s   : %-10s\n\n"," ",loc_legend[70],nd_to_date.arr);
  fprintf(fp," %14s %8s        %4s : %-2s\n"," ",loc_legend[180],loc_legend[60], nd_fr_facility.arr); 
  fprintf(fp," %14s                 %2s   : %-2s\n\n"," ",loc_legend[70],nd_to_facility.arr);
  
  fflush(fp);
}

void print_head()
{
  

  fprintf(fp, "\f\n\nMDL : %2s %43s %-30s %30s  %-15s\n",loc_legend[150],
      " ", hosp_name.arr," ", date_time.arr);
  

  fprintf(fp, "OPR : %-25s                 %s %s\n",
    user_id.arr, loc_legend[50],
     ((nd_pkg_serv_flag.arr[0]=='S')?loc_legend[80]:loc_legend[90]));
  

  fprintf(fp, "REP : %-8s %45s  %-28s %29s %4s : %4d\n\n", g_pgm_id, " ",
    loc_legend[100] ," ",loc_legend[30], ++pctr);
  

   switch (nd_epi_type.arr[0]) 
   {
   
   case 'I' :  fprintf(fp, "%12s : %13s\n\n",loc_legend[200],loc_legend[210]); 
			   break;
   case 'D' :  fprintf(fp, "%12s : %10s\n\n",loc_legend[200],loc_legend[220]); 
			   break;	
   case 'O' :  fprintf(fp, "%12s : %14s\n\n",loc_legend[200],loc_legend[230]); 
			   break;
   case 'E' :  fprintf(fp, "%12s : %12s\n\n",loc_legend[200],loc_legend[240]); 
			   break;
   case 'R' :  fprintf(fp, "%12s : %20s\n\n",loc_legend[200],loc_legend[250]); 
			   break;
   }
  
  fprintf(fp, "%s%s%s\n",
            "--------------------------------------------------------",
            "--------------------------------------------------------",
            "------------------------");

  fprintf(fp, "%20s %1s %4s                             %4s              %8s     %12s",loc_legend[310],"&",loc_legend[320],loc_legend[260],loc_legend[330],loc_legend[280]);
  fprintf(fp, "         %8s         %10s\n",loc_legend[290],loc_legend[300]); 
  
  fprintf(fp, "%s%s%s\n",
            "--------------------------------------------------------",
            "--------------------------------------------------------",
            "------------------------"); 

//  fprintf(fp, "%s : %-10.10s %-40.40s",
//      (nd_pkg_serv_flag.arr[0]=='S')?"BILLING SERVICE":"PACKAGE CODE",
//      old_serv_pkg_code, old_serv_pkg_desc);
//  if (nd_pkg_serv_flag.arr[0]=='S')
//      fprintf(fp, "     A/C DEPT : %-6.6s  %40.40s\n", old_acct_dept_code,
//                                                       old_acc_dept_desc);

  fprintf(fp, "\n");
  fflush(fp);
  lctr = 13;
}


void init_old()
{
 old_serv_pkg_code[0]  = '\0';
 old_acct_dept_code[0] = '\0';
}

void print_all_breaks(int i)
{

  /******************  Get the Descriptions if codes are changed ************/

  if (i == 1) {
     if (fst_time !=0) {
        print_total();
        reptot_gross_charge  = 0;
        reptot_disc_amt      = 0;
        reptot_net_charge    = 0;
        reptot_tot_qty       = 0;
      }  
     fst_time = 1;
     acc_dept_desc.arr[0] = '\0'; acc_dept_desc.len = 0; 
     EXEC SQL OPEN SY_PHYSICIAN_MAST_CUR;
     EXEC SQL FETCH SY_PHYSICIAN_MAST_CUR INTO :acc_dept_desc;
     acc_dept_desc.arr[acc_dept_desc.len] = '\0'; 
     strcpy(old_acct_dept_code, incsum_acct_dept_code.arr);
     strcpy(old_acc_dept_desc, acc_dept_desc.arr);
     fprintf(fp,"\n%6s : %-7s %-40s\n\n",loc_legend[170],incsum_acct_dept_code.arr,acc_dept_desc.arr);
     lctr += 3;
     }
  else if (i == 2)  {
     if (fst_time !=0) {
        print_total();
        reptot_gross_charge  = 0;
        reptot_disc_amt      = 0;
        reptot_net_charge    = 0;
        reptot_tot_qty       = 0;
      }  
     fst_time = 1;
     acc_dept_desc.arr[0] = '\0'; acc_dept_desc.len = 0; 
     EXEC SQL OPEN SY_ORG_DEPT_CUR;
     EXEC SQL FETCH SY_ORG_DEPT_CUR INTO :acc_dept_desc;
     acc_dept_desc.arr[acc_dept_desc.len] = '\0'; 
     strcpy(old_acct_dept_code, incsum_acct_dept_code.arr);
     strcpy(old_acc_dept_desc, acc_dept_desc.arr); 
     fprintf(fp,"\n%22s : %-7s %-40s\n\n",loc_legend[350],incsum_acct_dept_code.arr,acc_dept_desc.arr);
     lctr += 3;   
    }
  else if (i == 3)
    {
     if (fst_time !=0) {
        print_total();
        reptot_gross_charge  = 0;
        reptot_disc_amt      = 0;
        reptot_net_charge    = 0;
        reptot_tot_qty       = 0;
      }  
     acc_dept_desc.arr[0] = '\0'; acc_dept_desc.len = 0; 
     fst_time = 1;
     EXEC SQL OPEN SY_AC_DEPT_CUR;
     EXEC SQL FETCH SY_AC_DEPT_CUR INTO :acc_dept_desc;
     acc_dept_desc.arr[acc_dept_desc.len] = '\0'; 
     strcpy(old_acct_dept_code, incsum_acct_dept_code.arr);
     strcpy(old_acc_dept_desc, acc_dept_desc.arr); 
     fprintf(fp,"\n%14s : %-7s %-40s\n\n",loc_legend[370],incsum_acct_dept_code.arr,acc_dept_desc.arr);
     lctr += 3;
    }
}

/***************************************************************************/

int check_break()
{
  if(strcmp(nd_rep_type.arr,"S") == 0)
    { 
      return 4;
     }  
  else if (strcmp(nd_rep_type.arr,"A") == 0) {
      if(strcmp(old_acct_dept_code, incsum_acct_dept_code.arr)!=0)
         return 3;
    }                                
  else if (strcmp(nd_rep_type.arr,"O") == 0) {
       if(strcmp(old_acct_dept_code, incsum_acct_dept_code.arr)!=0)
          return 2;
    }
  else if (strcmp(nd_rep_type.arr,"D") == 0) {
       if(strcmp(old_acct_dept_code, incsum_acct_dept_code.arr)!=0)
          return 1; 
    }      
  return 0;
}

/************************** General Purpose Functions **********************/
void print_detail()
{
   char  tot_qty                     [10];
   if (lctr > MAXLINES - 1) print_head();
   EXEC SQL OPEN BL_BLNG_SERV_CUR;
   EXEC SQL FETCH BL_BLNG_SERV_CUR INTO :serv_pkg_desc;
   reptot_gross_charge  += incsum_gross_charge;
   reptot_disc_amt      += incsum_disc_amt;
   reptot_net_charge    += incsum_net_charge;
   reptot_tot_qty       += incsum_tot_qty;
   gr_gross_charge      += incsum_gross_charge;
   gr_disc_amt          += incsum_disc_amt;
   gr_net_charge        += incsum_net_charge;
   gr_tot_qty           += incsum_tot_qty;
   fprintf(fp,"%-2s %-10s %-40s ", d_facility_id.arr, incsum_serv_pkg_code.arr,serv_pkg_desc.arr);
   fprintf(fp," %-10s     ",incsum_serv_date.arr);
   sprintf(tot_qty,"%ld",incsum_tot_qty);
   fprintf(fp," %10.2f ",incsum_tot_qty);
   print_formated(incsum_gross_charge,fp); fprintf(fp, "    ");
   print_formated(incsum_disc_amt,fp);     fprintf(fp, "    ");
   print_formated(incsum_net_charge,fp);   fprintf(fp, "\n");

   fflush(fp);
   lctr ++;
}
/*****************************************************************************/
void sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
  {
      disp_message(ORA_MESG,"Error in connecting to Oracle\n");
      if (uid_pwd.len == 0)
         disp_message(ERR_MESG,"Null oracle uid/pwd\n\n\n");
      proc_exit();
  }
}
/*
               
void print_formated(double loc_amount)
{
   char out_str[30],out_str1[30];

   if (loc_amount == 0)
      fprintf(fp,"%14s ","0.00");
   else if (loc_amount > 0)
   {
      sprintf(out_str,"%11.2f",loc_amount);
      ltrim(out_str);format_amt(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%11.2f",-loc_amount);
      ltrim(out_str);format_amt(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}

*/

print_formated(double loc_amount, FILE *fp)
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
        ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
                ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }
}

void ltrim(char *l_str)
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}


void list_args(int arg_cnt, char **arg_list)
{
   int i;
   disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
}


void print_end()
{
  if (lctr > MAXLINES - 6) print_head();
  fprintf(fp, "\n\n\n %52s **   END  OF  REPORT   ** \n\n", " ");
  fprintf(fp,"");
  fflush(fp);
  fclose(fp);
}

void print_total()
{
   if (lctr + 3 > MAXLINES ) print_head();
   fprintf(fp,"                                                   ");   
   fprintf(fp,"                   ");
   fprintf(fp,"-----------------------------------------------------------------     \n");
   lctr ++;
   fprintf(fp,"                                                   ");   
   fprintf(fp,"                    ");
   fprintf(fp," %10.2f ",reptot_tot_qty);
   print_formated(reptot_gross_charge,fp); fprintf(fp, "    ");
   print_formated(reptot_disc_amt,fp);     fprintf(fp, "    ");
   print_formated(reptot_net_charge,fp);   fprintf(fp, "\n");
   fprintf(fp,"                                                   ");   
   fprintf(fp,"                   ");
   fprintf(fp,"-----------------------------------------------------------------     \n");

   lctr ++;
   lctr ++;  

   fflush(fp);
}

void print_gr_total()
{
   if (lctr + 3 > MAXLINES - 1) print_head();
   fprintf(fp,"                                                   ");   
   fprintf(fp,"                   ");
   fprintf(fp,"-----------------------------------------------------------------     \n");
   lctr ++;
   fprintf(fp,"%11s                                        ",loc_legend[360]);   
   fprintf(fp,"                    ");
   fprintf(fp," %10.2f ",gr_tot_qty);
   print_formated(gr_gross_charge,fp); fprintf(fp, "    ");
   print_formated(gr_disc_amt,fp);     fprintf(fp, "    ");
   print_formated(gr_net_charge,fp);   fprintf(fp, "\n");
   fprintf(fp,"                                                   ");   
   fprintf(fp,"                   ");
   fprintf(fp,"-----------------------------------------------------------------     \n");
   lctr ++;
   lctr ++;

   fflush(fp);
}


fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRINCA1.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}
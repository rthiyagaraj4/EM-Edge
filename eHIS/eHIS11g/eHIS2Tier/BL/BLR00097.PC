/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR00097.PC                                  */
/* AUTHOR                : Robert Joseph                               */  
/* DATE WRITTEN          : 09/09/2004                                   */      
/************************************************************************/


#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 


#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403

#define ONLINE_PRINTING 1 

#define ESC 0x1B

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR     hosp_name                       [120],
			date							[20],
            date_time                       [22],
            user_id                         [91],
			tel_num							[20],
			fax_num							[20],	
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
			nd_facility						[3],
			nd_reportid									[20],
			nd_bank_code					[7],
			nd_bank_date					[15],
			nd_bank_in_doc_type				[7],
			nd_bank_in_doc_no				[9],
            bl_bank_code					[7],
			bl_bank_in_batch_doc_type		[7],
		    bl_pr_bank_in_batch_doc_type	[7],
			bl_pr_bank_in_batch_doc_date	[15], 
			bl_pr_ext_acc_code				[11],
			bl_acct_desc					[61],
			bl_bank_name					[31],
			bl_docno						[25],
			l_translated_value				[201],
			l_pk_value						[100],
			 bl_bank_in_date				[15],
			 bl_trx_fr_date					[15],
			 bl_trx_to_date					[15],
			 bl_bank_in_doc_no				[15],
			 bl_slmnt_code					[3],
			 bl_slmnt_des					[31],
			
			 p_language_id					[3],

			 bl_currency					[4];


double 	bl_bank_in_batch_doc_no	,bl_bank_in_amt,bl_acc_code_amt,bl_pr_bank_in_batch_doc_no,tot_pr_amt;
					int i;
			
char filename[150];
char x_msg[200];
char loc_legend[999][201];
char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int  lctr = 0,pctr = 0,slno = 1, gcnt=0 ,j =0;
int    first = 1,r_fst = 1;

FILE *fp;

void proc_main(argc,argv)

char *argv[];
int argc ;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
  

         strcpy(g_pgm_id,"BLR00097");
         strcpy(nd_pwd.arr,argv[1]);

		nd_pwd.len = strlen(nd_pwd.arr);

		
		 EXEC sql connect :nd_pwd;

		   if (sqlca.sqlcode < 0 )
	         {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
		
        proc_exit();
        
		}
		 set_meduser_role();
		 strcpy(p_language_id.arr,l_language_id.arr);
        strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);

	strcpy(nd_reportid.arr,argv[5]);
        nd_reportid.len = strlen(nd_reportid.arr);	

	
        nd_bank_code.arr[0]				= '\0';
		nd_bank_date.arr[0]				= '\0';
		nd_bank_in_doc_type.arr[0]			= '\0';
		nd_bank_in_doc_no.arr[0]			= '\0';
						
		nd_bank_code.len			    = 0;
        nd_bank_date.len			  	= 0;  
		nd_bank_in_doc_type.len			= 0;
		nd_bank_in_doc_no.len			= 0;

		 EXEC SQL SELECT	PARAM1,PARAM2,PARAM3,PARAM4
				INTO	:nd_bank_code,
						:nd_bank_date,
						:nd_bank_in_doc_type,
						:nd_bank_in_doc_no
				FROM SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

		nd_bank_code.arr[nd_bank_code.len]				= '\0';
        nd_bank_date.arr[nd_bank_date.len]				= '\0';
		nd_bank_in_doc_type.arr[nd_bank_in_doc_type.len]= '\0';
		nd_bank_in_doc_no.arr[nd_bank_in_doc_no.len]		= '\0';

    
			EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;
			  

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   	 

	 	EXEC SQL Select BASE_CURRENCY into :bl_currency from sy_acc_entity where acc_entity_id = :nd_facility;
 
     if (OERROR)
        err_mesg("SELECT failed on table sy_acc_entity",0,"");
		
        declare_cursor();
       
        fetch_hosp_name();

		fetch_legend_value();

      
         open_file();


        fprintf(fp,"%c(s14H",ESC); 		// To set the font
		
          print_hdr();
   	    print_file();
        end_of_rep();
  

	fclose(fp); 
   

	EXEC SQL COMMIT WORK RELEASE;

        if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
}

	declare_cursor()
 {

       EXEC SQL DECLARE BANK_IN_CUR   CURSOR FOR
	    select a.BANK_CODE,
				b.BANK_NAME,
				a.BANK_IN_BATCH_DOC_TYPE, 
				a.BANK_IN_BATCH_DOC_NO, 
				a.BANK_IN_AMT,
				a.BANK_IN_BATCH_DOC_TYPE||'/'||a.BANK_IN_BATCH_DOC_NO docno,
		to_char(a.bank_in_date,'dd/mm/yyyy'),a.bank_in_doc_no
		from bl_bank_in_doc a,sy_acc_entity c ,bl_bank_name b
		where    a.operating_facility_id     = :nd_facility
			and  c.acc_entity_id          = a.operating_facility_id
			and  a.bank_code=b.bank_code(+) 
            and  nvl(a.bank_code,'!!!!')=:nd_bank_code
			and a.BANK_IN_BATCH_DOC_TYPE    =decode(:nd_bank_in_doc_type,'!!!!',a.BANK_IN_BATCH_DOC_TYPE ,:nd_bank_in_doc_type)
			and to_char(a.BANK_IN_BATCH_DOC_NO)    = decode(:nd_bank_in_doc_no,'!!!!',to_char(a.BANK_IN_BATCH_DOC_NO),:nd_bank_in_doc_no)
			and a.BANK_IN_BATCH_DOC_DATE    = :nd_bank_date
			order by a.SLMT_TYPE_CODE,a.BANK_IN_BATCH_DOC_DATE,a.BANK_IN_BATCH_DOC_TYPE, 
             a.BANK_IN_BATCH_DOC_NO  ;

 
     
	
     
      
     EXEC SQL DECLARE PRINT_CUR  CURSOR FOR
	   select a.BANK_IN_BATCH_DOC_TYPE, a.BANK_IN_BATCH_DOC_NO ,a.BANK_IN_BATCH_DOC_DATE, 
		a.EXT_ACCT_CODE , ACCT_CODE_AMT,ACCT_DESC      
		from BL_BANK_IN_BY_ACCT_CODE a, BL_EXT_ACCT_CODE b, sy_acc_entity c 
		where a.OPERATING_FACILITY_ID= c.acc_entity_id
		and  a.operating_facility_id     = :nd_facility
		and b.ACC_ENTITY_CODE=c.acc_entity_code
		and a.EXT_ACCT_CODE=b.ACCOUNT_CODE
		and a.BANK_IN_BATCH_DOC_TYPE =:bl_bank_in_batch_doc_type
		and to_char(a.BANK_IN_BATCH_DOC_NO)   =:bl_bank_in_batch_doc_no
		order by EXT_ACCT_CODE ;

	    }

  


  open_bank_in_cur()
{

	EXEC SQL OPEN BANK_IN_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BANK_IN_CUR",0,"");
}

close_bank_in_cur()
{

	EXEC SQL CLOSE BANK_IN_CUR;
    
}

 

open_print_cur()
{

	EXEC SQL OPEN PRINT_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor PRINT_CUR",0,"");
}

close_print_cur()
{

	EXEC SQL CLOSE PRINT_CUR;
    
}


 fetch_bank_in_cur()
 {
    
bl_bank_code.arr[0]				= '\0';
bl_bank_name.arr[0]				= '\0';
bl_bank_in_batch_doc_type.arr[0]	= '\0';
bl_docno.arr[0]						='\0';			
bl_bank_in_date.arr[0]				='\0';

bl_bank_in_doc_no.arr[0]			='\0';
bl_bank_code.len						= 0;
bl_bank_name.len						= 0;
bl_bank_in_batch_doc_type.len			= 0;
bl_docno.len							= 0;				
bl_bank_in_date.len						=0;

bl_bank_in_doc_no.len					=0;

 EXEC SQL FETCH BANK_IN_CUR INTO
				:bl_bank_code,
				:bl_bank_name,
				:bl_bank_in_batch_doc_type,
				:bl_bank_in_batch_doc_no,
				:bl_bank_in_amt,
				:bl_docno,
				:bl_bank_in_date,
				:bl_bank_in_doc_no;
if (OERROR)
          err_mesg("FETCH failed on cursor BANK_IN_CUR",0,"");

bl_bank_code.arr[bl_bank_code.len]		='\0';
bl_bank_name.arr[bl_bank_name.len]		='\0';	
bl_bank_in_batch_doc_type.arr[bl_bank_in_batch_doc_type.len] ='\0';
bl_docno.arr[bl_docno.len]				='\0';
bl_bank_in_date.arr[bl_bank_in_date.len]  ='\0';

bl_bank_in_doc_no.arr[bl_bank_in_doc_no.len] ='\0';

fetch_slmnt_cur();

return(LAST_ROW?0:1);
}

fetch_trx_date()
{
	bl_trx_fr_date.arr[0] = '\0';
	bl_trx_fr_date.len = 0;

	bl_trx_to_date.arr[0] = '\0';
	bl_trx_to_date.len = 0;
	
	EXEC SQL SELECT to_char(MIN(doc_date),'dd/mm/yyyy'), to_char(MAX(doc_date),'dd/mm/yyyy') 
	INTO :bl_trx_fr_date, :bl_trx_to_date
	FROM bl_receipt_refund_dtl
	WHERE operating_facility_id = :nd_facility
	AND bank_in_batch_doc_type = :bl_bank_in_batch_doc_type
	AND bank_in_batch_doc_no = :bl_bank_in_batch_doc_no;

	bl_trx_fr_date.arr[bl_trx_fr_date.len] = '\0';
	bl_trx_fr_date.arr[bl_trx_fr_date.len] = '\0';
}

fetch_slmnt_cur()
 {

  bl_slmnt_code.arr[0]  ='\0';
  bl_slmnt_des.arr[0]  ='\0';

  bl_slmnt_code.len    =0;
  bl_slmnt_des.len    =0;

  EXEC SQL Select distinct s.SLMT_TYPE_CODE,LONG_DESC INTO
       :bl_slmnt_code,
	   :bl_slmnt_des 
	    from bl_slmt_type s,BL_BANK_IN_BY_ACCT_CODE b where
		b.SLMT_TYPE_CODE=s.SLMT_TYPE_CODE and
		b.BANK_IN_BATCH_DOC_TYPE=:bl_bank_in_batch_doc_type and
		b.BANK_IN_BATCH_DOC_NO=:bl_bank_in_batch_doc_no;

if (OERROR)
          err_mesg("FETCH failed on cursor PRINT_CUR",0,"");

		bl_slmnt_code.arr[bl_slmnt_code.len]   ='\0';
        bl_slmnt_des.arr[bl_slmnt_des.len]     ='\0';
}

fetch_print_cur()
{
  
			bl_pr_bank_in_batch_doc_type.arr[0]		='\0';
			bl_pr_bank_in_batch_doc_date.arr[0]		='\0';
			bl_pr_ext_acc_code.arr[0]				='\0';			
			bl_acct_desc.arr[0]						='\0';

			bl_pr_bank_in_batch_doc_type.len		=0;
			bl_pr_bank_in_batch_doc_date.len		=0;
			bl_pr_ext_acc_code.len					=0;		
			bl_acct_desc.len						=0;

 EXEC SQL FETCH PRINT_CUR INTO
        :bl_pr_bank_in_batch_doc_type,
        :bl_pr_bank_in_batch_doc_no,
		:bl_pr_bank_in_batch_doc_date,
		:bl_pr_ext_acc_code,
		:bl_acc_code_amt,
		:bl_acct_desc;
		
if (OERROR)
          err_mesg("FETCH failed on table BL_SLMNT_TYPE",0,"");

			bl_pr_bank_in_batch_doc_type.arr[bl_pr_bank_in_batch_doc_type.len]		='\0';
			bl_pr_bank_in_batch_doc_date.arr[bl_pr_bank_in_batch_doc_date.len]		='\0';
			bl_pr_ext_acc_code.arr[bl_pr_ext_acc_code.len]							='\0';			
			bl_acct_desc.arr[bl_acct_desc.len]										='\0';

return(LAST_ROW?0:1);		
		
}


print_hdr()
  {
   open_bank_in_cur();
   
  while(fetch_bank_in_cur())    
  {
 	fetch_trx_date();
      	 
	check_page_end(2,0);
	fprintf(fp,"\n");
	print_page_title();
        fprintf(fp,"\n\n\n\n\n");
	fprintf(fp,"%c(s10H",ESC);
	fprintf(fp,"%c(s3B",ESC); 	// To set bold style
	if(strcmp(bl_bank_code.arr,"\0") == 0)
	 {
	 fprintf(fp,"%-8s",loc_legend[18]);
	 fill_dash(35);
         fprintf(fp,"\n\n\n\n");
	  }
    else
    fprintf(fp,"%-31s \n\n\n\n",bl_bank_name.arr);
      fprintf(fp,"%c(s-3B",ESC);	// To release bold style
     fprintf(fp,"%c(s14H",ESC); 
     
     fprintf(fp,"%-s %-s %-s %-s",loc_legend[20],bl_trx_fr_date.arr,loc_legend[21],bl_trx_to_date.arr);
     fprintf(fp,"\n");
     fill_dash(104);
	 fprintf(fp,"\n\n");
	  fprintf(fp,"%-20s %-15s %-15s %-15s%-14s ",loc_legend[1],nd_bank_date.arr,loc_legend[2],bl_docno.arr,loc_legend[3]);
	  print_formated(bl_bank_in_amt);
	  fprintf(fp,"%-5s \n",bl_currency.arr);
	  fill_dash(104);
	  fprintf(fp,"\n");
	  fprintf(fp,"%-15s %-40s \n",loc_legend[4],bl_slmnt_des.arr );
	  fill_dash(104);
	  fprintf(fp,"\n\n\n\n\n\n");
	  fill_dash(104);
      fprintf(fp,"\n");
       fprintf(fp,"%-7s %-14s%-15s %39s%15s(%-4s)\n",loc_legend[5],loc_legend[6],loc_legend[7]," ",loc_legend[8],bl_currency.arr);
	   fill_dash(104);
     fprintf(fp,"\n\n");
	 open_print_cur();
	  tot_pr_amt =0;
	  slno=1;
	
	  while (fetch_print_cur())
	     {
 		   fprintf(fp,"%7d %-11s   %-61s ",slno,bl_pr_ext_acc_code.arr, bl_acct_desc.arr);
		   print_formated(bl_acc_code_amt);
		   fprintf(fp,"\n");
		   tot_pr_amt=tot_pr_amt+bl_acc_code_amt;
		   slno++;
	    } 
		 
		 if( slno!=7)
		 {
		 gcnt = slno;
		 for (j=gcnt;j<=7;j++)
    	fprintf(fp,"\n");
		   }
		   fill_dash(104);



		   fprintf(fp,"\n");
		   fprintf(fp,"%73s %-10s"," ",loc_legend[9]);
		  print_formated(tot_pr_amt);
          fprintf(fp,"\n\n\n\n\n");
          fprintf(fp,"%-8s :",loc_legend[10] );
		  fill_dash(40);
		  fprintf(fp,"\n\n");
		  fprintf(fp,"%-8s :",loc_legend[11]);
		  fill_dash(15);
          fprintf(fp,"\n\n");
		  fill_dash(104);
		  fprintf(fp,"\n\n");
          fprintf(fp,"%-12s",loc_legend[12]);
		  fill_dash(26);
 
		  fprintf(fp," %-15s ",loc_legend[13]);

		  if(strcmp(bl_bank_in_doc_no.arr,"\0")==0)
		  fill_dash(15);
		  else  
		  fprintf(fp," %-15s",bl_bank_in_doc_no.arr);
          
          fprintf(fp," %-15s",loc_legend[14]);
           if(strcmp(bl_bank_in_date.arr,"\0")==0)
		   {
		   fill_dash(3);
		   fprintf(fp,"/");
		   fill_dash(5);
		   fprintf(fp,"/");
		   fill_dash(7);
		   }
          else
		   
		   fprintf(fp,"%-14s",bl_bank_in_date.arr);
		  
		  fprintf(fp,"\n");
          fill_dash(104); 
           fprintf(fp,"\n\n\n\n\n\n\n\n\n\n\n\n\n");
         fprintf(fp,"%11s %30s %10s %-20s %10s %-20s \n"," ",hosp_name.arr,loc_legend[16],tel_num.arr,loc_legend[17],fax_num.arr);
		 fprintf(fp,"%36s %16s %20s "," ",loc_legend[19],date_time.arr);
		fprintf(fp,"\f");
		  }

   }

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
	date.arr[0]		 = '\0';
    user_id.arr[0]   = '\0';
	tel_num.arr[0]	 = '\0';
	fax_num.arr[0]	 = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
	date.len		 = 0;
    user_id.len      = 0;
	tel_num.len		 = 0;
	fax_num.len		 = 0;

    EXEC SQL SELECT ACC_ENTITY_NAME, 
					TO_CHAR(SYSDATE,'DD/MM/RRRR'),
					TO_CHAR(SYSDATE,'DD/MM/RRRR:HH24:MI:SS'),
                    USER,
					tel_num,
					fax_num
               INTO :hosp_name, 
					:date,
					:date_time, 
					:user_id,
					:tel_num,
					:fax_num 
               FROM SY_ACC_ENTITY
	          WHERE ACC_ENTITY_ID = :nd_facility;

    if (OERROR) 
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	date.arr[date.len]					   = '\0';
	user_id.arr[user_id.len]               = '\0';
	tel_num.arr[tel_num.len]			   = '\0';
	fax_num.arr[fax_num.len]			   = '\0';

	}

end_of_rep()
{
 	check_page_end(3,0);
	fflush(fp);
}


open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00097.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00097.lis");
       proc_exit();
    }
}

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s  ",str_amt);
    }
}        


fill_dash(flg)
{
  int i;
  for (i=1;i<=flg;i++)
	fprintf(fp,"%s","_");
}

print_page_title()
{
	double l_report_width;
	double l_start_point;
        double head_length;
	int	   l_page_width;
	
	l_report_width=132;
	head_length = strlen(loc_legend[15]);

	
	l_start_point=ceill((l_report_width/2)-(head_length/2)-15);
	fprintf(fp,"\n");
        print_spaces(l_start_point);
    fprintf(fp,"%c(s09H",ESC);
	fprintf(fp,"%c(s3B",ESC); 	// To set bold style
	fprintf(fp,"%c&d0D",ESC); /* set Underline mode */
	fprintf(fp,"%12s\n",loc_legend[15]);
	fprintf(fp,"%c(s-3B",ESC);	// To release bold style
    fprintf(fp,"%c(s14H",ESC); 
	fprintf(fp,"%c&d@",ESC); /* release underline mode */
	fprintf(fp,"\n");
	l_start_point=0;
}

print_spaces(l_length)
double l_length;

{
 int i;
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}

 check_page_end(l_lead_lines, l_print_flag)
int l_lead_lines;
int	l_print_flag;
{
	if(l_print_flag==1)
		l_lead_lines=l_lead_lines+10;

	if((lctr+l_lead_lines)> 55) 
	{
		fprintf(fp,"\f");
		//print_head();
		lctr = 2;
	}
}


print_file()
{
 
	PrintDocument(	nd_pwd.arr,		//char	*PUidPwd;
			nd_session_id.arr,	//char	*PSessionID;
			nd_facility.arr,	//char	*PFacilityID;
			"BL",			//char	*PModuleID;
			nd_reportid.arr,	//char	*PDocumentID;
			filename,		//char	*POnlinePrintFileNames;
			"O",			//char	*PLocationTypes;
			" ",			//char	*PLocationCodes;
			1,			//int		PNumOfCopies;
			1,			//int		PPageFrom;
			999			//int		PPageTo;
			); 
}  
  
  
fetch_legend_value()
 {
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00097.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}    

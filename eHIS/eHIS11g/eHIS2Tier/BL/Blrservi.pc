/************************************************************************/
/* OCS MEDICOM VER 1.10.01                                                 */
/************************************************************************/
/* PROGRAM NAME          : BLRSERVI.PC                                  */
/* DATE WRITTEN          : 10-MAY-1993                                  */ 
/*                                                                      */
/* CALLED FROM           : BLRPRMST (FORM)                              */
/*                                                                      */
/* FUNCTION              :                                              */ 
/*                                                                      */
/*                                                                      */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */ 
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        BL_BLNG_SERV               Lookup                  */
/*         2.        BL_BLNG_SERV_FOR_GRP       Lookup                  */
/*         3.        BL_BLNG_CLASS              Lookup                  */
/*         4.        BL_BILL_TYPE               Lookup                  */
/*         5.        BL_BLNG_PRT_GRP_LINE       Lookup                  */
/*         6.        SY_DEPT                    Lookup                  */
/*         7.        BL_SERVICE_LOC             Lookup                  */
/*                                                                      */
/*  PARAMETERS                                                          */
/*    REPORT_TYPE - 1 LIST OF BILLING SERVICES                          */
/*                  2 NUMBER OF SERVICES WITHIN A CLASSIFICATION FOR A  */
/*                    SERVICE GROUP                                     */
/*                  3 NUMBER OF SERVICE CLASSIFICATION WITHIN A SERVICE */
/*                    GROUP                                             */
/*                                                                      */
/*    FROM BILLING SERVICE CODE  |  RANGE OF ROWS TO BE SELECTED.       */
/*    TO   BILLING SERVICE CODE  |                                      */
/*    PRINT OPTION -   S - SUSPENDED ROWS ONLY                          */
/*                     A - ACTIVE ROWS ONLY                             */
/*                     L - ALL ROWS                                     */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <math.h>
#include <string.h>
#include "bl.h"           

#define OERROR (sqlca.sqlcode < 0)

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define INIT_MESG "Report Generation In Progress"
 
/*
#define DEBUG 0    
*/

EXEC SQL BEGIN DECLARE SECTION;

   /*  COMMAND LINE ARGUMENTS */
   VARCHAR uid_pwd         [132],
           nd_session_id   [16],
           nd_pgm_date     [15];
   /*----------------------------------------------*/


   /*   PARAMETERS   */
   VARCHAR nd_report_type                [2],
   /*-- size for the blng_serv_codes was [6] now changed to [7] which is 
        correct because the size of blng_serv_code is 6. VSK 21/02/1999 */
           nd_fr_blng_code               [11],
           nd_to_blng_code               [11],
           nd_print_option               [2];

   /*----------------------------------------------*/
   /*  OTHER HOST VARIABLES   */

   VARCHAR nd_blng_serv_code              [11],
           nd_long_desc                   [41],
           nd_short_desc                  [16],
           nd_loc_lang_long_desc          [31],
           nd_loc_lang_short_desc         [17],
           nd_serv_grp_code               [3],
           nd_serv_grp_long_desc          [41],
           nd_serv_grp_short_desc         [16],
           nd_serv_classification_code    [4],
           nd_serv_class_long_desc        [41],
           nd_serv_class_short_desc       [16],
           nd_prt_grp_hdr_code            [3],
           nd_prt_grp_line_code           [3],
           nd_prt_long_desc               [41],
           nd_source_module_dept_flag     [2],
           nd_dept_code                   [7],
           nd_dept_long_desc              [41],                  
           nd_dr_fee_flag                 [2],
           nd_phys_cat_code               [2],
           nd_assy_serv_flag              [2],
           nd_serv_independent_use_flag   [2],
           nd_dir_entry_flag              [2],
           nd_source_module_rate_flag     [2],
           nd_rate_entry_by_user_flag     [2],
           nd_ip_applicable_flag          [2],
           nd_op_applicable_flag          [2],
           nd_ref_applicable_flag         [2],
           nd_ref_bill_type_code          [3],
           nd_bill_type_desc              [31],
           nd_serv_locn_code              [5],
           nd_serv_locn_desc              [31],
           nd_serv_anal_grp1              [7],
           nd_serv_anal_grp2              [7],
           nd_status                      [2],
           nd_nursing_serv_yn             [2],
           nd_misc_serv_yn                [2],
		   nd_icd_code					  [11],
		   nd_operating_facility_id       [3],
		   nd_fr_opr_facility             [3],
		   nd_to_opr_facility			  [3];
         
   double
           nd_ip_rate,                   
           nd_op_rate,                  
           nd_ref_rate,               
           nd_min_charge_amt,          
           nd_base_qty;                

   short   ind_fr_blng_code,
           ind_to_blng_code;
        
   VARCHAR user_id                       [91],
           hosp_name                     [120],
           date_time                     [20];

    double nd_def_charge;
	char string_var[150];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

FILE *fp;
char filename[150];
int lctr = 0,pctr = 0, pend_doc_ctr = 0,tot_grp = 0,tot_class = 0;

char old_serv_grp_code[3],
     old_serv_classification_code[4];

char first_record = 'Y',
     serv_group_change  = 'Y';

long no_serv_groups           = 0,
     no_serv_classifications  = 0,
     no_blng_servs            = 0;

char rep_name[3][70] = { "              BILLING SERVICES - DETAIL",
               "           BILLING SERVICES WITHIN CLASSIFICATION",
               "             CLASSIFICATIONS WITHIN SERVICE GROUP" };

char rep_file_name[3][9] = { "BLRSERV1", "BLRSERV2", "BLRSERV3" };

void proc_main(argc,argv)
char *argv[];
int argc;
{
   if (argc < 5)
   {
    int i = 0;
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(g_pgm_id,"BLRSERVI");

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   sql_connect();

   set_meduser_role();

    /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   fetch_param();
   start_prog_msg();
   fetch_desc();
   declare_cursors();
   if (strcmp(nd_report_type.arr,"1") == 0) 
      report1();
   else if (strcmp(nd_report_type.arr,"2") == 0)
      report2();
   else if (strcmp(nd_report_type.arr,"3") == 0) 
      report3();
   pend_doc_ctr = 0;
   close_cursors();
   delete_param();
   end_prog_msg();
   EXEC SQL COMMIT WORK RELEASE;

   strcpy(g_pgm_id,"BLRSERVI");

    return;
}

fetch_desc()
{
   EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                   USER
              INTO :hosp_name, :date_time, :user_id
              FROM SY_ACC_ENTITY
			  WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

   if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]           = '\0';
   date_time.arr[date_time.len]           = '\0';
   user_id.arr[user_id.len]               = '\0';

}

fetch_param()
{
    nd_report_type.arr[0]  = '\0';
    nd_fr_blng_code.arr[0] = '\0';
    nd_to_blng_code.arr[0] = '\0';
    nd_print_option.arr[0] = '\0';

    nd_report_type.len     = 0;
    nd_fr_blng_code.len    = 0;
    nd_to_blng_code.len    = 0;
    nd_print_option.len    = 0;

   EXEC SQL SELECT  OPERATING_FACILITY_ID,
					PARAM1,
                    PARAM2,
                    PARAM3,
                    PARAM4,
					PARAM5,
					PARAM6
            INTO    :nd_operating_facility_id,
					:nd_report_type,
/*-- wrong receiving items has been given now been corrected VSK 21/02/1999
					:nd_fr_blng_code:ind_fr_blng_code,
                    :nd_to_blng_code:ind_to_blng_code,*/
                    :nd_fr_blng_code,
                    :nd_to_blng_code,
                    :nd_print_option,
					:nd_fr_opr_facility,
					:nd_to_opr_facility
            FROM    SY_PROG_PARAM
            WHERE   PGM_ID     = 'BLRSERVI'
            AND     SESSION_ID = :nd_session_id
            AND     PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");
    
   nd_report_type.arr[nd_report_type.len]     = '\0';
   nd_fr_blng_code.arr[nd_fr_blng_code.len]   = '\0';
   nd_to_blng_code.arr[nd_to_blng_code.len]   = '\0';
   nd_print_option.arr[nd_print_option.len]   = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);
}

delete_param()
{
   EXEC SQL DELETE
            FROM    SY_PROG_PARAM
            WHERE   PGM_ID     = 'BLRSERVI'
            AND     SESSION_ID = :nd_session_id
            AND     PGM_DATE   = :nd_pgm_date;
   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
}
declare_cursors()
{

EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR 
                  SELECT a.BLNG_SERV_CODE,
                LONG_DESC,
                SHORT_DESC,
                SERV_GRP_CODE,
                SERV_CLASSIFICATION_CODE,
                LOC_LANG_LONG_DESC,
                LOC_LANG_SHORT_DESC,
                PRT_GRP_HDR_CODE,
                PRT_GRP_LINE_CODE,
                DR_FEE_FLAG,
                PHYS_CAT_CODE,
                SOURCE_MODULE_DEPT_FLAG,
                DEPT_CODE,
                SERV_LOCN_CODE,
                SERV_ANAL_GRP1,
                SERV_ANAL_GRP2,
                DEF_REF_BILL_TYPE_CODE,
                DIR_ENTRY_FLAG,
                SOURCE_MODULE_RATE_FLAG,
                RATE_ENTRY_BY_USER_FLAG,
                DEF_CHARGE,
                b.IP_RATE,
                b.OP_RATE,
                b.REF_RATE,
                b.MIN_CHARGE_AMT,
                b.BASE_QTY,  
                NVL(MISC_SERV_YN,'N'),
                NVL(NURSING_SERV_YN,'N'),
                a.STATUS ,
		ICD_CODE       
         FROM   bl_blng_serv A, BL_SERV_CUST_PC_PRICE b
 	 WHERE  a.blng_serv_code = b.blng_serv_code
 	 and    b.CUST_PC_IND    = 'S'
 	 AND    trunc(sysdate) between trunc(b.VALID_FROM) and trunc(b.VALID_TO)
	 AND    A.BLNG_SERV_CODE BETWEEN NVL(:nd_fr_blng_code,'!!!!!!!!!!')
                                   AND NVL(:nd_to_blng_code, '~~~~~~~~~')
         AND    ((A.STATUS = 'S' AND :nd_print_option = 'S') OR
                 (NVL(A.STATUS,'X') != 'S' AND :nd_print_option = 'A') OR
                 (:nd_print_option = 'L'))
       ORDER BY A.BLNG_SERV_CODE;

EXEC SQL DECLARE BL_BLNG_SERV_GRP_CUR CURSOR FOR
         SELECT LONG_DESC, SHORT_DESC 
         FROM   BL_BLNG_SERV_GRP
         WHERE  SERV_GRP_CODE = :nd_serv_grp_code;

EXEC SQL DECLARE BL_SERV_CLASSIFICATION_CUR CURSOR FOR
         SELECT LONG_DESC, SHORT_DESC
         FROM   BL_SERV_CLASSIFICATION
         WHERE  SERV_CLASSIFICATION_CODE = :nd_serv_classification_code;

EXEC SQL DECLARE BL_BLNG_PRT_GRP_LINE_CUR CURSOR FOR
         SELECT LONG_DESC 
         FROM   BL_BLNG_PRT_GRP_LINE
         WHERE  PRT_GRP_HDR_CODE  = :nd_prt_grp_hdr_code 
         AND    PRT_GRP_LINE_CODE = :nd_prt_grp_line_code;

EXEC SQL DECLARE SY_DEPT_CUR CURSOR FOR
         SELECT LONG_DESC 
         FROM   SY_DEPT 
         WHERE  DEPT_CODE = :nd_dept_code
		 AND    OPERATING_FACILITY_ID BETWEEN
		             NVL(ltrim(rtrim(substr(:nd_fr_opr_facility,1,2))),'  ')
				AND  NVL(ltrim(rtrim(substr(:nd_to_opr_facility,1,2))),'~~');

EXEC SQL DECLARE BL_SERVICE_LOCN_CUR CURSOR FOR
         SELECT LONG_DESC
         FROM   BL_SERVICE_LOCN
         WHERE  SERV_LOCN_CODE = :nd_serv_locn_code
		 AND    OPERATING_FACILITY_ID BETWEEN 
				NVL(ltrim(rtrim(substr(:nd_fr_opr_facility,1,2))),'  ')
				AND  NVL(ltrim(rtrim(substr(:nd_to_opr_facility,1,2))),'~~');

 EXEC SQL DECLARE BL_BILL_TYPE_CUR CURSOR FOR
          SELECT LONG_DESC 
          FROM   BL_BILL_TYPE
          WHERE  BILL_TYPE_CODE  = :nd_ref_bill_type_code;
}

open_blngserv()
{
  EXEC SQL OPEN BL_BLNG_SERV_CUR;
  if (OERROR)
     err_mesg("OPEN failed on cursor BL_BLNG_SERV_CUR",0," ");
}

fetch_blngserv()
{
  nd_blng_serv_code.arr[0]              = '\0';
  nd_long_desc.arr[0]                   = '\0';
  nd_short_desc.arr[0]                  = '\0';
  nd_serv_grp_code.arr[0]               = '\0';
  nd_serv_classification_code.arr[0]    = '\0'; 
  nd_loc_lang_long_desc.arr[0]          = '\0';
  nd_loc_lang_short_desc.arr[0]         = '\0';
  nd_prt_grp_hdr_code.arr[0]            = '\0';
  nd_prt_grp_line_code.arr[0]           = '\0';
  nd_dr_fee_flag.arr[0]                 = '\0';
  nd_phys_cat_code.arr[0]               = '\0';
  nd_source_module_dept_flag.arr[0]     = '\0';
  nd_dept_code.arr[0]                   = '\0';
  nd_serv_locn_code.arr[0]              = '\0';
  nd_serv_anal_grp1.arr[0]              = '\0';
  nd_serv_anal_grp2.arr[0]              = '\0';
  nd_ref_bill_type_code.arr[0]          = '\0';
  nd_dir_entry_flag.arr[0]              = '\0';
  nd_source_module_rate_flag.arr[0]     = '\0';
  nd_rate_entry_by_user_flag.arr[0]     = '\0';
  nd_misc_serv_yn.arr[0]                = '\0';
  nd_nursing_serv_yn.arr[0]             = '\0';
  nd_status.arr[0]                      = '\0';
  nd_icd_code.arr[0]					= '\0';

  nd_blng_serv_code.len              = 0;
  nd_long_desc.len                   = 0;
  nd_short_desc.len                  = 0;
  nd_serv_grp_code.len               = 0;
  nd_serv_classification_code.len    = 0; 
  nd_loc_lang_long_desc.len          = 0;
  nd_loc_lang_short_desc.len         = 0;
  nd_prt_grp_hdr_code.len            = 0;
  nd_prt_grp_line_code.len           = 0;
  nd_dr_fee_flag.len                 = 0;
  nd_phys_cat_code.len               = 0;
  nd_source_module_dept_flag.len     = 0;
  nd_dept_code.len                   = 0;
  nd_serv_locn_code.len              = 0;
  nd_serv_anal_grp1.len              = 0;
  nd_serv_anal_grp2.len              = 0;
  nd_ref_bill_type_code.len          = 0;
  nd_dir_entry_flag.len              = 0;
  nd_source_module_rate_flag.len     = 0;
  nd_rate_entry_by_user_flag.len     = 0;
  nd_nursing_serv_yn.len             = 0;
  nd_misc_serv_yn.len                = 0;
  nd_status.len                      = 0;
  nd_icd_code.len                    = 0;

  nd_def_charge                     = 0;
  nd_ip_rate                        = 0;
  nd_op_rate                        = 0;
  nd_ref_rate                       = 0;
  nd_min_charge_amt                 = 0;
  nd_base_qty                       = 0;

      
  EXEC SQL FETCH BL_BLNG_SERV_CUR INTO 
                   :nd_blng_serv_code,
                   :nd_long_desc,
                   :nd_short_desc,
                   :nd_serv_grp_code,                
                   :nd_serv_classification_code,
                   :nd_loc_lang_long_desc,
                   :nd_loc_lang_short_desc,        
                   :nd_prt_grp_hdr_code,
                   :nd_prt_grp_line_code,
                   :nd_dr_fee_flag,
                   :nd_phys_cat_code,
                   :nd_source_module_dept_flag,
                   :nd_dept_code,
                   :nd_serv_locn_code,
                   :nd_serv_anal_grp1,
                   :nd_serv_anal_grp2,
                   :nd_ref_bill_type_code,
                   :nd_dir_entry_flag,
                   :nd_source_module_rate_flag,
                   :nd_rate_entry_by_user_flag,
                   :nd_def_charge,
                   :nd_ip_rate,
                   :nd_op_rate,
                   :nd_ref_rate,
                   :nd_min_charge_amt,    
                   :nd_base_qty,
                   :nd_misc_serv_yn,
                   :nd_nursing_serv_yn,
                   :nd_status,
				   :nd_icd_code;

  if (OERROR)
     err_mesg("FETCH failed on cursor BL_BLNG_SERV_CUR",0," ");


  nd_blng_serv_code.arr[nd_blng_serv_code.len]                     = '\0';
  nd_long_desc.arr[nd_long_desc.len]                               = '\0';
  nd_short_desc.arr[nd_short_desc.len]                             = '\0';
  nd_serv_grp_code.arr[nd_serv_grp_code.len]                       = '\0';
  nd_serv_classification_code.arr[nd_serv_classification_code.len] = '\0'; 
  nd_loc_lang_long_desc.arr[nd_loc_lang_long_desc.len]             = '\0';
  nd_loc_lang_short_desc.arr[nd_loc_lang_short_desc.len]           = '\0';
  nd_prt_grp_hdr_code.arr[nd_prt_grp_hdr_code.len]                 = '\0';
  nd_prt_grp_line_code.arr[nd_prt_grp_line_code.len]               = '\0';
  nd_dr_fee_flag.arr[nd_dr_fee_flag.len]                           = '\0';
  nd_phys_cat_code.arr[nd_phys_cat_code.len]                       = '\0';
  nd_source_module_dept_flag.arr[nd_source_module_dept_flag.len]   = '\0';
  nd_dept_code.arr[nd_dept_code.len]                               = '\0';
  nd_serv_locn_code.arr[nd_serv_locn_code.len]                     = '\0';
  nd_serv_anal_grp1.arr[nd_serv_anal_grp1.len]                     = '\0';
  nd_serv_anal_grp2.arr[nd_serv_anal_grp2.len]                     = '\0';
  nd_ref_bill_type_code.arr[nd_ref_bill_type_code.len]             = '\0';
  nd_dir_entry_flag.arr[nd_dir_entry_flag.len]                     = '\0';
  nd_source_module_rate_flag.arr[nd_source_module_rate_flag.len]   = '\0';
  nd_rate_entry_by_user_flag.arr[nd_rate_entry_by_user_flag.len]   = '\0';
  nd_misc_serv_yn.arr[nd_misc_serv_yn.len]                         = '\0';
  nd_nursing_serv_yn.arr[nd_nursing_serv_yn.len]                   = '\0';
  nd_status.arr[nd_status.len]                                     = '\0';
  nd_icd_code.arr[nd_icd_code.len]								   = '\0';

  if (LAST_ROW) 
      return (0);
  else  
      return(1);
}

get_blng_serv_grp_desc()
{
   nd_serv_grp_long_desc.arr[0]  =  '\0';
   nd_serv_grp_long_desc.len     =  0;

   nd_serv_grp_short_desc.arr[0] =  '\0';
   nd_serv_grp_short_desc.len    =  0;

   EXEC SQL OPEN BL_BLNG_SERV_GRP_CUR;
   if (OERROR) 
      err_mesg("OPEN failed on cursor BL_BLNG_SERV_GRP_CUR", 0," ");

   EXEC SQL FETCH BL_BLNG_SERV_GRP_CUR
            INTO   :nd_serv_grp_long_desc, nd_serv_grp_short_desc;
   if (OERROR) 
      err_mesg("FETCH failed on cursor BL_BLNG_SERV_GRP_CUR", 0," ");

   nd_serv_grp_long_desc.arr[nd_serv_grp_long_desc.len]   = '\0';
   nd_serv_grp_short_desc.arr[nd_serv_grp_short_desc.len] = '\0';

}

get_blng_serv_class_desc()
{
   nd_serv_class_long_desc.arr[0]  =  '\0';
   nd_serv_class_long_desc.len     =  0;

   nd_serv_class_short_desc.arr[0]  =  '\0';
   nd_serv_class_short_desc.len     =  0;

   EXEC SQL OPEN BL_SERV_CLASSIFICATION_CUR;
   if (OERROR) 
      err_mesg("OPEN failed on cursor BL_SERV_CLASSIFICATION_CUR", 0," ");

   EXEC SQL FETCH BL_SERV_CLASSIFICATION_CUR
            INTO  :nd_serv_class_long_desc, nd_serv_class_short_desc;
   if (OERROR) 
      err_mesg("FETCH failed on cursor BL_SERV_CLASSIFICATION_CUR", 0," ");

   nd_serv_class_long_desc.arr[nd_serv_class_long_desc.len]     = '\0';
   nd_serv_class_short_desc.arr[nd_serv_class_short_desc.len]   = '\0';

}  

get_prt_line_desc()
{
   nd_prt_long_desc.arr[0]  = '\0';
   nd_prt_long_desc.len     = 0;

   EXEC SQL OPEN BL_BLNG_PRT_GRP_LINE_CUR;
   if (OERROR) 
      err_mesg("OPEN failed on cursor BL_BLNG_PRT_GRP_LINE_CUR", 0," ");

   EXEC SQL FETCH BL_BLNG_PRT_GRP_LINE_CUR
            INTO  :nd_prt_long_desc;
   if (OERROR) 
      err_mesg("FETCH failed on cursor BL_BLNG_PRT_GRP_LINE_CUR", 0," ");

   nd_prt_long_desc.arr[nd_prt_long_desc.len] = '\0';

}  

get_sy_dept_desc()  
{
   nd_dept_long_desc.arr[0]    = '\0';
   nd_dept_long_desc.len       =  0;

   EXEC SQL OPEN SY_DEPT_CUR;
   if (OERROR) 
      err_mesg("OPEN failed on cursor SY_DEPT_CUR", 0," ");

   EXEC SQL FETCH SY_DEPT_CUR
            INTO  :nd_dept_long_desc;
   if (OERROR) 
      err_mesg("FETCH failed on cursor SY_DEPT_CUR", 0," ");
 
   nd_dept_long_desc.arr[nd_dept_long_desc.len]  = '\0';
   
}

get_service_locn_desc()
{
   nd_serv_locn_desc.arr[0] = '\0';
   nd_serv_locn_desc.len    = 0;

   EXEC SQL OPEN BL_SERVICE_LOCN_CUR;
   if (OERROR) 
      err_mesg("OPEN failed on cursor BL_SERVICE_LOCN_CUR", 0," ");

   EXEC SQL FETCH BL_SERVICE_LOCN_CUR
            INTO  :nd_serv_locn_desc;
   if (OERROR) 
      err_mesg("FETCH failed on cursor BL_SERVICE_LOCN_CUR", 0," ");
 
   nd_serv_locn_desc.arr[nd_serv_locn_desc.len] = '\0';

}

get_bill_type_desc()
{
   nd_bill_type_desc.arr[0] = '\0';
   nd_bill_type_desc.len    = 0;

   EXEC SQL OPEN BL_BILL_TYPE_CUR;
   if (OERROR) 
      err_mesg("OPEN failed on cursor BL_BILL_TYPE_CUR", 0," ");

   EXEC SQL FETCH BL_BILL_TYPE_CUR
            INTO  :nd_bill_type_desc;
   if (OERROR) 
      err_mesg("FETCH failed on cursor BL_BILL_TYPE_CUR", 0," ");

   nd_bill_type_desc.arr[nd_bill_type_desc.len] = '\0';

}

/***************************  Report Type  1  *********************************/
report1()
{
/*-- commented the following line due to not opening the report on editor
     VSK 22/02/1999 */
//   strcpy(filename,WORKING_DIR);
   strcat(filename,"blrserv1.lis");
   open_file(filename);
   open_blngserv();
   print_report_title(1);
   first_record = 'Y';
   no_blng_servs = 0;
   no_serv_classifications = 0;
   no_serv_groups = 0;
   print_page_header1();
   while(fetch_blngserv())
   {
       get_blng_serv_grp_desc();
       get_blng_serv_class_desc();
       get_prt_line_desc();
       get_sy_dept_desc();
       get_service_locn_desc();
       get_bill_type_desc();
       print_serv_group1(); 
       print_serv_classification();
       print_report1_detail();
       first_record = 'N';
   }
   print_detail_footer1();
   print_class_footer1();
   print_end1();
}

print_serv_group1()
{
  if (strcmp(old_serv_grp_code, nd_serv_grp_code.arr))
  {
     serv_group_change = 'Y';
     print_detail_footer1();
     print_class_footer1();
     if (lctr > 54) print_page_header1();
     fprintf(fp,"SERVICE GROUP : %-3.3s %-40.40s %-15.15s\n\n", 
                              nd_serv_grp_code.arr,
                              nd_serv_grp_long_desc.arr,
                              nd_serv_grp_short_desc.arr);
     no_serv_groups++;
     strcpy(old_serv_grp_code, nd_serv_grp_code.arr);
     lctr += 2;
  }
}

print_serv_classification()
{
  if (strcmp(nd_serv_classification_code.arr,old_serv_classification_code))
  {
     if (serv_group_change != 'Y')
         print_detail_footer1();
     if (lctr > 54) print_page_header1();

     fprintf(fp,"SERVICE CLASSIFICATION : %-3.3s %-40.40s %-15.15s\n\n", 
                              nd_serv_classification_code.arr,
                              nd_serv_class_long_desc.arr,
                              nd_serv_class_short_desc.arr);
     no_serv_classifications++;
     strcpy(old_serv_classification_code, nd_serv_classification_code.arr);
     lctr += 2;
  }
  serv_group_change = 'N';
}

print_report1_detail()
{
  print_serv_classification();
  if (lctr > 55 - 6)
     print_page_header1();

  fflush(fp);
  fprintf(fp,"  %-10s %-40.40s  %-15.15s  %-30.30s  %-16.16s\n",
                  nd_blng_serv_code.arr, nd_long_desc.arr, nd_short_desc.arr,
                  nd_loc_lang_long_desc.arr, nd_loc_lang_short_desc.arr);
  fprintf(fp,"%-6.6s     %-2.2s-%-2.2s          %-40.40s  ",
                  " ", nd_prt_grp_hdr_code.arr, nd_prt_grp_line_code.arr,
                  nd_prt_long_desc.arr);
    fprintf(fp,"%-1.1s       %-1.1s       %-1.1s        %-6.6s %-40.40s\n",
                         nd_dr_fee_flag.arr, nd_phys_cat_code.arr,
                         nd_source_module_dept_flag.arr,
                         nd_dept_code.arr, nd_dept_long_desc.arr);
  fprintf(fp,"%-6.6s     %-4.4s       %-30.30s  %-6.6s         %-6.6s         ",
                  " ", nd_serv_locn_code.arr, nd_serv_locn_desc.arr,
                  nd_serv_anal_grp1.arr, nd_serv_anal_grp2.arr);
  fprintf(fp, "%-2.2s         %-30.30s\n",
                  nd_ref_bill_type_code.arr, nd_bill_type_desc.arr);
  fprintf(fp,"%-6.6s     %-1.1s             %-1.1s        %-1.1s         ",
                   " ", nd_dir_entry_flag.arr, nd_source_module_rate_flag.arr,
                   nd_rate_entry_by_user_flag.arr);
  print_formated(nd_def_charge); fprintf(fp,"\n");
  fprintf(fp,"%-6.6s     ", " ");
                print_formated(nd_ip_rate); fprintf(fp,"  ");
                print_formated(nd_op_rate); fprintf(fp,"  ");
                print_formated(nd_ref_rate); fprintf(fp,"  ");
                print_formated(nd_min_charge_amt); fprintf(fp,"  ");
                print_formated(nd_base_qty);
                fprintf(fp," %-1.1s           ", nd_misc_serv_yn.arr);
                fprintf(fp," %-1.1s", nd_nursing_serv_yn.arr);
                fprintf(fp,"            %-1.1s\n", nd_status.arr);
                fprintf(fp,"            %-10.1s\n", nd_icd_code.arr);

  fprintf(fp,"\n");
  no_blng_servs++;
  lctr += 6;
}

print_class_footer1()
{
     if (first_record == 'N')
     {
        if (lctr > 54) print_page_header1();

        fprintf(fp,"\t\tTOTAL NUMBER OF SERVICE CLASSIFICATIONS : %6ld\n\n", 
                                                      no_serv_classifications);
        no_serv_classifications = 0;
        no_blng_servs = 0;
        lctr += 2;
     }
}

print_detail_footer1()
{
     if (first_record == 'N')
     {
        if (lctr > 54) print_page_header1();

        fprintf(fp,"\t\tTOTAL NUMBER OF SERVICES : %6ld\n\n", no_blng_servs);
        no_blng_servs = 0;
        lctr += 2;
     }
}

print_page_header1()
{
  fflush(fp);
  fprintf(fp, "\f\n\nMDL : BL %-43s %-30s %-31s %-15s\n",
                           " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-10s %-20s %s\n",
  user_id.arr," ",rep_name[0]);
  fprintf(fp, "REP : %-8s %-105s PAGE : %4d\n",
                  "BLRSERV1", " ", ++pctr);
  fprintf(fp, "%s%s%s\n",
              "------------------------------------------------------------",
              "--------------------------------------------------------------------",
              "------------");
  fprintf(fp, "BLNG CODE  DESCRIPTION                               ");
     fprintf(fp, "SHORT DESC.      LOCAL   DESCRIPTION             ");
     fprintf(fp, "LOCAL   SHORT DESC\n");
  fprintf(fp, "%-9.9s  PRT GRP  LINE  ", " ");
     fprintf(fp, "DESCRIPTION                               ");
     fprintf(fp, "DR FEE  DR CAT  SM DEPT  DEPT   DESCRIPTION\n");
  fprintf(fp, "%-9.9s  SERV LOCN  DESCRIPTION %-20.20s", " ", " ");
     fprintf(fp, "ANALYSIS GRP1  ANALYSIS GRP2  BILL TYPE  DESCRIPTION\n");
  fprintf(fp,"%-9.9s  DIRECT ENTRY  SM RATE  RATE/CHG           DEF CHG\n"," ");
  fprintf(fp, "%-9.9s         IP RATE          OP RATE"," ");
     fprintf(fp, "    REFERRAL RATE       MIN CHARGE");
     fprintf(fp, "         QUANTITY  MISC SERV ?  NURSING SERV ?  STATUS  ICD CODE\n");
fprintf(fp,"----------------------------------------------------------------%s",
    "----------------------------------------------------------------------------\n\n");
  lctr = 13;
}

print_end1()
{
  if (lctr > 55 - 7) print_page_header1();
  fprintf(fp,"\n\t\tTOTAL NO OF SERVICE GROUPS : %6ld\n",no_serv_groups);
  if (lctr > 55 - 5) print_page_header1();
  fprintf(fp, "\n\n\n %-52s **   END  OF  REPORT   ** \n\n", " ");
  fflush(fp);
  fclose(fp);
}

/**  End of Report 1 Routines **/

/********************************  Report 2 ***********************************/
report2()
{
/*-- commented the following line due to not opening the report on editor
     VSK 22/02/1999 */
//   strcpy(filename,WORKING_DIR);
     strcat(filename,"blrserv2.lis");
     open_file(filename);
     print_report_title(2);
     print_page_header2();
     first_record = 'Y';
     no_blng_servs = 0;
     no_serv_classifications = 0;
     no_serv_groups = 0;
     open_blngserv();
     while(fetch_blngserv())
     {
         print_serv_group2();
         print_report2_detail();
         first_record = 'N';
     }
     print_detail_footer2();
     print_class_footer2();
     print_end2();
}

print_serv_group2()
{
  if (strcmp(old_serv_grp_code, nd_serv_grp_code.arr))
  {
     serv_group_change = 'Y';
     print_detail_footer2();
     print_class_footer2();

     if (lctr > 54) print_page_header1();
     fprintf(fp,"SERVICE GROUP : %-3.3s %-40.40s %-15.15s\n\n", 
                              nd_serv_grp_code.arr,
                              nd_serv_grp_long_desc.arr,
                              nd_serv_grp_short_desc.arr);
     no_serv_groups++;
     strcpy(old_serv_grp_code, nd_serv_grp_code.arr);
     lctr += 2;
  }
}

print_class_footer2()
{
     if (first_record == 'N')
     {
        if (lctr > 54) print_page_header2();
        fprintf(fp,"\t\tTOTAL NUMBER OF SERVICE CLASSIFICATIONS : %6ld\n\n", 
                                                 no_serv_classifications);
        lctr += 2;
        no_serv_classifications = 0;
     }
}

print_detail_footer2()
{
     if (first_record == 'N')
     {
        if (lctr > 54) print_page_header2();
        fprintf(fp,"           %6ld\n", no_blng_servs);
        lctr += 1;
     }
}

print_report2_detail()
{
  print_serv_group2();
  if (strcmp(nd_serv_classification_code.arr,old_serv_classification_code))
  {
     if (serv_group_change != 'Y')
        print_detail_footer2();
     if (lctr > 54) print_page_header2();

     get_blng_serv_class_desc();
     fprintf(fp,"                    %-3.3s            %-40.40s  %-15.15s", 
                              nd_serv_classification_code.arr,
                              nd_serv_class_long_desc.arr,
                              nd_serv_class_short_desc.arr);
     no_serv_classifications++;
     no_blng_servs = 0;
     strcpy(old_serv_classification_code, nd_serv_classification_code.arr);
  }
  serv_group_change = 'N';
  no_blng_servs++;
}

/* Page Heading */
print_page_header2()
{
  fprintf(fp, "\f\n\nMDL : BL %-43s %-30s %-31s %-15s\n",
                           " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-10s %-20s %s\n",
   user_id.arr," ",
   "BILLING SERVICES WITHIN CLASSIFICATION");
  fprintf(fp, "REP : %-8s %-105s PAGE : %4d\n",
                  "BLRSERV2", " ", ++pctr);
  fprintf(fp, "%s%s%s\n",
              "------------------------------------------------------------",
              "------------------------------------------------------------",
              "------------");
  fprintf(fp,"\n");
  fprintf(fp,"%19.19s SERVICE CLASS  DESCRIPTION %30.30s"," "," ");
  fprintf(fp,"SHORT DESC        TOTAL SERVICES\n");
  fprintf(fp,"--------------------------------------------------------------%s",
   "----------------------------------------------------------------------\n");
  fprintf(fp,"\n");
  fflush(fp);
  lctr = 10;
  fflush(fp);
}

print_end2()
{
  if (lctr > 55 - 7) print_page_header2();
  fprintf(fp,"\n\t\tTOTAL NO OF SERVICE GROUPS : %6ld\n",no_serv_groups);
  if (lctr > 55 - 5) print_page_header2();
  fprintf(fp, "\n\n\n %-52s **   END  OF  REPORT   ** \n\n", " ");
  fflush(fp);
  fclose(fp);
}

/** End of Report 2 Routines **/

/******************************** Report 3 ************************************/
report3()
{
/*-- commented the following line due to not opening the report on editor
     VSK 22/02/1999 */
//   strcpy(filename,WORKING_DIR);
    strcat(filename,"blrserv3.lis");
    open_file(filename);
    print_report_title(3); 
    print_page_header3();
    first_record = 'Y';
    no_blng_servs = 0;
    no_serv_classifications = 0;
    no_serv_groups = 0;
    open_blngserv();
    while (fetch_blngserv())
          print_report3_detail();
    if (first_record == 'N')
    {
       fprintf(fp," %15.15s %6ld\n\n", " ", no_serv_classifications);
       lctr += 2;
    }
    print_end3();
}

print_report3_detail()
{
  
  if (strcmp(nd_serv_grp_code.arr,old_serv_grp_code))
  {
     get_blng_serv_grp_desc();
     if (first_record == 'N')
     {
        fprintf(fp," %15.15s %6ld\n", " ", no_serv_classifications);
        lctr += 1;
     }
     if (lctr > 54) print_page_header3();

     fprintf(fp,"%-2.2s             %-40.40s  %-15.15s",
                                          nd_serv_grp_code.arr,
                                          nd_serv_grp_long_desc.arr,
                                          nd_serv_grp_short_desc.arr);
     no_serv_groups++;
     no_serv_classifications = 0;
     no_blng_servs = 0;
     strcpy(old_serv_grp_code, nd_serv_grp_code.arr);
  }

  if (strcmp(nd_serv_classification_code.arr,old_serv_classification_code))
  {
     no_serv_classifications++;
     no_blng_servs = 0;
     strcpy(old_serv_classification_code, nd_serv_classification_code.arr);
  }

  first_record = 'N';
}
    
print_page_header3()
{
  fprintf(fp, "\f\n\nMDL : BL %-43s %-30s %-31s %-15s\n",
                           " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-10s %-20s %s\n",
  user_id.arr," ","CLASSIFICATIONS WITHIN SERVICE GROUP");
  fprintf(fp, "REP : %-8s %-105s PAGE : %4d\n",
                  "BLRSERV3", " ", ++pctr);
  fprintf(fp, "%s%s%s\n",
              "------------------------------------------------------------",
              "------------------------------------------------------------",
              "------------");
fprintf(fp,"\n");
fprintf(fp,"SERVICE GROUP  DESCRIPTION %30.30s", " ");
fprintf(fp,"SHORT DESC       TOTAL CLASSIFICATIONS\n");
fprintf(fp,"\n");
fprintf(fp, "%s%s%s\n",
              "------------------------------------------------------------",
              "------------------------------------------------------------",
              "------------");
fflush(fp);
lctr = 9;
}

/* Report Footer */
print_end3()
{
  if (lctr > 55 - 7) print_page_header3();
  fprintf(fp,"\n\t\tTOTAL NO OF SERVICE GROUPS : %6ld\n",no_serv_groups);
  if (lctr > 55 - 5) print_page_header3();
  fprintf(fp, "\n\n\n %-52s **   END  OF  REPORT   ** \n\n", " ");
  fflush(fp);
  fclose(fp);
}


/** End of Report 3 Routines **/

print_report_title(rep_type)
int rep_type;
{
  fflush(fp);
  fprintf(fp, "\n\nMDL : BL %-43s %-30s %-31s %-15s\n",
                           " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-10s %-20s %s\n",
  user_id.arr," ",rep_name[rep_type-1]);
  fprintf(fp, "REP : %-8s %-105s PAGE : %4d\n",
                  rep_file_name[rep_type-1], " ", ++pctr);
  fprintf(fp, "%s%s%s\n",
              "------------------------------------------------------------",
              "------------------------------------------------------------",
              "------------");
  fprintf(fp,"VER : 1.10.01\n");
  fflush(fp);
  
  fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n");
  fprintf(fp,"        ----------------\n\n");


  fprintf(fp,"                REPORT TYPE       : %s\n\n", nd_report_type.arr);
  fprintf(fp,"                FROM BILLING CODE : %s\n\n", nd_fr_blng_code.arr);
  fprintf(fp,"                TO   BILLING CODE : %s\n\n", nd_to_blng_code.arr);
  fprintf(fp,"                PRINT OPTION      : %s\n\n", nd_print_option.arr);

  fflush(fp);
}

close_cursors()
{
   EXEC SQL CLOSE BL_BLNG_SERV_CUR;
   EXEC SQL CLOSE BL_BLNG_SERV_GRP_CUR;
   EXEC SQL CLOSE BL_SERV_CLASSIFICATION_CUR;
   EXEC SQL CLOSE BL_BLNG_PRT_GRP_LINE_CUR;
   EXEC SQL CLOSE SY_DEPT_CUR;
   EXEC SQL CLOSE BL_SERVICE_LOCN_CUR;
   EXEC SQL CLOSE BL_BILL_TYPE_CUR;
}

/*****************************************************************************/
/*                        General Purpose Routines                           */

print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount == 0)
      fprintf(fp,"%-14s "," ");
   else if (loc_amount > 0)
   {
      sprintf(out_str,"%11.2f",loc_amount);
      ltrim(out_str);put_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%11.2f",-loc_amount);
      ltrim(out_str);put_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}

print_formated_tot(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount == 0)
      fprintf(fp,"            0.00");
   else if (loc_amount > 0)
   {
      sprintf(out_str,"%12.2f",loc_amount);
      ltrim(out_str);put_comma(out_str);
      sprintf(out_str1,"%16s",out_str);
      fprintf(fp,"%-16s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%12.2f",-loc_amount);
      ltrim(out_str);put_comma(out_str);
      sprintf(out_str1,"%17s",out_str);
      fprintf(fp,"%-17s-",out_str1);
   }
}

open_file(file_name)
char *file_name;
{
   char err_stmt[80];

   if ((fp = fopen(file_name,"w")) == NULL)
   {
        sprintf(err_stmt,"Error while opening File %s",file_name);
        err_mesg(err_stmt,0,"");
        proc_exit();
   }
   strcpy(OUTPUT_FILE_NAME,file_name);
}      


ltrim(l_str)
char *l_str;
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
  {
      disp_message(ERR_MESG,"Error in connecting to Oracle");
      if (uid_pwd.len == 0)
         disp_message(ERR_MESG,"Null oracle uid/pwd\n\n\n");
      proc_exit();
  }
}

/*   This function now included in err_mesg 
put_comma(str)
char *str;
{
  int i,l,m,a,b,c;
  float j,k;
  char arr[120],o_arr[120],l_str1[10];
  strcpy(arr,str);
  strncpy(l_str1,arr + (strlen(arr) - 2),2);
  l_str1[2] = '\0';
  arr[strlen(str)-3] = '\0';
  i = strlen(arr);
  j = i;
  k = j/3;
  l = k;
  m = i - (l*3);
  if (i > 3)
  {
      for (a=0;a<m;a++)
         o_arr[a] = arr[a];
   if (m)
   {
     o_arr[m] = ','; b=m+1;
   }
   else b = m;
  for (c=1,a=m;arr[a]!= '\0';a++,b++)
  {
     o_arr[b] = arr[a]; 
     c++;
     if (c > 3 && arr[a+1] != '\0')
     {
       o_arr[++b] = ','; c = 1;
     }
   }
   o_arr[b] = '\0';
  }
  else
      strcpy(o_arr,arr);
   sprintf(str,"%s.%s",o_arr,l_str1);
}
*/


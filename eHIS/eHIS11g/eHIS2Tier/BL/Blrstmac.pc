/************************************************************************/
/* OCS MEDICOM VER 1.10.01                                              */
/************************************************************************/
/* PROGRAM NAME          : BLRSTMAC.PC                                  */
/* DATE WRITTEN          : 15-JUN-1993                                  */ 
/* Date Modified         : 15/04/1997                                   */
/* CALLED FROM           : BLRSTMAC (FORM)                              */
/*                                                                      */
/* FUNCTION              :                                              */    
/*                                                                          */
/*                                                                      */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        BL_DCP_PENDING_DOC         Query                   */
/*         2.        MP_PATIENT_MAST            Lookup                  */
/*         3.        BL_PATIENT_FIN_DTLS        Lookup                  */
/*         4.        BL_DCP_TRN                 Query                   */
/*         5.        SY_PROG_PARAM              Query/Delete            */
/*                                                                      */
/*  PARAMETERS                                                          */
/*    REPORT_ORDER - 1 PATIENT ID                                       */
/*                   2 ENGLISH NAME (LAST, FIRST, SECOND)               */
/*                   3 LOCAL LANG. NAME (LAST, FIRST, SECOND)           */
/*    AGEING CUTOFF DT                                                  */
/*    FROM PATIENT_ID            |  RANGE OF ROWS TO BE SELECTED.       */
/*    TO   PATIENT_ID            |                                      */
/*    SHOW ASSOCIATED TRNS   Y - ASSOCIATED TRNS WILL BE PRINTED        */
/*                           N - ASSOCIATED TRNS WILL NOT BE PRINTED    */
/*    PRINT ZERO BAL DOCS    Y - ALL DOCS ARE PRINTED                   */
/*                           N - ZERO BAL DOCS ARE NOT PRINTED          */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/************************************************************************/
 
#include <stdio.h>
#include <string.h>     
#include "bl.h"      
    
#define OERROR (sqlca.sqlcode < 0)

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
// #define INIT_MESG "Report Generation In Progress"

/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd                      [132],
	   hosp_name                    [120],
	   date_time                    [20],
	   user_id                      [20],
	   nd_session_id                [16],
	   nd_pgm_date                  [35],
	   nd_pat_details               [3];

   VARCHAR nd_order                     [2],
	   nd_facility_id  [3],
	   nd_fm_patient_id             [21],
	   nd_to_patient_id             [21],
	   nd_associated_trn_flag       [2],
	   nd_print_zero_bal_doc_flag   [2],                    
	   nd_nature_from                               [5],
	   nd_nature_to                                 [5],
	   nd_ref_from                                  [11],
	   nd_ref_to                                    [11],
	   nd_cutoff_date                               [11];
	   

   VARCHAR bldcp_pend_doc_type_code     [7],
	   bldcp_pend_doc_num           [9],
	   bldcp_pend_doc_date          [12],
	   bldcp_pend_due_date          [12],
	   bldcp_pend_pat_doc_ref       [16],
	   bldcp_pend_patient_id        [21],
	   bldcp_pend_narration         [51],    
	   bldcp_pend_nature_code       [5],
	   bldcp_pend_trx_short_desc    [4],
         d_short_name_full            [61],
	   mp_pat_short_name            [61],
	   mp_pat_short_name1           [61],
	   mp_pat_short_name_loc_lang   [61];

   int     bldcp_pend_amt_sign,bldcp_pend_age_days;

   double  bldcp_pend_doc_amt,
	   bldcp_pend_doc_outst_amt;

   VARCHAR patfndt_black_listed_yn      [2],
	   patfndt_fin_remarks          [41];

   VARCHAR bldcp_trn_doc_type_code      [7],
	   bldcp_trn_doc_num            [9],
	   bldcp_trn_doc_date           [12],
	   bldcp_trn_pat_doc_ref        [16],
	   bldcp_trn_trx_short_desc     [4];

   double  bldcp_trn_doc_amt;

   char    sql_stmt                     [2000];      
   char    string_var                                   [70];  
   char    out_str[30],
		   out_str1[30],
		   g_facility_id[3]; 

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

double nd_open_credit,
       pat_d_open_credit,
       pat_d_tot_bal,
       rep_d_open_credit,
       rep_d_tot_bal;

char old_patient_id     [21];
char filename[150];

FILE *fp;
int lctr = 0,pctr =0, pend_doc_ctr = 0;
long pat_pend_doc_ctr, pat_ctr, assoc_trn_ctr;

void proc_main(argc,argv)
char *argv[];
int argc;
{
   if (argc < 5)
   {
      list_args(argc, argv);
      proc_exit();
   }

   strcpy(g_pgm_id,"BLRSTMAC");

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle\n");
      if (uid_pwd.len == 0)
	 disp_message(ERR_MESG,"Null oracle uid/pwd\n\n\n");
      proc_exit();
   }

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);
   set_meduser_role();
   fetch_param();
   start_prog_msg();
   fetch_desc();
   open_files();
   declare_cursors();
   old_patient_id[0] = '\0'; pend_doc_ctr     = 0;
   pat_ctr           =    0; pat_pend_doc_ctr = 0;


   while(fetch_pending_doc())
   {
      get_other_details(); 
      get_outst_details();
      pend_doc_ctr++;
      if (strcmp(old_patient_id,bldcp_pend_patient_id.arr))
      {
	      pat_ctr++;
	      if (strlen(old_patient_id))
		   print_pat_footer();
	      print_pat_det();
	      strcpy(old_patient_id,bldcp_pend_patient_id.arr);
      }
      process_det();
      print_pend_doc();
      if (nd_associated_trn_flag.arr[0]=='Y')
      {
	 assoc_trn_ctr = 0;
	 open_trn();
	 while (fetch_trn())
	 {
	    assoc_trn_ctr ++;
	    print_trn();
	 }
	 if (assoc_trn_ctr > 0)
	    print_trn_footer();
      }
   }
   if (pend_doc_ctr > 0)
       print_pat_footer();
   print_report_footer();
   print_end();
   end_prog_msg();
   EXEC SQL COMMIT WORK RELEASE;
}

/***************** Database Access & Updation Functions ***********************/
fetch_desc()
{
   hosp_name.arr[0]      = '\0';
   date_time.arr[0]      = '\0';
   user_id.arr[0]        = '\0';

   hosp_name.len      = 0;
   date_time.len      = 0;
   user_id.len        = 0;

  
   

   EXEC SQL SELECT ACCOUNTING_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
		   USER
	       INTO :hosp_name, :date_time, :user_id
	       FROM SY_ACC_ENTITY
   		   where ACC_ENTITY_ID = :nd_facility_id;
		   //and language_id =:p_language_id;

   if (OERROR)
	 err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]           = '\0';
   date_time.arr[date_time.len]           = '\0';
   user_id.arr[user_id.len]               = '\0';

}

fetch_param()
{
   nd_fm_patient_id.arr[0]       = '\0';
   nd_to_patient_id.arr[0]       = '\0';
   nd_order.arr[0]               = '\0'; 
   nd_nature_from.arr[0]                 = '\0';  
   nd_nature_to.arr[0]                   = '\0';
   nd_ref_from.arr[0]                    = '\0';
   nd_ref_to.arr[0]                              = '\0';
   nd_cutoff_date.arr[0]                 = '\0';
   nd_facility_id.arr[0]  = '\0';
  

   nd_fm_patient_id.len          = 0;
   nd_to_patient_id.len          = 0;
   nd_order.len                  = 0;
   nd_nature_from.len                    = 0;
   nd_nature_to.len                          = 0;
   nd_ref_from.len                               = 0;
   nd_ref_to.len                                 = 0;
   nd_cutoff_date.len                    = 0;
   nd_facility_id.len  = 0;



   EXEC SQL SELECT OPERATING_FACILITY_ID,PARAM1,PARAM2,PARAM3, PARAM4, PARAM5,
				   PARAM6,PARAM7,PARAM8,PARAM9,PARAM10
	      INTO :nd_facility_id,:nd_order,
		   :nd_fm_patient_id,
		   :nd_to_patient_id,
		   :nd_associated_trn_flag,
		   :nd_print_zero_bal_doc_flag,
		   :nd_nature_from,
		   :nd_nature_to,
		   :nd_ref_from,
		   :nd_ref_to,
		   :nd_cutoff_date
	      FROM SY_PROG_PARAM
	     WHERE PGM_ID     = 'BLRSTMAC'
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_order.arr[nd_order.len]                                     = '\0';
   nd_fm_patient_id.arr[nd_fm_patient_id.len]                     = '\0';
   nd_to_patient_id.arr[nd_to_patient_id.len]                     = '\0';
   nd_associated_trn_flag.arr[nd_associated_trn_flag.len]         = '\0';
   nd_print_zero_bal_doc_flag.arr[nd_print_zero_bal_doc_flag.len] = '\0';
   nd_nature_from.arr[nd_nature_from.len]                                                 = '\0';
   nd_nature_to.arr[nd_nature_to.len]                                                     = '\0';
   nd_ref_from.arr[nd_ref_from.len]                                                               = '\0';
   nd_ref_to.arr[nd_ref_to.len]                                                                   = '\0';
   nd_cutoff_date.arr[nd_cutoff_date.len]                                                 = '\0';
   

}

delete_param()
{
    EXEC SQL DELETE FROM SY_PROG_PARAM
		   WHERE PGM_ID     = 'BLRSTMAC'
		     AND SESSION_ID = :nd_session_id
		     AND PGM_DATE   = :nd_pgm_date;

    if (OERROR)
	 err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

}

declare_cursors()
{
      strcpy(sql_stmt,"SELECT A.PATIENT_ID, ORG_DOC_TYPE_CODE, \
   ORG_DOC_NUMBER, TO_CHAR(ORG_DOC_DATE,'DD/MM/YYYY'), \
   TO_CHAR(DUE_DATE,'DD/MM/YYYY'), \
   DECODE(TRX_TYPE_CODE,'1','INV','2','DN','3','CR','4','ADJ', \
   '5','REC','6','PAY'), \
   CEIL(NVL(TO_DATE(:nd_cutoff_date,'DD/MM/YYYY'),trunc(SYSDATE)) - trunc(ORG_DOC_DATE)), \
   SIGN(NVL(DOC_OUTST_AMT,0)),DOC_AMT,DOC_OUTST_AMT,PAT_DOC_REFERENCE, \
   NARRATION,DOC_NATURE_CODE,/*substr(B.SHORT_NAME,1,30), substr(B.SHORT_NAME,31,60),*/ B.SHORT_NAME_LOC_LANG ,b.short_name\
   FROM BL_DCP_PENDING_DOC A,MP_PATIENT_MAST B \
   WHERE A.operating_facility_id = :nd_facility_id AND \
   A.PATIENT_ID BETWEEN NVL(:nd_fm_patient_id, \
   '        ') AND NVL(:nd_to_patient_id,'~~~~~~~~~~~~~~~~') \
   AND (Nvl(A.DOC_NATURE_CODE,'!!!!') BETWEEN NVL(:nd_nature_from,'    ') AND NVL(:nd_nature_to,'~~~~') ");

      if (strlen(nd_nature_from.arr) == 0 || strlen(nd_nature_to.arr) == 0) 
       strcat(sql_stmt,"  OR A.DOC_NATURE_CODE IS NULL) ");
      else
       strcat(sql_stmt," )");  
   
   strcat(sql_stmt,"  AND (A.PAT_DOC_REFERENCE BETWEEN NVL(:nd_ref_from,'          ') AND NVL(:nd_ref_to,'~~~~~~~~~~') ");

      if (strlen(nd_ref_from.arr) == 0 || strlen(nd_ref_to.arr) == 0) 
       strcat(sql_stmt,"  OR A.PAT_DOC_REFERENCE IS NULL) ");
      else
       strcat(sql_stmt," )");  
  
   
   strcat(sql_stmt,"  AND A.PATIENT_ID = B.PATIENT_ID \
   AND trunc(ORG_DOC_DATE) <= TRUNC(TO_DATE(:nd_cutoff_date,'DD/MM/YYYY')) ");
   
   if (nd_print_zero_bal_doc_flag.arr[0]=='N')
      strcat(sql_stmt, " AND DOC_OUTST_AMT != 0 ");

   switch (nd_order.arr[0]) {
   case '1' :
     strcat(sql_stmt,"ORDER BY A.PATIENT_ID,ORG_DOC_TYPE_CODE,ORG_DOC_NUMBER ");
     break;
   case '2' :
     strcat(sql_stmt,"ORDER BY SHORT_NAME, \
	     ORG_DOC_TYPE_CODE, ORG_DOC_NUMBER ");
     break;
   case '3' :
     strcat(sql_stmt,"ORDER BY SHORT_NAME_LOC_LANG, \
	     ORG_DOC_TYPE_CODE, ORG_DOC_NUMBER ");
     break;

   }    

		      
   EXEC SQL PREPARE S FROM :sql_stmt;

   EXEC SQL DECLARE BL_DCP_PENDING_DOC_CUR CURSOR FOR S;
   EXEC SQL OPEN BL_DCP_PENDING_DOC_CUR USING :nd_cutoff_date,
											  :nd_facility_id,		
											  :nd_fm_patient_id,
					      :nd_to_patient_id,  
					      :nd_nature_from,
					      :nd_nature_to,
					      :nd_ref_from,
					      :nd_ref_to ;
					     
   if (OERROR)
      err_mesg("OPEN FAILED ON CURSOR BL_DCL_PENDING_DOC_CUR",0,"");

   EXEC SQL DECLARE BL_PATIENT_FIN_DTLS_CUR CURSOR FOR 
   SELECT BLACK_LISTED_YN, FINANCIAL_REMARKS
   FROM   BL_PATIENT_FIN_DTLS
   WHERE  PATIENT_ID = :bldcp_pend_patient_id;

   EXEC SQL DECLARE BL_DCP_TRN_CUR CURSOR FOR
   SELECT DOC_TYPE_CODE, DOC_NUMBER, TO_CHAR(DOC_DATE, 'DD/MM/YYYY'),
	  DECODE(TRX_TYPE_CODE,'1','INV','2','DN','3','CR','4','ADJ', 
			       '5','REC','6','PAY'),
	  DOC_AMT, PAT_DOC_REFERENCE
   FROM   BL_DCP_TRN
   WHERE  operating_facility_id = :nd_facility_id AND
   PATIENT_ID = :bldcp_pend_patient_id
   AND    ORG_DOC_TYPE_CODE = :bldcp_pend_doc_type_code
   AND    ORG_DOC_NUMBER    = :bldcp_pend_doc_num
   AND    trunc(DOC_DATE) <= TO_DATE(:nd_cutoff_date,'DD/MM/YYYY')
   AND    (ORG_DOC_TYPE_CODE != DOC_TYPE_CODE
   AND ORG_DOC_NUMBER != DOC_NUMBER)
   ORDER BY trunc(DOC_DATE);     
   
   
   /* Cursor for Exact Outstanding from bl_dcp_trn table */
   
   EXEC SQL DECLARE BL_DCP_TRN_CUR1 CURSOR FOR
   SELECT SUM(DOC_AMT) FROM BL_DCP_TRN
   WHERE operating_facility_id = :nd_facility_id AND
   PATIENT_ID = :bldcp_pend_patient_id AND
   ORG_DOC_NUMBER = :bldcp_pend_doc_num AND  
   ORG_DOC_TYPE_CODE = :bldcp_pend_doc_type_code AND   
   trunc(DOC_DATE) <= TRUNC(to_date(:nd_cutoff_date,'DD/MM/YYYY')) ;
}

int fetch_pending_doc()
{
  bldcp_pend_patient_id.arr[0]          = '\0';
  bldcp_pend_doc_type_code.arr[0]       = '\0';
  bldcp_pend_doc_num.arr[0]             = '\0';
  bldcp_pend_doc_date.arr[0]            = '\0';
  bldcp_pend_due_date.arr[0]            = '\0';
  bldcp_pend_trx_short_desc.arr[0]      = '\0'; 
  bldcp_pend_pat_doc_ref.arr[0]         = '\0';
  bldcp_pend_narration.arr[0]           = '\0';
  bldcp_pend_nature_code.arr[0]                 = '\0';
  mp_pat_short_name.arr[0]              = '\0'; 
  mp_pat_short_name1.arr[0]              = '\0'; 
  mp_pat_short_name_loc_lang.arr[0]     = '\0';

  bldcp_pend_patient_id.len             = 0;
  bldcp_pend_doc_type_code.len          = 0;
  bldcp_pend_doc_num.len                = 0;
  bldcp_pend_doc_date.len               = 0;
  bldcp_pend_due_date.len               = 0;
  bldcp_pend_trx_short_desc.len         = 0;
  bldcp_pend_pat_doc_ref.len            = 0;
  bldcp_pend_narration.len              = 0;   
  bldcp_pend_nature_code.len                    = 0;
  mp_pat_short_name.len                 = 0;
  mp_pat_short_name1.len                 = 0;
  mp_pat_short_name_loc_lang.len        = 0;

  bldcp_pend_amt_sign                   = 0;
  bldcp_pend_age_days                                   = 0;
  bldcp_pend_doc_amt                    = 0;
  bldcp_pend_doc_outst_amt              = 0;    
  

      EXEC SQL FETCH BL_DCP_PENDING_DOC_CUR
	       INTO  :bldcp_pend_patient_id,
		     :bldcp_pend_doc_type_code,
		     :bldcp_pend_doc_num,
		     :bldcp_pend_doc_date,
		     :bldcp_pend_due_date,
		     :bldcp_pend_trx_short_desc, 
		     :bldcp_pend_age_days,
		     :bldcp_pend_amt_sign,
		     :bldcp_pend_doc_amt,
		     :bldcp_pend_doc_outst_amt,
		     :bldcp_pend_pat_doc_ref,
		     :bldcp_pend_narration, 
		     :bldcp_pend_nature_code,
		     //:mp_pat_short_name,
			 //:mp_pat_short_name1,
		     :mp_pat_short_name_loc_lang,
                 :d_short_name_full;

  if (LAST_ROW)
      return(0);
  else if (OERROR)
	    err_mesg("FETCH failed on cursor BL_DCP_PENDING_DOC_CUR",0,"");


  bldcp_pend_patient_id.arr[bldcp_pend_patient_id.len]                   = '\0';
  bldcp_pend_doc_type_code.arr[bldcp_pend_doc_type_code.len]             = '\0';
  bldcp_pend_doc_num.arr[bldcp_pend_doc_num.len]                         = '\0';
  bldcp_pend_doc_date.arr[bldcp_pend_doc_date.len]                       = '\0';
  bldcp_pend_due_date.arr[bldcp_pend_due_date.len]                       = '\0';
  bldcp_pend_trx_short_desc.arr[bldcp_pend_trx_short_desc.len]           = '\0';
  bldcp_pend_pat_doc_ref.arr[bldcp_pend_pat_doc_ref.len]                 = '\0';
  bldcp_pend_narration.arr[bldcp_pend_narration.len]                     = '\0';
  bldcp_pend_nature_code.arr[bldcp_pend_nature_code.len]                                 = '\0';
  mp_pat_short_name.arr[mp_pat_short_name.len]                           = '\0';
  mp_pat_short_name1.arr[mp_pat_short_name1.len]                           = '\0';
  mp_pat_short_name_loc_lang.arr[mp_pat_short_name_loc_lang.len]         = '\0';
  d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
    EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
     str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :mp_pat_short_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :mp_pat_short_name1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :mp_pat_short_name1    := :mp_pat_short_name1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       mp_pat_short_name.arr[mp_pat_short_name.len]  = '\0';
       mp_pat_short_name1.arr[mp_pat_short_name1.len]  = '\0';


      return(1);
}

open_trn()
{
   EXEC SQL OPEN BL_DCP_TRN_CUR;
   
   if(OERROR) 
     err_mesg("OPEN failed on cursor BL_DCP_TRN_CUR",0,"");
}

fetch_trn()
{
   bldcp_trn_doc_type_code.arr[0]       = '\0';
   bldcp_trn_doc_num.arr[0]             = '\0';
   bldcp_trn_doc_date.arr[0]            = '\0';
   bldcp_trn_trx_short_desc.arr[0]      = '\0';
   bldcp_trn_pat_doc_ref.arr[0]         = '\0';
 
   bldcp_trn_doc_type_code.len          = 0;
   bldcp_trn_doc_num.len                = 0;
   bldcp_trn_doc_date.len               = 0;
   bldcp_trn_trx_short_desc.len         = 0;
   bldcp_trn_pat_doc_ref.len            = 0;
 
   bldcp_trn_doc_amt                    = 0;

   EXEC SQL FETCH BL_DCP_TRN_CUR INTO :bldcp_trn_doc_type_code,
				      :bldcp_trn_doc_num, 
				      :bldcp_trn_doc_date, 
				      :bldcp_trn_trx_short_desc,
				      :bldcp_trn_doc_amt,
				      :bldcp_trn_pat_doc_ref;
					  
   if (OERROR)
      err_mesg("FETCH failed on cursor BL_DCP_TRN_CUR",0,"");

  bldcp_trn_doc_type_code.arr[bldcp_trn_doc_type_code.len]             = '\0';
  bldcp_trn_doc_num.arr[bldcp_trn_doc_num.len]                         = '\0';
  bldcp_trn_doc_date.arr[bldcp_trn_doc_date.len]                       = '\0';
  bldcp_trn_trx_short_desc.arr[bldcp_trn_trx_short_desc.len]           = '\0';
  bldcp_trn_pat_doc_ref.arr[bldcp_trn_pat_doc_ref.len]                 = '\0';

  if (LAST_ROW)
      return(0);
  else
      return(1);
}

get_other_details()
{
   patfndt_black_listed_yn.arr[0] = '\0';
   patfndt_fin_remarks.arr[0]     = '\0';
   
   patfndt_black_listed_yn.len    = 0;
   patfndt_fin_remarks.len        = 0;


   EXEC SQL OPEN BL_PATIENT_FIN_DTLS_CUR;
   
   if (OERROR)
      err_mesg("OPEN failed on cursor BL_PATIENT_FIN_DTLS",0,"");

   EXEC SQL FETCH BL_PATIENT_FIN_DTLS_CUR INTO :patfndt_black_listed_yn,
					       :patfndt_fin_remarks;
						   
   
   if (OERROR)
      err_mesg("FETCH failed on cursor BL_PATIENT_FIN_DTLS",0,"");

   patfndt_black_listed_yn.arr[patfndt_black_listed_yn.len] = '\0';
   patfndt_fin_remarks.arr[patfndt_fin_remarks.len]         = '\0';
}


/* This function will find out the exact outstanding
   as of that cut-off date  for the age */   

get_outst_details()
{    
   bldcp_pend_doc_outst_amt = 0;                               

   EXEC SQL OPEN BL_DCP_TRN_CUR1;
   
   if (OERROR)
      err_mesg("OPEN failed on cursor BL_DCP_TRN_CUR1",0,"");

   EXEC SQL FETCH BL_DCP_TRN_CUR1 INTO :bldcp_pend_doc_outst_amt ;
   
      
   if (OERROR)
      err_mesg("FETCH failed on cursor BL_DCP_TRN_CUR1",0,"");

 /*  bldcp_pend_doc_outst_amt =   bldcp_pend_doc_amt + bldcp_pend_doc_outst_amt;  */
    
   if (bldcp_pend_doc_outst_amt < 0)
		  bldcp_pend_amt_sign = -1 ;
   else if (bldcp_pend_doc_outst_amt == 0)
		  bldcp_pend_amt_sign = 0;
   else
		  bldcp_pend_amt_sign = 1; 
} 


process_det()
{
    nd_open_credit             = 0;
    if (bldcp_pend_amt_sign == -1)
    {
	   nd_open_credit     = bldcp_pend_doc_outst_amt;
	   pat_d_open_credit += bldcp_pend_doc_outst_amt;
    }
    pat_d_tot_bal += bldcp_pend_doc_outst_amt;
}

/*********************** File Handling & Printing Functions *******************/
open_files()
{

	strcpy(filename,WORKING_DIR);
    strcat(filename,"blrstmac.lis");


 // char *file_name = "blrstmac.lis", err_stmt[70];

   if ((fp = fopen(filename,"w")) == NULL)
   {
	// sprintf(err_stmt,"Error while opening File %s",file_name);
//	sprintf(string_var,"Error while opening File %s",filename);
	// err_mesg(err_stmt,0,"");
	disp_message(ERR_MESG,"Error while opening File");
	proc_exit();
   }

   print_title();
   print_head();

}

print_title()
{
  fprintf(fp, "\n\nMDL : BL %39s %-30s %34s  %-15s\n",
      " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-10s                 %s\n",
     user_id.arr, "STATEMENT OF ACCOUNTS REPORT (DEFERRED CASH PATIENTS ONLY)");
  fprintf(fp, "REP : %-8s %35s  %-28s %39s PAGE : %4d\n", g_pgm_id, " ", 
    nd_associated_trn_flag.arr[0]=='Y'?" (WITH ASSOCIATED TRXS)"
				      :"(WITHOUT ASSOCIATED TRXS)","", ++pctr);
  fprintf(fp, "%s%s%s\n",
	    "--------------------------------------------------------",
	    "--------------------------------------------------------",
	    "--------------------");
  fprintf(fp,"VER : 1.10.01\n");
  fflush(fp);

  fprintf(fp,"\n\n\n\n        INPUT PARAMETERS \n        ----------------\n\n");
  fprintf(fp," %14s FACILITY ID         : %s\n\n"," ", nd_facility_id.arr);
  fprintf(fp," %14s REPORT ORDER        : %s\n\n"," ", nd_order.arr);
  if ((strcmp(nd_fm_patient_id.arr,"") == 0) && (strcmp(nd_to_patient_id.arr,"") == 0))
  {
	fprintf(fp," %14s PATIENT ID FROM     : %-10s\n"," ", "LOWEST");              
	fprintf(fp," %14s            TO       : %-10s\n\n"," ","HIGHEST");            
  }
  else
  {     
	fprintf(fp," %14s            FROM     : %-20s\n"," ",nd_fm_patient_id.arr); 
	fprintf(fp," %14s            TO       : %-20s\n\n"," ",nd_to_patient_id.arr); 
  } 
									   
  if ((strcmp(nd_nature_from.arr,"") == 0) && (strcmp(nd_nature_to.arr,"") == 0))
  {
    fprintf(fp," %14s DOC NATURE    FROM  : %-10s\n"," ","LOWEST");     
    fprintf(fp," %14s               TO    : %-10s\n\n"," ","HIGHEST"); 
  }
  else
  {
    fprintf(fp," %14s DOC NATURE    FROM  : %-4s\n"," ",nd_nature_from.arr);     
    fprintf(fp," %14s               TO    : %-4s\n\n"," ",nd_nature_to.arr); 
  }                                                                

  if ((strcmp(nd_ref_from.arr,"") == 0) && (strcmp(nd_ref_to.arr,"") == 0))
  {
    fprintf(fp," %14s DOC REFERENCE FROM  : %-10s\n"," ","LOWEST");     
    fprintf(fp," %14s               TO    : %-10s\n\n"," ","HIGHEST");     
  }
  else
  {
    fprintf(fp," %14s DOC REFERENCE FROM  : %-10s\n"," ",nd_ref_from.arr);     
    fprintf(fp," %14s               TO    : %-10s\n\n"," ",nd_ref_to.arr);
  }
  
  fprintf(fp," %14s CUT-OFF DATE        : %s\n\n"," ",nd_cutoff_date.arr);
  fprintf(fp," %14s SHOW ASSOCIATED\n","");
  fprintf(fp," %14s    TRANSACTIONS     : %s\n\n","",
						   nd_associated_trn_flag.arr);
  fprintf(fp," %14s PRINT ZERO BAL\n","");
  fprintf(fp,"  %14s     DOCUMENTS      : %s\n","",
						nd_print_zero_bal_doc_flag.arr);

  fflush(fp);
}

print_head()
{
  fprintf(fp, "\f\n\nMDL : BL %39s %-30s %35s %-15s\n",
      " ", hosp_name.arr," ", date_time.arr);
  fprintf(fp, "OPR : %-10s                 %s\n",
     user_id.arr, "STATEMENT OF ACCOUNTS REPORT (DEFERRED CASH PATIENTS ONLY)");
  fprintf(fp, "REP : %-8s %35s  %-28s %39s PAGE : %4d\n", g_pgm_id, " ",
    nd_associated_trn_flag.arr[0]=='Y'?" (WITH ASSOCIATED TRXS)"
				      :"(WITHOUT ASSOCIATED TRXS)","", ++pctr);
    fprintf(fp, "%s%s%s\n",
	    "--------------------------------------------------------",
	    "--------------------------------------------------------",
	    "--------------------");
     fprintf(fp, "DOC TYPE/NUMBER  DOC TYPE/NUMBER  DOC DATE    DUE DATE    ");
     fprintf(fp, "TRX TYPE  REFERENCE        DOC AMOUNT     ADJUSTMENTS");
     fprintf(fp, "    OUTST AMOUNT\n");

    fprintf(fp, "%s%s%s\n",
	    "--------------------------------------------------------",
	    "--------------------------------------------------------",
	    "--------------------");
    fflush(fp);
    lctr = 8;
}

print_end()
{
  fprintf(fp, "\n\n\n %52s **   END  OF  REPORT   ** \n\n", " ");
  fflush(fp);
  fclose(fp);
}

print_pat_det()
{
  if (lctr > 56) print_head();

  fprintf(fp,"PATIENT NO : %-20s %-16.16s %-30.30s %1.1s %-40.40s\n",
	       bldcp_pend_patient_id.arr,mp_pat_short_name_loc_lang.arr,
	       mp_pat_short_name.arr, patfndt_black_listed_yn.arr,
	       patfndt_fin_remarks.arr);
   
   if(strlen(mp_pat_short_name1.arr) > 2)
	{
	fprintf(fp,"%51s %s \n"," ",mp_pat_short_name1.arr);
	lctr++;
	}
  
  fprintf(fp,"Cut-Off Date  : %12s \n\n",nd_cutoff_date.arr);                           
  lctr += 2;
}

print_pat_footer()
{
     if (lctr > 55 - 4) print_head();
     fprintf(fp, "%s%s%s\n",
	    "--------------------------------------------------------",
	    "--------------------------------------------------------",
	    "--------------------");
     fprintf(fp, "NUMBER OF OUTSTANDING DOCUMENTS : %6ld\n", pat_pend_doc_ctr);
     fprintf(fp, "TOTAL OUTSTANDING FOR THE PATIENT : ");
     print_formated(pat_d_tot_bal); fprintf(fp,"\n\n");
     lctr += 4;

     rep_d_open_credit     += pat_d_open_credit;
     rep_d_tot_bal         += pat_d_tot_bal;

     pat_d_open_credit     = 0;
     pat_d_tot_bal         = 0;

     pat_pend_doc_ctr = 0;
}

print_report_footer()
{
  if (lctr > 55 - 4) print_head();

  fprintf(fp, "%s%s%s\n",
	    "--------------------------------------------------------",
	    "--------------------------------------------------------",
	    "--------------------");
  fprintf(fp, "NUMBER OF PATIENTS : %6ld\n", pat_ctr);
  fprintf(fp, "TOTAL OUTSTANDING: ");
  print_formated(rep_d_tot_bal);   fprintf(fp,"\n");
  lctr += 4;
}

print_pend_doc()
{
   
   strcpy(out_str,"");
   strcpy(out_str1,"");

   pat_pend_doc_ctr++;


   if (lctr > 55 - 1) print_head();
   fprintf(fp,"%-6s %8s  %15s  %-10s  %-10s  %-3.3s       %-10s   ", 
	      bldcp_pend_doc_type_code.arr, bldcp_pend_doc_num.arr,"",
	      bldcp_pend_doc_date.arr, bldcp_pend_due_date.arr,
	      bldcp_pend_trx_short_desc.arr,
	      bldcp_pend_pat_doc_ref.arr);

   print_formated(bldcp_pend_doc_amt);  fprintf(fp," ");
   print_formated(bldcp_pend_doc_outst_amt-bldcp_pend_doc_amt); fprintf(fp," ");
   print_formated(bldcp_pend_doc_outst_amt);  fprintf(fp,"\n");

   lctr ++;

   if(strlen(bldcp_pend_narration.arr)) {
       if (lctr > 55 - 1) print_head();
       fprintf(fp,"REMARK : %s    \n", bldcp_pend_narration.arr);
       lctr ++;
   }

   fflush(fp);

   if (lctr > 55 - 1) print_head();
   if (nd_associated_trn_flag.arr[0]=='Y') 
   {
       fprintf(fp, "\n"); fflush(fp); lctr ++;
   }
}

print_trn()
{
   
   strcpy(out_str,"");
   strcpy(out_str1,"");

   assoc_trn_ctr++;

   if (lctr > 55 - 1) print_head();

   fprintf(fp,"%15s  %-6s %8s  %-10s  %-10s  %-3.3s       %-10s   ", 
	      "", bldcp_trn_doc_type_code.arr, bldcp_trn_doc_num.arr,
	      bldcp_trn_doc_date.arr, "",
	      bldcp_trn_trx_short_desc.arr,
	      bldcp_trn_pat_doc_ref.arr);

   print_formated(bldcp_trn_doc_amt);  fprintf(fp,"\n");

   fflush(fp);
   lctr ++;
}

print_trn_footer()
{
   fprintf(fp,"\n"); lctr++;
   fflush(fp);
}

/************************** General Purpose Functions *************************/
sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

print_formated(loc_amount)
double loc_amount;
{
     
   
   strcpy(out_str,"");
   strcpy(out_str1,"");

   if (loc_amount == 0)
      fprintf(fp,"%14s ","0.00");
   else if (loc_amount > 0)
   {
      sprintf(out_str,"%11.2f",loc_amount);
      ltrim(out_str);format_amt(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%11.2f",-loc_amount);
      ltrim(out_str);format_amt(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}

ltrim(l_str)
char *l_str;
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}

/* This function is now included in err_mesg 
put_comma(str)
char *str;
{
  int i,l,m,a,b,c;
  float j,k;
  char arr[120],o_arr[120],l_str1[10];
  strcpy(arr,str);
  strncpy(l_str1,arr + (strlen(arr) - 2),2);
  l_str1[2] = '\0';
  arr[strlen(str)-3] = '\0';
  i = strlen(arr);
  j = i;
  k = j/3;
  l = k;
  m = i - (l*3);
  if (i > 3)
  {
      for (a=0;a<m;a++)
	 o_arr[a] = arr[a];
   if (m)
   {
     o_arr[m] = ','; b=m+1;
   }
   else b = m;
  for (c=1,a=m;arr[a]!= '\0';a++,b++)
  {
     o_arr[b] = arr[a]; 
     c++;
     if (c > 3 && arr[a+1] != '\0')
     {
       o_arr[++b] = ','; c = 1;
     }
   }
   o_arr[b] = '\0';
  }
  else
      strcpy(o_arr,arr);
   sprintf(str,"%s.%s",o_arr,l_str1);
}
*/

list_args(arg_cnt, arg_list)
int arg_cnt;
char *arg_list[];
{
   int i;

   disp_message(ERR_MESG,"Not enough Parameters for running this program");
}


/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRMISTR.PC                                  */
/* AUTHOR                : ANIL.S.RAM                                   */
/* DATE WRITTEN          : 13-APR-1994                                  */
/*                                                                      */
/* CALLED FROM            :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                        */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*          1.  BL_PATIENT_CHARGES_FOLIO          Input                 */  
/*          2.  MP_PATIENT_MAST                   Input                 */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                 
#include <stdio.h>
#include <string.h>
#include "gl.h"       
#include "bl.h"     

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
/*
#define DEBUG 0
*/
#define ESC 0x1B   

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [40],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
            nd_epi_type                                [2],
            nd_fm_trx_date                             [11],
            nd_to_trx_date                             [11],
            nd_fm_blng_serv                            [11],
            nd_to_blng_serv                            [11],
			d_facility_id							   [10],
			p_language_id							   [3],
			nd_temp_date							   [21],
			date_convert							   [21],
			nd_loc_date								   [21],
			nd_temp_date1							   [21],
			date_convert1							   [21],
			nd_loc_date1							   [21],
			nd_facility_id							   [3],
            d_short_name_full                          [61],
            bl_patient_name_loc_lang                   [61],
            bl_patient_name                            [61],
			nd_episode_type								[30],
			bl_patient_nam1                            [61],

            bl_blng_grp_desc                           [40];


   VARCHAR bl_pat_episode_type                         [2],
           bl_pat_episode_id                           [9],
           bl_pat_visit_id                             [5],
           bl_pat_patient_id                           [21],
           bl_pat_trx_date                             [13],
           bl_pat_trx_doc_ref                          [21],
           bl_pat_trx_doc_ref_line_num                 [5],
           bl_pat_trx_doc_ref_seq_num                  [5],
           bl_pat_service_item_desc                    [41],
           bl_pat_service_grp                          [3],
           bl_pat_service_code                         [11],
           bl_pat_service_date                         [11],
           bl_pat_service_time                         [6],
           bl_pat_service_qty                          [11],
           bl_pat_upd_net_charge_amt                   [23],
           bl_pat_added_by_id                          [21],
		   bl_pat_cur_date                             [12],
           bl_pat_cur_grp                              [3],
		   l_pk_value								   [100],
		   l_translated_value						   [201];

 double    bl_pat_net_charge_amt_db,
           bl_grp_tot_net_charge_amt,
           bl_dat_tot_net_charge_amt,
           bl_grn_tot_net_charge_amt,
		   l_net_charge_amt;

	char loc_legend[999][201];
	int i;	



EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

char       store_concat_visit                          [15],
           store_concat_pkg                            [10];

int    lctr = 0,pctr = 0;
  
FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0, trn_ctr = 0, page_skip = 0;

    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
       exit(0);
    }
 
    strcpy(g_pgm_id,"BLRMISTR");

    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ORA_MESG,"Error in connecting to Oracle\n");
        exit(0);
    }

	set_meduser_role();
	strcpy(p_language_id.arr,l_language_id.arr);
    p_language_id.len = l_language_id.len;



    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    start_prog_msg();
    fetch_prog_param();
	fetch_legend_value();
    declare_cur();
    fetch_hosp_name();
    open_file();
     
    open_cur();
    while(fetch_cur())
    {
       if (rec_ctr == 0)
       {
          strcpy(bl_pat_cur_date.arr,bl_pat_trx_date.arr);
          bl_pat_cur_date.len = strlen(bl_pat_cur_date.arr);

          strcpy(bl_pat_cur_grp.arr,bl_pat_service_grp.arr);
          bl_pat_cur_grp.len = strlen(bl_pat_cur_grp.arr);

          print_rec(0);
       }

       if (strcmp(bl_pat_cur_date.arr,bl_pat_trx_date.arr))
       {
          print_date_tot();

          strcpy(bl_pat_cur_date.arr,bl_pat_trx_date.arr);
          bl_pat_cur_date.len = strlen(bl_pat_cur_date.arr);

          strcpy(bl_pat_cur_grp.arr,bl_pat_service_grp.arr);
          bl_pat_cur_grp.len = strlen(bl_pat_cur_grp.arr);

          print_rec(0);
       }
       else if (strcmp(bl_pat_cur_grp.arr,bl_pat_service_grp.arr))
       {
          print_grp_tot();

          strcpy(bl_pat_cur_grp.arr,bl_pat_service_grp.arr);
          bl_pat_cur_grp.len = strlen(bl_pat_cur_grp.arr);

          print_rec(0);
       }

       rec_ctr++;
       if (lctr+3 > 35) //55
       {
          print_head();
          print_rec(0);
       }
       print_rec(2);
     }
     if (rec_ctr)
	 {
        print_grand_tot();
	 }

    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

    return;
}

fetch_prog_param()
{
    nd_epi_type.arr[0]               = '\0';
    nd_fm_trx_date.arr[0]            = '\0';
    nd_to_trx_date.arr[0]            = '\0';
    nd_fm_blng_serv.arr[0]           = '\0';
    nd_to_blng_serv.arr[0]           = '\0';

    nd_epi_type.len                  = 0;
    nd_fm_blng_serv.len              = 0;
    nd_to_blng_serv.len              = 0;
    nd_fm_trx_date.len               = 0;
    nd_to_trx_date.len               = 0;

   EXEC SQL SELECT PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,
				   operating_facility_id
              INTO :nd_epi_type,
                   :nd_fm_trx_date,
                   :nd_to_trx_date,
                   :nd_fm_blng_serv,
                   :nd_to_blng_serv,
				   :d_facility_id
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

    nd_epi_type.arr[nd_epi_type.len]              = '\0';
    nd_fm_blng_serv.arr[nd_fm_blng_serv.len]      = '\0';
    nd_to_blng_serv.arr[nd_to_blng_serv.len]      = '\0';
    nd_fm_trx_date.arr[nd_fm_trx_date.len]        = '\0';
    nd_to_trx_date.arr[nd_to_trx_date.len]        = '\0';

	d_facility_id.arr[d_facility_id.len]		  = '\0';
	strcpy(g_facility_id, d_facility_id.arr);

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

     EXEC SQL DECLARE BL_PAT_CHG_FOLIO_CUR CURSOR FOR
               SELECT EPISODE_TYPE,
                      LPAD(TO_CHAR(EPISODE_ID),8,'0'),
                      LPAD(TO_CHAR(VISIT_ID),4,'0'),
                      PATIENT_ID,
                      TO_CHAR(TRUNC(TRX_DATE),'DD/MM/YYYY'),
                      TO_CHAR(TRUNC(SERVICE_DATE),'DD/MM/YYYY'),
                      TO_CHAR(SERVICE_DATE,'HH24:MI'),
                      TRX_DOC_REF,
                      LPAD(TO_CHAR(TRX_DOC_REF_LINE_NUM),4,'0'),
                      LPAD(TO_CHAR(TRX_DOC_REF_SEQ_NUM),4,'0'),
                      SUBSTR(A.BLNG_SERV_CODE,1,2),
                      A.BLNG_SERV_CODE,
                      SERV_ITEM_DESC,
                      TO_CHAR(NVL(SERV_QTY,0),'999,990.99'),
                      TO_CHAR(NVL(UPD_NET_CHARGE_AMT,0)),
                      A.ADDED_BY_ID,
                      NVL(UPD_NET_CHARGE_AMT,0) 
                 FROM BL_PATIENT_CHARGES_FOLIO A,BL_BLNG_SERV B
                WHERE A.BLNG_SERV_CODE=B.BLNG_SERV_CODE
				  AND EPISODE_TYPE = NVL(:nd_epi_type,EPISODE_TYPE)
                  AND A.BLNG_SERV_CODE 
				  
                      BETWEEN NVL(:nd_fm_blng_serv,'!!!!!!')  AND
                              NVL(:nd_to_blng_serv,'~~~~~~')
                  AND TRUNC(TRX_DATE)
                       BETWEEN 
                        NVL(TO_DATE(:nd_fm_trx_date,'DD/MM/YYYY'),
                             to_date('00010101','YYYYDDMM'))
                         AND
                        NVL(TO_DATE(:nd_to_trx_date,'DD/MM/YYYY'),
                             to_date('47123112','YYYYDDMM'))
                  AND TRX_FINALIZE_IND = 'Y'
                  AND TRX_STATUS IS NULL 
                  AND PACKAGE_IND = 'S'
				  AND NVL(B.MISC_SERV_YN,'N') = 'Y'
                  //AND DF_SERVICE_IND IN ('M','O')
				  AND NVL(operating_facility_id,'N') = NVL(:d_facility_id,'N')
                ORDER BY TRUNC(TRX_DATE),A.BLNG_SERV_CODE;

    EXEC SQL DECLARE BL_PAT_NAME_CUR CURSOR FOR
              //SELECT SUBSTR(SHORT_NAME_LOC_LANG,1,16),
                    /* substr(SHORT_NAME,1,30),
					 decode(substr(short_name,31,60),NULL,' ',substr(short_name,31,60)) shortname1,
                      */
				//	           short_name
				SELECT 
				  	decode(:p_language_id,'en', substr(short_name,1,30),substr(SHORT_NAME_LOC_LANG,1,30)),
					null
                FROM MP_PATIENT_MAST
               WHERE PATIENT_ID = :bl_pat_patient_id;

    EXEC SQL DECLARE BL_BLNG_GRP_CUR CURSOR FOR
              SELECT SHORT_DESC
                FROM BL_BLNG_SERV_GRP_lang_vw
               WHERE SERV_GRP_CODE = :bl_pat_service_grp
			   AND language_id=:p_language_id;
} 
  
open_cur()   
{
    EXEC SQL OPEN BL_PAT_CHG_FOLIO_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");
}

fetch_cur()
{
bl_pat_episode_type.arr[0]                                        = '\0';
bl_pat_episode_id.arr[0]                                          = '\0';
bl_pat_visit_id.arr[0]                                            = '\0';
bl_pat_patient_id.arr[0]                                          = '\0';
bl_pat_trx_date.arr[0]                                            = '\0';
bl_pat_trx_doc_ref.arr[0]                                         = '\0';
bl_pat_trx_doc_ref_line_num.arr[0]                                = '\0';
bl_pat_trx_doc_ref_seq_num.arr[0]                                 = '\0';
bl_pat_service_item_desc.arr[0]                                   = '\0';
bl_pat_service_grp.arr[0]                                         = '\0';
bl_pat_service_code.arr[0]                                        = '\0';
bl_pat_service_date.arr[0]                                        = '\0';
bl_pat_service_time.arr[0]                                        = '\0';
bl_pat_service_qty.arr[0]                                         = '\0';
bl_pat_upd_net_charge_amt.arr[0]                                  = '\0';
bl_pat_added_by_id.arr[0]                                         = '\0';

bl_pat_episode_type.len                                           = 0;
bl_pat_episode_id.len                                             = 0;
bl_pat_visit_id.len                                               = 0;
bl_pat_patient_id.len                                             = 0;
bl_pat_trx_date.len                                               = 0;
bl_pat_trx_doc_ref.len                                            = 0;
bl_pat_trx_doc_ref_line_num.len                                   = 0;
bl_pat_trx_doc_ref_seq_num.len                                    = 0;
bl_pat_service_item_desc.len                                      = 0;
bl_pat_service_grp.len                                            = 0;
bl_pat_service_date.len                                           = 0;
bl_pat_service_code.len                                           = 0;
bl_pat_service_time.len                                           = 0;
bl_pat_service_qty.len                                            = 0;
bl_pat_upd_net_charge_amt.len                                     = 0;
bl_pat_added_by_id.len                                            = 0;

bl_pat_net_charge_amt_db                                          = 0;

     EXEC SQL FETCH BL_PAT_CHG_FOLIO_CUR
               INTO :bl_pat_episode_type,
                    :bl_pat_episode_id,
                    :bl_pat_visit_id,
                    :bl_pat_patient_id,
                    :bl_pat_trx_date,
                    :bl_pat_service_date,
                    :bl_pat_service_time,
                    :bl_pat_trx_doc_ref,
                    :bl_pat_trx_doc_ref_line_num,
                    :bl_pat_trx_doc_ref_seq_num,
                    :bl_pat_service_grp,
                    :bl_pat_service_code,
                    :bl_pat_service_item_desc,
                    :bl_pat_service_qty,
                    :bl_pat_upd_net_charge_amt,
                    :bl_pat_added_by_id,
                    :bl_pat_net_charge_amt_db;

      if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_CHG_FOLIO_CUR",0,"");

	bl_pat_episode_type.arr[bl_pat_episode_type.len]                         = '\0';
	bl_pat_episode_id.arr[bl_pat_episode_id.len]                             = '\0';
	bl_pat_visit_id.arr[bl_pat_visit_id.len]                                 = '\0';
	bl_pat_patient_id.arr[bl_pat_patient_id.len]                             = '\0';
	bl_pat_trx_date.arr[bl_pat_trx_date.len]                                 = '\0';
	bl_pat_trx_doc_ref.arr[bl_pat_trx_doc_ref.len]                           = '\0';
	bl_pat_trx_doc_ref_line_num.arr[bl_pat_trx_doc_ref_line_num.len]         = '\0';
	bl_pat_trx_doc_ref_seq_num.arr[bl_pat_trx_doc_ref_seq_num.len]           = '\0';
	bl_pat_service_grp.arr[bl_pat_service_grp.len]                           = '\0';
	bl_pat_service_code.arr[bl_pat_service_code.len]                         = '\0';
	bl_pat_service_item_desc.arr[bl_pat_service_item_desc.len]               = '\0';
	bl_pat_service_date.arr[bl_pat_service_date.len]                         = '\0';
	bl_pat_service_time.arr[bl_pat_service_time.len]                         = '\0';
	bl_pat_service_qty.arr[bl_pat_service_qty.len]                           = '\0';
	bl_pat_upd_net_charge_amt.arr[bl_pat_upd_net_charge_amt.len]             = '\0';
	bl_pat_added_by_id.arr[bl_pat_added_by_id.len]                           = '\0';

    return(LAST_ROW?0:1);
}

fetch_grp_desc()
{
   EXEC SQL OPEN BL_BLNG_GRP_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_BLNG_GRP_CUR",0,"");

   bl_blng_grp_desc.arr[0]                    = '\0';

   bl_blng_grp_desc.len                       = 0;

    EXEC SQL FETCH BL_BLNG_GRP_CUR
              INTO :bl_blng_grp_desc;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_BLNG_GRP_CUR",0,"");

    bl_blng_grp_desc.arr[bl_blng_grp_desc.len] = '\0';

}

fetch_dtls()
{
   EXEC SQL OPEN BL_PAT_NAME_CUR;
   if (OERROR)
        err_mesg("OPEN failed on cursor BL_PAT_NAME_CUR",0,"");

   bl_patient_name_loc_lang.arr[0]           = '\0';
   bl_patient_name.arr[0]                    = '\0';
   bl_patient_nam1.arr[0]                    = '\0';

   bl_patient_name_loc_lang.len              = 0;
   bl_patient_name.len                       = 0;
   bl_patient_nam1.len                       = 0;

    EXEC SQL FETCH BL_PAT_NAME_CUR
              INTO :bl_patient_name_loc_lang,
                   /*:bl_patient_name,
				   :bl_patient_nam1,*/
                           :d_short_name_full;

    if (OERROR)
         err_mesg("FETCH failed on cursor BL_PAT_NAME_CUR",0,"");

    bl_patient_name_loc_lang.arr[bl_patient_name_loc_lang.len] = '\0';
    bl_patient_name.arr[bl_patient_name.len] = '\0';
	bl_patient_nam1.arr[bl_patient_nam1.len] = '\0';
    d_short_name_full.arr[d_short_name_full.len]               = '\0';
 
EXEC SQL EXECUTE
 BEGIN
 declare
      str1   varchar2(100);
      str2   varchar2(60);
     
    
   BEGIN
     blcommon.split_words(:d_short_name_full,30,'*',1,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_name   :=str2;
       END IF;
    blcommon.split_words(:d_short_name_full,30,'*',2,str1,str2);
       IF str2 IS NOT NULL THEN
         :bl_patient_nam1  := str2;
      END IF;
    blcommon.split_words(:d_short_name_full,30,'*',3,str1,str2);
        IF str2 IS NOT NULL THEN
         :bl_patient_nam1    := :bl_patient_nam1 || str2;
       end if;

	 
     
 END;
  END;
       
   END-EXEC;
       bl_patient_name.arr[bl_patient_name.len]  = '\0';
       bl_patient_nam1.arr[bl_patient_nam1.len]  = '\0';


}


print_rec(ind)
int ind;
{
  if (ind == 0)
  {
    if (lctr+2 > 35)  //35
       print_head();

    fetch_grp_desc();

	init_date_temp_var();
	strcpy(date_convert1.arr,bl_pat_cur_date.arr);
	fun_change_loc_date1();

    fprintf(fp,"%-12.12s   : %-10s",loc_legend[260],date_convert1.arr);
    fprintf(fp,"        ");
    fprintf(fp,"%17.17s : %-2s",loc_legend[250],bl_pat_cur_grp.arr);
    fprintf(fp,"  %-40.40s\n",bl_blng_grp_desc.arr);
	
	fprintf(fp,"\n");
    lctr+=2;

  }
  else 
  {

     fetch_dtls();

	 fprintf(fp,"  ");
	init_date_temp_var();
	strcpy(date_convert1.arr,bl_pat_service_date.arr);
	fun_change_loc_date1();
	
     fprintf(fp,"%-8s/%-4s %-20s %-10s %-40.40s %-10s %-5s %s ",
                bl_pat_episode_id.arr,
                bl_pat_visit_id.arr,
                bl_pat_patient_id.arr,
                bl_pat_service_code.arr,
                bl_pat_service_item_desc.arr,
                date_convert1.arr,
                bl_pat_service_time.arr,
                bl_pat_service_qty.arr);
                //bl_pat_upd_net_charge_amt.arr);
	
	//Added during HMC customization.

	 print_formated(bl_pat_net_charge_amt_db);
	 fprintf(fp,"\n");

	 //Added during HMC customization.	
//	 bl_patient_name

	 fprintf(fp,"%18s"," ");

     fprintf(fp,"%-30.30s   %-20s/%-4s/%-4s    %-20s\n",
                bl_patient_name_loc_lang.arr,
                bl_pat_trx_doc_ref.arr,
                bl_pat_trx_doc_ref_line_num.arr,
                bl_pat_trx_doc_ref_seq_num.arr,
                bl_pat_added_by_id.arr);

     fprintf(fp,"\n");

	if(strlen(bl_patient_nam1.arr) > 2)
	{
	fprintf(fp,"%-30.30s \n",bl_patient_nam1.arr);
	lctr++;
	}

     lctr+=3;

     bl_grp_tot_net_charge_amt   += bl_pat_net_charge_amt_db;

   }

   fflush(fp);
}

print_grp_tot()
{

    if (lctr+4 > 35) //55
    {
       print_head();
       print_rec(0);
    }

    fprintf(fp,"%118s---------------\n"," ");
    fprintf(fp,"%83s%-27.27s         "," ",loc_legend[240]);
    print_formated(bl_grp_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%118s---------------\n"," ");
    fprintf(fp,"\n");
    lctr +=4;

    bl_dat_tot_net_charge_amt   += bl_grp_tot_net_charge_amt;

    bl_grp_tot_net_charge_amt = 0;

}

print_date_tot()
{
    print_grp_tot();
	

    if (lctr+4 > 35)  //55
    {
       print_head();
       print_rec(0);
    }

    fprintf(fp,"%118s---------------\n"," ");
    fprintf(fp,"%83s%-27.27s         "," ",loc_legend[230]);
    print_formated(bl_dat_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%118s---------------\n"," ");
    fprintf(fp,"\n");
    lctr +=4;

    bl_grn_tot_net_charge_amt   += bl_dat_tot_net_charge_amt;

    bl_dat_tot_net_charge_amt = 0;

}

print_grand_tot()
{
    print_date_tot();

    if (lctr+3 > 35)  //55
    {
       print_head();
       print_rec(0);
    }

    fprintf(fp,"%118s---------------\n"," ");
    fprintf(fp,"%83s%-17.17s                   "," ",loc_legend[190]);
    print_formated(bl_grn_tot_net_charge_amt);
    fprintf(fp,"\n");
    fprintf(fp,"%118s---------------\n"," ");
    lctr +=3;
}

end_of_rep()
{
	fprintf(fp,"\n\n                                                      *** %-18s ***\n",loc_legend[360]);
	fflush(fp);
}

open_file()
{
	char filename[30];
		strcpy(filename,WORKING_DIR);
		strcat(filename,"blrmistr.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file blrmistr.lis");
       proc_exit();
    }
    print_title();
    print_head();
}

print_title()
{
		fprintf(fp,"%c&l1O",ESC); 		// To print in land scape mode
		fprintf(fp,"%c(s14H",ESC); 	/* To set the font size			*/
nd_episode_type.arr[0] ='\0';
nd_episode_type.len=0;
init_date_temp_var();
strcpy(date_convert.arr,date_time.arr);
fun_change_loc_date();
fprintf(fp,
"%-6.6s : %-5.5s                                         %-30s                                       %-18s\n",loc_legend[310],loc_legend[150],
hosp_name.arr,date_convert.arr);
fprintf(fp,"%-6.6s : %-10s \n",loc_legend[320],user_id.arr);
fprintf(fp,
"%-6.6s : %-12.12s                       %-55.55s                     %8.8s :%4d\n",loc_legend[330],
loc_legend[40],loc_legend[50],loc_legend[30],++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"%6.6s : 4.1\n",loc_legend[370]);
fflush(fp);

fprintf(fp,"\n\n\n\n        %-22s :\n        ---------------------\n\n",loc_legend[300]);
EXEC SQL SELECT decode(:nd_epi_type,'I','Inpatient','D','Daycare','E','Emergency','O','Outpatient','R','External')
         into :nd_episode_type from dual;

fprintf(fp,"                  %-17.17s                 : %s\n\n",loc_legend[220],nd_episode_type.arr);
if(nd_fm_trx_date.arr[0] !='\0')
{
init_date_temp_var();
strcpy(date_convert.arr,nd_fm_trx_date.arr);
fun_change_loc_date();
fprintf(fp,"                  %-15.15s        %-10.10s : %s\n",loc_legend[120],loc_legend[60],date_convert.arr);
}
else
fprintf(fp,"                  %-15.15s        %-10.10s : %s\n",loc_legend[120],loc_legend[60],loc_legend[340]);
if(nd_to_trx_date.arr[0] !='\0')
{
init_date_temp_var();
strcpy(date_convert.arr,nd_to_trx_date.arr);
fun_change_loc_date();
fprintf(fp,"                                         %-8.8s   : %s\n\n",loc_legend[70],date_convert.arr);
}
else
fprintf(fp,"                                         %-8.8s   : %s\n\n",loc_legend[70],loc_legend[350]);

if(nd_fm_blng_serv.arr[0] == '\0')
fprintf(fp,"                  %-15.15s        %-10.10s : %-10.10s\n",loc_legend[160],loc_legend[60],loc_legend[340]);
else
fprintf(fp,"                  %-15.15s        %-10.10s : %s\n",loc_legend[160],loc_legend[60],nd_fm_blng_serv.arr);
if(nd_to_blng_serv.arr[0] == '\0')
fprintf(fp,"                                         %-8.8s   : %-12.12s\n\n",loc_legend[70],loc_legend[350]);
else
fprintf(fp,"                                         %-8.8s   : %s\n\n",loc_legend[70],nd_to_blng_serv.arr);
nd_episode_type.arr[nd_episode_type.len]='\0';
}


print_head()
{
init_date_temp_var();
strcpy(date_convert.arr,date_time.arr);
fun_change_loc_date();
fprintf(fp,
"\f%-6.6s : %-5.5s                                         %-30s                                       %-15s\n",loc_legend[310],loc_legend[150],
hosp_name.arr,date_convert.arr);
fprintf(fp,"%-6.6s : %-10s \n",loc_legend[320], user_id.arr);
fprintf(fp,
"%-6.6s : %-12.12s                       %-55.55s                     %8.8s :%4d\n",loc_legend[330],
loc_legend[40],loc_legend[50],loc_legend[30],++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,
"  %-14.14s %-17.17s   %-17.17s&%-33.33s %-18.18s %-11.11s %13.13s\n",loc_legend[80],loc_legend[90],loc_legend[100],loc_legend[110],loc_legend[130],loc_legend[140],loc_legend[170]);
fprintf(fp,
"                  %-30.30s   %-30.30s    %-15.15s \n",loc_legend[180],loc_legend[200],loc_legend[210]);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 7;
}
/*
fprintf(fp,
"  Episode Dtls    Patient No         Blng Serv Code & Serv Item Description             Service Date/Time  Service Qty     Net Charge\n");
fprintf(fp,
"                  Patient Name                     Trx Doc Ref/Line                  Added By \n");*/
fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY_lang_vw
			  WHERE acc_entity_id = :d_facility_id
			  AND language_id =:p_language_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}

/*print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%14s-",out_str1);
   }
} */ //Old commented and added below during HMC customization.

print_formated(l_amt)
double l_amt;
{
	char  s_amt[15];

    if(l_amt < 0)
	{
        put_val(s_amt,-l_amt);
        format_amt(s_amt);
		fprintf(fp,"%14s-",s_amt);
    }
    else 
	{
        put_val(s_amt,l_amt);
        format_amt(s_amt);
		fprintf(fp,"%14s ",s_amt);
    }
}

fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRMISTR.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}





get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
	  
	  :nd_loc_date :=sm_convert_date_2t(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id);
       	//get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date);  
      
	   //:nd_loc_date := to_char(t_date,'DD/MM/YYYY');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';
date_convert1.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
date_convert1.len = 0;
}


fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}



get_local_date1()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date1  date;
	
	BEGIN
	
	  
	  :nd_loc_date1 :=sm_convert_date_2t(to_date(:nd_temp_date1,'DD/MM/YYYY HH24:MI'),:p_language_id);

		//get_locale_date.CONVERT_TO_LOCALE_DATE (to_date(:nd_temp_date1,'DD/MM/YYYY HH24:MI'),:p_language_id,t_date1);  
      
		 //:nd_loc_date1 := to_char(t_date1,'DD-MON-YYYY');

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}


fun_change_loc_date1()
{

strcpy(nd_temp_date1.arr,date_convert1.arr);
nd_temp_date1.len = strlen(nd_temp_date1.arr);


get_local_date1();

strcpy(date_convert1.arr,nd_loc_date1.arr); 

}
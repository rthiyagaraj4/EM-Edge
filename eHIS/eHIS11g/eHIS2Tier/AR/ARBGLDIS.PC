/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : ARBGLDIS.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 11-FEB-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                     */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        AR_INV_HDR                  Query                  */
/*         2.        AR_INV_LINE                 Query                  */
/*         3.        AR_DN_HDR                   Query                  */
/*         4.        AR_DN_INV_HDR               Query                  */
/*         5.        AR_DN_LINE                  Query                  */
/*         6.        AR_CN_HDR                   Query                  */
/*         7.        AR_CN_INV_HDR               Query                  */
/*         8.        AR_CN_LINE                  Query                  */
/*         9.        AR_ADJ_HDR                  Query                  */
/*        10.        AR_ADJ_INV_HDR              Query                  */
/*        11.        AR_ADJ_LINE                 Query                  */
/*        12.        AR_REC_HDR                  Query                  */
/*        13.        AR_REC_LINE                 Query                  */
/*        14.        AR_PAY_HDR                  Query                  */
/*        15.        AR_PAY_LINE                 Query                  */
/*        16.        AR_CASHIER                  Query                  */
/*        17.        SY_PROG_CONTROL           Update/Lookup            */
/*        18.        SY_PROG_MESG                Insert                 */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                      
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include "gl.h"
/*
#define OERROR (sqlca.sqlcode < 0)
*/
#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)

/*
#define DEBUG 0
*/
               
#define VIEW_LOG_FILE 1
EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd[132];

    int audit_option_flag;
    int process_rep_flg  ;

   VARCHAR  nd_facility_id   [3],
		    nd_session_id    [16],
            nd_pgm_date      [25],
            nd_fm_doc_type   [7],
            nd_to_doc_type   [7],
            nd_proc_flag     [2],
            nd_view_print_flg[2],
            nd_rep_type      [3],
            nd_fm_month      [3],
	        nd_fm_year       [5],
            nd_to_month      [3],
	        nd_to_year       [5];

 VARCHAR    d_ar_doc_type_code         [7],
            d_ar_doc_num               [9],
            d_ar_org_doc_type_code     [7],
            d_ar_org_doc_num           [9],
            d_ar_doc_date              [12],
            d_ar_doc_ref               [16],
            d_ar_cust_code             [9],
            d_ar_main_acc1_code        [7],
            d_ar_main_acc2_code        [5],
            d_ar_subledger_group_code  [4],
            d_ar_subledger_line_code   [9],
            d_ar_dept_code             [11],
            d_ar_product_group_code    [4],
            d_ar_product_line_code     [5],
            d_ar_amount                [19],
            d_ar_amount_negative       [19],
            d_ar_debit_amt             [19],
            d_ar_credit_amt            [19],
            d_ar_narration             [51],
            d_ar_post_month            [3],
            d_ar_post_year             [5],
            d_ar_cheque_num            [11],
            d_ar_cheque_date           [12],
            d_ar_trn_type_code         [7],
			d_ar_main_acc1_code_su     [7],
            d_ar_main_acc2_code_su     [5],
            d_ar_subledger_group_code_su [4],
            d_ar_subledger_line_code_su  [9],
            d_ar_dept_code_su          [11],
            d_ar_product_group_code_su [4],
            d_ar_product_line_code_su  [5],
			p_language_id			   [3],
            d_ar_adj_type              [3];   /* For adjustments */

int         d_ar_sign_amount;    /* sign(amount)  0 -> 0   */
                                 /*               1 -> +ve */
                                 /*              -1 -> -ve */

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include "winproc.h"
char string_var[100];

int ins_ctr = 0;       /* Used for commiting */

void proc_main(argc,argv)
char *argv[];
int argc;
{
   if (argc != 5)
   {
      disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
      proc_exit();
   }


   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   strcpy(g_pgm_id,"ARBGLDIS");

   strcpy(g_facility_id,argv[4]);

   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle\n");
      proc_exit();
   }  

#ifdef DEBUG
  disp_message(INFO_MESG,"After connecting to oracle...\n");
#endif

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/

   set_meduser_role();
	strcpy(p_language_id.arr,l_language_id.arr);
	p_language_id.len = l_language_id.len;

   chk_active();

   nd_fm_doc_type.arr[0]    = '\0';
   nd_to_doc_type.arr[0]    = '\0';
   nd_proc_flag.arr[0]      = '\0';
   nd_view_print_flg.arr[0] = '\0';
   nd_rep_type.arr[0]       = '\0';
   nd_fm_month.arr[0]       = '\0';
   nd_fm_year.arr[0]        = '\0';
   nd_to_month.arr[0]       = '\0';
   nd_to_year.arr[0]        = '\0';

   nd_fm_doc_type.len       = 0;
   nd_to_doc_type.len       = 0;
   nd_proc_flag.len         = 0;
   nd_view_print_flg.len    = 0;
   nd_rep_type.len          = 0;
   nd_fm_month.len          = 0;
   nd_fm_year.len           = 0;
   nd_to_month.len          = 0;
   nd_to_year.len           = 0;

   audit_option_flag        = 0;
   process_rep_flg          = 0;

   EXEC SQL SELECT operating_facility_id,
				   PARAM1,PARAM2,PARAM3,PARAM4,
				   //PARAM5,
				   PARAM6,
                   PARAM7, PARAM8, PARAM9, PARAM10 
              INTO :nd_facility_id,
				   :nd_fm_doc_type,    
				   :nd_to_doc_type, 
                   :audit_option_flag, 
				   :process_rep_flg,
                   //:nd_view_print_flg, 
				   :nd_rep_type,
		   :nd_fm_month, :nd_fm_year, :nd_to_month, :nd_to_year
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBGLDIS'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_fm_doc_type.arr[nd_fm_doc_type.len]          = '\0';
   nd_to_doc_type.arr[nd_to_doc_type.len]          = '\0';
   nd_view_print_flg.arr[nd_view_print_flg.len]    = '\0';
   nd_rep_type.arr[nd_rep_type.len]                = '\0';
   nd_fm_month.arr[nd_fm_month.len]                = '\0';
   nd_fm_year.arr[nd_fm_year.len]                  = '\0';
   nd_to_month.arr[nd_to_month.len]                = '\0';
   nd_to_year.arr[nd_to_year.len]                  = '\0';
   
   
#ifdef DEBUG
   sprintf(string_var,"fr type is <%d> - <%s>\n",nd_fm_doc_type.len ,nd_fm_doc_type.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to type is <%d> - <%s>\n",nd_to_doc_type.len ,nd_to_doc_type.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"option  is <%d> \n",audit_option_flag);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"prc flg is <%d> \n",process_rep_flg);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"fm mth/yr is <%s>/<%s>\n",nd_fm_month.arr,nd_fm_year.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to mth/yr is <%s>/<%s>\n",nd_to_month.arr,nd_to_year.arr);
   disp_message(INFO_MESG,string_var);
#endif

   start_prog_control();
   start_prog_msg();

   delete_records();
 
   declare_cursors();

   process_audits();

   EXEC SQL COMMIT WORK;

   if (process_rep_flg == 3)
   {
      EXEC SQL COMMIT WORK RELEASE;

      if (OERROR)
           err_mesg("COMMIT failed",0,""); 

      run_report();

      if(sql_connect() == -1)
      {
         disp_message(ORA_MESG,"Error in connecting to Oracle 2 time\n");
         proc_exit();
      }
   }

   end_prog_msg();
   end_prog_control();

   EXEC SQL COMMIT WORK RELEASE;
   return;
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

declare_cursors()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside declare cursors\n");
   sprintf(string_var," opt flag is <%d>\n",audit_option_flag);
   disp_message(INFO_MESG,string_var);
#endif

    switch  (audit_option_flag)
    {
        case 1 : decl_in_curs();
                 break;
        case 2 : decl_dn_curs();
                 break;
        case 3 : decl_cn_curs();
                 break;
        case 4 : decl_adj_curs();
                 break;
        case 5 : decl_rec_curs();
                 break;
        case 6 : decl_pay_curs();
                 break;
        case 7 : decl_in_curs();
                 decl_dn_curs();
                 decl_cn_curs();
                 decl_adj_curs();
                 decl_rec_curs();
                 decl_pay_curs();
                 break;
    }
}

decl_in_curs()
{
#ifdef DEBUG 
  disp_message(INFO_MESG,"Inside Decl inv cur\n");
#endif
       EXEC SQL DECLARE CUR_INV_HDR CURSOR FOR
                 SELECT DOC_TYPE_CODE,
                        DOC_NUM,
                        TO_CHAR(DOC_DATE,'DD/MM/YYYY'),	
                        CUST_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        PAYABLE_AMT,
                        NARRATION,
                        POST_MONTH,
                        POST_YEAR,
                        SIGN(PAYABLE_AMT),
                        DECODE(SIGN(PAYABLE_AMT),-1,-PAYABLE_AMT,PAYABLE_AMT)
                   FROM AR_INV_HDR
                  WHERE DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'!!!!!!')
                    AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                    AND NVL(POSTED_FLAG,'N') = 'Y'
                    AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                        LTRIM(TO_CHAR(POST_MONTH,'09'))
                            BETWEEN
                        :nd_fm_year||:nd_fm_month
			    AND
                        :nd_to_year||:nd_to_month;


       EXEC SQL DECLARE CUR_INV_LINE CURSOR FOR
                 SELECT MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        NARRATION,
                        AMT_LOCAL,
                        SIGN(AMT_LOCAL),
                        DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL)
                   FROM AR_INV_LINE
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num;
}

open_in_hdr()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Open Inv hdr\n");
#endif
       EXEC SQL OPEN CUR_INV_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_INV_HDR",0,"");
}

fetch_in_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside Fetch in hdr\n");
#endif
       init_variables(2);

       EXEC SQL FETCH CUR_INV_HDR
                 INTO :d_ar_doc_type_code,
                      :d_ar_doc_num,
                      :d_ar_doc_date,
                      :d_ar_doc_ref,
                      :d_ar_cust_code,
                      :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_amount,
                      :d_ar_narration,
                      :d_ar_post_month,
                      :d_ar_post_year,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_INV_HDR",0,"");

       null_terminate(2);
       strcpy(d_ar_trn_type_code.arr,"INV");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_in_line()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside Open inv line\n");
#endif
       EXEC SQL OPEN CUR_INV_LINE;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_INV_LINE",0,"");
}

fetch_in_line()
{
#ifdef DEBUG 
  disp_message(INFO_MESG,"Inside fetch inv line\n");
#endif
       init_variables(0);

       EXEC SQL FETCH  CUR_INV_LINE
                 INTO :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_narration,
                      :d_ar_amount,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;
   
       if (OERROR)
         err_mesg("FETCH failed on cursor CUR_INV_LINE",0,"");

       null_terminate(0);
       strcpy(d_ar_trn_type_code.arr,"INV");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

decl_dn_curs()
{
#ifdef DEBUG 
  disp_message(INFO_MESG,"Inside decl Dn curs\n");
#endif
       EXEC SQL DECLARE CUR_DN_HDR CURSOR FOR
                 SELECT DOC_TYPE_CODE,
                        DOC_NUM,
                        TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
			POST_MONTH,
			POST_YEAR
                   FROM AR_DN_HDR
                  WHERE DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'!!!!!!')
                    AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                    AND NVL(POSTED_FLAG,'N') = 'Y'
                    AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                        LTRIM(TO_CHAR(POST_MONTH,'09'))
                            BETWEEN
                        :nd_fm_year||:nd_fm_month 
			    AND
                        :nd_to_year|| :nd_to_month;


       EXEC SQL DECLARE CUR_DN_INV_HDR CURSOR FOR
                 SELECT CUST_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        DOC_AMT,
                        NARRATION,
                        SIGN(DOC_AMT),
                        DECODE(SIGN(DOC_AMT),-1,-DOC_AMT,DOC_AMT),
                        ORG_DOC_TYPE_CODE,
                        ORG_DOC_NUM
                   FROM AR_DN_INV_HDR 
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num;

       EXEC SQL DECLARE CUR_DN_LINE CURSOR FOR
                 SELECT MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        NARRATION,
                        AMOUNT,
                        SIGN(AMOUNT),
                        DECODE(SIGN(AMOUNT),-1,-AMOUNT,AMOUNT)
                   FROM AR_DN_LINE
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num
                    AND ORG_DOC_TYPE_CODE = :d_ar_org_doc_type_code
                    AND ORG_DOC_NUM       = :d_ar_org_doc_num;

}

open_dn_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside Open dn hdr\n");
#endif
       EXEC SQL OPEN CUR_DN_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_DN_HDR",0,"");
}

fetch_dn_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside fetch dn hdr\n");
#endif
       init_variables(2);

       EXEC SQL FETCH CUR_DN_HDR
                 INTO :d_ar_doc_type_code,
                      :d_ar_doc_num,
                      :d_ar_doc_date,
                      :d_ar_post_month,
                      :d_ar_post_year;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_DN_HDR",0,"");

       null_terminate(2);
       strcpy(d_ar_trn_type_code.arr,"DEB");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_dn_inv_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside open dn inv hdr\n");
#endif
       EXEC SQL OPEN CUR_DN_INV_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_DN_INV_HDR",0,"");
}

fetch_dn_inv_hdr()
{
       init_variables(1);

#ifdef DEBUG
   disp_message(INFO_MESG,"In fetch dn inv hdr\n");
   sprintf(string_var,"doc is <%s> - <%s> \n",d_ar_doc_type_code.arr,d_ar_doc_num.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"doc date is <%s>\n",d_ar_doc_date.arr);
   disp_message(INFO_MESG,string_var);
#endif

       EXEC SQL FETCH CUR_DN_INV_HDR
                 INTO :d_ar_doc_ref,
                      :d_ar_cust_code,
                      :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_amount,
                      :d_ar_narration,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative,
                      :d_ar_org_doc_type_code,
                      :d_ar_org_doc_num;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_DN_INV_HDR",0,"");

       null_terminate(1);
       strcpy(d_ar_trn_type_code.arr,"DEB");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_dn_line()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Before open dn line\n");
#endif

       EXEC SQL OPEN CUR_DN_LINE;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_DN_LINE",0,"");
}

fetch_dn_line()
{
       init_variables(0);

#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Fetch dn line\n");
#endif

       EXEC SQL FETCH  CUR_DN_LINE
                 INTO :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_narration,
                      :d_ar_amount,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;
   
       if (OERROR)
         err_mesg("FETCH failed on cursor CUR_DN_LINE",0,"");

       null_terminate(0);
       strcpy(d_ar_trn_type_code.arr,"DEB");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

decl_cn_curs()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"In decl cn curs\n");
#endif
       EXEC SQL DECLARE CUR_CN_HDR CURSOR FOR
                 SELECT DOC_TYPE_CODE,
                        DOC_NUM,
                        TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
			POST_MONTH,
			POST_YEAR
                   FROM AR_CN_HDR
                  WHERE DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'!!!!!!')
                    AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                    AND NVL(POSTED_FLAG,'N') = 'Y'
                    AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                        LTRIM(TO_CHAR(POST_MONTH,'09'))
                            BETWEEN
                        :nd_fm_year||:nd_fm_month
			    AND
                        :nd_to_year||:nd_to_month;

       EXEC SQL DECLARE CUR_CN_INV_HDR CURSOR FOR
                 SELECT CUST_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        DOC_AMT,
                        NARRATION,
                        SIGN(DOC_AMT),
                        DECODE(SIGN(DOC_AMT),-1,-DOC_AMT,DOC_AMT),
                        ORG_DOC_TYPE_CODE,
                        ORG_DOC_NUM
                   FROM AR_CN_INV_HDR 
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num;

       EXEC SQL DECLARE CUR_CN_LINE CURSOR FOR
                 SELECT MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        NARRATION,
                        AMOUNT,
                        SIGN(AMOUNT),
                        DECODE(SIGN(AMOUNT),-1,-AMOUNT,AMOUNT)
                   FROM AR_CN_LINE 
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num
                    AND ORG_DOC_TYPE_CODE = :d_ar_org_doc_type_code
                    AND ORG_DOC_NUM       = :d_ar_org_doc_num;
}

open_cn_hdr()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"In open cn hdr\n");
#endif
       EXEC SQL OPEN CUR_CN_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_CN_HDR",0,"");
}

fetch_cn_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside fetch cn hdr\n");
#endif
       init_variables(2);

       EXEC SQL FETCH CUR_CN_HDR
                 INTO :d_ar_doc_type_code,
                      :d_ar_doc_num,
                      :d_ar_doc_date,
                      :d_ar_post_month,
                      :d_ar_post_year;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_CN_HDR",0,"");

       null_terminate(2);
       strcpy(d_ar_trn_type_code.arr,"CRE");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_cn_inv_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside open cn inv hdr\n");
  sprintf(string_var,"doc is <%s> - <%s> \n",d_ar_doc_type_code.arr,d_ar_doc_num.arr);
  disp_message(INFO_MESG,string_var);
#endif 
       EXEC SQL OPEN CUR_CN_INV_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_CN_INV_HDR",0,"");
}

fetch_cn_inv_hdr()
{
       init_variables(1);
#ifdef DEBUG
   disp_message(INFO_MESG,"In fetch cn inv hdr\n");
   sprintf(string_var,"doc is <%s> - <%s> \n",d_ar_doc_type_code.arr,d_ar_doc_num.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"doc date is <%s>\n",d_ar_doc_date.arr);
   disp_message(INFO_MESG,string_var);
#endif 

       EXEC SQL FETCH CUR_CN_INV_HDR
                 INTO :d_ar_doc_ref,
                      :d_ar_cust_code,
                      :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_amount,
                      :d_ar_narration,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative,
                      :d_ar_org_doc_type_code,
                      :d_ar_org_doc_num;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_CN_INV_HDR",0,"");

       null_terminate(1);
       strcpy(d_ar_trn_type_code.arr,"CRE");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_cn_line()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside open cn line\n");
#endif
       EXEC SQL OPEN CUR_CN_LINE;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_CN_LINE",0,"");
}

fetch_cn_line()
{
       init_variables(0);
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside fetch cn line\n");
#endif

       EXEC SQL FETCH  CUR_CN_LINE
                 INTO :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_narration,
                      :d_ar_amount,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;
   
       if (OERROR)
         err_mesg("FETCH failed on cursor CUR_CN_LINE",0,"");

       null_terminate(0);
       strcpy(d_ar_trn_type_code.arr,"CRE");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

decl_adj_curs()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"In decl adj cur\n");
#endif

       EXEC SQL DECLARE CUR_ADJ_HDR CURSOR FOR
                 SELECT DOC_TYPE_CODE,
                        DOC_NUM,
                        TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
			POST_MONTH,
			POST_YEAR
                   FROM AR_ADJ_HDR
                  WHERE DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'!!!!!!')
                    AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                    AND NVL(POSTED_FLAG,'N') = 'Y'
                    AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                        LTRIM(TO_CHAR(POST_MONTH,'09'))
                            BETWEEN
                        :nd_fm_year||:nd_fm_month
			    AND
                        :nd_to_year||:nd_to_month;

       EXEC SQL DECLARE CUR_ADJ_INV_HDR CURSOR FOR
                 SELECT CUST_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        DOC_AMT,
                        NARRATION,
                        ADJ_TYPE,
                        SIGN(DOC_AMT),
                        DECODE(SIGN(DOC_AMT),-1,-DOC_AMT,DOC_AMT),
                        ORG_DOC_TYPE_CODE,
                        ORG_DOC_NUM
                   FROM AR_ADJ_INV_HDR 
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num;

       EXEC SQL DECLARE CUR_ADJ_LINE CURSOR FOR
                 SELECT MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        NARRATION,
                        AMOUNT,
                        SIGN(AMOUNT),
                        DECODE(SIGN(AMOUNT),-1,-AMOUNT,AMOUNT)
                   FROM AR_ADJ_LINE
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num
                    AND ORG_DOC_TYPE_CODE = :d_ar_org_doc_type_code
                    AND ORG_DOC_NUM       = :d_ar_org_doc_num;
}

open_adj_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"In open adj hdr\n");
#endif
       EXEC SQL OPEN CUR_ADJ_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_ADJ_HDR",0,"");
}

fetch_adj_hdr()
{
       init_variables(2);
#ifdef DEBUG
  disp_message(INFO_MESG,"In fetch adj hdr\n");
#endif

       EXEC SQL FETCH CUR_ADJ_HDR
                 INTO :d_ar_doc_type_code,
                      :d_ar_doc_num,
                      :d_ar_doc_date,
                      :d_ar_post_month,
                      :d_ar_post_year;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_ADJ_HDR",0,"");

       null_terminate(2);
       strcpy(d_ar_trn_type_code.arr,"ADJ");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_adj_inv_hdr()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"in open adj inv hdr\n");
#endif
       EXEC SQL OPEN CUR_ADJ_INV_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_ADJ_INV_HDR",0,"");
}

fetch_adj_inv_hdr()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside fetch adj inv hdr\n");
#endif
       init_variables(1);
       d_ar_adj_type.arr[0] = '\0';
       d_ar_adj_type.len    = 0;
 
       EXEC SQL FETCH CUR_ADJ_INV_HDR
                 INTO :d_ar_doc_ref,
                      :d_ar_cust_code,
                      :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_amount,
                      :d_ar_narration,
                      :d_ar_adj_type,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative,
                      :d_ar_org_doc_type_code,
                      :d_ar_org_doc_num;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_ADJ_INV_HDR",0,"");

       d_ar_adj_type.arr[d_ar_adj_type.len]  = '\0';

       null_terminate(1);
       strcpy(d_ar_trn_type_code.arr,"ADJ");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

#ifdef DEBUG
   sprintf(string_var,"After fetching Adj inv hdr  Adj type - <%s><%d>\n",
            d_ar_adj_type.arr,
            d_ar_adj_type.len);
            disp_message(INFO_MESG,string_var);
#endif

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_adj_line()
{
       EXEC SQL OPEN CUR_ADJ_LINE;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_ADJ_LINE",0,"");
}

fetch_adj_line()
{
       init_variables(0);

       EXEC SQL FETCH  CUR_ADJ_LINE
                 INTO :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_narration,
                      :d_ar_amount,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;
   
       if (OERROR)
         err_mesg("FETCH failed on cursor CUR_ADJ_LINE",0,"");

       null_terminate(0);
       strcpy(d_ar_trn_type_code.arr,"ADJ");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

decl_rec_curs()
{
       EXEC SQL DECLARE CUR_REC_HDR CURSOR FOR
                 SELECT DOC_TYPE_CODE,
                        DOC_NUM,
                        TO_CHAR(DOC_DATE,'DD/MM/YYYY'),	
                        DOC_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE,
                        MAIN_ACC2_CODE,
                        SUBLEDGER_GROUP_CODE,
                        SUBLEDGER_LINE_CODE,
                        DEPT_CODE,
                        PRODUCT_GROUP_CODE,
                        PRODUCT_LINE_CODE,
                        AMT_LOCAL,
                        NARRATION,
                        POST_MONTH,
                        POST_YEAR,
                        CHEQUE_NUM,
                        TO_CHAR(CHEQUE_DATE,'DD/MM/YYYY'),
                        SIGN(AMT_LOCAL),
                        DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL)
                   FROM AR_REC_HDR
                  WHERE DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'!!!!!!')
                    AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                    AND NVL(POSTED_FLAG,'N') = 'Y'
                    AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                        LTRIM(TO_CHAR(POST_MONTH,'09'))
                            BETWEEN
                        :nd_fm_year||
                        :nd_fm_month
			    AND
                        :nd_to_year||
                        :nd_to_month;

       EXEC SQL DECLARE CUR_REC_LINE CURSOR FOR
                 SELECT MAIN_ACC1_CODE,
                        MAIN_ACC2_CODE,
                        SUBLEDGER_GROUP_CODE,
                        SUBLEDGER_LINE_CODE,
                        DEPT_CODE,
                        PRODUCT_GROUP_CODE,
                        PRODUCT_LINE_CODE,
                        NARRATION,
                        AMT_LOCAL,
                        SIGN(AMT_LOCAL),
                        DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL)
                   FROM AR_REC_LINE
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num;


		EXEC SQL DECLARE OFF_REC_CUR CURSOR FOR
                 SELECT DOC_TYPE_CODE,
                        DOC_NUM,
                        TO_CHAR(DOC_DATE,'DD/MM/YYYY'),	
                        DOC_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE_BANK,
                        MAIN_ACC2_CODE_BANK,
                        SUBLEDGER_GROUP_CODE_BANK,
                        SUBLEDGER_LINE_CODE_BANK,
                        DEPT_CODE_BANK,
                        PRODUCT_GROUP_CODE_BANK,
                        PRODUCT_LINE_CODE_BANK,
						MAIN_ACC1_CODE_SUSP,
                        MAIN_ACC2_CODE_SUSP,
                        SUBLEDGER_GROUP_CODE_SUSP,
                        SUBLEDGER_LINE_CODE_SUSP,
                        DEPT_CODE_SUSP,
                        PRODUCT_GROUP_CODE_SUSP,
                        PRODUCT_LINE_CODE_SUSP,
                        AMT_LOCAL,
                        NARRATION,
                        POST_MONTH,
                        POST_YEAR,
                        CHEQUE_NUM,
                        TO_CHAR(CHEQUE_DATE,'DD/MM/YYYY'),
                        SIGN(AMT_LOCAL),
						DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL)
                   FROM AR_CASHIER
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num
                    AND NVL(POSTED_FLAG,'N') = 'Y';
}

open_rec_hdr()
{
       EXEC SQL OPEN CUR_REC_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_REC_HDR",0,"");
}

fetch_rec_hdr()
{
       init_variables(2);

       EXEC SQL FETCH CUR_REC_HDR
                 INTO :d_ar_doc_type_code,
                      :d_ar_doc_num,
                      :d_ar_doc_date,
                      :d_ar_doc_ref,
                      :d_ar_cust_code,
                      :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_amount,
                      :d_ar_narration,
                      :d_ar_post_month,
                      :d_ar_post_year,
                      :d_ar_cheque_num,
                      :d_ar_cheque_date,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_REC_HDR",0,"");

       null_terminate(2);
       strcpy(d_ar_trn_type_code.arr,"REC");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_rec_line()
{
       EXEC SQL OPEN CUR_REC_LINE;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_REC_LINE",0,"");
}

fetch_rec_line()
{
       init_variables(0);

       EXEC SQL FETCH  CUR_REC_LINE
                 INTO :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_narration,
                      :d_ar_amount,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;
   
       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_REC_LINE",0,"");

       null_terminate(0);
       strcpy(d_ar_trn_type_code.arr,"REC");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}
//---added 09/06/02 ----------------
open_off_rec_cur()
{
       EXEC SQL OPEN OFF_REC_CUR;

       if (OERROR)
           err_mesg("OPEN failed on cursor OFF_REC_CUR",0,"");
}

fetch_off_rec()
{
       init_variables(0);

       EXEC SQL FETCH  OFF_REC_CUR

                 INTO :d_ar_doc_type_code,
                      :d_ar_doc_num,
                      :d_ar_doc_date,
                      :d_ar_doc_ref,
                      :d_ar_cust_code,
                      :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_main_acc1_code_su,
                      :d_ar_main_acc2_code_su,
                      :d_ar_subledger_group_code_su,
                      :d_ar_subledger_line_code_su,
                      :d_ar_dept_code_su,
                      :d_ar_product_group_code_su,
                      :d_ar_product_line_code_su,
					  :d_ar_amount,
                      :d_ar_narration,
                      :d_ar_post_month,
                      :d_ar_post_year,
                      :d_ar_cheque_num,
                      :d_ar_cheque_date,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;

   
       if (OERROR)
            err_mesg("FETCH failed on cursor OFF_REC_CUR",0,"");

       null_terminate(0);
       strcpy(d_ar_trn_type_code.arr,"REC");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}
//---End added 09/06/02 ----------------
decl_pay_curs()
{
       EXEC SQL DECLARE CUR_PAY_HDR CURSOR FOR
                 SELECT DOC_TYPE_CODE,
                        DOC_NUM,
                        TO_CHAR(DOC_DATE,'DD/MM/YYYY'),	
                        DOC_REF,
                        CUST_CODE,
                        MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        AMT_LOCAL,
                        NARRATION,
                        POST_MONTH,
                        POST_YEAR,
                        CHEQUE_NUM,
                        TO_CHAR(CHEQUE_DATE,'DD/MM/YYYY'),
                        SIGN(AMT_LOCAL),
                        DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL)
                   FROM AR_PAY_HDR
                  WHERE DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'!!!!!!')
                    AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                    AND NVL(POSTED_FLAG,'N') = 'Y'
                    AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                        LTRIM(TO_CHAR(POST_MONTH,'09'))
                            BETWEEN
                        :nd_fm_year||
                        :nd_fm_month
			    AND
                       :nd_to_year||
                        :nd_to_month;


       EXEC SQL DECLARE CUR_PAY_LINE CURSOR FOR
                 SELECT MAIN_ACC1_CODE_NEW,
                        MAIN_ACC2_CODE_NEW,
                        SUBLEDGER_GROUP_CODE_NEW,
                        SUBLEDGER_LINE_CODE_NEW,
                        DEPT_CODE_NEW,
                        PRODUCT_GROUP_CODE_NEW,
                        PRODUCT_LINE_CODE_NEW,
                        NARRATION,
                        AMT_LOCAL,
                        SIGN(AMT_LOCAL),
                        DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL)
                   FROM AR_PAY_LINE
                  WHERE DOC_TYPE_CODE = :d_ar_doc_type_code
                    AND DOC_NUM       = :d_ar_doc_num;
}

open_pay_hdr()
{
       EXEC SQL OPEN CUR_PAY_HDR;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_PAY_HDR",0,"");
}

fetch_pay_hdr()
{
       init_variables(2);

       EXEC SQL FETCH CUR_PAY_HDR
                 INTO :d_ar_doc_type_code,
                      :d_ar_doc_num,
                      :d_ar_doc_date,
                      :d_ar_doc_ref,
                      :d_ar_cust_code,
                      :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_amount,
                      :d_ar_narration,
                      :d_ar_post_month,
                      :d_ar_post_year,
                      :d_ar_cheque_num,
                      :d_ar_cheque_date,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;

       if (OERROR)
            err_mesg("FETCH failed on cursor CUR_PAY_HDR",0,"");

       null_terminate(2);
       strcpy(d_ar_trn_type_code.arr,"PAY");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

open_pay_line()
{
       EXEC SQL OPEN CUR_PAY_LINE;

       if (OERROR)
           err_mesg("OPEN failed on cursor CUR_PAY_LINE",0,"");
}

fetch_pay_line()
{
       init_variables(0);

       EXEC SQL FETCH  CUR_PAY_LINE
                 INTO :d_ar_main_acc1_code,
                      :d_ar_main_acc2_code,
                      :d_ar_subledger_group_code,
                      :d_ar_subledger_line_code,
                      :d_ar_dept_code,
                      :d_ar_product_group_code,
                      :d_ar_product_line_code,
                      :d_ar_narration,
                      :d_ar_amount,
                      :d_ar_sign_amount,
                      :d_ar_amount_negative;
   
       if (OERROR)
         err_mesg("FETCH failed on cursor CUR_PAY_LINE",0,"");

       null_terminate(0);
       strcpy(d_ar_trn_type_code.arr,"PAY");
       d_ar_trn_type_code.len = strlen(d_ar_trn_type_code.arr);

       if (LAST_ROW)
            return (0);
       else
            return (1);
}

init_variables(flg)
int flg;
{

  if (flg)   /* Before Fetching hdr or Inv hdr */
  {
    if (flg == 2)  /* Before Fetching hdr */
    { 
        d_ar_doc_type_code.arr[0]         = '\0';
        d_ar_doc_num.arr[0]               = '\0';
        d_ar_doc_date.arr[0]              = '\0';
        d_ar_post_month.arr[0]            = '\0';
        d_ar_post_year.arr[0]             = '\0';
    }
    d_ar_doc_ref.arr[0]               = '\0';
    d_ar_cust_code.arr[0]             = '\0';
    d_ar_cheque_num.arr[0]            = '\0';
    d_ar_cheque_date.arr[0]           = '\0';
  }

d_ar_org_doc_type_code.arr[0]     = '\0';
d_ar_org_doc_num.arr[0]           = '\0';

d_ar_main_acc1_code.arr[0]        = '\0';
d_ar_main_acc2_code.arr[0]        = '\0';
d_ar_subledger_group_code.arr[0]  = '\0';
d_ar_subledger_line_code.arr[0]   = '\0';
d_ar_dept_code.arr[0]             = '\0';
d_ar_product_group_code.arr[0]    = '\0';
d_ar_product_line_code.arr[0]     = '\0';
d_ar_main_acc1_code_su.arr[0]        = '\0';
d_ar_main_acc2_code_su.arr[0]        = '\0';
d_ar_subledger_group_code_su.arr[0]  = '\0';
d_ar_subledger_line_code_su.arr[0]   = '\0';
d_ar_dept_code_su.arr[0]             = '\0';
d_ar_product_group_code_su.arr[0]    = '\0';
d_ar_product_line_code_su.arr[0]     = '\0';

d_ar_amount.arr[0]                = '\0';
d_ar_debit_amt.arr[0]             = '\0';
d_ar_credit_amt.arr[0]            = '\0';
d_ar_narration.arr[0]             = '\0';
d_ar_trn_type_code.arr[0]         = '\0';
d_ar_amount_negative.arr[0]       = '\0';

d_ar_sign_amount                  = 0;

  if (flg)   /* Before Fetching hdr or Inv hdr */
  {
    if (flg == 2)  /* Before Fetching hdr */
    { 
       d_ar_doc_type_code.len            = 0;
       d_ar_doc_num.len                  = 0;
       d_ar_doc_date.len                 = 0;
       d_ar_post_month.len               = 0;
       d_ar_post_year.len                = 0;
    }
    d_ar_doc_ref.len                  = 0;
    d_ar_cust_code.len                = 0;
    d_ar_cheque_num.len               = 0;
    d_ar_cheque_date.len              = 0;
  }

d_ar_org_doc_type_code.len        = 0;
d_ar_org_doc_num.len              = 0;

d_ar_main_acc1_code.len           = 0;
d_ar_main_acc2_code.len           = 0;
d_ar_subledger_group_code.len     = 0;
d_ar_subledger_line_code.len      = 0;
d_ar_dept_code.len                = 0;
d_ar_product_group_code.len       = 0;
d_ar_product_line_code.len        = 0;
d_ar_main_acc1_code_su.len        = 0;
d_ar_main_acc2_code_su.len        = 0;
d_ar_subledger_group_code_su.len  = 0;
d_ar_subledger_line_code_su.len   = 0;
d_ar_dept_code_su.len             = 0;
d_ar_product_group_code_su.len    = 0;
d_ar_product_line_code_su.len     = 0;
d_ar_amount.len                   = 0;
d_ar_debit_amt.len                = 0;
d_ar_credit_amt.len               = 0;
d_ar_narration.len                = 0;
d_ar_trn_type_code.len            = 0;
d_ar_amount_negative.len          = 0;

}

null_terminate(flg)
int flg;
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside null termination\n");
#endif
 
  if (flg)   /* Before Fetching hdr or Inv hdr */
  {
    if (flg == 2)  /* Before Fetching hdr */
    { 
       d_ar_doc_type_code.arr[d_ar_doc_type_code.len]                  = '\0';
       d_ar_doc_num.arr[d_ar_doc_num.len]                              = '\0';
       d_ar_doc_date.arr[d_ar_doc_date.len]                            = '\0';
       d_ar_post_month.arr[d_ar_post_month.len]                        = '\0';
       d_ar_post_year.arr[d_ar_post_year.len]                          = '\0';
    }
    d_ar_doc_ref.arr[d_ar_doc_ref.len]                              = '\0';
    d_ar_cust_code.arr[d_ar_cust_code.len]                          = '\0';
    d_ar_cheque_num.arr[d_ar_cheque_num.len]                        = '\0';
    d_ar_cheque_date.arr[d_ar_cheque_date.len]                      = '\0';
  }

d_ar_org_doc_type_code.arr[d_ar_org_doc_type_code.len]          = '\0';
d_ar_org_doc_num.arr[d_ar_org_doc_num.len]                      = '\0';

d_ar_main_acc1_code.arr[d_ar_main_acc1_code.len]                = '\0';
d_ar_main_acc2_code.arr[d_ar_main_acc2_code.len]                = '\0';
d_ar_subledger_group_code.arr[d_ar_subledger_group_code.len]    = '\0';
d_ar_subledger_line_code.arr[d_ar_subledger_line_code.len]      = '\0';
d_ar_dept_code.arr[d_ar_dept_code.len]                          = '\0';
d_ar_product_group_code.arr[d_ar_product_group_code.len]        = '\0';
d_ar_product_line_code.arr[d_ar_product_line_code.len]          = '\0';
d_ar_main_acc1_code_su.arr[d_ar_main_acc1_code_su.len]          = '\0';
d_ar_main_acc2_code_su.arr[d_ar_main_acc2_code_su.len]          = '\0';
d_ar_subledger_group_code_su.arr[d_ar_subledger_group_code_su.len] = '\0';
d_ar_subledger_line_code_su.arr[d_ar_subledger_line_code_su.len]   = '\0';
d_ar_dept_code_su.arr[d_ar_dept_code_su.len]                    = '\0';
d_ar_product_group_code_su.arr[d_ar_product_group_code_su.len]  = '\0';
d_ar_product_line_code_su.arr[d_ar_product_line_code_su.len]    = '\0';
d_ar_amount.arr[d_ar_amount.len]                                = '\0';
d_ar_debit_amt.arr[d_ar_debit_amt.len]                          = '\0';
d_ar_credit_amt.arr[d_ar_credit_amt.len]                        = '\0';
d_ar_narration.arr[d_ar_narration.len]                          = '\0';
d_ar_trn_type_code.arr[d_ar_trn_type_code.len]                  = '\0';
d_ar_amount_negative.arr[d_ar_amount_negative.len]              = '\0';

#ifdef DEBUG
  sprintf(string_var,"doc is <%s><%d> - <%s><%d> <%s>-<%d>\n",
       d_ar_doc_type_code.arr,
       d_ar_doc_type_code.len,
       d_ar_doc_num.arr,
       d_ar_doc_num.len,
       d_ar_doc_date.arr,
       d_ar_doc_date.len);
       disp_message(INFO_MESG,string_var);
  sprintf(string_var," main <%s><%d> - <%s><%d>\n",
       d_ar_main_acc1_code.arr,
       d_ar_main_acc1_code.len,
       d_ar_main_acc2_code.arr,
       d_ar_main_acc2_code.len);          
       disp_message(INFO_MESG,string_var);
  sprintf(string_var," amt is <%s><%d> amt neg is <%s> sign is <%d>\n",
       d_ar_amount.arr,
       d_ar_amount.len,
       d_ar_amount_negative.arr,
       d_ar_sign_amount);                 
       disp_message(INFO_MESG,string_var);
#endif
}

process_audits()
{
    switch  (audit_option_flag)
    {
        case 1 : process_inv();
                 break;
        case 2 : process_dn();
                 break;
        case 3 : process_cn();
                 break;
        case 4 : process_adj();
                 break;
        case 5 : process_rec();
                 break;
        case 6 : process_pay();
                 break;
        case 7 : process_inv();
                 process_dn();
                 process_cn();
                 process_adj();
                 process_rec();
                 process_pay();
                 break;
    }
}

process_inv()
{
   open_in_hdr();

   while (fetch_in_hdr())
   {
       insert_distrbn(0); 
       open_in_line();
       while(fetch_in_line())
       {
          insert_distrbn(1); 
       }
    }
}
 
process_dn()
{
   open_dn_hdr();

   while (fetch_dn_hdr())
   {
       open_dn_inv_hdr();
       while (fetch_dn_inv_hdr())
       {
           insert_distrbn(0); 
           open_dn_line();
           while(fetch_dn_line())
           {
              insert_distrbn(1); 
           }
        }
    }
}

process_cn()
{
   open_cn_hdr();

   while (fetch_cn_hdr())
   {
       open_cn_inv_hdr();
       while (fetch_cn_inv_hdr())
       {
           insert_distrbn(0); 
           open_cn_line();
           while(fetch_cn_line())
           {
              insert_distrbn(1); 
           }
        }
    }
}

process_adj()
{
   open_adj_hdr();

   while (fetch_adj_hdr())
   {
       open_adj_inv_hdr();
       while (fetch_adj_inv_hdr())
       {
           insert_distrbn(0); 
           open_adj_line();
           while(fetch_adj_line())
           {
              insert_distrbn(1); 
           }
        }
    }
}

process_rec()
{
   open_rec_hdr();

   while (fetch_rec_hdr())
   {
       insert_distrbn(0); 
	   //---added 09/06/02 ----------------
	   open_off_rec_cur();
	   fetch_off_rec();
	   insert_distrbn(0);

	   strcpy(d_ar_main_acc1_code.arr, d_ar_main_acc1_code_su.arr);
       strcpy(d_ar_main_acc2_code.arr, d_ar_main_acc2_code_su.arr);
       strcpy(d_ar_subledger_group_code.arr, d_ar_subledger_group_code_su.arr);
       strcpy(d_ar_subledger_line_code.arr, d_ar_subledger_line_code_su.arr);
       strcpy(d_ar_dept_code.arr, d_ar_dept_code_su.arr);
       strcpy(d_ar_product_group_code.arr, d_ar_product_group_code_su.arr);
       strcpy(d_ar_product_line_code.arr, d_ar_product_line_code_su.arr);


	   //strcpy(d_ar_credit_amt.arr, (char ) ((-1) *  atoi(d_ar_debit_amt.arr)));
       
	   
       insert_distrbn(1);  
	   //---End added 09/06/02 ----------------
       open_rec_line();
       while(fetch_rec_line())
       {
          insert_distrbn(1); 
       }
    }
}

process_pay()
{
   open_pay_hdr();

   while (fetch_pay_hdr())
   {

       insert_distrbn(0); 
       open_pay_line();
       while(fetch_pay_line())
       {
          insert_distrbn(1); 
       }
    }
}

insert_distrbn(hdr_line)
int hdr_line;
{
   calculate_credit_debit(hdr_line);

#ifdef DEBUG
   disp_message(INFO_MESG,"Inside insert distrbn \n");
   sprintf(string_var,"doc is <%s> - <%s>\n",d_ar_doc_type_code.arr,d_ar_doc_num.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var," deb is <%s><%d> cre is <%s><%d>\n",
        d_ar_debit_amt.arr,
        d_ar_debit_amt.len,
        d_ar_credit_amt.arr,
        d_ar_credit_amt.len);         
        disp_message(INFO_MESG,string_var);
   getchar();
#endif

   EXEC SQL INSERT INTO AR_GL_DISTRBN_TEMP
            (
               DOC_TYPE_CODE,
               DOC_NUM,
               DOC_DATE,
               DOC_REF,
               CUST_CODE,
               MAIN_ACC1_CODE,
               MAIN_ACC2_CODE,
               SUBLEDGER_GROUP_CODE,
               SUBLEDGER_LINE_CODE,
               DEPT_CODE,
               PRODUCT_GROUP_CODE,
               PRODUCT_LINE_CODE,
               DEBIT_AMT,
               CREDIT_AMT,
               NARRATION,
               POST_MONTH,
               POST_YEAR,
               CHEQUE_NUM,
               CHEQUE_DATE,
               TRN_TYPE_CODE
            )
        VALUES
            (
               :d_ar_doc_type_code,
               :d_ar_doc_num,
               TO_DATE(:d_ar_doc_date,'DD/MM/YYYY'),
               :d_ar_doc_ref,
               :d_ar_cust_code,
               :d_ar_main_acc1_code,
               :d_ar_main_acc2_code,
               :d_ar_subledger_group_code,
               :d_ar_subledger_line_code,
               :d_ar_dept_code,
               :d_ar_product_group_code,
               :d_ar_product_line_code,
               :d_ar_debit_amt,
               :d_ar_credit_amt,
               :d_ar_narration,
               :d_ar_post_month,
               :d_ar_post_year,
               :d_ar_cheque_num,
               TO_DATE(:d_ar_cheque_date,'DD/MM/YYYY'),
               :d_ar_trn_type_code
            );
 
        if (OERROR)
           err_mesg("INSERT failed on table AR_GL_DISTRBN_TEMP",0,"");

        if (++ins_ctr > 100)
        {
             ins_ctr = 0;

             EXEC SQL COMMIT WORK;
             if (OERROR)
                err_mesg("COMMIT failed",0,""); 
        }

}


calculate_credit_debit(hdr_line) /* 0 -> Hdr   1 -> Line */
int hdr_line;
{
 int trn_flg = 0;

 if (audit_option_flag == 7)
 {
    if (!strcmp(d_ar_trn_type_code.arr,"INV"))
          trn_flg = 1;
    else if (!strcmp(d_ar_trn_type_code.arr,"DEB"))
            trn_flg = 2;
         else if (!strcmp(d_ar_trn_type_code.arr,"CRE"))
               trn_flg = 3;
              else if (!strcmp(d_ar_trn_type_code.arr,"ADJ"))
                    trn_flg = 4;
                 else if (!strcmp(d_ar_trn_type_code.arr,"REC"))
                       trn_flg = 5;
                 else if (!strcmp(d_ar_trn_type_code.arr,"PAY"))
                       trn_flg = 6;
  }
  else
     trn_flg = audit_option_flag;
 

  switch  (trn_flg)
  {
      case 1 : 
               if ( !hdr_line )   /* Hdr rec */
                   Debit();
               else if (atof(d_ar_amount.arr) < 0.00)    /* -ve */
                       Debit(); 
                    else 
                       Credit();
               break; 
      case 2 :
               if ( !hdr_line )   /* Hdr rec */
                   Debit();
               else if (atof(d_ar_amount.arr) < 0.00)   /* -ve */
                       Debit(); 
                    else 
                       Credit();
               break;
      case 3 : 
               if ( !hdr_line )   /* Hdr rec */
                   Credit();
               else if (atof(d_ar_amount.arr) < 0.00)   /* -ve */
                       Credit(); 
                    else 
                       Debit();
               break;
      case 4 : 
               if ( !hdr_line )   /* Hdr rec */
               {
                   if (d_ar_adj_type.arr[0] == 'D')
                        Debit();
                   else
                        Credit();
               }
               else if (atof(d_ar_amount.arr) < 0.00)   /* -ve */
                    {
                       if (d_ar_adj_type.arr[0] == 'D')
                            Debit();
                       else
                            Credit();
                    }
                    else 
                    {
                       if (d_ar_adj_type.arr[0] == 'D')
                            Credit();
                       else
                            Debit();
                    }
               break;
      case 5 :
               if ( !hdr_line )   /* Hdr rec */
                   Debit();
               else if (atof(d_ar_amount.arr) < 0.00)
                       Debit(); 
                  else 
                       Credit();
               break;
      case 6 : /* the following condition have been changed by VSK
				  on 12/09/1999. The condition is altered to bring
				  amouts as credit and debit which was before both
				  credit */
               if ( !hdr_line )   /* Hdr rec */
			   {		
					if (atof(d_ar_amount.arr) < 0.00)
	                   Debit();
					else
					   Credit();
			   }
               else 
			   {
					if (atof(d_ar_amount.arr) < 0.00)
                       Debit();
                    else 
                       Credit(); 
			   }
               break;
    }
}

Credit()
{

#ifdef DEBUG
   sprintf(string_var,"%s - %d - %s - %s",d_ar_doc_num.arr,d_ar_sign_amount,d_ar_amount_negative.arr,d_ar_amount.arr);
   disp_message(INFO_MESG,string_var);
#endif

   if (d_ar_sign_amount == 0)
         strcpy(d_ar_credit_amt.arr,"");
   else
   {
       if (d_ar_sign_amount == -1)
         strcpy(d_ar_credit_amt.arr,d_ar_amount_negative.arr);
       else
         strcpy(d_ar_credit_amt.arr,d_ar_amount.arr);
    }

   strcpy(d_ar_debit_amt.arr,"");

   d_ar_credit_amt.len = strlen(d_ar_credit_amt.arr);
   d_ar_debit_amt.len = strlen(d_ar_debit_amt.arr);
}
 
Debit()
{

#ifdef DEBUG
   sprintf(string_var,"%s - %d - %s - %s",d_ar_doc_num.arr,d_ar_sign_amount,d_ar_amount_negative.arr,d_ar_amount.arr);
   disp_message(INFO_MESG,string_var);
#endif

   if (d_ar_sign_amount == 0)
         strcpy(d_ar_debit_amt.arr,"");
   else
   {
        if (d_ar_sign_amount == -1)
           strcpy(d_ar_debit_amt.arr,d_ar_amount_negative.arr);
        else
           strcpy(d_ar_debit_amt.arr,d_ar_amount.arr);
   }

   strcpy(d_ar_credit_amt.arr,"");

   d_ar_credit_amt.len = strlen(d_ar_credit_amt.arr);
   d_ar_debit_amt.len = strlen(d_ar_debit_amt.arr);
}

delete_records()
{
    
    while (1)
    {
       
       EXEC SQL DELETE FROM AR_GL_DISTRBN_TEMP
                      WHERE ROWNUM < 500;

       if (OERROR)
         err_mesg("DELETE failed on table AR_GL_DISTRBN_TEMP",0,"");

       EXEC SQL COMMIT WORK;

       if (OERROR)
            err_mesg("COMMIT failed",0,""); 

       if (NOT_FOUND)
             break;
    }
}

run_report()
{
  char l_run_string[300],l_messg_str[132];
  int  l_ret_run_rep;

#ifdef DEBUG
   disp_message(INFO_MESG,"Inside Run report\n");
#endif

  disp_message(INFO_MESG,"Generating Detail report\n");

if (nd_rep_type.arr[0] == 'D')
{
     sprintf(l_run_string,"runrep %s %s no \
%s session_id=%s pgm_date=%s %s desname=%s.lis",
     "arrgldtl", uid_pwd.arr,
     (nd_view_print_flg.arr[0]=='V')?"batch=no":"batch=yes",
     nd_session_id.arr,g_pgm_date,
     (nd_view_print_flg.arr[0]=='V')?"destype=Screen":"destype=File",
      "arrgldtl");
 
      l_ret_run_rep = WinExec(l_run_string,SW_NORMAL);
      if (l_ret_run_rep < 32)
      { disp_message(ERR_MESG,"Error in calling Report Writer Program");
        proc_exit();
      }  
      if (l_ret_run_rep)
      {
         sprintf("%s\n",l_run_string);
         sprintf(l_messg_str,"RUNREP-arrgldis session=%s pgm dt = %s failed \
return value %d",
         nd_session_id.arr,nd_pgm_date.arr,l_ret_run_rep);
         err_mesg(l_messg_str,0,"");
       }

  disp_message(INFO_MESG,"Generating Summary report\n");

       sprintf(l_run_string,"runrep %s %s no \
 %s session_id=%s pgm_date=%s %s desname=%s.lis",
       "arrgldsm",uid_pwd.arr,
       (nd_view_print_flg.arr[0]=='V')?"batch=no":"batch=yes",
       nd_session_id.arr,g_pgm_date,
       (nd_view_print_flg.arr[0]=='V')?"destype=Screen":"destype=File",
       "arrgldsm");
 
       l_ret_run_rep = WinExec(l_run_string,SW_NORMAL);
      if (l_ret_run_rep < 32)
      { disp_message(ERR_MESG,"Error in calling Report Writer Program");
        proc_exit();
      }

       if (l_ret_run_rep)
       {
          sprintf("%s\n",l_run_string);
          sprintf(l_messg_str,
           "RUNREP - arrgldsm session = %s pgm dt = %s failed return value %d",
           nd_session_id.arr,nd_pgm_date.arr,l_ret_run_rep);
           err_mesg(l_messg_str,0,"");
        }
 }
 else
 {
      sprintf(l_run_string,"runrep %s %s no \
  %s session_id=%s pgm_date=%s %s desname=%s.lis",
     "arrgldsm", uid_pwd.arr,
     (nd_view_print_flg.arr[0]=='V')?"batch=no":"batch=yes",
     nd_session_id.arr,g_pgm_date,
     (nd_view_print_flg.arr[0]=='V')?"destype=Screen":"destype=File",
     "arrgldsm");
      l_ret_run_rep = WinExec(l_run_string,SW_NORMAL);
      if (l_ret_run_rep < 32)
      { disp_message(ERR_MESG,"Error in calling Report Writer Program");
        proc_exit();
      }

      if (l_ret_run_rep)
      {
         sprintf("%s\n",l_run_string);
         sprintf(l_messg_str,
             "RUNREP-arrgldsm session=%s pgm dt = %s failed return value %d",
            nd_session_id.arr,nd_pgm_date.arr,l_ret_run_rep);
         err_mesg(l_messg_str,0,"");
       }
 }
#ifdef DEBUG
   disp_message(INFO_MESG,"After run rep...\n");
#endif
}

/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : ARBYREND.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 23-FEB-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        AR_CUSTOMER                 Update                 */
/*         2.        AR_PENDING_DOC              Query                  */
/*         3.        SY_PROG_CONTROL          Update/Lookup             */
/*         4.        SY_PROG_MESG                Insert                 */
/*         5.        AR_INV_HDR               Query/Delete              */
/*         6.        AR_INV_LINE              Query/Delete              */
/*         7.        AR_DN_HDR                Query/Delete              */
/*         8.        AR_DN_INV_HDR            Query/Delete              */
/*         9.        AR_DN_LINE               Query/Delete              */
/*        10.        AR_CN_HDR                Query/Delete              */
/*        11.        AR_CN_INV_HDR            Query/Delete              */
/*        12.        AR_CN_LINE               Query/Delete              */
/*        13.        AR_ADJ_HDR               Query/Delete              */
/*        14.        AR_ADJ_INV_HDR           Query/Delete              */
/*        15.        AR_ADJ_LINE              Query/Delete              */
/*        16.        AR_PAY_HDR               Query/Delete              */
/*        17.        AR_PAY_LINE              Query/Delete              */
/*        18.        AR_REC_HDR               Query/Delete              */
/*        19.        AR_REC_LINE              Query/Delete              */
/*        20.        AR_PARAMETER             Query/Update              */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <math.h>
#include <string.h>
#include "gl.h"
/*
#define OERROR (sqlca.sqlcode < 0)
*/
#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)

#define RESOURCE_BUSY        (sqlca.sqlcode == -54)   
#define VIEW_LOG_FILE 1

/*
#define DEBUG 0
*/
EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd[132];

   VARCHAR  nd_facility_id         [3],
			nd_session_id          [16],
            nd_pgm_date            [25],
			p_language_id		   [3],
            nd_gl_interface_method [4];

   VARCHAR  ar_interface_code      [3],
            nd_clr_cum_sales_amt   [3];

   VARCHAR  ar_customer_cust_code  [10],
            d_doc_type_code        [7],
            d_doc_num              [9],
            d_rowid                [31],
            d_dummy                [2][10];

       int  ar_pending_count    = 0,
            curr_acc_month      = 0,
            curr_acc_year       = 0,
            num_acc_period      = 0,
            start_fiscal_month  = 0;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include "winproc.h"

int  rec_exists = 0;

void proc_main(argc,argv)
char *argv[];
int argc;
{
   char mesg1[50];
   if (argc != 5)
   {
    int i = 0;
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(g_pgm_id,"ARBYREND");
 
   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   strcpy(g_facility_id,argv[4]);

   if(sql_connect() == -1)
   {
      disp_message(ERR_MESG,"Error in connecting to Oracle");
      sprintf(mesg1,"Error is %s\n",sqlca.sqlerrm.sqlerrmc);
      disp_message(ERR_MESG,mesg1);
      proc_exit();
   }

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);
 
   set_meduser_role();

   	strcpy(p_language_id.arr,l_language_id.arr);
	p_language_id.len = l_language_id.len;
      
   chk_active();

   start_prog_control();
   start_prog_msg();
   
  
   fetch_ar_param();


   if (curr_acc_month != 12)
   {
      err_mesg("",1,"AR2150");
      proc_exit();
   } 
  
   
   nd_gl_interface_method.arr[0]    = '\0';
   nd_clr_cum_sales_amt.arr[0]      = '\0';

   nd_gl_interface_method.len       = 0;
   nd_clr_cum_sales_amt.len         = 0;
 

   EXEC SQL SELECT  operating_facility_id, PARAM1,PARAM2
              INTO  :nd_facility_id,
				   :nd_gl_interface_method, :nd_clr_cum_sales_amt
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBYREND'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   nd_gl_interface_method.arr[nd_gl_interface_method.len] = '\0';
   nd_clr_cum_sales_amt.arr[nd_clr_cum_sales_amt.len] = '\0';

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");


   delete_prog_param();

   lock_tables();


   declare_cursors();

   rec_exists = 0;

   if (check_inv_hdr())
       disp_mesg("",1,"AR2080");
   if (check_dn_hdr())
       disp_mesg("",1,"AR2090");
   if (check_cn_hdr())
       disp_mesg("",1,"AR2100");
   if (check_adj_hdr())
       disp_mesg("",1,"AR2110");
   if (check_rec_hdr())
       disp_mesg("",1,"AR2120");
   if (check_pay_hdr())
       disp_mesg("",1,"AR2130");

   if (rec_exists)
   {
        end_prog_control();
        EXEC SQL COMMIT WORK RELEASE;
        proc_exit();
   }


/*----- Marked For Deletion to avoid deleting the records----*/
/*----------------- From the Transactions -------------------*/
/*   delete_recs();   */
/*-----------------------------------------------------------*/
   update_ar_customer(); 
   update_ar_parameter();


   end_prog_msg();
   end_prog_control();
   EXEC SQL COMMIT WORK RELEASE;

}

lock_tables()
{

   EXEC SQL LOCK TABLE AR_CUSTOMER
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2190");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_CUSTOMER",0,"");

   EXEC SQL LOCK TABLE AR_PARAMETER
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2290");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_PARAMETER",0,"");

   EXEC SQL LOCK TABLE AR_INV_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2230");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_INV_HDR",0,"");

   EXEC SQL LOCK TABLE AR_INV_LINE
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2230");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_INV_LINE",0,"");

   EXEC SQL LOCK TABLE AR_DN_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2240");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_DN_HDR",0,"");

   EXEC SQL LOCK TABLE AR_DN_INV_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2240");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_DN_INV_HDR",0,"");

   EXEC SQL LOCK TABLE AR_DN_LINE
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2240");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_DN_LINE",0,"");

   EXEC SQL LOCK TABLE AR_CN_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2250");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_CN_HDR",0,"");

   EXEC SQL LOCK TABLE AR_CN_INV_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2250");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_CN_INV_HDR",0,"");

   EXEC SQL LOCK TABLE AR_CN_LINE
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2250");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_CN_LINE",0,"");

   EXEC SQL LOCK TABLE AR_ADJ_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2260");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_ADJ_HDR",0,"");

   EXEC SQL LOCK TABLE AR_ADJ_INV_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2260");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_ADJ_INV_HDR",0,"");

   EXEC SQL LOCK TABLE AR_ADJ_LINE
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2260");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_ADJ_LINE",0,"");

   EXEC SQL LOCK TABLE AR_PAY_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2280");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_PAY_HDR",0,"");

   EXEC SQL LOCK TABLE AR_PAY_LINE
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2280");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_PAY_LINE",0,"");

   EXEC SQL LOCK TABLE AR_REC_HDR
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2270");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_REC_HDR",0,"");

   EXEC SQL LOCK TABLE AR_REC_LINE
              IN EXCLUSIVE MODE NOWAIT;
   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2270");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_REC_LINE",0,"");

}

delete_prog_param()
{
   EXEC SQL DELETE
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBYREND'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   EXEC SQL COMMIT WORK;

   if (OERROR)
         err_mesg("COMMIT failed",0,""); 
}

declare_cursors()
{
   if (ar_interface_code.arr[0] != 'B')
   {
        EXEC SQL DECLARE AR_INV_HDR_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_INV_HDR
                    WHERE POSTED_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_DN_HDR_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_DN_HDR
                    WHERE POSTED_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_CN_HDR_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_CN_HDR
                    WHERE POSTED_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_ADJ_HDR_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_ADJ_HDR
                    WHERE POSTED_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_PAY_HDR_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_PAY_HDR
                    WHERE POSTED_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_REC_HDR_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_REC_HDR
                    WHERE POSTED_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));

    }
    else
    {
        EXEC SQL DECLARE AR_INV_HDR_BAT_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_INV_HDR
                    WHERE POSTED_FLAG = 'Y'
                    AND INTERFACE_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_DN_HDR_BAT_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_DN_HDR
                    WHERE POSTED_FLAG = 'Y'
                    AND INTERFACE_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_CN_HDR_BAT_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_CN_HDR
                    WHERE POSTED_FLAG = 'Y'
                    AND INTERFACE_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_ADJ_HDR_BAT_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_ADJ_HDR
                    WHERE POSTED_FLAG = 'Y'
                    AND INTERFACE_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_PAY_HDR_BAT_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_PAY_HDR
                    WHERE POSTED_FLAG = 'Y'
                    AND INTERFACE_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));


        EXEC SQL DECLARE AR_REC_HDR_BAT_CUR CURSOR FOR
                  SELECT DOC_TYPE_CODE,
                         DOC_NUM,
                         ROWID
                    FROM AR_REC_HDR
                    WHERE POSTED_FLAG = 'Y'
                    AND INTERFACE_FLAG = 'Y'
                    and      ((POST_YEAR   <  :curr_acc_year ) OR
                              (POST_YEAR   =  :curr_acc_year  AND
                               POST_MONTH  <= :curr_acc_month ));

    }
}

fetch_ar_param()
{
   curr_acc_month = 0;
   curr_acc_year  = 0;

   ar_interface_code.arr[0]    = '\0';
   ar_interface_code.len       = 0;

   EXEC SQL SELECT CURRENT_ACC_MONTH, AR_INTERFACE_CODE,
                   CURRENT_ACC_YEAR
              INTO :curr_acc_month,   :ar_interface_code,
                   :curr_acc_year
              FROM AR_PARAMETER;
  
   if (OERROR)
         err_mesg("SELECT failed on table AR_PARAMETER",0,"");

   ar_interface_code.arr[ar_interface_code.len]      = '\0';

   num_acc_period      = 0;
   start_fiscal_month  = 0;

   EXEC SQL SELECT NUM_OF_ACC_PERIODS, START_FISCAL_MONTH
              INTO :num_acc_period,    :start_fiscal_month
              FROM SY_ACC_ENTITY
			 WHERE ACC_ENTITY_ID = :nd_facility_id;
  
   if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

check_inv_hdr()
{

   if (ar_interface_code.arr[0] == 'B')
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_INV_HDR
               WHERE ( NVL(POSTED_FLAG,'N') = 'N' 
                  OR  INTERFACE_FLAG = 'N' )
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     ltrim(TO_CHAR(:curr_acc_year,'0009'))||
                     ltrim(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }
   else
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_INV_HDR
               WHERE  NVL(POSTED_FLAG,'N') = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }

   if (OERROR)
         err_mesg("SELECT failed on table AR_INV_HDR",0,"");


   if (!rec_exists)
         rec_exists = sqlca.sqlerrd[2];

   return(sqlca.sqlerrd[2]);
}

check_dn_hdr()
{

   if (ar_interface_code.arr[0] == 'B')
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_DN_HDR
               WHERE ( NVL(POSTED_FLAG,'N') = 'N' 
                  OR  INTERFACE_FLAG = 'N' )
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }
   else
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_DN_HDR
               WHERE  NVL(POSTED_FLAG,'N') = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }

   if (OERROR)
         err_mesg("SELECT failed on table AR_DN_HDR",0,"");

   if (!rec_exists)
         rec_exists = sqlca.sqlerrd[2];

   return(sqlca.sqlerrd[2]);
}

check_cn_hdr()
{

   if (ar_interface_code.arr[0] == 'B')
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_CN_HDR
               WHERE ( NVL(POSTED_FLAG,'N') = 'N' 
                  OR  INTERFACE_FLAG = 'N' )
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }
   else
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_CN_HDR
               WHERE  NVL(POSTED_FLAG,'N') = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }

   if (OERROR)
         err_mesg("SELECT failed on table AR_CN_HDR",0,"");

   if (!rec_exists)
         rec_exists = sqlca.sqlerrd[2];

   return(sqlca.sqlerrd[2]);
}

check_adj_hdr()
{

   if (ar_interface_code.arr[0] == 'B')
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_ADJ_HDR
               WHERE ( NVL(POSTED_FLAG,'N') = 'N' 
                  OR  INTERFACE_FLAG = 'N' )
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }
   else
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_ADJ_HDR
               WHERE  NVL(POSTED_FLAG,'N') = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }

   if (OERROR)
         err_mesg("SELECT failed on table AR_ADJ_HDR",0,"");

   if (!rec_exists)
         rec_exists = sqlca.sqlerrd[2];

   return(sqlca.sqlerrd[2]);
}

check_pay_hdr()
{

   if (ar_interface_code.arr[0] == 'B')
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_PAY_HDR
               WHERE ( NVL(POSTED_FLAG,'N') = 'N' 
                  OR  INTERFACE_FLAG = 'N' )
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }
   else
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_PAY_HDR
               WHERE  NVL(POSTED_FLAG,'N') = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }

   if (OERROR)
         err_mesg("SELECT failed on table AR_PAY_HDR",0,"");

   if (!rec_exists)
         rec_exists = sqlca.sqlerrd[2];

   return(sqlca.sqlerrd[2]);

}

check_rec_hdr()
{

   if (ar_interface_code.arr[0] == 'B')
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_REC_HDR
               WHERE ( NVL(POSTED_FLAG,'N') = 'N' 
                  OR  INTERFACE_FLAG = 'N' )
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }
   else
   {
     EXEC SQL SELECT 'X'
                INTO :d_dummy
                FROM AR_REC_HDR
               WHERE  NVL(POSTED_FLAG,'N') = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     LTRIM(TO_CHAR(:curr_acc_year,'0009'))||
                     LTRIM(TO_CHAR(:curr_acc_month,'09'))
                 AND ROWNUM = 1;
   }

   if (OERROR)
         err_mesg("SELECT failed on table AR_REC_HDR",0,"");

   if (!rec_exists)
         rec_exists = sqlca.sqlerrd[2];

   return(sqlca.sqlerrd[2]);
}

delete_recs()
{
    delete_invoices();
    delete_debits();
    delete_credits();
    delete_adjus();
    delete_payments();
    delete_receipts();
}

delete_invoices()
{
   open_inv_hdr();
   while (fetch_inv_hdr())
   {
       delete_line(1);
       delete_hdr(1);
   }
}

open_inv_hdr()
{
   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL OPEN AR_INV_HDR_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_INV_HDR_CUR",0,"");
   }
   else
   {
     EXEC SQL OPEN AR_INV_HDR_BAT_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_INV_HDR_BAT_CUR",0,"");
   }
}

fetch_inv_hdr()
{
   d_doc_type_code.arr[0] = '\0';
   d_doc_num.arr[0]       = '\0';
   d_rowid.arr[0]         = '\0';

   d_doc_type_code.len    = 0;
   d_doc_num.len          = 0;
   d_rowid.len            = 0;

   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL FETCH AR_INV_HDR_CUR
               INTO :d_doc_type_code,
                    :d_doc_num,
                    :d_rowid;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_INV_HDR_CUR",0,"");
   }
   else
   {
        EXEC SQL FETCH AR_INV_HDR_BAT_CUR
                  INTO :d_doc_type_code,
                       :d_doc_num,
                       :d_rowid;
        if (OERROR)
           err_mesg("FETCH failed on cursor AR_INV_HDR_BAT_CUR",0,"");
   }
   d_doc_type_code.arr[d_doc_type_code.len]        = '\0';
   d_doc_num.arr[d_doc_num.len]                    = '\0';
   d_rowid.arr[d_rowid.len]                        = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

delete_hdr(no)
int no;
{
   switch (no)
   {
      case 1 :
               EXEC SQL DELETE AR_INV_HDR
                         WHERE ROWID = :d_rowid;
               if (OERROR) err_mesg("DELETE failed on table AR_INV_HDR",0,"");
               break;
      case 2 :
               EXEC SQL DELETE AR_DN_HDR
                         WHERE ROWID = :d_rowid;
               if (OERROR) err_mesg("DELETE failed on table AR_DN_HDR",0,"");
               break;
      case 3 :
               EXEC SQL DELETE AR_CN_HDR
                         WHERE ROWID = :d_rowid;
               if (OERROR) err_mesg("DELETE failed on table AR_CN_HDR",0,"");
               break;
      case 4 :
               EXEC SQL DELETE AR_ADJ_HDR
                         WHERE ROWID = :d_rowid;
               if (OERROR) err_mesg("DELETE failed on table AR_ADJ_HDR",0,"");
               break;
      case 5 :
               EXEC SQL DELETE AR_PAY_HDR
                         WHERE ROWID = :d_rowid;
               if (OERROR) err_mesg("DELETE failed on table AR_PAY_HDR",0,"");
               break;

      case 6 :
               EXEC SQL DELETE AR_REC_HDR
                         WHERE ROWID = :d_rowid;
               if (OERROR) err_mesg("DELETE failed on table AR_REC_HDR",0,"");
               break;
     }
}

delete_inv_hdr(no)
int no;
{
   switch (no)
   {
      case 2 :
               EXEC SQL DELETE AR_DN_INV_HDR
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_DN_INV_HDR",0,"");
               break;
      case 3 :
               EXEC SQL DELETE AR_CN_INV_HDR
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_CN_INV_HDR",0,"");
               break;
      case 4 :
               EXEC SQL DELETE AR_ADJ_INV_HDR
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
              if (OERROR) err_mesg("DELETE failed on table AR_ADJ_INV_HDR",0,"");
              break;
     }
}

delete_line(no)
int no;
{
   switch (no)
   {
      case 1 :
               EXEC SQL DELETE AR_INV_LINE
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_INV_LINE",0,"");
               break;
      case 2 :
               EXEC SQL DELETE AR_DN_LINE
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_DN_LINE",0,"");
               break;
      case 3 :
               EXEC SQL DELETE AR_CN_LINE
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_CN_LINE",0,"");
               break;
      case 4 :
               EXEC SQL DELETE AR_ADJ_LINE
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_ADJ_LINE",0,"");
               break;
      case 5 :
               EXEC SQL DELETE AR_PAY_LINE
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_PAY_LINE",0,"");
               break;

      case 6 :
               EXEC SQL DELETE AR_REC_LINE
                         WHERE DOC_TYPE_CODE = :d_doc_type_code
                           AND DOC_NUM       = :d_doc_num;
               if (OERROR) err_mesg("DELETE failed on table AR_REC_LINE",0,"");
               break;
     }
}

delete_debits()
{
   open_dn_hdr();
   while (fetch_dn_hdr())
   {
       delete_line(2);
       delete_inv_hdr(2);
       delete_hdr(2);
   }
}

open_dn_hdr()
{
   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL OPEN AR_DN_HDR_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_DN_HDR_CUR",0,"");
   }
   else
   {
     EXEC SQL OPEN AR_DN_HDR_BAT_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_DN_HDR_BAT_CUR",0,"");
   }
}

fetch_dn_hdr()
{
   d_doc_type_code.arr[0] = '\0';
   d_doc_num.arr[0]       = '\0';
   d_rowid.arr[0]         = '\0';

   d_doc_type_code.len    = 0;
   d_doc_num.len          = 0;
   d_rowid.len            = 0;

   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL FETCH AR_DN_HDR_CUR
               INTO :d_doc_type_code,
                    :d_doc_num,
                    :d_rowid;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_DN_HDR_CUR",0,"");
   }
   else
   {
        EXEC SQL FETCH AR_DN_HDR_BAT_CUR
                  INTO :d_doc_type_code,
                       :d_doc_num,
                       :d_rowid;
        if (OERROR)
           err_mesg("FETCH failed on cursor AR_DN_HDR_BAT_CUR",0,"");
   }
   d_doc_type_code.arr[d_doc_type_code.len]        = '\0';
   d_doc_num.arr[d_doc_num.len]                    = '\0';
   d_rowid.arr[d_rowid.len]                        = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

delete_credits()
{
   open_cn_hdr();
   while (fetch_cn_hdr())
   {
       delete_line(3);
       delete_inv_hdr(3);
       delete_hdr(3);
   }
}

open_cn_hdr()
{
   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL OPEN AR_CN_HDR_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_CN_HDR_CUR",0,"");
   }
   else
   {
     EXEC SQL OPEN AR_CN_HDR_BAT_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_CN_HDR_BAT_CUR",0,"");
   }
}

fetch_cn_hdr()
{
   d_doc_type_code.arr[0] = '\0';
   d_doc_num.arr[0]       = '\0';
   d_rowid.arr[0]         = '\0';

   d_doc_type_code.len    = 0;
   d_doc_num.len          = 0;
   d_rowid.len            = 0;

   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL FETCH AR_CN_HDR_CUR
               INTO :d_doc_type_code,
                    :d_doc_num,
                    :d_rowid;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_CN_HDR_CUR",0,"");
   }
   else
   {
        EXEC SQL FETCH AR_CN_HDR_BAT_CUR
                  INTO :d_doc_type_code,
                       :d_doc_num,
                       :d_rowid;
        if (OERROR)
           err_mesg("FETCH failed on cursor AR_CN_HDR_BAT_CUR",0,"");
   }
   d_doc_type_code.arr[d_doc_type_code.len]        = '\0';
   d_doc_num.arr[d_doc_num.len]                    = '\0';
   d_rowid.arr[d_rowid.len]                        = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

delete_adjus()
{
   open_adj_hdr();
   while (fetch_adj_hdr())
   {
       delete_line(4);
       delete_inv_hdr(4);
       delete_hdr(4);
   }
}

open_adj_hdr()
{
   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL OPEN AR_ADJ_HDR_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_ADJ_HDR_CUR",0,"");
   }
   else
   {
     EXEC SQL OPEN AR_ADJ_HDR_BAT_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_ADJ_HDR_BAT_CUR",0,"");
   }
}

fetch_adj_hdr()
{
   d_doc_type_code.arr[0] = '\0';
   d_doc_num.arr[0]       = '\0';
   d_rowid.arr[0]         = '\0';

   d_doc_type_code.len    = 0;
   d_doc_num.len          = 0;
   d_rowid.len            = 0;

   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL FETCH AR_ADJ_HDR_CUR
               INTO :d_doc_type_code,
                    :d_doc_num,
                    :d_rowid;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_ADJ_HDR_CUR",0,"");
   }
   else
   {
        EXEC SQL FETCH AR_ADJ_HDR_BAT_CUR
                  INTO :d_doc_type_code,
                       :d_doc_num,
                       :d_rowid;
        if (OERROR)
           err_mesg("FETCH failed on cursor AR_ADJ_HDR_BAT_CUR",0,"");
   }
   d_doc_type_code.arr[d_doc_type_code.len]        = '\0';
   d_doc_num.arr[d_doc_num.len]                    = '\0';
   d_rowid.arr[d_rowid.len]                        = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

delete_payments()
{
   open_pay_hdr();
   while (fetch_pay_hdr())
   {
       delete_line(5);
       delete_hdr(5);
   }
}

open_pay_hdr()
{
   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL OPEN AR_PAY_HDR_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_PAY_HDR_CUR",0,"");
   }
   else
   {
     EXEC SQL OPEN AR_PAY_HDR_BAT_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_PAY_HDR_BAT_CUR",0,"");
   }
}

fetch_pay_hdr()
{
   d_doc_type_code.arr[0] = '\0';
   d_doc_num.arr[0]       = '\0';
   d_rowid.arr[0]         = '\0';

   d_doc_type_code.len    = 0;
   d_doc_num.len          = 0;
   d_rowid.len            = 0;

   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL FETCH AR_PAY_HDR_CUR
               INTO :d_doc_type_code,
                    :d_doc_num,
                    :d_rowid;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_PAY_HDR_CUR",0,"");
   }
   else
   {
        EXEC SQL FETCH AR_PAY_HDR_BAT_CUR
                  INTO :d_doc_type_code,
                       :d_doc_num,
                       :d_rowid;
        if (OERROR)
           err_mesg("FETCH failed on cursor AR_PAY_HDR_BAT_CUR",0,"");
   }
   d_doc_type_code.arr[d_doc_type_code.len]        = '\0';
   d_doc_num.arr[d_doc_num.len]                    = '\0';
   d_rowid.arr[d_rowid.len]                        = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

delete_receipts()
{
   open_rec_hdr();
   while (fetch_rec_hdr())
   {
       delete_line(6);
       delete_hdr(6);
   }
}

open_rec_hdr()
{
   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL OPEN AR_REC_HDR_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_REC_HDR_CUR",0,"");
   }
   else
   {
     EXEC SQL OPEN AR_REC_HDR_BAT_CUR;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_REC_HDR_BAT_CUR",0,"");
   }
}

fetch_rec_hdr()
{
   d_doc_type_code.arr[0] = '\0';
   d_doc_num.arr[0]       = '\0';
   d_rowid.arr[0]         = '\0';

   d_doc_type_code.len    = 0;
   d_doc_num.len          = 0;
   d_rowid.len            = 0;

   if (ar_interface_code.arr[0] != 'B')
   { 
     EXEC SQL FETCH AR_REC_HDR_CUR
               INTO :d_doc_type_code,
                    :d_doc_num,
                    :d_rowid;
     if (OERROR)
         err_mesg("OPEN failed on cursor AR_REC_HDR_CUR",0,"");
   }
   else
   {
        EXEC SQL FETCH AR_REC_HDR_BAT_CUR
                  INTO :d_doc_type_code,
                       :d_doc_num,
                       :d_rowid;
        if (OERROR)
           err_mesg("FETCH failed on cursor AR_REC_HDR_BAT_CUR",0,"");
   }
   d_doc_type_code.arr[d_doc_type_code.len]        = '\0';
   d_doc_num.arr[d_doc_num.len]                    = '\0';
   d_rowid.arr[d_rowid.len]                        = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

  
update_ar_customer()
{

   if (nd_clr_cum_sales_amt.arr[0] == 'Y')
   {
      EXEC SQL UPDATE AR_CUSTOMER 
                  SET MTD_SALES_AMT = 0,
                      YTD_SALES_AMT = 0,
                      CUMULATIVE_SALES_AMT = 0;
      if (OERROR)
         err_mesg("UPDATE failed on table  AR_CUSTOMER - 1",0,"");
   }
   else
   {
      EXEC SQL UPDATE AR_CUSTOMER 
                  SET MTD_SALES_AMT = 0,
                      YTD_SALES_AMT = 0;
      if (OERROR)
         err_mesg("UPDATE failed on table  AR_CUSTOMER - 2",0,"");
   }
}
 
update_ar_parameter()
{
   EXEC SQL UPDATE AR_PARAMETER
               SET AR_INTERFACE_CODE   = :nd_gl_interface_method,
                   CURRENT_ACC_MONTH   = 1,
                   CURRENT_ACC_YEAR    = NVL(CURRENT_ACC_YEAR,0) + 1;

   if (OERROR)
         err_mesg("UPDATE failed on table AR_PARAMETER",0,"");
    
   if (ar_interface_code.arr[0] == 'N')
   { 
 
   EXEC SQL UPDATE GL_PARAMETER
               SET   CURRENT_ACC_YEAR = NVL(:curr_acc_year,0) + 1
			   WHERE NVL(CURRENT_ACC_YEAR,0) < :curr_acc_year + 1;

   if (OERROR)
         err_mesg("UPDATE failed on table GL_PARAMETER",0,"");
   }

}


 
/*****************************************************************************
*  File	         : btrustat.pc
   Author        : Shruti
   Date Created  : 18/02/2003
   Last Modified : 29/05/2004
   By            : Hameed

*  Ver 1.10.01    
   
*  Purpose : To Create Worklist Date for the given Specimen Range     
            
*  Input Parameters : 
                      Command line inputs
		      1. Usr_id/Password
                      2. Session id
		      3. Program Date     
                                       
  
*  Table Accessed : BT_UNIT_REQUEST_HDR
					BT_UNIT_REQUEST_DTL
					BT_UNIT_REQUEST_CATEGORY
					BT_BLOOD_UNITS_MAST
					BT_ALIQUOT_UNITS
					BT_PARAM
					BT_CATEGORY_MAST
					IP_WARD
					OP_CLINIC
					RL_REFERRAL
					SY_PHYSICIAN_MAST
					RL_CONSULTANTS
					MP_PATIENT_MAST
*****************************************************************************/

#include <stdio.h>
#include <string.h>
#include <math.h>

#define MAX_LINES 58
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define LAST_ROW 	(sqlca.sqlcode == 1403)
#define VER  "VER : 1.10.01\n"
#define REP_WIDTH 80


#define ESC 0x1B

/*
#define DEBUG 
*/

EXEC SQL BEGIN DECLARE SECTION;

       /* increased the length all varchar variables by one to take care */
       /* for null termination */
	VARCHAR uid_pwd					[111],
			nd_session_id			[16],
			nd_pgm_date				[31],
			nd_user					[51],			
            sy_entity_id            [51],
			d_curr_date				[31],
			d_acc_entity_name		[400],
			d_user					[51],
			d_facility_id			[3],
			nd_operating_facility_id	[5],
			d_ordered_facility_id	[5],
			d_sysdate				[31],
			d_sysdate1				[31],
			nd_file_name			[150], 
			d_source_desc			[120],
			d_consultant_name	     	[120], 
  		    d_flag				    	[3],
			l_cust_id				[50];//added for GHL-CRF-0314 by krishnamoorthys

	/******FIELDS FROM BT_UNIT_REQUEST_HDR**************/
	VARCHAR	d_patient_id			[31],
			d_episode_type			[21],
			d_source_code			[21],
			d_source_type			[21],
			d_consultant_code		[21],
			d_blood_group			[5],
			d_rhesus_code			[5],
			d_comment_code			[21],
			d_added_date			[31],
			d_specimen_no			[31],
			d_episode_no			[31];

	/******FIELDS FROM BT_UNIT_REQUEST_CATEGORY**************/
	VARCHAR	d_category_code			[31],
	        d_cat_prod_code         [31],
			d_remarks				[501];

	int		d_category_requested,	
			d_category_allocated;

	/******FIELDS FROM BT_UNIT_REQUEST_DTL**************/
	VARCHAR	d_unit_no				[31],
			d_product_code			[31],
			d_reserved_date			[31],
			d_req_date_time			[31],
			d_crossmatched_yn		[2],
			d_ignore_crossmatch_yn	[2],
			d_ignore_remarks			[1001],
			d_unit_status			[21],
			d_allocated_by			[31],
			d_issued_by			[31],
			d_issued_to				[31],
			d_issued_on			[31],
			
			d_expiry_date			[50]; //added for ghl-crf-0314 by krishnamoorthys

	/******FIELDS FROM BT_BLOOD_UNITS_MAST**************/
	VARCHAR	nd_blood_group			[5],
			nd_rhesus_code			[5],
			d_current_volume			[6],
			d_volume_units			[5],
			d_aliquoted_yn			[2];

	/******FIELDS FROM BT_ALIQUOT_UNITS**************/
	VARCHAR	d_aliquot_rmks			[1001];

	/******FIELDS FROM BT_PARAM***********************/
	VARCHAR	d_footer_line_1			[201],
			d_footer_line_2			[201];

	/******FIELDS FROM MP_PATIENT_MAST***********************/
	VARCHAR	d_patient_name			[300],
			d_date_of_birth			[100],
			d_sex					[100];

/******FIELDS FROM BT_CATEGORY_MAST***********************/
	VARCHAR	d_short_desc			[100];


/******FIELDS FROM BT_CMATCH_COMMENTS_MAST***********************/
	VARCHAR	d_comment_desc			[1000];

	VARCHAR	l_translated_value		 [1000],
		language_id			[5];

/***********************************************************************/
int l_count = 0;
int i;
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char    file_name[30],
		file_name2[30],
		string_var[1000];
		
char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1],
     hdr_line4[REP_WIDTH+1],
     hdr_line5[REP_WIDTH+1];

char rep_title2[30];
char con_rep_title[60];

int		line_no;
int		page_no = 1;

FILE *f1;

void end_report();

char local_legend[32][100];

void proc_main(argc, argv)
int argc;
char *argv[];

{
 int fetch_category_cur();
 int fetch_patient_dtl_cur();

   if(argc != 7) 
   {
     disp_message(ERR_MESG,"Usage btrustat uid/passwd session_id pgm_date\n");
     proc_exit();
   }


   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   strcpy(nd_operating_facility_id.arr, argv[4]);
   nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr); 

   strcpy(d_specimen_no.arr, argv[5]);
   d_specimen_no.len = strlen(d_specimen_no.arr); 

   strcpy(d_flag.arr, argv[6]);
   d_flag.len = strlen(d_flag.arr); 


   EXEC SQL CONNECT :uid_pwd;  

   if(OERROR)
      disp_message(ORA_MESG,"Failed to connect using : %s\n");

#ifdef DEBUG
    printf("Connected to ORACLE as user: %s \n", uid_pwd.arr);
#endif  

	set_meduser_role();

	strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';

	gen_file_name();
	
	get_legend_value(34);//changed 31 to 34 for ghl-crf-0314 by krishnamoorthys

	do_report();
	
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   
   EXEC SQL COMMIT WORK RELEASE;
   
   fclose(f1);
   return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();
}   
/* ---------------------------------------------------- */


get_legend_value(int cou)
 {
   


	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'BTRUSTAT.LEGEND_');
	END;
	END-EXEC;




 for (i=1; i<=cou; i++)
	{
	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('BTRUSTAT.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);


	}


 }

//A1 added the below code for GHL-CRF-0314 by krishnamoorthys
get_cust_id()
{
 EXEC SQL SELECT CUSTOMER_ID
		   INTO :l_cust_id
		   FROM SM_SITE_PARAM;

	if (OERROR)
       disp_message(ORA_MESG,"Select failed on table SM_SITE_PARAM");    
	
	l_cust_id.arr[l_cust_id.len]                 = '\0';

	
 }
// end A1 GHL-CRF-0314



/*
get_entity_id()
{
 EXEC SQL SELECT COUNT(1)
	 INTO :l_count
	 FROM SY_ACC_ENTITY;
 if (l_count > 1) 
   {
   EXEC SQL SELECT NVL(default_entity_id, 'ZZ')
		  		INTO :sy_entity_id
		  		FROM RL_PARAM;
   }
  else
   {
   EXEC SQL SELECT acc_entity_id INTO :sy_entity_id
	FROM SY_ACC_ENTITY;
   }
   if (OERROR)
         disp_message(ORA_MESG,"Select failed on table SY_ACC_ENTITY");

   sy_entity_id.arr[sy_entity_id.len] = '\0';
}
*/
/* ---------------------------------------------------- */

/************ get the header details ************/
get_header_dtls()
{
 

   EXEC SQL SELECT SUBSTR(acc_entity_name, 1, 60), 
			  USER,
			  TO_CHAR(sysdate, 'DD/MM/YYYY HH24:MI')
	    INTO :d_acc_entity_name,
			 :d_user,
			 :d_sysdate
            FROM SY_ACC_ENTITY_LANG_VW
            WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			AND LANGUAGE_ID = :language_id;

        EXEC SQL EXECUTE
		BEGIN
		  GET_LOCALE_DATE_2T.CONVERT_TO_LOCALE_DATE (to_date(:d_sysdate,'DD/MM/YYYY HH24:MI'), :language_id, :d_sysdate, 'DD/MM/YYYY HH24:MI');
		END;
		END-EXEC;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';



 }

/*****************************DO REPORT***************************/
do_report()
{
    //get_entity_id();
	//disp_message(ERR_MESG,"testing 29 apr 2014") ;
	get_cust_id();//Added for GHL-CRF-0314 by krishnamoorthys
	get_header_dtls();
	get_patient();
	print_patient_dtls();
	do_category();
	get_patient_spec_dtls();
	get_footer();
	end_report();
	
}

/****************************GEN FILE NAME***********************/
gen_file_name()
{
	 /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 strcat(nd_file_name.arr,"btrustat.lis");
	 nd_file_name.len = strlen(nd_file_name.arr);

	 if ((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
	   sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var) ;
       proc_exit();
     }
}

/*----------------------------------------------------------------------------*/




print_title()
{
	int l_pos = 0;
	int l_pos2 = 0;
	int l_rem_pos = 0;
	int l_len = 0;
	int l_page_pos = 0;

	char l_string[100];

	line_no = 0;

	/**** first line ***********/	
	fprintf(f1, "MDL : BT");
	
	l_pos = (int)(((80 - d_acc_entity_name.len)/2));
	l_pos = l_pos - 8;
	sprintf(string_var, "%-*s%s", l_pos, " ", d_acc_entity_name.arr);
	
	   

	fprintf(f1, "%s", string_var);

	/**** second line ***********/
	l_pos2 = (l_pos + d_acc_entity_name.len);
	l_pos2 = 53 - l_pos2;	
	sprintf(string_var, "%-*s%s", l_pos2, " ", d_sysdate.arr);


//	fprintf(f1, "%-10.10s\n", d_sysdate.arr);
	fprintf(f1, "%s\n", string_var);

	fprintf(f1, "OPR : %s\n" , d_user.arr );

	l_len = 10;

	fprintf(f1, "REP : BTRUSTAT");
	sprintf(l_string,"%s",local_legend[22]);
	//strcpy(l_string, "UNITS  REPORT");
	l_pos = (int)(((80 - strlen(l_string))/2));
	l_pos = l_pos - 14;
	l_page_pos = l_pos;
//	l_pos = l_pos - l_len;
	sprintf(string_var, "%-*s%s", l_pos, " ", l_string);
	fprintf(f1, "%s", string_var);

	
	l_rem_pos =  (l_page_pos + strlen(l_string));
	l_rem_pos = 52 - l_rem_pos;

	sprintf(string_var, "%-*s%s : %d", l_rem_pos, " ", local_legend[27], page_no);
	fprintf(f1, "%s\n", string_var);

	fprintf(f1, "------------------------------------------------------------------------------\n");
	line_no = 3;

}
/*----------------------------------------------------------------------------*/
fprint_repeat(l_fp,l_prn_chr,l_no)
FILE *l_fp;
char l_prn_chr;
int  l_no;
{
   int l_i = 0;

   for (l_i = 0;l_i < l_no;l_i++)
        fputc(l_prn_chr,l_fp);
}
/*-----------------------------------------------------*/

/***********GET PATIENT**********************/

get_patient()
{

 d_patient_id.arr[0]		='\0';
 d_patient_id.len			=0;
 d_episode_type.arr[0]		='\0';
 d_episode_type.len			=0;
 d_source_code.arr[0]		='\0';
 d_source_code.len			=0;
 d_source_type.arr[0]		='\0';
 d_source_type.len			=0;
 d_consultant_code.arr[0]	='\0';
 d_consultant_code.len		=0;
 d_blood_group.arr[0]		='\0';
 d_blood_group.len			=0;
 d_rhesus_code.arr[0]		='\0';
 d_rhesus_code.len			=0;
 d_comment_code.arr[0]		='\0';
 d_comment_code.len			=0;
 d_added_date.arr[0]		='\0';
 d_added_date.len			=0;
 d_episode_no.arr[0]		='\0';
 d_episode_no.len			=0;
 d_ordered_facility_id.arr[0]	=	'\0';
 d_ordered_facility_id.len		= 0;
                                                                                                            

    EXEC SQL	SELECT	A.patient_id,A.episode_type,A.episode_no,A.source_type,
						A.source_code,A.consultant_code, A.blood_group, A.rhesus_code,
						A.comment_code,to_char(A.added_date,'dd/mm/yyyy hh24:mi'),
						B.ordered_facility_id
				INTO	:d_patient_id,:d_episode_type, :d_episode_no,
						:d_source_type, :d_source_code,
						:d_consultant_code,:d_blood_group,:d_rhesus_code,
						:d_comment_code,:d_added_date, :d_ordered_facility_id
				FROM BT_UNIT_REQUEST_HDR A, RL_REQUEST_HEADER B
				WHERE A.specimen_no =:d_specimen_no
				AND	  A.operating_facility_id = :nd_operating_facility_id
				AND A.specimen_no = B.specimen_no
				AND A.operating_facility_id = B.operating_facility_id;

// added the table RL_REQUEST_HEADER and corresponding where condition on 03/02/2010						

	    d_patient_id.arr[d_patient_id.len]				='\0';
		d_episode_type.arr[d_episode_type.len]			='\0';
		d_episode_no.arr[d_episode_no.len]				='\0';
		d_source_type.arr[d_source_type.len]			='\0';
 		d_source_code.arr[d_source_code.len]			='\0';
 		d_consultant_code.arr[d_consultant_code.len]	='\0';
 		d_blood_group.arr[d_blood_group.len]			='\0';
		d_rhesus_code.arr[d_rhesus_code.len]			='\0';
		d_comment_code.arr[d_comment_code.len]			='\0';
		d_added_date.arr[d_added_date.len]				='\0';
 		d_ordered_facility_id.arr[d_ordered_facility_id.len]	=	'\0';
 
}

/*********PRINT PATIENT DTLS**************/
print_patient_dtls()
{

	print_title();

//	void printt_page_header(); // added by preetham on 01/06/2009

	//fprintf(f1, "------------------------------------------------------------------------------\n");
	fprintf(f1, "%-15s: ",local_legend[1]);
	fprintf(f1, "%-20.20s", d_patient_id.arr);
	get_patient_name();
	fprintf(f1, "\t\t%-30.30s\n", d_patient_name.arr);
	fprintf(f1, "%-15s: ",local_legend[2]);

	if (strcmp(d_sex.arr,"M")==0) 
	{
		fprintf(f1, "%-6.6s",local_legend[28]);
	}
	else if (strcmp(d_sex.arr,"F")==0) 
	{
		fprintf(f1, "%-6.6s",local_legend[29]);
	}
	else
	{
		fprintf(f1, "%-6.6s",local_legend[30]);
	}

//	fprintf(f1, "%-6.6s",d_sex.arr);


	//fprintf(f1, "                        ");
	fprintf(f1, "%-23.23s %-12s: "," ",local_legend[3]);



EXEC SQL EXECUTE
	DECLARE
	t_date   date;
	BEGIN
//	GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_date_of_birth,'DD/MM/YYYY'), :language_id , t_date);
	GET_LOCALE_DATE_2T.CONVERT_TO_LOCALE_DATE (to_date(:d_date_of_birth,'DD/MM/YYYY'), :language_id , :d_date_of_birth, 'DD/MM/YYYY'); // added by preetham on 1/06/2009 wrt leap year issue (and all other get_local_date)
//	:d_date_of_birth := to_char(t_date,'DD/MM/YYYY');
	END;
END-EXEC;





	fprintf(f1, "%-10.10s\n",d_date_of_birth.arr);
	fprintf(f1, "%-15s: ",local_legend[4]);
	fprintf(f1, "%-22.22s", d_specimen_no.arr);
	


EXEC SQL EXECUTE
	DECLARE
	s_date   date;
	BEGIN
//	GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_added_date,'DD/MM/YYYY hh24:mi'), :language_id , s_date);
	GET_LOCALE_DATE_2T.CONVERT_TO_LOCALE_DATE (to_date(:d_added_date,'DD/MM/YYYY HH24:MI'), :language_id , :d_added_date, 'DD/MM/YYYY HH24:MI');
//	:d_added_date := to_char(s_date,'DD/MM/YYYY');
	END;
END-EXEC;


	fprintf(f1, " %-4.4s %-14s : "," ",local_legend[5]);
	fprintf(f1, "%-20.20s\n", d_added_date.arr);
	fprintf(f1, "%-15s: ",local_legend[9]);
	fprintf(f1, "%-5.5s",d_source_code.arr);
	get_source_desc();
	fprintf(f1, "%-15.15s\n",d_source_desc.arr);
	fprintf(f1, "%-15s: ",local_legend[6]);
//	fprintf(f1, "%-5.5s",d_consultant_code.arr);
	get_consultant_name();	
	fprintf(f1, "%s\n",d_consultant_name.arr);	
	fprintf(f1, "%-15s: ",local_legend[7]);
	fprintf(f1, "%1.4s",d_blood_group.arr);
	fprintf(f1, "   ");
	fprintf(f1, "%29.29s %-8s : "," ",local_legend[8]);
	fprintf(f1, "%4.4s\n",d_rhesus_code.arr);
	fprintf(f1, "------------------------------------------------------------------------------\n");


	line_no = line_no + 8;
}

/*------------------PATIENT NAME--------------------*/

get_patient_name()
{

 d_patient_name.arr[0]					= '\0';
 d_patient_name.len						= 0;
 d_date_of_birth.arr[0]					= '\0';
 d_date_of_birth.len					= 0;
 d_sex.arr[0]							= '\0';
 d_sex.len								= 0;
              
			                                                                                                 
    EXEC SQL	SELECT Decode(:language_id,'en',short_name,NVL(short_name_loc_lang,short_name)) ,
				to_char(date_of_birth,'dd/mm/yyyy') date_of_birth,
//				decode(sex ,'M','Male','F','Female') sex
				sex
				INTO :d_patient_name, :d_date_of_birth, :d_sex
				FROM MP_PATIENT_MAST
				WHERE patient_id=:d_patient_id;

	  if (NODATAFOUND)
	{

    EXEC SQL	SELECT SUBSTR(Decode(:language_id,'en',person_name,NVL(person_name_loc_lang,person_name)),1,80),
				to_char(date_of_birth,'dd/mm/yyyy') date_of_birth,
//				decode(sex ,'M','Male','F','Female') sex
				sex
				INTO :d_patient_name, :d_date_of_birth, :d_sex
				FROM MP_EXT_PERSON
				WHERE person_id=:d_patient_id;
	}
									
	d_patient_name.arr[d_patient_name.len]		= '\0';
	d_date_of_birth.arr[d_date_of_birth.len]	= '\0';
	d_sex.arr[d_sex.len]						= '\0';

/*****************  
    if (strlen(d_date_of_birth.arr) > 0) 
	{
		EXEC SQL EXECUTE
		BEGIN
			GET_LOCALE_DATE_2T.CONVERT_TO_LOCALE_DATE (to_date(:d_date_of_birth,'DD/MM/YYYY'), :language_id, :d_date_of_birth, 'DD/MM/YYYY');
		END;
		END-EXEC;
	}	
	d_date_of_birth.arr[d_date_of_birth.len]	= '\0';
****************************/
}

/*------------------CONSULTANT NAME--------------------*/

get_consultant_name()
{

 d_consultant_name.arr[0]	='\0';
 d_consultant_name.len		=0;

	//if (d_episode_type.arr[0] == 'I' || d_episode_type.arr[0]== 'O')

	if (d_episode_type.arr[0] == 'I')
	{
	
			EXEC SQL	SELECT short_name
				INTO :d_consultant_name
				FROM SY_PHYSICIAN_MAST_lang_vw
				WHERE physician_id=:d_consultant_code
				and language_id=:language_id
				and facility_id = :d_ordered_facility_id;					
// Added the condition facility on 03/02/2010
	}

	else if (d_episode_type.arr[0]== 'O')
	{
	
			EXEC SQL	SELECT short_name
				INTO :d_consultant_name
				FROM SY_PHYSICIAN_MAST_lang_vw
				WHERE physician_id=:d_consultant_code
				and language_id = :language_id
				and facility_id = :d_ordered_facility_id;					
// Added the condition facility on 03/02/2010

	}

	else	

	{
	
		EXEC SQL	SELECT short_name
				INTO :d_consultant_name
				FROM RL_CONSULTANTS_LANG_VW
				WHERE ref_consultant_id=:d_consultant_code
				and language_id = :language_id;		

	}	

	d_consultant_name.arr[d_consultant_name.len]	='\0';
		

	if (NODATAFOUND);
  
}

/*------------------SOURCE DESCRIPTION--------------------*/

get_source_desc()
{

   d_source_desc.arr[0]	='\0';
   d_source_desc.len		=0;


	if (d_source_type.arr[0] == 'C')
	{                                                                                                             
			EXEC SQL	SELECT short_desc
				INTO :d_source_desc
				FROM OP_CLINIC_lang_vw
				WHERE clinic_code=:d_source_code
				and language_id = :language_id
				and facility_id = :d_ordered_facility_id;
// Added the facility condition on 03/02/2010
					
	}
    else if (d_source_type.arr[0]== 'W')
	{                                                                                                             


		EXEC SQL	SELECT short_desc
				INTO :d_source_desc
				FROM IP_NURSING_UNIT_LANG_VW
				WHERE nursing_unit_code = :d_source_code
				AND language_id = :language_id
				AND facility_id = :d_ordered_facility_id;

//				FROM IP_WARD
//				WHERE ward_code=:d_source_code;
//	Changed the table from IP_WARD to IP_NURSING_UNIT and added the facility id condition on 03/02/2010
					
	}
	else
	{
		EXEC SQL	SELECT short_desc
				INTO :d_source_desc
				FROM RL_REFERRAL
				WHERE referral_code=:d_source_code;
	}


	d_source_desc.arr[d_source_desc.len]	='\0';

	if (NODATAFOUND);  
}


/********* DECLARE CATEGORY_CURSOR **********/

dclr_category_cur()
{

  EXEC SQL DECLARE CATEGORY_CURSOR CURSOR FOR
          SELECT category_code,product_code,nvl(category_requested,0),nvl(category_allocated,0)
		  FROM BT_UNIT_REQUEST_CATEGORY A
          WHERE A.specimen_no = :d_specimen_no
		  AND	A.operating_facility_id=:nd_operating_facility_id;
}


/********* OPEN CATEGORY CURSOR **********/
open_category_cur()
{
     EXEC SQL OPEN CATEGORY_CURSOR;

}

/********* FETCH CATEGORY CURSOR **********/
int fetch_category_cur()
 
{

  char msg_1[200];

  d_category_code.arr[0]	= '\0';
  d_cat_prod_code.arr[0]    ='\0';
  d_category_code.len		= 0;
  d_category_requested       =0;
  d_category_allocated        =0;
  


  EXEC SQL WHENEVER SQLERROR GOTO err_exit;

  EXEC SQL FETCH CATEGORY_CURSOR	
            INTO :d_category_code,
			     :d_cat_prod_code,
			     :d_category_requested,
			      :d_category_allocated;
 				 
  d_category_code.arr[d_category_code.len]	= '\0';
  d_cat_prod_code.arr[d_cat_prod_code.len]  = '\0';


#ifdef DEBUG
         printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
#endif

  if (NODATAFOUND)
{
    return 0;
}

  return 1;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_Category_cursor() occured....\n");
   proc_exit();

}

/********** CLOSE CATEGORY CURSOR *********/
close_category_cur()
{
  
	 EXEC SQL CLOSE CATEGORY_CURSOR ;

}

/*------------------CATEGORY DESCRIPTION--------------------*/

get_category_desc()
{

 d_short_desc.arr[0]					= '\0';
 d_short_desc.len						= 0;
                                                                                                             
    EXEC SQL	SELECT short_desc
				INTO :d_short_desc
				FROM BT_CATEGORY_MAST_lang_vw
				WHERE CATEGORY_CODE = :d_category_code
				and language_id = :language_id;
									
	d_short_desc.arr[d_short_desc.len]					= '\0';
 	

}

/*------------------CATEGORY COMMENTS--------------------*/

get_comment()
{

 d_comment_desc.arr[0]					= '\0';
 d_comment_desc.len						= 0;
                                                                                                             
    EXEC SQL	SELECT long_desc
				INTO :d_comment_desc
				FROM BT_CMATCH_COMMENT_MAST
				WHERE COMMENT_CODE= :d_comment_code;
									
	d_comment_desc.arr[d_comment_desc.len]					= '\0';
 	
 fprintf(f1, "------------------------------------------------------------------------------\n");	
// fprintf(f1, "Comment : ");
 fprintf(f1, "%s : ",local_legend[31]);
 fprintf(f1, "%-40.40s\n",d_comment_desc.arr);
 fprintf(f1, "------------------------------------------------------------------------------\n\n");	
 line_no=line_no + 4;

}

/************* DO CATEGORY *******************/

do_category()
{

  int still_category_exist=0;

  chk_break(5);
  //fprintf(f1, "%s   %s                %s  \n",local_legend[10],local_legend[11],local_legend[21]);

  fprintf(f1, "%-20s%-30s%-20s\n",local_legend[10],local_legend[11],local_legend[21]);
//  fprintf(f1, "Product Code   Category Name              Units Required  \n");
  fprintf(f1, "------------------------------------------------------------------------------\n");

   line_no = line_no + 2;

  dclr_category_cur();
  open_category_cur();

  still_category_exist = fetch_category_cur();
  while (still_category_exist==1)
  {

       print_category_dtls();

       still_category_exist=fetch_category_cur();
  } 
 
 get_comment();

 close_category_cur();
  	  
 
}

/************************PRINT CATEGORY*********************/
print_category_dtls()
{
  chk_break(1);

 get_category_desc();

 /*fprintf(f1, "%-15.15s",d_cat_prod_code.arr);
 fprintf(f1, "   %-5.5s",d_category_code.arr);
 fprintf(f1, "   ");
 fprintf(f1, "%-20.20s",d_short_desc.arr);
 fprintf(f1, "\t%4d\n",d_category_requested);*/

 fprintf(f1, "%-20s",d_cat_prod_code.arr);
 fprintf(f1, "%-8s",d_category_code.arr);
 fprintf(f1, "%-22s",d_short_desc.arr);
 fprintf(f1, "%d\n",d_category_requested);


 line_no++;
}


/********* DECLARE PATIENT_DETAIL_CURSOR **********/

  dclr_patient_dtl_cur()
  {
  
  EXEC SQL DECLARE PATIENT_DTL_CURSOR CURSOR FOR
        SELECT	A.unit_no,A.product_code,to_char(A.reserved_date,'dd/mm/yyyy hh24:mi:ss'),
				A.crossmatched_yn,A.ignore_crossmatch_yn,
				DECODE(A.ignore_crossmatch_yn,'Y',A.ignore_remarks) ,
//				decode(A.unit_status,'UA','Allocated','UR','Compatible/Suitable','UP',
//				'Incompatible','US','Re-Reserved','UI','Issued','UE','Issued Transferred',
//				'UN','Returned','UT','Transfused') unit_status,
				C.description unit_status,
				A.allocated_by,A.Issued_by,A.issued_to,
				TO_CHAR(A.issued_date, 'DD/MM/YYYY hh24:mi:ss'),
				B.blood_group,B.rhesus_code,B.current_volume,B.volume_units,
				B.aliquoted_yn,to_char(b.expiry_date,'dd/mm/yyyy hh24:mi:ss') //Added "expiry_date" for ghl-crf-0314 by krishnamoorthys
		FROM	BT_UNIT_REQUEST_DTL A, BT_BLOOD_UNITS_MAST B, BT_DECODED_UNIT_STATUS_LANG_VW C
	    WHERE   A.specimen_no = :d_specimen_no
		  AND   A.unit_no = B.unit_no
		  AND   A.product_code = B.product_code
		  AND   A.unit_status = DECODE(:d_flag, 'A', 'UA', 'R', 'UR', 'I', 'UI', 'T', 'UT','X','TF', A.unit_status)
		  AND   A.unit_status = C.dec_unit_status_code
		  AND   C.language_id = :language_id
		  AND	A.operating_facility_id=B.operating_facility_id
		  AND	A.operating_facility_id=:nd_operating_facility_id
		ORDER BY A.unit_no;

}

/*********OPEN PATIENT_DETAIL_CURSOR **********/

 open_patient_dtl_cur()
 {
     EXEC SQL OPEN PATIENT_DTL_CURSOR;

  }

/********* FETCH PATIENT_DETAIL CURSOR **********/
int fetch_patient_dtl_cur()
{
	d_unit_no.arr[0]				=	'\0';
	d_unit_no.len					=	0;
	d_product_code.arr[0]			=	'\0';
	d_product_code.len				=	0;
	d_reserved_date.arr[0]			=	'\0';
	d_reserved_date.len				=	0;
	d_crossmatched_yn.arr[0]		=	'\0';
	d_crossmatched_yn.len			=	0;
	d_ignore_crossmatch_yn.arr[0]	=	'\0';
	d_ignore_crossmatch_yn.len		=	0;
	d_ignore_remarks.arr[0]			=	'\0';
	d_ignore_remarks.len			=	0;
	d_unit_status.arr[0]			=	'\0'; 
	d_unit_status.len				=	0; 
	d_allocated_by.arr[0]			=	'\0';
	d_allocated_by.len				=	0;
	d_issued_by.arr[0]				=	'\0';
	d_issued_by.len					=	0;
	d_issued_to.arr[0]				=	'\0';
	d_issued_to.len					=	0;
	d_issued_on.arr[0]				=	'\0';
	d_issued_on.len					=	0;
	nd_blood_group.arr[0]			=	'\0';
	nd_blood_group.len				=	0;
	nd_rhesus_code.arr[0]			=	'\0';
	nd_rhesus_code.len				=	0;
	d_current_volume.arr[0]			=	'\0';
	d_current_volume.len			=	0;
	d_volume_units.arr[0]			=	'\0';
	d_volume_units.len				=	0;
	d_aliquoted_yn.arr[0]			=	'\0';
	d_aliquoted_yn.len				=	0;
	
	d_expiry_date.arr[0]			=	'\0';//Added for ghl-crf-0314 by krishnamoorthys
	d_expiry_date.len				=	0;//Added for ghl-crf-0314 by krishnamoorthys

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;

  EXEC SQL FETCH PATIENT_DTL_CURSOR	
            INTO	:d_unit_no,
					:d_product_code,
					:d_reserved_date,
					:d_crossmatched_yn,
					:d_ignore_crossmatch_yn,
					:d_ignore_remarks,
					:d_unit_status,
					:d_allocated_by,
					:d_issued_by,
					:d_issued_to,
					:d_issued_on,
					:nd_blood_group,
					:nd_rhesus_code,
					:d_current_volume,
					:d_volume_units,
					:d_aliquoted_yn,
					:d_expiry_date; //Added for ghl-crf-0314 by krishnamoorthys

    if (strlen(d_reserved_date.arr) > 0) 
	{
		EXEC SQL EXECUTE
		BEGIN
			GET_LOCALE_DATE_2T.CONVERT_TO_LOCALE_DATE (to_date(:d_reserved_date,'DD/MM/YYYY HH24:MI:SS'), :language_id, :d_reserved_date, 'DD/MM/YYYY HH24:MI:SS');
		END;
		END-EXEC;
	}	
    if (strlen(d_issued_on.arr) > 0) 
	{
		EXEC SQL EXECUTE
		BEGIN
			GET_LOCALE_DATE_2T.CONVERT_TO_LOCALE_DATE (to_date(:d_issued_on,'DD/MM/YYYY HH24:MI:SS'), :language_id, :d_issued_on, 'DD/MM/YYYY HH24:MI:SS');
		END;
		END-EXEC;
	}	
	
	//*****Added for ghl-crf-0314 by krishnamoorthys********//
	if (strlen(d_expiry_date.arr) > 0) 
	{
		EXEC SQL EXECUTE
		BEGIN
			GET_LOCALE_DATE_2T.CONVERT_TO_LOCALE_DATE (to_date(:d_expiry_date,'DD/MM/YYYY HH24:MI:SS'), :language_id, :d_expiry_date, 'DD/MM/YYYY HH24:MI:SS');
		END;
		END-EXEC;
	}	
     //************//

	d_unit_no.arr[d_unit_no.len]							=	'\0';
	d_product_code.arr[d_product_code.len]					=	'\0';
	d_reserved_date.arr[d_reserved_date.len]				=	'\0';
	d_crossmatched_yn.arr[d_crossmatched_yn.len]			=	'\0';
	d_ignore_crossmatch_yn.arr[d_ignore_crossmatch_yn.len]	=	'\0';
	d_ignore_remarks.arr[d_ignore_remarks.len]				=	'\0';
	d_unit_status.arr[d_unit_status.len]					=	'\0';
	d_allocated_by.arr[d_allocated_by.len]					=	'\0';
	d_issued_by.arr[d_issued_by.len]						=	'\0';
	d_issued_to.arr[d_issued_to.len]						=	'\0';
	d_issued_on.arr[d_issued_on.len]						=	'\0';
	nd_blood_group.arr[nd_blood_group.len]					=	'\0';
	nd_rhesus_code.arr[nd_rhesus_code.len]					=	'\0';
	d_current_volume.arr[d_current_volume.len]				=	'\0';
	d_volume_units.arr[d_volume_units.len]					=	'\0';
	d_aliquoted_yn.arr[d_aliquoted_yn.len]					=	'\0';
	
	d_expiry_date.arr[d_expiry_date.len]					=	'\0';//Added for ghl-crf-0314 by krishnamoorthys





#ifdef DEBUG
         printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
#endif

  if (NODATAFOUND)
{
    return 0;
}
  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
     disp_message(ORA_MESG,"Oracle error at fetch_patient_dtl_cursor() occured....\n");
   proc_exit();

}

/********** CLOSE PATIENT_DTL CURSOR *********/
close_patient_dtl_cur()
{
  
	 EXEC SQL CLOSE PATIENT_DTL_CURSOR ;

}
/************* GET PATIENT SPEC DETAILS *******************/

get_patient_spec_dtls()
{

int still_pat_dtls_exist = 0;
 

 chk_break(7);

 fprintf(f1,"------------------------------------------------------------------------------\n");


//fprintf(f1,"%-20s%-10s%-8s%-8s%-20s%s\n",local_legend[12],local_legend[13],local_legend[14],local_legend[8],local_legend[15],local_legend[16]);
  if (strcmp(l_cust_id.arr,"MC")==0)  //added if/else part for GHL-CRF-0314 by krishnamoorthys
  {
  fprintf(f1,"%-16s%-10s%-6s%-7s%-19s%s\n",local_legend[12],local_legend[13],local_legend[14],local_legend[8],local_legend[15],local_legend[32]);
  fprintf(f1,"%-26s%-8s%-24s%s\n"," ",local_legend[17]," ",local_legend[34]);
  }
  else
  {
  fprintf(f1,"%-16s%-10s%-6s%-7s%-19s%s\n",local_legend[12],local_legend[13],local_legend[14],local_legend[8],local_legend[15],local_legend[16]);
  fprintf(f1,"%-26s%-8s%-24s%s\n"," ",local_legend[17]," ",local_legend[18]);
  }
  


 fprintf(f1,"------------------------------------------------------------------------------\n");
 //fprintf(f1,"%s\n",local_legend[19]);
 //fprintf(f1,"%s\n",local_legend[20]);
 line_no = line_no + 4;


  dclr_patient_dtl_cur();
  open_patient_dtl_cur();

  still_pat_dtls_exist = fetch_patient_dtl_cur();

  while (still_pat_dtls_exist == 1)
  {
      print_patient_spec_dtls();

      still_pat_dtls_exist=fetch_patient_dtl_cur();
  } 
 close_patient_dtl_cur();
 
 fprintf(f1,"\n");
 line_no = line_no + 1;

}
/****************PRINT PATIENT SPEC DETAILS**************/

print_patient_spec_dtls()
{

 chk_break(1);



fprintf(f1,"%-16s",d_unit_no.arr);
 fprintf(f1,"%-10s",d_product_code.arr);
 /*************fprintf(f1,"%-5.5s",d_blood_group.arr);*************/
 fprintf(f1,"%-6s",nd_blood_group.arr);
 /**************fprintf(f1,"%-6.6s",d_rhesus_code.arr);*************/
 fprintf(f1,"%-6s",nd_rhesus_code.arr);

 fprintf(f1,"%-20s",d_unit_status.arr);
 
 if (strcmp(l_cust_id.arr,"MC")==0) //added if/else part for GHL-CRF-0314 by krishnamoorthys
 {
 fprintf(f1,"%s\n",d_expiry_date.arr);
 }
 else
 {
 fprintf(f1,"%s\n",d_reserved_date.arr);
 }

 line_no = line_no + 1;
 
  if ( strlen(d_issued_by.arr) > 0 || strlen(d_issued_to.arr) > 0)
  {
     //fprintf(f1, "Issued by - to - on : ");
	 fprintf(f1, "%-10.10s: %-10.10s",local_legend[23],d_issued_by.arr);
	 fprintf(f1, "%-4s -  %-10.10s",local_legend[24],d_issued_to.arr);
	 fprintf(f1, "%-4.4s - %-20.20s \n",local_legend[25],d_issued_on.arr);
	 //fprintf(f1,"%-20.20s - %-10.10s - %20.20s\n",d_issued_by.arr, d_issued_to.arr,d_issued_on.arr);
	 line_no = line_no + 1;

  }

  if (d_ignore_crossmatch_yn.arr[0] == 'Y') 
  {
 //	fprintf(f1, "Bypass Crossmatch - Remarks : ");
	fprintf(f1, "%s: ",local_legend[19]);
	fprintf(f1,"%-10s\n",d_ignore_remarks.arr);
	line_no = line_no + 1;
  }
 
  if (d_aliquoted_yn.arr[0] == 'Y') 
  {
	get_aliquote_rmks();

	chk_break(1);
	//fprintf(f1, "Aliquot - Remarks : ");
	fprintf(f1, "%s: ",local_legend[20]);
	fprintf(f1,"%s\n",d_aliquot_rmks.arr);

	line_no = line_no + 1;
  }

  
}

/*****************************GET ALIQUOT REMARKS**********************/
get_aliquote_rmks()
{

 d_aliquot_rmks.arr[0]				= '\0';
 d_aliquot_rmks.len					= 0;
                                                                                                            
    EXEC SQL	SELECT SUBSTR(aliquot_remarks, 1, 78)
				INTO :d_aliquot_rmks
				FROM BT_ALIQUOT_UNITS
				WHERE Unit_no=:d_unit_no
					AND product_code=:d_product_code
					AND operating_facility_id = :nd_operating_facility_id;

// added the facility condition on 03/02/2010						

	   d_aliquot_rmks.arr[d_aliquot_rmks.len] = '\0';



}

/*****************************GET FOOTER**********************/
get_footer()
{

 d_footer_line_1.arr[0]					= '\0';
 d_footer_line_1.len					= 0;
 d_footer_line_2.arr[0]					= '\0';
 d_footer_line_2.len					= 0;
                                                                                                            
    EXEC SQL	SELECT SUBSTR(footer_line_1, 1, 75), SUBSTR(footer_line_2, 1, 75)
				INTO :d_footer_line_1,:d_footer_line_2
				FROM BT_PARAM;
										

	   d_footer_line_1.arr[d_footer_line_1.len] = '\0';
	   d_footer_line_2.arr[d_footer_line_2.len] = '\0';
	
	  chk_break(5);


 fprintf(f1,"------------------------------------------------------------------------------\n");			

 if ( strlen(d_footer_line_1.arr) > 0)
 {
	fprintf(f1,"%-s\n\n",d_footer_line_1.arr);
 }

 if (strlen(d_footer_line_2.arr) > 0)
 {
	fprintf(f1,"%-s\n",d_footer_line_2.arr);
 }

 if (strlen(d_footer_line_1.arr) > 0 || strlen(d_footer_line_2.arr) > 0 )
 {
	fprintf(f1,"------------------------------------------------------------------------------\n");			
 }

}


void end_report()
{
  int rec_len;

  fprintf(f1,"\n");  
  rec_len = strlen(local_legend[26]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"******* %s *******\n", local_legend[26]); // added for globalisation
  fprintf(f1,"\n");
 // fprintf(f1,"\f");
}


/*** added for globalisation ******/
	print_space(int aa, int bb, int cc)
	{
		if (cc ==1)
		{
  			for(i=1;i <= (aa - bb) ;i++)
			{
				fprintf(f1,"%s"," ");
			}	
		}
		else if (cc ==0)
		{
  			for(i= (aa - bb);i <= aa ;i++)
			{
				fprintf(f1,"%s","-");
			}	
		}
	}
/*** added for globalisation ******/




/******************CHECK BREAK**************/
chk_break(int l_no)
{


     if (line_no + l_no  >= MAX_LINES) 
     {

	     line_no=0;
	     fprintf(f1,"\f");
	     fprintf(f1,"\n");
  		 page_no++;
		 print_title();
//		 printt_page_header();
     }

}


/************************************ THE END ************************************/
#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER

#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER


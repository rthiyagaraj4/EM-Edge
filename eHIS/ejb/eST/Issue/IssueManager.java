/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
/*
-------------------------------------------------------------------------------------------------------------------------------------------
Date		            Edit History	        Name		       Rev.Date		     Rev.Name			     Description
-------------------------------------------------------------------------------------------------------------------------------------------
06/04/2017				IN063817				Badmavathi B												 GHL-SCF-1172
23/05/2016				64266					Badmavathi B											     KDAH-SCF-0433
19/06/2019              70724                   B Haribabu                                                   NMC-JD-SCF-0016
2/11/2021				TFS-12775				Shazana				3/11/2021		Manickam			PMG2021-MOHE-CRF-0001
21/10/2021	  			TFS-24350	   			Shazana     										MO-CRF-20173
23/2/2022				TFS27891				Shazana														MO-CRF-20176
01/07/2022				32822					Shazana														ML-BRU-SCF-2182
-------------------------------------------------------------------------------------------------------------------------------------------
*/
package eST.Issue;
//package eST.Issue2;
//
//import java.rmi.RemoteException;
import webbeans.eCommon.*;
import eST.Common.StEJBSessionAdapter;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

/**
*
* @ejb.bean
*	name="Issue"
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="Issue"
*	local-jndi-name="Issue"
*	impl-class-name="eST.Issue.IssueManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="eST.Issue.IssueLocal"
*	remote-class="eST.Issue.IssueRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="eST.Issue.IssueLocalHome"
*	remote-class="eST.Issue.IssueHome"
*	generate= "local,remote"
*
*
*/


public class IssueManager extends StEJBSessionAdapter {
	//HashMap hmData1;
	HashMap hmSQL;
	HashMap	hmReturn;
	String stSQL						= null;

	String stSQLHdrInsert;	
	String stSQLDtlInsert;	
	String stSQLExpInsert;	
	String sql_sy_acc_entity_doc_type_select;	
	String sql_sy_acc_entity_doc_type_update;	
	String sql_sy_acc_entity_doc_type_select_flag;
	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/
   // No changes just Saved for commiting to SVN on 6/07/2011
         
	public HashMap insertIssue(Connection connection, HashMap hmData){

//System.out.println("Test Patch 02/06/2011 - Issue Manager - Enter in insertIssue method");		
		HashMap		hmResult			=	new HashMap();
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alDtlData	=	new ArrayList();
		ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
		ArrayList	alExpRecords=	new ArrayList();
		ArrayList	allanguageData=	new ArrayList();
		ArrayList<ArrayList> alTempData		= new ArrayList<ArrayList>();
		ArrayList<Integer> alItemClassCount	= new ArrayList<Integer>();
		//ArrayList	alItemTrnDtl=	new ArrayList();
		String		to_stk_item_yn="";
		String      dtl_unit_cost="";
		String		from_stk_item_yn="";
		String      uom_code="";
		String      sql		=	"";
		String      trn_type		=	"URG";
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");
		int      sizeOfTrn		=	1;
		int      trnRecords		=	1;
		int      batch_records	=	0;
		int		 prev_batch_records = 0;
		
//System.out.println("Test Patch 02/06/2011 - next");

		//String finalized_yn="";
		//String doc_no	=	"";
		ArrayList doc_no	=	new ArrayList();
		boolean isDocNoAutoGenerated	=	false;
		boolean isFinalized	=	false;
//System.out.println("Test Patch 02/06/2011 - NEXT LEVEL");
		String stCurrentItemCodeInCaseOfError=null;
		ArrayList	alDtlData1			=	(ArrayList)	hmData.get("DTL_DATA");
		HashMap	DTL_Remarks			=	(HashMap)	hmData.get("DTL_REMARKS");

		alTempData		=	(ArrayList) hmData.get("HDR_DATA");
		if(hmData.containsKey("ItemClassCount")){
			alItemClassCount=	(ArrayList) hmData.get("ItemClassCount");
		}
//System.out.println("Test Patch 02/06/2011 - FREE level");
		try {
			boolean site = eCommon.Common.CommonBean.isSiteSpecific(connection, "ST","MUL_FAC_TFR_BATCH_PRICE_MOVE");//Added for MOHE-CRF-0001
			String 	sql_st_records_per_trn_select		=	(String)hmSQL.get ("sql_st_records_per_trn_select");
			String sql_st_store_records_per_trn_select  =   (String)hmSQL.get ("sql_st_store_records_per_trn_select");//MO-CRF-20176
			HashMap records	=	fetchRecord(connection, sql_st_records_per_trn_select,trn_type);
			String fromStore="";//MO-CRF-20176
			fromStore = (String)hmData.get("FROM_STORE"); 
			HashMap records1	=	fetchRecord(connection, sql_st_store_records_per_trn_select,fromStore); 
			int records_per_trn = 0;
			if((String)records.get("RECORDS_PER_TRN")!=null){
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			}else{
				records_per_trn = alDtlData1.size();
			}
			int records_per_trn_urg = 0;//MO-CRF-20176 
			if((String)records1.get("RECORDS_PER_TRN_URG")!=null){
				records_per_trn_urg = Integer.parseInt((String)records1.get("RECORDS_PER_TRN_URG"));
			}  
			System.out.println("records_per_trn: "+records_per_trn);
			System.out.println("records_per_trn_urg:"+records_per_trn_urg);
			if(records_per_trn_urg == 0){
				records_per_trn = records_per_trn;
			}else{
				records_per_trn = records_per_trn_urg;  
			}//END
		//	System.out.println("records_per_trn: "+records_per_trn);
			if(item_class_based.equals("Y")){
				sizeOfTrn = alItemClassCount.size();
			}else{
				if(records_per_trn>alDtlData1.size()){
					sizeOfTrn = 1;
				}else if((alDtlData1.size()%records_per_trn)==0){
					sizeOfTrn = alDtlData1.size()/records_per_trn;
				}else{
					sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;
				}
			}
//System.out.println("Test Patch 02/06/2011 - retrieving");
			stSQLHdrInsert	=	(String)hmSQL.get ("stSQLHdrInsert");
			stSQLDtlInsert	=	(String)hmSQL.get ("stSQLDtlInsert");
			stSQLExpInsert	=	(String)hmSQL.get ("stSQLExpInsert"); 

			sql_sy_acc_entity_doc_type_select		=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select");
			sql_sy_acc_entity_doc_type_update		=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_update");
			sql_sy_acc_entity_doc_type_select_flag	=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select_flag");
			if(item_class_based.equals("N")){
				alHdrData			=	(ArrayList)	hmData.get("HDR_DATA");
				isFinalized			=	((String)alHdrData.get(8)).equals("Y");
			}
			alDtlData			=	(ArrayList)	hmData.get("DTL_DATA");
			//alExpData			=	(ArrayList)	hmData.get("DTL_EXP_DATA");
			//finalized_yn	=	(String)alHdrData.get(8);
			//isFinalized			=	((String)alHdrData.get(8)).equals("Y");
			for(int j=0,k=0;j<sizeOfTrn;j++){
				if(item_class_based.equals("Y")){
					alHdrData = new ArrayList();
					alHdrData = alTempData.get(j);
					isFinalized			=	((String)alHdrData.get(8)).equals("Y");
				}
				HashMap hmRecord	=	fetchRecord(connection, sql_sy_acc_entity_doc_type_select_flag, (String)alHdrData.get(1));
				isDocNoAutoGenerated=	hmRecord.get("DOC_NUM_GEN_FLAG").toString().equals("Y");

				allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
				String locale=(String)allanguageData.get(0);
//System.out.println("Test Patch 02/06/2011 - step 3");
				if (isDocNoAutoGenerated) {
					
					Connection connection111 = ConnectionManager.getConnection();	
					connection111.setAutoCommit(false);
					
					alHdrData.set(2,(String)fetchRecord(connection111, sql_sy_acc_entity_doc_type_select, (String)alHdrData.get(1)).get("NEXT_DOC_NO"));					
					
					//Update the sy_acc_entity_doc_type with the next number for peformance 9:27 AM 3/27/2010	

					doc_no.add((String)alHdrData.get(2));
					
					String s  = "";
					String s1 = "";
					ArrayList alParameters	=	new ArrayList();
					alParameters.add((String)alHdrData.get(16));
					alParameters.add((String)alHdrData.get(17));
					alParameters.add((String)alHdrData.get(18));
					alParameters.add((String)alHdrData.get(1));
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}
					HashMap hmArgData1 = new HashMap();
					hmArgData1.put(DATA,alParameters);
					HashMap hmArgSQL1 = new HashMap();
					hmArgSQL1.put(UPDATE_SQL,sql_sy_acc_entity_doc_type_update);
//System.out.println("Test Patch 02/06/2011 - step 4");
					hmResult	=	update(connection111, hmArgData1, hmArgSQL1);
					
					connection111.commit();
					ConnectionManager.returnConnection(connection111);
					//connection111.close();
					
					hmResult.put("flag",s1);

					throwExceptionWhenFailed(hmResult);
					
					
				}
				ArrayList alData		=	new ArrayList(alHdrData);
				alData.add(alData.get(16));		//added_by_id
				alData.add(alData.get(17));		//added_at_ws_no
				alData.add(alData.get(18));		//added_facility_id
				hmArgData.put(DATA,alData);
				hmArgSQL.put(INSERT_SQL,stSQLHdrInsert);
				hmResult	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

	//dtl logic
	//			alDtlData			=	(ArrayList)	hmData.get("DTL_DATA");
				HashMap hmForSuspendedBatches = new HashMap();
				HashMap hmItemInfo = new HashMap(); 						
				if(item_class_based.equals("Y")){
					trnRecords = k + alItemClassCount.get(j);
				}else{
					if(records_per_trn>alDtlData.size()){
						trnRecords = alDtlData.size();
					}else if((k+records_per_trn)>=alDtlData.size()){
						trnRecords = alDtlData.size();
					}else{
						trnRecords = k+records_per_trn;
					}
				}
//System.out.println("Test Patch 02/06/2011 - step 5");
				alDtlRecords=	new ArrayList();
				//for (int i=0;i<alDtlData.size() ;i++ ) {
				for (int i=k;i<trnRecords ;i++ ) {
					ArrayList alDtlRecord   = new ArrayList();
					alDtlRecord	= (ArrayList)alDtlData.get(i);
					//System.out.println("alDtlRecord====231= mng=>" +alDtlRecord);
					hmForSuspendedBatches.put(alDtlRecord.get(3),alDtlRecord.get(11)); 
					alDtlRecord.remove(11);//remove suspended batch flag..
				////
					ArrayList alStkYN		= new ArrayList ();
					alStkYN.add(alDtlRecord.get(3));			
					alStkYN.add(alHdrData.get(6));		   
					sql = (String)hmSQL.get("GetStockItemYNFlag");
					HashMap hmStkYN			= fetchRecord(connection, sql, alStkYN);
					from_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
					alStkYN	=	new ArrayList();
					alStkYN.add(alDtlRecord.get(3));
					alStkYN.add(alHdrData.get(7));
					hmStkYN					= fetchRecord(connection, sql, alStkYN);
					to_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
//Commented By Mahesh on 22/11/2007 as we are storoing wrong reference of stock item_yn flag.	Check and Change if any problems in future	
					alDtlRecord.set(9,to_stk_item_yn);		//stock item_yn     // Uncommented by Padmapriya On 06/02/2012
//					alDtlRecord.set(9,from_stk_item_yn);		//stock item_yn   // Commented by Padmapriya On 06/02/2012
					
					alDtlRecord.add(0,alHdrData.get(0));
					alDtlRecord.add(1,alHdrData.get(1));
					alDtlRecord.add(2,alHdrData.get(2));

					

					alDtlRecord.add(alHdrData.get(16));		//added_by_id
					alDtlRecord.add(alHdrData.get(17));		//added_at_ws_no
					alDtlRecord.add(alHdrData.get(18));		//added_facility_id
					alDtlRecord.add(alHdrData.get(16));		//modified_by_id
					alDtlRecord.add(alHdrData.get(17));		//modified_at_ws_no
					alDtlRecord.add(alHdrData.get(18));		//modified_facility_id
										
					//code added for Issue UOM details...
					//alDtlRecord.add(alDtlRecord.get(18));		//ISSUE_UOM
					//alDtlRecord.add(alDtlRecord.get(19));		//ISSUE_UOM_CONV
					//alDtlRecord.add(alDtlRecord.get(20));		//ISSUE_UOM_QTY
					alDtlRecord.add(alDtlRecord.get(17));		//TO_STR_QTY
					batch_records=batch_records+Integer.parseInt((String)alDtlRecord.get(18));		//batch_records
						
					String Remarks_dtl=(String)alDtlRecord.get(6); 
					String mm_trn_qty=(String)alDtlRecord.get(19);
					locale=(String)alDtlRecord.get(20);
					alDtlRecord.add((String)DTL_Remarks.get(Remarks_dtl));
					//alDtlRecord.add(alHdrData.get(15));
					//String to_st_qty=(String)alDtlRecord.get(17);
					alDtlRecord.add(checkForNull((String)alDtlRecord.get(21))); //17/09/12
					alDtlRecord.remove(17);
					alDtlRecord.remove(17);
					alDtlRecord.remove(17);
					alDtlRecord.remove(17);
					alDtlRecord.remove(17); //17/09/12

					//alDtlRecords.add(alDtlRecord);

					// save the item codein case of error
					stCurrentItemCodeInCaseOfError=(String)alDtlRecord.get(6);
//System.out.println("Test Patch 02/06/2011 - step 6");
				if(isFinalized) {
						/**
						 * @Name - Priya
						 * @Date - 02/06/2010
						 * @Inc# - 
						 * @Desc -  To get no of decimals for cost and round up trn_value with  noOfDecimalsForCost
						 */
							int noOfDecimalsForCost=Integer.parseInt(getNoOfDecimalsCost(connection));

						HashMap hmParameters = new HashMap();
						hmParameters.put("item_code",alDtlRecord.get(6));//item_code
						hmParameters.put("store_code",alHdrData.get(6));
						hmParameters.put("to_store_code",alHdrData.get(7));
						hmParameters.put("trn_type","URG");
						hmParameters.put("doc_date",alHdrData.get(4));
						hmParameters.put("trn_qty",alDtlRecord.get(7));//item_qty
						hmParameters.put("trn_unit_cost",alDtlRecord.get(9));
					//Added to pass unit cost as base to st_item_trn_dtl against inc#50521
						dtl_unit_cost=Double.toString(Double.parseDouble((String)alDtlRecord.get(9))/Double.parseDouble((String)alDtlRecord.get(15)));
					//Added ends
						//hmItemInfo.put(alDtlRecord.get(6),(String)alDtlRecord.get(9));// to store the cost of the item.
						hmItemInfo.put(alDtlRecord.get(6),dtl_unit_cost);// to store the cost of the item.
						//dtl_unit_cost=(String)alDtlRecord.get(9);
						/*double trn_val= Double.parseDouble((String)alDtlRecord.get(7))*Double.parseDouble((String)alDtlRecord.get(9));
						hmParameters.put("trn_value",setNumber(""+trn_val,3));//value */
						hmParameters.put("trn_value",setNumber((String)alDtlRecord.get(10),noOfDecimalsForCost));
						hmParameters.put("from_stk_item_yn",from_stk_item_yn);//alDtlRecord.get(12));//value
						hmParameters.put("to_stk_item_yn",to_stk_item_yn);//value
						hmParameters.put("last_receipt_date",alHdrData.get(4)); // doc_date
						hmParameters.put("last_issue_date",alHdrData.get(4)); // doc_date

						hmParameters.put("login_by_id",alHdrData.get(16));
						hmParameters.put("login_at_ws_no",alHdrData.get(17));
						hmParameters.put("login_facility_id",alHdrData.get(18));
						hmParameters.put("to_str_qty",alDtlRecord.get(23));
						hmParameters.put("mm_trn_qty",mm_trn_qty);
						hmParameters.put("language_id",locale);
	//					hmParameters.put("to_str_qty",to_st_qty);
						calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
						hmParameters.remove("to_str_qty");
						double trn_qty=Double.parseDouble((String)alDtlRecord.get(15))*Double.parseDouble((String)alDtlRecord.get(16));
						hmParameters.put("trn_qty",""+trn_qty);//item_qty
						//Added to pass unit cost as base to st_item_move_summ
						/*String	item_move_trn_val=Double.toString(Double.parseDouble((String)alDtlRecord.get(10))/Double.parseDouble((String)alDtlRecord.get(15)));
						hmParameters.put("trn_value",item_move_trn_val);*/
						//Added ends
						insertItemMoveSummaryForISS (connection, hmParameters);
//System.out.println("Test Patch 02/06/2011 - step 7"); 
					}

						alDtlRecord.remove(23);
						alDtlRecords.add(alDtlRecord);
				}
				hmArgData.put(DATA,alDtlRecords);
				hmArgSQL.put(BATCH_SQL,stSQLDtlInsert);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
				alExpData			=	(ArrayList)	hmData.get("DTL_EXP_DATA");
				alExpRecords=	new ArrayList();

				//for (int i=0;i<alExpData.size() ;i++ ) {
				for (int i=prev_batch_records;i<batch_records;i++ ) {

					ArrayList alExpRecord = new ArrayList();
					alExpRecord	= (ArrayList)alExpData.get(i);
					uom_code	=(String)	alExpRecord.get(11);
					alExpRecord.remove(11);
					alExpRecord.add(0,alHdrData.get(0));
					alExpRecord.add(1,alHdrData.get(1));
					alExpRecord.add(2,alHdrData.get(2));
					alExpRecord.add(alHdrData.get(16));		//added_by_id
					alExpRecord.add(alHdrData.get(17));		//added_at_ws_no
					alExpRecord.add(alHdrData.get(18));		//added_facility_id
					alExpRecord.add(alHdrData.get(16));		//modifies_by_id
					alExpRecord.add(alHdrData.get(17));		//modified_at_ws_no
					alExpRecord.add(alHdrData.get(18));		//modifies_facility_id
					alExpRecords.add(alExpRecord);
					// save the item codein case of error
					stCurrentItemCodeInCaseOfError=(String)alExpRecord.get(6);
//MOHE-CRF-0001 start
					String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(6)).get("FACILITY_ID"); 
					 String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(7)).get("FACILITY_ID"); //END
					
						sql = (String)hmSQL.get("GetStockItemYNFlag");
						ArrayList alStkYN	=	new ArrayList();
						alStkYN.add(alExpRecord.get(6));
						alStkYN.add(alHdrData.get(7));
						HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
						to_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 

						dtl_unit_cost=(String)hmItemInfo.get(alExpRecord.get(6));

					if(!isFinalized){//Batch blocking logic follows:
						HashMap hmParameter	=	new HashMap();
						hmParameter.put("store_code",alHdrData.get(6));
						hmParameter.put("item_code",alExpRecord.get(6));
						hmParameter.put("batch_id",alExpRecord.get(7));
						hmParameter.put("bin_location_code",alExpRecord.get(8));
						hmParameter.put("expiry_date_or_receipt_date",alExpRecord.get(9));
						hmParameter.put("trn_qty",""+(String)alExpRecord.get(11));

						hmParameter.put("login_by_id",alHdrData.get(16));
						hmParameter.put("login_at_ws_no",alHdrData.get(17));
						hmParameter.put("login_facility_id",alHdrData.get(18));

						hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'B');
						throwExceptionWhenFailed(hmResult);
					}
                
					if (isFinalized) {
						HashMap hmParameters = new HashMap();

						hmParameters.put("item_code",alExpRecord.get(6));
						hmParameters.put("store_code",alHdrData.get(6));
						if(to_stk_item_yn.equals("Y")) 
						{
						hmParameters.put("to_store_code",alHdrData.get(7));
						hmParameters.put("trn_qty",""+(String)alExpRecord.get(11));
						}
						else
						{
						hmParameters.put("trn_qty","-"+(String)alExpRecord.get(11));
						}

						hmParameters.put("trn_type","URG");
                       
						
						
						hmParameters.put("batch_id",alExpRecord.get(7));
						hmParameters.put("expiry_date_or_receipt_date",alExpRecord.get(9));
						hmParameters.put("trade_id",alExpRecord.get(10));
						hmParameters.put("from_bin_location_code",alExpRecord.get(8));
						hmParameters.put("to_bin_location_code",alExpRecord.get(13));
						hmParameters.put("suspended_batch_allowed_yn",hmForSuspendedBatches.get(alExpRecord.get(6)));//"N");
						hmParameters.put("release_batch_yn","N");
						hmParameters.put("last_receipt_date",alHdrData.get(4)); // doc_date
						hmParameters.put("last_issue_date",alHdrData.get(4)); // doc_date
								
						hmParameters.put("login_by_id",alHdrData.get(16));
						hmParameters.put("login_at_ws_no",alHdrData.get(17));
						hmParameters.put("login_facility_id",alHdrData.get(18));
						hmParameters.put("barcode_id", checkForNull ((String)alExpRecord.get(14))); //barcode_id
						
		                 	String modified_date ="Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')";
				ArrayList  hmparam = new ArrayList();
			            
				String p_from_bin_location_code		= checkForNull (hmParameters.get("from_bin_location_code"));
				String p_from_store_code				= checkForNull (hmParameters.get("store_code")); 
				String p_to_store_code					= checkForNull	(hmParameters.get("to_store_code"));
				String p_to_bin_location_code			= checkForNull (hmParameters.get("to_bin_location_code"));
				String p_item_code						= checkForNull (hmParameters.get("item_code")); 
				String p_batch_id						= checkForNull (hmParameters.get("batch_id")); 
				String p_expiry_date_or_receipt_date	= checkForNull (hmParameters.get("expiry_date_or_receipt_date"));
						
						   hmparam.add(p_from_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_from_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                   String mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
// System.out.println("Test Patch 02/06/2011 - step 13");						   							   
						   hmParameters.put("modified_date",mod_date);
						   hmparam = new ArrayList();
						    hmparam.add(p_to_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_to_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                    mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
					
						   hmParameters.put("to_modified_date",mod_date);

						   updateBatchOnLine(connection, hmSQL, hmParameters);
						 //Added for MOHE-CRF-0001 start
							if(site){
							if(!(fm_facility_id.equals(to_facility_id))){
								System.out.println(alExpRecord.get(6)+","+alExpRecord.get(10)+","+alExpRecord.get(7)+","+alHdrData.get(16)+","+alHdrData.get(17)+","+fm_facility_id+","+to_facility_id);
								CallableStatement callableStatement = null;
								callableStatement	= connection.prepareCall("{ call bl_create_material_batch_price (?,?,?,?,?,?,?,?,?,?,?) }");
								callableStatement.setString(1, (String)alExpRecord.get(6));
								callableStatement.setString(2, ((String)alExpRecord.get(10)));
								callableStatement.setString(3, (String)alExpRecord.get(7));
								callableStatement.setString(4, "");
								callableStatement.setString(5, (String)alHdrData.get(16));
								callableStatement.setString(6, (String)alHdrData.get(17));
								callableStatement.registerOutParameter(7, Types.VARCHAR);
								callableStatement.registerOutParameter(8, Types.VARCHAR);
								callableStatement.registerOutParameter(9, Types.VARCHAR);
								callableStatement.setString(10, (String)fm_facility_id);
								callableStatement.setString(11, (String)to_facility_id);
								callableStatement.execute();
							
								
							}
							}
							//Added for MOHE-CRF-0001 end
						hmParameters.put("trn_qty","-"+(String)alExpRecord.get(11));						
						hmParameters.put("other_store_code", alHdrData.get(7));
						hmParameters.put("doc_type_code",alHdrData.get(1));
						hmParameters.put("doc_no", alHdrData.get(2));
						hmParameters.put("doc_srl_no", alExpRecord.get(4));
						hmParameters.put("doc_date", alHdrData.get(4)); 
						hmParameters.put("doc_ref", alHdrData.get(5)); 
						hmParameters.put("stk_uom_code", uom_code);
						hmParameters.put("stock_item_yn", from_stk_item_yn);
						hmParameters.put("bin_location_code",alExpRecord.get(8));

						hmParameters.put("item_unit_cost",dtl_unit_cost);	
						
						insertItemTrnDetail(connection, hmParameters, hmSQL, 1);		 	
						//System.out.println("1111111111111111111"+hmParameters);			


						hmParameters.put("trn_qty",""+(String)alExpRecord.get(11));				
		//				dtl_unit_cost=(String)hmItemInfo.get(alExpRecord.get(6))	;			
						
						hmParameters.put("stock_item_yn", to_stk_item_yn);
						hmParameters.put("bin_location_code",alExpRecord.get(13));
						hmParameters.put("store_code", alHdrData.get(7));
						hmParameters.put("other_store_code", alHdrData.get(6));
						hmParameters.put("item_unit_cost",dtl_unit_cost);	
						insertItemTrnDetail(connection, hmParameters, hmSQL, 2);
						//System.out.println("222222222222222222222"+hmParameters);
	//

						if (to_stk_item_yn.equals("N")) {
							hmParameters.put("trn_qty","-"+(String)alExpRecord.get(11));						
							hmParameters.put("item_unit_cost",dtl_unit_cost);	
							hmParameters.put("trn_type", "CON");
							hmParameters.put("store_code", alHdrData.get(7));
							hmParameters.put("other_store_code", alHdrData.get(6));
							insertItemTrnDetail(connection, hmParameters, hmSQL, 3);		 
							//System.out.println("3333333333333333333333"+hmParameters);				
						}


					}


				}
				prev_batch_records = batch_records;
				//allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
				//String locale=(String)allanguageData.get(0);
				hmArgData.put(DATA,alExpRecords);
				hmArgSQL.put(BATCH_SQL,stSQLExpInsert);

				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
				//}
				if (isDocNoAutoGenerated) {
					String s  = "";
					String s1 = "";
					ArrayList alParameters	=	new ArrayList();
					alParameters.add((String)alHdrData.get(16));
					alParameters.add((String)alHdrData.get(17));
					alParameters.add((String)alHdrData.get(18));
					alParameters.add((String)alHdrData.get(1));
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}
					hmArgData.put(DATA,alParameters);
					hmArgSQL.put(UPDATE_SQL,sql_sy_acc_entity_doc_type_update);

					//hmResult	=	update(connection, hmArgData, hmArgSQL);
					hmResult.put("flag",s1);

					throwExceptionWhenFailed(hmResult);
				}
				if(item_class_based.equals("Y")){
					k = k + alItemClassCount.get(j);
				}else{
					k=k+records_per_trn;
				}
			}
		}
		catch (Exception exception) {
			hmResult.put(RESULT,FALSE);
			hmResult.put(MESSAGE,exception.getMessage());
			hmResult.put(MSGID,exception.getMessage());
			if ((exception.getMessage().equals("INSUFFICIENT_BATCH_QTY")) || (exception.getMessage().equals("NEGATIVE_STOCK"))) {
				hmResult.put("flag",stCurrentItemCodeInCaseOfError);
			}
			exception.printStackTrace();
		}
		hmResult.put("doc_no",doc_no);
		return hmResult;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/


	public HashMap updateIssue(Connection connection, HashMap hmData) {
		return new HashMap();
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/


	public HashMap delete( HashMap hmData, HashMap hmSQLValues){
        Connection connection = null;
		Properties properties=null;
		HashMap hmResult=new HashMap();
		hmSQL		= hmSQLValues;
		HashMap hmCommon	=	(HashMap)	hmData.get("COMMON_DATA");
		ArrayList alData		=	(ArrayList)hmData.get("DATA");
		
		hmResult.put("result", FALSE);

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();


        try{
            properties = (Properties)hmData.get("properties");
            connection = getConnection(properties);
            connection.setAutoCommit(false);

			//String stSQLHdrDelete	=	(String)hmSQL.get ("stSQLIssHdrDelete");
			//String stSQLDtlDeleteAll=	(String)hmSQL.get ("stSQLIssDtlDeleteAll");
			//String stSQLExpDeleteAll=	(String)hmSQL.get ("stSQLIssExpDeleteAll");
			String sql_exp_select_for_block_rel	=	(String)hmSQL.get ("expForBlockRel");   

			alData			=	(ArrayList)	hmData.get("DATA");
			alData.add("%");//put doc_srl_no at last..

			ArrayList alRecords	=	fetchRecords(connection,sql_exp_select_for_block_rel, alData);

			for (int j=0; j<alRecords.size(); j++) {
				HashMap hmRecord	=	(HashMap)alRecords.get(j);
				HashMap hmParameter	=	new HashMap();
				hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
				hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
				hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
				hmParameter.put("bin_location_code",checkForNull((String)hmRecord.get("BIN_LOCATION_CODE")));

				hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
				hmParameter.put("trn_qty",hmRecord.get("ISS_ITEM_QTY"));
				hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
				hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
				hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));
					String store_code		=	(String)hmRecord.get("STORE_CODE");
					String item_code		=	(String)hmRecord.get("ITEM_CODE");
					String batch_id			=	(String)hmRecord.get("BATCH_ID");
					String bin_location_code=	(String)hmRecord.get("BIN_LOCATION_CODE");
					String expiry_date_or_receipt_date	=	(String)hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE");
					String[]stParameter={store_code,item_code,batch_id,bin_location_code,expiry_date_or_receipt_date};
					HashMap hmSelect	=	fetchRecord(connection, eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_SELECT_SINGLE"),stParameter);
					if (hmSelect == null || hmSelect.size()<=0){
					 continue;
					}
				hmResult	=	blockReleaseBatch(connection, hmParameter,hmSQL, 'R');//false to release the batch..
				throwExceptionWhenFailed(hmResult);
			}

			alData.remove(4);//remove doc_srl_no
			/*hmArgData.put(DATA, alData);

			hmArgSQL.put(DELETE_SQL,stSQLExpDeleteAll);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,stSQLDtlDeleteAll);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);


			hmArgSQL.put(DELETE_SQL,stSQLHdrDelete);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);*/
			hmArgData.put(DATA,(ArrayList)hmData.get("ALUPDATEHDRDATA"));
			hmArgSQL.put(UPDATE_SQL,(String)hmSQL.get ("UpdateSqlfordelete"));
			hmResult	=	update(connection, hmArgData, hmArgSQL);
			
			//Added by Rabbani on 24/02/12
		    //Starts
			 //Commented   by Rabbani #Inc no:44011 (ML-BRU-SCF-1071) on 23-OCT-2013
			/*ArrayList    alitemdata    = (ArrayList)hmData.get("ALITEMSTOREDATA");
				  for (int k=0; k<alitemdata.size(); k++) {
				  ArrayList    itemdata  = (ArrayList)alitemdata.get(k);
			      hmArgData.put(DATA,itemdata);
			      hmArgSQL.put(UPDATE_SQL,(String)hmSQL.get ("UpdateItemsqlfordelete"));
			      hmResult	=	update(connection, hmArgData, hmArgSQL);
			} */
			 
			ArrayList alreqdtldata   = (ArrayList)hmData.get("ALREQDTLDATA");
				  for (int l=0; l<alreqdtldata.size(); l++) {
				  ArrayList    reqdtldata  = (ArrayList)alreqdtldata.get(l);
				  hmArgData.put(DATA,reqdtldata);
			     // hmArgSQL.put(UPDATE_SQL,(String)hmSQL.get ("updaterequetdtlfordelete"));
			      hmArgSQL.put(UPDATE_SQL,(String)hmSQL.get ("SQL_UPDATE_DTL_COMMITTED_QTY"));
				 
			      hmResult	=	update(connection, hmArgData, hmArgSQL);
			     }
			//ends
			  //Added by Rabbani #Inc no:44011 (ML-BRU-SCF-1071) on 22-OCT-2013
				if(alreqdtldata.size()>0){
				hmArgData.put(DATA,(ArrayList)hmData.get("AlReqHdrData"));
				hmArgSQL.put(UPDATE_SQL,(String)hmSQL.get ("UPDATE_ST_REQUEST_HDR_REQ_STATUS"));
				hmResult	=	update(connection, hmArgData, hmArgSQL);
				}

			connection.commit();
		}
        catch(Exception exception){
			try{
				connection.rollback();
				exception.printStackTrace();
            }
            catch(Exception subException){
                subException.printStackTrace();
            }
            hmResult.put(RESULT, FALSE);
            hmResult.put(MSGID, exception.getMessage());
            hmResult.put(MESSAGE, exception.toString());
        }
        finally{
            try{
				closeConnection(connection, properties);
            }
            catch(Exception exception){
                exception.printStackTrace();
            }
        }
        return hmResult;
	}

	/**
	* Method, which is responsible for inserting the data in to the related tables
	* for the adjustStock transaction. This method will in turn call the other methods
	* to do the corresponding updates.
	* @param hmDataValues, the data to be inserted
	* @param hmSQLValues, the queries used for the corresponding updates
	* @return HashMap, the result and the messages
	*/
	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/


	public HashMap insert(HashMap hmData, HashMap hmSQLValues)  	{ //throws RemoteException
         //System.out.println("Insert 682");
        Connection connection = null;
		Properties properties=null;

//		hmData1		= hmData;
		hmSQL		= hmSQLValues;



		HashMap hmResult=new HashMap();
		hmResult.put("result", FALSE);
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");

		ArrayList alHdrData		=	(ArrayList)hmData.get("HDR_DATA");
		ArrayList alDtlData		=	new ArrayList();
		ArrayList alExpData		=	new ArrayList();
		ArrayList alDtlRecords	=	(ArrayList)hmData.get("DTL_DATA");
		ArrayList alExpRecords	=	(ArrayList)hmData.get("DTL_EXP_DATA");
		//System.out.println("alExpRecords 700====>" +alExpRecords);
		ArrayList allanguageData	=	(ArrayList)hmData.get("LANGUAGE_DATA");
		HashMap DTL_Remarks=new HashMap();
		boolean validatebarcode	= (Boolean)hmData.get("VALIDATEBARCODE");

        try{
            properties = (Properties)hmData.get("properties");
            connection = getConnection(properties);
            connection.setAutoCommit(false);
			  
			for (int i=0,j=0; i<alDtlRecords.size(); i++) {
				HashMap hmDtlRecord		=	(HashMap)alDtlRecords.get(i);
				//System.out.println("hmDtlRecord iss mang==739=>" +hmDtlRecord);  
				ArrayList alDtlRecord	=	new ArrayList();
				j++;
				if(item_class_based.equals("N")){
					alDtlRecord.add(alHdrData.get(3));//seq no
				}else{
					alDtlRecord.add("1");//seq no will be always 1 for URG
				}
				alDtlRecord.add(hmDtlRecord.get("doc_srl_no"));
				alDtlRecord.add(hmDtlRecord.get("store_code"));
				alDtlRecord.add(hmDtlRecord.get("item_code"));
				alDtlRecord.add(hmDtlRecord.get("item_qty"));
				
				alDtlRecord.add("0");//ret_item_qty
				alDtlRecord.add(hmDtlRecord.get("item_unit_cost"));
                /* @Name - Priya
				* @Date - 02/06/2010
				* @Inc# - 
				* @Desc - As item_cost_value is already available in 'hmDtlRecord', the below calculation is commented
				*/
				/*double dtl_trn_val= Double.parseDouble((String)hmDtlRecord.get("item_unit_cost"))*Double.parseDouble((String)hmDtlRecord.get("item_qty"));
				alDtlRecord.add(setNumber(""+dtl_trn_val,3));//item_cost_value */ 
				alDtlRecord.add(hmDtlRecord.get("item_cost_value"));

				alDtlRecord.add("N");// print_label_yn
				alDtlRecord.add(hmDtlRecord.get("stock_item_yn"));
				alDtlRecord.add("0");//authorized_item_qty
				alDtlRecord.add(hmDtlRecord.get("includeSuspendedBatches"));//includeSuspendedBatches
					//codea added for Issue UOM Details..on 4/7/2004
				alDtlRecord.add(hmDtlRecord.get("issue_uom"));
				alDtlRecord.add(hmDtlRecord.get("issue_uom_conv"));
				alDtlRecord.add(hmDtlRecord.get("issue_uom_qty"));
				alDtlRecord.add((String)hmDtlRecord.get("to_str_qty"));
				alDtlRecord.add((String)hmDtlRecord.get("batch_records"));
				alDtlRecord.add((String)hmDtlRecord.get("mm_trn_qty"));
				alDtlRecord.add((String)hmDtlRecord.get("language_id"));
				alDtlRecord.add(checkForNull((String)hmDtlRecord.get("usage_type"))); //17/09/12
				//code ended
				DTL_Remarks.put((String)hmDtlRecord.get("item_code"),checkForNull((String)hmDtlRecord.get("remarks_code"),""));
				alDtlData.add(alDtlRecord);
				//System.out.println("alDtlData iss mang 779" +alDtlData);
				
			}
			ArrayList params = null;
			String barcode_id	=	"";

			for (int i=0; i<alExpRecords.size(); i++) {
				HashMap hmExpRecord		=	(HashMap)alExpRecords.get(i);
				ArrayList alExpRecord	=	new ArrayList();
				if(item_class_based.equals("N")){
					alExpRecord.add(alHdrData.get(3)); // seq_no
				}else{
					alExpRecord.add("1"); // seq_no will be always 1 for URG
				}
				alExpRecord.add(hmExpRecord.get("doc_srl_no"));
				alExpRecord.add(hmExpRecord.get("STORE_CODE"));
				alExpRecord.add(hmExpRecord.get("ITEM_CODE"));
				alExpRecord.add(hmExpRecord.get("BATCH_ID"));
				alExpRecord.add(hmExpRecord.get("BIN_LOCATION_CODE"));
				alExpRecord.add(hmExpRecord.get("EXPIRY_DATE"));
				alExpRecord.add(hmExpRecord.get("TRADE_ID"));
				alExpRecord.add(hmExpRecord.get("QTY"));
				alExpRecord.add("0");
				alExpRecord.add(hmExpRecord.get("TO_BIN_LOCATION_CODE"));
				alExpRecord.add(hmExpRecord.get("uom_code"));
				//alExpRecord.add(checkForNull((String)hmExpRecord.get("BARCODE_ID"))); commented and added below condition for RUT-CRF-0079
				
				if(validatebarcode){
					if(!checkForNull((String)hmExpRecord.get("BARCODE_ID")).equals("")){
						alExpRecord.add(checkForNull((String)hmExpRecord.get("BARCODE_ID"))); 
					}else{
						params = new ArrayList();						
						
						params.add(hmExpRecord.get("STORE_CODE"));
						params.add(hmExpRecord.get("ITEM_CODE"));
						params.add(hmExpRecord.get("BATCH_ID"));
						params.add(hmExpRecord.get("BIN_LOCATION_CODE"));
						params.add(hmExpRecord.get("EXPIRY_DATE"));
						
						barcode_id =(String)(fetchRecord(connection,(String)hmSQLValues.get("SQL_ST_ITEM_BATCH_GET_BARCODE_ID"),params).get("BARCODE_ID"));
						
						alExpRecord.add(checkForNull(barcode_id));
					}
				}else{
					alExpRecord.add(checkForNull((String)hmExpRecord.get("BARCODE_ID")));
				}
				
			
	
				alExpData.add(alExpRecord);
			}
			hmData.put("HDR_DATA",alHdrData);
			hmData.put("DTL_DATA",alDtlData);
			hmData.put("DTL_EXP_DATA",alExpData);
			hmData.put("LANGUAGE_DATA",allanguageData);
			hmData.put("DTL_REMARKS",DTL_Remarks);

			hmResult=insertIssue(connection, hmData);
			throwExceptionWhenFailed(hmResult);
            connection.commit();
        }
        catch(Exception exception){
			try{
				connection.rollback();
				exception.printStackTrace();
				System.err.println("Exception-------hmData" +hmData);
            }
            catch(Exception subException){
                subException.printStackTrace();
            }
            hmResult.put(RESULT, FALSE);
            hmResult.put(MSGID, exception.getMessage());
            hmResult.put(MESSAGE, exception.toString());
        }
        finally{
            try{
				closeConnection(connection, properties);
            }
            catch(Exception exception){
                exception.printStackTrace();
            }
        }
        return hmResult;
    }
	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/


	public HashMap modify(HashMap hmData, HashMap hmSQLValues)   { //throws RemoteException
        //System.out.println("**** Issue Manager **** Modify ===>816" );
		Connection connection = null;
		Properties properties=null;
		PreparedStatement preparedStatement	=	null;
		ResultSet resultSet = null;
		HashMap hmResult=new HashMap();
		hmResult.put("result", FALSE);
		

//		hmData1		= hmData;
		hmSQL		= hmSQLValues;

		ArrayList alHdrData		=	(ArrayList)hmData.get("HDR_DATA");
		ArrayList alDtlRecords	=	(ArrayList)hmData.get("DTL_DATA");
		ArrayList alExpRecords	=	(ArrayList)hmData.get("DTL_EXP_DATA");
		//System.out.println("alExpRecords 831====>" +alExpRecords);
//		ArrayList alCommonData	=	(ArrayList)hmData.get("COMMON_DATA");
//		ArrayList alDtlData		=	new ArrayList();
		//ArrayList alExpData		=	new ArrayList();

		ArrayList alData		=	new ArrayList(); 
		String from_stk_item_yn ="";
		String to_stk_item_yn   ="";
		String      dtl_unit_cost="";
   		String sql				=	"";
   		ArrayList doc_no		=	new ArrayList();
		
		int iResult =	0;
		int iaResult[] = null; 
	//	String finalized_yn = "N";
		boolean isUpdateSuccessful = true;
		
		boolean validatebarcode	= (Boolean)hmData.get("VALIDATEBARCODE");
		
		//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
		String  item_hold_yn =   checkForNull((String)hmData.get("ITEM_HOLD_YN"),"N");
		 
		int     issue_seq_no   =   0;
   		String  reqfacility_id =  "";
		
		/*
			1) st_issue_hdr update
			2) st_issue_dtl update
			3) st_request_dtl update
			4) calculate And update online stock
			5) st_item_move_summ insert
			6) update batch online
			7) st_item_trn_dtl insert
			8) st_request_hdr update
		*/
		String facility_id = (String)alHdrData.get(0);
		String seq_no	=	"";
		facility_id = facility_id.trim();
		alHdrData.set(0,facility_id);
		//alHdrData.set(17,facility_id);
		String stCurrentItemCodeInCaseOfError=null;
//System.out.println("Test Patch 02/06/2011 - modify ");
        try {
            properties = (Properties)hmData.get("properties");
            connection = getConnection(properties);
            connection.setAutoCommit(false);

			String trn_type = (String)alHdrData.get(11);



			boolean site = eCommon.Common.CommonBean.isSiteSpecific(connection, "ST","MUL_FAC_TFR_BATCH_PRICE_MOVE");//Added for MOHE-CRF-0001 START
			String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(6)).get("FACILITY_ID");
			 String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String) alHdrData.get(7)).get("FACILITY_ID");//END

			sql = (String)	hmSQL.get	("IssueHdrUpdateSQL");

            alData.add(alHdrData.get(4)); // doc_date
			alData.add(alHdrData.get(5)); // doc_ref
			alData.add(alHdrData.get(8)); // finalized_yn
			alData.add(alHdrData.get(9)); // Process for acknowledge
			alData.add(alHdrData.get(14)); // close_req_after_issue_yn
			alData.add(alHdrData.get(15)); // remarks
			alData.add(alHdrData.get(16)); // modified_by_id
			alData.add(alHdrData.get(17)); // modified_at_ws_no
			alData.add(alHdrData.get(18)); // modified_facility_id

			alData.add(alHdrData.get(0)); // facility_id - Where clause
			alData.add(alHdrData.get(1)); // doc_type_code - Where clause
			alData.add(alHdrData.get(2)); // doc_no - Where clause
			alData.add(alHdrData.get(3)); // seq_no - Where clause
// System.out.println("Test Patch 02/06/2011 - alData ");
			seq_no=(String)alHdrData.get(3);
			doc_no.add((String)alHdrData.get(2));
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			try {
				iResult	 =	preparedStatement.executeUpdate();
// System.out.println("Test Patch 02/06/2011 - modify result "+iResult);
				if(preparedStatement!=null) {
						preparedStatement.close();
					}
			}
			catch (Exception ex) {
				ex.printStackTrace();
			}


			if(iResult!=0){
				hmResult.put(RESULT,TRUE);
				hmResult.put(MESSAGE,RECORD_MODIFIED);
			}
			//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014 Starts
			//Insert ST_ISSUE_HDR
			if(item_hold_yn.equals("Y") && trn_type.equals("ISS")){
				try {
					ArrayList sqlParameter = new ArrayList(3);
					reqfacility_id =   checkForNull((String)hmData.get("ReqFacilityId"));
					sqlParameter.add(reqfacility_id);
					sqlParameter.add(alHdrData.get(1)); //Doc_type_code
					sqlParameter.add(alHdrData.get(2)); //doc_no
					HashMap hmSeq_no = fetchRecord(connection,(String)hmSQL.get("SQL_MAX_ISSUE_SEQ_NO_QUERY"),sqlParameter);
					if (hmSeq_no.containsKey("ISSUE_SEQ_NO")) {
						issue_seq_no = Integer.parseInt((String) hmSeq_no.get("ISSUE_SEQ_NO"));
					}
					issue_seq_no += 1;
				}
				catch (Exception exception) {
					exception.printStackTrace();
				}
			sql = (String)	hmSQL.get("stSQLHdrInsert");
			alData	=	new ArrayList();
			
			alData.add(alHdrData.get(0)); // facility_id  0
			alData.add(alHdrData.get(1)); // doc_type_code  1
			alData.add(alHdrData.get(2)); // doc_no 2
			alData.add(""+issue_seq_no); // seq_no  3
			alData.add(alHdrData.get(4)); // doc_date 4
			alData.add(alHdrData.get(5)); // doc_ref  5
			alData.add(alHdrData.get(6)); // From_store 6
			alData.add(alHdrData.get(7)); // to_store  7
			alData.add("N");              // finalized_yn	    // 8
			alData.add("N");              // Ack_yn	    // 9
			alData.add("N");             // gl_interfaced_yn	// 10
			alData.add("ISS");            // Trn_type	// 11
			alData.add("Y"); //entry completed ?	// 12
			alData.add(alHdrData.get(13)); // login_id  13
			alData.add(alHdrData.get(14)); // close_req_after_issue_yn 14
			alData.add(alHdrData.get(15)); // remarks 15
			alData.add(alHdrData.get(13)); // login id 16
			alData.add(alHdrData.get(17)); // work station no 17
			alData.add(alHdrData.get(0)); // facility_id  18
			alData.add(alHdrData.get(19)); // item_class_code 19
			alData.add(alHdrData.get(13)); // login id 20
			alData.add(alHdrData.get(17)); // work station no 21
			alData.add(alHdrData.get(0)); // facility_id  22
			
			 
			
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			try {
				iResult	 =	preparedStatement.executeUpdate();
 				if(preparedStatement!=null) {
						preparedStatement.close();
					}
			}
			catch (Exception ex) {
				ex.printStackTrace();
			}
			if(iResult!=0){
				hmResult.put(RESULT,TRUE);
				hmResult.put(MESSAGE,RECORD_INSERTED);
			}
			
			//Update ST_REQUEST_HDR  Issue_SEQ_NO
			sql = (String)	hmSQL.get	("UpdateIssueSeqSQL");
			 
			alData	=	new ArrayList();  
			alData.add(""+issue_seq_no); // seq_no  0
			alData.add(alHdrData.get(13)); // login id 1
			alData.add(alHdrData.get(17)); // work station no 2
			alData.add(alHdrData.get(0)); // login facility_id - Where clause
			alData.add(reqfacility_id); // facility_id - Where clause
			alData.add(alHdrData.get(1)); // doc_type_code - Where clause
			alData.add(alHdrData.get(2)); // doc_no - Where clause
			 
		 
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			try {
				iResult	 =	preparedStatement.executeUpdate();
				if(preparedStatement!=null) {
						preparedStatement.close();
					}
			}
			catch (Exception ex) {
				ex.printStackTrace();
			}
			if(iResult!=0){
				hmResult.put(RESULT,TRUE);
				hmResult.put(MESSAGE,RECORD_MODIFIED);
			}
		 } //ends
			sql = (String)	hmSQL.get	("IssueQtyUpdateSQL");
			preparedStatement = connection.prepareStatement(sql);

			for (int i=0;i<alDtlRecords.size();i++) {
				alData	=	new ArrayList();
				HashMap hmDtlRecord = (HashMap)(alDtlRecords.get(i));
				//System.out.println("hmDtlRecord====953=iss modify===>" +hmDtlRecord);
//System.out.println("Test Patch 02/06/2011 - Issue Manager - Enter in insertIssue method" + (String)hmDtlRecord.get("mode"));
				//if(!(((String)hmDtlRecord.get("mode")).equals("0")) && !(((String)hmDtlRecord.get("mode")).equals("1"))) {
                 
				 //Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
				if(!(((String)hmDtlRecord.get("mode")).equals("0")) && !(((String)hmDtlRecord.get("mode")).equals("1")) && !((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y"))) { 
					alData.add(hmDtlRecord.get("issue_uom_qty"));//Modified for 70724 
					alData.add(hmDtlRecord.get("item_unit_cost"));
					alData.add(hmDtlRecord.get("item_cost_value"));
					alData.add(alHdrData.get(16)); // modified_by_id
					alData.add(alHdrData.get(17)); // modified_at_ws_no
					alData.add(alHdrData.get(18)); // modified_facility_id
					//code added for Issue UOM Details...
					alData.add(hmDtlRecord.get("issue_uom"));
					alData.add(hmDtlRecord.get("issue_uom_conv"));
					alData.add(hmDtlRecord.get("issue_uom_qty"));
//System.out.println("Test Patch 02/06/2011 - Issue Manager - into this condition");					
				String remarks =(String)hmDtlRecord.get("remarks_code");
				if(remarks==null || remarks.equals("null"))
				remarks="";
					alData.add(remarks);
                    alData.add(checkForNull((String)hmDtlRecord.get("usage_type"))); //17/09/12
					alData.add(alHdrData.get(0)); // facility_id - Where clause
					alData.add(alHdrData.get(1)); // doc_type_code - Where clause
					alData.add(alHdrData.get(2)); // doc_no - Where clause
					alData.add(alHdrData.get(3)); // seq_no - Where clause
					alData.add(hmDtlRecord.get("doc_srl_no")); // Where clause
					setData(preparedStatement, alData);
// added on Wednesday, September 24, 2003
					preparedStatement.addBatch();
//
				}
			}
			try {
				iaResult = preparedStatement.executeBatch();
//System.out.println("Test Patch 02/06/2011 - Issue Manager - iaResult " + iaResult);					
				if(preparedStatement!=null) {
						preparedStatement.close();
					}
			}
			catch (Exception e1) {
				e1.printStackTrace();
			}
			for (int i=0;i<iaResult.length ;i++){
				if((iaResult[i] != -2) && (iaResult[i]<0)){
					isUpdateSuccessful = false;
					break;
				}	
			}
			if(!isUpdateSuccessful){
//System.out.println("Test Patch 02/06/2011 - Issue Manager - Failing.....");					
				hmResult.put(RESULT,FALSE);
				hmResult.put(MESSAGE,"FAILED");
				connection.rollback();
				throw new Exception("Update failed in issue detail record");
			}


			//code added to Insert newly added  issue records...on 08/08/2004  
			sql = (String)	hmSQL.get	("InsertDTLSQL");
			//System.out.println("sql=====>" +sql);
			preparedStatement = connection.prepareStatement(sql);
			for (int i=0;i<alDtlRecords.size();i++) {
				alData	=	new ArrayList();
				HashMap hmDtlRecord = (HashMap)(alDtlRecords.get(i));
				if(((String)hmDtlRecord.get("mode")).equals("1")) { 
//System.out.println("Test Patch 02/06/2011 - Issue Manager - Enter");
					alData.add(alHdrData.get(0));					// facility_id		1
					alData.add(alHdrData.get(1));					// doc_type_code	2
					alData.add(alHdrData.get(2));					// doc_no			3
					//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
					if((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y") && trn_type.equals("ISS")){
						alData.add(issue_seq_no);					// seq_no			4
					}else{
						alData.add(alHdrData.get(3));				// seq_no		4
					}
					alData.add(hmDtlRecord.get("doc_srl_no"));		// doc_srl_no		5
					alData.add(hmDtlRecord.get("store_code"));		// store_code		6
					alData.add(hmDtlRecord.get("item_code"));		// item_code		7
					//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
					if((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y") && trn_type.equals("ISS")){
						alData.add("0");					     // iss_item_qty	    8
					}else{
						alData.add(hmDtlRecord.get("item_qty"));  // iss_item_qty		8			 
					}
 					alData.add(hmDtlRecord.get("item_unit_cost"));	// item_unit_cost	9
					alData.add(hmDtlRecord.get("item_cost_value"));	// item_cost_value	10
					alData.add("N"					);				// print_label_yn	11
					alData.add(hmDtlRecord.get("stock_item_yn"));	// stock_item_yn	12
					//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
					if((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y") && trn_type.equals("ISS")){
						alData.add(checkForNull((String)hmDtlRecord.get("authorized_item_qty"),(String)hmDtlRecord.get("item_qty")));			                    // authorized_item_qty	13
					}else{
						alData.add("0");							 // authorized_item_qty	13 
					}
					
					alData.add(alHdrData.get(16));					// added_by_id		14
					alData.add(alHdrData.get(17));					// added_at_ws_no	15
					alData.add(alHdrData.get(18));					// added_facility_id 16
					alData.add(alHdrData.get(16));					// modified_by_id	17
					alData.add(alHdrData.get(17));					// modified_at_ws_no	18
					alData.add(alHdrData.get(18));					// modified_facility_id	19
					alData.add(hmDtlRecord.get("issue_uom"));		// issue_uom			20		
					alData.add(hmDtlRecord.get("issue_uom_conv"));  // issue_uom_conv		21
					alData.add(hmDtlRecord.get("issue_uom_qty"));   // issue_uom_qty		22
					
					//Added by Rabbani on 29/06/12 
					alData.add(checkForNull((String)hmDtlRecord.get("remarks_code"))); //29/06/12
					alData.add(checkForNull((String)hmDtlRecord.get("usage_type"))); //17/09/12
					alData.add("");//MO-CRF-20173  //ML-BRU-SCF-2182-TF
					setData(preparedStatement, alData);
					preparedStatement.addBatch();
                   
				}
			}
			try {
				iaResult = preparedStatement.executeBatch();
//System.out.println("Test Patch 02/06/2011 - Issue Manager - Now - iaresult"+iaResult);
				if(preparedStatement!=null) {
						preparedStatement.close();
					}
			}
			catch (Exception e1) {
				e1.printStackTrace();
			}
			for (int i=0;i<iaResult.length ;i++){
				if((iaResult[i] != -2) && (iaResult[i]<0)){
					isUpdateSuccessful = false;
					break;
				}	
			}
			if(!isUpdateSuccessful){
//System.out.println("Test Patch 02/06/2011 - Issue Manager - Here");
				hmResult.put(RESULT,FALSE);
				hmResult.put(MESSAGE,"FAILED");
				connection.rollback();
				throw new Exception("Insert in issue detail record");
			}

			//ended...

		//code added to Insert newly added  issue exp detail records...on 08/08/2004  

		/*
			sql = (String)	hmSQL.get	("InsertDTLEXPSQL");
			preparedStatement = connection.prepareStatement(sql);

			for (int i=0;i<alExpRecords.size();i++) {
				alData	=	new ArrayList();
				HashMap hmDtlExpRecord = (HashMap)(alExpRecords.get(i));
					alData.add(alHdrData.get(0));							// facility_id		1
					alData.add(alHdrData.get(1));							// doc_type_code	2
					alData.add(alHdrData.get(2));							// doc_no			3
					alData.add(alHdrData.get(3));							// seq_no			4
					alData.add(hmDtlExpRecord.get("DOC_SRL_NO"));			// doc_srl_no		5
					alData.add(hmDtlExpRecord.get("STORE_CODE"));			// store_code		6
					alData.add(hmDtlExpRecord.get("ITEM_CODE"));			// item_code		7
					alData.add(hmDtlExpRecord.get("BATCH_ID"));				// BATCH_ID			8
					alData.add(checkForNull((String)hmDtlExpRecord.get("BIN_LOCATION_CODE")));	// BIN_LOCATION_CODE	9
					alData.add(hmDtlExpRecord.get("EXPIRY_DATE"));			// expiry_date_or_receipt_date	10
					alData.add(hmDtlExpRecord.get("QTY"));					// iss_item_qty	11
					alData.add(hmDtlExpRecord.get("TRADE_ID"));				// trade_id	12
					alData.add(checkForNull((String)hmDtlExpRecord.get("TO_BIN_LOCATION_CODE")));	// to_bin_location_code	12
					//alData.add(hmDtlExpRecord.get("TO_BIN_LOCATION_CODE"));	// to_bin_location_code	12
					
					alData.add(alHdrData.get(15));					// added_by_id
					alData.add(alHdrData.get(16));					// added_at_ws_no
					alData.add(alHdrData.get(17));					// added_facility_id
					alData.add(alHdrData.get(15));					// modified_by_id
					alData.add(alHdrData.get(16));					// modified_at_ws_no
					alData.add(alHdrData.get(17));					// modified_facility_id


                    //C1, C1ISS, 598, 1, 1, MAIN, ACETATE, 30062004, MBIN, 30/06/2004, 1, ALCIPRO, MBIN, DURAI, eST.eST.eST.eST, C1, DURAI, eST.eST.eST.eST, C1
					//[C1, C1ISS, 599, 1, 1, MAIN, ACETATE, 30062004, MBIN, 30/06/2004, 1, ALCIPRO, MBIN, DURAI, eST.eST.eST.eST, C1, DURAI, eST.eST.eST.eST, C1]

					setData(preparedStatement, alData);

					preparedStatement.addBatch();

				}
			
			//try {
				iaResult = preparedStatement.executeBatch();
//System.out.println("Test Patch 02/06/2011 -  TO_BIN_LOCATION_CODE - Result "+ iaResult);
			//} catch (Exception e1) {
			//	e1.printStackTrace();
			//}

			for (int i=0;i<iaResult.length ;i++){
				if((iaResult[i] != -2) && (iaResult[i]<0)){
					isUpdateSuccessful = false;
					break;
				}	
			}
			if(!isUpdateSuccessful){
				hmResult.put(RESULT,FALSE);
				hmResult.put(MESSAGE,"FAILED");
				connection.rollback();
				throw new Exception("Insert in issue detail record");
			}

			//ended...

			*/
			boolean isFinalized		=	((String)alHdrData.get(8)).equals("Y");
			boolean process_ack_yn	=	((String)alHdrData.get(9)).equals("Y");
			String close_req_yn      =  (String)alHdrData.get(14); //added by Rabbani #inc no:27426 on 08/08/11
			//System.out.println("trn_type 1101====>" +trn_type);
			if(trn_type.equals("ISS")) {
			// System.out.println("trn_type 1102====>" +trn_type);
				sql = (String)	hmSQL.get	("RequestQtyUpdateSQL");
				preparedStatement = connection.prepareStatement(sql);
//System.out.println("Test Patch 02/06/2011 -  Before Loop");
                 double pending_item_qty = 0;
                 double curr_item_qty = 0;//Added for TTM-SCF-0202
				for (int i=0; i<alDtlRecords.size();i++) {
					alData = new ArrayList ();
					HashMap hmDtlRecord	=	(HashMap) alDtlRecords.get(i);
					//Added by Rabbani #inc no: 31536 on 16/04/12 Starts
					//if(!(((String)hmDtlRecord.get("mode")).equals("0"))) {
					//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
					if(!(((String)hmDtlRecord.get("mode")).equals("0")) && !((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y"))) {
					if (isFinalized || process_ack_yn) {
					 String stSQL1=(String)hmSQL.get("CommitedQtySelect");
                      ArrayList alreqQty  = new ArrayList ();
					     //alreqQty.add(alHdrData.get(0));   //facility_id
						 alreqQty.add(alHdrData.get(1));  //doc_type_code
						 alreqQty.add(alHdrData.get(2));  //  doc_no
						// alreqQty.add(hmDtlRecord.get("doc_srl_no"));	// doc_srl_no
                        alreqQty.add(hmDtlRecord.get("item_code"));						
					     //System.out.println("alreqQty 1685====>"+alreqQty );						
					       
					   HashMap hmreqValues = fetchRecord(connection,stSQL1,alreqQty);
					   if(hmreqValues.get("PENDING_ITEM_QTY") != null) {
						pending_item_qty = Double.parseDouble((String) hmreqValues.get("PENDING_ITEM_QTY"));
						//System.out.println("pending_item_qty 1685====>"+pending_item_qty );
						} 
					   curr_item_qty=Double.parseDouble((String)hmDtlRecord.get("item_qty"));
		                String stSQL=(String)hmSQL.get("SQL_ST_ISSUE_REQ_UPDATE_PENDING_REQ_QTY");
						ArrayList alParameters2= new ArrayList();
						if (close_req_yn.equals("Y") || (pending_item_qty<curr_item_qty))//Modified for TTM-SCF-0202
						{
                        alParameters2.add("-"+pending_item_qty);
						alParameters2.add("-"+pending_item_qty);
						}else
						{
						alParameters2.add("-"+hmDtlRecord.get("item_qty"));
						alParameters2.add("-"+hmDtlRecord.get("item_qty"));
						}
						alParameters2.add(alHdrData.get(16));
						alParameters2.add(alHdrData.get(17));
						alParameters2.add(alHdrData.get(18));
						alParameters2.add(hmDtlRecord.get("item_code"));
						alParameters2.add(alHdrData.get(7));
						HashMap hmArgData=new HashMap();
						HashMap hmArgSQL=new HashMap();
						hmArgData.put(DATA,alParameters2);
						hmArgSQL.put(UPDATE_SQL,stSQL);
						HashMap hmRes=update(connection, hmArgData, hmArgSQL);                 
						throwExceptionWhenFailed(hmRes);
						}
						}
				    //ends
					
					//if(!(((String)hmDtlRecord.get("mode")).equals("0"))) {
					//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
					if(!(((String)hmDtlRecord.get("mode")).equals("0")) && !((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y"))) {
						sql = (String)	hmSQLValues.get	("CommitedQtySelect");
						ArrayList alQtyData  = new ArrayList ();
						//alQtyData.add((String)hmData.get ("ReqFacilityId")); // Requested_facility_id
						alQtyData.add(alHdrData.get(1)); //doc_type_code
						alQtyData.add(alHdrData.get(2)); //doc_no
						alQtyData.add(hmDtlRecord.get("item_code"));
						HashMap hmQtyValues = fetchRecord(connection,sql,alQtyData);
						double committed_Qty = 0;
						double pending_Qty	 = 0;
						if(hmQtyValues.get("COMMITTED_ITEM_QTY") != null) {
							committed_Qty = Double.parseDouble((String) hmQtyValues.get("COMMITTED_ITEM_QTY"));
						}
						if(hmQtyValues.get("PENDING_ITEM_QTY") != null) {
							pending_Qty = Double.parseDouble((String) hmQtyValues.get("PENDING_ITEM_QTY"));
						}
						double trn_qty =  Double.parseDouble((String)hmDtlRecord.get("to_str_qty"));

						if (isFinalized || process_ack_yn) 
							committed_Qty = 0;
						else
							committed_Qty = trn_qty ;

						

/*						if(committed_Qty - trn_qty < 0) {
							committed_Qty = 0;
						}
						else {
							committed_Qty =  committed_Qty - trn_qty;
						}
						//added by Rabbani #inc no:27426 on 08/08/11
						//updating pending qty in st_request_dtl in case of close upon issue
*/						String closeItemYN = "N";//added for MO-CRF-20173 START
						closeItemYN = (String)hmDtlRecord.get("close_item_yn"); 
						System.out.println("close_item_yn: "+(String)hmDtlRecord.get("close_item_yn"));
						if(closeItemYN==null || closeItemYN.equals("")|| closeItemYN.equals("null")){  
							closeItemYN = "N"; 
						}//END
						if( (pending_Qty - trn_qty < 0 )||(close_req_yn.equals("Y")) || (closeItemYN.equals("Y"))  ) {//MO-CRF-20173 END
							pending_Qty = 0;
						}
						else {
							pending_Qty = pending_Qty - trn_qty;
						}
						if (isFinalized || process_ack_yn)
							alData.add(hmDtlRecord.get("mm_trn_qty"));
						else
							alData.add("0");

						alData.add(""+committed_Qty);

						if (isFinalized || process_ack_yn)
							alData.add(""+pending_Qty);
						else
							alData.add(hmQtyValues.get("PENDING_ITEM_QTY"));
						alData.add(alHdrData.get(16)); // modified_by_id
						alData.add(alHdrData.get(17)); // modified_at_ws_no
						alData.add(alHdrData.get(18)); // modified_facility_id
						//alData.add(alHdrData.get(0)); // facility_id - Where clause
						//alData.add((String)hmData.get ("ReqFacilityId")); // facility_id - Where clause
						alData.add(alHdrData.get(1)); // doc_type_code - Where clause
						alData.add(alHdrData.get(2)); // doc_no - Where clause
						alData.add(hmDtlRecord.get("item_code")); // Where clause
						setData(preparedStatement, alData);
						preparedStatement.addBatch();
					}
				}

				iaResult = preparedStatement.executeBatch();
//System.out.println("Test Patch 02/06/2011 -  statement failed" +iaResult);
				if(preparedStatement!=null) {
						preparedStatement.close();
					}

				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful) {
					hmResult.put(RESULT,FALSE);
					hmResult.put(MESSAGE,"FAILED");
					connection.rollback();
					throw new Exception("Update failed in request detail record");
				}

			}
//System.out.println("Test Patch 02/06/2011 - faileddddddd");

            HashMap hmItemInfo=new HashMap(); 

			for (int i=0; i<alDtlRecords.size();i++) {
				HashMap hmDtlRecord = (HashMap)(alDtlRecords.get(i));
					ArrayList alStkYN		= new ArrayList ();
                    // save the item codein case of error
                    stCurrentItemCodeInCaseOfError=(String)hmDtlRecord.get("item_code");
//System.out.println("Test Patch 02/06/2011 - second phase");
					alStkYN.add(hmDtlRecord.get("item_code"));			
					alStkYN.add(alHdrData.get(6));		   
					sql = (String)hmSQL.get("GetStockItemYNFlag");
					HashMap hmStkYN			= fetchRecord(connection, sql, alStkYN);
 					from_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 
					alStkYN	=	new ArrayList();
					alStkYN.add(hmDtlRecord.get("item_code"));
					alStkYN.add(alHdrData.get(7));
					hmStkYN					= fetchRecord(connection, sql, alStkYN);
					to_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 

				    //if(isFinalized && !(((String)hmDtlRecord.get("mode")).equals("0")) ) {
					//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
					if(isFinalized && !(((String)hmDtlRecord.get("mode")).equals("0")) &&  !((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y"))) {
//System.out.println("Test Patch 02/06/2011 - isFinalised");
                  
					double trn_qty				= Double.parseDouble((String)hmDtlRecord.get("item_qty"));
					double trn_value		= Double.parseDouble((String)hmDtlRecord.get("item_cost_value"));

					HashMap hmParameters = new HashMap();
					hmParameters.put("item_code",hmDtlRecord.get("item_code"));
					hmParameters.put("store_code",alHdrData.get(6));
					hmParameters.put("to_store_code",alHdrData.get(7));
					hmParameters.put("trn_type",alHdrData.get(11));
					hmParameters.put("doc_date",alHdrData.get(4));
					hmParameters.put("trn_qty",hmDtlRecord.get("issue_uom_qty"));//Modified for 70724 
					hmParameters.put("trn_unit_cost",hmDtlRecord.get("item_unit_cost"));

					//dtl_unit_cost=(String)hmDtlRecord.get("item_unit_cost");
					//Added to pass base unit cost to st_item_trn_dtl table against inc#50521
					dtl_unit_cost=Double.toString(Double.parseDouble((String)hmDtlRecord.get("item_unit_cost"))/Double.parseDouble((String)hmDtlRecord.get("issue_uom_conv")));
					//Added ends
					hmItemInfo.put(hmDtlRecord.get("item_code"),dtl_unit_cost);
										
					hmParameters.put("trn_value",hmDtlRecord.get("item_cost_value"));
					hmParameters.put("from_stk_item_yn","Y");//hmDtlRecord.get("stock_item_yn"));
					hmParameters.put("to_stk_item_yn",to_stk_item_yn);
					hmParameters.put("last_receipt_date",alHdrData.get(4));
					hmParameters.put("last_issue_date",alHdrData.get(4));

					hmParameters.put("login_by_id",alHdrData.get(16));
					hmParameters.put("login_at_ws_no",alHdrData.get(17));
					hmParameters.put("login_facility_id",alHdrData.get(18));
					hmParameters.put("to_str_qty",""+hmDtlRecord.get("to_str_qty"));
					hmParameters.put("mm_trn_qty",(String)hmDtlRecord.get("mm_trn_qty"));
					hmParameters.put("language_id",(String)hmDtlRecord.get("language_id"));

					hmParameters.put("mode","MODE_MODIFY"); //added by ganga on 31/05/2011
//System.out.println("Test Patch 02/06/2011 - mode modify"); 
                   //added by Rabbani and Ganga #inc no:27426 on 08/08/11
				   //commented by Rabbani #inc no: 31536 on 10/04/12
					/*double authorized_Qty = 0;
                    if(close_req_yn.equals("Y"))
     				{
                    String stSQL=(String)hmSQL.get("sql_st_issue_dtl_for_auth_qty");
                    ArrayList alauthQty  = new ArrayList ();
					alauthQty.add(alHdrData.get(1)); //doc_type_code
					alauthQty.add(alHdrData.get(2)); //doc_no
					alauthQty.add(hmDtlRecord.get("item_code"));
                    alauthQty.add(alHdrData.get(3));//seq_no
                    HashMap hmauthValues = fetchRecord(connection,stSQL,alauthQty);
						   
						if(hmauthValues.get("AUTHORIZED_ITEM_QTY") != null) {
							authorized_Qty = Double.parseDouble((String) hmauthValues.get("AUTHORIZED_ITEM_QTY"));
						   }
                     
					hmParameters.put("authorized_item_qty",authorized_Qty);
					} *///ends here                  
                    hmParameters.put("close_req_yn",close_req_yn);
					//HARDCODED SQL
					//added by manish on Monday, January 26, 2004					
//System.out.println("Test Patch 02/06/2011 - to_stk_item_yn"+to_stk_item_yn);
               //commented by rabbani #31536 on 10/04/12                    
					/*if (to_stk_item_yn.equals("N")) {
						String stSQL=(String)hmSQL.get("SQL_ST_ISSUE_REQ_UPDATE_PENDING_REQ_QTY");
						//"update st_item_store set pending_req_qty=decode(sign(pending_req_qty+?),-1,0,(pending_req_qty+?)) where item_code=? and store_code=?";
						
						ArrayList alParameters1= new ArrayList();
						 //added by Rabbani and Ganga #inc no:27426 on 08/08/11 starts
						if (close_req_yn.equals("Y"))
						{
                        alParameters1.add("-"+authorized_Qty);
						alParameters1.add("-"+authorized_Qty);
						}else
						{
						alParameters1.add("-"+hmDtlRecord.get("item_qty"));
						alParameters1.add("-"+hmDtlRecord.get("item_qty"));
						}
	                    //ends
						alParameters1.add(alHdrData.get(16));
						alParameters1.add(alHdrData.get(17));
						alParameters1.add(alHdrData.get(18));
						alParameters1.add(hmDtlRecord.get("item_code"));
						alParameters1.add(alHdrData.get(7));
						HashMap hmArgData=new HashMap();
						HashMap hmArgSQL=new HashMap();
						hmArgData.put(DATA,alParameters1);
						hmArgSQL.put(UPDATE_SQL,stSQL);
						HashMap hmRes=update(connection, hmArgData, hmArgSQL);
//System.out.println("Test Patch 02/06/2011 - hmRes" + hmRes );                    
						throwExceptionWhenFailed(hmRes);
					}*/
//System.out.println("Test Patch 02/06/2011 - before calculateAndUpdateOnlineStock" );                    					
					calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
					hmParameters.remove("to_str_qty");
					hmParameters.put("in_iss_qty", "0");  
					hmParameters.put("in_iss_cost", "0");  
					hmParameters.put("cons_qty", "0");  
					hmParameters.put("cons_cost", "0");  
					hmParameters.put("out_iss_qty_st", "0");  
					hmParameters.put("out_iss_cost_st", "0");  
					hmParameters.put("out_iss_qty_ns", "0");  
					hmParameters.put("out_iss_cost_ns", "0");  

					if(to_stk_item_yn.equals("Y")) {
						hmData.put("out_iss_qty_st", Double.toString(-trn_qty));  
						hmData.put("out_iss_cost_st", Double.toString(-trn_value));  
					}
					else {
						hmData.put("out_iss_qty_ns", Double.toString(-trn_qty));  
						hmData.put("out_iss_cost_ns", Double.toString(-trn_value));  
					}

					hmData.put("trn_qty", Double.toString(-trn_qty));
					hmData.put("trn_value", Double.toString(-trn_value));	

//					insertItemMoveSummary (connection, hmParameters, hmSQL);

					hmData.put("out_iss_qty_st", "0");  
					hmData.put("out_iss_cost_st", "0");  
					hmData.put("out_iss_qty_ns", "0");  
					hmData.put("out_iss_cost_ns", "0");  

					hmData.put("store_code",alHdrData.get(7));
					hmData.put("trn_qty", Double.toString(trn_qty));
					hmData.put("trn_value", Double.toString(trn_value));	

					hmData.put("in_iss_qty", Double.toString(trn_qty));  
					hmData.put("in_iss_cost", Double.toString(trn_value));  

//System.out.println("Test Patch 02/06/2011 - insertItemMoveSummaryForISS" );                    					
              					

					if(to_stk_item_yn.equals("N")) {
						hmData.put("cons_qty", Double.toString(-trn_qty));  
						hmData.put("cons_cost", Double.toString(-trn_value));  
					}	
					//Added to pass base unit cost to st_item_movement_summ table
					/*String item_move_trn_cost=Double.toString(Double.parseDouble((String)hmDtlRecord.get("item_cost_value"))/Double.parseDouble((String)hmDtlRecord.get("issue_uom_conv")));
					hmParameters.put("trn_value",item_move_trn_cost);*/
					//Added ends

//					if(isFinalized)
						insertItemMoveSummaryForISS (connection, hmParameters);
	//					insertItemMoveSummary (connection, hmParameters, hmSQL);
				}
			}



			/* To release the batches for the deleted batches
			*/

			preparedStatement = connection.prepareStatement((String)hmSQL.get("expForDelSQL"));
//System.out.println("Test Patch 02/06/2011 - insertItTo release the batches for the deleted batches");
			preparedStatement.setString(1, (String)alHdrData.get(0));
			preparedStatement.setString(2, (String)alHdrData.get(1));
			preparedStatement.setString(3, (String)alHdrData.get(2));
			preparedStatement.setString(4, (String)alHdrData.get(3));

			ArrayList alBatchesToBeReleased = new ArrayList ();

			for(int i=0;i<alDtlRecords.size();i++) {
				HashMap hmDtlRecord = (HashMap)alDtlRecords.get(i);
				//System.out.println("hmDtlRecord==release batches=>"+hmDtlRecord);
                 
				preparedStatement.setString(5, (String)hmDtlRecord.get("doc_srl_no"));
		        resultSet = preparedStatement.executeQuery();
				
				while (resultSet != null && resultSet.next()) {
					HashMap hmBatchRecord = new HashMap();
					hmBatchRecord.put("store_code", resultSet.getString("STORE_CODE"));
					hmBatchRecord.put("item_code", resultSet.getString("ITEM_CODE"));
					hmBatchRecord.put("batch_id", resultSet.getString("BATCH_ID"));
	     		    hmBatchRecord.put("bin_location_code",checkForNull((String) resultSet.getString("BIN_LOCATION_CODE")));
							
					hmBatchRecord.put("expiry_date_or_receipt_date", resultSet.getString("EXPIRY_DATE_OR_RECEIPT_DATE"));
					hmBatchRecord.put("trn_qty", resultSet.getString("ISS_ITEM_QTY"));
					hmBatchRecord.put("login_by_id",alHdrData.get(16));
					hmBatchRecord.put("login_at_ws_no",alHdrData.get(17));
					hmBatchRecord.put("login_facility_id",alHdrData.get(18));
					hmBatchRecord.put("mode",hmDtlRecord.get("mode"));
					hmBatchRecord.put("item_desc",hmDtlRecord.get("item_desc"));

					alBatchesToBeReleased.add(hmBatchRecord);
				}


					if(resultSet!=null)
				{
						resultSet.close();
				}
				
			}
if(preparedStatement!=null) {
						preparedStatement.close();
					}

//System.out.println("Test Patch 02/06/2011 - alBatchesToBeReleased.size()" + alBatchesToBeReleased.size());
			for(int i=0;i<alBatchesToBeReleased.size();i++) {
				HashMap hmBatchData = (HashMap)alBatchesToBeReleased.get(i);  	
				try {
//					System.out.println("hmBatchData===>"+hmBatchData);
//					System.out.println("hmSQL===>"+hmSQL);
					String store_code		=	(String)hmBatchData.get("store_code");
					String item_code		=	(String)hmBatchData.get("item_code");
					String batch_id			=	(String)hmBatchData.get("batch_id");
					String bin_location_code=	(String)hmBatchData.get("bin_location_code");
					String expiry_date_or_receipt_date	=	(String)hmBatchData.get("expiry_date_or_receipt_date");
					String[]stParameter={store_code,item_code,batch_id,bin_location_code,expiry_date_or_receipt_date};
					HashMap hmSelect	=	fetchRecord(connection, eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_SELECT_SINGLE"),stParameter);
//System.out.println("Test Patch 02/06/2011 - hmSelect "+ hmSelect);
					if (hmSelect == null || hmSelect.size()<=0){
					if((((String)hmBatchData.get("mode")).equals("0"))) 
					 continue;
					}
					hmResult	=	blockReleaseBatch(connection, hmBatchData,hmSQL, 'R');
//System.out.println("Test Patch 02/06/2011 - hmResult "+ hmResult);
//					System.out.println("hmResult===>"+hmResult);
					hmResult.put("item_desc",hmBatchData.get("item_desc"));
					//hmResult.put("message",(String)hmResult.get("message")+(String)hmBatchData.get("item_code"));
				}
				catch (Exception ex) {
					ex.printStackTrace();
				}
				throwExceptionWhenFailed(hmResult);
			}

			/* Code to delete all the batches related to all the dtl records
			*/

			ArrayList alDelData = new ArrayList();
			//alDelData.add(alHdrData.get(0)); //facility_id
			alDelData.add(alHdrData.get(1)); //	doc_type_code
			alDelData.add(alHdrData.get(2)); //  doc_no
			alDelData.add(alHdrData.get(3)); //  seq_no
			alDelData.add("1"); // Dummy srl no - to be replaced 

			HashMap		hmArgData	=	new HashMap();
			HashMap		hmArgSQL	=	new HashMap();
			HashMap		hmDelResult =	new HashMap(); 
			sql						=	(String)hmSQL.get("stSQLExpDelete");

			for(int i=0;i<alDtlRecords.size();i++) {
				HashMap hmDtlRecord = (HashMap)alDtlRecords.get(i);
				
				//if((((String)hmDtlRecord.get("mode")).equals("1"))) {
				//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
				if((((String)hmDtlRecord.get("mode")).equals("1")) && !((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y"))) {
					continue;
				}
				alDelData.set(3, hmDtlRecord.get("doc_srl_no"));
 				hmArgData.put(DATA,alDelData);
				hmArgSQL.put(DELETE_SQL,sql);
//System.out.println("Test Patch 02/06/2011 - delete ");
				hmDelResult	=	delete(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmDelResult);
			}

			/* To delete all the detail record which has been marked for deletion
			*/

			for(int i=0;i<alDtlRecords.size();i++) {
				sql = (String)hmSQL.get("stSQLDtlDelete");
				HashMap hmDtlRecord = (HashMap)alDtlRecords.get(i);
				if((((String)hmDtlRecord.get("mode")).equals("0"))) {
					ArrayList alDtlDelData = new ArrayList();
					alDtlDelData.add(alHdrData.get(0)); //facility_id
					alDtlDelData.add(alHdrData.get(1)); //doc_type_code
					alDtlDelData.add(alHdrData.get(2)); //  doc_no
					alDtlDelData.add(hmDtlRecord.get("doc_srl_no"));
					alDtlDelData.add(alHdrData.get(3)); //  seq_no
					hmArgData.put(DATA,alDtlDelData);
					hmArgSQL.put(DELETE_SQL,sql);
//System.out.println("Test Patch 02/06/2011 - after delete ");
					hmDelResult	=	delete(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmDelResult);
				}
				//Added By Rabbani #Inc no:27060 (MO-CRF-20048) on 17-Feb-2014
				if(((checkForNull((String)hmDtlRecord.get("hold_yn"))).equals("Y"))) {
					ArrayList alDtlDelData = new ArrayList();
					alDtlDelData.add(alHdrData.get(0)); //facility_id
					alDtlDelData.add(alHdrData.get(1)); //doc_type_code
					alDtlDelData.add(alHdrData.get(2)); //  doc_no
					alDtlDelData.add(hmDtlRecord.get("doc_srl_no"));
					alDtlDelData.add(alHdrData.get(3)); //  seq_no
					hmArgData.put(DATA,alDtlDelData);
					hmArgSQL.put(DELETE_SQL,sql);
                     //System.out.println("Test Patch 02/06/2011 - after delete " +hmArgData);
                     //System.out.println("Test hmArgSQL 02/06/2011 - after delete " +hmArgSQL);
                     
					hmDelResult	=	delete(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmDelResult);
				}
			}
			
			//Added By Rabbani against inc no:31536 on 19/03/2012  Starts
			    for(int i=0;i<alDtlRecords.size();i++) {
			 	HashMap hmDtlRecord = (HashMap)alDtlRecords.get(i);
			
				
				if(((String)hmDtlRecord.get("mode")).equals("0")){
				 sql = (String)	hmSQLValues.get	("CommitedQtySelect");
						ArrayList alQtyData  = new ArrayList ();
						alQtyData.add(alHdrData.get(1)); //doc_type_code
						alQtyData.add(alHdrData.get(2)); //doc_no
						alQtyData.add(hmDtlRecord.get("item_code"));
						HashMap hmQtyValues = fetchRecord(connection,sql,alQtyData);
						//Commented by Rabbani # inc no:43945(ML-BRU-SCF-1056) on 08-OCT-2013   Starts
						/*double pending_Qty	 = 0;
						if(hmQtyValues.get("PENDING_ITEM_QTY") != null) {
							pending_Qty = Double.parseDouble((String) hmQtyValues.get("PENDING_ITEM_QTY"));
						}
					    //Updating st_item_store
						if(hmQtyValues.get("PENDING_ITEM_QTY") != null){
					    ArrayList alItemData = new ArrayList();
					    sql = (String)hmSQL.get("UpdateItemsqlfordelete");
					    alItemData.add(pending_Qty); 
					    alItemData.add(alHdrData.get(7));  //Store_code
					    alItemData.add(hmDtlRecord.get("item_code"));
						
					    hmArgData.put(DATA,alItemData); 
					    hmArgSQL.put(UPDATE_SQL,sql);
					    hmResult	=	update(connection, hmArgData, hmArgSQL);
				        throwExceptionWhenFailed(hmResult);
						
					    //updating st_request_dtl
					     ArrayList alReqdtldata = new ArrayList();
					     sql = (String)hmSQL.get("updaterequetdtlfordelete");
					 
					     alReqdtldata.add(pending_Qty);  
					     alReqdtldata.add(alHdrData.get(16)); // modified_by_id
					     alReqdtldata.add(alHdrData.get(17)); // modified_at_ws_no
					     alReqdtldata.add(alHdrData.get(18)); // modified_facility_id
					     alReqdtldata.add(hmDtlRecord.get("item_code")); //  item_code
					     alReqdtldata.add(alHdrData.get(2)); //  doc_no
					     alReqdtldata.add(alHdrData.get(1)); //doc_type_code
					
					    hmArgData.put(DATA,alReqdtldata);
					    hmArgSQL.put(UPDATE_SQL,sql);
					    hmResult	=	update(connection, hmArgData, hmArgSQL);
				        throwExceptionWhenFailed(hmResult);
				  } */	 //ends
				     //Added by Rabbani # inc no:43945(ML-BRU-SCF-1056) on 08-OCT-2013  Starts
				       double committed_qty = 0;
				       if(hmQtyValues.get("COMMITTED_ITEM_QTY") != null){
							committed_qty = Double.parseDouble((String) hmQtyValues.get("COMMITTED_ITEM_QTY"));
						}
				      if(committed_qty > 0){
				         //updating st_request_dtl
					     ArrayList alReqdtldata = new ArrayList();
					     sql = (String)hmSQL.get("SQL_UPDATE_DTL_COMMITTED_QTY");
					     alReqdtldata.add(committed_qty);  
					     alReqdtldata.add(alHdrData.get(16)); // modified_by_id
					     alReqdtldata.add(alHdrData.get(17)); // modified_at_ws_no
					     alReqdtldata.add(alHdrData.get(18)); // modified_facility_id
					     alReqdtldata.add(hmDtlRecord.get("item_code")); //  item_code
					     alReqdtldata.add(alHdrData.get(2)); //  doc_no
					     alReqdtldata.add(alHdrData.get(1)); //doc_type_code
					
					    hmArgData.put(DATA,alReqdtldata);
					    hmArgSQL.put(UPDATE_SQL,sql);
					    hmResult	=	update(connection, hmArgData, hmArgSQL);
				        throwExceptionWhenFailed(hmResult);
				  
				  } //ends
				}
			}
			//ends

			/* To add all new batches
			*/
			ArrayList alBatchInsertData = new ArrayList ();
			
			ArrayList params = null;
			String barcode_id	=	"";
			for(int i=0;i<alExpRecords.size();i++) {
				HashMap hmExpRecord = (HashMap)alExpRecords.get(i);
				ArrayList alBatchData = new ArrayList();
				//alBatchData.add(hmExpRecord.get("FACILITY_ID")); // facility_id
				alBatchData.add(alHdrData.get(0)); // facility_id
				alBatchData.add(alHdrData.get(1)); // doc_type_code
				alBatchData.add(alHdrData.get(2)); // doc_no
				//Added By Rabbani #Inc no:27060(MO-CRF-20048) on 17-Feb-2014
				if((checkForNull((String)hmExpRecord.get("hold_yn"))).equals("Y") && trn_type.equals("ISS")){
					alBatchData.add(issue_seq_no); // seq_no
				}else{
				alBatchData.add(alHdrData.get(3)); // seq_no
				} 
				// modified on 30/12/2004 by pankaj
				alBatchData.add(hmExpRecord.get("doc_srl_no")); 
				alBatchData.add(hmExpRecord.get("STORE_CODE")); 
				alBatchData.add(hmExpRecord.get("ITEM_CODE")); 
				alBatchData.add(hmExpRecord.get("BATCH_ID"));
				alBatchData.add(checkForNull((String)hmExpRecord.get("BIN_LOCATION_CODE"))); 

				alBatchData.add(hmExpRecord.get("EXPIRY_DATE")); 
				alBatchData.add(hmExpRecord.get("TRADE_ID")); 
				alBatchData.add(hmExpRecord.get("QTY")); 
				alBatchData.add(checkForNull((String)hmExpRecord.get("RET_ITEM_QTY"))); 
				alBatchData.add(checkForNull((String)hmExpRecord.get("TO_BIN_LOCATION_CODE"))); 
				//alBatchData.add(checkForNull((String)hmExpRecord.get("BARCODE_ID")));commented and added below condition for RUT-CRF-0079
				
				//alExpRecord.add(checkForNull((String)hmExpRecord.get("BARCODE_ID"))); 
				
				if(validatebarcode){
					if(!checkForNull((String)hmExpRecord.get("BARCODE_ID")).equals("")){
						alBatchData.add(checkForNull((String)hmExpRecord.get("BARCODE_ID"))); 
					}else{
						params = new ArrayList();						
						
						params.add(hmExpRecord.get("STORE_CODE"));
						params.add(hmExpRecord.get("ITEM_CODE"));
						params.add(hmExpRecord.get("BATCH_ID"));
						params.add(hmExpRecord.get("BIN_LOCATION_CODE"));
						params.add(hmExpRecord.get("EXPIRY_DATE"));
						
						barcode_id =(String)(fetchRecord(connection,(String)hmSQLValues.get("SQL_ST_ITEM_BATCH_GET_BARCODE_ID"),params).get("BARCODE_ID"));
						
						alBatchData.add(checkForNull(barcode_id));
					}
				}else{
					alBatchData.add(checkForNull((String)hmExpRecord.get("BARCODE_ID")));
				}
					
				alBatchData.add(alHdrData.get(16)); // added_by_id
				alBatchData.add(alHdrData.get(17)); // added_at_ws_no
				//alBatchData.add(hmExpRecord.get("FACILITY_ID")); // added_facility_id
				alBatchData.add(alHdrData.get(0)); // added_facility_id

				alBatchData.add(alHdrData.get(16)); // modified_by_id
				alBatchData.add(alHdrData.get(17)); // modified_at_ws_no
				alBatchData.add(alHdrData.get(18)); // modified_facility_id
//System.out.println("Test Patch 02/06/2011 - insert delete ");
				alBatchInsertData.add(alBatchData);
				
				//System.out.println("alBatchInsertData 1508" +alBatchInsertData);
			}

			sql = (String) hmSQL.get("stSQLExpInsert");
			hmArgData.put(DATA, alBatchInsertData);
			hmArgSQL.put(BATCH_SQL, sql);
			//System.out.println("hmArgData 1514" +hmArgData);
			//System.out.println("hmArgSQL 1515" +hmArgSQL);
			
			 

			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult); 
            

			/* To block all the batches
			*/
			//if(!(isFinalized)) {
			
				for(int i=0;i<alExpRecords.size();i++) {
					HashMap hmExpRecord = (HashMap)alExpRecords.get(i);
					//System.out.println("isFinalized 1896" +isFinalized);
					//System.out.println("hmExpRecord 1897" +hmExpRecord);
					if(!(isFinalized) || (checkForNull((String)hmExpRecord.get("hold_yn")).equals("Y") && trn_type.equals("ISS"))){
					HashMap hmBatchData = new HashMap();  	
                    // save the item codein case of error

                    stCurrentItemCodeInCaseOfError=(String)hmExpRecord.get("ITEM_CODE");
					hmBatchData.put("store_code", hmExpRecord.get("STORE_CODE"));
					hmBatchData.put("item_code", hmExpRecord.get("ITEM_CODE"));
					hmBatchData.put("batch_id", hmExpRecord.get("BATCH_ID"));
					hmBatchData.put("bin_location_code",checkForNull((String) hmExpRecord.get("BIN_LOCATION_CODE")));

					hmBatchData.put("expiry_date_or_receipt_date", hmExpRecord.get("EXPIRY_DATE"));
					hmBatchData.put("trn_qty", hmExpRecord.get("QTY"));
					hmBatchData.put("login_by_id",alHdrData.get(16));
					hmBatchData.put("login_at_ws_no",alHdrData.get(17));
					hmBatchData.put("login_facility_id",alHdrData.get(18));
//System.out.println("Test Patch 02/06/2011 - blockReleaseBatch ");
					hmResult	=	blockReleaseBatch(connection, hmBatchData,hmSQL, 'B');
					throwExceptionWhenFailed(hmResult);
				}
			  }
			//}
			
			       
			for (int i=0;i<alExpRecords.size();i++) {
				if(isFinalized) {
					HashMap hmExpRecord = (HashMap)alExpRecords.get(i);
					HashMap hmParameters = new HashMap();
					
					if(checkForNull((String)hmExpRecord.get("hold_yn")).equals("N")){
					// save the item codein case of error

					stCurrentItemCodeInCaseOfError=(String)hmExpRecord.get("ITEM_CODE");
					hmParameters.put("item_code",hmExpRecord.get("ITEM_CODE"));
					hmParameters.put("store_code",alHdrData.get(6));
					hmParameters.put("to_store_code",alHdrData.get(7));
					hmParameters.put("trn_type",alHdrData.get(11));
					hmParameters.put("trn_qty",hmExpRecord.get("QTY"));
					hmParameters.put("batch_id",hmExpRecord.get("BATCH_ID"));
					hmParameters.put("expiry_date_or_receipt_date",hmExpRecord.get("EXPIRY_DATE"));
					hmParameters.put("trade_id",hmExpRecord.get("TRADE_ID"));
					hmParameters.put("from_bin_location_code",checkForNull((String)hmExpRecord.get("BIN_LOCATION_CODE")));
					String s_to = checkForNull((String) hmExpRecord.get("TO_BIN_LOCATION_CODE"));
					hmParameters.put("to_bin_location_code", s_to);

					hmParameters.put("suspended_batch_allowed_yn", "N");
					hmParameters.put("release_batch_yn", "N");
					hmParameters.put("last_receipt_date", alHdrData.get(4));
					hmParameters.put("last_issue_date", alHdrData.get(4));

					hmParameters.put("login_by_id",alHdrData.get(16));
					hmParameters.put("login_at_ws_no",alHdrData.get(17));
					hmParameters.put("login_facility_id",alHdrData.get(18));
					hmParameters.put("barcode_id",checkForNull((String)hmExpRecord.get("BARCODE_ID")));
					

	String modified_date ="Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')";
				ArrayList  hmparam = new ArrayList();
			            
				String p_from_bin_location_code		= checkForNull (hmParameters.get("from_bin_location_code"));
				String p_from_store_code				= checkForNull (hmParameters.get("store_code")); 
				String p_to_store_code					= checkForNull	(hmParameters.get("to_store_code"));
				String p_to_bin_location_code			= checkForNull (hmParameters.get("to_bin_location_code"));
				String p_item_code						= checkForNull (hmParameters.get("item_code")); 
				String p_batch_id						= checkForNull (hmParameters.get("batch_id")); 
				String p_expiry_date_or_receipt_date	= checkForNull (hmParameters.get("expiry_date_or_receipt_date"));
						
						   hmparam.add(p_from_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_from_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                   String mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
						   							   
						   hmParameters.put("modified_date",mod_date);
						   hmparam = new ArrayList();
						    hmparam.add(p_to_store_code);
						   hmparam.add(p_item_code);
						   hmparam.add(p_batch_id);
						   hmparam.add(p_to_bin_location_code);
						   hmparam.add(p_expiry_date_or_receipt_date);
		                    mod_date = (String)((HashMap)fetchRecord(connection,modified_date,hmparam)).get("MODIFIED_DATE");
					
						   hmParameters.put("to_modified_date",mod_date);
					
						  
					updateBatchOnLine(connection, hmSQL, hmParameters);
					 //Added for MOHE-CRF-0001 start
					if(site){
					if(!(fm_facility_id.equals(to_facility_id))){
						System.out.println(hmExpRecord.get("ITEM_CODE")+","+hmExpRecord.get("TRADE_ID")+","+hmExpRecord.get("BATCH_ID")+","+alHdrData.get(16)+","+alHdrData.get(17)+","+fm_facility_id+","+to_facility_id);
						CallableStatement callableStatement = null;
						callableStatement	= connection.prepareCall("{ call bl_create_material_batch_price (?,?,?,?,?,?,?,?,?,?,?) }");
						callableStatement.setString(1, (String)hmExpRecord.get("ITEM_CODE"));
						callableStatement.setString(2, ((String)hmExpRecord.get("TRADE_ID")));
						callableStatement.setString(3, (String)hmExpRecord.get("BATCH_ID")); 
						callableStatement.setString(4, "");
						callableStatement.setString(5, (String)alHdrData.get(16));
						callableStatement.setString(6, (String)alHdrData.get(17));
						callableStatement.registerOutParameter(7, Types.VARCHAR);
						callableStatement.registerOutParameter(8, Types.VARCHAR);
						callableStatement.registerOutParameter(9, Types.VARCHAR);
						callableStatement.setString(10, (String)fm_facility_id);
						callableStatement.setString(11, (String)to_facility_id);
						callableStatement.execute();
						
					}
					}
					//Added for MOHE-CRF-0001 end

					double trn_qty = Double.parseDouble((String)hmExpRecord.get("QTY"));

					hmParameters.put("trn_qty", Double.toString(-trn_qty));						
					hmParameters.put("doc_type_code",alHdrData.get(1));
					hmParameters.put("other_store_code", alHdrData.get(7));
					hmParameters.put("doc_no", alHdrData.get(2));
					// modified on 30/10/2004 by pankaj
					hmParameters.put("doc_srl_no", hmExpRecord.get("doc_srl_no"));
					hmParameters.put("doc_date", alHdrData.get(4)); 
					hmParameters.put("doc_ref", alHdrData.get(5)); 
					hmParameters.put("stk_uom_code", hmExpRecord.get("uom_code"));
					hmParameters.put("stock_item_yn", from_stk_item_yn);
					hmParameters.put("bin_location_code",checkForNull((String)hmExpRecord.get("BIN_LOCATION_CODE")));
					dtl_unit_cost=(String)hmItemInfo.get(hmExpRecord.get("ITEM_CODE"));

					hmParameters.put("item_unit_cost",dtl_unit_cost);	
					hmParameters.put("seq_no",seq_no);	
					
					insertItemTrnDetail(connection, hmParameters, hmSQL, 1);		 							

					sql = (String)hmSQL.get("GetStockItemYNFlag");
					ArrayList alStkYN	=	new ArrayList();
					alStkYN.add(hmExpRecord.get("ITEM_CODE"));
					alStkYN.add(alHdrData.get(7));

					HashMap hmStkYN					= fetchRecord(connection, sql, alStkYN);
					to_stk_item_yn	= (String)hmStkYN.get("STOCK_ITEM_YN"); 

					hmParameters.put("stock_item_yn", to_stk_item_yn);
					hmParameters.put("item_unit_cost",dtl_unit_cost);
				    hmParameters.put("bin_location_code",checkForNull((String) hmExpRecord.get("TO_BIN_LOCATION_CODE")));

					hmParameters.put("store_code", alHdrData.get(7));
					hmParameters.put("other_store_code", alHdrData.get(6));
					hmParameters.put("trn_qty", Double.toString(trn_qty));						

					insertItemTrnDetail(connection, hmParameters, hmSQL, 2);
//					System.out.println("5555555555555555"+hmParameters);
					if (to_stk_item_yn.equals("N")) {
						hmParameters.put("trn_qty", "-"+Double.toString(trn_qty));
						hmParameters.put("item_unit_cost",dtl_unit_cost);	
						hmParameters.put("trn_type", "CON");
						hmParameters.put("store_code", alHdrData.get(7));
						hmParameters.put("other_store_code", alHdrData.get(6));
//System.out.println("Test Patch 02/06/2011 - before insertItemTrnDetail ");
						insertItemTrnDetail(connection, hmParameters, hmSQL, 3);		 	
//						System.out.println("6666666666666666666"+hmParameters);			
					}
				}
				}
			}

			if ((isFinalized || process_ack_yn)&& trn_type.equals("ISS")) {
				ArrayList alStatusParam = new ArrayList ();
				alStatusParam.add(alHdrData.get(0));
				alStatusParam.add(alHdrData.get(1));
				alStatusParam.add(alHdrData.get(2));								
				//String close_req_yn = (String)alHdrData.get(14); // close_req_after_issue_yn
				String status  = "";
				String cancelled_by_id =""; // CANCELLED_BY_ID  -- Added by Padmapriya On 31/01/2012
				String cancelled_remarks = ""; // CANCELLED_BY_ID  -- Added by Padmapriya On 31/01/2012
//				try {
					sql = (String)	hmSQL.get	("RequestStatusSelect");
					HashMap statusMap = fetchRecord(connection,sql,alStatusParam);
					status  = (String) statusMap.get("STATUS");
//				}
//				catch (Exception exception) {
//					exception.printStackTrace();
//				}
				if (status !=null && (!status.equals("1"))) {
					status = status.trim();
					if (status.equals("2")) {
						status = "C";
					}
					else if (status.equals("3")) {
						status = "P";
					}
					if (status.equals("P") && close_req_yn.equals("Y")) {
						status = "L";
					cancelled_by_id = (String)alHdrData. get(16); // CANCELLED_BY_ID  -- Added by Padmapriya On 31/01/2012
					cancelled_remarks = (String)alHdrData.get(15); // CANCELLED_REMARKS -- Added by Padmapriya On 31/01/2012
					}					
				
					
					sql = (String)	hmSQLValues.get	("RequestStatusUpdateSQL");
					preparedStatement = connection.prepareStatement(sql);
					
					alData = new ArrayList();
					//alData.add(cancelled_by_id); // CANCELLED_BY_ID  -- Added by Padmapriya On 31/01/2012
					//alData.add(cancelled_remarks); // CANCELLED_REMARKS -- Added by Padmapriya On 31/01/2012
					alData.add(""); // CANCELLED_BY_ID -- Added by Padmapriya On 31/01/2012
					alData.add(""); // CANCELLED_REMARKS -- Added by Padmapriya On 31/01/2012
					alData.add(status); // request_status
					alData.add(alHdrData.get(16)); // modified_by_id
					alData.add(alHdrData.get(17)); // modified_at_ws_no
					alData.add(alHdrData.get(18)); // modified_facility_id
					alData.add("");//MO-CRF-20173
					//alData.add(alHdrData.get(0)); // facility_id - Where clause
					alData.add(alHdrData.get(1)); // doc_type_code - Where clause
					alData.add(alHdrData.get(2)); // doc_no - Where clause

					setData(preparedStatement,alData);
					iResult	 =	preparedStatement.executeUpdate();
					if (iResult<=0) {
						isUpdateSuccessful = false;
					}
//System.out.println("Test Patch 02/06/2011 - ................. ");
					if(!isUpdateSuccessful){
						hmResult.put(RESULT,FALSE);
						hmResult.put(MESSAGE,"FAILED");
						connection.rollback();
						throw new Exception("Update failed in Request header record");
					}
				}
				if (isUpdateSuccessful) {
					connection.commit();
					if(preparedStatement!=null) {
						preparedStatement.close();
					}
				}
			}

			ArrayList arComReqQty = new ArrayList();
			ArrayList arFinalComReqQty = new ArrayList();
			ArrayList alTemp = new ArrayList();
			HashMap hmTempQty = new HashMap();
			arComReqQty = (ArrayList)hmData.get("REQ_DTL_COM_QTY_DATA");

			/*if((arComReqQty.size())> 0){
				for(int i=0;i<arComReqQty.size();i++){
					hmTempQty = (HashMap)arComReqQty.get(i);
					alTemp.add(alHdrData.get(1));
					alTemp.add(alHdrData.get(2));
					alTemp.add((String)hmTempQty.get("item_code"));
					arFinalComReqQty.add(alTemp);
				}
			}
			sql = (String) hmSQL.get("SQL_ST_ISSUE_REQ_UPDATE_COMMITED_REQ_QTY");
			hmArgData.put(DATA, arFinalComReqQty);
//System.out.println("Test Patch 02/06/2011 - ************** ");
			hmArgSQL.put(BATCH_SQL, sql);
			if((arFinalComReqQty.size())>0){
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult); 
			}*/
			
			arComReqQty.clear();
			arFinalComReqQty.clear();
			alTemp.clear();
			hmTempQty.clear();
			
            connection.commit();
        }
        catch(Exception exception){
			try{
				connection.rollback();
				exception.printStackTrace();
				System.err.println("Exception-------hmData" +hmData);
            }
            catch(Exception subException){
                subException.printStackTrace();
            }
            hmResult.put(RESULT, FALSE);
            hmResult.put(MSGID, exception.getMessage());
            hmResult.put(MESSAGE, exception.toString());
 
			if ((exception.getMessage().equals("INSUFFICIENT_BATCH_QTY")) || (exception.getMessage().equals("NEGATIVE_STOCK"))) {
				hmResult.put("flag",stCurrentItemCodeInCaseOfError);
			}

        }
        finally{
            try{
				closeConnection(connection, properties);
            }
            catch(Exception exception){
                exception.printStackTrace();
            }
        }
		if(!isUpdateSuccessful) {
			hmResult.put(RESULT,FALSE);
			hmResult.put(MESSAGE,"FAILED");
		}
        hmResult.put("doc_no",doc_no);
		return hmResult;
    }

	/**
	* method to insert data in to st_item_move_summ.
	*/					 
	public void insertItemMoveSummary (Connection connection, HashMap hmData, HashMap hmSQL) throws Exception {
		try {
			HashMap	hmArgData				=	new HashMap();
			HashMap	hmArgSQL				=	new HashMap();
			HashMap hmReturn				=	new HashMap();
			ArrayList alItemMoveSummRecord	=	new ArrayList();
			String stSQL					=	null;		
			alItemMoveSummRecord.clear();
			alItemMoveSummRecord.add(hmData.get("doc_date"));
			alItemMoveSummRecord.add(hmData.get("doc_date"));
			HashMap hmResult = fetchRecord(connection, (String)hmSQL.get ("GetMonthAndYear"));
			String l_move_month	= (String)hmResult.get("MM");
			String l_move_year	= (String)hmResult.get("YYYY");

			alItemMoveSummRecord.clear();
			alItemMoveSummRecord.add(hmData.get("login_facility_id")); // facility_id
			alItemMoveSummRecord.add(hmData.get("item_code"));
			alItemMoveSummRecord.add(hmData.get("store_code")); // store_code
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);			   
			hmResult = fetchRecord(connection,(String)hmSQL.get ("SummaryExistsCheckSQL"),alItemMoveSummRecord);
			int summary_count= Integer.parseInt((String)(hmResult.get("COUNT")));

			if(summary_count == 0) {											 

				alItemMoveSummRecord.clear();
				alItemMoveSummRecord.add(hmData.get("login_facility_id"));
				alItemMoveSummRecord.add(hmData.get("item_code"));
				alItemMoveSummRecord.add(hmData.get("store_code")); // store_code
				alItemMoveSummRecord.add(l_move_year);
				alItemMoveSummRecord.add(l_move_month);
				alItemMoveSummRecord.add(hmData.get("trn_qty"));
				/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmData.get("trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add(hmData.get("trn_value"));//month_closing_value = item_cost_value
			}
				
				alItemMoveSummRecord.add(hmData.get("trn_qty"));
				alItemMoveSummRecord.add(hmData.get("trn_value"));				   

				alItemMoveSummRecord.add(hmData.get("in_iss_qty"));				   
				alItemMoveSummRecord.add(hmData.get("in_iss_cost"));				   
				alItemMoveSummRecord.add(hmData.get("out_iss_qty_st"));				   
				alItemMoveSummRecord.add(hmData.get("out_iss_cost_st"));				   
				alItemMoveSummRecord.add(hmData.get("out_iss_qty_ns"));				   
				alItemMoveSummRecord.add(hmData.get("out_iss_cost_ns"));				   
				alItemMoveSummRecord.add(hmData.get("cons_qty"));				   
				alItemMoveSummRecord.add(hmData.get("cons_cost"));				   

				alItemMoveSummRecord.add(hmData.get("login_by_id"));
				alItemMoveSummRecord.add(hmData.get("login_at_ws_no"));
				alItemMoveSummRecord.add(hmData.get("login_facility_id"));
				alItemMoveSummRecord.add(hmData.get("login_by_id"));
				alItemMoveSummRecord.add(hmData.get("login_at_ws_no"));
				alItemMoveSummRecord.add(hmData.get("login_facility_id"));
				
				stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQL");			   
				hmArgData.put(DATA,alItemMoveSummRecord);
				hmArgSQL.put(INSERT_SQL,stSQL);
				hmReturn	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);
			}
			else {


				alItemMoveSummRecord.clear();									   
				alItemMoveSummRecord.add(hmData.get("trn_qty"));
				alItemMoveSummRecord.add(hmData.get("trn_value"));
				alItemMoveSummRecord.add(hmData.get("trn_qty"));
				/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmData.get("trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add(hmData.get("trn_value"));//month_closing_value = item_cost_value
			}

				alItemMoveSummRecord.add(hmData.get("in_iss_qty"));
				alItemMoveSummRecord.add(hmData.get("in_iss_cost"));
				alItemMoveSummRecord.add(hmData.get("out_iss_qty_st"));
				alItemMoveSummRecord.add(hmData.get("out_iss_cost_st"));
				alItemMoveSummRecord.add(hmData.get("out_iss_qty_ns"));
				alItemMoveSummRecord.add(hmData.get("out_iss_cost_ns"));
				alItemMoveSummRecord.add(hmData.get("cons_qty"));
				alItemMoveSummRecord.add(hmData.get("cons_cost"));

				alItemMoveSummRecord.add(hmData.get("login_by_id"));
				alItemMoveSummRecord.add(hmData.get("login_at_ws_no"));
				alItemMoveSummRecord.add(hmData.get("login_facility_id"));		   
				alItemMoveSummRecord.add(hmData.get("login_facility_id"));
				alItemMoveSummRecord.add(hmData.get("item_code"));
				alItemMoveSummRecord.add(hmData.get("store_code")); // store_code
				alItemMoveSummRecord.add(l_move_month);	
				alItemMoveSummRecord.add(l_move_year);							   
				stSQL = (String)hmSQL.get ("ItemMovSumUpdateSQL");				   
				hmArgData.put(DATA,alItemMoveSummRecord);
				hmArgSQL.put(UPDATE_SQL,stSQL);
				hmReturn	=	update(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);
			}
		}
		catch (Exception ex) {
			ex.printStackTrace();
		}

	} 
	public void insertItemTrnDetail(Connection connection, HashMap hmData, HashMap hmSQL, int srl_no) throws Exception {
		try {
			//System.out.println("qqqqqqqqqqqqqqqqqqqqqqqqqqq");
			String l_trn_srl_no = Integer.toString(srl_no);
			ArrayList alTrnDtlList = new ArrayList();
			HashMap	hmArgData				=	new HashMap();
			HashMap	hmArgSQL				=	new HashMap();
			HashMap hmReturn				=	new HashMap();
			String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)hmData.get("store_code")).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
			alTrnDtlList.clear();
			//alTrnDtlList.add(hmData.get("login_facility_id"));
			alTrnDtlList.add(to_facility_id);
			alTrnDtlList.add(hmData.get("store_code"));
			alTrnDtlList.add(hmData.get("item_code"));
			alTrnDtlList.add(l_trn_srl_no);
			alTrnDtlList.add(hmData.get("trn_type"));
			alTrnDtlList.add(hmData.get("doc_type_code"));
			alTrnDtlList.add(hmData.get("doc_no"));
			alTrnDtlList.add(hmData.get("doc_srl_no"));
			alTrnDtlList.add(hmData.get("doc_date"));
			alTrnDtlList.add(hmData.get("doc_ref"));
			alTrnDtlList.add(hmData.get("batch_id"));
			alTrnDtlList.add(hmData.get("expiry_date_or_receipt_date"));
			alTrnDtlList.add(hmData.get("trn_qty"));
			alTrnDtlList.add(hmData.get("item_unit_cost"));
			alTrnDtlList.add(hmData.get("stk_uom_code"));
			alTrnDtlList.add(hmData.get("stock_item_yn"));	  
			alTrnDtlList.add(hmData.get("login_by_id"));
			alTrnDtlList.add(hmData.get("login_at_ws_no"));
			alTrnDtlList.add(hmData.get("login_facility_id"));
			alTrnDtlList.add(hmData.get("login_by_id"));
			alTrnDtlList.add(hmData.get("login_at_ws_no"));
			alTrnDtlList.add(hmData.get("login_facility_id"));
			String s_trn_bin = (String) hmData.get("bin_location_code"); 
			if (s_trn_bin == null){
			alTrnDtlList.add(""); 
			}
			else{
			alTrnDtlList.add(hmData.get("bin_location_code")); 
			}
			alTrnDtlList.add(hmData.get("trade_id"));		  
			alTrnDtlList.add(hmData.get("other_store_code"));	
			String s_seq_no = (String) hmData.get("seq_no"); 
			if (s_seq_no == null){
			alTrnDtlList.add("1"); 
			}
			else{
			alTrnDtlList.add(hmData.get("seq_no")); 
			}
			//Commentted for ML-BRU-SCF-1920 start
			//Added for GHL-SCF-1172 starts 
			/*ArrayList alTrnDtlNew = new ArrayList();
			alTrnDtlNew.add(to_facility_id);
			alTrnDtlNew.add(hmData.get("doc_type_code"));
			alTrnDtlNew.add(hmData.get("doc_no"));
			alTrnDtlNew.add(hmData.get("item_code"));
			alTrnDtlNew.add(hmData.get("store_code"));
	        alTrnDtlNew.add(hmData.get("batch_id"));
	        alTrnDtlNew.add(hmData.get("expiry_date_or_receipt_date"));
	        if (s_trn_bin == null){
	        	alTrnDtlNew.add(""); 
				}
				else{
					alTrnDtlNew.add(hmData.get("bin_location_code")); 
				}
	        if (s_seq_no == null){
	        	alTrnDtlNew.add("1"); 
				}
				else{
					alTrnDtlNew.add(hmData.get("seq_no")); 
				}
	        alTrnDtlNew.add(hmData.get("trn_type"));//Added against KDAH-SCF-0433
			System.out.println("to_facility_idvalue"+to_facility_id);
			System.out.println("doc_type_codevalue"+hmData.get("doc_type_code"));
			System.out.println("doc_novalue"+hmData.get("doc_no"));
			System.out.println("item_codevalue"+hmData.get("item_code"));
			System.out.println("store_codevalue"+hmData.get("store_code"));
			System.out.println("batch_idvalue"+hmData.get("batch_id"));
			System.out.println("alTrnDtlNew ---> "+alTrnDtlNew);
			int chkCount=Integer.parseInt((String)fetchRecord(connection, eST.Common.StRepository.getStKeyValue("SQL_ITEM_TRN_DTL_INSERT_ISSUE_COUNT"), alTrnDtlNew).get("CNT"));
			System.out.println("countvalue"+chkCount);
			if(chkCount==0){*/
			     //Commentted for ML-BRU-SCF-1920 end
				//Added for GHL-SCF-1172 ends 
				String stSQL	=	(String)	hmSQL.get ("ItemTrnDtlInsertSQL");
				hmArgData.put(DATA,alTrnDtlList);
				hmArgSQL.put(INSERT_SQL,stSQL);									  
				hmReturn	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmReturn);
				     //Commentted for ML-BRU-SCF-1920 start
					//Added for GHL-SCF-1172 starts 
			/*}else{
				hmData.put(RESULT,FALSE);
				hmData.put(MESSAGE,"FAILED");
				throwExceptionWhenFailed(hmData);
			}*/
						//Added for GHL-SCF-1172 ends
						//Commentted for ML-BRU-SCF-1920 end 
			/*String stSQL	=	(String)	hmSQL.get ("ItemTrnDtlInsertSQL");
			hmArgData.put(DATA,alTrnDtlList);
			hmArgSQL.put(INSERT_SQL,stSQL);									  
			hmReturn	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);*/
		}
		catch (Exception ex) {
			ex.printStackTrace();
			throw new Exception ("Error encountered during Insert of Trn detail");
		}
	}


//end
	public void insertItemMoveSummaryForISS (Connection connection,HashMap hmParameters) throws Exception {
		HashMap	hmArgData				=	new HashMap();
		HashMap	hmArgSQL				=	new HashMap();

//		ArrayList alDtlDataFrom			=	new ArrayList();
//        ArrayList alDtlDataTo			=	new ArrayList();

		ArrayList alItemMoveSummRecord	=	new ArrayList();
//		ArrayList alCommonData			=	(ArrayList)	hmData1.get("COMMON_DATA");
		String l_doc_date	= (String)hmParameters.get("doc_date");
		alItemMoveSummRecord.clear();
		alItemMoveSummRecord.add(l_doc_date);
		alItemMoveSummRecord.add(l_doc_date);
		

		HashMap hmResult = fetchRecord(connection,(String)hmSQL.get ("GetMonthAndYear"));

		String l_move_month	= (String)hmResult.get("MM");
		String l_move_year	= (String)hmResult.get("YYYY");


        /* For From record to be inserted in st_item_move_summ table */
		
		String fm_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)hmParameters.get("store_code")).get("FACILITY_ID"); //Added by Rabbani on 15/04/2014
		

		alItemMoveSummRecord.clear();
		//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id
		alItemMoveSummRecord.add(fm_facility_id);      // facility_id
		alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code
		alItemMoveSummRecord.add(hmParameters.get("store_code"));    // store_code
		alItemMoveSummRecord.add(l_move_month);
		alItemMoveSummRecord.add(l_move_year);
		/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/
		ArrayList  nafitive_value_to_zero=new ArrayList();
		//nafitive_value_to_zero.add(hmParameters.get("login_facility_id"));      // facility_id
		nafitive_value_to_zero.add(fm_facility_id);      // facility_id
		nafitive_value_to_zero.add(hmParameters.get("item_code"));     // Item code
		nafitive_value_to_zero.add(hmParameters.get("store_code"));    // store_code
		nafitive_value_to_zero.add(l_move_month);
		nafitive_value_to_zero.add(l_move_year);
		
		hmResult = fetchRecord(connection,(String)hmSQL.get ("SummaryExistsCheckSQL"),alItemMoveSummRecord);
		int summary_count= Integer.parseInt((String)(hmResult.get("COUNT")));

		if(summary_count == 0) {

			alItemMoveSummRecord.clear();
			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));  // facility_id    
			alItemMoveSummRecord.add(fm_facility_id);  // facility_id    
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code      
			alItemMoveSummRecord.add(hmParameters.get("store_code"));    // store_code     
			alItemMoveSummRecord.add(l_move_year);
			alItemMoveSummRecord.add(l_move_month);

			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //month_closing_qty
			/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmParameters.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));//month_closing_value = item_cost_value
			}
			
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //iss_qty   
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// iss_cost 
			alItemMoveSummRecord.add("0");      //IN_ISS_QTY, 
			alItemMoveSummRecord.add("0");      //IN_ISS_COST
			 if(hmParameters.get("to_stk_item_yn").toString().equals("Y"))
			  {
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  // OUT_ISS_QTY_ST, 
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// OUT_ISS_COST_ST, 
			alItemMoveSummRecord.add("0");// OUT_ISS_QTY_NS, 
			alItemMoveSummRecord.add("0");// OUT_ISS_COST_NS,
			  }
			else
			  {
			alItemMoveSummRecord.add("0");  // OUT_ISS_QTY_ST, 
			alItemMoveSummRecord.add("0");// OUT_ISS_COST_ST, 
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  // OUT_ISS_QTY_NS, 
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// OUT_ISS_COST_NS,
			  }						   
			alItemMoveSummRecord.add("0");// CONS_QTY, 
			alItemMoveSummRecord.add("0");// CONS_COST,
			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 

			if(hmParameters.get("trn_type").toString().equals("ISS"))
				stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQL");
			else
				stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQL_URG");

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmReturn	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}
		else {

			alItemMoveSummRecord.clear();

			if(hmParameters.get("to_stk_item_yn").toString().equals("Y"))
			{
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //iss_qty   
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// iss_cost 
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //month_closing_qty
			/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmParameters.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));//month_closing_value = item_cost_value
			}
			//month_closing_value

			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  // OUT_ISS_QTY_ST, 
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// OUT_ISS_COST_ST,   

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 

			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(fm_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("store_code"));    // store_code   
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			if(hmParameters.get("trn_type").toString().equals("ISS"))
				stSQL = (String)hmSQL.get ("Fm_ST_ItemMovSumFromUpdateSQL");
			else
				stSQL = (String)hmSQL.get ("Fm_ST_ItemMovSumFromUpdateSQL_URG");
			}
			else
			{

			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //iss_qty   
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// iss_cost 
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  //month_closing_qty
			/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmParameters.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));//month_closing_value = item_cost_value
			}
			//month_closing_value

			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  // OUT_ISS_QTY_NS, 
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// OUT_ISS_COST_NS,   

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 

			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(fm_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("store_code"));    // store_code   
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			if(hmParameters.get("trn_type").toString().equals("ISS"))
			stSQL = (String)hmSQL.get ("Fm_NS_ItemMovSumFromUpdateSQL");
			else
			stSQL = (String)hmSQL.get ("Fm_NS_ItemMovSumFromUpdateSQL_URG");
			}

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmReturn	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
			}
//		}

		/* For To record to be inserted in st_item_move_summ table */
		
		String to_facility_id = (String)fetchRecord(connection, (String)hmSQL.get ("sql_st_facility_id_select"), (String)hmParameters.get("to_store_code")).get("FACILITY_ID");


		alItemMoveSummRecord.clear();
		//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
		alItemMoveSummRecord.add(to_facility_id);      // facility_id  
		alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
		alItemMoveSummRecord.add(hmParameters.get("to_store_code"));    // to_store_code   
		alItemMoveSummRecord.add(l_move_month);
		alItemMoveSummRecord.add(l_move_year);

		hmResult = fetchRecord(connection,(String)hmSQL.get ("SummaryExistsCheckSQL"),alItemMoveSummRecord);
		summary_count= Integer.parseInt((String)(hmResult.get("COUNT")));

		if(summary_count == 0) {


			alItemMoveSummRecord.clear();
			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(to_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("to_store_code"));    // to_store_code   
			alItemMoveSummRecord.add(l_move_year);
			alItemMoveSummRecord.add(l_move_month);

			if(hmParameters.get("to_stk_item_yn").toString().equals("Y"))
			{
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  //month_closing_qty
			/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmParameters.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add(hmParameters.get("trn_value"));//month_closing_value = item_cost_value
			}
			//month_closing_value
			}
			else
			{
			alItemMoveSummRecord.add("0");//hmParameters.get("trn_qty"));  //month_closing_qty
			alItemMoveSummRecord.add("0");//hmParameters.get("trn_value"));//month_closing_value
			}
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  //iss_qty   
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));// iss_cost 
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  //IN_ISS_QTY, 
			alItemMoveSummRecord.add(hmParameters.get("trn_value")); //IN_ISS_COST
			alItemMoveSummRecord.add("0");// OUT_ISS_QTY_ST, 
			alItemMoveSummRecord.add("0");// OUT_ISS_COST_ST,  
			alItemMoveSummRecord.add("0");// OUT_ISS_QTY_NS, 
			alItemMoveSummRecord.add("0");// OUT_ISS_COST_NS,

			if(hmParameters.get("to_stk_item_yn").toString().equals("Y"))
			{
			alItemMoveSummRecord.add("0");// CONS_QTY, 
			alItemMoveSummRecord.add("0");// CONS_COST,
			}
			else
			{
			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  // CONS_QTY, 
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// CONS_COST,
			}
			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));
			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 


			if(hmParameters.get("trn_type").toString().equals("ISS"))
			stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQL");
			else
			stSQL	=	(String)hmSQL.get ("ItemMovSumInsertSQL_URG");
			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmReturn	=	insert(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}
		else {       ////check 

			alItemMoveSummRecord.clear();

			if(hmParameters.get("to_stk_item_yn").toString().equals("Y"))
			{
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  //iss_qty   
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));// iss_cost 
			if(hmParameters.get("to_stk_item_yn").toString().equals("Y"))
			{
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  //month_closing_qty
			/**
				 * @Name - Priya
				 * @Date - 10/06/2010
				 * @Inc# - 
				 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
				 */

			if(Double.valueOf(checkForNull((String)hmParameters.get("mm_trn_qty"),"0"))==0){
				alItemMoveSummRecord.add("0"); // month_closing_value=0
			}else{
				alItemMoveSummRecord.add(hmParameters.get("trn_value"));//month_closing_value = item_cost_value
			}
			//month_closing_value
			}
			else
			{
			alItemMoveSummRecord.add("0");//hmParameters.get("trn_qty"));  //month_closing_qty
			alItemMoveSummRecord.add("0");//hmParameters.get("trn_value"));//month_closing_value
			}
//			alItemMoveSummRecord.add(hmParameters.get("trn_qty"));  //month_closing_qty
//			alItemMoveSummRecord.add(hmParameters.get("trn_value"));//month_closing_value

			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  // IN_ISS_QTY_ST, 
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));// IN_ISS_COST_ST,   

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 

			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(to_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("to_store_code"));    // to_store_code   
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			if(hmParameters.get("trn_type").toString().equals("ISS"))
			stSQL = (String)hmSQL.get ("To_ST_ItemMovSumFromUpdateSQL");
			else
			stSQL = (String)hmSQL.get ("To_ST_ItemMovSumFromUpdateSQL_URG");
			}
			else
			{
			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  //iss_qty   
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));// iss_cost 
			alItemMoveSummRecord.add("0");//hmParameters.get("trn_qty"));  //month_closing_qty
			alItemMoveSummRecord.add("0");//hmParameters.get("trn_value"));//month_closing_value

			alItemMoveSummRecord.add(hmParameters.get("mm_trn_qty"));  // IN_ISS_QTY_ST, 
			alItemMoveSummRecord.add(hmParameters.get("trn_value"));// IN_ISS_COST_ST,   

			alItemMoveSummRecord.add("-"+hmParameters.get("mm_trn_qty"));  // CON_QTY_NS, 
			alItemMoveSummRecord.add("-"+hmParameters.get("trn_value"));// CON_COST_NS,

			alItemMoveSummRecord.add(hmParameters.get("login_by_id"));       
			alItemMoveSummRecord.add(hmParameters.get("login_at_ws_no"));    
			alItemMoveSummRecord.add(hmParameters.get("login_facility_id")); 

			//alItemMoveSummRecord.add(hmParameters.get("login_facility_id"));      // facility_id  
			alItemMoveSummRecord.add(to_facility_id);      // facility_id  
			alItemMoveSummRecord.add(hmParameters.get("item_code"));     // Item code    
			alItemMoveSummRecord.add(hmParameters.get("to_store_code"));    // to_store_code   
			alItemMoveSummRecord.add(l_move_month);
			alItemMoveSummRecord.add(l_move_year);

			if(hmParameters.get("trn_type").toString().equals("ISS"))
			stSQL = (String)hmSQL.get ("To_NS_ItemMovSumFromUpdateSQL");
			else
			stSQL = (String)hmSQL.get ("To_NS_ItemMovSumFromUpdateSQL_URG");
			}

			hmArgData.put(DATA,alItemMoveSummRecord);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmReturn	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmReturn);
		}
			/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/

		

		 stSQL="UPDATE st_item_move_summ SET month_opening_value = (CASE WHEN month_opening_qty = 0 THEN 0 WHEN month_opening_value < 0 THEN 0 WHEN month_opening_value > 0   THEN month_opening_value END ), month_closing_value = (CASE WHEN month_closing_qty = 0 THEN 0 WHEN month_closing_value < 0 THEN 0 WHEN month_closing_value > 0 THEN month_closing_value END ) WHERE facility_id = ? AND item_code = ? AND store_code = ? AND move_month = ? AND move_year = ? ";
		hmArgData.put(DATA,nafitive_value_to_zero);
		hmArgSQL.put(UPDATE_SQL,stSQL);
		hmReturn	=	update(connection, hmArgData, hmArgSQL);
		throwExceptionWhenFailed(hmReturn);


	}

	public void copyArrayList( ArrayList sourceArrayList, ArrayList destinationArrayList){
		for (int i=0;i<sourceArrayList.size(); i++ ) {
			destinationArrayList.add(sourceArrayList.get(i));
		}
	}
	
}

/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law. 
 ******************************************************************************/
/*
-------------------------------------------------------------------------------------------------------------------------------------------
Date		            Edit History	        Name		       Rev.Date		     Rev.Name			     Description
-------------------------------------------------------------------------------------------------------------------------------------------
06/04/2017				IN063817				Badmavathi B												 GHL-SCF-1172
-------------------------------------------------------------------------------------------------------------------------------------------
*/
package eST.AuthorizeAtIssueStore;

import javax.ejb.SessionContext;
import javax.ejb.EJBException;
import eCommon.Common.*;
import eST.Common.StEJBSessionAdapter;
import java.sql.Connection;
//import java.sql.Date;
import java.sql.PreparedStatement;			
//import java.sql.BatchUpdateException;
import java.sql.SQLException;
//import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

/**
*
* @ejb.bean
*	name="AuthorizeAtIssueStore"
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="AuthorizeAtIssueStore"
*	local-jndi-name="AuthorizeAtIssueStore"
*	impl-class-name="eST.AuthorizeAtIssueStore.AuthorizeAtIssueStoreManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="eST.AuthorizeAtIssueStore.AuthorizeAtIssueStoreLocal"
*	remote-class="eST.AuthorizeAtIssueStore.AuthorizeAtIssueStoreRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="eST.AuthorizeAtIssueStore.AuthorizeAtIssueStoreLocalHome"
*	remote-class="eST.AuthorizeAtIssueStore.AuthorizeAtIssueStoreHome"
*	generate= "local,remote"
*
*
*/

public	class AuthorizeAtIssueStoreManager extends StEJBSessionAdapter {

	public SessionContext context = null;
	String sql_sy_acc_entity_doc_type_select;	
	String sql_sy_acc_entity_doc_type_select_flag;
	
	public void setSessionContext( SessionContext sessionContext) {
		super.setSessionContext(sessionContext);
		this.context = sessionContext;
	}

	/* Function for handling generic operation.. */

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap insert(HashMap hmData, HashMap hmSQL)	{
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql =	"";
		ArrayList doc_no		=  new ArrayList();
		ArrayList arrExpRecords	=  new ArrayList();
		
		ArrayList alTempData		= new ArrayList();
		ArrayList<Integer> alItemClassCount	= new ArrayList<Integer>();
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");
		alTempData		=	(ArrayList) hmData.get("InsertHDRData");
		if(hmData.containsKey("ItemClassCount")){
			alItemClassCount=	(ArrayList) hmData.get("ItemClassCount");
		}
		ArrayList alData = null;
		ArrayList alRecord = null;
		Properties properties = null;
		boolean isUpdateSuccessful = true;
		String      trn_type		=	"ISS";
		String doc_no_temp = "";
		int      sizeOfTrn		=	1;
		int      trnRecords		=	1;
		int      expRecords		=	0;
		int      oldExpRecords	=	0;
		boolean isDocNoAutoGenerated	=	false;

		int iResult = 0;
		int failedRecordIndex = -1;
		int[] iaResult = null;
		hmReturn.put(RESULT,FALSE);
		ArrayList	alDtlData1			=	(ArrayList)	hmData.get("InsertDTLData");
		try {
			properties =	(Properties) hmData.get("properties");
			connection = getConnection(properties);
			connection.setAutoCommit(false);

			String 	sql_st_records_per_trn_select		=	(String)hmSQL.get ("sql_st_records_per_trn_select");
			HashMap records	=	fetchRecord(connection, sql_st_records_per_trn_select,trn_type);
			int records_per_trn = 0;
			if((String)records.get("RECORDS_PER_TRN")!=null){
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			}else{
				records_per_trn = alDtlData1.size();
			}
			if(item_class_based.equals("Y")){
				sizeOfTrn = alItemClassCount.size();
			}else{
				if(records_per_trn>alDtlData1.size()){
					sizeOfTrn = 1;
				}else if((alDtlData1.size()%records_per_trn)==0){
					sizeOfTrn = alDtlData1.size()/records_per_trn;
				}else{
					sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;
				}
			}
			sql_sy_acc_entity_doc_type_select		=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select");
			sql_sy_acc_entity_doc_type_select_flag	=	(String)hmSQL.get ("sql_sy_acc_entity_doc_type_select_flag");

			// Insert Header Value
			for(int j=0,k=0;j<sizeOfTrn;j++){
				if(item_class_based.equals("Y")){
					//alData = new ArrayList();
					alData = (ArrayList)alTempData.get(j);
					//isFinalized			=	((String)alHdrData.get(8)).equals("Y");
				}else{
					alData = alTempData;
				}
				HashMap hmRecord	=	fetchRecord(connection, sql_sy_acc_entity_doc_type_select_flag, (String)alData.get(1));
				isDocNoAutoGenerated=	checkForNull((String)hmRecord.get("DOC_NUM_GEN_FLAG"),"Y").equals("Y");

				if (isDocNoAutoGenerated) {
					doc_no_temp = 	(String)fetchRecord(connection, sql_sy_acc_entity_doc_type_select, (String)alData.get(1)).get("NEXT_DOC_NO");
				}
				alData.set(2,doc_no_temp);
				doc_no.add((String)alData.get(2));
				//Added for GHL-SCF-1172 starts 
				ArrayList alTrnDtlNew = new ArrayList();
				System.out.println("hmdataaa:"+hmData);
				System.out.println("facility_idvalue"+(String)alData.get(0));
				System.out.println("doc_type_codevalue"+(String)alData.get(1));
				System.out.println("doc_novalue"+(String)alData.get(2));
				System.out.println("seqno"+(String)alData.get(3));
				alTrnDtlNew.add((String)alData.get(0));//facility_id
				alTrnDtlNew.add((String)alData.get(1));//doc_type_code
			    alTrnDtlNew.add((String)alData.get(2));//doc_no
				alTrnDtlNew.add((String)alData.get(3));//seq_no
				int chkCount=Integer.parseInt((String)fetchRecord(connection, eST.Common.StRepository.getStKeyValue("SQL_ITEM_INSERT_ISSUE_HDR_COUNT"), alTrnDtlNew).get("CNT"));  
				System.out.println("countvalue"+chkCount);
				System.out.println("arraylistalTrnDtlNew"+alTrnDtlNew);
					if(chkCount==0){
						//Added for GHL-SCF-1172 ends
				sql = (String) hmSQL.get ("InsertHDRSQL");
				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement,alData);
				iResult = preparedStatement.executeUpdate();
				 if(preparedStatement!=null)
						preparedStatement.close();
				if(iResult != 0){
					hmReturn.put(RESULT,TRUE);
					hmReturn.put(MESSAGE,RECORD_INSERTED);
				}
				else {
					connection.rollback();
					throw new EJBException("Insert failed in header");
				}		//Added for GHL-SCF-1172 starts
					}
					else{
						connection.rollback();
						throw new EJBException("Insert failed in header record");
					}
					//Added for GHL-SCF-1172 ends
				/** Insert in to Request Header */
				sql = null;
				alData = null;
				if(hmSQL.containsKey("InsertReqHdrSQL") && hmData.containsKey("InsertReqHdrData")) {
					sql = (String)	hmSQL.get	("InsertReqHdrSQL");
					alData = (ArrayList)	hmData.get ("InsertReqHdrData");
					if(item_class_based.equals("Y")){
						//alData = new ArrayList();
						alData = (ArrayList)alData.get(j);
						//isFinalized			=	((String)alHdrData.get(8)).equals("Y");
					}
					alData.set(2,doc_no_temp);
					preparedStatement = connection.prepareStatement(sql);
					setData(preparedStatement, alData);
					iResult = preparedStatement.executeUpdate();
					 if(preparedStatement!=null)
						preparedStatement.close();
					if(iResult <= 0) {
						connection.rollback();
						throw new SQLException("Update of Request Header failed");
					}
				}

				/* Insert Issue Detail Record */
				sql = null;
				alData = null;
			//	preparedStatement = null;	 
			if(preparedStatement!=null)
						preparedStatement.close();

				alData = (ArrayList)	hmData.get ("InsertDTLData");
				sql = (String)	hmSQL.get	("InsertDTLSQL");
				preparedStatement = connection.prepareStatement(sql);
				if(item_class_based.equals("Y")){
					trnRecords = k + alItemClassCount.get(j);
				}else{
					if(records_per_trn>alData.size()){
						trnRecords = alData.size();
					}else if((k+records_per_trn)>=alData.size()){
						trnRecords = alData.size();
					}else{
						trnRecords = k+records_per_trn;
					}
				}
				//for (int index=0;i<alData.size() ;index++ ) {
				for (int index = k; index < trnRecords; index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					alRecord.set(2,doc_no_temp);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();

				}
				try {
					iaResult = preparedStatement.executeBatch();
					 if(preparedStatement!=null)
						preparedStatement.close();
				}
				catch (Exception e) {
					e.printStackTrace();
				}
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
				}

				/* Insert Issue Detail Record */
				if(hmSQL.containsKey("InsertReqDtlSQL") && hmData.containsKey("InsertReqDtlData")) {
					sql = null;
					alData = null;
					//preparedStatement = null;	 
					 if(preparedStatement!=null)
						preparedStatement.close();

					alData = (ArrayList) hmData.get ("InsertReqDtlData");
					sql = (String)	hmSQL.get	("InsertReqDtlSQL");
					preparedStatement = connection.prepareStatement(sql);
					//for (int index=0;i<alData.size() ;index++ ) {
					for (int index = k; index < trnRecords; index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						alRecord.set(2,doc_no_temp);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
						preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting request detail record " + failedRecordIndex);
					}
				}
				/* Insert Issue Detail Exp Records */
				sql = null;
				alData = null;
				//preparedStatement = null;
				 if(preparedStatement!=null)
						preparedStatement.close();
				 for(int index1=k;index1<trnRecords;index1++){
						arrExpRecords = (ArrayList)	hmData.get ("ExpRecords");
						expRecords	=	expRecords + Integer.parseInt((String)arrExpRecords.get(index1));
						alData = (ArrayList)	hmData.get ("InsertDTLEXPData");
						sql = (String)	hmSQL.get	("InsertDTLEXPSQL");
						preparedStatement = connection.prepareStatement(sql);
						//for (int index=0;i<alData.size() ;index++ ) {
						for (int index = oldExpRecords; index < expRecords; index++) {
							alRecord = (java.util.ArrayList) alData.get(index);
							alRecord.set(2,doc_no_temp);
							setData(preparedStatement, alRecord);
							preparedStatement.addBatch();
						}
				 
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
							preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
					}
					sql = (String)	hmSQL.get	("UpdateITMBCHSQL");
					alData = (ArrayList)	hmData.get ("UpdateItemBatchData");
					preparedStatement = connection.prepareStatement(sql);
					//for (int index=0;i<alData.size() ;index++ ) {
					for (int index = oldExpRecords; index < expRecords; index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						alRecord.set(2,doc_no_temp);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					 if(preparedStatement!=null)
							preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
					}
						oldExpRecords	= expRecords;
				 }
				iaResult = null;
				sql = null;
				alData = null;
	//			preparedStatement = null;
	 if(preparedStatement!=null)
						preparedStatement.close();

				/* Updation of request header */
				if (hmSQL.containsKey("UpdateHDRSQL") && hmData.containsKey("UpdateHDRData")) {
					sql = (String)	hmSQL.get	("UpdateHDRSQL");
					alData = (ArrayList)	hmData.get ("UpdateHDRData");
					preparedStatement = connection.prepareStatement(sql);
					setData(preparedStatement,alData);
					iResult = preparedStatement.executeUpdate();
					 if(preparedStatement!=null)
						preparedStatement.close();
					if(iResult<=0){
						connection.rollback();
						throw new SQLException("Update of Header failed");
					}
				}
				/* Updation of detail */
				if (hmSQL.containsKey("UpdateDTLSQL") && hmData.containsKey("InsertDTLData")) {
					//java.util.HashMap commitedQty = new java.util.HashMap();
					sql = (String)	hmSQL.get	("UpdateDTLSQL");
					alData = (ArrayList)	hmData.get ("InsertDTLData");
					preparedStatement = connection.prepareStatement(sql);
					//for (int index=0;i<alData.size() ;index++ ) {
					for (int index = k; index < trnRecords; index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						alRecord.set(2,doc_no_temp);
						java.util.ArrayList alDtlUpdate = new java.util.ArrayList ();
						alDtlUpdate.add(alRecord.get(22));
						alDtlUpdate.add(alRecord.get(13));
						alDtlUpdate.add(alRecord.get(14));
						alDtlUpdate.add(alRecord.get(15));
						alDtlUpdate.add(alRecord.get(0));
						alDtlUpdate.add(alRecord.get(1));
						alDtlUpdate.add(alRecord.get(2));  // Doc_no 
						alDtlUpdate.add(alRecord.get(4));  // Doc_srl_no 
						setData(preparedStatement, alDtlUpdate);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					 if(preparedStatement!=null)
						preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
					}
				}
				/*Updating pending_qty to 0 for Zero qty and item level close = 'Y' records */ //MO-CRF-20173
				if(hmSQL.containsKey("UpdateZeroQtyDTLSQL") && hmData.containsKey("alReqDtlZeroQtyData")){
					sql = (String)	hmSQL.get	("UpdateZeroQtyDTLSQL");
					alData = (ArrayList)	hmData.get ("alReqDtlZeroQtyData");
					
				}//MO-CRF-20173
				/* Update of Item Batch Details */
				//below code commeted and copied up by mahes on 7/16/2009
/*				sql = (String)	hmSQL.get	("UpdateITMBCHSQL");
				alData = (ArrayList)	hmData.get ("UpdateItemBatchData");
				preparedStatement = connection.prepareStatement(sql);
				//for (int index=0;i<alData.size() ;index++ ) {
				for (int index = k; index < trnRecords; index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					alRecord.set(2,doc_no_temp);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				 if(preparedStatement!=null)
						preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
				}*/
				/*Update the document no */
				if (hmSQL.containsKey("UpdateDocSQL") && hmData.containsKey("UpdateDocData")) {
					sql = (String)	hmSQL.get	("UpdateDocSQL");
					alData = (ArrayList)	hmData.get ("UpdateDocData");
					preparedStatement = connection.prepareStatement(sql);
					setData(preparedStatement,alData);
					iResult = preparedStatement.executeUpdate();
					 if(preparedStatement!=null)
						preparedStatement.close();
					if(iResult<=0){
						connection.rollback();
						throw new SQLException("Update of Document No failed");
					}
				}
				/* Update the issue_seq_no of Request_header */
				if (hmSQL.containsKey("UpdateIssueSeqSQL") && hmData.containsKey("UpdateIssueSeqData")) {
					sql = (String)	hmSQL.get	("UpdateIssueSeqSQL");
					alData = (ArrayList)	hmData.get ("UpdateIssueSeqData");
					preparedStatement = connection.prepareStatement(sql);
					setData(preparedStatement,alData);
					iResult = preparedStatement.executeUpdate();
					 if(preparedStatement!=null)
						preparedStatement.close();

					if(iResult<=0){
						connection.rollback();
						throw new SQLException("Update of Issue Seq No failed");
					}
				}
				if(item_class_based.equals("Y")){
					k = k + alItemClassCount.get(j);
				}else{
					k=k+records_per_trn;
				}
			}
			connection.commit();
			hmReturn.put(RESULT,TRUE);
			hmReturn.put("doc_no",doc_no);
			hmReturn.put(MESSAGE,RECORD_INSERTED);
        if(preparedStatement!=null)
					preparedStatement.close();
			//	if (connection!=null) {
					closeConnection(connection,properties);	
			}
		catch(SQLException sqlException) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				if(sqlException.getErrorCode()==1)
					hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
				else
					hmReturn.put(MESSAGE,sqlException.toString());
				sqlException.printStackTrace();
			}
			catch (Exception exception) {
				exception.printStackTrace(); 
			}
        }
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace(); 
			}
        }
		finally{
			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				if (connection!=null) {
					closeConnection(connection,(Properties)hmData.get(properties));	
				}
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		return hmReturn;
	}
	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/
		public HashMap modify(HashMap hmData, HashMap hmSQL)	{
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql					=	"";
		String doc_no				=	"";
		ArrayList alData			=	null;
		ArrayList alRecord			=	null;
		Properties properties		=	null;
		boolean isUpdateSuccessful	=	true;
		ArrayList checkedDValues	=	null;
		HashMap hashmapDtlUpdData	=	new HashMap();
		HashMap hashmapDtlUpdDataQ	=	new HashMap();
		String dtlUpdateSQL			=	"";
		ArrayList arrDtlUpdData		=	new ArrayList();


		int iResult = 0;
		int failedRecordIndex = -1;
		int[] iaResult = null;
		hmReturn.put(RESULT,FALSE);

		try {
			properties =	(Properties) hmData.get("properties");
			connection = getConnection(properties);
			connection.setAutoCommit(false);
			checkedDValues=(ArrayList) hmData.get("checkedDValues");
			
			alData =	(ArrayList) hmData.get("InsertHDRData");
			doc_no=(String)alData.get(2);
					//Added for GHL-SCF-1172 starts 
					//sql = (String) hmSQL.get ("InsertHDRSQL");
			ArrayList alTrnDtlNew = new ArrayList();
			System.out.println("hmdataaa:"+hmData);
			System.out.println("facility_idvalue"+(String)alData.get(0));
			System.out.println("doc_type_codevalue"+(String)alData.get(1));
			System.out.println("doc_novalue"+(String)alData.get(2));
			System.out.println("seqno"+(String)alData.get(3));
			alTrnDtlNew.add((String)alData.get(0));//facility_id
			alTrnDtlNew.add((String)alData.get(1));//doc_type_code
		    alTrnDtlNew.add((String)alData.get(2));//doc_no
			alTrnDtlNew.add((String)alData.get(3));//seq_no
			int chkCount=Integer.parseInt((String)fetchRecord(connection, eST.Common.StRepository.getStKeyValue("SQL_ITEM_INSERT_ISSUE_HDR_COUNT"), alTrnDtlNew).get("CNT"));  
			System.out.println("countvalue"+chkCount);
			System.out.println("arraylistalTrnDtlNew"+alTrnDtlNew);
				if(chkCount==0){
					sql = (String) hmSQL.get ("InsertHDRSQL");
						//Added for GHL-SCF-1172 ends
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult = preparedStatement.executeUpdate();
			 if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult != 0){
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MESSAGE,RECORD_INSERTED);
			}
			else {
				connection.rollback();
				throw new EJBException("Insert failed in header");
							//Added for GHL-SCF-1172 starts
					}	
				}
				else{
					connection.rollback();
					throw new EJBException("Insert failed in header record");
						//Added for GHL-SCF-1172 ends
			}	

			/** Insert in to Request Header */

			if(hmSQL.containsKey("InsertReqHdrSQL") && hmData.containsKey("InsertReqHdrData")) {
				sql = (String)	hmSQL.get	("InsertReqHdrSQL");
				alData = (ArrayList)	hmData.get ("InsertReqHdrData");
				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement, alData);
				iResult = preparedStatement.executeUpdate();
				 if(preparedStatement!=null)
					preparedStatement.close();
				if(iResult <= 0) {
					connection.rollback();
					throw new SQLException("Update of Request Header failed");
				}
			}

			/* Insert Issue Detail Record */
			sql = null;
			alData = null;
		//	preparedStatement = null;	 
		if(preparedStatement!=null)
					preparedStatement.close();

			alData = (ArrayList)	hmData.get ("InsertDTLData");
			sql = (String)	hmSQL.get	("InsertDTLSQL");
			preparedStatement = connection.prepareStatement(sql);
			for (int index = 0; index < alData.size(); index++) {
				alRecord = (java.util.ArrayList) alData.get(index);
				// Added by Rabbani ,avoid  multiuser #Inc no:28775 on 19/10/12 Starts 
				ArrayList temp = new ArrayList();
				temp.add((String)hmData.get ("ReqFacilityId"));
				temp.add((String)alRecord.get(1));//doc_type_code
				temp.add((String)alRecord.get(2));//doc_no
				temp.add((String)alRecord.get(3));//seq_no
				temp.add((String)alRecord.get(4));//doc_srl_no
				temp.add((String)alRecord.get(6));//item_code
				
				//String  sql_multi_user_chk = "Select ITEM_CODE,ISS_ITEM_QTY FROM ST_ISSUE_DTL WHERE FACILITY_ID = ? AND DOC_TYPE_CODE = ? AND DOC_NO = ? AND SEQ_NO = NVL(?-1,0) AND DOC_SRL_NO = ? AND  ITEM_CODE = ?";
				
				//Added by Rabbani #Inc no:44011 (ML-BRU-SCF-1071) on 23-OCT-2013
				String  sql_multi_user_chk = "Select ITEM_CODE,ISS_ITEM_QTY FROM ST_ISSUE_DTL DTL,ST_ISSUE_HDR hdr WHERE  hdr.FACILITY_ID = DTL.FACILITY_ID AND   HDR.DOC_TYPE_CODE = DTL.DOC_TYPE_CODE AND HDR.DOC_NO =   DTL.DOC_NO AND HDR.SEQ_NO =  DTL.SEQ_NO  and  FINALIZED_YN != 'D' and dtl. FACILITY_ID = ? AND dtl. DOC_TYPE_CODE = ? AND dtl.DOC_NO = ? AND dtl.SEQ_NO = NVL(?-1,0) AND DOC_SRL_NO = ? AND  ITEM_CODE = ?";
              
				HashMap result_multi_chk = fetchRecord(connection,sql_multi_user_chk,temp);
				
				if(((checkForNull((String)result_multi_chk.get("ITEM_CODE"))).equals((String)alRecord.get(6)))){
				 int  iss_itm_qty = Integer.parseInt((String)result_multi_chk.get("ISS_ITEM_QTY"));
				if(iss_itm_qty == 0){
				connection.rollback();
				throw new EJBException("RECORD_UPDATED_BY_OTH_USER");
				}
			  }
			  //ends 19/10/12
				//Added by Rabbani on 07/12/12 for avoiding Invalid column index Exception
				//Starts
				java.util.ArrayList alDtl = new java.util.ArrayList();
				//for(int i =0; i< 22; i++){
				//for(int i =0; i< 23; i++){ //Added by Rabbani #Inc no: 33564 on 29/006/12 
               for(int i =0; i< 24; i++){				
				 alDtl.add(alRecord.get(i));
				}
               
               alDtl.add(alRecord.get(27)); //MO-CRF-20172 
               System.out.println("alDtl: "+alDtl);  
				setData(preparedStatement, alDtl);
				//ends
				//setData(preparedStatement, alRecord);
				preparedStatement.addBatch();

			}
			try {
				iaResult = preparedStatement.executeBatch();
				 if(preparedStatement!=null)
					preparedStatement.close();
			}
			catch (Exception e) {
				e.printStackTrace();
			}
			for (int i=0;i<iaResult.length ;i++){
				if((iaResult[i] != -2) && (iaResult[i]<0)){
					failedRecordIndex = i;
					isUpdateSuccessful = false;
					break;
				}	
			}
			if(!isUpdateSuccessful){
				connection.rollback();
				throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
			}



			if (hmSQL.containsKey("DeleteDTlItemsSQL") && hmData.containsKey("alDeleteDtlRecord")) {
			dtlUpdateSQL = (String)	hmSQL.get	("DeleteDTlItemsSQL");
			arrDtlUpdData = (ArrayList)	hmData.get ("alDeleteDtlRecord");
      		hashmapDtlUpdData.put("DATA",arrDtlUpdData);
			hashmapDtlUpdDataQ.put(BATCH_SQL,dtlUpdateSQL);
			hmReturn =  operateBatch(connection, hashmapDtlUpdData, hashmapDtlUpdDataQ);
					
			}

			/* Insert Issue Detail Record */
			if(hmSQL.containsKey("InsertReqDtlSQL") && hmData.containsKey("InsertReqDtlData")) {
				sql = null;
				alData = null;
				//preparedStatement = null;	 
				 if(preparedStatement!=null)
					preparedStatement.close();

				alData = (ArrayList) hmData.get ("InsertReqDtlData");
				sql = (String)	hmSQL.get	("InsertReqDtlSQL");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
									}
				iaResult = preparedStatement.executeBatch();
				if(preparedStatement!=null)
					preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting request detail record " + failedRecordIndex);
				}
			}
			/* Insert Issue Detail Exp Records */
			sql = null;
			alData = null;
			//preparedStatement = null;
			 if(preparedStatement!=null)
					preparedStatement.close();
			alData = (ArrayList)	hmData.get ("InsertDTLEXPData");
			sql = (String)	hmSQL.get	("InsertDTLEXPSQL");
			preparedStatement = connection.prepareStatement(sql);
			for (int index = 0; index < alData.size(); index++) {
				alRecord = (java.util.ArrayList) alData.get(index);
				setData(preparedStatement, alRecord);

				preparedStatement.addBatch();
							}
			iaResult = preparedStatement.executeBatch();
			if(preparedStatement!=null)
					preparedStatement.close();
			for (int i=0;i<iaResult.length ;i++){
				if((iaResult[i] != -2) && (iaResult[i]<0)){
					failedRecordIndex = i;
					isUpdateSuccessful = false;
					break;
				}	
			}

			if(!isUpdateSuccessful){
				connection.rollback();
				throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
			}
			iaResult = null;
			sql = null;
			alData = null;
//			preparedStatement = null;
 if(preparedStatement!=null)
					preparedStatement.close();

			/* Updation of request header */
			if (hmSQL.containsKey("UpdateHDRSQL") && hmData.containsKey("UpdateHDRData")) {
				sql = (String)	hmSQL.get	("UpdateHDRSQL");
				alData = (ArrayList)	hmData.get ("UpdateHDRData");
				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement,alData);
				iResult = preparedStatement.executeUpdate();
				 if(preparedStatement!=null)
					preparedStatement.close();
				if(iResult<=0){
					connection.rollback();
					throw new SQLException("Update of Header failed");
				}
			}
			/* Updation of detail */
			if (hmSQL.containsKey("UpdateDTLSQL") && hmData.containsKey("InsertDTLData")) {
				//java.util.HashMap commitedQty = new java.util.HashMap();
				sql = (String)	hmSQL.get	("UpdateDTLSQL");
				alData = (ArrayList)	hmData.get ("InsertDTLData");
				System.err.println("sql@@==="+sql);
				System.err.println("alData @@==="+alData);
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					System.err.println("alRecord@@@===="+alRecord);
					java.util.ArrayList alDtlUpdate = new java.util.ArrayList ();
					//alDtlUpdate.add(alRecord.get(23)); //Added by Rabbani #Inc no: 33564 on 29/006/12 
                     alDtlUpdate.add(alRecord.get(24));					
					alDtlUpdate.add(alRecord.get(22)); 
					if(alRecord.get(25).equals("Y")){
                      alDtlUpdate.add(alRecord.get(26)); //pending qty
					}
					alDtlUpdate.add(alRecord.get(13));
					alDtlUpdate.add(alRecord.get(14));
					alDtlUpdate.add(alRecord.get(15));
					alDtlUpdate.add(alRecord.get(27));//added for MO-CRF-20173 START
					alDtlUpdate.add(alRecord.get(28));//END  
					alDtlUpdate.add((String)hmData.get ("ReqFacilityId"));
					alDtlUpdate.add(alRecord.get(1));
					alDtlUpdate.add(alRecord.get(2));  // Doc_no 
					if(checkedDValues.size()==0){
					alDtlUpdate.add(alRecord.get(4));  // Doc_srl_no 
					}else{
					alDtlUpdate.add(alRecord.get(6));  // item_code 
					}
					setData(preparedStatement, alDtlUpdate);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				 if(preparedStatement!=null)
					preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
				}
			}
			/*Update ReqDtl table with pending qty = 0 for zero authorized qty and close item check = Y*///20173
			if (hmSQL.containsKey("UpdateZeroQtyDTLSQL") && hmData.containsKey("alReqDtlZeroQtyData")) {
				sql = (String)	hmSQL.get	("UpdateZeroQtyDTLSQL");
				alData = (ArrayList)	hmData.get ("alReqDtlZeroQtyData");
				System.out.println("alData: "+alData);  
				preparedStatement = connection.prepareStatement(sql);
				if(alData.size()>0 && !alData.equals("") && alData!=null ){
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						java.util.ArrayList alitemUpdate = new java.util.ArrayList ();
						alitemUpdate.add(alRecord.get(0));
						alitemUpdate.add(alRecord.get(1));
						alitemUpdate.add(alRecord.get(2));
						alitemUpdate.add(alRecord.get(3));
						alitemUpdate.add(alRecord.get(4));
						alitemUpdate.add(alRecord.get(5));
						alitemUpdate.add(alRecord.get(6));
						alitemUpdate.add(alRecord.get(7));
						alitemUpdate.add(alRecord.get(8));//Added for MO-CRF-20173
						alitemUpdate.add(alRecord.get(9));//Added for MO-CRF-20173
						System.err.println("sql@@==="+sql+"alitemUpdate==="+alitemUpdate);
						setData(preparedStatement, alitemUpdate);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					 if(preparedStatement!=null)
						preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							failedRecordIndex = i;
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
					}
				}
				
			}
			 //added by Rabbani #inc no:27426 on 08/08/11
			if (hmSQL.containsKey("UpdateITEMSQL") && hmData.containsKey("UpdateITEMdata")) {
				sql = (String)	hmSQL.get	("UpdateITEMSQL");
				alData = (ArrayList)	hmData.get ("UpdateITEMdata");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					java.util.ArrayList alitemUpdate = new java.util.ArrayList ();
					alitemUpdate.add(alRecord.get(0));
					alitemUpdate.add(alRecord.get(1));
					alitemUpdate.add(alRecord.get(2));
					setData(preparedStatement, alitemUpdate);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				 if(preparedStatement!=null)
					preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
				}
			}
			
			
			/* Update of Item Batch Details */
			sql = (String)	hmSQL.get	("UpdateITMBCHSQL");
			alData = (ArrayList)	hmData.get ("UpdateItemBatchData");
			preparedStatement = connection.prepareStatement(sql);
			for (int index = 0; index < alData.size(); index++) {
				alRecord = (java.util.ArrayList) alData.get(index);
				setData(preparedStatement, alRecord);
				preparedStatement.addBatch();
			}
			iaResult = preparedStatement.executeBatch();
			 if(preparedStatement!=null)
					preparedStatement.close();
			for (int i=0;i<iaResult.length ;i++){
				if((iaResult[i] != -2) && (iaResult[i]<0)){
					failedRecordIndex = i;
					isUpdateSuccessful = false;
					break;
				}	
			}
			if(!isUpdateSuccessful){
				connection.rollback();
				throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
			}
			/*Update the document no */
			if (hmSQL.containsKey("UpdateDocSQL") && hmData.containsKey("UpdateDocData")) {
				sql = (String)	hmSQL.get	("UpdateDocSQL");
				alData = (ArrayList)	hmData.get ("UpdateDocData");
				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement,alData);
				iResult = preparedStatement.executeUpdate();
				 if(preparedStatement!=null)
					preparedStatement.close();
				if(iResult<=0){
					connection.rollback();
					throw new SQLException("Update of Document No failed");
				}
			}
			/* Update the issue_seq_no of Request_header */
			if (hmSQL.containsKey("UpdateIssueSeqSQL") && hmData.containsKey("UpdateIssueSeqData")) {
				sql = (String)	hmSQL.get	("UpdateIssueSeqSQL");
				alData = (ArrayList)	hmData.get ("UpdateIssueSeqData");
				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement,alData);
				iResult = preparedStatement.executeUpdate();
				 if(preparedStatement!=null)
					preparedStatement.close();

				if(iResult<=0){
					connection.rollback();
					throw new SQLException("Update of Issue Seq No failed");
				}
			}
/* delete duplacte items begin...*/
		if (hmSQL.containsKey("UpdateStorePendingQtySQL") && hmData.containsKey("alPendingQtyUpdRecord")) {
		
			dtlUpdateSQL = (String)	hmSQL.get	("UpdateStorePendingQtySQL");
			arrDtlUpdData = (ArrayList)	hmData.get ("alPendingQtyUpdRecord");
      		hashmapDtlUpdData.put("DATA",arrDtlUpdData);
			hashmapDtlUpdDataQ.put(BATCH_SQL,dtlUpdateSQL);
			hmReturn =  operateBatch(connection, hashmapDtlUpdData, hashmapDtlUpdDataQ);
				
					
			}
		

			connection.commit();
			hmReturn.put(RESULT,TRUE);
			hmReturn.put("doc_no",doc_no);
			hmReturn.put(MESSAGE,RECORD_INSERTED);
        if(preparedStatement!=null)
					preparedStatement.close();
			//	if (connection!=null) {
					closeConnection(connection,properties);	
			}catch(SQLException sqlException) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				if(sqlException.getErrorCode()==1)
					hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
				else
					hmReturn.put(MESSAGE,sqlException.toString());
				sqlException.printStackTrace();
			}
			catch (Exception exception) {
				exception.printStackTrace(); 
			}
        }
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace(); 
			}
        }
		finally{
			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				if (connection!=null) {
					closeConnection(connection,(Properties)hmData.get(properties));	
				}
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}



		return hmReturn;
	}

/*	public HashMap modify(HashMap hmData, HashMap hmSQL)	 {
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		ArrayList alData =	new ArrayList();
		ArrayList	 alRecord =	new ArrayList();
		Properties properties = null;
		String sql =	"";

		int iResult =	0;
		int iaResult[] = null;
		boolean isUpdateSuccessful = true;
		hmReturn.put(RESULT,FALSE);
		hmReturn.put(MESSAGE,"No records found to be modified..");
		properties =	(Properties) hmData.get("properties");

		try {
			connection = getConnection(properties);
			connection.setAutoCommit(false);
			alData =	(ArrayList)	hmData.get ("UpdateData");
			sql = (String)	hmSQL.get	("UpdateSQL");


			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult	 =	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();

			if(iResult!=0){
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MESSAGE,RECORD_MODIFIED);
			}
			alData = null;
			sql = null;
			if (hmData.containsKey("DeleteDTLData") && hmSQL.containsKey("DeleteDTLSQL")) {
				alData = (ArrayList)	hmData.get ("DeleteDTLData");
				sql = (String)	hmSQL.get	("DeleteDTLSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
					preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record ");
					}
				}
			}
			alData = null;
			sql = null;

			if (hmData.containsKey("UpdateDTLData") && hmSQL.containsKey("UpdateDTLSQL")) {
				alData = (ArrayList)	hmData.get ("UpdateDTLData");
				sql = (String)	hmSQL.get	("UpdateDTLSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
					preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record ");
					}	
				}
			}

			if (hmData.containsKey("InsertDTLData") && hmSQL.containsKey("InsertDTLSQL")) {				
				alData = (ArrayList)	hmData.get ("InsertDTLData");
				sql = (String)	hmSQL.get	("InsertDTLSQL");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				if(preparedStatement!=null)
					preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++) {
					if((iaResult[i] != -2) && (iaResult[i]<0)) {
						isUpdateSuccessful = false;
						break;
					}	
				}
			}
			if(isUpdateSuccessful){
				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MESSAGE,RECORD_MODIFIED);
			}
			alData = null;
			sql = null;
       if(preparedStatement!=null)
					preparedStatement.close();
				closeConnection(connection,properties);	
		}
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace();
			}
        }
		finally{
			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				closeConnection(connection,(Properties)hmData.get(properties));	
			}
			catch (Exception subexception){
				subexception.printStackTrace();
			}
		}
		return hmReturn;
	}
*/	
	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap delete( HashMap hmDataValues, HashMap hmSQLValues) {
		return getMessageHashMap(false);
	}
		
//protected final String UPDATE_DATA = "UpdateData";
//	protected final String UPDATE_SQL = "UpdateSQL";
	protected final String MESSAGE = "message";
	protected final String RESULT = "result";
	protected final Boolean TRUE = new Boolean(true);
	protected final Boolean FALSE =	new Boolean(false);

	private final String CODE_ALREADY_EXISTS = "CODE_ALREADY_EXISTS";
    private final String RECORD_INSERTED = "RECORD_INSERTED";
    //private final String RECORD_MODIFIED = "RECORD_MODIFIED";
   // private final String RECORD_DELETED  =	"RECORD_DELETED";
}

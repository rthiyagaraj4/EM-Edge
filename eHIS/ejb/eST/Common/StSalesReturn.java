/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
 /*
---------------------------------------------------------------------------------------------------------
Date			Edit History    	Name		Rev. Date		Rev. By			Description
---------------------------------------------------------------------------------------------------------
05/08/2022		34666				Ramesh G 									ST-MEDICITY-Sales Return-Error displayed while finalizing
---------------------------------------------------------------------------------------------------------
*/ 
package eST.Common;

//package eST.SalesReturnCommon;

//import java.rmi.RemoteException; 
import eST.Common.StEJBSessionAdapter;
import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

public class  StSalesReturn extends StEJBSessionAdapter {

	public HashMap insertSalesReturn(Connection connection, HashMap hmData){

		HashMap		hmResult	=	new HashMap();
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();

		HashMap		hmHeader	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();
		HashMap		hmItemInfo	=	new HashMap();
		//HashMap		hmItemUnitCost	=	new HashMap();
		HashMap		hmDetail_Bill_YN	=	new HashMap();
		ArrayList	alDetail	=	new ArrayList();
		ArrayList	alExp		=	new ArrayList();
		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alDtlData	=	new ArrayList();
//		ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
//		ArrayList	alExpRecords=	new ArrayList();
		ArrayList	alItemTrnDtl=	new ArrayList();
		StringBuffer sb_batch_data	= new StringBuffer();
		ArrayList alExp_bat_data	= new ArrayList();
		CallableStatement callableStatement = null;
		HashMap			message =	new HashMap();
		Connection conn = null;
		Properties properties=null;
		properties = (Properties)hmData.get("properties");
		boolean isDocNoAutoGenerated	=	false;
		boolean isFinalized	=	false;
		String   trn_type		=	"SRT";
		int      sizeOfTrn		=	1;
		int      trnRecords		=	1;
		int      batch_records	=	0;
		int  prev_batch_records	=	0;
		ArrayList doc_no		=	new ArrayList();
	//	ArrayList<ArrayList> alTempData		= new ArrayList<ArrayList>();
		ArrayList<Integer> alItemClassCount	= new ArrayList<Integer>();
		ArrayList<String> alItemClass		= new ArrayList<String>();
		PreparedStatement pstmt_blflag     = null ;//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
		ResultSet resultSet_blflag        = null ;//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
		String bl_result="";//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
		String enc_list="";//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");
		if(hmData.containsKey("ItemClassCount")){
			alItemClassCount=	(ArrayList) hmData.get("ItemClassCount");
			alItemClass=	(ArrayList) hmData.get("ItemClass");
		}

		int rec_high_no = 0;
		ArrayList	alDtlData1			=	(ArrayList)	hmData.get("DTL_DATA");
		HashMap	hmHeader1				=	(HashMap)	hmData.get("HDR_DATA");
		ArrayList allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
		ArrayList enc_group                =  new ArrayList(); //Added for KDAH-SCF-0452

		StringBuffer doc_srl_no_for_ph = new StringBuffer();
		ArrayList unitCostParam = null;
		
/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
		int no_of_decimals=getNoOfDecimals( connection);
		String allow_decimals_yn="N";
		String billable_item_yn="N";
		try {
			hmCommon			=	(HashMap)	hmData.get("COMMON_DATA");
			hmHeader			=	(HashMap)	hmData.get("HDR_DATA");
			isFinalized			=	((String)	hmHeader.get("finalized_yn")).equals("Y");
			
			HashMap records	=	fetchRecord(connection, SQL_ST_RECORDS_PER_TRN_SELECT,trn_type);
			int records_per_trn = 0;
			if((String)records.get("RECORDS_PER_TRN")!=null){
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			}
			else{
				records_per_trn = alDtlData1.size();
			}
			if(!(((String)hmHeader1.get("module_id")).equals("ST"))){
				records_per_trn = alDtlData1.size();
			}

			if(item_class_based.equals("Y")){
				sizeOfTrn = alItemClassCount.size();
			}else{
				if(records_per_trn>alDtlData1.size()){
					sizeOfTrn = 1;
				}else if((alDtlData1.size()%records_per_trn)==0){
					sizeOfTrn = alDtlData1.size()/records_per_trn;
				}else{
					sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;
				}
			}
			for(int l=0,k=0;l<sizeOfTrn;l++){

				HashMap hmRecord	=	fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG, (String)hmHeader.get("doc_type_code"));
				isDocNoAutoGenerated=	hmRecord.get("DOC_NUM_GEN_FLAG").toString().equals("Y");

			if (isDocNoAutoGenerated){
 			synchronized (this) {//added newly on Wednesday, February 13, 2013
				int count =1;
				while(count>0){
					String doc_no_dup = (String)fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT, (String)hmHeader.get("doc_type_code")).get("NEXT_DOC_NO");
					ArrayList param = new ArrayList();
					param.add((String)hmHeader.get("doc_type_code"));
					param.add(doc_no_dup);
					String count_sal = (String)fetchRecord(connection, "SELECT COUNT(*) COUNT FROM ST_SAL_RET_HDR WHERE DOC_TYPE_CODE= ?  AND DOC_NO = ?", param).get("COUNT");

					conn = getConnection(properties);

					if(Integer.parseInt(count_sal)>0){
						ArrayList alParameters = new ArrayList();
						alParameters.add(hmCommon.get("login_by_id"));
						alParameters.add(hmCommon.get("login_at_ws_no"));
						alParameters.add(hmCommon.get("login_facility_id"));
						alParameters.add(hmHeader.get("doc_type_code"));
						
						hmArgData.put(DATA,alParameters);
						hmArgSQL.put(UPDATE_SQL,SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE);

						hmResult	=	update(conn, hmArgData, hmArgSQL);
						conn.commit();
						count =1;
					}else{
						hmHeader.put("doc_no", (String)fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT, (String)hmHeader.get("doc_type_code")).get("NEXT_DOC_NO"));
						count=0;
						try{
							ArrayList alParameters	=	new ArrayList();
							
							alParameters.add(hmCommon.get("login_by_id"));
							alParameters.add(hmCommon.get("login_at_ws_no"));
							alParameters.add(hmCommon.get("login_facility_id"));
							alParameters.add(hmHeader.get("doc_type_code"));
							
							hmArgData.put(DATA,alParameters);
							hmArgSQL.put(UPDATE_SQL,SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE);

							hmResult	=	update(conn, hmArgData, hmArgSQL);
							conn.commit();						
						}catch(Exception e){
							e.printStackTrace();
						}finally{
							closeConnection(conn,properties);
						}
					}
				}
				//hmHeader.put("doc_no", (String)fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT, (String)hmHeader.get("doc_type_code")).get("NEXT_DOC_NO"));
			  }
			}
				doc_no.add(hmHeader.get("doc_no"));
				alHdrData = new ArrayList();
				alHdrData.add(hmHeader.get("facility_id"));
				alHdrData.add(hmHeader.get("doc_type_code"));
				alHdrData.add(hmHeader.get("doc_no"));
				alHdrData.add(hmHeader.get("doc_date"));
				alHdrData.add(hmHeader.get("doc_ref"));
				alHdrData.add(hmHeader.get("store_code"));

				alHdrData.add(hmHeader.get("finalized_yn"));
				alHdrData.add(hmHeader.get("gl_interfaced_yn"));
				alHdrData.add(hmHeader.get("trn_type"));
				alHdrData.add(hmHeader.get("remarks"));
				if(item_class_based.equals("Y")){
					alHdrData.add(alItemClass.get(l));
				}else{
					alHdrData.add(hmHeader.get("item_class_code"));
				}
				alHdrData.add(hmHeader.get("module_id"));

				alHdrData.add(hmCommon.get("login_by_id"));
				alHdrData.add(hmCommon.get("login_at_ws_no"));
				alHdrData.add(hmCommon.get("login_facility_id"));

				alHdrData.add(hmCommon.get("login_by_id"));
				alHdrData.add(hmCommon.get("login_at_ws_no"));
				alHdrData.add(hmCommon.get("login_facility_id"));

				alHdrData.add(hmHeader.get("patient_id"));
				alHdrData.add(hmHeader.get("encounter_id"));

				// Modified keeping in view for the pharmacy module on 30/07/2004
				
				if( hmHeader.get("sal_trn_type") == null )
				  alHdrData.add("I");
				else
				  alHdrData.add(hmHeader.get("sal_trn_type"));
				  
				  alHdrData.add(hmHeader.get("sales_doc_no"));
				  alHdrData.add(checkForNull((String)hmHeader.get("NU_Clinic_code"),""));


				hmArgData.put(DATA,alHdrData);
				hmArgSQL.put(INSERT_SQL,SQL_ST_SAL_RET_HDR_INSERT_FOR_SAL_RET);

				hmResult	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

				alDetail	=	(ArrayList)	hmData.get("DTL_DATA");
				alDtlData	=	(ArrayList)	hmData.get("DTL_DATA");
				alExp		=	(ArrayList)	hmData.get("DTL_EXP_DATA");
	/*
	logic to get average unit cost from the selected batches.	
	*/
				if(item_class_based.equals("Y")){
					trnRecords = k + alItemClassCount.get(l);
				}else{
					if(records_per_trn>alDtlData.size()||!(((String)hmHeader1.get("module_id")).equals("ST"))){
						trnRecords = alDtlData.size();
					}else if((k+records_per_trn)>=alDtlData.size()){
						trnRecords = alDtlData.size();
					}else{
						trnRecords = k+records_per_trn;
					}
				}
				alDtlData	=	new ArrayList();
				//for (int i=0;i<alDetail.size() ;i++ ) {
			   /**
				 * @Name - Priya
				 * @Date - 20/05/2010
				 * @Inc# - 
				 * @Desc -  As Unit cost & Cost value is getting from the bean the below calculations are commented. If any error occurs bcoz of this, then pls open the comment 
				 */
			/*	for (int i=k;i<trnRecords ;i++ ) {
				//for (int i=0;i<alDetail.size();i++ ){
					HashMap hmTempDtl	=	(HashMap)alDetail.get(i);
					hmDetail_Bill_YN	=	hmTempDtl;

					long lTotalRecord	=	0;
					double	dItemUnitCost	=	0;

					//for (int j=k;j<trnRecords ;j++ ) {
					for (int j=0;j<alExp.size();j++ ){
		                alDtlData	=	new ArrayList();
						HashMap hmTempExp	=	(HashMap)alExp.get(i);
	//hmTempExp.put("sal_doc_type_code",hmTempExp.get("DOC_TYPE_CODE"));
	//hmTempExp.put("sal_doc_no",hmTempExp.get("DOC_NO"));   

						if (hmTempExp.get("item_code").equals(hmTempDtl.get("item_code"))) {
							lTotalRecord++;
							ArrayList alParameterForUnitCost	=	new ArrayList();
							alParameterForUnitCost.add(hmHeader.get("facility_id"));
							alParameterForUnitCost.add(hmTempExp.get("sal_doc_type_code"));
							alParameterForUnitCost.add(hmTempExp.get("sal_doc_no"));
							alParameterForUnitCost.add(hmTempExp.get("item_code"));

							HashMap hmUnitCost	=	fetchRecord(connection, SQL_ST_SAL_DTL_SELECT_UNIT_COST_FOR_SAL_RET,alParameterForUnitCost);
							dItemUnitCost=dItemUnitCost+Double.parseDouble((String)hmUnitCost.get("ITEM_UNIT_COST"));
						}
					
					}
					double	dWeightedUnitCost	=	dItemUnitCost/lTotalRecord;
	//rounding to 6 decimal places.
					dWeightedUnitCost*=1000000;
					dWeightedUnitCost=Math.round(dWeightedUnitCost);
					dWeightedUnitCost/=1000000;

					hmItemUnitCost.put(hmTempDtl.get("item_code"),setNumber(""+dWeightedUnitCost,6));
				}  */

				/************* Priya Comment Ends ***************/

	//dtl logic 

					for (int i=k;i<trnRecords ;i++ ) {
				//for (int i=0;i<alDetail.size() ;i++ ) {
		              alDtlData	=	new ArrayList();
					HashMap hmDetail	= (HashMap)alDetail.get(i);
				   /**
				 * @Name - Priya
				 * @Date - 20/05/2010
				 * @Inc# - 
				 * @Desc -  As Unit cost & Cost value is getting from the bean the below calculations are commented. If any error occurs bcoz of this, then pls open the comment 
				 */
					/*double	dWeightedUnitCost	= Double.parseDouble((String)hmItemUnitCost.get(hmDetail.get("item_code")))*/;	//Commented by priya
					/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications BEGAN 

						**/
					/*double lItemQty	=	Double.parseDouble((String)hmDetail.get("item_qty"));*///Commented by priya
					/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications end

						**/
					
					/** @ 
						before modification
						long lItemQty	=	Long.parseLong((String)hmDetail.get("item_qty"));
						**/
					/*double	dItemCostValue	=	dWeightedUnitCost*lItemQty;	//Commented by priya

					hmDetail.put("item_unit_cost",//Commented by priya hmItemUnitCost.get(hmDetail.get("item_code")));	//Commented by priya
					hmDetail.put("item_cost_value", setNumber(""+dItemCostValue,3));//Commented by priya*/
					/************* Priya Comment Ends ***************/
					//Code added by Mahesh as PH will not be sending the UNIT_COST and VALUE
					//double lItemQty	=	Double.parseDouble((String)hmDetail.get("item_qty"));
					//double	dItemCostValue	=	Double.parseDouble(getUnitCost((String)hmDetail.get("item_code"),(String)hmHeader.get("store_code"),connection))*lItemQty;
					
//modified if condition by gangadharan for item_unit_cost zero issue

					/**
                    if(hmDetail.containsKey("item_unit_cost")&&hmDetail.containsKey("item_cost_value")){
					     if (dItemCostValue!=0)  {
							  System.out.println("StSalesReturn.java, 307 for ST");
                              hmDetail.put("item_unit_cost", getUnitCost((String)hmDetail.get("item_code"),(String)hmHeader.get("store_code"),connection));
					          hmDetail.put("item_cost_value", setNumber(""+dItemCostValue,Integer.parseInt(getNoOfDecimalsCost(connection))));
					       }
					}
					else{
System.out.println("StSalesReturn.java, 313 for PH and OT");
					 hmDetail.put("item_unit_cost", getUnitCost((String)hmDetail.get("item_code"),(String)hmHeader.get("store_code"),connection));
					 hmDetail.put("item_cost_value", setNumber(""+dItemCostValue,Integer.parseInt(getNoOfDecimalsCost(connection))));
					}
					**/
		//ended		
//	Commented above logic to get the item_unit_cost from sales dtl table by ganga Thursday, November 21, 2013
					double lItemQty	=	Double.parseDouble((String)hmDetail.get("item_qty"));

					unitCostParam = new ArrayList();
					//Added by Rabbani for Sal_facility_id in Return Medication on 09-12-2013
					//System.out.println("hmHeader SRT==>" +hmHeader);
					//System.out.println("hmDetail SRT==>" +hmDetail);
					if(hmDetail.containsKey("sal_facility_id")){
					   unitCostParam.add(checkForNull((String)hmDetail.get("sal_facility_id"),(String)hmHeader.get("facility_id")));
						 }else{
						     unitCostParam.add((String)hmHeader.get("facility_id"));
						}
					//unitCostParam.add((String)hmHeader.get("facility_id"));
					unitCostParam.add((String)hmDetail.get("sales_doc_type_code"));
					unitCostParam.add((String)hmDetail.get("sales_doc_no"));
					unitCostParam.add((String)hmDetail.get("sal_doc_srl_no"));
					unitCostParam.add((String)hmDetail.get("item_code"));
                     
					//System.out.println("unitCostParam SRT==>" +unitCostParam);
					
					double l_item_unit_cost = Double.parseDouble((String)fetchRecord(connection, "SELECT NVL(ITEM_UNIT_COST,0) ITEM_UNIT_COST FROM ST_SAL_DTL WHERE FACILITY_ID = ? AND DOC_TYPE_CODE = ? AND DOC_NO=? AND DOC_SRL_NO=? AND ITEM_CODE=?", unitCostParam).get("ITEM_UNIT_COST"));
					double dItemCostValue	= l_item_unit_cost*lItemQty;

					hmDetail.put("item_unit_cost", ""+l_item_unit_cost);
					hmDetail.put("item_cost_value", setNumber(""+dItemCostValue,Integer.parseInt(getNoOfDecimalsCost(connection))));
//added ended 

					ArrayList alDtlRecord	=	new ArrayList();

					alDtlRecord.add(hmHeader.get("facility_id"));
					alDtlRecord.add(hmHeader.get("doc_type_code"));
					alDtlRecord.add(hmHeader.get("doc_no"));
//	34666 Start.				
					//alDtlRecord.add(hmDetail.get("doc_srl_no"));
					alDtlRecord.add(hmDetail.get("sal_doc_srl_no"));
//	34666 End.
					alDtlRecord.add(hmDetail.get("item_code"));
					alDtlRecord.add(hmDetail.get("stock_item_yn"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
					}else{
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0));
					}
					alDtlRecord.add(hmDetail.get("item_unit_cost"));
					alDtlRecord.add(hmDetail.get("item_cost_value"));
					alDtlRecord.add(hmDetail.get("remarks"));

					alDtlRecord.add(hmCommon.get("login_by_id"));
					alDtlRecord.add(hmCommon.get("login_at_ws_no"));
					alDtlRecord.add(hmCommon.get("login_facility_id"));
					alDtlRecord.add(hmCommon.get("login_by_id"));
					alDtlRecord.add(hmCommon.get("login_at_ws_no"));
					alDtlRecord.add(hmCommon.get("login_facility_id"));
					alDtlRecord.add(checkForNull(hmDetail.get("gross_charge_amt"),"0"));
					alDtlRecord.add(checkForNull(hmDetail.get("pat_net_amt"),"0"));
					batch_records	=	batch_records+Integer.parseInt(checkForNull((String)hmDetail.get("batch_records"),"0"));
					alDtlData.add(alDtlRecord);

					/**added by Ganga to return the doc srl no to PH on Monday, November 18, 2013**/
					if(doc_srl_no_for_ph.length() == 0){
						doc_srl_no_for_ph.append(hmDetail.get("doc_srl_no"));
					}
					else{
						doc_srl_no_for_ph.append("-");
						doc_srl_no_for_ph.append(hmDetail.get("doc_srl_no"));
					} 
					/** added ended**/

					 billable_item_yn=checkForNull((String)fetchRecord(connection, "SELECT NVL(BILLABLE_ITEM_YN,'N') BILLABLE_ITEM_YN FROM MM_ITEM WHERE ITEM_CODE=?", (String)hmDetail.get("item_code")).get("BILLABLE_ITEM_YN"),"N");
					String disp_bill_stage = (String)hmDetail.get("disp_bill_stage")==null?"":(String)hmDetail.get("disp_bill_stage"); //added for KAUH-SCF-0320
						if(isFinalized && billable_item_yn.equals("Y") && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y") && ((!((String)hmHeader.get("module_id")).equals("PH")) || (((String)hmHeader.get("module_id")).equals("PH") && !disp_bill_stage.equals("X") )) ){ //disp_bill_stage added for KAUH-SCF-0320, Modified for performance testing issue
				alExp_bat_data			=	(ArrayList)	hmData.get("DTL_EXP_DATA");
				HashMap hmExpRecord		=	null;
				sb_batch_data			=	new StringBuffer();
				//Added by suresh.r on 20-08-2014 against Inc 50635 beg
				ArrayList salBinAndRetQty = new ArrayList();
				int binSize=1;
				String sal_bin_location_code="";
				String ret_item_qty="";
				//added for GHL-SCF-1210.1 - start
				HashMap hm = new HashMap();
				String store_code = "";
				String item_code  = "";
				String batch_id   = "";
				String expiry_date= "";
				String ret_item_qty_val ="0";
				if(((String)hmHeader.get("module_id")).equals("PH")){
					for (int j=0;j<alExp_bat_data.size() ;j++ ) {
						hmExpRecord		= (HashMap)alExp_bat_data.get(j);
						store_code = (String)hmHeader.get("store_code");
						item_code  = (String)hmExpRecord.get("item_code");
						batch_id   = (String)hmExpRecord.get("batch_id");
						expiry_date = (String)hmExpRecord.get("expiry_date_or_receipt_date");
						binSize = 1;
						if(hmExpRecord.containsKey("sal_bin_location_code")){
							salBinAndRetQty=(ArrayList)hmExpRecord.get("sal_bin_location_code");
							binSize=salBinAndRetQty.size();
						}
						

						for(int m=0; m<binSize;m=m+2){
							
								sal_bin_location_code=(String)salBinAndRetQty.get(m);
								ret_item_qty=(String)salBinAndRetQty.get(m+1);
								if(hm.containsKey(item_code+store_code+batch_id+expiry_date+sal_bin_location_code)){
									ret_item_qty_val = (String)hm.get(item_code+store_code+batch_id+expiry_date+sal_bin_location_code);
									ret_item_qty_val  = (Double.parseDouble(ret_item_qty_val)+Double.parseDouble(ret_item_qty))+"";
									hm.put(item_code+store_code+batch_id+expiry_date+sal_bin_location_code,ret_item_qty_val);
								}else{
									hm.put(item_code+store_code+batch_id+expiry_date+sal_bin_location_code,ret_item_qty);
							}
						}
					}
				} 				//added for GHL-SCF-1210.1 - end
				//Added by suresh.r on 20-08-2014 against AAKH-SCF-0129 end
				for (int j=0;j<alExp_bat_data.size() ;j++ ) {
					hmExpRecord		= (HashMap)alExp_bat_data.get(j);
					//added for GHL-SCF-1210.1
					store_code = (String)hmHeader.get("store_code");
					item_code  = (String)hmExpRecord.get("item_code");
					batch_id   = (String)hmExpRecord.get("batch_id");
					expiry_date = (String)hmExpRecord.get("expiry_date_or_receipt_date");
					//if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code"))){
					if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code")) && ((String)hmDetail.get("doc_srl_no")).equals(hmExpRecord.get("doc_srl_no"))){
						//Added by suresh.r on 20-08-2014 against AAKH-SCF-0129 beg
						binSize=1;
						if(((String)hmHeader.get("module_id")).equals("PH")){
							if(hmExpRecord.containsKey("sal_bin_location_code")){
								salBinAndRetQty=(ArrayList)hmExpRecord.get("sal_bin_location_code");
								binSize=salBinAndRetQty.size();
							}
						}
						for(int m=0; m<binSize;m=m+2){
							if(((String)hmHeader.get("module_id")).equals("PH")){
								sal_bin_location_code=(String)salBinAndRetQty.get(m);
								ret_item_qty=(String)salBinAndRetQty.get(m+1);
											//added for GHL-SCF-1210.1 
								if(hm!=null && hm.size()>0 && m>0){
									if(hm.containsKey(item_code+store_code+batch_id+expiry_date+sal_bin_location_code)){	ret_item_qty  =(String)hm.get(item_code+store_code+batch_id+expiry_date+sal_bin_location_code) ;		sb_batch_data = new StringBuffer();				
								}
								System.err.println("StSalesReturn.java===475===sb_batch_data=>"+sb_batch_data);
							}
						}

						//Added by suresh.r on 20-08-2014 against AAKH-SCF-0129 end
						 sb_batch_data.append(hmExpRecord.get("trade_id"));
						 sb_batch_data.append(";");
						 sb_batch_data.append(hmExpRecord.get("batch_id"));
						 sb_batch_data.append(";");
						 sb_batch_data.append(hmExpRecord.get("expiry_date_or_receipt_date"));
						 sb_batch_data.append(";");
						 if(((String)hmHeader.get("module_id")).equals("PH")){
						     //sb_batch_data.append(hmExpRecord.get("sal_bin_location_code"));
							 //Modified by suresh.r on 20-08-2014 against AAKH-SCF-0129
							 sb_batch_data.append(sal_bin_location_code);
						 }else{
						     sb_batch_data.append(hmExpRecord.get("bin_location_code"));
						 }
						 sb_batch_data.append(";");
						 allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
							if(((String)hmHeader.get("module_id")).equals("PH"))//Added by suresh.r on 20-08-2014 against AAKH-SCF-0129 
								sb_batch_data.append(setNumber(ret_item_qty,no_of_decimals));
							else
								sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
						}else{
							if(((String)hmHeader.get("module_id")).equals("PH"))//Added by suresh.r on 20-08-2014 against AAKH-SCF-0129 
								sb_batch_data.append(setNumber(ret_item_qty,0));
							else
								sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
						}
						 sb_batch_data.append(";");
					}//Added by suresh.r on 20-08-2014 against AAKH-SCF-0129
					}
				}
				
//System.out.println("ST_SAL_BL_POST_CHARGES_FOLIO 380 ==> "+hmDetail.containsKey("FACILITY_STR_FOR_BL"));
							callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
							/** this is commented by Ganga for Multi facility in PH transaction 
							if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
								callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
							else
								callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
							**/
							if(hmDetail.containsKey("FACILITY_STR_FOR_BL"))
								callableStatement.setString(1, (String)hmDetail.get("FACILITY_STR_FOR_BL"));
							else
								callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));


							callableStatement.setString(2, (String)hmHeader.get("patient_id"));
							callableStatement.setString(3, (String)hmHeader.get("module_id"));
							callableStatement.setString(4, (String)hmHeader.get("encounter_id"));
							callableStatement.setString(5, ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
							callableStatement.setString(6, (String)hmHeader.get("doc_type_code"));
							callableStatement.setInt(7, Integer.parseInt((String)hmHeader.get("doc_no")) );
							callableStatement.setInt(8, Integer.parseInt((String)hmDetail.get("doc_srl_no")) );
							callableStatement.setString(9, (String)hmHeader.get("doc_date"));
							callableStatement.setString(10, (String)hmDetail.get("item_code"));
							callableStatement.setString(11, (String)hmHeader.get("store_code"));
							/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications BEGAN 

						**/
					//	if((checkForNull((String)hmDetail.get("decimal_allowedYN"),"N")).equals("Y")){
							//Added by suresh.r on 25-06-2014 against AAKH-SCF-0118 beg
							if(hmDetail.containsKey("mm_trn_qty")){
								callableStatement.setDouble(12, (-1)*Double.parseDouble(setNumber((String)hmDetail.get("mm_trn_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0")))) );
							}else{//Added by suresh.r on 25-06-2014 against AAKH-SCF-0118 end
								callableStatement.setDouble(12, (-1)*Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0")))) );
							}	
						//}else{
						//	callableStatement.setInt(12, (-1)*( new Double(Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0"))))).intValue()) );
					//	}
						/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications BEGAN 

						**/
							callableStatement.setString(13,sb_batch_data.toString());
							callableStatement.setString(14,(String)hmCommon.get("login_at_ws_no"));						
							callableStatement.setString(15,(String)hmDetail.get("uom_code"));						
							callableStatement.setString(16,checkForNull((String)hmDetail.get("p_overridden_excl_incl_ind"),""));// Overidden excl incl ind this is the defaulted value						
							callableStatement.setString(17,checkForNull((String)hmDetail.get("p_overridden_action_reason"),""));// this is a defaltuted value for the action reason code						
							callableStatement.setString(18,checkForNull((String)hmHeader.get("token_series_code"),""));	// these are being added for the Dispence Medication  from pH					
							callableStatement.setString(19,checkForNull((String)hmHeader.get("token_serial_no"),""));// these are being added for the Dispence Medication  from pH					
							callableStatement.setString(20,(String)hmHeader.get("store_code"));// these are being added for the Dispence Medication  from pH					
							callableStatement.setString(21,(String)hmDetail.get("sales_doc_type_code"));
							callableStatement.setString(22,(String)hmDetail.get("sales_doc_no"));
							System.out.println("From Sales Return ....."+(String)hmDetail.get("sales_doc_type_code")+""+(String)hmDetail.get("sales_doc_no"));
							callableStatement.setString(23,(String)hmDetail.get("sal_doc_srl_no"));
							callableStatement.setString(24,"N");//Internal Adjustment
							//callableStatement.setString(25,"N");//Discharge Medication
							callableStatement.setString(25,checkForNull((String)hmDetail.get("take_home_yn"),"N"));//Discharge Medication for PH Tuesday, September 18, 2012
							callableStatement.registerOutParameter(28, Types.VARCHAR);
							callableStatement.registerOutParameter(26, Types.VARCHAR);
							callableStatement.registerOutParameter(27, Types.VARCHAR);
							callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module

						/*callableStatement.registerOutParameter(21, Types.VARCHAR);
						callableStatement.registerOutParameter(22, Types.VARCHAR);
						callableStatement.registerOutParameter(23, Types.VARCHAR);*/
						callableStatement.execute();
						message.put("error_id" , checkForNull((String)callableStatement.getString(27)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(28)));
						//System.err.println("==========537====message=>"+message);
						closeStatement(callableStatement);
						if((checkForNull((String)message.get("error_msg"))) !=""){
							if("BL9146".equals((String)message.get("error_id"))){//Added for MMS-DM-CRF-192.2 in 03/03/2016
								throw new Exception((String)message.get("error_id")+" - "+(String)message.get("error_msg"));
							}else{
							String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 
							
							throw new Exception(msg +"  -   Item:" + hmDetail.get("item_code"));
							}
						}
					}						
					if(isFinalized) {

						HashMap hmTemp	=	new HashMap();
						//Added by suresh.r on 19-08-2014 against Inc #50616 beg
						int     noOfDecimalsForCost   =  Integer.parseInt(getNoOfDecimalsCost(connection));
						double base_unit_cost=Double.parseDouble((String)hmDetail.get("item_unit_cost"))/getConvFactTemp(connection, (String)hmDetail.get("item_code"), (String)hmHeader.get("store_code"));
						//hmTemp.put("item_unit_cost", hmDetail.get("item_unit_cost"));
						hmTemp.put("item_unit_cost", setNumber(""+base_unit_cost, noOfDecimalsForCost));
						//Added by suresh.r on 19-08-2014 against Inc #50616 end
						hmTemp.put("item_cost_value", hmDetail.get("item_cost_value"));
						hmTemp.put("uom_code", hmDetail.get("uom_code"));
						hmTemp.put("stock_item_yn", hmDetail.get("stock_item_yn"));
						hmItemInfo.put((String)hmDetail.get("item_code"),hmTemp);
						HashMap hmSQL = new HashMap();

						if(((String)hmHeader.get("module_id")).equals("PH"))
							hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT1);
						else
						hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
						hmSQL.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
						hmSQL.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
						hmSQL.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);

						HashMap hmParameters = new HashMap();

						hmParameters.put("item_code",hmDetail.get("item_code"));
						hmParameters.put("store_code",hmHeader.get("store_code"));
						hmParameters.put("trn_type","SRT");
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
						hmParameters.put("trn_qty",setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						if(!hmDetail.containsKey("mm_trn_qty"))
							hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						else
							hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("mm_trn_qty"),no_of_decimals));
						}else{
						hmParameters.put("trn_qty",setNumber((String)hmDetail.get("item_qty"),0));
						if(!hmDetail.containsKey("mm_trn_qty"))
							hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("item_qty"),0));
						else
							hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("mm_trn_qty"),0));
						}

						hmParameters.put("language_id",(String)allanguageData.get(0));
						hmParameters.put("trn_unit_cost",hmDetail.get("item_unit_cost"));
						hmParameters.put("trn_value",hmDetail.get("item_cost_value"));
						hmParameters.put("from_stk_item_yn",hmDetail.get("stock_item_yn"));
						hmParameters.put("to_stk_item_yn","");
						hmParameters.put("last_receipt_date",hmHeader.get("doc_date")); 
	//					hmParameters.put("last_issue_date","");
			
						hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
						hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
						hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));
						try{
						   calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
						}catch(Exception ex){
						  if(ex.getMessage().toString().contains("ORA"))
						  {
							throw ex;
						  }
						  else if(ex.getMessage().toString().contains("NEGATIVE_STOCK"))
						  {
						  hmResult.put(MESSAGE,"NEGATIVE_STOCK");
						  hmResult.put(RESULT,FALSE);
						  hmResult.put("flag",""+i );
						  return hmResult ;
						  }
						  else{
						   throw ex;
						  }
						}

						hmResult	=	insertOrUpdateItemMoveSummaryForSalesReturn(connection, hmParameters);
						throwExceptionWhenFailed(hmResult);
						//added by Pankaj on 14/07/2004 
						rec_high_no = rec_high_no + 1;
					}  
				

				hmArgData.put(DATA,alDtlData);
				hmArgSQL.put(BATCH_SQL,SQL_ST_SAL_RET_DTL_INSERT_FOR_SAL_RET);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

	//exp logic
			/*if(isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")){
				alExp_bat_data			=	(ArrayList)	hmData.get("DTL_EXP_DATA");
				HashMap hmExpRecord		=	null;
				sb_batch_data			=	new StringBuffer();
				for (int j=0;j<alExp_bat_data.size() ;j++ ) {
					hmExpRecord		= (HashMap)alExp_bat_data.get(j);
					if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code"))){
						 sb_batch_data.append(hmExpRecord.get("trade_id"));
						 sb_batch_data.append(";");
						 sb_batch_data.append(hmExpRecord.get("batch_id"));
						 sb_batch_data.append(";");
						 sb_batch_data.append(hmExpRecord.get("expiry_date_or_receipt_date"));
						 sb_batch_data.append(";");
						 if(((String)hmHeader.get("module_id")).equals("PH")){
						     sb_batch_data.append(hmExpRecord.get("sal_bin_location_code"));
						 }else{
						     sb_batch_data.append(hmExpRecord.get("bin_location_code"));
						 }
						 sb_batch_data.append(";");
						 allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
							 sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
						}else{
							 sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
						}
						 sb_batch_data.append(";");
					}
				}
							callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
							if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
								callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
							else
								callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
							callableStatement.setString(2, (String)hmHeader.get("patient_id"));
							callableStatement.setString(3, (String)hmHeader.get("module_id"));
							callableStatement.setString(4, (String)hmHeader.get("encounter_id"));
							callableStatement.setString(5, ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
							callableStatement.setString(6, (String)hmHeader.get("doc_type_code"));
							callableStatement.setInt(7, Integer.parseInt((String)hmHeader.get("doc_no")) );
							callableStatement.setInt(8, Integer.parseInt((String)hmDetail.get("doc_srl_no")) );
							callableStatement.setString(9, (String)hmHeader.get("doc_date"));
							callableStatement.setString(10, (String)hmDetail.get("item_code"));
							callableStatement.setString(11, (String)hmHeader.get("store_code"));
							/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications BEGAN 
					//	if((checkForNull((String)hmDetail.get("decimal_allowedYN"),"N")).equals("Y")){
							callableStatement.setDouble(12, (-1)*Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0")))) );
						//}else{
						//	callableStatement.setInt(12, (-1)*( new Double(Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0"))))).intValue()) );
					//	}
						/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications BEGAN 

							callableStatement.setString(13,sb_batch_data.toString());
							callableStatement.setString(14,(String)hmCommon.get("login_at_ws_no"));						
							callableStatement.setString(15,(String)hmDetail.get("uom_code"));						
							callableStatement.setString(16,checkForNull((String)hmDetail.get("p_overridden_excl_incl_ind"),""));// Overidden excl incl ind this is the defaulted value						
							callableStatement.setString(17,checkForNull((String)hmDetail.get("p_overridden_action_reason"),""));// this is a defaltuted value for the action reason code						
							callableStatement.setString(18,checkForNull((String)hmHeader.get("token_series_code"),""));	// these are being added for the Dispence Medication  from pH					
							callableStatement.setString(19,checkForNull((String)hmHeader.get("token_serial_no"),""));// these are being added for the Dispence Medication  from pH					
							callableStatement.setString(20,(String)hmHeader.get("store_code"));// these are being added for the Dispence Medication  from pH					
							callableStatement.setString(21,(String)hmDetail.get("sales_doc_type_code"));
							callableStatement.setString(22,(String)hmHeader.get("sales_doc_no"));
							callableStatement.setString(23,(String)hmDetail.get("sal_doc_srl_no"));
							callableStatement.setString(24,"N");//Internal Adjustment
							callableStatement.setString(25,"N");//Discharge Medication
							callableStatement.registerOutParameter(28, Types.VARCHAR);
							callableStatement.registerOutParameter(26, Types.VARCHAR);
							callableStatement.registerOutParameter(27, Types.VARCHAR);
							callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module

							/*callableStatement.registerOutParameter(21, Types.VARCHAR);
							callableStatement.registerOutParameter(22, Types.VARCHAR);
							callableStatement.registerOutParameter(23, Types.VARCHAR);////
							callableStatement.execute();
							message.put("error_id" , checkForNull((String)callableStatement.getString(27)));
							message.put("error_msg" , checkForNull((String)callableStatement.getString(28)));
							if((checkForNull((String)message.get("error_msg"))) !=""){
							String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 
							
							throw new Exception(msg +"  -   Item:" + hmDetail.get("item_code"));
							}
				
					}*/
			
			}
					alExpData = new ArrayList();
					if(!(((String)hmHeader1.get("module_id")).equals("ST"))){
						batch_records = alExp.size();
					}else if(batch_records==0){
						batch_records = alExp.size();
					}
				for (int i=prev_batch_records;i<batch_records ;i++ ) {
				//for (int i=0;i<alExp.size() ;i++ ) {

					HashMap hmExpRecord		= (HashMap)alExp.get(i);


					// Added on 03/08/2004 to take care the pharmachy Module call to this component.

					if((hmExpRecord.get("new_bin_location_code"))== null)
						 hmExpRecord.put( "new_bin_location_code",hmExpRecord.get("bin_location_code") ) ;

					if((hmExpRecord.get("sal_doc_srl_no"))== null)
						 hmExpRecord.put( "sal_doc_srl_no","");

					if((hmExpRecord.get("sal_doc_date"))== null)
						 hmExpRecord.put( "sal_doc_date","");

					// END


					if (hmExpRecord.get("trade_id")==null||hmExpRecord.get("trade_id").equals("")){
						ArrayList alParametersTradeID	=	new ArrayList();
						alParametersTradeID.add(hmHeader.get("facility_id"));
						alParametersTradeID.add(hmExpRecord.get("sal_doc_type_code"));
						alParametersTradeID.add(hmExpRecord.get("sal_doc_no"));
						alParametersTradeID.add(hmExpRecord.get("store_code"));
						alParametersTradeID.add(hmExpRecord.get("item_code"));
						alParametersTradeID.add(hmExpRecord.get("batch_id"));
	//					alParametersTradeID.add(hmExpRecord.get("store_code"));
	//here present bin location to be put ..
						alParametersTradeID.add(hmExpRecord.get("bin_location_code"));
						alParametersTradeID.add(hmExpRecord.get("expiry_date_or_receipt_date"));
						HashMap hmTradeId	=	fetchRecord(connection, SQL_ST_SAL_DTL_EXP_SELECT_TRADE_ID_FOR_SAL_RET, alParametersTradeID);
						
						hmExpRecord.put("trade_id", hmTradeId.get("TRADE_ID") );
					}
			//	SQL_ST_SAL_DTL_EXP_SELECT_TRADE_ID_FOR_SAL_RET
				
	//			if(isFinalized){


				/*Return item qty should not be greater then sale qty check starts here */
					
					ArrayList alSelectFields = new ArrayList();
					HashMap hmSalRetQtychk = null;
				try{
			
					if(hmExpRecord.containsKey("sal_facility_id")) // this is handle for PH multi facility transaction by ganga on Monday, July 16, 2012
						alSelectFields.add(checkForNull((String)hmExpRecord.get("sal_facility_id"),(String)hmCommon.get("login_facility_id")));
					else
						alSelectFields.add((String)hmCommon.get("login_facility_id"));


					alSelectFields.add((String)hmExpRecord.get("sal_doc_type_code"));//sales_doc_type_code
					alSelectFields.add((String)hmExpRecord.get("sal_doc_no"));		//  sales_doc_no
//	34666 Start					
//					if(((String)hmHeader.get("module_id")).equals("PH"))
					alSelectFields.add((String)hmExpRecord.get("sal_doc_srl_no"));		
//					else
//					alSelectFields.add((String)hmExpRecord.get("doc_srl_no"));//   sales_doc_srl will be same as sale and in sales return
// 34666 End.
					alSelectFields.add((String)hmExpRecord.get("item_code"));
					alSelectFields.add((String)hmExpRecord.get("batch_id"));
					//alSelectFields.add(checkForNull((String)hmExpRecord.get("sal_bin_location_code"),(String)hmExpRecord.get("bin_location_code"))); //Commented by suresh.r on 14-08-2014 against AAKH-SCF-0129
					alSelectFields.add((String)hmExpRecord.get("expiry_date_or_receipt_date"));

					hmSalRetQtychk	=	fetchRecord(connection, SQL_ST_SAL_DTL_EXP_SELECT_SAL_RET_QTY_CHK, alSelectFields);

					double sal_item_qty		 = Double.parseDouble((String)hmSalRetQtychk.get("SAL_ITEM_QTY"));
					double old_ret_item_qty  = Double.parseDouble((String)hmSalRetQtychk.get("RET_ITEM_QTY"));
					double new_ret_item_qty  = old_ret_item_qty + Double.parseDouble((String)hmExpRecord.get("ret_item_qty")) ;

					if(new_ret_item_qty > sal_item_qty){
					throw new Exception ("Return Qty Cannot be Greater than Dispense Qty for "+(String)hmExpRecord.get("item_code") +" "+ (String)hmExpRecord.get("batch_id"));	
					}
				}catch (Exception e){
							System.out.println("alSelectFields:"+alSelectFields);
							System.out.println("hmSalRetQtychk:"+hmSalRetQtychk);							

							hmResult.put(MESSAGE,e.getMessage());
							hmResult.put(MSGID,e.getMessage());
							hmResult.put("itemDesc",(String)hmExpRecord.get("item_code") +" "+ (String)hmExpRecord.get("batch_id"));
							hmResult.put(RESULT,FALSE);							
							throwExceptionWhenFailed(hmResult);
							
				}

				
				/* end here */


				/* Updating values for ST_SAL_DTL_EXP for ret_item_qty BEGINS here */

					//Added by suresh.r on 14-08-2014 against AAKH-SCF-0129 beg
					ArrayList salBinAndRetQty = new ArrayList();
					int binSize=1;
					String sal_bin_location_code="";
					String ret_item_qty="";
					if(((String)hmHeader.get("module_id")).equals("PH")){
						if(hmExpRecord.containsKey("sal_bin_location_code")){
							salBinAndRetQty=(ArrayList)hmExpRecord.get("sal_bin_location_code");
							binSize=salBinAndRetQty.size();
						}
					}
					for(int j=0; j<binSize;j=j+2){
						if(((String)hmHeader.get("module_id")).equals("PH")){
							sal_bin_location_code=(String)salBinAndRetQty.get(j);
							ret_item_qty=(String)salBinAndRetQty.get(j+1);
						}
					//Added by suresh.r on 14-08-2014 against AAKH-SCF-0129 end
					ArrayList alUpdateFields = new ArrayList();
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
						if(((String)hmHeader.get("module_id")).equals("PH"))//Added by suresh.r on 14-08-2014 against AAKH-SCF-0129
							alUpdateFields.add(setNumber(ret_item_qty,no_of_decimals));
						else
							alUpdateFields.add(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
					}else{
						if(((String)hmHeader.get("module_id")).equals("PH"))//Added by suresh.r on 14-08-2014 against AAKH-SCF-0129
							alUpdateFields.add(setNumber(ret_item_qty,0));
						else
							alUpdateFields.add(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
					}
					alUpdateFields.add((String)hmCommon.get("login_by_id"));
					alUpdateFields.add((String)hmCommon.get("login_at_ws_no"));
					alUpdateFields.add((String)hmCommon.get("login_facility_id"));
					
					if(hmExpRecord.containsKey("sal_facility_id")) // this is handle for PH multi facility transaction by ganga on Monday, July 16, 2012
						alUpdateFields.add(checkForNull((String)hmExpRecord.get("sal_facility_id"),(String)hmCommon.get("login_facility_id")));
					else
						alUpdateFields.add((String)hmCommon.get("login_facility_id"));


					alUpdateFields.add((String)hmExpRecord.get("sal_doc_type_code"));//DOC_TYPE_CODE")
					alUpdateFields.add((String)hmExpRecord.get("sal_doc_no"));		//   DOC_NO"));     
					//alUpdateFields.add((String)hmExpRecord.get("store_code"));
					alUpdateFields.add((String)hmExpRecord.get("item_code"));
					alUpdateFields.add((String)hmExpRecord.get("batch_id"));
					//alUpdateFields.add((String)hmExpRecord.get("prev_bin_location_code"));
					if(((String)hmHeader.get("module_id")).equals("PH"))//Added by suresh.r on 14-08-2014 against AAKH-SCF-0129
						alUpdateFields.add(sal_bin_location_code);
					else
						alUpdateFields.add(checkForNull((String)hmExpRecord.get("sal_bin_location_code"),(String)hmExpRecord.get("bin_location_code")));
					alUpdateFields.add((String)hmExpRecord.get("expiry_date_or_receipt_date"));
// 34666  Start.
//					if(((String)hmHeader.get("module_id")).equals("PH"))
					alUpdateFields.add((String)hmExpRecord.get("sal_doc_srl_no"));		
//					else
//					alUpdateFields.add((String)hmExpRecord.get("doc_srl_no"));//   doc_srl_no will be same as sale and in sales return
//  34666  End.

					ArrayList alParameters = new ArrayList();

					alParameters.add((String)hmCommon.get("login_facility_id"));
					alParameters.add((String)hmExpRecord.get("sal_doc_type_code"));
					alParameters.add((String)hmExpRecord.get("sal_doc_no"));
					alParameters.add((String)hmExpRecord.get("store_code"));


					//String salCount = (String)((HashMap)fetchRecord(connection,"SELECT COUNT(*) COUNT FROM ST_SAL_DTL_EXP WHERE FACILITY_ID = ? AND DOC_TYPE_CODE = ? AND DOC_NO = ? AND STORE_CODE = ?",alParameters)).get("COUNT");
					  //select count(*) count from st_sal_dtl_exp where store_code = ? and FACILITY_ID=? and DOC_TYPE_CODE=? and DOC_NO=? and item_code = ?	
					//if(Integer.parseInt(salCount)>0){

						hmArgData.put(DATA,alUpdateFields);
						hmArgSQL.put(UPDATE_SQL,SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET);
					/*}else{

					}*/

					hmResult	=	update(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmResult);
				}//Added by suresh.r on 14-08-2014 against AAKH-SCF-0129
				/* Updating values for ST_SAL_DTL_EXP for ret_item_qty ENDS here  */

	//			} // if codition for finalize ENDS here 



					ArrayList alExpRecord	= new ArrayList();

					alExpRecord.add(hmHeader.get("facility_id"));
					alExpRecord.add(hmHeader.get("doc_type_code"));
					alExpRecord.add(hmHeader.get("doc_no"));
//	34666  Start.				
					//alExpRecord.add(hmExpRecord.get("doc_srl_no"));
					alExpRecord.add(hmExpRecord.get("sal_doc_srl_no"));
//	34666  End.
					alExpRecord.add(hmExpRecord.get("store_code"));
					alExpRecord.add(hmExpRecord.get("item_code"));
					alExpRecord.add(hmExpRecord.get("batch_id"));

	//here present bin location to be put ..
					alExpRecord.add(hmExpRecord.get("new_bin_location_code"));
					alExpRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
					alExpRecord.add(hmExpRecord.get("trade_id"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));

					if(allow_decimals_yn.equals("Y") ){
						alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
					}else{
						alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
					}
					alExpRecord.add(hmExpRecord.get("sal_doc_type_code"));//DOC_TYPE_CODE")
					alExpRecord.add(hmExpRecord.get("sal_doc_no"));		  //DOC_NO"));     

					alExpRecord.add(hmCommon.get("login_by_id"));
					alExpRecord.add(hmCommon.get("login_at_ws_no"));
					alExpRecord.add(hmCommon.get("login_facility_id"));
					alExpRecord.add(hmCommon.get("login_by_id"));
					alExpRecord.add(hmCommon.get("login_at_ws_no"));
					alExpRecord.add(hmCommon.get("login_facility_id"));

					alExpData.add(alExpRecord);

	//TO BE CHECKED..
					if (isFinalized) {

						/* Updating in the batch online method BEGINS here */
						
						HashMap hmParamaters = new HashMap();
						HashMap hmSQL		 = new HashMap();

						hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
						hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
						hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
						hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
						hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
						hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
						hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);


						hmParamaters.put("item_code",hmExpRecord.get("item_code"));
						hmParamaters.put("store_code",hmExpRecord.get("store_code"));
						hmParamaters.put("trn_type","SRT");
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
							hmParamaters.put("trn_qty",setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
						}else{
							hmParamaters.put("trn_qty",setNumber((String)hmExpRecord.get("ret_item_qty"),0));
						}
						hmParamaters.put("batch_id",hmExpRecord.get("batch_id"));
						hmParamaters.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
						hmParamaters.put("trade_id",hmExpRecord.get("trade_id"));
						//here perevious bin location to be put
	//					hmParamaters.put("from_bin_location_code",hmExpRecord.get("prev_bin_location_code"));
						hmParamaters.put("from_bin_location_code",hmExpRecord.get("bin_location_code"));
						hmParamaters.put("suspended_batch_allowed_yn","Y");
						hmParamaters.put("release_batch_yn","N");
						hmParamaters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date
						hmParamaters.put("login_by_id",hmCommon.get("login_by_id"));
						hmParamaters.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
						hmParamaters.put("login_facility_id",hmCommon.get("login_facility_id"));
						hmParamaters.put("modified_date",hmExpRecord.get("modified_date"));


						updateBatchOnLine(connection, hmSQL, hmParamaters);
						 
						/* Updating in the batch online method ENDS here */

						/* Inserting values into Item_trn_dtl BEGINS here */

						ArrayList ItemTrnDtlRecord	=	new ArrayList();
						HashMap	hmTempItemInfo		=	(HashMap)hmItemInfo.get((String)hmExpRecord.get("item_code"));
						ItemTrnDtlRecord.add(hmHeader.get("facility_id"));
						ItemTrnDtlRecord.add(hmExpRecord.get("store_code"));
						ItemTrnDtlRecord.add(hmExpRecord.get("item_code"));
						ItemTrnDtlRecord.add(""+(i+1));//trn_srl_no
						ItemTrnDtlRecord.add("SRT");
						ItemTrnDtlRecord.add(hmHeader.get("doc_type_code"));
						ItemTrnDtlRecord.add(hmHeader.get("doc_no"));
						ItemTrnDtlRecord.add(hmExpRecord.get("doc_srl_no"));
						ItemTrnDtlRecord.add(hmHeader.get("doc_date"));
						ItemTrnDtlRecord.add(hmHeader.get("doc_ref"));
						ItemTrnDtlRecord.add(hmExpRecord.get("batch_id"));
						ItemTrnDtlRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
							ItemTrnDtlRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals)); //normal_qty
						}else{
							ItemTrnDtlRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),0)); //normal_qty
						}
					//	ItemTrnDtlRecord.add((String)hmExpRecord.get("ret_item_qty")); //normal_qty
						ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_cost"));
						//ItemTrnDtlRecord.add(hmTempItemInfo.get("item_cost_value"));
						ItemTrnDtlRecord.add(hmTempItemInfo.get("uom_code"));
						ItemTrnDtlRecord.add(hmTempItemInfo.get("stock_item_yn"));
	//here present bin location to be put ..
						ItemTrnDtlRecord.add(hmExpRecord.get("new_bin_location_code"));
						ItemTrnDtlRecord.add(hmExpRecord.get("trade_id"));

						// added on 07/07/2004 by Pankaj .
						ItemTrnDtlRecord.add(hmExpRecord.get("sal_doc_type_code"));
						ItemTrnDtlRecord.add(hmExpRecord.get("sal_doc_no"));
						ItemTrnDtlRecord.add(hmExpRecord.get("sal_doc_srl_no"));
						ItemTrnDtlRecord.add(hmExpRecord.get("sal_doc_date"));

						ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
						ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
						ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));
						ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
						ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
						ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));

						alItemTrnDtl.add(ItemTrnDtlRecord);  

						/* Inserting values into Item_trn_dtl BEGINS here */

					}
			
				}
				prev_batch_records	=	batch_records;
				hmArgData.put(DATA,alExpData);
				hmArgSQL.put(BATCH_SQL,SQL_ST_SAL_RET_DTL_EXP_INSERT_FOR_SAL_RET);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

				if (isFinalized) {
					hmArgData.put(DATA,alItemTrnDtl);
					hmArgSQL.put(BATCH_SQL,SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL_RET);
					hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmResult);
				}
					String locale=(String)allanguageData.get(0);

				if (isDocNoAutoGenerated) {
					String s  = "";
					String s1 = "";
					ArrayList alParameters	=	new ArrayList();
					alParameters.add(hmCommon.get("login_by_id"));
					alParameters.add(hmCommon.get("login_at_ws_no"));
					alParameters.add(hmCommon.get("login_facility_id"));
					alParameters.add(hmHeader.get("doc_type_code"));
					if(doc_no.size()>1){
							java.util.Locale loc = new java.util.Locale(locale);
							java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
							s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
						
							s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
							s = getSTMessage(locale, "DOC_NO", "ST") ;
							s1=s+":  "+doc_no.get(0);
					}
					/*hmArgData.put(DATA,alParameters);
					hmArgSQL.put(UPDATE_SQL,SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE);
					
					hmResult	=	update(connection, hmArgData, hmArgSQL);*/
					//hmResult.put("flag","Doc No: "+alHdrData.get(2));
					hmResult.put("flag",s1);
					//hmResult.put("doc_no",alHdrData.get(2));
					hmResult.put("doc_type_code",alHdrData.get(1));

					throwExceptionWhenFailed(hmResult);
				}
				if(item_class_based.equals("Y")){
					k = k + alItemClassCount.get(l);
				}else{
					k=k+records_per_trn;
				}
String p_charge_amt="";
	if(!(((String)hmHeader.get("module_id")).equals("PH"))&& isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")&&(((hmHeader.get("sal_trn_type").equals("O"))||(hmHeader.get("sal_trn_type").equals("R"))||(hmHeader.get("sal_trn_type").equals("X"))||(hmHeader.get("sal_trn_type").equals("E"))))){
		  HashMap message_bill = new HashMap();
		  String msg="";
			   p_charge_amt=checkForNull((String)hmDetail_Bill_YN.get("gross_charge_amt"),"99999");
				callableStatement	= connection.prepareCall("{ call ST_BL_BILL_GEN (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
				callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));   
				callableStatement.setString(2, (String)hmHeader.get("store_code"));
				callableStatement.setString(3,(String)hmResult.get("doc_type_code")+"-"+(String)doc_no.get(0) );
				callableStatement.setString(4, (String)hmCommon.get("login_by_id"));
				callableStatement.setString(5,(String) hmCommon.get("login_at_ws_no"));
				callableStatement.setFloat(6, Float.parseFloat(p_charge_amt));
				callableStatement.setString(7, (String)hmHeader.get("patient_id"));
				callableStatement.setString(8,  ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
				callableStatement.setString(9,  (String)hmHeader.get("encounter_id"));
				callableStatement.setString(16,  "ST");
				callableStatement.setString(17,  "N");
				callableStatement.setString(19, (String)hmCommon.get("login_facility_id"));   //added for MOHE-CRF-0060
				callableStatement.registerOutParameter(10, Types.VARCHAR);
				callableStatement.registerOutParameter(11, Types.VARCHAR);
				callableStatement.registerOutParameter(12, Types.VARCHAR);
				callableStatement.registerOutParameter(13, Types.VARCHAR);
				callableStatement.registerOutParameter(14, Types.VARCHAR);
				callableStatement.registerOutParameter(15, Types.VARCHAR);
				callableStatement.registerOutParameter(18, Types.VARCHAR);
				callableStatement.execute();
				
				//message=(String)callableStatement.getString(7);
				message_bill.put("l_slmt_reqd_yn" , checkForNull((String)callableStatement.getString(10)));
				message_bill.put("l_bill_doc_type" , checkForNull((String)callableStatement.getString(11)));
				message_bill.put("l_bill_doc_num" , checkForNull((String)callableStatement.getString(12)));
				message_bill.put("v_blng_group_id" , checkForNull((String)callableStatement.getString(13)));
				message_bill.put("error_id" , checkForNull((String)callableStatement.getString(14)));
				message_bill.put("error_msg" , checkForNull((String)callableStatement.getString(15)));
				message_bill.put("p_call_disc_function_yn" , checkForNull((String)callableStatement.getString(18),"N"));
				closeStatement(callableStatement);	
				if((checkForNull((String)message_bill.get("error_msg"))) !=""){
					msg = (String)message_bill.get("error_id") + "  " + (String)message_bill.get("error_msg"); 
					throw new Exception(msg);
				}		
					hmResult.put("l_bill_doc_num",(String)message_bill.get("l_bill_doc_num"));
					hmResult.put("l_bill_doc_type",(String)message_bill.get("l_bill_doc_type"));
					hmResult.put("l_slmt_reqd_yn",(String)message_bill.get("l_slmt_reqd_yn"));
					hmResult.put("v_blng_group_id",(String)message_bill.get("v_blng_group_id"));
					hmResult.put("p_call_disc_function_yn",(String)message_bill.get("p_call_disc_function_yn"));
			}
		}	
        /*boolean doc_loop_falg=false;//Adding start for KDAH-SCF-0452 commented for KDAH Live return issue on 27/01/2018
			if((((String)hmHeader.get("module_id")).equals("PH"))){
				String final_doc=(String)hmHeader.get("doc_loop_falg");
				if(final_doc.equals("true"))
			       doc_loop_falg=true;
				else
                    doc_loop_falg=false;
			}else{
                 doc_loop_falg=true;
			}*/
			//Adding start for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
			
if(((String)hmHeader.get("module_id")).equals("ST")){

	try{
				
   if(isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")){
					System.err.println("facility_id@@@ ST billing "+hmHeader.get("facility_id")+"patient_id==="+hmHeader.get("patient_id")+"sales_doc_type===="+hmHeader.get("sales_doc_type")+"sales_doc_no===="+hmHeader.get("sales_doc_no"));
					pstmt_blflag = connection.prepareStatement("SELECT BL_CHK_PKG_PAT_RECALC_YN(?,?,?,?,?) RESULT_FLAG from dual");
					pstmt_blflag.setString(1,"ST");
					pstmt_blflag.setString(2,(String)hmHeader.get("facility_id"));
					pstmt_blflag.setString(3,(String)hmHeader.get("patient_id"));
					pstmt_blflag.setString(4,(String)hmHeader.get("sales_doc_type"));
					pstmt_blflag.setString(5,(String)hmHeader.get("sales_doc_no")); //drug_class
					
					resultSet_blflag = pstmt_blflag.executeQuery() ;
								
					if(resultSet_blflag!=null && resultSet_blflag.next()){
						bl_result =resultSet_blflag.getString("RESULT_FLAG");
						
					}
					System.err.println("bl_result@@@@===="+bl_result);
					if(bl_result.equals("Y")){
					        String enc_id=(String)hmHeader.get("encounter_id");
							String epc_type=(String)hmHeader.get("sal_trn_type");
							String episode_id="";
							String visit_id  ="";
							if(!epc_type.equals("I") && !epc_type.equals("D")){
									if (!enc_id.equals("") && !enc_id.equals(null)) {
										episode_id = enc_id.substring(0, (enc_id.length() - 4)); 
										visit_id = enc_id.substring(enc_id.length() - 4); 
									  }
									}else{
										episode_id = enc_id;
										visit_id = "";
									}
                                  enc_list=epc_type+"~"+episode_id+"~"+visit_id;
								//  enc_group.add(enc_list);
					}
					

				}
   System.err.println("enc_list@@@@====="+enc_list);
		if(isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y") && !enc_list.equals("") && !enc_list.equals("null")){
						callableStatement	= connection.prepareCall("{ call st_sal_bl_recalc_proc(?,?,?,?,?,?,?,?) }");

						callableStatement.setString(1,(String)hmCommon.get("login_facility_id"));
						callableStatement.setString(2,(String)hmHeader.get("module_id"));
						callableStatement.setString(3,(String)hmHeader.get("patient_id"));
						callableStatement.setString(4,enc_list);
						callableStatement.setString(5,(String)hmCommon.get("login_at_ws_no"));	
						callableStatement.registerOutParameter(6, Types.VARCHAR);
						callableStatement.registerOutParameter(7, Types.VARCHAR);
						callableStatement.registerOutParameter(8, Types.VARCHAR);
						//System.err.println("===================before calling procedure=================");
						callableStatement.execute();
						//System.err.println("===================after calling procedure================="+(String)callableStatement.getString(6));
						message.put("error_id" , checkForNull((String)callableStatement.getString(6)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(8)));
						System.err.println("StSalesReturn==error_id=======>"+checkForNull((String)callableStatement.getString(6))+"<====");
						System.err.println("StSalesReturn==error_msg=======>"+checkForNull((String)callableStatement.getString(8))+"<====");
						closeStatement(callableStatement);
						if((checkForNull((String)message.get("error_msg"))) !=""){
							if("BL9146".equals((String)message.get("error_id"))){//Added for MMS-DM-CRF-192.2 in 03/03/2016
								throw new Exception((String)message.get("error_msg"));
							}else{
								String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 						
								throw new Exception(msg );
							}
						}

					}
			  }catch(Exception e){
					e.printStackTrace();
					System.err.println("message@@@===="+message);
	           }finally{
				   try{
				    closeStatement(callableStatement);
                    closeResultSet( resultSet_blflag );//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
					closeStatement(pstmt_blflag);//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508
					}catch(Exception e){
						e.printStackTrace();
					}
			   }//Adding end for KDAH-SCF-0452 //commenting end for KDAH Live return issue on 27/01/2017 KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508
           }          //Adding end for KDAH-SCF-0452 //commenting end for KDAH Live return issue on 27/01/2017
		}
		catch(Exception exception){
			exception.printStackTrace();
			System.out.println("hmData@@@===>"+hmData);
			System.err.println("hmData@@@===>"+hmData);
			hmResult.put(RESULT,FALSE);
			hmResult.put(MESSAGE,exception.toString());
			hmResult.put(MSGID,exception.getMessage());
		}
		finally{
			
			try{
			   closeStatement(callableStatement);
			   closeResultSet( resultSet_blflag );//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
			   closeStatement(pstmt_blflag);//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508
			 }catch(Exception e){
				e.printStackTrace();
			}
		
		}
		hmResult.put("doc_no", doc_no);
		hmResult.put("doc_srl_no",doc_srl_no_for_ph);
System.out.println("hmResult@@@===>"+hmResult);
System.err.println("hmResult@@@===>"+hmResult);
		return hmResult;
	}



	public HashMap insertOrUpdateItemMoveSummaryForSalesReturn (Connection connection, HashMap hmParameters) throws Exception {
       

		HashMap hmColumns	=	new HashMap();

		hmColumns.put("doc_date",hmParameters.get("last_receipt_date"));
		hmColumns.put("facility_id",hmParameters.get("login_facility_id"));
		hmColumns.put("item_code",hmParameters.get("item_code"));
		hmColumns.put("store_code",hmParameters.get("store_code"));
		hmColumns.put("login_by_id",hmParameters.get("login_by_id"));
		hmColumns.put("login_at_ws_no",hmParameters.get("login_at_ws_no"));
		hmColumns.put("login_facility_id",hmParameters.get("login_facility_id"));

		//hmColumns.put("sal_ret_qty",hmParameters.get("trn_qty"));
/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
	
		int no_of_decimals=getNoOfDecimals( connection);
		String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmParameters.get("item_code"));
		if(allow_decimals_yn.equals("Y") ){
		hmColumns.put("sal_ret_qty",setNumber((String)hmParameters.get("mm_trn_qty"),no_of_decimals));
		hmColumns.put("month_closing_qty",setNumber((String)hmParameters.get("mm_trn_qty"),no_of_decimals));
		}else{
		hmColumns.put("sal_ret_qty",setNumber((String)hmParameters.get("mm_trn_qty"),0));
		hmColumns.put("month_closing_qty",setNumber((String)hmParameters.get("mm_trn_qty"),0));
		}
		hmColumns.put("item_unit_cost",hmParameters.get("trn_value"));//trn_unit_cost"));
		hmColumns.put("item_cost_value",hmParameters.get("trn_value"));
		hmColumns.put("stock_item_yn",hmParameters.get	("from_stk_item_yn"));

	
		hmColumns.put("month_closing_value",hmParameters.get("trn_value"));


		return insertOrUpdateItemMoveSummary(connection, hmColumns);
	}

	public HashMap insertOrUpdateItemMoveSummary(Connection connection, HashMap hmColumns) throws Exception {


		HashMap	hmArgData				=	new HashMap();
		HashMap	hmArgSQL				=	new HashMap();

		ArrayList alParameters	=	new ArrayList();
		ArrayList alData		=	new ArrayList();

		//String doc_date	= (String)hmColumns.get("doc_date"); //doc_date
		String stSQL;

		//alParameters.add(doc_date);
		//alParameters.add(doc_date);


		HashMap hmResult = fetchRecord(connection,SQL_ST_GET_MONTH_AND_YEAR);

		String move_month	= (String)hmResult.get("MM");
		String move_year	= (String)hmResult.get("YYYY");

		String	facility_id         	=	(String)hmColumns.get("facility_id");
		String	item_code           	=	(String)hmColumns.get("item_code");
		String	store_code          	=	(String)hmColumns.get("store_code");
		String	month_closing_qty   	=	(String)hmColumns.get("month_closing_qty");
		String	month_closing_value 	=	(String)hmColumns.get("month_closing_value");
		/**
		 * @Name - Priya
		 * @Date - 10/06/2010
		 * @Inc# - 
		 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
		 */
		
		if(Double.valueOf(month_closing_qty) == 0){
			month_closing_value = "0";
		}

		String	stock_item_yn		 	=	(String)hmColumns.get("stock_item_yn");

		String	sal_ret_qty            	=	stock_item_yn.equals("Y")?((String)hmColumns.get("sal_ret_qty")):"0";
		String	sal_ret_cost           	=	stock_item_yn.equals("Y")?((String)hmColumns.get("item_unit_cost")):"0";
		String	sal_ret_value          	=	stock_item_yn.equals("Y")?((String)hmColumns.get("item_cost_value")):"0";

		String	sal_ret_qty_ns          =	stock_item_yn.equals("N")?((String)hmColumns.get("sal_ret_qty")):"0";
		String	sal_ret_cost_ns         =	stock_item_yn.equals("N")?((String)hmColumns.get("item_unit_cost")):"0";
		String	sal_ret_value_ns        =	stock_item_yn.equals("N")?((String)hmColumns.get("item_cost_value")):"0";

		String	login_by_id 			=	(String)hmColumns.get("login_by_id");
		String	login_at_ws_no 			=	(String)hmColumns.get("login_at_ws_no");
		String	login_facility_id 		=	(String)hmColumns.get("login_facility_id");

		alParameters.clear();
		alParameters.add(facility_id);
		alParameters.add(item_code);
		alParameters.add(store_code);
		alParameters.add(move_year);
		alParameters.add(move_month);
		int no_of_decimals=getNoOfDecimals( connection);
    
/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/
		ArrayList  nafitive_value_to_zero=new ArrayList();
		nafitive_value_to_zero.add(facility_id);      // facility_id
		nafitive_value_to_zero.add(item_code);     // Item code
		nafitive_value_to_zero.add(store_code);    // store_code
		nafitive_value_to_zero.add(move_month);
		nafitive_value_to_zero.add(move_year);
	
		hmResult = fetchRecord(connection,SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT,alParameters);
/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
	
		if(((String)hmResult.get("TOTAL")).equals("0")) {//no record found
			alData.add(facility_id        );
			alData.add(item_code          );
			alData.add(store_code         );
			alData.add(move_year          );
			alData.add(move_month         );
		
			String allow_decimals_yn=getAllowDecimalsYN( connection, item_code);
			if(allow_decimals_yn.equals("Y") ){
			alData.add(setNumber(sal_ret_qty  , no_of_decimals)     );
			alData.add(sal_ret_cost       );
			alData.add(sal_ret_value      );
			alData.add(setNumber(sal_ret_qty_ns  ,no_of_decimals)   );
			alData.add(sal_ret_cost_ns    );
			alData.add(sal_ret_value_ns   );
			alData.add(setNumber(month_closing_qty,no_of_decimals)  );
			}else{
			alData.add(setNumber(sal_ret_qty  , 0)     );
			alData.add(sal_ret_cost       );
			alData.add(sal_ret_value      );
			alData.add(setNumber(sal_ret_qty_ns  ,0)   );
			alData.add(sal_ret_cost_ns    );
			alData.add(sal_ret_value_ns   );
			alData.add(setNumber(month_closing_qty,0)  );
			}
			alData.add(month_closing_value);

			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );
			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );

			stSQL	=	SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL_RET;

			hmArgData.put(DATA,alData);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmResult	=	insert(connection, hmArgData, hmArgSQL);
		}
		else {
			
			String allow_decimals_yn=getAllowDecimalsYN( connection, item_code);
			if(allow_decimals_yn.equals("Y") ){
			alData.add(setNumber(sal_ret_qty,no_of_decimals));
			alData.add(sal_ret_cost);
			alData.add(sal_ret_value);
			alData.add(setNumber(sal_ret_qty_ns,no_of_decimals));
			alData.add(sal_ret_cost_ns);
			alData.add(sal_ret_value_ns);
			alData.add(setNumber(month_closing_qty,no_of_decimals));
			}else{
			alData.add(setNumber(sal_ret_qty,0));
			alData.add(sal_ret_cost);
			alData.add(sal_ret_value);
			alData.add(setNumber(sal_ret_qty_ns,0));
			alData.add(sal_ret_cost_ns);
			alData.add(sal_ret_value_ns);
			alData.add(setNumber(month_closing_qty,0));
		}
			alData.add(month_closing_value);
			
			alData.add(login_by_id);
			alData.add(login_at_ws_no);
			alData.add(login_facility_id);

			alData.add(facility_id);
			alData.add(item_code);
			alData.add(store_code);
			alData.add(move_year);
			alData.add(move_month);

			stSQL = SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL_RET;

			hmArgData.put(DATA,alData);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
		}
		throwExceptionWhenFailed(hmResult);
			/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/

		stSQL="UPDATE st_item_move_summ SET month_opening_value = (CASE WHEN month_opening_qty = 0 THEN 0 WHEN month_opening_value < 0 THEN 0 WHEN month_opening_value > 0   THEN month_opening_value END ), month_closing_value = (CASE WHEN month_closing_qty = 0 THEN 0 WHEN month_closing_value < 0 THEN 0 WHEN month_closing_value > 0 THEN month_closing_value END ) WHERE facility_id = ? AND item_code = ? AND store_code = ? AND move_month = ? AND move_year = ? ";
		hmArgData.put(DATA,nafitive_value_to_zero);
		hmArgSQL.put(UPDATE_SQL,stSQL);
		hmResult	=	update(connection, hmArgData, hmArgSQL);
		throwExceptionWhenFailed(hmResult);
		return hmResult;
	}



	public HashMap updateSalesReturn(Connection connection, HashMap hmData){
		HashMap		hmResult	=	new HashMap();
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmHeader	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();

		ArrayList	alItemTrnDtl=	new ArrayList();
		ArrayList	alDetail	=	new ArrayList();
		ArrayList	alExp		=	new ArrayList();
		ArrayList	alHdrData	=	new ArrayList();
//		ArrayList	alDtlData	=	new ArrayList();
//		ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
//		ArrayList	alExpRecords=	new ArrayList();
		HashMap		hmItemInfo	=	new HashMap();
		HashMap		hmDetail_Bill_YN	=	new HashMap();
		StringBuffer sb_batch_data = new StringBuffer();
		ArrayList alExp_bat_data= new ArrayList();
		CallableStatement callableStatement = null;
		HashMap			message =	new HashMap();
		boolean	isFinalized		=	false;
		ArrayList allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
		String billable_item_yn="N" ;
		//ArrayList enc_group                =  new ArrayList(); //Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508   //Common-ICN-0091
		PreparedStatement pstmt_blflag     = null ;//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
		ResultSet resultSet_blflag        = null ;//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
		String bl_result="";//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
		String enc_list="";//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
	
		int no_of_decimals=getNoOfDecimals( connection);
		try {
			hmCommon			=	(HashMap)	hmData.get("COMMON_DATA");
			hmHeader			=	(HashMap)	hmData.get("HDR_DATA");
			isFinalized			=	((String)	hmHeader.get("finalized_yn")).equals("Y");


			alHdrData.add(hmHeader.get("doc_ref"));
			alHdrData.add(hmHeader.get("finalized_yn"));
			alHdrData.add(hmHeader.get("remarks"));
		
			alHdrData.add(hmCommon.get("login_by_id"));
			alHdrData.add(hmCommon.get("login_at_ws_no"));
			alHdrData.add(hmCommon.get("login_facility_id"));

			alHdrData.add(hmHeader.get("facility_id"));
			alHdrData.add(hmHeader.get("doc_type_code"));
			alHdrData.add(hmHeader.get("doc_no"));
			
			hmArgData.put(DATA,alHdrData);
			hmArgSQL.put(UPDATE_SQL,SQL_ST_SAL_RET_HDR_UPDATE_FOR_SAL_RET);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

//dtl logic
			alDetail			=	(ArrayList)	hmData.get("DTL_DATA");

			for (int i=0;i<alDetail.size() ;i++ ) {

				HashMap hmDetail		=	(HashMap)alDetail.get(i);
				hmDetail_Bill_YN		=	hmDetail;

				ArrayList alDtlRecord	=	new ArrayList();

				int iMode	=	Integer.parseInt((String)hmDetail.get("mode"));

				switch (iMode){

					case 0:{//delete

						ArrayList alDeleteRecord	=	new ArrayList();

						alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
						alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
						alDeleteRecord.add(hmHeader.get("doc_no"));			//doc_no
						alDeleteRecord.add(hmDetail.get("doc_srl_no"));		//put doc_srl_no at last..

						hmArgData.put(DATA,alDeleteRecord);
						hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_RET_DTL_EXP_DELETE_FOR_SAL_RET);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);

						hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_RET_DTL_DELETE_FOR_SAL_RET);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);

						break;
					}
					case 1:{//insert

						alDtlRecord.add(hmHeader.get("facility_id"));
						alDtlRecord.add(hmHeader.get("doc_type_code"));
						alDtlRecord.add(hmHeader.get("doc_no"));
						alDtlRecord.add(hmDetail.get("doc_srl_no"));

						alDtlRecord.add(hmDetail.get("item_code"));
						alDtlRecord.add(hmDetail.get("stock_item_yn"));
						String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						}else{
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0));
						}
						alDtlRecord.add(hmDetail.get("item_unit_cost"));
						alDtlRecord.add(hmDetail.get("item_cost_value"));
						alDtlRecord.add(hmDetail.get("remarks"));

						alDtlRecord.add(hmCommon.get("login_by_id"));
						alDtlRecord.add(hmCommon.get("login_at_ws_no"));
						alDtlRecord.add(hmCommon.get("login_facility_id"));
						alDtlRecord.add(hmCommon.get("login_by_id"));
						alDtlRecord.add(hmCommon.get("login_at_ws_no"));
						alDtlRecord.add(hmCommon.get("login_facility_id"));

						hmArgData.put(DATA,alDtlRecord);
						hmArgSQL.put(INSERT_SQL,SQL_ST_SAL_RET_DTL_INSERT_FOR_SAL_RET);
						hmResult	=	insert(connection, hmArgData, hmArgSQL);

						break;
					}
					case 2:{//update

						ArrayList alDeleteRecord	=	new ArrayList();

						alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
						alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
						alDeleteRecord.add(hmHeader.get("doc_no"));			//doc_no
						alDeleteRecord.add(hmDetail.get("doc_srl_no"));		//put doc_srl_no at last..

						hmArgData.put(DATA,alDeleteRecord);
						hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_RET_DTL_EXP_DELETE_FOR_SAL_RET);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);
						String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
					
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						}else{
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0));
						}
						alDtlRecord.add(hmDetail.get("item_unit_cost"));
						alDtlRecord.add(hmDetail.get("item_cost_value"));
						alDtlRecord.add(hmDetail.get("remarks"));
						
						alDtlRecord.add(hmCommon.get("login_by_id"));
						alDtlRecord.add(hmCommon.get("login_at_ws_no"));
						alDtlRecord.add(hmCommon.get("login_facility_id"));

						alDtlRecord.add(hmHeader.get("facility_id"));
						alDtlRecord.add(hmHeader.get("doc_type_code"));
						alDtlRecord.add(hmHeader.get("doc_no"));
						alDtlRecord.add(hmDetail.get("doc_srl_no"));

						hmArgData.put(DATA,alDtlRecord);

						hmArgSQL.put(UPDATE_SQL,SQL_ST_SAL_RET_DTL_UPDATE_FOR_SAL_RET);

						hmResult	=	update(connection, hmArgData, hmArgSQL);
						break;
					}
				}
				throwExceptionWhenFailed(hmResult);
		 billable_item_yn=checkForNull((String)fetchRecord(connection, "SELECT NVL(BILLABLE_ITEM_YN,'N') BILLABLE_ITEM_YN FROM MM_ITEM WHERE ITEM_CODE=?", (String)hmDetail.get("item_code")).get("BILLABLE_ITEM_YN"),"N");
	
					if(iMode!=0 && isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y") && billable_item_yn.equals("Y") ){
				alExp_bat_data		=	(ArrayList)	hmData.get("DTL_EXP_DATA");
			HashMap hmExpRecord		=	null;
			sb_batch_data			=	new StringBuffer();
			for (int j=0;j<alExp_bat_data.size() ;j++ ) {
				hmExpRecord		= (HashMap)alExp_bat_data.get(j);
				//if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code"))){
				if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code")) && ((String)hmDetail.get("doc_srl_no")).equals(hmExpRecord.get("doc_srl_no"))){
			     	sb_batch_data.append(hmExpRecord.get("trade_id"));
			        sb_batch_data.append(";");
				    sb_batch_data.append(hmExpRecord.get("batch_id"));
			   		sb_batch_data.append(";");
					sb_batch_data.append(hmExpRecord.get("expiry_date_or_receipt_date"));
			   		sb_batch_data.append(";");
					sb_batch_data.append(hmExpRecord.get("bin_location_code"));
			   		sb_batch_data.append(";");
					String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
					}else{
					sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
					}
			   		sb_batch_data.append(";");
				}
            }
						//callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
						callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,SYSDATE,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");

						/**
						if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
						else
							callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
						**/
						if(hmDetail.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmDetail.get("FACILITY_STR_FOR_BL"));
						else
							callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));

						callableStatement.setString(2, (String)hmHeader.get("patient_id"));
						callableStatement.setString(3, (String)hmHeader.get("module_id"));
						callableStatement.setString(4, (String)hmHeader.get("encounter_id"));
						callableStatement.setString(5, ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
						callableStatement.setString(6, (String)hmHeader.get("doc_type_code"));
						callableStatement.setInt(7, Integer.parseInt((String)hmHeader.get("doc_no")) );
						callableStatement.setInt(8, Integer.parseInt((String)hmDetail.get("doc_srl_no")) );

						//commented the below parameter and added sysdate in the procedure itself and changed the parameter seq for next paramter 
						//by Ganga Friday, March 08, 2013 for Medicity

						//callableStatement.setString(9, (String)hmHeader.get("doc_date"));

						callableStatement.setString(9, (String)hmDetail.get("item_code"));
						callableStatement.setString(10, (String)hmHeader.get("store_code"));
						/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications began 

						**/
						//if((checkForNull((String)hmDetail.get("decimal_allowedYN"),"N")).equals("Y")){
						//Added by suresh.r on 25-06-2014 against AAKH-SCF-0118 beg
						if(hmDetail.containsKey("mm_trn_qty")){
							callableStatement.setDouble(11, (-1)*Double.parseDouble(setNumber((String)hmDetail.get("mm_trn_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0")))) );
						}else{//Added by suresh.r on 25-06-2014 against AAKH-SCF-0118 end
							callableStatement.setDouble(11, (-1)*Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0")))) );
						}
						//}else{
						//	callableStatement.setInt(12, (-1)*( new Double(Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0"))))).intValue()) );
					//	}
					
						/** @ 
							CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications end 
						**/
						
						/** @ before modification 
						callableStatement.setInt(12, (-1)*Integer.parseInt((String)hmDetail.get("item_qty")) );
						**/
						callableStatement.setString(12,sb_batch_data.toString());
						callableStatement.setString(13,(String)hmCommon.get("login_at_ws_no"));						
						callableStatement.setString(14,(String)hmDetail.get("uom_code"));						
						callableStatement.setString(15,checkForNull((String)hmDetail.get("p_overridden_excl_incl_ind"),""));// Overidden excl incl ind this is the defaulted value
						callableStatement.setString(16,checkForNull((String)hmDetail.get("p_overridden_action_reason"),""));// this is a defaltuted value for the action reason code						
						callableStatement.setString(17,checkForNull((String)hmHeader.get("token_series_code"),""));	// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(18,checkForNull((String)hmHeader.get("token_serial_no"),""));// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(19,(String)hmHeader.get("store_code"));// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(20,(String)hmDetail.get("sales_doc_type_code"));
						callableStatement.setString(21,(String)hmDetail.get("sales_doc_no"));
						callableStatement.setString(22,(String)hmDetail.get("sal_doc_srl_no"));
						callableStatement.setString(23,"N");//Internal Adjustment
						//callableStatement.setString(25,"N");//Discharge Medication
						callableStatement.setString(24,checkForNull((String)hmDetail.get("take_home_yn"),"N"));//Discharge Medication
						callableStatement.registerOutParameter(27, Types.VARCHAR);
						callableStatement.registerOutParameter(25, Types.VARCHAR);
						callableStatement.registerOutParameter(26, Types.VARCHAR);
						callableStatement.setString(28,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module

						/*callableStatement.registerOutParameter(21, Types.VARCHAR);
						callableStatement.registerOutParameter(22, Types.VARCHAR);
						callableStatement.registerOutParameter(23, Types.VARCHAR);*/
						callableStatement.execute();
						message.put("error_id" , checkForNull((String)callableStatement.getString(26)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(27)));
						closeStatement(callableStatement);
						if((checkForNull((String)message.get("error_msg"))) !=""){
							if("BL9146".equals((String)message.get("error_id"))){//Added for MMS-DM-CRF-192.2 in 03/03/2016
								throw new Exception((String)message.get("error_msg"));
							}else{
								String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 						
								throw new Exception(msg +"  -   Item:" + hmDetail.get("item_code"));
							}
						}
			
				}
				
				if(isFinalized && iMode!=0) { // mode not equals delete

					HashMap hmTemp	=	new HashMap();
					//Added by suresh.r on 19-08-2014 against Inc #50616 beg
					int     noOfDecimalsForCost   =  Integer.parseInt(getNoOfDecimalsCost(connection));
					double base_unit_cost=Double.parseDouble((String)hmDetail.get("item_unit_cost"))/getConvFactTemp(connection, (String)hmDetail.get("item_code"), (String)hmHeader.get("store_code"));
					//hmTemp.put("item_unit_cost", hmDetail.get("item_unit_cost"));
					hmTemp.put("item_unit_cost", setNumber(""+base_unit_cost, noOfDecimalsForCost));
					//Added by suresh.r on 19-08-2014 against Inc #50616 end
					hmTemp.put("item_cost_value", hmDetail.get("item_cost_value"));
					hmTemp.put("uom_code", hmDetail.get("uom_code"));
					hmTemp.put("stock_item_yn", hmDetail.get("stock_item_yn"));

					hmItemInfo.put((String)hmDetail.get("item_code"),hmTemp);

					HashMap hmSQL = new HashMap();

						if(((String)hmHeader.get("module_id")).equals("PH"))
							hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT1);
						else
							hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
					hmSQL.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
					hmSQL.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
					hmSQL.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);

					HashMap hmParameters = new HashMap();
					hmParameters.put("item_code",hmDetail.get("item_code"));
					hmParameters.put("store_code",hmHeader.get("store_code"));
					hmParameters.put("trn_type","SRT");
					String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					
					hmParameters.put("trn_qty",setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
					if(!hmDetail.containsKey("mm_trn_qty"))
						hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
					else
						hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("mm_trn_qty"),no_of_decimals));
					}else{
						hmParameters.put("trn_qty",setNumber((String)hmDetail.get("item_qty"),0));
					if(!hmDetail.containsKey("mm_trn_qty"))
						hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("item_qty"),0));
					else
						hmParameters.put("mm_trn_qty",""+setNumber((String)hmDetail.get("mm_trn_qty"),0));
						}
					hmParameters.put("language_id",(String)allanguageData.get(0));
					hmParameters.put("trn_unit_cost",hmDetail.get("item_unit_cost"));
					hmParameters.put("trn_value",hmDetail.get("item_cost_value"));
					hmParameters.put("from_stk_item_yn",hmDetail.get("stock_item_yn"));
					hmParameters.put("to_stk_item_yn","");
					//hmParameters.put("last_receipt_date",""); 
                    hmParameters.put("last_receipt_date",hmHeader.get("doc_date")); 
					hmParameters.put("last_issue_date",hmHeader.get("doc_date"));
					hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
					hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
					hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));
					try{
					    calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);
					}catch(Exception exx){
                        exx.printStackTrace();
						hmResult.put("flag",""+i );
						if(exx.getMessage().toString().contains("ORA"))
						{
							throw exx;
						}
						else if(exx.getMessage().toString().contains("NEGATIVE_STOCK"))
						{
						  throw new Exception("NEGATIVE_STOCK");
						}
						else
						{
						   throw exx;
						}						
					}
                  
					
					hmResult	=	insertOrUpdateItemMoveSummaryForSalesReturn(connection, hmParameters);
					throwExceptionWhenFailed(hmResult);
				} 
			/*if(isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")){
				alExp_bat_data		=	(ArrayList)	hmData.get("DTL_EXP_DATA");
			HashMap hmExpRecord		=	null;
			sb_batch_data			=	new StringBuffer();
			for (int j=0;j<alExp_bat_data.size() ;j++ ) {
				hmExpRecord		= (HashMap)alExp_bat_data.get(j);
				if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code"))){
			     	sb_batch_data.append(hmExpRecord.get("trade_id"));
			        sb_batch_data.append(";");
				    sb_batch_data.append(hmExpRecord.get("batch_id"));
			   		sb_batch_data.append(";");
					sb_batch_data.append(hmExpRecord.get("expiry_date_or_receipt_date"));
			   		sb_batch_data.append(";");
					sb_batch_data.append(hmExpRecord.get("bin_location_code"));
			   		sb_batch_data.append(";");
					String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
					}else{
					sb_batch_data.append(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
					}
			   		sb_batch_data.append(";");
				}
            }
						callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
						if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
						else
							callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
						callableStatement.setString(2, (String)hmHeader.get("patient_id"));
						callableStatement.setString(3, (String)hmHeader.get("module_id"));
						callableStatement.setString(4, (String)hmHeader.get("encounter_id"));
						callableStatement.setString(5, ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
						callableStatement.setString(6, (String)hmHeader.get("doc_type_code"));
						callableStatement.setInt(7, Integer.parseInt((String)hmHeader.get("doc_no")) );
						callableStatement.setInt(8, Integer.parseInt((String)hmDetail.get("doc_srl_no")) );
						callableStatement.setString(9, (String)hmHeader.get("doc_date"));
						callableStatement.setString(10, (String)hmDetail.get("item_code"));
						callableStatement.setString(11, (String)hmHeader.get("store_code"));
						/** @ 
						 CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications began 

						*///
						//if((checkForNull((String)hmDetail.get("decimal_allowedYN"),"N")).equals("Y")){
							//callableStatement.setDouble(12, (-1)*Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0")))) );
						//}else{
						//	callableStatement.setInt(12, (-1)*( new Double(Double.parseDouble(setNumber((String)hmDetail.get("item_qty"),Integer.parseInt(checkForNull((String)hmDetail.get("no_of_decimals"),"0"))))).intValue()) );
					//	}
					
						/** @ 
							CRF_SRR20056-CRF-0537.1 
						 For handle the Decimals in QOH, avail_Qty Modifications end 
						**/
						
						/** @ before modification 
						callableStatement.setInt(12, (-1)*Integer.parseInt((String)hmDetail.get("item_qty")) );
						////
						callableStatement.setString(13,sb_batch_data.toString());
						callableStatement.setString(14,(String)hmCommon.get("login_at_ws_no"));						
						callableStatement.setString(15,(String)hmDetail.get("uom_code"));						
						callableStatement.setString(16,checkForNull((String)hmDetail.get("p_overridden_excl_incl_ind"),""));// Overidden excl incl ind this is the defaulted value
						callableStatement.setString(17,checkForNull((String)hmDetail.get("p_overridden_action_reason"),""));// this is a defaltuted value for the action reason code						
						callableStatement.setString(18,checkForNull((String)hmHeader.get("token_series_code"),""));	// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(19,checkForNull((String)hmHeader.get("token_serial_no"),""));// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(20,(String)hmHeader.get("store_code"));// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(21,(String)hmDetail.get("sales_doc_type_code"));
						callableStatement.setString(22,(String)hmHeader.get("sales_doc_no"));
						callableStatement.setString(23,(String)hmDetail.get("sal_doc_srl_no"));
						callableStatement.setString(24,"N");//Internal Adjustment
						callableStatement.setString(25,"N");//Discharge Medication
						callableStatement.registerOutParameter(28, Types.VARCHAR);
						callableStatement.registerOutParameter(26, Types.VARCHAR);
						callableStatement.registerOutParameter(27, Types.VARCHAR);
						callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module

						/*callableStatement.registerOutParameter(21, Types.VARCHAR);
						callableStatement.registerOutParameter(22, Types.VARCHAR);
						callableStatement.registerOutParameter(23, Types.VARCHAR);/////
						callableStatement.execute();
						message.put("error_id" , checkForNull((String)callableStatement.getString(27)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(28)));
						if((checkForNull((String)message.get("error_msg"))) !=""){
						String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 
						
						throw new Exception(msg +"  -   Item:" + hmDetail.get("item_code"));
						}
			
				}*/
		
		}
            
			alExp	=	(ArrayList)hmData.get("DTL_EXP_DATA");


			for (int i=0;i<alExp.size() ;i++ ) {

				HashMap hmExpRecord		= (HashMap)alExp.get(i);



				ArrayList alExpRecord	= new ArrayList();

				alExpRecord.add(hmHeader.get("facility_id"));
				alExpRecord.add(hmHeader.get("doc_type_code"));
				alExpRecord.add(hmHeader.get("doc_no"));
				alExpRecord.add(hmExpRecord.get("doc_srl_no"));

				alExpRecord.add(hmExpRecord.get("store_code"));
				alExpRecord.add(hmExpRecord.get("item_code"));
				alExpRecord.add(hmExpRecord.get("batch_id"));

				alExpRecord.add(hmExpRecord.get("new_bin_location_code"));
				alExpRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
				alExpRecord.add(hmExpRecord.get("trade_id"));
				String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
				if(allow_decimals_yn.equals("Y") ){
				alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
				}else{
				alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
				}

				alExpRecord.add(hmExpRecord.get("DOC_TYPE_CODE"));
				alExpRecord.add(hmExpRecord.get("DOC_NO"));

				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));
				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));

				alExpData.add(alExpRecord);

				

				/*Return item qty should not be greater then sale qty check starts here 

				try{

				ArrayList alSelectFields = new ArrayList();

					
					alSelectFields.add((String)hmCommon.get("login_facility_id"));
					alSelectFields.add((String)hmExpRecord.get("sal_doc_type_code"));//DOC_TYPE_CODE")
					alSelectFields.add((String)hmExpRecord.get("sal_doc_no"));		//   DOC_NO")); 
					alSelectFields.add((String)hmExpRecord.get("doc_srl_no"));		//   DOC_srl_NO"));     
					alSelectFields.add((String)hmExpRecord.get("item_code"));
					alSelectFields.add((String)hmExpRecord.get("batch_id"));
					alSelectFields.add(checkForNull((String)hmExpRecord.get("sal_bin_location_code"),(String)hmExpRecord.get("bin_location_code")));
					alSelectFields.add((String)hmExpRecord.get("expiry_date_or_receipt_date"));

				System.out.println("alSelectFields:"+alSelectFields);

					HashMap hmSalRetQtychk	=	fetchRecord(connection, SQL_ST_SAL_DTL_EXP_SELECT_SAL_RET_QTY_CHK, alSelectFields);

				double sal_item_qty = Double.parseDouble((String)hmSalRetQtychk.get("SAL_ITEM_QTY"));
				double old_ret_item_qty = Double.parseDouble((String)hmSalRetQtychk.get("RET_ITEM_QTY"));
				double new_ret_item_qty  = old_ret_item_qty + Double.parseDouble((String)hmExpRecord.get("ret_item_qty")) ;

				System.out.println("hmSalRetQtychk:"+hmSalRetQtychk);
				System.out.println("new_ret_item_qty:"+new_ret_item_qty);

					if(new_ret_item_qty > sal_item_qty){
					throw new Exception ("SAL_RET_QTY_SHOULD_NOT_BE_GR_SAL_QTY");	
					}
				}catch (Exception e){
							hmResult.put(MESSAGE,e.getMessage());
							hmResult.put(MSGID,e.getMessage());
							hmResult.put("itemDesc",(String)hmExpRecord.get("item_code") +" "+ (String)hmExpRecord.get("batch_id"));
							hmResult.put(RESULT,FALSE);							
							throwExceptionWhenFailed(hmResult);
							
				}

				
			end here */



                /*  Updating the sal_dtl_exp table for ret_qty BEGINS here */
                
				/* Commented by Pankaj on 12/07/2004 */


                /*
				ArrayList alUpdateFields = new ArrayList();

				alUpdateFields.add((String)hmExpRecord.get("ret_item_qty"));
				alUpdateFields.add((String)hmCommon.get("login_by_id"));
				alUpdateFields.add((String)hmCommon.get("login_at_ws_no"));
				alUpdateFields.add((String)hmCommon.get("login_facility_id"));

				alUpdateFields.add((String)hmCommon.get("login_facility_id"));
				alUpdateFields.add((String)hmExpRecord.get("DOC_TYPE_CODE"));
				alUpdateFields.add((String)hmExpRecord.get("DOC_NO"));
				//alUpdateFields.add((String)hmExpRecord.get("doc_srl_no"));
				alUpdateFields.add((String)hmExpRecord.get("store_code"));
				alUpdateFields.add((String)hmExpRecord.get("item_code"));
				alUpdateFields.add((String)hmExpRecord.get("batch_id"));
				alUpdateFields.add((String)hmExpRecord.get("bin_location_code"));
				alUpdateFields.add((String)hmExpRecord.get("expiry_date_or_receipt_date"));


				hmArgData.put(DATA,alUpdateFields);
				hmArgSQL.put(UPDATE_SQL,SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET);

				try{
					hmResult	=	update(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmResult);
				   }

				catch(Exception ex) { ex.printStackTrace(); }

               */
               /*  Updating the sal_dtl_exp table for ret_qty ENDS here */

         
			if (isFinalized) {

					HashMap hmParamaters = new HashMap();
					HashMap hmSQL		 = new HashMap();

					hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
					hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
					hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
					hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
					hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
					hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
					hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);


					hmParamaters.put("item_code",hmExpRecord.get("item_code"));
					hmParamaters.put("store_code",hmExpRecord.get("store_code"));
					hmParamaters.put("trn_type","SRT");
					 allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					hmParamaters.put("trn_qty",setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
					}else{
					hmParamaters.put("trn_qty",setNumber((String)hmExpRecord.get("ret_item_qty"),0));
					}
					hmParamaters.put("batch_id",hmExpRecord.get("batch_id"));
					hmParamaters.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
					hmParamaters.put("trade_id",hmExpRecord.get("trade_id"));
					//need to check (imp)
					hmParamaters.put("from_bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParamaters.put("suspended_batch_allowed_yn","Y");
					hmParamaters.put("release_batch_yn","N");
					hmParamaters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date
					hmParamaters.put("login_by_id",hmCommon.get("login_by_id"));
					hmParamaters.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
					hmParamaters.put("login_facility_id",hmCommon.get("login_facility_id"));
					hmParamaters.put("modified_date",hmExpRecord.get("modified_date"));

					updateBatchOnLine(connection, hmSQL, hmParamaters);

                   	ArrayList ItemTrnDtlRecord	=	new ArrayList();
					HashMap	hmTempItemInfo		=	(HashMap)hmItemInfo.get((String)hmExpRecord.get("item_code"));

					ItemTrnDtlRecord.add(hmHeader.get("facility_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("store_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("item_code"));
					ItemTrnDtlRecord.add(""+(i+1));//trn_srl_no
					ItemTrnDtlRecord.add("SRT");
					ItemTrnDtlRecord.add(hmHeader.get("doc_type_code"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_no"));
					ItemTrnDtlRecord.add(hmExpRecord.get("doc_srl_no"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_date"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_ref"));
					ItemTrnDtlRecord.add(hmExpRecord.get("batch_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					ItemTrnDtlRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals)); //normal_qty
					}else{
					ItemTrnDtlRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),0)); //normal_qty
					}
					ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_cost"));
					//ItemTrnDtlRecord.add(hmTempItemInfo.get("item_cost_value"));
					ItemTrnDtlRecord.add(hmTempItemInfo.get("uom_code"));
					ItemTrnDtlRecord.add(hmTempItemInfo.get("stock_item_yn"));
					ItemTrnDtlRecord.add(hmExpRecord.get("new_bin_location_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("trade_id"));

					// added on 07/07/2004 by Pankaj .
					ItemTrnDtlRecord.add(hmExpRecord.get("DOC_TYPE_CODE"));
					ItemTrnDtlRecord.add(hmExpRecord.get("DOC_NO"));
					ItemTrnDtlRecord.add(hmExpRecord.get("SAL_DOC_SRL_NO"));
					ItemTrnDtlRecord.add(hmExpRecord.get("SAL_DOC_DATE"));

					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));

					alItemTrnDtl.add(ItemTrnDtlRecord);

				}   
			}
            
			hmArgData.put(DATA,alExpData);
			hmArgSQL.put(BATCH_SQL,SQL_ST_SAL_RET_DTL_EXP_INSERT_FOR_SAL_RET);
			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);



 //added by gangadharan

              ArrayList alSelectFields = new ArrayList();
			  ArrayList hmResult1 =     new ArrayList();
			  ArrayList	hmResult2 =     null;
			  HashMap 	hmResult3 =     new HashMap();
  			  ArrayList	hmArgData1	=	null;
	          ArrayList	hmArgSQL1	=	null;
			  ArrayList	hmArgData2	=	null;
	          ArrayList	hmArgSQL2	=	null;
              ArrayList	hmExpRecord1=	null;
			  ArrayList	hmExpRecord2=	new ArrayList();
			  ArrayList alParameter = null;


              for (int i=0;i<alDetail.size() ;i++ ) {

				HashMap hmDetail		=	(HashMap)alDetail.get(i);

				//ArrayList alDtlRecord	=	new ArrayList(); //commented by Rabbani on 24-Mar-2014 for chkstyles

				//int iMode	=	Integer.parseInt((String)hmDetail.get("mode"));
                //String sales_doc_type_code	=	(String)hmDetail.get("sales_doc_type_code");

				//switch (iMode){

				//case 2:
				//{
				//for (int j=0;j<1 ;j++ ){

              	hmArgData1	=	new ArrayList();
	          	hmArgSQL1	=	new ArrayList();
			  	hmArgData2	=	new ArrayList();
	          	hmArgSQL2	=	new ArrayList();
				alParameter =	new ArrayList();
				
				alParameter.add((String)hmCommon.get("login_facility_id"));				
				alParameter.add((String)hmDetail.get("sales_doc_type_code")); 
				alParameter.add((String)hmHeader.get("sales_doc_no")); 
				alParameter.add((String)hmDetail.get("item_code"));

				ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_QTY,alParameter);

				for (int n=0;n<alRecords.size();n++){

				HashMap alTemp = (HashMap)alRecords.get(n);
				
				alSelectFields.add((String)alTemp.get("FACILITY_ID"));
				alSelectFields.add((String)hmHeader.get("doc_type_code")); 
				alSelectFields.add((String)alTemp.get("SALES_DOC_NO")); 
                alSelectFields.add((String)alTemp.get("ITEM_CODE"));				
				alSelectFields.add((String)alTemp.get("BATCH_ID"));				
				alSelectFields.add((String)alTemp.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
				alSelectFields.add((String)alTemp.get("BIN_LOCATION_CODE")); 
	   
				hmArgData1.add(alSelectFields);
				hmArgSQL1.add(SQL_ST_SAL_DTL_EXP_SELECT_FOR_SAL_RET_SUM);
				hmResult1	=	operateBatch1(connection, hmArgData1, hmArgSQL1);

				if(hmResult1.size()>0){
				hmExpRecord1 = new ArrayList();
				hmResult2    = new ArrayList();
				for (int k=0;k<hmResult1.size();k++){
					
				hmResult2	= (ArrayList)hmResult1.get(k);
		
				for (int l=0;l<hmResult2.size();l++ ){
				hmExpRecord1.add(hmResult2.get(l));
				} 

				hmExpRecord1.add(hmCommon.get("login_by_id"));
				hmExpRecord1.add(hmCommon.get("login_at_ws_no"));
				hmExpRecord1.add(hmCommon.get("login_facility_id"));
              
				hmExpRecord2.add(hmExpRecord1);		
				}
				}else{

				hmExpRecord1 = new ArrayList();	 
				int qty = 0;
				hmExpRecord1.add((String)alTemp.get("FACILITY_ID"));
				hmExpRecord1.add((String)alTemp.get("SALES_DOC_NO")); 
				hmExpRecord1.add((String)alTemp.get("ITEM_CODE"));
				hmExpRecord1.add(""+qty);                 				
				hmExpRecord1.add((String)alTemp.get("BATCH_ID"));	
				hmExpRecord1.add((String)alTemp.get("BIN_LOCATION_CODE")); 
				hmExpRecord1.add((String)alTemp.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
				hmExpRecord1.add(hmCommon.get("login_by_id"));
				hmExpRecord1.add(hmCommon.get("login_at_ws_no"));
				hmExpRecord1.add(hmCommon.get("login_facility_id"));
              
				hmExpRecord2.add(hmExpRecord1);	

				}
				hmArgData2.add(hmExpRecord2);
				hmArgSQL2.add(SQL_ST_SAL_RET_DTL_EXP_UPDATE_FOR_SAL_RET_NEW_QTY);
				hmResult3	=	operateBatch2(connection, hmArgData2, hmArgSQL2);
				throwExceptionWhenFailed(hmResult3);
			
				alSelectFields.clear();
				hmExpRecord1.clear();
				hmExpRecord2.clear();
				//}
				//break;
				//}	
			//}
				}
			  }

         
	//added ended







			if (isFinalized) {
				hmArgData.put(DATA,alItemTrnDtl);
				hmArgSQL.put(BATCH_SQL,SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL_RET);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
			}
			//Adding start for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
if(((String)hmHeader.get("module_id")).equals("ST")){

	try{
				
      if(isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")){
					
					pstmt_blflag = connection.prepareStatement("SELECT BL_CHK_PKG_PAT_RECALC_YN(?,?,?,?,?) RESULT_FLAG from dual");

					pstmt_blflag.setString(1,"ST");
					pstmt_blflag.setString(2,(String)hmHeader.get("facility_id"));
					pstmt_blflag.setString(3,(String)hmHeader.get("patient_id"));
					pstmt_blflag.setString(4,(String)hmHeader.get("sales_doc_type"));
					pstmt_blflag.setString(5,(String)hmHeader.get("sales_doc_no")); //drug_class
					
					resultSet_blflag = pstmt_blflag.executeQuery() ;
								
					if(resultSet_blflag!=null && resultSet_blflag.next()){
						bl_result =resultSet_blflag.getString("RESULT_FLAG");
						
					}
					if(bl_result.equals("Y")){
					        String enc_id=(String)hmHeader.get("encounter_id");
							String epc_type=(String)hmHeader.get("sal_trn_type");
							String episode_id="";
							String visit_id  ="";
							if(!epc_type.equals("I") && !epc_type.equals("D")){
									if (!enc_id.equals("") && !enc_id.equals(null)) {
										episode_id = enc_id.substring(0, (enc_id.length() - 4)); 
										visit_id = enc_id.substring(enc_id.length() - 4); 
									  }
									}else{
										episode_id = enc_id;
										visit_id = "";
									}
                                  enc_list=epc_type+"~"+episode_id+"~"+visit_id;
								  //enc_group.add(enc_list);
					}
					

		 }
	
		 System.err.println("enc_list in salesReturn @@@====="+enc_list);
		if(isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y") && !enc_list.equals("") && !enc_list.equals("null")){
						callableStatement	= connection.prepareCall("{ call st_sal_bl_recalc_proc(?,?,?,?,?,?,?,?) }");

						callableStatement.setString(1,(String)hmCommon.get("login_facility_id"));
						callableStatement.setString(2,(String)hmHeader.get("module_id"));
						callableStatement.setString(3,(String)hmHeader.get("patient_id"));
						callableStatement.setString(4,enc_list);
						callableStatement.setString(5,(String)hmCommon.get("login_at_ws_no"));	
						callableStatement.registerOutParameter(6, Types.VARCHAR);
						callableStatement.registerOutParameter(7, Types.VARCHAR);
						callableStatement.registerOutParameter(8, Types.VARCHAR);
						//System.err.println("===================before calling procedure=================");
						callableStatement.execute();
						//System.err.println("===================after calling procedure================="+(String)callableStatement.getString(6));
						message.put("error_id" , checkForNull((String)callableStatement.getString(6)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(8)));
						System.err.println("StSalesReturn==error_id=======>"+checkForNull((String)callableStatement.getString(6))+"<====");
						System.err.println("StSalesReturn==error_msg=======>"+checkForNull((String)callableStatement.getString(8))+"<====");
						closeStatement(callableStatement);
						if((checkForNull((String)message.get("error_msg"))) !=""){
							if("BL9146".equals((String)message.get("error_id"))){//Added for MMS-DM-CRF-192.2 in 03/03/2016
								throw new Exception((String)message.get("error_msg"));
							}else{
								String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 						
								throw new Exception(msg );
							}
						}

	              }
		     }catch(Exception e){
					e.printStackTrace();
					System.err.println("message@@@===="+message);
	           }finally{
				   try{
				    closeStatement(callableStatement);
                    closeResultSet( resultSet_blflag );//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
					closeStatement(pstmt_blflag);//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508
					}catch(Exception e){
						e.printStackTrace();
					}
			   }//Adding end for KDAH-SCF-0452 //commenting end for KDAH Live return issue on 27/01/2017 KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508
          }
		


		}
		catch (Exception exception) {
			exception.printStackTrace();
			hmResult.put(RESULT,FALSE);
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());

		}
String p_charge_amt="";
if(!(((String)hmHeader.get("module_id")).equals("PH")) && isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")&&(((hmHeader.get("sal_trn_type").equals("O"))||(hmHeader.get("sal_trn_type").equals("R"))||(hmHeader.get("sal_trn_type").equals("X"))||(hmHeader.get("sal_trn_type").equals("E"))))){
      HashMap message_bill = new HashMap();
	  String msg="";
		   p_charge_amt=checkForNull((String)hmDetail_Bill_YN.get("gross_charge_amt"),"99999");
		  try{
			callableStatement	= connection.prepareCall("{ call ST_BL_BILL_GEN (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
			callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));   
			callableStatement.setString(2, (String)hmHeader.get("store_code"));
			callableStatement.setString(3,(String)hmHeader.get("doc_type_code")+"-"+(String)hmHeader.get("doc_no") );
			callableStatement.setString(4, (String)hmCommon.get("login_by_id"));
			callableStatement.setString(5,(String) hmCommon.get("login_at_ws_no"));
			callableStatement.setFloat(6, Float.parseFloat(p_charge_amt));
			callableStatement.setString(7, (String)hmHeader.get("patient_id"));
			callableStatement.setString(8,  ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
			callableStatement.setString(9,  (String)hmHeader.get("encounter_id"));
			callableStatement.setString(16,  "ST");
			callableStatement.setString(17,  "N");
		
			callableStatement.registerOutParameter(10, Types.VARCHAR);
			callableStatement.registerOutParameter(11, Types.VARCHAR);
			callableStatement.registerOutParameter(12, Types.VARCHAR);
			callableStatement.registerOutParameter(13, Types.VARCHAR);
			callableStatement.registerOutParameter(14, Types.VARCHAR);
			callableStatement.registerOutParameter(15, Types.VARCHAR);
			callableStatement.registerOutParameter(18, Types.VARCHAR);
			callableStatement.setString(19,  (String)hmCommon.get("login_facility_id")); //added for MOHE-CRF-0060
			callableStatement.execute();
			
			//message=(String)callableStatement.getString(7);
			message_bill.put("l_slmt_reqd_yn" , checkForNull((String)callableStatement.getString(10)));
			message_bill.put("l_bill_doc_type" , checkForNull((String)callableStatement.getString(11)));
			message_bill.put("l_bill_doc_num" , checkForNull((String)callableStatement.getString(12)));
			message_bill.put("v_blng_group_id" , checkForNull((String)callableStatement.getString(13)));
			message_bill.put("error_id" , checkForNull((String)callableStatement.getString(14)));
			message_bill.put("error_msg" , checkForNull((String)callableStatement.getString(15)));
			message_bill.put("p_call_disc_function_yn" , checkForNull((String)callableStatement.getString(18),"N"));
				
			if((checkForNull((String)message_bill.get("error_msg"))) !=""){
				if("BL9146".equals((String)message.get("error_id"))){//Added for MMS-DM-CRF-192.2 in 03/03/2016
					throw new Exception((String)message.get("error_id")+" - "+(String)message.get("error_msg"));
				}else{
				msg = (String)message_bill.get("error_id") + "  " + (String)message_bill.get("error_msg"); 
				//throw new Exception(msg +"  -   Item:" + hmHeader.get("store_code"));
				throw new Exception(msg);
				}
			}		
			}catch(Exception exception)
			{
				hmResult.put(RESULT,FALSE);
			if((exception.getMessage()).contains("BL9146")){//Added for MMS-DM-CRF-192.2 in 03/03/2016
				hmResult.put(MESSAGE,exception.getMessage());
				hmResult.put(MSGID,exception.getMessage());
			}else{
				hmResult.put(MESSAGE,exception.toString());
				hmResult.put(MSGID,exception.getMessage());
			}
				exception.printStackTrace();
			}finally{
				try {
			   closeStatement(callableStatement);
			   closeResultSet( resultSet_blflag );//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508 
			   closeStatement(pstmt_blflag);//Added for KDAH-SCF-0469,KDAH-SCF-507 and KDAH-SCF-508
				}catch (Exception e){
					e.printStackTrace();
				}
			
		}
				hmResult.put("l_bill_doc_num",(String)message_bill.get("l_bill_doc_num"));
				hmResult.put("l_bill_doc_type",(String)message_bill.get("l_bill_doc_type"));
				hmResult.put("l_slmt_reqd_yn",(String)message_bill.get("l_slmt_reqd_yn"));
				hmResult.put("v_blng_group_id",(String)message_bill.get("v_blng_group_id"));
				hmResult.put("p_call_disc_function_yn",(String)message_bill.get("p_call_disc_function_yn"));
		} 
		ArrayList doc_no = new ArrayList();
		doc_no.add((String)hmHeader.get("doc_no"));
		hmResult.put("doc_no",doc_no);
	
		return hmResult;
	}




//added by gangadharan

	protected ArrayList operateBatch1(Connection	connection,ArrayList hmData, ArrayList	hmSQL ) 
	{
		
		PreparedStatement	preparedStatement	=	null;
		String				sql					=	"";
		ArrayList			alDataM				=	new ArrayList();
		//ArrayList			alData				=	new ArrayList(); //commented by Rabbani on 24-Mar-2014 for chkstyles
		ArrayList		    	expData1			=	new ArrayList();
		ArrayList			    expData2			=	null;
        ResultSet resultset = null;
		ResultSetMetaData resultsetmetadata = null;

			
		alDataM	=    (ArrayList)hmData.get(0);
		sql		=	 (String)hmSQL.get(0);

		try {

			preparedStatement = connection.prepareStatement(sql);

         for(int index=0;index<1;index++){   

	         setData1(preparedStatement,alDataM);

			resultset=preparedStatement.executeQuery();

                        while(resultset.next())
				{		
							expData2			=	new ArrayList();
			resultsetmetadata = resultset.getMetaData();
				      
             for (int i=1; i<=resultsetmetadata.getColumnCount(); i++ )
				 {
            expData2.add(resultset.getString(resultsetmetadata.getColumnName(i)));
   		          }
	 
		 expData1.add(expData2);
	          
				}
				}	
		}
        				
		catch(Exception exception) {
		 		exception.printStackTrace();
		//	throw exception;
        }
		finally {
			try {

				 closeResultSet(resultset);   //Common-ICN-0091
	
				 closeStatement(preparedStatement);//  Common-ICN-0091 
				
}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		return expData1;
	}


protected HashMap operateBatch2(Connection	connection, ArrayList hmData, ArrayList	hmSQL ) {

		HashMap				hmReturn			=	new HashMap();
		PreparedStatement	preparedStatement	=	null;
		String				sql					=	"";
		ArrayList		    alDataM				=	new  ArrayList();
		ArrayList           alData  = null;


	//	int					[]iResult			;
		int					index				=	0;

		hmReturn.put(RESULT,FALSE);
         {     

         alDataM	=   (ArrayList)hmData.get(0);
    	  sql		=	 (String)hmSQL.get(0);

           for (index=0;index<alDataM.size();index++ )    {

              alData				=	new ArrayList();

		 alData    = (ArrayList)alDataM.get(index);

	
		try {
		 
		 String  FACILITY_ID  = (String)alData.get(0);
		 Double SAL_DOC_NO = Double.parseDouble((String)alData.get(1));
         String  ITEM_CODE = (String)alData.get(2);
         Double  SUM_ITEM_QTY  =   Double.parseDouble((String)alData.get(3));
         String		 BATCH_ID =  (String)alData.get(4);
       	String BIN_LOCATION_CODE =  (String)alData.get(5);
     	String	 EXPIRY_DATE_OR_RECEIPT_DATE =  (String)alData.get(6);
        String		 MODIFIED_BY_ID =  (String)alData.get(7);
    	String	 MODIFIED_AT_WS_NO =  (String)alData.get(8);
	    String MODIFIED_FACILITY_ID =    (String)alData.get(9); 

			preparedStatement = connection.prepareStatement(sql);

			preparedStatement.setDouble(1,SUM_ITEM_QTY);
			preparedStatement.setString(2,MODIFIED_BY_ID);
			preparedStatement.setString(3,MODIFIED_AT_WS_NO);
			preparedStatement.setString(4,MODIFIED_FACILITY_ID);
			preparedStatement.setString(5,FACILITY_ID);
			preparedStatement.setDouble(6,SAL_DOC_NO);
			preparedStatement.setString(7,ITEM_CODE);
			preparedStatement.setString(8,BATCH_ID);
			preparedStatement.setString(9,BIN_LOCATION_CODE);
			preparedStatement.setString(10,EXPIRY_DATE_OR_RECEIPT_DATE);

			
			int  iResult		=	preparedStatement.executeUpdate();
            if(iResult!=0) {
				hmReturn.put(RESULT,TRUE);
						}
		

						
			 if (sql.toUpperCase().startsWith("UPDATE")) {
			    System.out.println("In StSalesReturns.java,2056 in Update");
				hmReturn.put(MSGID,RECORD_MODIFIED);
				hmReturn.put(MESSAGE,RECORD_MODIFIED);
							}		
				
        }
		catch(Exception exception) {
		   	hmReturn.put(RESULT,FALSE);
			hmReturn.put(MESSAGE,exception.toString());
			exception.printStackTrace();
        }

		finally {
			try {
				if(preparedStatement!=null)preparedStatement.close();
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		}
		}
		return hmReturn;
	}



	protected boolean setData1(PreparedStatement preparedStatement, ArrayList alData) { 
		Object []objects	=	new Object[alData.size()];
		for(int index = 0; index < alData.size(); index++) {
			objects[index]=alData.get(index);
		}
		return 	setData1(preparedStatement,objects);
	}
	
	protected boolean setData1(PreparedStatement preparedStatement, Object objFields[]) {
        boolean	returnValue	=	true;
		try {
            for(int index = 0; index < objFields.length; index++) {
				if(objFields[index] instanceof Date) {
                    preparedStatement.setDate(index + 1, (Date)objFields[index]);
				}			
				else if(objFields[index] instanceof Timestamp) {
                    preparedStatement.setTimestamp(index + 1, (Timestamp)objFields[index]);
				}
				else if(objFields[index] instanceof String) {
                     preparedStatement.setString(index + 1, (String)objFields[index]);
				}				
				else if(objFields[index] instanceof Integer) {
					preparedStatement.setInt(index + 1, ((Integer)objFields[index]).intValue());
				}
				else if(objFields[index] instanceof Long) {
                    preparedStatement.setLong(index + 1, ((Long)objFields[index]).longValue());
				}
				else if(objFields[index] instanceof Double) {
                    preparedStatement.setDouble(index + 1, ((Double)objFields[index]).doubleValue());
				}
                else if(objFields[index] instanceof Float) {
                    preparedStatement.setFloat(index + 1, ((Float)objFields[index]).floatValue());
				}
            }
        }
        catch(Exception exception) {
            exception.printStackTrace();
			returnValue	=	false;
        }
        return returnValue;
    }

	//added ended





	public HashMap deleteSalesReturn(Connection connection, HashMap hmData){
		HashMap		hmResult	=	new HashMap();
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();
		HashMap		hmPKData	=	new HashMap();

		ArrayList	alData		=	new ArrayList();

		try {
			hmPKData		=	(HashMap)	hmData.get("DATA");
			hmCommon		=	(HashMap)	hmData.get("COMMON_DATA");

			alData.add(hmPKData.get("facility_id"));	//facility_id
			alData.add(hmPKData.get("doc_type_code"));	//doc_type_code
			alData.add(hmPKData.get("doc_no"));			//doc_no

			
			/* To UPDATE in the corresponding batch in ST_SAL_DTL_EXP table for ret_item_qty BEGINS here  */

    		ArrayList	alParameter		=	new ArrayList();
			alParameter.add(hmPKData.get("doc_no"));			//doc_no
            ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_SELECT_SAL_RECORD_FOR_SAL_RET,alParameter);


   			ArrayList alAllRecords = new ArrayList();
			int no_of_decimals=getNoOfDecimals( connection);
            for(int i=0;i<alRecords.size();i++)
            {
                HashMap hmTempRecord = (HashMap)alRecords.get(i) ; 

                ArrayList alValues = new ArrayList();
				String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmTempRecord.get("ITEM_CODE"));
				if(allow_decimals_yn.equals("Y") ){
                alValues.add("-"+setNumber((String)hmTempRecord.get("ITEM_QTY"),no_of_decimals));
				}else{
                alValues.add("-"+setNumber((String)hmTempRecord.get("ITEM_QTY"),0));
				}
				alValues.add((String)hmCommon.get("login_by_id"));
				alValues.add((String)hmCommon.get("login_at_ws_no"));
				alValues.add((String)hmCommon.get("login_facility_id"));

                alValues.add((String)hmCommon.get("login_facility_id"));
			    alValues.add((String)hmTempRecord.get("SAL_DOC_TYPE_CODE"));
			    alValues.add((String)hmTempRecord.get("SAL_DOC_NO"));

				alValues.add((String)hmTempRecord.get("STORE_CODE"));
				alValues.add((String)hmTempRecord.get("ITEM_CODE"));
				alValues.add((String)hmTempRecord.get("BATCH_ID"));
                alValues.add((String)hmTempRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));

				alAllRecords.add(alValues);

			}


            hmArgData.put(DATA,alAllRecords);
			hmArgSQL.put(BATCH_SQL,SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_DELETE);

			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			/* To UPDATE in the corresponding batch in ST_SAL_DTL_EXP table for ret_item_qty ENDS here  */


			hmArgData.put(DATA, alData);

			hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_RET_DTL_EXP_DELETE_ALL_FOR_SAL_RET);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_RET_DTL_DELETE_ALL_FOR_SAL_RET);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_RET_HDR_DELETE_FOR_SAL_RET);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
		}
		catch (Exception exception) {
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			exception.printStackTrace();
		}

		return hmResult;
	}



     // Later need to transfer to ejb/eST/common/StEJBRepository

	public StSalesReturn(){

		SQL_ST_SAL_RET_HDR_UPDATE_FOR_SAL_RET		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_HDR_UPDATE_FOR_SAL_RET");
		SQL_ST_SAL_RET_HDR_INSERT_FOR_SAL_RET		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_HDR_INSERT_FOR_SAL_RET");
		SQL_ST_SAL_RET_HDR_DELETE_FOR_SAL_RET		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_HDR_DELETE_FOR_SAL_RET");
        //added by gangadharan
        SQL_ST_SAL_DTL_EXP_SELECT_FOR_SAL_RET_SUM	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_SELECT_FOR_SAL_RET_SUM");
        SQL_ST_SAL_RET_DTL_EXP_UPDATE_FOR_SAL_RET_NEW_QTY	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_EXP_UPDATE_FOR_SAL_RET_NEW_QTY");
		SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_QTY = eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_QTY");
		//end
		SQL_ST_SAL_RET_DTL_UPDATE_FOR_SAL_RET		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_UPDATE_FOR_SAL_RET");
		SQL_ST_SAL_RET_DTL_INSERT_FOR_SAL_RET		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_INSERT_FOR_SAL_RET");
		SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET       = eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET");

		SQL_ST_SAL_RET_DTL_DELETE_FOR_SAL_RET		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_DELETE_FOR_SAL_RET");
		SQL_ST_SAL_RET_DTL_DELETE_ALL_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_DELETE_ALL_FOR_SAL_RET");

		SQL_ST_SAL_RET_DTL_EXP_INSERT_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_EXP_INSERT_FOR_SAL_RET");
		SQL_ST_SAL_RET_DTL_EXP_DELETE_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_EXP_DELETE_FOR_SAL_RET");
		SQL_ST_SAL_RET_DTL_EXP_DELETE_ALL_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_EXP_DELETE_ALL_FOR_SAL_RET");
		SQL_ST_SAL_DTL_SELECT_UNIT_COST_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_SELECT_UNIT_COST_FOR_SAL_RET");
		SQL_ST_SAL_DTL_EXP_SELECT_TRADE_ID_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_SELECT_TRADE_ID_FOR_SAL_RET");

		SQL_ST_GET_MONTH_AND_YEAR					= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_MONTH_AND_YEAR");
//		SQL_ST_CHECK_SUMMARY_EXISTS					= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_SUMMARY_EXISTS");
		SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT			= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT");
		SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL_RET");
		SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL_RET");

		SQL_ST_CHECK_BATCH_EXISTS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_BATCH_EXISTS");
		SQL_ST_BATCH_CONTROL_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_BATCH_CONTROL_INSERT");
		SQL_ST_CHECK_ITEM_BATCH_EXISTS	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_ITEM_BATCH_EXISTS");
		SQL_ST_ITEM_BATCH_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_INSERT");
		SQL_ST_GET_ITEM_BATCH_STOCK_POS	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_ITEM_BATCH_STOCK_POS");
		SQL_ST_ITEM_BATCH_DELETE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_DELETE");
		SQL_ST_ITEM_BATCH_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_UPDATE");
		SQL_ST_ITEM_VALUE_SELECT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_VALUE_SELECT");
		SQL_ST_ITEM_VALUE_SELECT1		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_VALUE_SELECT1");
		SQL_ST_ITEM_MASTER_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MASTER_UPDATE");
		SQL_ST_GET_ITEM_STORE_STOCK_POS	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_ITEM_STORE_STOCK_POS");
		SQL_ST_ITEM_STORE_QTY_UPDATE	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_STORE_QTY_UPDATE");
		SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL_RET	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL_RET");
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT		= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT");
		SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE");
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG	= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG");
//		SQL_ST_SAL_RET_DTL_EXP_SELECT_FOR_BLOCK_REL= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_RET_DTL_EXP_SELECT_FOR_BLOCK_REL");
		SQL_ST_SAL_DTL_SELECT_SAL_RECORD_FOR_SAL_RET= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_SELECT_SAL_RECORD_FOR_SAL_RET");
		SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_DELETE = eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_DELETE");
		SQL_ST_RECORDS_PER_TRN_SELECT	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_RECORDS_PER_TRN_SELECT");
		SQL_ST_SAL_DTL_EXP_SELECT_SAL_RET_QTY_CHK = eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_SELECT_SAL_RET_QTY_CHK");
		
	}

	String SQL_ST_SAL_RET_HDR_UPDATE_FOR_SAL_RET;
	String SQL_ST_SAL_RET_HDR_INSERT_FOR_SAL_RET;
	String SQL_ST_SAL_RET_HDR_DELETE_FOR_SAL_RET;
	String SQL_ST_SAL_RET_DTL_UPDATE_FOR_SAL_RET;
	String SQL_ST_SAL_RET_DTL_INSERT_FOR_SAL_RET;
	String SQL_ST_SAL_RET_DTL_DELETE_FOR_SAL_RET;
	String SQL_ST_SAL_RET_DTL_DELETE_ALL_FOR_SAL_RET;
	String SQL_ST_SAL_RET_DTL_EXP_INSERT_FOR_SAL_RET;
	String SQL_ST_SAL_DTL_EXP_SELECT_FOR_SAL_RET_SUM;
    String SQL_ST_SAL_RET_DTL_EXP_UPDATE_FOR_SAL_RET_NEW_QTY;
	String SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_QTY;

	String SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET;
	String SQL_ST_SAL_RET_DTL_EXP_DELETE_FOR_SAL_RET;
	String SQL_ST_SAL_RET_DTL_EXP_DELETE_ALL_FOR_SAL_RET;
//	String SQL_ST_ITEM_BATCH_FOR_SAL_RET;
	String SQL_ST_SAL_DTL_SELECT_UNIT_COST_FOR_SAL_RET;
	String SQL_ST_SAL_DTL_EXP_SELECT_TRADE_ID_FOR_SAL_RET;

//for item movement summ
	String SQL_ST_GET_MONTH_AND_YEAR;
//	String SQL_ST_CHECK_SUMMARY_EXISTS;
	String SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT;
	String SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL_RET;
	String SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL_RET;

//batchRelease
//	String SQL_ST_SAL_RET_DTL_EXP_SELECT_FOR_BLOCK_REL;
//updateonline
	String SQL_ST_CHECK_BATCH_EXISTS;
	String SQL_ST_BATCH_CONTROL_INSERT;
	String SQL_ST_CHECK_ITEM_BATCH_EXISTS;
	String SQL_ST_ITEM_BATCH_INSERT;
	String SQL_ST_GET_ITEM_BATCH_STOCK_POS;
	String SQL_ST_ITEM_BATCH_DELETE;
	String SQL_ST_ITEM_BATCH_UPDATE;
	String SQL_ST_ITEM_VALUE_SELECT;
	String SQL_ST_ITEM_VALUE_SELECT1;
	String SQL_ST_ITEM_MASTER_UPDATE;
	String SQL_ST_GET_ITEM_STORE_STOCK_POS;
	String SQL_ST_ITEM_STORE_QTY_UPDATE;
	String SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL_RET;
	String SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT;
	String SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE;
    String SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG;

    String SQL_ST_SAL_DTL_SELECT_SAL_RECORD_FOR_SAL_RET;
    String SQL_ST_SAL_DTL_EXP_UPDATE_FOR_SAL_RET_DELETE ;
	String SQL_ST_RECORDS_PER_TRN_SELECT;
	String SQL_ST_SAL_DTL_EXP_SELECT_SAL_RET_QTY_CHK;

}

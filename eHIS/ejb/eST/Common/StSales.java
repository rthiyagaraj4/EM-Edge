/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
/*
-------------------------------------------------------------------------------------------------------------------------------------------
Date		            Edit History	        Name		       Rev.Date		     Rev.Name			     Description
-------------------------------------------------------------------------------------------------------------------------------------------
30/05/2017				064407					B.Badmavathi								      			Quantity mismatch in st_item_store and st_item_batch table
30/01/2020      		IN071972            	Haribabu                               						AAKH-CRF-0117.2 
4/5/2020				IN072353				Shazana														SKR-SCF-1315
--------------------------------------------------------------------------------------------------------------------------------------------
*/
package eST.Common;

//import java.rmi.RemoteException;
import eST.Common.StEJBSessionAdapter;
//import java.sql.Connection;
import java.sql.*;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

public class  StSales extends StEJBSessionAdapter {

	public HashMap insertSales(Connection connection, HashMap hmData){
		System.out.println("inside stSales.java"); //added for SKR-SCF-1315
		System.out.println("inside stSales hmData" + hmData); 	 
		HashMap		hmResult	=	new HashMap();
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmHeader	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();
		HashMap		hmItemInfo	=	new HashMap();
		ArrayList	alDetail	=	new ArrayList();
		ArrayList	alExp		=	new ArrayList();
		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	alDtlData	=	new ArrayList();
//		ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
//		ArrayList	alExpRecords=	new ArrayList();
		ArrayList	alItemTrnDtl=	new ArrayList();
		ArrayList	allanguageData	= new ArrayList();
		HashMap			message		= new HashMap();
        StringBuffer sb_batch_data  = new StringBuffer();
		ArrayList alExp_bat_data	= new ArrayList();	
        HashMap  hmDetail_Bill_YN=new HashMap();
		ArrayList temp=new ArrayList(); //CRF-413.8
		boolean isDocNoAutoGenerated= false;
		//Connection conn = null;
		Properties properties=null;
		properties = (Properties)hmData.get("properties");
// added by manish on Thursday, February 05, 2004
		java.util.HashSet hsItem=	new java.util.HashSet();
// added ends.
		String   trn_type		=	"SAL";
	//	String   error_msg		=	"";
		int      sizeOfTrn		=	0;
		int      trnRecords		=	0;
		int      batch_records	=	0;
		int      prev_batch_records	=	0;
		ArrayList doc_no		=	new ArrayList();
		//ArrayList<ArrayList> alTempData		= new ArrayList<ArrayList>();
		ArrayList<Integer> alItemClassCount	= new ArrayList<Integer>();
		ArrayList<String> alItemClass		= new ArrayList<String>();
		String item_class_based	= checkForNull((String)hmData.get("ITEM_CLASS_BASED"),"N");
		if(hmData.containsKey("ItemClassCount")){
			alItemClassCount=	(ArrayList) hmData.get("ItemClassCount");
			alItemClass=	(ArrayList) hmData.get("ItemClass");
		}

		boolean isFinalized	=	false;
		CallableStatement callableStatement = null;
		ArrayList	alDtlData1			=	(ArrayList)	hmData.get("DTL_DATA");
		HashMap	hmHeader1				=	(HashMap)	hmData.get("HDR_DATA");
		allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
		String billable_item_yn="N";
		String ph_function_id="";//Added for MMS-DM-CRF-0126.1 
		String ph_order_id="";//Added for MMS-DM-CRF-0126.1
		String ph_order_line_no="";//Added for MMS-DM-CRF-0126.1
/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
	
		int no_of_decimals=getNoOfDecimals(connection);
		String allow_decimals_yn="N";
		String negItem = "", item_code=""; 

		try {
			//String 	SQL_ST_RECORDS_PER_TRN_SELECT		=	(String)hmSQL.get ("sql_st_records_per_trn_select");
			HashMap records	=	fetchRecord(connection, SQL_ST_RECORDS_PER_TRN_SELECT,trn_type);
			
			int records_per_trn = 0;
			if((String)records.get("RECORDS_PER_TRN")!=null){
				records_per_trn = Integer.parseInt((String)records.get("RECORDS_PER_TRN"));
			}else{
				records_per_trn = alDtlData1.size();
			}

			if(item_class_based.equals("Y")){
				sizeOfTrn = alItemClassCount.size();
			}else{
				if(records_per_trn>alDtlData1.size()){
					sizeOfTrn = 1;
				}else if((alDtlData1.size()%records_per_trn)==0){
					sizeOfTrn = alDtlData1.size()/records_per_trn;
				}else{
					sizeOfTrn = (alDtlData1.size()/records_per_trn)+1;
				}
			}
			if(!(((String)hmHeader1.get("module_id")).equals("ST"))){
				records_per_trn = alDtlData1.size();
			}
			hmCommon			=	(HashMap)	hmData.get("COMMON_DATA");
			hmHeader			=	(HashMap)	hmData.get("HDR_DATA");
			isFinalized			=	((String)	hmHeader.get("finalized_yn")).equals("Y");
			for(int l=0,k=0;l<sizeOfTrn;l++){

			HashMap hmRecord	=	fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG, (String)hmHeader.get("doc_type_code"));
			isDocNoAutoGenerated=	hmRecord.get("DOC_NUM_GEN_FLAG").toString().equals("Y");

			if (isDocNoAutoGenerated){
				synchronized (this)  {
				Connection conn = null;
				try{
						
						conn = getConnection(properties);
						conn.setAutoCommit(false);
						int count =1;
				while(count>0){

					String doc_no_dup = (String)fetchRecord(conn, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT, (String)hmHeader.get("doc_type_code")).get("NEXT_DOC_NO");

					ArrayList param = new ArrayList();
					param.add((String)hmHeader.get("doc_type_code"));
					param.add(doc_no_dup);
					count = Integer.parseInt((String)fetchRecord(conn, "SELECT COUNT(*) COUNT FROM ST_SAL_HDR WHERE DOC_TYPE_CODE= ?  AND DOC_NO = ? ", param).get("COUNT"));
					
					if(count>0){
						ArrayList alParameters	=	new ArrayList();
						alParameters.add(hmCommon.get("login_by_id"));
						alParameters.add(hmCommon.get("login_at_ws_no"));
						alParameters.add(hmCommon.get("login_facility_id"));
						alParameters.add(hmHeader.get("doc_type_code"));
						//count=0;
						try{
							hmArgData.put(DATA,alParameters);
							hmArgSQL.put(UPDATE_SQL,SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE);

							hmResult	=	update(conn, hmArgData, hmArgSQL);
							conn.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
						count =1;
					}else{
/*						Connection conn = null;
						conn = getConnection(properties);
						conn.setAutoCommit(false);*/
						ArrayList alParameters	=	new ArrayList();
						alParameters.add(hmCommon.get("login_by_id"));
						alParameters.add(hmCommon.get("login_at_ws_no"));
						alParameters.add(hmCommon.get("login_facility_id"));
						alParameters.add(hmHeader.get("doc_type_code"));
						hmHeader.put("doc_no", doc_no_dup);
						//count=0;
						try{
							hmArgData.put(DATA,alParameters);
							hmArgSQL.put(UPDATE_SQL,SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE);

							hmResult	=	update(conn, hmArgData, hmArgSQL);
							conn.commit();
						}catch(Exception e){
							e.printStackTrace();
						}
					}
					}
					if(conn!=null) conn.close();
				}
				catch(Exception e){
							e.printStackTrace();
				}finally{
					if(conn!=null) conn.close();
				}
//					}
				}
			}
				//System.out.println("doc fetch...."+fetchRecord(connection, SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT, (String)hmHeader.get("doc_type_code")).get("NEXT_DOC_NO"));
				//System.out.println("..doc_no in stsales....."+hmHeader.get("doc_no")+"..for..."+hmCommon.get("login_at_ws_no"));
				doc_no.add(hmHeader.get("doc_no"));
				alHdrData = new ArrayList();
				alHdrData.add(hmHeader.get("facility_id"));
				alHdrData.add(hmHeader.get("doc_type_code"));
				alHdrData.add(hmHeader.get("doc_no"));
				alHdrData.add(hmHeader.get("doc_date"));
				alHdrData.add(hmHeader.get("doc_ref"));
				alHdrData.add(hmHeader.get("store_code"));
				alHdrData.add(hmHeader.get("authorized_by_id"));
				alHdrData.add(hmHeader.get("cancelled_by_id"));
				alHdrData.add(hmHeader.get("cancelled_remarks"));
				alHdrData.add(hmHeader.get("finalized_yn"));
				alHdrData.add(hmHeader.get("gl_interfaced_yn"));
				alHdrData.add(hmHeader.get("trn_type"));
				alHdrData.add(hmHeader.get("add_qty_sal_yn"));
				alHdrData.add(hmHeader.get("patient_id"));
				alHdrData.add(hmHeader.get("encounter_id"));
				alHdrData.add(hmHeader.get("sal_trn_type"));
				alHdrData.add(hmHeader.get("remarks"));
				if(item_class_based.equals("Y")){
					alHdrData.add(alItemClass.get(l));
				}else{
					alHdrData.add(hmHeader.get("item_class_code"));
				}
				alHdrData.add(hmHeader.get("module_id"));
				
				alHdrData.add(hmCommon.get("login_by_id"));
				alHdrData.add(hmCommon.get("login_at_ws_no"));
				alHdrData.add(hmCommon.get("login_facility_id"));

				alHdrData.add(hmCommon.get("login_by_id"));
				alHdrData.add(hmCommon.get("login_at_ws_no"));
				alHdrData.add(hmCommon.get("login_facility_id"));

				//code added for inserting take_home_yn and billable_trn_yn .. 18/5/2004

				alHdrData.add(checkForNull((String)hmHeader.get("billable_trn_yn"),"N"));
				alHdrData.add(checkForNull((String)hmHeader.get("take_home_yn"),"N"));
				alHdrData.add(checkForNull((String)hmHeader.get("patient_name"),""));
				alHdrData.add(checkForNull((String)hmHeader.get("ref_no"),""));
				alHdrData.add(checkForNull((String)hmHeader.get("sales_priority_type"),"R"));
				alHdrData.add(checkForNull((String)hmHeader.get("NU_Clinic_code"),""));
				alHdrData.add(checkForNull((String)hmCommon.get("practitioner_id")));
				alHdrData.add(checkForNull((String)hmCommon.get("practitioner_name")));

				alHdrData.add(checkForNull((String)hmHeader.get("patient_age")));
				alHdrData.add(checkForNull((String)hmHeader.get("patient_sex")));
				alHdrData.add(checkForNull((String)hmHeader.get("patient_dob")));
				System.out.println("inside stSales.java 241 alHdrData" + alHdrData); 

				hmArgData.put(DATA,alHdrData);
				hmArgSQL.put(INSERT_SQL,SQL_ST_SAL_HDR_INSERT_FOR_SAL);
				hmResult	=	insert(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);

				
	//dtl logic
				alDetail	=	(ArrayList)	hmData.get("DTL_DATA");
				alDtlData	=	(ArrayList)	hmData.get("DTL_DATA");
				HashMap hmDetail	=	null;
				if(item_class_based.equals("Y")){
					trnRecords = k + alItemClassCount.get(l);
				}else{
					if(records_per_trn>alDtlData.size()||!(((String)hmHeader1.get("module_id")).equals("ST"))){
						trnRecords = alDtlData.size();
					}else if((k+records_per_trn)>=alDtlData.size()){
						trnRecords = alDtlData.size();
					}else{
						trnRecords = k+records_per_trn;
					}
				}
				alDtlData	=	new ArrayList();
				//for (int i=0;i<alDetail.size() ;i++ ) {
				System.out.println("Stsales.java,245,trnRecords = >"+trnRecords);
				for (int i=k;i<trnRecords ;i++ ) {
					hmDetail    = new HashMap();
					hmDetail	= (HashMap)alDetail.get(i);
					//Added by suresh.r on 17-12-2014 against EMRInc 3054 phy_inv check beg
					if(((String)hmHeader.get("module_id")).equals("PH")){
						HashMap hmParam	=	new HashMap();
						hmParam.put("store_code",hmHeader.get("store_code"));
						hmParam.put("item_code",hmDetail.get("item_code"));
						HashMap hmRes=chkPhysicalInventoryProcessStarted(hmParam,connection);
						if(((String)hmRes.get("Result")).equals("true")) {
							throw new Exception("Physical inventory process in progress Phy Inventory ID: "+(String)hmRes.get("PHY_INV_ID")+"  -   Item:" + (String)hmRes.get("ITEM_DESC"));
						}
					}
					//Added by suresh.r on 17-12-2014 against end
					hmDetail_Bill_YN =hmDetail;
					ArrayList alDtlRecord	=	new ArrayList();

	// added by manish on Thursday, February 05, 2004 to check whether exp details are passed for this item.
				//Added by Dinesh T 2/9/2011,starts
				PreparedStatement ps = connection.prepareStatement("select short_desc from mm_item_lang_vw where item_code = ? and language_id = 'en'");
				ps.setString(1,(String)hmDetail.get("item_code"));
				ResultSet rs = ps.executeQuery();
				while(rs.next())
				{
					negItem = rs.getString(1);
					//hmResult.put(MESSAGE,"Stock not available for this item");
					System.out.println("StSales.java,261 hmResult = >"+hmResult+" negItem = > "+negItem);
				}
				closeResultSet( rs ) ; //Added for Common-icn-0069
				closeStatement( ps ) ; //Added for Common-icn-0069
				//Added by Dinesh T 2/9/2011,ends
				//Adding start for MMS-DM-CRF-0126.1
				if((((String)hmHeader.get("module_id")).equals("PH")) && hmDetail.containsKey("ph_function_id")){
					ph_order_id      =    (String)hmDetail.get("ph_order_id")==null?"":(String)hmDetail.get("ph_order_id");
					ph_order_line_no         =    (String)hmDetail.get("ph_order_line_no")==null?"":(String)hmDetail.get("ph_order_line_no");
					ph_function_id    =    (String)hmDetail.get("ph_function_id")==null?"":(String)hmDetail.get("ph_function_id");
					System.err.println("ph_order_id@@@==="+ph_order_id+"ph_order_line_no==="+ph_order_line_no+"ph_fucntion_id==="+ph_function_id);
				}//Addign end for MMS-DM-CRF-0126.1
					hsItem.add(hmDetail.get("item_code"));
	// added ends.
					alDtlRecord.add(hmHeader.get("facility_id"));
					alDtlRecord.add(hmHeader.get("doc_type_code"));
					alDtlRecord.add(hmHeader.get("doc_no"));

					alDtlRecord.add(hmDetail.get("doc_srl_no"));
					alDtlRecord.add(hmDetail.get("item_code"));
					alDtlRecord.add(hmDetail.get("sal_category"));
					alDtlRecord.add(hmDetail.get("hcp_issue_factor"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
					}else{
					alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0));
					}
	// added by manish on Tuesday, February 17, 2004
					String cItQty	=	(String)hmDetail.get("item_qty");
					if (Double.parseDouble(cItQty)==0) {
						throw new Exception ("ITEM_QTY_ZERO_AT_DETAIL#"+(i+1));
					}
	// added ends.
					alDtlRecord.add(hmDetail.get("item_sal_value"));
					alDtlRecord.add(hmDetail.get("next_due_date"));
					alDtlRecord.add(hmDetail.get("stock_item_yn"));
					alDtlRecord.add(hmDetail.get("remarks"));
					alDtlRecord.add(hmDetail.get("item_unit_cost"));
					alDtlRecord.add(hmDetail.get("item_cost_value"));
					alDtlRecord.add(hmDetail.get("item_unit_price"));
					alDtlRecord.add(checkForNull(hmDetail.get("gross_charge_amt"),"0"));
					alDtlRecord.add(checkForNull(hmDetail.get("pat_net_amt"),"0"));
					alDtlRecord.add(checkForNull(hmDetail.get("p_overridden_excl_incl_ind")));
					alDtlRecord.add(checkForNull(hmDetail.get("p_overridden_action_reason")));
					alDtlRecord.add(checkForNull(hmDetail.get("take_home_yn"),"N"));
					alDtlRecord.add(hmCommon.get("login_by_id"));
					alDtlRecord.add(hmCommon.get("login_at_ws_no"));
					alDtlRecord.add(hmCommon.get("login_facility_id"));
					alDtlRecord.add(hmCommon.get("login_by_id"));
					alDtlRecord.add(hmCommon.get("login_at_ws_no"));
					alDtlRecord.add(hmCommon.get("login_facility_id"));
					if(allow_decimals_yn.equals("Y") ){
					alDtlRecord.add(setNumber((String)hmDetail.get("sale_req_qty"),no_of_decimals));
					}else{
					alDtlRecord.add(setNumber((String)hmDetail.get("sale_req_qty"),0));
					}
					alDtlRecord.add(checkForNull(hmDetail.get("usage_type")));//18/09/12
					alDtlRecord.add(checkForNull(hmDetail.get("approval_no")));//Added for IN:071972
					
					batch_records	=	batch_records+Integer.parseInt(checkForNull((String)hmDetail.get("batch_records"),"0"));
					System.out.println("inside stSales.java 343 alDtlData" + alDtlData); 
					alDtlData.add(alDtlRecord);
					billable_item_yn=checkForNull((String)fetchRecord(connection, "SELECT NVL(BILLABLE_ITEM_YN,'N') BILLABLE_ITEM_YN FROM MM_ITEM WHERE ITEM_CODE=?", (String)hmDetail.get("item_code")).get("BILLABLE_ITEM_YN"),"N");
					System.out.println("before if block");//added for SKR-SCF-1315
						if(!(checkForNull((String)hmHeader.get("authorized_by_id")).equals(""))&& (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y") && billable_item_yn.equals("Y")){
						//if((checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")){
						alExp_bat_data		=	(ArrayList)	hmData.get("DTL_EXP_DATA");
						System.out.println("alExp_bat_data: "+alExp_bat_data); //added for SKR-SCF-1315
						HashMap hmExpRecord		=	null;
						sb_batch_data = new StringBuffer();
						double sal_item_qty=0;//Added by suresh.r on 05-11-2014 against SKR-SCF-1036
						System.out.println("alExp_bat_data: "+alExp_bat_data);//added for SKR-SCF-1315
						for (int j=0;j<alExp_bat_data.size() ;j++ ) {
						//for (int i=0;i<alExpData.size() ;i++ ) {
						//for (int j=k;i<trnRecords ;j++ ) {
							hmExpRecord		= (HashMap)alExp_bat_data.get(j); 
							System.out.println("hmExpRecord: "+hmExpRecord);   //SKR-SCF-1315
							System.out.println("hmHeader: "+hmHeader); //SKR-SCF-1315
							System.out.println("hmDetail: "+hmDetail);  //SKR-SCF-1315
							if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code")) && ((String)hmDetail.get("doc_srl_no")).equals(hmExpRecord.get("doc_srl_no"))){
								sb_batch_data.append(hmExpRecord.get("trade_id"));
								sb_batch_data.append(";");
								sb_batch_data.append(hmExpRecord.get("batch_id"));
								sb_batch_data.append(";");
								sb_batch_data.append(hmExpRecord.get("expiry_date_or_receipt_date"));
								sb_batch_data.append(";");
								sb_batch_data.append(hmExpRecord.get("bin_location_code"));
								sb_batch_data.append(";");
								allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
								if(allow_decimals_yn.equals("Y") ){
								sb_batch_data.append(setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
								sal_item_qty+=Double.parseDouble(setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));//Added by suresh.r on 05-11-2014 against SKR-SCF-1036
								}else{
								sb_batch_data.append(setNumber((String)hmExpRecord.get("sal_item_qty"),0));
								sal_item_qty+=Double.parseDouble(setNumber((String)hmExpRecord.get("sal_item_qty"),0));//Added by suresh.r on 05-11-2014 against SKR-SCF-1036

								}
								sb_batch_data.append(";");
							}
						}
						System.out.println("calling billing procedure: ");//added for SKR-SCF-1315
						callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");//4 new parameters added for MMS-DM-CRF-0126.1
						if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
						else if(hmDetail.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmDetail.get("FACILITY_STR_FOR_BL"));//added by ganga for Ph - Re issue Transaction Monday, July 23, 2012
						else
							callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
						callableStatement.setString(2, (String)hmHeader.get("patient_id"));
						if((((String)hmHeader.get("module_id")).equals("PH"))){
							callableStatement.setString(3, (String)hmHeader.get("module_id"));
						}else{
							callableStatement.setString(3, "ST");
						}
						callableStatement.setString(4, (String)hmHeader.get("encounter_id"));
						callableStatement.setString(5, ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
						callableStatement.setString(6, (String)hmHeader.get("doc_type_code"));

						callableStatement.setInt(7, Integer.parseInt((String)hmHeader.get("doc_no")) );
						callableStatement.setInt(8, Integer.parseInt(hmDetail.get("doc_srl_no").toString().trim()) );

						callableStatement.setString(9, (String)hmHeader.get("doc_date"));

						callableStatement.setString(10, (String)hmDetail.get("item_code"));

						callableStatement.setString(11, (String)hmHeader.get("store_code"));
						
						if(((String)hmHeader.get("module_id")).equals("PH")){//Added by suresh.r on 05-11-2014 against SKR-SCF-1036 beg
							callableStatement.setDouble(12, sal_item_qty);
						}else{//Added by suresh.r on 05-11-2014 against SKR-SCF-1036 end
							if(hmDetail.containsKey("mm_trn_qty")){
							
								callableStatement.setDouble(12, Double.parseDouble((String)hmDetail.get("mm_trn_qty")) );
							}else{
								callableStatement.setDouble(12, Double.parseDouble((String)hmDetail.get("item_qty")) );
							}
						}

						callableStatement.setString(13,sb_batch_data.toString());

						callableStatement.setString(14,(String)hmCommon.get("login_at_ws_no"));	
						
						callableStatement.setString(15,(String)hmDetail.get("uom_code"));	
						
						//callableStatement.setString(16,"Y");// Overidden excl incl ind this is the defaulted value						
						callableStatement.setString(16,checkForNull((String)hmDetail.get("p_overridden_excl_incl_ind"),""));// Overidden excl incl ind this is the defaulted value						

						//callableStatement.setString(17,"ABC");// this is a defaltuted value for the action reason code						
						callableStatement.setString(17,checkForNull((String)hmDetail.get("p_overridden_action_reason"),""));// this is a defaltuted value for the action reason code						
 
						System.out.println("token_series_code insert: "+(String)hmDetail.get("token_series_code"));//added for SKR-SCF-1315
						System.out.println("token_serial_no insert: "+(String)hmDetail.get("token_serial_no")); //added for SKR-SCF-1315
						callableStatement.setString(18,checkForNull((String)hmDetail.get("token_series_code"),""));	// these are being added for the Dispence Medication  from pH	//modified for SKR-SCF-1315				
						callableStatement.setString(19,checkForNull((String)hmDetail.get("token_serial_no"),""));// these are being added for the Dispence Medication  from pH		//modified for SKR-SCF-1315			

						callableStatement.setString(20,(String)hmHeader.get("store_code"));// these are being added for the Dispence Medication  from pH					

						callableStatement.setString(21,null);

						callableStatement.setString(22,null);

						callableStatement.setString(23,null);

						callableStatement.setString(24,"N");//Internal Adjustment

						callableStatement.setString(25,checkForNull((String)hmDetail.get("take_home_yn"),"N"));//Discharge Medication
						callableStatement.registerOutParameter(28, Types.VARCHAR);
						callableStatement.registerOutParameter(26, Types.VARCHAR);
						callableStatement.registerOutParameter(27, Types.VARCHAR);
						

						//added by gangadharan for ph sale transaction (for SRR20056-SCF-7373)

					 if((((String)hmHeader.get("module_id")).equals("PH"))){
							callableStatement.setString(29,checkForNull((String)hmDetail.get("p_ord_practitioner_id")));
							System.out.println("StSales.java,410 = > "+(String)hmDetail.get("p_ord_practitioner_id"));
						}else{
							callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));
							System.out.println("StSales.java,413 = > "+(String)hmCommon.get("p_ord_practitioner_id"));
						}
						//Addign start for MMS-DM-CRF-0126.1
						 callableStatement.setString(30,null);//Added for MMS-DM-CRF-0126.1
						System.err.println("ph_order_id@@@===="+ph_order_id+"ph_order_line_no==="+ph_order_line_no+"ph_fucntion_id==="+ph_function_id);
					if (((String)hmHeader.get("module_id")).equals("PH") && (ph_function_id.equals("IP_FILL_ALL") || ph_function_id.equals("DIR_DISP"))){//ph_function_id added for MMS-DM-CRF-0126.2
                          callableStatement.setString(31,ph_order_id);
						  callableStatement.setString(32,ph_order_line_no);
						  callableStatement.setString(33,ph_function_id);
					  }else{
						  callableStatement.setString(31,null);
						  callableStatement.setString(32,null);
						  callableStatement.setString(33,null);
					  }
					  //Addign end for MMS-DM-CRF-0126.1
					
						
		//added ended	

					//	callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module
						
						//callableStatement.setString(29,"MAHESH");//Ordering practitioner id for OT module
						callableStatement.execute();
						message.put("error_id" , checkForNull((String)callableStatement.getString(27)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(28)));
						if((checkForNull((String)message.get("error_msg"))) !=""){
						String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 
						throw new Exception(msg +"  -   Item:" + hmDetail.get("item_code"));
						}
					}

					if(isFinalized) {
	//itm info logic
						HashMap hmTemp	=	new HashMap();
						//Added by suresh.r on 19-08-2014 against Inc #50616 beg
						int     noOfDecimalsForCost   =  Integer.parseInt(getNoOfDecimalsCost(connection));
						double base_unit_cost=Double.parseDouble((String)hmDetail.get("item_unit_cost"))/getConvFactTemp(connection, (String)hmDetail.get("item_code"), (String)hmHeader.get("store_code"));
						double base_unit_price=Double.parseDouble((String)hmDetail.get("item_unit_price"))/getConvFactTemp(connection, (String)hmDetail.get("item_code"), (String)hmHeader.get("store_code"));
						/*hmTemp.put("item_unit_cost", hmDetail.get("item_unit_cost"));
						hmTemp.put("item_unit_price", hmDetail.get("item_unit_price"));*/
						hmTemp.put("item_unit_cost", setNumber(""+base_unit_cost, noOfDecimalsForCost));
						hmTemp.put("item_unit_price", setNumber(""+base_unit_price, noOfDecimalsForCost));
						//Added by suresh.r on 19-08-2014 against Inc #50616 end
						hmTemp.put("uom_code", hmDetail.get("uom_code"));
						hmTemp.put("stock_item_yn", hmDetail.get("stock_item_yn"));
						hmItemInfo.put((String)hmDetail.get("item_code"),hmTemp);
						HashMap hmSQL = new HashMap();
						if(((String)hmHeader.get("module_id")).equals("PH"))
							hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT1);
						else
							hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
						hmSQL.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
						hmSQL.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
						hmSQL.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);

						HashMap hmParameters = new HashMap();
						hmParameters.put("item_code",hmDetail.get("item_code"));
						hmParameters.put("store_code",hmHeader.get("store_code"));
						hmParameters.put("trn_type","SAL");
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
						hmParameters.put("trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						if(!hmDetail.containsKey("mm_trn_qty"))
							hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						else
							hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("mm_trn_qty"),no_of_decimals));
						}else{
							hmParameters.put("trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),0));
						if(!hmDetail.containsKey("mm_trn_qty"))
							hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),0));
						else
							hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("mm_trn_qty"),0));
							}

						
					
						hmParameters.put("language_id",(String)allanguageData.get(0));
						hmParameters.put("trn_unit_cost",hmDetail.get("item_unit_cost"));
						hmParameters.put("trn_value","-"+hmDetail.get("item_cost_value"));
						hmParameters.put("from_stk_item_yn",hmDetail.get("stock_item_yn"));

						hmParameters.put("last_issue_date",hmHeader.get("doc_date"));

						hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
						hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
						hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));
						//hmParameters.put("mode",eCommon.Common.CommonRepository.getCommonKeyValue("MODE_INSERT"));
						hmParameters.put("mode","MODE_INSERT");

						System.out.println("StSales.java, 453 = >");

						try
						{
						calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);	
						}
						catch (Exception e)
						{
							System.out.println(e.getMessage());
							//negItem =  (String)hmDetail.get("item_code");
							System.out.println("negItem = > "+negItem);
							
							hmResult.put(MESSAGE,e.getMessage());
							hmResult.put(MSGID,e.getMessage());
							hmResult.put("itemDesc",negItem);
							hmResult.put(RESULT,FALSE);							
							System.out.println("StSales.java, 472 ");	
							
						}
						System.out.println("StSales.java, 475==>hmResult"+hmResult);
						throwExceptionWhenFailed(hmResult);
						System.out.println("StSales.java, 477");
						hmParameters.put("trn_value",hmDetail.get("item_cost_value"));
						hmResult	=	insertOrUpdateItemMoveSummaryForSAL(connection, hmParameters);
						hmParameters=null;
						System.out.println("StSales.java, 487 = > "+hmResult);
						throwExceptionWhenFailed(hmResult);
					}


					}

				hmArgData.put(DATA,alDtlData);
				hmArgSQL.put(BATCH_SQL,SQL_ST_SAL_DTL_INSERT_FOR_SAL);

				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				System.out.println("Stsales.java,491 hmResult = > "+hmResult);
				throwExceptionWhenFailed(hmResult);

				alExp		=	(ArrayList)	hmData.get("DTL_EXP_DATA");
				alExpData	= new ArrayList();
				HashMap hmExpRecord		=	null;
				String barcode_id = "";//CRF-413.8
				if(!(((String)hmHeader1.get("module_id")).equals("ST")))
						batch_records = alExp.size();
				else if(batch_records==0)
						batch_records = alExp.size();
				//for (int i=0;i<alExp.size() ;i++ ) {
				for (int i=prev_batch_records;i<batch_records ;i++ ) {
					hmExpRecord		= (HashMap)alExp.get(i);
					temp = new ArrayList();//CRF-413.8
					barcode_id = "";//CRF-413.8
					ArrayList alExpRecord	= new ArrayList();
					hsItem.remove(hmExpRecord.get("item_code"));
					alExpRecord.add(hmHeader.get("facility_id"));
					alExpRecord.add(hmHeader.get("doc_type_code"));
					alExpRecord.add(hmHeader.get("doc_no"));

					alExpRecord.add(hmExpRecord.get("doc_srl_no"));
					alExpRecord.add(hmExpRecord.get("store_code"));
					alExpRecord.add(hmExpRecord.get("item_code"));
					alExpRecord.add(hmExpRecord.get("batch_id"));
					alExpRecord.add(hmExpRecord.get("bin_location_code"));
					alExpRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
					alExpRecord.add(hmExpRecord.get("trade_id"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					alExpRecord.add(setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
					}else{
					alExpRecord.add(setNumber((String)hmExpRecord.get("sal_item_qty"),0));

					}
					String cItQty	=	(String)hmExpRecord.get("sal_item_qty");
					if (Double.parseDouble(cItQty)==0) {
						throw new Exception ("ITEM_QTY_ZERO_AT_DETAIL_EXP#"+(i+1));
					}
					if(allow_decimals_yn.equals("Y") ){
					alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
					}else{
					alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
					}

					alExpRecord.add(hmCommon.get("login_by_id"));
					alExpRecord.add(hmCommon.get("login_at_ws_no"));
					alExpRecord.add(hmCommon.get("login_facility_id"));
					alExpRecord.add(hmCommon.get("login_by_id"));
					alExpRecord.add(hmCommon.get("login_at_ws_no"));
					alExpRecord.add(hmCommon.get("login_facility_id"));
					alExpRecord.add(checkForNull((String)hmExpRecord.get("batch_srl_no")));
					
					temp.add(hmExpRecord.get("store_code"));//413.8
					temp.add(hmExpRecord.get("item_code"));//413.8
					temp.add(hmExpRecord.get("batch_id"));//413.8
					temp.add(hmExpRecord.get("bin_location_code"));//413.8
					temp.add(hmExpRecord.get("expiry_date_or_receipt_date"));//413.8
					if((((String)hmHeader.get("module_id")).equals("PH"))){ //CRF-413.8
					//System.err.println("barcode_2d_applicable_yn@@sales.java====="+hmHeader.get("barcode_2d_applicable_yn")+"item_2d_barcode=="+(String)hmExpRecord.get("item_2d_barcode"));
					  if(hmHeader!=null && hmHeader.get("barcode_2d_applicable_yn")!=null && (hmHeader.get("barcode_2d_applicable_yn").equals("Y"))){//Added if condition for MMS-DM-CRF-0174.5
						  barcode_id =checkForNull((String)hmExpRecord.get("item_2d_barcode"));
					}else{
						barcode_id = checkForNull((String)((HashMap)fetchRecord(connection,"Select barcode_id from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')",temp)).get("BARCODE_ID"));
					}

					System.err.println("StSales.java====barcode_id===612=>"+barcode_id);
					alExpRecord.add(checkForNull(barcode_id));
					}else{
					
					alExpRecord.add(checkForNull((String)hmExpRecord.get("barcode_id")));
					
					}

					alExpData.add(alExpRecord);

						System.out.println("negItem before ....@ 561.."+negItem);
						negItem = "";
						PreparedStatement ps1 = connection.prepareStatement("select short_desc from mm_item_lang_vw where item_code = ? and language_id = 'en'");
						ps1.setString(1,(String)hmExpRecord.get("item_code"));
						ResultSet rs1 = ps1.executeQuery();
						while(rs1.next())
						{
							negItem = rs1.getString(1);
							//hmResult.put(MESSAGE,"Stock not available for this item");
							System.out.println("StSales.java,570 ... negItem = > "+negItem);
						}
						closeResultSet( rs1 ) ; //Added for Common-icn-0069
						closeStatement( ps1 ) ;  //Added for Common-icn-0069
						
						item_code = (String)hmExpRecord.get("item_code"); //Added above line  against MMS-SCF-0306 for returning item_code

					if (isFinalized) {
						HashMap hmParamaters = new HashMap();
						HashMap hmSQL		 = new HashMap();

						hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
						hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
						hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
						hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
						hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
						hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
						hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);


						hmParamaters.put("item_code",hmExpRecord.get("item_code"));
						hmParamaters.put("store_code",hmExpRecord.get("store_code"));
						hmParamaters.put("trn_type","SAL");
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
						hmParamaters.put("trn_qty","-"+setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
						}else{
						hmParamaters.put("trn_qty","-"+setNumber((String)hmExpRecord.get("sal_item_qty"),0));
						}
						hmParamaters.put("batch_id",hmExpRecord.get("batch_id"));
						hmParamaters.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
						hmParamaters.put("trade_id",hmExpRecord.get("trade_id"));
						hmParamaters.put("from_bin_location_code",hmExpRecord.get("bin_location_code"));
						hmParamaters.put("suspended_batch_allowed_yn","Y");
						hmParamaters.put("release_batch_yn","N");

						hmParamaters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date

						hmParamaters.put("login_by_id",			hmCommon.get("login_by_id"));
						hmParamaters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
						hmParamaters.put("login_facility_id",	hmCommon.get("login_facility_id"));
						hmParamaters.put("modified_date",hmExpRecord.get("modified_date"));
						System.err.println("barcode_id=========>"+barcode_id+"===module_id=>"+(String)hmHeader.get("module_id"));
						if(((String)hmHeader.get("module_id")).equals("PH")){//CRF-413.8
							hmParamaters.put("barcode_id",checkForNull(barcode_id));
						}else{
							hmParamaters.put("barcode_id",checkForNull((String)hmExpRecord.get("barcode_id")));
						}
						


						updateBatchOnLine(connection, hmSQL, hmParamaters);

						System.out.println("StSales.java,611 ");

						throwExceptionWhenFailed(hmResult);
	///
						ArrayList ItemTrnDtlRecord	=	new ArrayList();
						//alItemTrnDtl	=	new ArrayList(); commented by Mahesh 5/6/2008 for proper insertion of records into ST_ITEM_TRN_DTL
						HashMap	hmTempItemInfo		=	(HashMap)hmItemInfo.get((String)hmExpRecord.get("item_code"));
						ItemTrnDtlRecord.add(hmHeader.get("facility_id"));
						ItemTrnDtlRecord.add(hmExpRecord.get("store_code"));
						ItemTrnDtlRecord.add(hmExpRecord.get("item_code"));
						ItemTrnDtlRecord.add(""+(i+1));//trn_srl_no
						ItemTrnDtlRecord.add("SAL");
						ItemTrnDtlRecord.add(hmHeader.get("doc_type_code"));
						ItemTrnDtlRecord.add(hmHeader.get("doc_no"));
						ItemTrnDtlRecord.add(hmExpRecord.get("doc_srl_no"));
						ItemTrnDtlRecord.add(hmHeader.get("doc_date"));
						ItemTrnDtlRecord.add(hmHeader.get("doc_ref"));
						ItemTrnDtlRecord.add(hmExpRecord.get("batch_id"));
						ItemTrnDtlRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));

						if(allow_decimals_yn.equals("Y") ){
						ItemTrnDtlRecord.add("-"+setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));//normal_qty
						}else{
						ItemTrnDtlRecord.add("-"+setNumber((String)hmExpRecord.get("sal_item_qty"),0));//normal_qty
						}
						ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_cost"));
						
						ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_price")); 
						
						
						/*commented to added MRP Price for ST by ganga on Monday, December 19, 2011
						
						
						if(!(((String)hmHeader1.get("module_id")).equals("ST"))){
						ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_price")); 
						}
						else{
						ArrayList item_MRP = new ArrayList();
						item_MRP.add((String)hmCommon.get("login_facility_id"));
						item_MRP.add("I");
						item_MRP.add((String)hmExpRecord.get("item_code"));
						item_MRP.add((String)hmExpRecord.get("trade_id"));
						item_MRP.add((String)hmExpRecord.get("batch_id"));
			
						String item_MRP_Price = getMRPPrice(connection,item_MRP);						ItemTrnDtlRecord.add(checkForNull(item_MRP_Price,"0")); 
						}*/
						
						ItemTrnDtlRecord.add(hmTempItemInfo.get("uom_code"));
						ItemTrnDtlRecord.add(hmTempItemInfo.get("stock_item_yn"));
						ItemTrnDtlRecord.add(hmHeader.get("sal_trn_type"));

						ItemTrnDtlRecord.add(hmExpRecord.get("bin_location_code"));
						ItemTrnDtlRecord.add(hmExpRecord.get("trade_id"));
	 
						ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
						ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
						ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));
						ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
						ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
						ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));

						alItemTrnDtl.add(ItemTrnDtlRecord);
	///
					}
					else{//Batch blocking logic follows:
						HashMap hmParameter	=	new HashMap();
						hmParameter.put("store_code",hmExpRecord.get("store_code"));
						hmParameter.put("item_code",hmExpRecord.get("item_code"));
						hmParameter.put("batch_id",hmExpRecord.get("batch_id"));
						hmParameter.put("bin_location_code",hmExpRecord.get("bin_location_code"));
						hmParameter.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
						if(allow_decimals_yn.equals("Y") ){
						hmParameter.put("trn_qty",setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
						}else{
						hmParameter.put("trn_qty",setNumber((String)hmExpRecord.get("sal_item_qty"),0));
						}
						hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
						hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
						hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));
						
						hmParameter.put("modified_date",hmExpRecord.get("modified_date"));

						hmResult	=	blockReleaseBatch(connection, hmParameter, 'B');
						System.out.println("StSales.java,647 = > "+hmResult);
						throwExceptionWhenFailed(hmResult);
					}

				}
				prev_batch_records = batch_records;
				hmArgData.put(DATA,alExpData);
				hmArgSQL.put(BATCH_SQL,SQL_ST_SAL_DTL_EXP_INSERT_FOR_SAL);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
				if (hsItem.size()>0) {
					throw new Exception ("EXP_RECORDS_MISSING_FOR_ITEM(s):"+hsItem);
				}
				if (isFinalized) {
					hmArgData.put(DATA,alItemTrnDtl);
					hmArgSQL.put(BATCH_SQL,SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL);
					hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
					System.out.println("StSales.java,663 = > "+hmResult);
					throwExceptionWhenFailed(hmResult);
				}
				String locale=(String)allanguageData.get(0);
				if (isDocNoAutoGenerated) {
					String s  = "";
					String s1 = "";
					ArrayList alParameters	=	new ArrayList();
					alParameters.add(hmCommon.get("login_by_id"));
					alParameters.add(hmCommon.get("login_at_ws_no"));
					alParameters.add(hmCommon.get("login_facility_id"));
					alParameters.add(hmHeader.get("doc_type_code"));
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getSTMessage(locale, "DOC_NOS_GEN_FROM", "ST") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getSTMessage(locale, "DOC_NO", "ST") ;
						s1=s+":  "+doc_no.get(0);
					}
					
					/*hmArgData.put(DATA,alParameters);
					hmArgSQL.put(UPDATE_SQL,SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE);

					hmResult	=	update(connection, hmArgData, hmArgSQL);*/
					hmResult.put("flag",s1);
					//hmResult.put("doc_no",alHdrData.get(2));
					hmResult.put("doc_type_code",alHdrData.get(1));

					throwExceptionWhenFailed(hmResult);
				}
				if(item_class_based.equals("Y")){
					k = k + alItemClassCount.get(l);
				}else{
					k=k+records_per_trn;
				}
//			}
			System.out.println("hmData=======772===========>"+hmData);
 String p_charge_amt="" ;
if(!(((String)hmHeader.get("module_id")).equals("PH")) && isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")&&(((hmHeader.get("sal_trn_type").equals("O"))||(hmHeader.get("sal_trn_type").equals("R")) ||(hmHeader.get("sal_trn_type").equals("X"))||(hmHeader.get("sal_trn_type").equals("E"))))){
				p_charge_amt=checkForNull((String)hmDetail_Bill_YN.get("gross_charge_amt"),"99999");
                HashMap message_bill = new HashMap();
				String msg="";
//String trn = ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type");
 			callableStatement	= connection.prepareCall("{ call ST_BL_BILL_GEN (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
      			callableStatement.setString(1, (String)hmCommon.get("login_facility_id")); 
      			callableStatement.setString(2, (String)hmHeader.get("store_code"));
               	callableStatement.setString(3,(String)hmHeader.get("doc_type_code")+"-"+(String)doc_no.get(0) );
     			callableStatement.setString(4, (String)hmCommon.get("login_by_id"));
     			callableStatement.setString(5,(String) hmCommon.get("login_at_ws_no"));
     			callableStatement.setFloat(6, Float.parseFloat(p_charge_amt));
         		callableStatement.setString(7, (String)hmHeader.get("patient_id"));
            	callableStatement.setString(8,  ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
        		callableStatement.setString(9,  (String)hmHeader.get("encounter_id"));
        		callableStatement.setString(16,  "ST");
        		callableStatement.setString(17,  "Y");
				callableStatement.setString(19, (String)hmCommon.get("login_facility_id")); //added for MOHE-CRF-0060
				callableStatement.registerOutParameter(10, Types.VARCHAR);
				callableStatement.registerOutParameter(11, Types.VARCHAR);
				callableStatement.registerOutParameter(12, Types.VARCHAR);
				callableStatement.registerOutParameter(13, Types.VARCHAR);
				callableStatement.registerOutParameter(14, Types.VARCHAR);
				callableStatement.registerOutParameter(15, Types.VARCHAR);
				callableStatement.registerOutParameter(18, Types.VARCHAR);
				callableStatement.execute();
				message_bill.put("l_slmt_reqd_yn" , checkForNull((String)callableStatement.getString(10)));
				message_bill.put("l_bill_doc_type" , checkForNull((String)callableStatement.getString(11)));
				message_bill.put("l_bill_doc_num" , checkForNull((String)callableStatement.getString(12)));
				message_bill.put("v_blng_group_id" , checkForNull((String)callableStatement.getString(13)));
				message_bill.put("error_id" , checkForNull((String)callableStatement.getString(14)));
				message_bill.put("error_msg" , checkForNull((String)callableStatement.getString(15)));
				message_bill.put("p_call_disc_function_yn" , checkForNull((String)callableStatement.getString(18),"N"));
				if((checkForNull((String)message_bill.get("error_msg"))) !="")
				{
					//msg = (String)message_bill.get("error_id") + "  " + (String)message_bill.get("error_msg"); //Commented by suresh.r on 23-01-2014 to display errmsg to UI
					msg ="ERROR_BL: "+ (String)message_bill.get("error_id") + "  " + (String)message_bill.get("error_msg");//Added by suresh.r on 23-01-2014 to display errmsg to UI 
					throw new Exception(msg);
				}		
				hmResult.put("l_bill_doc_num",(String)message_bill.get("l_bill_doc_num"));
				hmResult.put("l_bill_doc_type",(String)message_bill.get("l_bill_doc_type"));
				hmResult.put("l_slmt_reqd_yn",(String)message_bill.get("l_slmt_reqd_yn"));
				hmResult.put("v_blng_group_id",(String)message_bill.get("v_blng_group_id"));
				hmResult.put("p_call_disc_function_yn",(String)message_bill.get("p_call_disc_function_yn"));
		} 
		}
		
		}
		catch (Exception exception) {
				System.out.println("Exception from StSales.java, Catch block "+exception.getMessage());
				System.out.println("hmData Insert@@@@@@@==inStsales==>"+hmData);
				System.err.println("hmData Insert@@@@@@@==inStsales==>"+hmData);
				System.out.println("General Catch block = > "+negItem);
				 exception.printStackTrace();
				 hmResult.put(RESULT,FALSE);
//				hmResult.put(MESSAGE,exception.toString());
				 if(exception.getMessage().toString().contains("ORA-00054"))
				 {
					hmResult.put(MSGID,"RECORD_UPDATED_BY_OTH_USER");
					hmResult.put(MESSAGE,"RECORD_UPDATED_BY_OTH_USER");
				
				 }
				 else if(exception.getMessage().toString().contains("NEGATIVE_STOCK"))
				{
				 	hmResult.put(MSGID,"NEGATIVE_STOCK");
					hmResult.put(MESSAGE,"NEGATIVE_STOCK");
					hmResult.put("itemDesc",negItem);
				 }
				 else if(exception.getMessage().toString().contains("INSUFFICIENT_BATCH_QTY"))
				 {
				 	hmResult.put(MSGID,"INSUFFICIENT_BATCH_QTY");
					hmResult.put(MESSAGE,"INSUFFICIENT_BATCH_QTY");
					hmResult.put("itemDesc",negItem);
					hmResult.put("ITEM_CODE",item_code); // Added  against MMS-SCF-0306 by subbulakshmy
				 }
				  
				 else if ((exception.getMessage().toString().contains("BL9755  Physician Id Cannot Be Null"))  && (((String)hmHeader.get("module_id")).equals("ST")))
				 { 
					hmResult.put(MSGID,"PHYSICIAN_ID_CANNOT_BE_NULL");
					hmResult.put(MESSAGE,"PHYSICIAN_ID_CANNOT_BE_NULL");
					//hmResult.put("itemDesc",negItem);
				 }
				 else
				 {
					hmResult.put(MSGID,exception.getMessage());
					//hmResult.put(MESSAGE,exception.toString());
					hmResult.put(MESSAGE,exception.getMessage());
					if(exception.getMessage().toString().contains("RECORD_UPDATED_BY_OTH_USER")){  //BATCH_RECORD_NOT_FOUND
					System.out.println(" negItem inside RECORD_UPDATED_BY_OTH_USER..."+negItem);
					hmResult.put("itemDesc",negItem);
					}
				 }
				 System.out.println("StSales.java, 773= > "+hmResult);


//			exception.printStackTrace();
		}
		finally{
			clearSQL();
			callableStatement = null;
			
		}
		if(((String)hmHeader1.get("module_id")).equals("PH")){
			String docno = (String)doc_no.get(0);
			hmResult.put("doc_no",docno);
		}
		else
			hmResult.put("doc_no",doc_no);
		System.out.println("StSales.java,790 = > "+hmResult);
		return hmResult;
	}
	public HashMap insertOrUpdateItemMoveSummaryForSAL (Connection connection, HashMap hmParameters) throws Exception {

		HashMap hmColumns	=	new HashMap();
		/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
	
		int no_of_decimals=getNoOfDecimals( connection);
		String allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmParameters.get("item_code"));
		hmColumns.put("doc_date",hmParameters.get("last_issue_date"));
		hmColumns.put("facility_id",hmParameters.get("login_facility_id"));
		hmColumns.put("item_code",hmParameters.get("item_code"));
		hmColumns.put("store_code",hmParameters.get("store_code"));
		hmColumns.put("login_by_id",hmParameters.get("login_by_id"));
		hmColumns.put("login_at_ws_no",hmParameters.get("login_at_ws_no"));
		hmColumns.put("login_facility_id",hmParameters.get("login_facility_id"));
		if(allow_decimals_yn.equals("Y")){
		hmColumns.put("sal_qty",setNumber((String)hmParameters.get("mm_trn_qty"),no_of_decimals));
		hmColumns.put("month_closing_qty",setNumber((String)hmParameters.get("mm_trn_qty"),no_of_decimals));
		}else{
		hmColumns.put("sal_qty",setNumber((String)hmParameters.get("mm_trn_qty"),0));
		hmColumns.put("month_closing_qty",setNumber((String)hmParameters.get("mm_trn_qty"),0));
		}
		hmColumns.put("sal_cost","-"+hmParameters.get	("trn_value"));//trn_unit_cost"));
		hmColumns.put("sal_value","-"+hmParameters.get	("trn_value"));
		hmColumns.put("stock_item_yn",hmParameters.get	("from_stk_item_yn"));
		
		hmColumns.put("month_closing_value","-"+hmParameters.get("trn_value"));

		return insertOrUpdateItemMoveSummary(connection, hmColumns);
	}

	public HashMap insertOrUpdateItemMoveSummary(Connection connection, HashMap hmColumns) throws Exception {
		System.out.println("inside insertorupdate" + hmColumns);

		HashMap	hmArgData				=	new HashMap();
		HashMap	hmArgSQL				=	new HashMap();

		ArrayList alParameters	=	new ArrayList();
		ArrayList alData		=	new ArrayList();
		/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
	
		int no_of_decimals=getNoOfDecimals( connection);
		String allow_decimals_yn="N";
		//String doc_date	= (String)hmColumns.get("doc_date"); //doc_date
		String stSQL;

		//alParameters.add(doc_date);
		//alParameters.add(doc_date);
		HashMap hmResult = fetchRecord(connection,SQL_ST_GET_MONTH_AND_YEAR);

		String move_month	= (String)hmResult.get("MM");
		String move_year	= (String)hmResult.get("YYYY");

		String	facility_id         	=	(String)hmColumns.get("facility_id");
		String	item_code           	=	(String)hmColumns.get("item_code");
		String	store_code          	=	(String)hmColumns.get("store_code");
		String	month_closing_qty   	=	(String)hmColumns.get("month_closing_qty");
		String	month_closing_value 	=	(String)hmColumns.get("month_closing_value");
		/**
		 * @Name - Priya
		 * @Date - 10/06/2010
		 * @Inc# - 
		 * @Desc - To assign month_closing_value as zero if month_closing_qty =0
		 */
		
		if(Double.valueOf(month_closing_qty) == 0){
			month_closing_value = "0";
		}
		String	stock_item_yn		 	=	(String)hmColumns.get("stock_item_yn");

		String	sal_qty             	=	stock_item_yn.equals("Y")?((String)hmColumns.get("sal_qty")):"0";
		String	sal_cost            	=	stock_item_yn.equals("Y")?((String)hmColumns.get("sal_cost")):"0";
		String	sal_value           	=	stock_item_yn.equals("Y")?((String)hmColumns.get("sal_value")):"0";
		String	sal_qty_ns             	=	stock_item_yn.equals("N")?((String)hmColumns.get("sal_qty")):"0";
		String	sal_cost_ns            	=	stock_item_yn.equals("N")?((String)hmColumns.get("sal_cost")):"0";
		String	sal_value_ns           	=	stock_item_yn.equals("N")?((String)hmColumns.get("sal_value")):"0";

		String	login_by_id 			=	(String)hmColumns.get("login_by_id");
		String	login_at_ws_no 			=	(String)hmColumns.get("login_at_ws_no");
		String	login_facility_id 		=	(String)hmColumns.get("login_facility_id");

		alParameters.clear();
		alParameters.add(facility_id);
		alParameters.add(item_code);
		alParameters.add(store_code);
		alParameters.add(move_year);
		alParameters.add(move_month);
		/** @Desc - To assign month_closing_value as zero if month_closing_qty =0 **/
		ArrayList  nafitive_value_to_zero=new ArrayList();
		nafitive_value_to_zero.add(facility_id);      // facility_id
		nafitive_value_to_zero.add(item_code);     // Item code
		nafitive_value_to_zero.add(store_code);    // store_code
		nafitive_value_to_zero.add(move_month);
		nafitive_value_to_zero.add(move_year);
	
		hmResult = fetchRecord(connection,SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT,alParameters);

		if(((String)hmResult.get("TOTAL")).equals("0")) {//no record found
			alData.add(facility_id        );
			alData.add(item_code          );
			alData.add(store_code         );
			alData.add(move_year          );
			alData.add(move_month         );
			allow_decimals_yn=getAllowDecimalsYN( connection,item_code);
			if(allow_decimals_yn.equals("Y") ){
			alData.add(setNumber(sal_qty , no_of_decimals));
			alData.add(sal_cost           );
			alData.add(sal_value          );
			alData.add(setNumber(sal_qty_ns , no_of_decimals) );
			alData.add(sal_cost_ns        );
			alData.add(sal_value_ns       );
			alData.add(setNumber(month_closing_qty , no_of_decimals) );
			}else{
			alData.add(setNumber(sal_qty , 0));
			alData.add(sal_cost           );
			alData.add(sal_value          );
			alData.add(setNumber(sal_qty_ns , 0) );
			alData.add(sal_cost_ns        );
			alData.add(sal_value_ns       );
			alData.add(setNumber(month_closing_qty , 0) );
			}
			alData.add(month_closing_value);

			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );
			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );

			stSQL	=	SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL;

			hmArgData.put(DATA,alData);
			hmArgSQL.put(INSERT_SQL,stSQL);
			hmResult	=	insert(connection, hmArgData, hmArgSQL);
		}
		else {
			allow_decimals_yn=getAllowDecimalsYN( connection,item_code);
			if(allow_decimals_yn.equals("Y") ){
			alData.add(setNumber(sal_qty , no_of_decimals)           );
			alData.add(sal_cost           );
			alData.add(sal_value          );
			alData.add(setNumber(sal_qty_ns , no_of_decimals)        );
			alData.add(sal_cost_ns        );
			alData.add(sal_value_ns       );
			alData.add(setNumber(month_closing_qty , no_of_decimals) );
			}else{
			alData.add(setNumber(sal_qty , 0)           );
			alData.add(sal_cost           );
			alData.add(sal_value          );
			alData.add(setNumber(sal_qty_ns , 0)        );
			alData.add(sal_cost_ns        );
			alData.add(sal_value_ns       );
			alData.add(setNumber(month_closing_qty , 0) );
			}
			alData.add(month_closing_value);

			alData.add(login_by_id 		  );
			alData.add(login_at_ws_no 	  );
			alData.add(login_facility_id  );

			alData.add(facility_id        );
			alData.add(item_code          );
			alData.add(store_code         );
			alData.add(move_year          );
			alData.add(move_month         );

			stSQL = SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL;

			hmArgData.put(DATA,alData);
			hmArgSQL.put(UPDATE_SQL,stSQL);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
		}
		throwExceptionWhenFailed(hmResult);
		stSQL="UPDATE st_item_move_summ SET month_opening_value = (CASE WHEN month_opening_qty = 0 THEN 0 WHEN month_opening_value < 0 THEN 0 WHEN month_opening_value > 0   THEN month_opening_value END ), month_closing_value = (CASE WHEN month_closing_qty = 0 THEN 0 WHEN month_closing_value < 0 THEN 0 WHEN month_closing_value > 0 THEN month_closing_value END ) WHERE facility_id = ? AND item_code = ? AND store_code = ? AND move_month = ? AND move_year = ? ";
		hmArgData.put(DATA,nafitive_value_to_zero);
		hmArgSQL.put(UPDATE_SQL,stSQL);
		hmResult	=	update(connection, hmArgData, hmArgSQL);
		throwExceptionWhenFailed(hmResult);
		return hmResult;
	}

	public HashMap updateSales(Connection connection, HashMap hmData){
		System.out.println("update sales in stsales.java");//added for SKR-SCF-1315 
		System.out.println("update sales in stsales hmdata" + hmData);
		HashMap		hmResult	=	new HashMap();
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		ArrayList	alExp_bat_data		=	new ArrayList();
		HashMap		hmHeader	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();
		StringBuffer sb_batch_data=new StringBuffer();
		ArrayList	alItemTrnDtl=	new ArrayList();
		ArrayList	alDetail	=	new ArrayList();
		ArrayList	alExp		=	new ArrayList();
		ArrayList	alHdrData	=	new ArrayList();
		ArrayList	allanguageData	=	new ArrayList();
//		ArrayList	alDtlData	=	new ArrayList();
//		ArrayList	alDtlRecords=	new ArrayList();
		ArrayList	alExpData	=	new ArrayList();
//		ArrayList	alExpRecords=	new ArrayList();
		HashMap		message		=	new HashMap();
		HashMap		hmItemInfo	=	new HashMap();
        HashMap		hmDetail_Bill_YN=new HashMap();
		ArrayList	temp1=new ArrayList(); //CRF-413.8
		CallableStatement callableStatement = null;
// added by manish on Thursday, February 05, 2004
		java.util.HashSet hsItem=	new java.util.HashSet();
		String billable_item_yn="N";
		String ph_function_id="";//Added for MMS-DM-CRF-0126.1
		String ph_order_id="";//Added for MMS-DM-CRF-0126.1
		String ph_order_line_no="";//Added for MMS-DM-CRF-0126.1
// added ends.
			ArrayList temp=new ArrayList();
			 String sql_multi_user_chk = "Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy') ";


		boolean	isFinalized		=	false;

		try {
			hmCommon			=	(HashMap)	hmData.get("COMMON_DATA");
			hmHeader			=	(HashMap)	hmData.get("HDR_DATA");
			allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
			isFinalized			=	((String)	hmHeader.get("finalized_yn")).equals("Y");
			/**
 * @Name - krishna
 * @Date - 20/01/2010
 * @Inc# - 15496
 * @Desc -  Decimal handling in item based.item_qty ,ret_qty ,mm_trn_qty are accepted by dec_allowed_yn based flag item level. if condition is added.
 */
	
			String allow_decimals_yn="N";
			int no_of_decimals=getNoOfDecimals( connection);
			
			alHdrData.add(hmHeader.get("doc_date"));
			alHdrData.add(hmHeader.get("doc_ref"));
			alHdrData.add(hmHeader.get("store_code"));
			alHdrData.add(hmHeader.get("authorized_by_id"));
			alHdrData.add(hmHeader.get("cancelled_by_id"));
			alHdrData.add(hmHeader.get("cancelled_remarks"));
			alHdrData.add(hmHeader.get("finalized_yn"));
			alHdrData.add(hmHeader.get("gl_interfaced_yn"));
			alHdrData.add(hmHeader.get("trn_type"));
			alHdrData.add(hmHeader.get("add_qty_sal_yn"));
			alHdrData.add(hmHeader.get("patient_id"));
			alHdrData.add(hmHeader.get("encounter_id"));
			alHdrData.add(hmHeader.get("sal_trn_type"));
			alHdrData.add(hmHeader.get("remarks"));
			alHdrData.add(hmHeader.get("item_class_code"));

			alHdrData.add(hmCommon.get("login_by_id"));
			alHdrData.add(hmCommon.get("login_at_ws_no"));
			alHdrData.add(hmCommon.get("login_facility_id"));
			alHdrData.add(checkForNull((String)hmCommon.get("practitioner_id")));
			alHdrData.add(checkForNull((String)hmCommon.get("practitioner_name")));
			
			alHdrData.add(checkForNull((String)hmHeader.get("patient_age")));
			alHdrData.add(checkForNull((String)hmHeader.get("patient_sex")));
			alHdrData.add(checkForNull((String)hmHeader.get("patient_dob")));


			alHdrData.add(hmHeader.get("facility_id"));
			alHdrData.add(hmHeader.get("doc_type_code"));
			alHdrData.add(hmHeader.get("doc_no"));

			hmArgData.put(DATA,alHdrData);
			hmArgSQL.put(UPDATE_SQL,SQL_ST_SAL_HDR_UPDATE_FOR_SAL);
			hmResult	=	update(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
			System.out.println("StSales Modify before -1121--hmResult--->"+hmResult);
//dtl logic
			alDetail			=	(ArrayList)	hmData.get("DTL_DATA");
			HashMap hmDetail		=null;
			HashMap hmTempItem = new HashMap();//Added against IN064407
			System.out.println("alDetail>> stsales>> 1251"+alDetail);//ADDED FOR SKR-SCF-1315  
			System.out.println("1251 alDetail.size() "+alDetail.size() );
			for (int i=0;i<alDetail.size() ;i++ ) {
				hmDetail		=	(HashMap)alDetail.get(i);
				//Added by suresh.r on 17-12-2014 against EMRInc 3054 phy_inv check beg
				if(((String)hmHeader.get("module_id")).equals("PH")){
					HashMap hmParam	=	new HashMap();
					hmParam.put("store_code",hmHeader.get("store_code"));
					hmParam.put("item_code",hmDetail.get("item_code"));
					HashMap hmRes=chkPhysicalInventoryProcessStarted(hmParam,connection);
					if(((String)hmRes.get("Result")).equals("true")) {
						throw new Exception("Physical inventory process in progress Phy Inventory ID: "+(String)hmRes.get("PHY_INV_ID")+"  -   Item:" + (String)hmRes.get("ITEM_DESC"));
					}
				}
				//Added by suresh.r on 17-12-2014 against end
				hmDetail_Bill_YN = hmDetail;
				ArrayList alDtlRecord	=	new ArrayList();
				int iMode	=	Integer.parseInt((String)hmDetail.get("mode"));
				System.out.println("StSales Modify  -1130--iMode--->"+iMode);
// added by manish on Thursday, February 05, 2004 to check whether exp details are passed for this item.
				hsItem.add(hmDetail.get("item_code"));
// added ends.
				switch (iMode){
					case 0:{//delete
// added by manish on Tuesday, February 10, 2004
						hsItem.remove(hmDetail.get("item_code"));
// added ends.
						ArrayList alDeleteRecord	=	new ArrayList();

						alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
						alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
						alDeleteRecord.add(hmHeader.get("doc_no"));	//doc_no
						alDeleteRecord.add(hmDetail.get("doc_srl_no"));//put doc_srl_no at last..
///
						ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL, alDeleteRecord);

						for (int j=0; j<alRecords.size(); j++) {
							HashMap hmRecord	=	(HashMap)alRecords.get(j);
							HashMap hmParameter	=	new HashMap();
							hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
							hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
							hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
							hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
							hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
							allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmRecord.get("ITEM_CODE"));

							if(allow_decimals_yn.equals("Y") ){
							hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),no_of_decimals));
							}else{
							hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),0));
							}
							hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
							hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
							hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));
							//Added By Shaiju to avoid deadlock
							
							temp=new ArrayList();
						
							temp.add((String)hmRecord.get("STORE_CODE")); 
							temp.add((String)hmRecord.get("ITEM_CODE"));	
							temp.add((String)hmRecord.get("BATCH_ID")); 
							temp.add((String)hmRecord.get("BIN_LOCATION_CODE")); 
							temp.add((String)hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));	
							hmParameter.put("modified_date",(String)((HashMap)fetchRecord(connection,sql_multi_user_chk,temp)).get("MODIFIED_DATE"));
							
							// AMS-SCF-0648  start
							int count = Integer.parseInt((String)fetchRecord(connection, "SELECT COUNT(*) COUNT FROM ST_ITEM_BATCH  WHERE STORE_CODE=? AND ITEM_CODE=? AND BATCH_ID=? AND BIN_LOCATION_CODE=? AND EXPIRY_DATE_OR_RECEIPT_DATE=TO_DATE (nvl(?,sysdate),'dd/mm/yyyy')", temp).get("COUNT"));
							if(count>0){
								System.err.println("MODE 0***************BlockRelease***********");
							hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
							throwExceptionWhenFailed(hmResult);
							}//AMS-SCF-0648  end
						}

						hmArgData.put(DATA,alDeleteRecord);
						hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);

						hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_DTL_DELETE_FOR_SAL);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						break;
					}
					case 1:{//insert
						alDtlRecord.add(hmHeader.get("facility_id"));
						alDtlRecord.add(hmHeader.get("doc_type_code"));
						alDtlRecord.add(hmHeader.get("doc_no"));

						alDtlRecord.add(hmDetail.get("doc_srl_no"));
						alDtlRecord.add(hmDetail.get("item_code"));
						alDtlRecord.add(hmDetail.get("sal_category"));
						alDtlRecord.add(hmDetail.get("hcp_issue_factor"));
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));

						if(allow_decimals_yn.equals("Y") ){
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						}else{
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0));
						}
// added by manish on Tuesday, February 17, 2004
						String cItQty	=	(String)hmDetail.get("item_qty");
						if (Double.parseDouble(cItQty)==0) {
							throw new Exception ("ITEM_QTY_ZERO_AT_DETAIL#"+(i+1));
						}
// added ends.
						alDtlRecord.add(hmDetail.get("item_sal_value"));
						alDtlRecord.add(hmDetail.get("next_due_date"));
						alDtlRecord.add(hmDetail.get("stock_item_yn"));
						alDtlRecord.add(hmDetail.get("remarks"));
						alDtlRecord.add(hmDetail.get("item_unit_cost"));
						alDtlRecord.add(hmDetail.get("item_cost_value"));
						alDtlRecord.add(hmDetail.get("item_unit_price"));
						alDtlRecord.add(checkForNull(hmDetail.get("gross_charge_amt"),"0"));
						alDtlRecord.add(checkForNull(hmDetail.get("pat_net_amt"),"0"));
						alDtlRecord.add(checkForNull(hmDetail.get("p_overridden_excl_incl_ind")));
						alDtlRecord.add(checkForNull(hmDetail.get("p_overridden_action_reason")));
						alDtlRecord.add(checkForNull(hmDetail.get("take_home_yn"),"N"));
						alDtlRecord.add(hmCommon.get("login_by_id"));	//added_by_id
						alDtlRecord.add(hmCommon.get("login_at_ws_no"));	//added_at_ws_no
						alDtlRecord.add(hmCommon.get("login_facility_id"));	//added_facility_id

						alDtlRecord.add(hmCommon.get("login_by_id"));	//added_by_id
						alDtlRecord.add(hmCommon.get("login_at_ws_no"));	//added_at_ws_no
						alDtlRecord.add(hmCommon.get("login_facility_id"));	//added_facility_id
						if(allow_decimals_yn.equals("Y") ){					//sale_req_qty
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
						}else{
						alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0)); 
						}
						alDtlRecord.add(checkForNull(hmDetail.get("usage_type")));//18/09/12
						alDtlRecord.add(checkForNull(hmDetail.get("approval_no")));//Added for IN:071972

						hmArgData.put(DATA,alDtlRecord);
						hmArgSQL.put(INSERT_SQL,SQL_ST_SAL_DTL_INSERT_FOR_SAL);
						hmResult	=	insert(connection, hmArgData, hmArgSQL);
//						copyArrayList( alExpRecord, alExpRecords);
						break;
					}
					case 2:{//update
						ArrayList alDeleteRecord	=	new ArrayList();

						alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
						alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
						alDeleteRecord.add(hmHeader.get("doc_no"));	//doc_no
						alDeleteRecord.add(hmDetail.get("doc_srl_no"));//put doc_srl_no at last..
///release batch
						/*ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL, alDeleteRecord);

						for (int j=0; j<alRecords.size(); j++) {
							HashMap hmRecord	=	(HashMap)alRecords.get(j);
							HashMap hmParameter	=	new HashMap();
							hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
							hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
							hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
							hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
							hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));

							allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmRecord.get("ITEM_CODE"));

							if(allow_decimals_yn.equals("Y") ){
							hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),no_of_decimals));
							}else{
							hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),0));

							}
							hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
							hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
							hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

							hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
							throwExceptionWhenFailed(hmResult);
						}
///
						hmArgData.put(DATA,alDeleteRecord);
						hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL);
						hmResult	=	delete(connection, hmArgData, hmArgSQL);
						throwExceptionWhenFailed(hmResult);*/

						alDtlRecord.add(hmDetail.get("item_code"));
						alDtlRecord.add(hmDetail.get("sal_category"));
						alDtlRecord.add(hmDetail.get("hcp_issue_factor"));
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));

							if(allow_decimals_yn.equals("Y") ){
							alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
							}else{
							alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0));
							}
// added by manish on Tuesday, February 17, 2004
						String cItQty	=	(String)hmDetail.get("item_qty");
						if (Double.parseDouble(cItQty)==0) {
							throw new Exception ("ITEM_QTY_ZERO_AT_DETAIL#"+(i+1));
						}
// added ends.

						alDtlRecord.add(hmDetail.get("item_sal_value"));
						alDtlRecord.add(hmDetail.get("next_due_date"));
						alDtlRecord.add(hmDetail.get("stock_item_yn"));
						alDtlRecord.add(hmDetail.get("remarks"));
						alDtlRecord.add(hmDetail.get("item_unit_cost"));
						alDtlRecord.add(hmDetail.get("item_cost_value"));
						alDtlRecord.add(hmDetail.get("item_unit_price"));

						alDtlRecord.add(checkForNull(hmDetail.get("gross_charge_amt"),"0"));
						alDtlRecord.add(checkForNull(hmDetail.get("pat_net_amt"),"0"));
						alDtlRecord.add(checkForNull(hmDetail.get("p_overridden_excl_incl_ind")));
						alDtlRecord.add(checkForNull(hmDetail.get("p_overridden_action_reason")));
						alDtlRecord.add(checkForNull(hmDetail.get("take_home_yn"),"N"));
						alDtlRecord.add(hmCommon.get("login_by_id"));
						alDtlRecord.add(hmCommon.get("login_at_ws_no"));
						alDtlRecord.add(hmCommon.get("login_facility_id"));
						if(isFinalized){
								if(allow_decimals_yn.equals("Y") ){
								alDtlRecord.add(setNumber(checkForNull((String)hmDetail.get("sale_req_qty"),"0"),no_of_decimals));
							}else{
								alDtlRecord.add(setNumber(checkForNull((String)hmDetail.get("sale_req_qty"),"0"),0));
						}
						}else{
								if(allow_decimals_yn.equals("Y") ){
							alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
							}else{
							alDtlRecord.add(setNumber((String)hmDetail.get("item_qty"),0));
							}
						
						}
						alDtlRecord.add(checkForNull((String)hmDetail.get("usage_type"))); //18/09/12
						alDtlRecord.add(checkForNull(hmDetail.get("approval_no")));//Added for IN:071972
						alDtlRecord.add(hmHeader.get("facility_id"));
						alDtlRecord.add(hmHeader.get("doc_type_code"));
						alDtlRecord.add(hmHeader.get("doc_no"));
						alDtlRecord.add(hmDetail.get("doc_srl_no"));

						hmArgData.put(DATA,alDtlRecord);
						hmArgSQL.put(UPDATE_SQL,SQL_ST_SAL_DTL_UPDATE_FOR_SAL);

						hmResult	=	update(connection, hmArgData, hmArgSQL);
						break;
					}
				}
				throwExceptionWhenFailed(hmResult);
				//Adding start for MMS-DM-CRF-0126.1
				if((((String)hmHeader.get("module_id")).equals("PH")) && hmDetail.containsKey("ph_function_id")){
					ph_order_id      =    (String)hmDetail.get("ph_order_id")==null?"":(String)hmDetail.get("ph_order_id");
					ph_order_line_no         =    (String)hmDetail.get("ph_order_line_no")==null?"":(String)hmDetail.get("ph_order_line_no");
					ph_function_id    =    (String)hmDetail.get("ph_function_id")==null?"":(String)hmDetail.get("ph_function_id");
				}//Addign end for MMS-DM-CRF-0126.1
			billable_item_yn=checkForNull((String)fetchRecord(connection, "SELECT NVL(BILLABLE_ITEM_YN,'N') BILLABLE_ITEM_YN FROM MM_ITEM WHERE ITEM_CODE=?", (String)hmDetail.get("item_code")).get("BILLABLE_ITEM_YN"),"N");
			System.out.println("billable_item_yn: "+billable_item_yn);  //ADDED for SKR-SCF-1315
			System.out.println("IMODE BLOCK: ");//added for SKR-SCF-1315 
				if(iMode!=0){
					System.out.println("hmHeader : "+hmHeader);//added for SKR-SCF-1315   
				if(!(checkForNull((String)hmHeader.get("authorized_by_id")).equals("")) && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y") && billable_item_yn.equals("Y")){
					alExp_bat_data		=	(ArrayList)	hmData.get("DTL_EXP_DATA");
					HashMap hmExpRecord		=	null;
					sb_batch_data = new StringBuffer();
					double sal_item_qty=0;//Added by suresh.r on 05-11-2014 against SKR-SCF-1036 
					System.out.println("hmDetail in updateSales: "+hmDetail);//added for SKR-SCF-1315
					System.out.println("hmExpRecord in updateSales: "+hmExpRecord);//added for SKR-SCF-1315
					System.out.println("alExp_bat_data: "+alExp_bat_data);//added for SKR-SCF-1315
					for (int j=0;j<alExp_bat_data.size() ;j++ ) {
						hmExpRecord		= (HashMap)alExp_bat_data.get(j);						
						if(((String)hmDetail.get("item_code")).equals(hmExpRecord.get("item_code")) && ((String)hmDetail.get("doc_srl_no")).equals(hmExpRecord.get("doc_srl_no"))){
							System.out.println("inside if block");  //added for SKR-SCF-1315 
							sb_batch_data.append(hmExpRecord.get("trade_id"));
							sb_batch_data.append(";");
							sb_batch_data.append(hmExpRecord.get("batch_id"));
							sb_batch_data.append(";");
							sb_batch_data.append(hmExpRecord.get("expiry_date_or_receipt_date"));
							sb_batch_data.append(";");
							sb_batch_data.append(hmExpRecord.get("bin_location_code"));
							sb_batch_data.append(";");
							allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
							if(allow_decimals_yn.equals("Y") ){
							sb_batch_data.append(setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
							sal_item_qty+=Double.parseDouble(setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));//Added by suresh.r on 05-11-2014 against SKR-SCF-1036
							}else{
							sb_batch_data.append(setNumber((String)hmExpRecord.get("sal_item_qty"),0));
							sal_item_qty+=Double.parseDouble(setNumber((String)hmExpRecord.get("sal_item_qty"),0));//Added by suresh.r on 05-11-2014 against SKR-SCF-1036
							}
							sb_batch_data.append(";");
						}
					}
						System.out.println("CALLING BILLING PROC : ");//added for SKR-SCF-1315 
						callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");//Added 4 new parameters for MMS-DM-CRF-0126.1
						if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
						else
							callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
						callableStatement.setString(2, (String)hmHeader.get("patient_id"));
						if((((String)hmHeader.get("module_id")).equals("PH"))){
							callableStatement.setString(3, (String)hmHeader.get("module_id"));
						}else{
							callableStatement.setString(3, "ST");
						}
						callableStatement.setString(4, (String)hmHeader.get("encounter_id"));
						callableStatement.setString(5, ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
						callableStatement.setString(6, (String)hmHeader.get("doc_type_code"));
						callableStatement.setInt(7, Integer.parseInt((String)hmHeader.get("doc_no")) );
						callableStatement.setInt(8, Integer.parseInt((String)hmDetail.get("doc_srl_no")) );
						callableStatement.setString(9, (String)hmHeader.get("doc_date"));
						callableStatement.setString(10, (String)hmDetail.get("item_code"));
						callableStatement.setString(11, (String)hmHeader.get("store_code"));
						
						if(((String)hmHeader.get("module_id")).equals("PH")){//Added by suresh.r on 05-11-2014 against SKR-SCF-1036 beg
							callableStatement.setDouble(12, sal_item_qty);
						}else{//Added by suresh.r on 05-11-2014 against SKR-SCF-1036 end
							if(hmDetail.containsKey("mm_trn_qty")){
								callableStatement.setDouble(12, Double.parseDouble((String)hmDetail.get("mm_trn_qty")) );
								}else{
								callableStatement.setDouble(12, Double.parseDouble((String)hmDetail.get("item_qty")) );
							}
						}
					
						callableStatement.setString(13,sb_batch_data.toString());
						callableStatement.setString(14,(String)hmCommon.get("login_at_ws_no"));						
						callableStatement.setString(15,(String)hmDetail.get("uom_code"));						
						//callableStatement.setString(16,"Y");// Overidden excl incl ind this is the defaulted value
						callableStatement.setString(16,checkForNull((String)hmDetail.get("p_overridden_excl_incl_ind"),""));// Overidden excl incl ind this is the defaulted value						
						callableStatement.setString(17,checkForNull((String)hmDetail.get("p_overridden_action_reason"),""));// this is a defaltuted value for the action reason code						
						//callableStatement.setString(17,"ABC");// this is a defaltuted value for the action reason code
						System.out.println("token_series_code update: "+(String)hmDetail.get("token_series_code"));//added for SKR-SCF-1315
						System.out.println("token_serial_no udpate: "+(String)hmDetail.get("token_serial_no")); //added for SKR-SCF-1315
						callableStatement.setString(18,checkForNull((String)hmDetail.get("token_series_code"),""));	// these are being added for the Dispence Medication  from pH	//modified for SKR-SCF-1315				
						callableStatement.setString(19,checkForNull((String)hmDetail.get("token_serial_no"),""));// these are being added for the Dispence Medication  from pH			//modified for SKR-SCF-1315		
						callableStatement.setString(20,(String)hmHeader.get("store_code"));// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(21,null);
						callableStatement.setString(22,null);
						callableStatement.setString(23,null);
						callableStatement.setString(24,"N");//Internal Adjustment
						callableStatement.setString(25,checkForNull((String)hmDetail.get("take_home_yn"),"N"));//Discharge Medication
						callableStatement.registerOutParameter(28, Types.VARCHAR);
						callableStatement.registerOutParameter(26, Types.VARCHAR);
						callableStatement.registerOutParameter(27, Types.VARCHAR);
						

						//added by gangadharan for ph sale transaction ( for SRR20056-SCF-7373)

				 if((((String)hmHeader.get("module_id")).equals("PH"))){
							callableStatement.setString(29,checkForNull((String)hmDetail.get("p_ord_practitioner_id")));
							System.out.println("StSales.java,1414 = > "+(String)hmDetail.get("p_ord_practitioner_id"));
						}else{
							callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));
							System.out.println("StSales.java,1416 = > "+(String)hmCommon.get("p_ord_practitioner_id"));
						}
						//Addign start for MMS-DM-CRF-0126.1
						callableStatement.setString(30,null);
						System.err.println("in UpdateSales method ph_order_id@@@===="+ph_order_id+"ph_order_line_no==="+ph_order_line_no+"ph_fucntion_id==="+ph_function_id);
					if (((String)hmHeader.get("module_id")).equals("PH") && ph_function_id.equals("IP_FILL_ALL")){
                          callableStatement.setString(31,ph_order_id);
						  callableStatement.setString(32,ph_order_line_no);
						  callableStatement.setString(33,ph_function_id);
					  }else{
						  callableStatement.setString(31,null);
						  callableStatement.setString(32,null);
						  callableStatement.setString(33,null);
					  }
					  //Addign end for MMS-DM-CRF-0126.1
						
		//added ended	
					//	callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module
						
						callableStatement.execute();
						message.put("error_id" , checkForNull((String)callableStatement.getString(27)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(28)));
						if((checkForNull((String)message.get("error_msg"))) !=""){
						String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 
						
						throw new Exception(msg +"  -   Item:" + hmDetail.get("item_code"));
						}
			
				}
				}

				if(isFinalized && iMode!=0) {// mode not equals delete

//itm info logic
					HashMap hmTemp	=	new HashMap();
					//Added by suresh.r on 19-08-2014 against Inc #50616 beg
					int     noOfDecimalsForCost   =  Integer.parseInt(getNoOfDecimalsCost(connection));
					double base_unit_cost=Double.parseDouble((String)hmDetail.get("item_unit_cost"))/getConvFactTemp(connection, (String)hmDetail.get("item_code"), (String)hmHeader.get("store_code"));
					double base_unit_price=Double.parseDouble((String)hmDetail.get("item_unit_price"))/getConvFactTemp(connection, (String)hmDetail.get("item_code"), (String)hmHeader.get("store_code"));
					/*hmTemp.put("item_unit_cost", hmDetail.get("item_unit_cost"));
					hmTemp.put("item_unit_price", hmDetail.get("item_unit_price"));*/
					hmTemp.put("item_unit_cost", setNumber(""+base_unit_cost, noOfDecimalsForCost));
					hmTemp.put("item_unit_price", setNumber(""+base_unit_price, noOfDecimalsForCost));
					//Added by suresh.r on 19-08-2014 against Inc #50616 end
					hmTemp.put("uom_code", hmDetail.get("uom_code"));
					hmTemp.put("stock_item_yn", hmDetail.get("stock_item_yn"));
					hmItemInfo.put((String)hmDetail.get("item_code"),hmTemp);
//
					HashMap hmSQL = new HashMap();
					if(((String)hmHeader.get("module_id")).equals("PH"))
						hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT1);
					else
						hmSQL.put("ItemCostValueSelectSQL", SQL_ST_ITEM_VALUE_SELECT);
					hmSQL.put("ItemMasterUpdateSQL", SQL_ST_ITEM_MASTER_UPDATE);
					hmSQL.put("ItemStoreStkPosSelectSQL", SQL_ST_GET_ITEM_STORE_STOCK_POS);
					hmSQL.put("ItemStoreQtyUpdateSQL", SQL_ST_ITEM_STORE_QTY_UPDATE);

					HashMap hmParameters = new HashMap();
					hmParameters.put("item_code",hmDetail.get("item_code"));
					hmParameters.put("store_code",hmHeader.get("store_code"));
					hmParameters.put("trn_type","SAL");
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmDetail.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
					hmParameters.put("trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
					if(!hmDetail.containsKey("mm_trn_qty"))
					hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),no_of_decimals));
					else
					hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("mm_trn_qty"),no_of_decimals));
					}else{
					hmParameters.put("trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),0));
					if(!hmDetail.containsKey("mm_trn_qty"))
					hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("item_qty"),0));
					else
					hmParameters.put("mm_trn_qty","-"+setNumber((String)hmDetail.get("mm_trn_qty"),0));
						}

					hmParameters.put("language_id",(String)allanguageData.get(0));
					hmParameters.put("trn_unit_cost",hmDetail.get("item_unit_cost"));
					hmParameters.put("trn_value","-"+hmDetail.get("item_cost_value"));
					hmParameters.put("from_stk_item_yn",hmDetail.get("stock_item_yn"));

					hmParameters.put("last_issue_date",hmHeader.get("doc_date"));

					hmParameters.put("login_by_id",			hmCommon.get("login_by_id"));
					hmParameters.put("login_at_ws_no",		hmCommon.get("login_at_ws_no"));
					hmParameters.put("login_facility_id",	hmCommon.get("login_facility_id"));

					//hmParameters.put("mode",eCommon.Common.CommonRepository.getCommonKeyValue("MODE_MODIFY"));
					hmParameters.put("mode","MODE_MODIFY");
					//Added against IN064407 starts
					if(((String)hmHeader.get("module_id")).equals("PH")){
						String tempItem = (String)hmDetail.get("item_code");
						double tempqty =0.0;
						tempqty = Double.parseDouble((String)hmParameters.get("trn_qty"));
						System.err.println("tempItem ====1628=="+tempItem+"tempqty==="+tempqty+"hmTempItem==="+(String)hmTempItem.get(tempItem));
						if(hmTempItem.containsKey(tempItem)){
							tempqty = tempqty + Double.parseDouble((String)hmTempItem.get(tempItem));
							hmTempItem.put(tempItem, ""+tempqty);
							hmParameters.put("trn_qty", ""+tempqty);
						}
					}
					//Added against IN064407 ends
				try{
System.err.println("calling calculateAndUpdateOnlineStock from stsales.javahmSQL======"+hmSQL+"hmParameters=="+hmParameters);
					   calculateAndUpdateOnlineStock (connection, hmSQL, hmParameters);


					}catch(Exception exp){
						hmResult.put("flag",""+i );

						  exp.printStackTrace();
						  if(exp.getMessage().toString().contains("ORA-00054"))
						  {
							throw new Exception("RECORD_UPDATED_BY_OTH_USER");
						  }
						  else if(exp.getMessage().toString().contains("ORA"))
						  {
							throw exp;
						  }
						  else
						  {
							throw new Exception("NEGATIVE_STOCK");
						  }
					}

				hmTempItem.put(hmDetail.get("item_code"), hmParameters.get("trn_qty"));//Added against IN064407 
					hmParameters.put("trn_value",hmDetail.get("item_cost_value"));
					hmResult	=	insertOrUpdateItemMoveSummaryForSAL(connection, hmParameters);
					throwExceptionWhenFailed(hmResult);

				}

			}
			hmTempItem.clear();//Added against IN064407 
			alExp	=	(ArrayList)hmData.get("DTL_EXP_DATA");
			String barcode_id = "";//413.8
			for (int i=0;i<alExp.size() ;i++ ) {
				HashMap hmExpRecord		= (HashMap)alExp.get(i);
				ArrayList alExpRecord	= new ArrayList();
					temp1 = new ArrayList();//CRF-413.8
					barcode_id = "";//CRF-413.8
// added by manish on Thursday, February 05, 2004
				hsItem.remove(hmExpRecord.get("item_code"));
// added ends.
				alExpRecord.add(hmHeader.get("facility_id"));
				alExpRecord.add(hmHeader.get("doc_type_code"));
				alExpRecord.add(hmHeader.get("doc_no"));

				alExpRecord.add(hmExpRecord.get("doc_srl_no"));
				alExpRecord.add(hmExpRecord.get("store_code"));
				alExpRecord.add(hmExpRecord.get("item_code"));
				alExpRecord.add(hmExpRecord.get("batch_id"));
				alExpRecord.add(hmExpRecord.get("bin_location_code"));
				alExpRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
				alExpRecord.add(hmExpRecord.get("trade_id"));
				allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
				if(allow_decimals_yn.equals("Y") ){
				alExpRecord.add(setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
				}else{
				alExpRecord.add(setNumber((String)hmExpRecord.get("sal_item_qty"),0));
				}
// added by manish on Tuesday, February 17, 2004
				String cItQty	=	(String)hmExpRecord.get("sal_item_qty");
				if (Double.parseDouble(cItQty)==0) {
					throw new Exception ("ITEM_QTY_ZERO_AT_DETAIL#"+(i+1));
				}
// added ends.
				
				if(allow_decimals_yn.equals("Y") ){
				alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),no_of_decimals));
				}else{
				alExpRecord.add(setNumber((String)hmExpRecord.get("ret_item_qty"),0));
				}
				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));
				alExpRecord.add(hmCommon.get("login_by_id"));
				alExpRecord.add(hmCommon.get("login_at_ws_no"));
				alExpRecord.add(hmCommon.get("login_facility_id"));
				alExpRecord.add(checkForNull((String)hmExpRecord.get("batch_srl_no")));
				temp1.add(hmExpRecord.get("store_code"));//413.8
				temp1.add(hmExpRecord.get("item_code"));//413.8
				temp1.add(hmExpRecord.get("batch_id"));//413.8
				temp1.add(hmExpRecord.get("bin_location_code"));//413.8
				temp1.add(hmExpRecord.get("expiry_date_or_receipt_date"));//413.8
				if((((String)hmHeader.get("module_id")).equals("PH"))){ //CRF-413.8
				System.out.println("1805::hmHeader::"+hmHeader+":::hmExpRecord:::"+hmExpRecord);	//System.err.println("barcode_2d_applicable_yn@@1807sales.java====="+hmHeader.get("barcode_2d_applicable_yn")+"item_2d_barcode=="+(String)hmExpRecord.get("item_2d_barcode"));
	  			      if(hmHeader!=null && hmHeader.get("barcode_2d_applicable_yn")!=null && (hmHeader.get("barcode_2d_applicable_yn").equals("Y"))){//Added if condition for MMS-DM-CRF-0174.5
					      
				               barcode_id =checkForNull((String)hmExpRecord.get("item_2d_barcode"));
					              alExpRecord.add(checkForNull(barcode_id));
					  
				}else{
					    barcode_id = checkForNull((String)((HashMap)fetchRecord(connection,"Select barcode_id from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy')",temp1)).get("BARCODE_ID"));
						  alExpRecord.add(checkForNull(barcode_id));
				}
					
				}else{
					alExpRecord.add(checkForNull((String)hmExpRecord.get("barcode_id")));
				}

				alExpData.add(alExpRecord);
				ArrayList alDeleteRecord	=	new ArrayList();
				alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
				alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
				alDeleteRecord.add(hmHeader.get("doc_no"));	//doc_no
				alDeleteRecord.add(hmExpRecord.get("item_code"));	//doc_no
				alDeleteRecord.add(hmExpRecord.get("doc_srl_no"));//added by Ganga for PH Incident SKR-SCF-0784 IN039427 on Tuesday, May 14, 2013
				
				
				//alDeleteRecord.add(hmExpRecord.get("batch_id"));
				//alDeleteRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
				//alDeleteRecord.add(hmExpRecord.get("bin_location_code"));
				//ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL, alDeleteRecord);
				//ArrayList alRecords	=	fetchRecords(connection, "SELECT STORE_CODE, ITEM_CODE, BATCH_ID, BIN_LOCATION_CODE, TO_CHAR(EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE_OR_RECEIPT_DATE, TRADE_ID, SAL_ITEM_QTY FROM ST_SAL_DTL_EXP WHERE  FACILITY_ID=? AND  DOC_TYPE_CODE =? AND DOC_NO=? AND DOC_SRL_NO LIKE ? AND BATCH_ID = ? AND EXPIRY_DATE_OR_RECEIPT_DATE	= TO_DATE(?,'DD/MM/YYYY') AND BIN_LOCATION_CODE = ?", alDeleteRecord);
				//ArrayList alRecords	=	fetchRecords(connection, "SELECT STORE_CODE, ITEM_CODE, BATCH_ID, BIN_LOCATION_CODE, TO_CHAR(EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE_OR_RECEIPT_DATE, TRADE_ID, SAL_ITEM_QTY FROM ST_SAL_DTL_EXP WHERE  FACILITY_ID=? AND  DOC_TYPE_CODE =? AND DOC_NO=? AND ITEM_CODE= ?", alDeleteRecord);
				ArrayList alRecords	=	fetchRecords(connection, "SELECT STORE_CODE, ITEM_CODE, BATCH_ID, BIN_LOCATION_CODE, TO_CHAR(EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE_OR_RECEIPT_DATE, TRADE_ID, SAL_ITEM_QTY FROM ST_SAL_DTL_EXP WHERE  FACILITY_ID=? AND  DOC_TYPE_CODE =? AND DOC_NO=? AND ITEM_CODE= ? AND DOC_SRL_NO= ?", alDeleteRecord);


				for (int j=0; j<alRecords.size(); j++) {
					HashMap hmRecord	=	(HashMap)alRecords.get(j);
					HashMap hmParameter	=	new HashMap();
					hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
					hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
					hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
					hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
					hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmRecord.get("ITEM_CODE"));
					if(allow_decimals_yn.equals("Y") ){
					hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),no_of_decimals));
					}else{
					hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),0));
					}
					hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
					hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
					hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));
					//Added by Shaiju to avoid deadlock 

					temp=new ArrayList();
					
					temp.add((String)hmRecord.get("STORE_CODE")); //curr_store_code
					temp.add((String)hmRecord.get("ITEM_CODE"));	// ITEM_CODE
					temp.add((String)hmRecord.get("BATCH_ID"));  //BATCH_ID
					temp.add((String)hmRecord.get("BIN_LOCATION_CODE")); //BIN_LOCATION_CODE
					temp.add((String)hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));	//EXPIRY_DATE
					hmParameter.put("modified_date",(String)((HashMap)fetchRecord(connection,sql_multi_user_chk,temp)).get("MODIFIED_DATE"));

  
					// shaiju 
					hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
					throwExceptionWhenFailed(hmResult);
				}
				//int count = Integer.parseInt((String)fetchRecord(connection, "SELECT COUNT(*) COUNT FROM ST_SAL_DTL_EXP  WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?  AND DOC_SRL_NO = ? AND BATCH_ID = ? AND TRUNC(EXPIRY_DATE_OR_RECEIPT_DATE) = TO_DATE(?,'dd/mm/yyyy') AND BIN_LOCATION_CODE = ?", alDeleteRecord).get("COUNT"));
				//int count = Integer.parseInt((String)fetchRecord(connection, "SELECT COUNT(*) COUNT FROM ST_SAL_DTL_EXP  WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?   AND ITEM_CODE= ?", alDeleteRecord).get("COUNT"));
				int count = Integer.parseInt((String)fetchRecord(connection, "SELECT COUNT(*) COUNT FROM ST_SAL_DTL_EXP  WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?   AND ITEM_CODE= ?  AND DOC_SRL_NO= ? ", alDeleteRecord).get("COUNT"));//added DOC_SRL_NO by Ganga for PH Incident SKR-SCF-0784 IN039427 on Tuesday, May 14, 2013
				hmArgData.put(DATA,alDeleteRecord);
				if( count > 0 &&((String)hmHeader.get("module_id")).equals("PH")){//Adding start for MMS-DM-CRF-0174.5
					if(hmHeader!=null && hmHeader.get("barcode_2d_applicable_yn")!=null && (hmHeader.get("barcode_2d_applicable_yn").equals("Y"))){
                       barcode_id = (String)fetchRecord(connection, "SELECT BARCODE_ID FROM ST_SAL_DTL_EXP  WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?   AND ITEM_CODE= ?  AND DOC_SRL_NO= ? ", alDeleteRecord).get("BARCODE_ID");
					   System.err.println("barcode_id@@@===="+barcode_id);
					}
				}//Adding end for MMS-DM-CRF-0174.5
				//hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL);
				//hmArgSQL.put(DELETE_SQL,"DELETE FROM ST_SAL_DTL_EXP WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?  AND DOC_SRL_NO = ? AND BATCH_ID = ? AND TRUNC(EXPIRY_DATE_OR_RECEIPT_DATE) = TO_DATE(?,'dd/mm/yyyy') AND BIN_LOCATION_CODE = ?");
				//hmArgSQL.put(DELETE_SQL,"DELETE FROM ST_SAL_DTL_EXP WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?  AND ITEM_CODE= ? ");
				hmArgSQL.put(DELETE_SQL,"DELETE FROM ST_SAL_DTL_EXP WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?  AND ITEM_CODE= ?  AND DOC_SRL_NO= ?");//added DOC_SRL_NO by Ganga for PH Incident SKR-SCF-0784 IN039427 on Tuesday, May 14, 2013

				
				if(count > 0)
				{
				hmResult	=	delete(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
				}
				if (isFinalized) {
					HashMap hmParamaters = new HashMap();
					HashMap hmSQL		 = new HashMap();

					hmSQL.put("BatchExistsCheckSQL",SQL_ST_CHECK_BATCH_EXISTS);
					hmSQL.put("BatchControlInsertSQL",SQL_ST_BATCH_CONTROL_INSERT);
					hmSQL.put("ItemBatchExistsCheckSQL",SQL_ST_CHECK_ITEM_BATCH_EXISTS);
					hmSQL.put("ItemBatchInsertSQL",SQL_ST_ITEM_BATCH_INSERT);
					hmSQL.put("ItemBatchStcPosSelectSQL",SQL_ST_GET_ITEM_BATCH_STOCK_POS);
					hmSQL.put("ItemBatchDeleteSQL",SQL_ST_ITEM_BATCH_DELETE);
					hmSQL.put("ItemBatchUpdateSQL",SQL_ST_ITEM_BATCH_UPDATE);


					hmParamaters.put("item_code",hmExpRecord.get("item_code"));
					hmParamaters.put("store_code",hmExpRecord.get("store_code"));
					hmParamaters.put("trn_type","SAL");
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
						hmParamaters.put("trn_qty","-"+setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
					}else{
						hmParamaters.put("trn_qty","-"+setNumber((String)hmExpRecord.get("sal_item_qty"),0));
					}
		
					hmParamaters.put("batch_id",hmExpRecord.get("batch_id"));
					hmParamaters.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
					hmParamaters.put("trade_id",hmExpRecord.get("trade_id"));
					hmParamaters.put("from_bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParamaters.put("bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParamaters.put("suspended_batch_allowed_yn","Y");
					hmParamaters.put("release_batch_yn","N");

					hmParamaters.put("last_receipt_date",hmHeader.get("doc_date")); // doc_date

					hmParamaters.put("login_by_id",hmCommon.get("login_by_id"));
					hmParamaters.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
					hmParamaters.put("login_facility_id",hmCommon.get("login_facility_id"));
					hmParamaters.put("modified_date",hmExpRecord.get("modified_date"));
					/*ArrayList alDeleteRecord	=	new ArrayList();
					alDeleteRecord.add(hmHeader.get("facility_id"));	//facility_id
					alDeleteRecord.add(hmHeader.get("doc_type_code"));	//doc_type_code
					alDeleteRecord.add(hmHeader.get("doc_no"));	//doc_no
					alDeleteRecord.add(hmExpRecord.get("doc_srl_no"));//put doc_srl_no at last..
					alDeleteRecord.add(hmExpRecord.get("batch_id"));
					alDeleteRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
					alDeleteRecord.add(hmExpRecord.get("bin_location_code"));
					//ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL, alDeleteRecord);
					ArrayList alRecords	=	fetchRecords(connection, "SELECT STORE_CODE, ITEM_CODE, BATCH_ID, BIN_LOCATION_CODE, TO_CHAR(EXPIRY_DATE_OR_RECEIPT_DATE,'DD/MM/YYYY') EXPIRY_DATE_OR_RECEIPT_DATE, TRADE_ID, SAL_ITEM_QTY FROM ST_SAL_DTL_EXP WHERE  FACILITY_ID=? AND  DOC_TYPE_CODE =? AND DOC_NO=? AND DOC_SRL_NO LIKE ? AND BATCH_ID = ? AND EXPIRY_DATE_OR_RECEIPT_DATE	= TO_DATE(?,'DD/MM/YYYY') AND BIN_LOCATION_CODE = ?", alDeleteRecord);
					for (int j=0; j<alRecords.size(); j++) {
						HashMap hmRecord	=	(HashMap)alRecords.get(j);
						HashMap hmParameter	=	new HashMap();
						hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
						hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
						hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
						hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
						hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmRecord.get("ITEM_CODE"));
						if(allow_decimals_yn.equals("Y") ){
						hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),no_of_decimals));
						}else{
						hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),0));
						}
						hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
						hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
						hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));
						hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
						throwExceptionWhenFailed(hmResult);
					}*/
					 temp=new ArrayList();
					// String sql_multi_user_chk = "Select TO_CHAR (modified_date, 'dd/mm/yyyy hh24:mi:ss') modified_date from ST_ITEM_BATCH WHERE store_code	= ?	 AND item_code = ?	AND	batch_id = ?  AND bin_location_code	= ?	 AND trunc(expiry_date_or_receipt_date)	= TO_DATE(?,'dd/mm/yyyy') ";

					temp.add((String)hmExpRecord.get("store_code")); //curr_store_code
					temp.add((String)hmExpRecord.get("item_code"));	// ITEM_CODE
					temp.add((String)hmExpRecord.get("batch_id"));  //BATCH_ID
					temp.add((String)hmExpRecord.get("bin_location_code")); //BIN_LOCATION_CODE
					temp.add((String)hmExpRecord.get("expiry_date_or_receipt_date"));	//EXPIRY_DATE
					hmParamaters.put("modified_date",(String)((HashMap)fetchRecord(connection,sql_multi_user_chk,temp)).get("MODIFIED_DATE"));
					System.err.println("barcode_id=========>"+barcode_id+"===module_id=>"+(String)hmHeader.get("module_id"));
					if(((String)hmHeader.get("module_id")).equals("PH")){//CRF-413.8
						hmParamaters.put("barcode_id",checkForNull(barcode_id));//Added checkForNull for MMS-DM-CRF-0174.5
					}else{
						hmParamaters.put("barcode_id",checkForNull((String)hmExpRecord.get("barcode_id")));
					}

					updateBatchOnLine(connection, hmSQL, hmParamaters);
					/*hmArgData.put(DATA,alDeleteRecord);
					//hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL);
					hmArgSQL.put(DELETE_SQL,"DELETE FROM ST_SAL_DTL_EXP WHERE FACILITY_ID = ?  AND DOC_TYPE_CODE = ?  AND DOC_NO = ?  AND DOC_SRL_NO = ? AND BATCH_ID = ? AND EXPIRY_DATE_OR_RECEIPT_DATE = TO_DATE(?,'dd/mm/yyyy') AND BIN_LOCATION_CODE = ?");
					hmResult	=	delete(connection, hmArgData, hmArgSQL);
					throwExceptionWhenFailed(hmResult);*/
///
					ArrayList ItemTrnDtlRecord	=	new ArrayList();
					HashMap	hmTempItemInfo		=	(HashMap)hmItemInfo.get((String)hmExpRecord.get("item_code"));
					ItemTrnDtlRecord.add(hmHeader.get("facility_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("store_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("item_code"));
					ItemTrnDtlRecord.add(""+(i+1));//trn_srl_no
					ItemTrnDtlRecord.add("SAL");
					ItemTrnDtlRecord.add(hmHeader.get("doc_type_code"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_no"));
					ItemTrnDtlRecord.add(hmExpRecord.get("doc_srl_no"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_date"));
					ItemTrnDtlRecord.add(hmHeader.get("doc_ref"));
					ItemTrnDtlRecord.add(hmExpRecord.get("batch_id"));
					ItemTrnDtlRecord.add(hmExpRecord.get("expiry_date_or_receipt_date"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
						ItemTrnDtlRecord.add("-"+setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));//normal_qty
					}else{
						ItemTrnDtlRecord.add("-"+setNumber((String)hmExpRecord.get("sal_item_qty"),0));//normal_qty
					}
					ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_cost"));					

					ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_price")); 
					
					/*commented to added MRP Price for ST by ganga on Monday, December 19, 2011
						
						
						if(!(((String)hmHeader.get("module_id")).equals("ST"))){
						ItemTrnDtlRecord.add(hmTempItemInfo.get("item_unit_price")); 
						}
						else{
						ArrayList item_MRP = new ArrayList();
						item_MRP.add((String)hmCommon.get("login_facility_id"));
						item_MRP.add("I");
						item_MRP.add((String)hmExpRecord.get("item_code"));
						item_MRP.add((String)hmExpRecord.get("trade_id"));
						item_MRP.add((String)hmExpRecord.get("batch_id"));
			
						String item_MRP_Price = getMRPPrice(connection,item_MRP);						ItemTrnDtlRecord.add(checkForNull(item_MRP_Price,"0")); 
						}*/



					ItemTrnDtlRecord.add(hmTempItemInfo.get("uom_code"));
					ItemTrnDtlRecord.add(hmTempItemInfo.get("stock_item_yn"));
					ItemTrnDtlRecord.add(hmHeader.get("sal_trn_type"));

					ItemTrnDtlRecord.add(hmExpRecord.get("bin_location_code"));
					ItemTrnDtlRecord.add(hmExpRecord.get("trade_id"));

					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_by_id"));
					ItemTrnDtlRecord.add(hmCommon.get("login_at_ws_no"));
					ItemTrnDtlRecord.add(hmCommon.get("login_facility_id"));

					alItemTrnDtl.add(ItemTrnDtlRecord);
///
				}
				else{//Batch blocking logic follows:
					HashMap hmParameter	=	new HashMap();
					hmParameter.put("store_code",hmExpRecord.get("store_code"));
					hmParameter.put("item_code",hmExpRecord.get("item_code"));
					hmParameter.put("batch_id",hmExpRecord.get("batch_id"));
					hmParameter.put("bin_location_code",hmExpRecord.get("bin_location_code"));
					hmParameter.put("expiry_date_or_receipt_date",hmExpRecord.get("expiry_date_or_receipt_date"));
					allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("item_code"));
					if(allow_decimals_yn.equals("Y") ){
						hmParameter.put("trn_qty",setNumber((String)hmExpRecord.get("sal_item_qty"),no_of_decimals));
					}else{
						hmParameter.put("trn_qty",setNumber((String)hmExpRecord.get("sal_item_qty"),0));
					}
					

					hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
					hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
					hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));
					//Added By Shaiju to avoid deadlock

					temp=new ArrayList();
					
					temp.add((String)hmExpRecord.get("store_code")); //curr_store_code
					temp.add((String)hmExpRecord.get("item_code"));	// ITEM_CODE
					temp.add((String)hmExpRecord.get("batch_id"));  //BATCH_ID
					temp.add((String)hmExpRecord.get("bin_location_code")); //BIN_LOCATION_CODE
					temp.add((String)hmExpRecord.get("expiry_date_or_receipt_date"));	//EXPIRY_DATE
					hmParameter.put("modified_date",(String)((HashMap)fetchRecord(connection,sql_multi_user_chk,temp)).get("MODIFIED_DATE"));
					
					hmResult	=	blockReleaseBatch(connection, hmParameter, 'B');
					throwExceptionWhenFailed(hmResult);

					//Shaiju 
				}
			}

			hmArgData.put(DATA,alExpData);
			hmArgSQL.put(BATCH_SQL,SQL_ST_SAL_DTL_EXP_INSERT_FOR_SAL);
			hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
			if (hsItem.size()>0) {
				throw new Exception ("EXP_RECORDS_MISSING_FOR_ITEM(s):"+hsItem);
			}

			if (isFinalized) {
				hmArgData.put(DATA,alItemTrnDtl);
				hmArgSQL.put(BATCH_SQL,SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL);
				hmResult	=	operateBatch(connection, hmArgData, hmArgSQL);
				throwExceptionWhenFailed(hmResult);
			}
			
			System.out.println("hmData=======1860===========>"+hmData);
			String p_charge_amt="" ;
			if(!(((String)hmHeader.get("module_id")).equals("PH")) && isFinalized && (checkForNull((String)hmHeader.get("billable_trn_yn"),"N")).equals("Y")&&(((hmHeader.get("sal_trn_type").equals("O"))||(hmHeader.get("sal_trn_type").equals("R")) ||(hmHeader.get("sal_trn_type").equals("X"))||(hmHeader.get("sal_trn_type").equals("E")))))
			{
				p_charge_amt=checkForNull((String)hmDetail_Bill_YN.get("gross_charge_amt"),"99999");
				HashMap message_bill = new HashMap();
				String msg="";
				callableStatement	= connection.prepareCall("{ call ST_BL_BILL_GEN (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
				callableStatement.setString(1, (String)hmCommon.get("login_facility_id")); 
				callableStatement.setString(2, (String)hmHeader.get("store_code"));
				callableStatement.setString(3,(String)hmHeader.get("doc_type_code")+"-"+(String)hmHeader.get("doc_no") );
				callableStatement.setString(4, (String)hmCommon.get("login_by_id"));
				callableStatement.setString(5,(String) hmCommon.get("login_at_ws_no"));
				callableStatement.setFloat(6, Float.parseFloat(p_charge_amt));
				callableStatement.setString(7, (String)hmHeader.get("patient_id"));
				callableStatement.setString(8,  ((String)hmHeader.get("sal_trn_type")).equals("X")?"R":(String)hmHeader.get("sal_trn_type"));
				callableStatement.setString(9,  (String)hmHeader.get("encounter_id"));
				callableStatement.setString(16,  "ST");
				callableStatement.setString(17,  "Y");
				callableStatement.registerOutParameter(10, Types.VARCHAR);
				callableStatement.registerOutParameter(11, Types.VARCHAR);
				callableStatement.registerOutParameter(12, Types.VARCHAR);
				callableStatement.registerOutParameter(13, Types.VARCHAR);
				callableStatement.registerOutParameter(14, Types.VARCHAR);
				callableStatement.registerOutParameter(15, Types.VARCHAR);
				callableStatement.registerOutParameter(18, Types.VARCHAR);
				callableStatement.setString(19,  (String)hmCommon.get("login_facility_id")); //added for MOHE-CRF-0060

				callableStatement.execute();
				message_bill.put("l_slmt_reqd_yn" , checkForNull((String)callableStatement.getString(10)));
				message_bill.put("l_bill_doc_type" , checkForNull((String)callableStatement.getString(11)));
				message_bill.put("l_bill_doc_num" , checkForNull((String)callableStatement.getString(12)));
				message_bill.put("v_blng_group_id" , checkForNull((String)callableStatement.getString(13)));
				message_bill.put("error_id" , checkForNull((String)callableStatement.getString(14)));
				message_bill.put("error_msg" , checkForNull((String)callableStatement.getString(15)));
				message_bill.put("p_call_disc_function_yn" , checkForNull((String)callableStatement.getString(18),"N"));
				if((checkForNull((String)message_bill.get("error_msg"))) !="")
				{
					//msg = (String)message_bill.get("error_id") + "  " + (String)message_bill.get("error_msg"); //Commented by suresh.r on 23-01-2014 to display errmsg to UI
					msg = "ERROR_BL: "+(String)message_bill.get("error_id") + "  " + (String)message_bill.get("error_msg"); //Added by suresh.r on 23-01-2014 to display errmsg to UI
					throw new Exception(msg);
				}		
				hmResult.put("l_bill_doc_num",(String)message_bill.get("l_bill_doc_num"));
				hmResult.put("l_bill_doc_type",(String)message_bill.get("l_bill_doc_type"));
				hmResult.put("l_slmt_reqd_yn",(String)message_bill.get("l_slmt_reqd_yn"));
				hmResult.put("v_blng_group_id",(String)message_bill.get("v_blng_group_id"));
				hmResult.put("p_call_disc_function_yn",(String)message_bill.get("p_call_disc_function_yn"));
			} 
		}
		catch (Exception exception) {
			System.out.println("hmData UPDATE@@@@@@@====>"+hmData);
			System.err.println("hmData UPDATE@@@@@@@====>"+hmData);
			 hmResult.put(RESULT,FALSE);
			 if(exception.getMessage().toString().contains("ORA-00054"))
			 {
				hmResult.put(MSGID,"RECORD_UPDATED_BY_OTH_USER");
				hmResult.put(MESSAGE,"RECORD_UPDATED_BY_OTH_USER");
			 }
			 else if(exception.getMessage().toString().contains("NEGATIVE_STOCK"))
			 {
				 	hmResult.put(MSGID,"NEGATIVE_STOCK");
					hmResult.put(MESSAGE,"NEGATIVE_STOCK");
			 }
			else if(exception.getMessage().toString().contains("INSUFFICIENT_BATCH_QTY"))
				 {
				 	hmResult.put(MSGID,"INSUFFICIENT_BATCH_QTY");
					hmResult.put(MESSAGE,"INSUFFICIENT_BATCH_QTY");
				 }
			 else if ((exception.getMessage().toString().contains("BL9755  Physician Id Cannot Be Null"))  && (((String)hmHeader.get("module_id")).equals("ST")))
				 { 
					 System.out.println("modif inside");
					 System.out.println("(((String)hmHeader.get(module_id)).equals(ST))==>" +(String)hmHeader.get("module_id"));
					hmResult.put(MSGID,"PHYSICIAN_ID_CANNOT_BE_NULL");
					hmResult.put(MESSAGE,"PHYSICIAN_ID_CANNOT_BE_NULL");
					//hmResult.put("itemDesc",negItem);
				 }
			 else
			 {
			  hmResult.put(MSGID,exception.toString());
			  hmResult.put(MESSAGE,exception.getMessage());
			 }
			exception.printStackTrace();
		}
		finally{
			callableStatement = null;
			clearSQL();
		}
	return hmResult;
	}

	public HashMap deleteSales(Connection connection, HashMap hmData){
		HashMap		hmResult	=	new HashMap();
		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmCommon	=	new HashMap();
		HashMap		hmPKData	=	new HashMap();
		HashMap		hmBlDetailKey	=	new HashMap();
		HashMap		hmBlDetail	=	new HashMap();
		HashMap		hmParameter	=	new HashMap();
		CallableStatement callableStatement = null;
		HashMap message = new HashMap();
		ArrayList	alData		=	new ArrayList();
		String p_overridden_excl_incl_ind = "";
		String p_overridden_action_reason = "";
		String token_series_code = "";
		String token_serial_no = "";
		String allow_decimals_yn="N";
		int no_of_decimals=getNoOfDecimals( connection);
		String billable_item_yn="N";
		try {


			hmPKData		=	(HashMap)	hmData.get("DATA");
			hmCommon		=	(HashMap)	hmData.get("COMMON_DATA");
			if(hmData.containsKey("BL_DETAIL"))
				hmBlDetailKey	=	(HashMap)	hmData.get("BL_DETAIL");
			
			alData.add(hmPKData.get("facility_id"));	//facility_id
			alData.add(hmPKData.get("doc_type_code"));	//doc_type_code
			alData.add(hmPKData.get("doc_no"));	//doc_no
			alData.add("%");//put doc_srl_no at last..
///
			//ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL, alData);
			ArrayList alRecords	=	fetchRecords(connection, SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL1, alData);
         	alData.remove(3);//remove doc_srl_no

 // int i =100;
			HashMap hmExpRecord		=	null;
			StringBuffer sb_batch_data = new StringBuffer();
			for (int j=0; j<alRecords.size(); j++) {
				sb_batch_data = new StringBuffer();
				HashMap hmRecord	=	(HashMap)alRecords.get(j);
				for (int k=0;k<alRecords.size() ;k++ ) {
					hmExpRecord		= (HashMap)alRecords.get(k);
					//if(((String)hmRecord.get("ITEM_CODE")).equals(hmExpRecord.get("ITEM_CODE"))){
					if(((String)hmRecord.get("ITEM_CODE")).equals(hmExpRecord.get("ITEM_CODE")) && ((String)hmRecord.get("DOC_SRL_NO")).equals(hmExpRecord.get("DOC_SRL_NO"))){
						sb_batch_data.append(hmExpRecord.get("TRADE_ID"));
						sb_batch_data.append(";");
						sb_batch_data.append(hmExpRecord.get("BATCH_ID"));
						sb_batch_data.append(";");
						sb_batch_data.append(hmExpRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
						sb_batch_data.append(";");
						sb_batch_data.append(hmExpRecord.get("BIN_LOCATION_CODE"));
						sb_batch_data.append(";");
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("ITEM_CODE"));
						if(allow_decimals_yn.equals("Y") ){
							sb_batch_data.append(setNumber((String)hmExpRecord.get("SAL_ITEM_QTY"),no_of_decimals));
						}else{
							sb_batch_data.append(setNumber((String)hmExpRecord.get("SAL_ITEM_QTY"),0));
						}
						sb_batch_data.append(";");
					}
				}
				hmParameter	=	new HashMap();
				hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
				hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
				hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
				hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
				hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
				
				allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmRecord.get("ITEM_CODE"));
				if(allow_decimals_yn.equals("Y") ){
					hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),no_of_decimals));
				}else{
					hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),0));
				}
				hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
				hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
				hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

				hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
				throwExceptionWhenFailed(hmResult);
				p_overridden_excl_incl_ind = "";
				p_overridden_action_reason = "";
				token_series_code		   = "";
				token_serial_no			   = "";
				String key = (String)hmRecord.get("DOC_NO")+(String)hmRecord.get("DOC_SRL_NO");
				if(hmBlDetailKey.size()>0){
					hmBlDetail = (HashMap)hmBlDetailKey.get(key);
					if(((String)hmBlDetail.get("disp_item_code")).equals((String)hmRecord.get("ITEM_CODE"))){
						p_overridden_excl_incl_ind = (String)hmBlDetail.get("p_overridden_excl_incl_ind");
						p_overridden_action_reason = (String)hmBlDetail.get("p_overridden_action_reason");
						token_series_code		   = checkForNull((String)hmBlDetail.get("token_series_code"),"");	
						token_serial_no			   = checkForNull((String)hmBlDetail.get("token_serial_no"),"");
					}
				}


  ArrayList alRecords_bill	=	fetchRecords(connection, "SELECT BILLABLE_TRN_YN, PATIENT_ID,ENCOUNTER_ID,SAL_TRN_TYPE,MODULE_ID,to_char(DOC_DATE,'dd/mm/yyyy')  DOC_DATE, AUTHORIZED_BY_ID   FROM st_sal_hdr WHERE  FACILITY_ID=? and  DOC_TYPE_CODE=?   AND DOC_NO =?  ", alData);
		 

//checkForNull((String)alrecord_bill_a.get("AUTHORIZED_BY_ID"))!="")
           HashMap alrecord_bill_a=(HashMap)alRecords_bill.get(0);
		   billable_item_yn=checkForNull((String)fetchRecord(connection, "SELECT NVL(BILLABLE_ITEM_YN,'N') BILLABLE_ITEM_YN FROM MM_ITEM WHERE ITEM_CODE=?", (String)hmRecord.get("ITEM_CODE")).get("BILLABLE_ITEM_YN"),"N");
	
			//if(alrecord_bill_a.get("BILLABLE_TRN_YN").equals("Y"))
			if((((String)alrecord_bill_a.get("MODULE_ID")).equals("PH")&& hmBlDetailKey.size()>0)||((String)alrecord_bill_a.get("MODULE_ID")).equals("ST")){
				if( (alrecord_bill_a.get("BILLABLE_TRN_YN").equals("Y")) && !(checkForNull((String)alrecord_bill_a.get("AUTHORIZED_BY_ID"),"").equals("")) && billable_item_yn.equals("Y") ){
						callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
						if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
						else
						callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
						callableStatement.setString(2, (String)alrecord_bill_a.get("PATIENT_ID"));
						callableStatement.setString(3, (String)alrecord_bill_a.get("MODULE_ID"));
						callableStatement.setString(4, (String)alrecord_bill_a.get("ENCOUNTER_ID"));
						callableStatement.setString(5, (String)alrecord_bill_a.get("SAL_TRN_TYPE"));
						callableStatement.setString(6, (String)hmPKData.get("doc_type_code"));
						callableStatement.setInt(7, Integer.parseInt((String)hmPKData.get("doc_no")) );
						//callableStatement.setInt(8, i++ );
						callableStatement.setInt(8, Integer.parseInt((String)hmRecord.get("DOC_SRL_NO")) );
						callableStatement.setString(9, (String)alrecord_bill_a.get("DOC_DATE"));
						callableStatement.setString(10, (String)hmRecord.get("ITEM_CODE"));
						callableStatement.setString(11, (String)hmRecord.get("STORE_CODE"));
						callableStatement.setDouble(12,(-1)*Double.parseDouble((String)hmRecord.get("SAL_ITEM_QTY")) );
						//callableStatement.setString(13,";");
						callableStatement.setString(13,sb_batch_data.toString());
						callableStatement.setString(14,(String)hmCommon.get("login_at_ws_no"));						
						callableStatement.setString(15,(String)hmRecord.get("GEN_UOM_CODE"));//stock uom code						
						callableStatement.setString(16,p_overridden_excl_incl_ind);// Overidden excl incl ind this is the defaulted value						
						callableStatement.setString(17,p_overridden_action_reason);// this is a defaltuted value for the action reason code						
						callableStatement.setString(18,token_series_code);	// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(19,token_serial_no);// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(20, (String)hmRecord.get("STORE_CODE"));// these are being added for the Dispence Medication  from pH					
						
						/* Added on 06June2007 for Source Referral Document details */ 
						callableStatement.setString(21, (String)hmRecord.get("DOC_TYPE_CODE"));					
						callableStatement.setString(22, (String)hmRecord.get("DOC_NO"));		
						callableStatement.setString(23, (String)hmRecord.get("DOC_SRL_NO"));
						callableStatement.setString(24, "Y");//Internal Adjustment
						/* Till here 06June2007 */

						callableStatement.setString(25,"N");//Discharge Medication
						callableStatement.registerOutParameter(28, Types.VARCHAR);
						callableStatement.registerOutParameter(26, Types.VARCHAR);
						callableStatement.registerOutParameter(27, Types.VARCHAR);
						callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module
						callableStatement.setString(30, "Y");//For delete sales

						callableStatement.execute();
						message.put("error_id" , checkForNull((String)callableStatement.getString(27)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(28)));
						if((checkForNull((String)message.get("error_msg"))) !=""){
						  String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 
						
						throw new Exception(msg +"  -   Item:" + hmRecord.get("ITEM_CODE"));
						}			
				}
			}
		}
			
			
			hmArgData.put(DATA, alData);

			hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_DTL_EXP_DELETE_ALL_FOR_SAL);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_DTL_DELETE_ALL_FOR_SAL);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);

			hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_HDR_DELETE_FOR_SAL);
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			throwExceptionWhenFailed(hmResult);
		}
		catch (Exception exception) {
			System.out.println("hmData Delete@@@@@@@====>"+hmData);
			System.err.println("hmData Delete@@@@@@@====>"+hmData);
			hmResult.put(RESULT,FALSE);
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			exception.printStackTrace();
		}
		finally{
			clearSQL();
		}

		return hmResult;
	}

	public HashMap deleteSalesItemDetailsForPH(Connection connection, HashMap hmData){
		HashMap		hmResult	=	new HashMap();

		HashMap		hmArgData	=	new HashMap();
		HashMap		hmArgSQL	=	new HashMap();
		HashMap		hmData1		=	new HashMap();

		HashMap		hmCommon	=	new HashMap();
//		HashMap		hmPKData	=	new HashMap();
       CallableStatement callableStatement = null;
		ArrayList	alData		=	new ArrayList();
		ArrayList	alItem_code	=	null;
		HashMap     message     = new HashMap();
		String allow_decimals_yn="N";
		int no_of_decimals=getNoOfDecimals( connection);
		String billable_item_yn="N";
		try {
			
			hmCommon		=	(HashMap)	hmData.get("COMMON_DATA");
			hmData1			=	(HashMap)	hmData.get("DATA");

			alData.add(hmCommon.get("facility_id"));	//facility_id
			alData.add(hmCommon.get("doc_type_code"));	//doc_type_code
			alData.add(hmCommon.get("doc_no"));	//doc_no

           String DispBillingStage =(String)hmCommon.get("DispBillingStage");


			alItem_code	=	(ArrayList)hmData.get("ITEM_CODE");
///////////
			ArrayList alCountParameters= new ArrayList();
			alCountParameters.add(hmCommon.get("facility_id"));
			alCountParameters.add(hmCommon.get("doc_type_code"));
			alCountParameters.add(hmCommon.get("doc_no"));
System.err.println("StSales.java-------alCountParameters----------2162---------->"+alCountParameters);
			HashMap hmCount	=	fetchRecord(connection, SQL_ST_SAL_HDR_SELECT_COUNT_FOR_PH,alCountParameters);
System.err.println("StSales.java-------hmCount----------SQL_ST_SAL_HDR_SELECT_COUNT_FOR_PH-----2164----->"+SQL_ST_SAL_HDR_SELECT_COUNT_FOR_PH);
System.err.println("StSales.java-------hmCount----------hmCount-----2165----->"+hmCount);

			if (hmCount.get("TOTAL").toString().equals("0")) {
				hmResult.put(RESULT, FALSE);
				hmResult.put(MESSAGE, "Invalid/Finalized record found");
				hmResult.put(MSGID, "FINALIZED_RECORD");
				throwExceptionWhenFailed(hmResult);
			}

//	changed according to pmd 31/01/05
//String stSQL		=	new String(SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL_FOR_PH);
			String stSQL		    =	SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL_FOR_PH;
			StringBuffer sbSQL		=	new StringBuffer(SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL_FOR_PH);
			StringBuffer sbQuestionMarks	=	new StringBuffer();
			for (int i=0;i<alItem_code.size();i++ ) {
				sbQuestionMarks.append("?,");
				alData.add(alItem_code.get(i));	
			}
			sbQuestionMarks.deleteCharAt(sbQuestionMarks.length()-1);
			sbSQL.replace(stSQL.indexOf('@'),stSQL.indexOf('@')+1,sbQuestionMarks.toString());

//////////
           alData.add(hmData1.get("doc_srl_no"));
		   ArrayList alRecords	    =	fetchRecords(connection, sbSQL.toString(), alData);

           //alData.remove(4);

           ArrayList alRecords_bill	=	fetchRecords(connection, "SELECT BILLABLE_TRN_YN, PATIENT_ID,ENCOUNTER_ID,SAL_TRN_TYPE,MODULE_ID,to_char(DOC_DATE,'dd/mm/yyyy')  DOC_DATE, AUTHORIZED_BY_ID   FROM st_sal_hdr WHERE  FACILITY_ID=? and  DOC_TYPE_CODE=?   AND DOC_NO =?  ", alCountParameters);
         System.err.println("StSales.java------alRecords_bill----------2192------>"+alRecords_bill);
		   HashMap alrecord_bill_a=(HashMap)alRecords_bill.get(0);

			HashMap hmParameter	=	new HashMap();
			// int i =100;
			HashMap hmExpRecord		=	null;
			StringBuffer sb_batch_data = new StringBuffer();
			for (int j=0; j<alRecords.size(); j++) {
				System.err.println("StSales.java------inside for loop---2200--------->"+alRecords);
				sb_batch_data = new StringBuffer();
				HashMap hmRecord	=	(HashMap)alRecords.get(j);
				for (int k=0;k<alRecords.size() ;k++ ) {
					hmExpRecord		= (HashMap)alRecords.get(k);
					//if(((String)hmRecord.get("ITEM_CODE")).equals(hmExpRecord.get("ITEM_CODE"))){
					if(((String)hmRecord.get("ITEM_CODE")).equals(hmExpRecord.get("ITEM_CODE")) && ((String)hmRecord.get("DOC_SRL_NO")).equals(hmExpRecord.get("DOC_SRL_NO"))){
						sb_batch_data.append(hmExpRecord.get("TRADE_ID"));
						sb_batch_data.append(";");
						sb_batch_data.append(hmExpRecord.get("BATCH_ID"));
						sb_batch_data.append(";");
						sb_batch_data.append(hmExpRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
						sb_batch_data.append(";");
						sb_batch_data.append(hmExpRecord.get("BIN_LOCATION_CODE"));
						sb_batch_data.append(";");
						allow_decimals_yn=getAllowDecimalsYN( connection, (String)hmExpRecord.get("ITEM_CODE"));
						if(allow_decimals_yn.equals("Y") ){
							sb_batch_data.append(setNumber((String)hmExpRecord.get("SAL_ITEM_QTY"),no_of_decimals));
						}else{
							sb_batch_data.append(setNumber((String)hmExpRecord.get("SAL_ITEM_QTY"),0));
						}
						sb_batch_data.append(";");
					}
				}
				hmParameter.put("store_code",hmRecord.get("STORE_CODE"));
				hmParameter.put("item_code",hmRecord.get("ITEM_CODE"));
				hmParameter.put("batch_id",hmRecord.get("BATCH_ID"));
				hmParameter.put("bin_location_code",hmRecord.get("BIN_LOCATION_CODE"));
				hmParameter.put("expiry_date_or_receipt_date",hmRecord.get("EXPIRY_DATE_OR_RECEIPT_DATE"));
				
				
				allow_decimals_yn=getAllowDecimalsYN( connection, (String )hmRecord.get("ITEM_CODE"));
				if(allow_decimals_yn.equals("Y") ){
				hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),no_of_decimals));
				}else{
				hmParameter.put("trn_qty",setNumber((String)hmRecord.get("SAL_ITEM_QTY"),0));
				}
				hmParameter.put("login_by_id",hmCommon.get("login_by_id"));
				hmParameter.put("login_at_ws_no",hmCommon.get("login_at_ws_no"));
				hmParameter.put("login_facility_id",hmCommon.get("login_facility_id"));

				hmResult	=	blockReleaseBatch(connection, hmParameter, 'R');//false to release the batch..
				throwExceptionWhenFailed(hmResult);

//code added for Bl interface on 9/1/2007  by naveen
			  billable_item_yn=checkForNull((String)fetchRecord(connection, "SELECT NVL(BILLABLE_ITEM_YN,'N') BILLABLE_ITEM_YN FROM MM_ITEM WHERE ITEM_CODE=?", (String)hmRecord.get("ITEM_CODE")).get("BILLABLE_ITEM_YN"),"N");
	
System.err.println("StSales.java-------hmCount----------hmCount-----2165-----BILLable_TRN_YN>"+alrecord_bill_a.get("BILLABLE_TRN_YN")+"--authorized"+checkForNull((String)alrecord_bill_a.get("AUTHORIZED_BY_ID"),"")+"--DispBillingStage"+DispBillingStage+"--billable_item_yn"+billable_item_yn);
			  
                if( (alrecord_bill_a.get("BILLABLE_TRN_YN").equals("Y"))  && (DispBillingStage.equals("A")) && billable_item_yn.equals("Y")){//&& !(checkForNull((String)alrecord_bill_a.get("AUTHORIZED_BY_ID"),"").equals("")) removed for TTM-SCF-0173

						callableStatement	= connection.prepareCall("{ call ST_SAL_BL_POST_CHARGES_FOLIO (?,?,?,?,?,?,?,?,to_date(?,'dd/MM/yyyy'),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }");
						if(hmCommon.containsKey("FACILITY_STR_FOR_BL"))
							callableStatement.setString(1, (String)hmCommon.get("FACILITY_STR_FOR_BL"));
						else
						callableStatement.setString(1, (String)hmCommon.get("login_facility_id"));
						callableStatement.setString(2, (String)alrecord_bill_a.get("PATIENT_ID"));
						callableStatement.setString(3, (String)alrecord_bill_a.get("MODULE_ID"));
						callableStatement.setString(4, (String)alrecord_bill_a.get("ENCOUNTER_ID"));
						callableStatement.setString(5, (String)alrecord_bill_a.get("SAL_TRN_TYPE"));
						callableStatement.setString(6, (String)hmCommon.get("doc_type_code"));
						callableStatement.setInt(7, Integer.parseInt((String)hmCommon.get("doc_no")) );



						//callableStatement.setInt(8, i++ );
						callableStatement.setInt(8,Integer.parseInt((String)hmRecord.get("DOC_SRL_NO")) );
						callableStatement.setString(9, (String)alrecord_bill_a.get("DOC_DATE"));
						callableStatement.setString(10, (String)hmRecord.get("ITEM_CODE"));
						callableStatement.setString(11, (String)hmRecord.get("STORE_CODE"));
						callableStatement.setDouble(12,(-1)*Double.parseDouble((String)hmRecord.get("SAL_ITEM_QTY")) );
						callableStatement.setString(13,sb_batch_data.toString());
						callableStatement.setString(14,(String)hmCommon.get("login_at_ws_no"));						
						callableStatement.setString(15,(String)hmRecord.get("GEN_UOM_CODE"));//stock uom code						
						callableStatement.setString(16,"");// Overidden excl incl ind this is the defaulted value						
						callableStatement.setString(17,"");// this is a defaltuted value for the action reason code						
						//callableStatement.setString(16,checkForNull((String)hmDetail.get("p_overriden_excl_incl_ind"),""));// Overidden excl incl ind this is the defaulted value						
						//callableStatement.setString(17,checkForNull((String)hmDetail.get("p_overridden_action_reason"),""));// this is a defaltuted value for the action reason code						
						callableStatement.setString(18,"");	// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(19,"");// these are being added for the Dispence Medication  from pH					
						callableStatement.setString(20, (String)hmRecord.get("STORE_CODE"));// these are being added for the Dispence Medication  from pH					
						
						/* Added on 06June2007 for Source Referral Document details */ 
						callableStatement.setString(21, (String)hmCommon.get("doc_type_code"));					
						callableStatement.setString(22, (String)hmCommon.get("doc_no"));		
						callableStatement.setString(23, (String)hmRecord.get("DOC_SRL_NO"));
						callableStatement.setString(24, "Y");//Internal Adjustment
						/* Till here 06June2007 */

						callableStatement.setString(25,"N");//Discharge Medication
						callableStatement.registerOutParameter(28, Types.VARCHAR);
						callableStatement.registerOutParameter(26, Types.VARCHAR);
						callableStatement.registerOutParameter(27, Types.VARCHAR);
						callableStatement.setString(29,checkForNull((String)hmCommon.get("p_ord_practitioner_id")));//Ordering practitioner id for OT module
						callableStatement.setString(30, "Y");//For delete sales
						callableStatement.execute();
						message.put("error_id" , checkForNull((String)callableStatement.getString(27)));
						message.put("error_msg" , checkForNull((String)callableStatement.getString(28)));
						if((checkForNull((String)message.get("error_msg"))) !=""){
						  String msg = (String)message.get("error_id") + "  " + (String)message.get("error_msg"); 
						
						throw new Exception(msg +"  -   Item:" + hmRecord.get("ITEM_CODE"));
						}			


				}
//==================================ends here=====================
			}
//			alData.add((String)hmData1.get("doc_srl_no"));
			hmArgData.put(DATA, alData);


			{
			stSQL		=	new String(SQL_ST_SAL_DTL_EXP_DELETE_FOR_PH);
			sbSQL		=	new StringBuffer(SQL_ST_SAL_DTL_EXP_DELETE_FOR_PH);
			sbSQL.replace(stSQL.indexOf('@'),stSQL.indexOf('@')+1,sbQuestionMarks.toString());
			}
//
			hmArgSQL.put(DELETE_SQL,sbSQL.toString());
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			System.err.println("StSales.java--------hmResult----2317-->"+hmResult);
			throwExceptionWhenFailed(hmResult);

///
			{
			stSQL		=	new String(SQL_ST_SAL_DTL_DELETE_FOR_PH);
			sbSQL		=	new StringBuffer(SQL_ST_SAL_DTL_DELETE_FOR_PH);
			sbSQL.replace(stSQL.indexOf('@'),stSQL.indexOf('@')+1,sbQuestionMarks.toString());
			}
//
			hmArgSQL.put(DELETE_SQL,sbSQL.toString());
			hmResult	=	delete(connection, hmArgData, hmArgSQL);
			System.err.println("StSales.java--------hmResult----2351-->"+hmResult);
			throwExceptionWhenFailed(hmResult);
/////////////

			hmCount	=	fetchRecord(connection, SQL_ST_SAL_DTL_SELECT_COUNT_FOR_PH,alCountParameters);
			System.err.println("StSales.java------2356-----hmCount-------------->"+hmCount);
			if (hmCount.get("TOTAL").toString().equals("0")) {
				
				hmCount	=	fetchRecord(connection, "Select count(1) TOTAL FROM st_sal_hdr WHERE facility_id = ?  AND doc_type_code = ?  AND doc_no = ? AND finalized_yn='N' ",alCountParameters);
				System.err.println("StSales.java------2360-----hmCount-------------->"+hmCount);
				if (!hmCount.get("TOTAL").toString().equals("0")) { //if condition added for  ML-BRU-SCF-1648 [IN:057784]
					hmArgData.put(DATA,alCountParameters);
					hmArgSQL.put(DELETE_SQL,SQL_ST_SAL_HDR_DELETE_FOR_SAL);
					System.err.println("StSales.java------2363-----hmArgData-------------->"+hmArgData);
					System.err.println("StSales.java------2364-----hmArgSQL-------------->"+hmArgSQL);
					hmResult	=	delete(connection, hmArgData , hmArgSQL);
					System.err.println("StSales.java--------hmResult----2366-->"+hmResult);
					throwExceptionWhenFailed(hmResult);
				}
			}
		}
		catch (Exception exception) {

			System.out.println("hmData DeletePH@@@@@@@====>"+hmData);
			System.err.println("StSales.java ---------hmData DeletePH@@@@@@@====>"+hmData);
			hmResult.put(RESULT,FALSE);
			hmResult.put(MSGID,exception.toString());
			hmResult.put(MESSAGE,exception.getMessage());
			exception.printStackTrace();
		}
		finally{
			clearSQL();
		}

		return hmResult;
	}
	public StSales(){
		SQL_ST_SAL_HDR_SELECT_COUNT_FOR_PH		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_HDR_SELECT_COUNT_FOR_PH");
		SQL_ST_SAL_DTL_SELECT_COUNT_FOR_PH		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_SELECT_COUNT_FOR_PH");
		//SQL_ST_SAL_HDR_UPDATE_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_HDR_UPDATE_FOR_SAL");
		SQL_ST_SAL_HDR_UPDATE_FOR_SAL		= "UPDATE st_sal_hdr SET doc_date = TO_DATE(?,'dd/mm/yyyy') , doc_ref = ? , store_code = ? , authorized_by_id = ? , cancelled_by_id = ? , cancelled_remarks = ? , finalized_yn = ? , gl_interfaced_yn = ? , trn_type = ? , add_qty_sal_yn = ? , patient_id = ? , encounter_id = ? , sal_trn_type = ?, remarks=?, item_class_code=?, modified_by_id = ? , modified_date = SYSDATE , modified_at_ws_no = ? , modified_facility_id = ?,PRACTITIONER_ID=?, PRACTITIONER_NAME =? , AGE =? , SEX =? , DATE_OF_BIRTH = TO_DATE(?,'dd/mm/yyyy')  WHERE facility_id = ?  AND doc_type_code = ?  AND doc_no = ? AND finalized_yn='N'";
		//SQL_ST_SAL_HDR_INSERT_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_HDR_INSERT_FOR_SAL");
		SQL_ST_SAL_HDR_INSERT_FOR_SAL		= "INSERT INTO st_sal_hdr ( facility_id, doc_type_code, doc_no, doc_date, doc_ref, store_code, authorized_by_id, cancelled_by_id, cancelled_remarks, finalized_yn, gl_interfaced_yn, trn_type, add_qty_sal_yn, patient_id, encounter_id, sal_trn_type, remarks, item_class_code,module_id, added_by_id, added_date, added_at_ws_no, added_facility_id, modified_by_id, modified_date, modified_at_ws_no, modified_facility_id,billable_trn_yn,take_home_yn,patient_name,ref_no,priority,locn_code,PRACTITIONER_ID,PRACTITIONER_NAME,AGE,SEX,DATE_OF_BIRTH) VALUES  ( ? , ? , ? , TO_DATE(?,'dd/mm/yyyy') , ? , ? , ? , ? , ? , ? , ? , ? , ? , ? , ?, ?, ?, ? , ? , ? , SYSDATE , ? , ? , ? , SYSDATE , ? , ? ,?,?,?,? ,?,?,?,?,?,?,TO_DATE(?,'dd/mm/yyyy'))";
		SQL_ST_SAL_HDR_DELETE_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_HDR_DELETE_FOR_SAL");
		SQL_ST_SAL_DTL_UPDATE_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_UPDATE_FOR_SAL");
		SQL_ST_SAL_DTL_INSERT_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_INSERT_FOR_SAL");
		SQL_ST_SAL_DTL_DELETE_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_DELETE_FOR_SAL");
		SQL_ST_SAL_DTL_DELETE_FOR_PH		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_DELETE_FOR_PH");
		SQL_ST_SAL_DTL_DELETE_ALL_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_DELETE_ALL_FOR_SAL");
		SQL_ST_SAL_DTL_EXP_INSERT_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_INSERT_FOR_SAL");
		SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL");
		SQL_ST_SAL_DTL_EXP_DELETE_FOR_PH	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_DELETE_FOR_PH");
		SQL_ST_SAL_DTL_EXP_DELETE_ALL_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_DELETE_ALL_FOR_SAL");
//		SQL_ST_ITEM_BATCH_FOR_SAL		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_FOR_SAL");
		SQL_ST_GET_MONTH_AND_YEAR		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_MONTH_AND_YEAR");
//		SQL_ST_CHECK_SUMMARY_EXISTS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_SUMMARY_EXISTS");
		SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT");
		SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL");
		SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL");
		SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL");
		SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL1= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL1");




		SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL_FOR_PH	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL_FOR_PH");
		SQL_ST_CHECK_BATCH_EXISTS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_BATCH_EXISTS");
		SQL_ST_BATCH_CONTROL_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_BATCH_CONTROL_INSERT");
		SQL_ST_CHECK_ITEM_BATCH_EXISTS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_CHECK_ITEM_BATCH_EXISTS");
		SQL_ST_ITEM_BATCH_INSERT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_INSERT");
		SQL_ST_GET_ITEM_BATCH_STOCK_POS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_ITEM_BATCH_STOCK_POS");
		SQL_ST_ITEM_BATCH_DELETE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_DELETE");
		SQL_ST_ITEM_BATCH_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_BATCH_UPDATE");
		SQL_ST_ITEM_VALUE_SELECT		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_VALUE_SELECT");
		SQL_ST_ITEM_VALUE_SELECT1		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_VALUE_SELECT1");
		SQL_ST_ITEM_MASTER_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_MASTER_UPDATE");
		SQL_ST_GET_ITEM_STORE_STOCK_POS		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_GET_ITEM_STORE_STOCK_POS");
		SQL_ST_ITEM_STORE_QTY_UPDATE		= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_STORE_QTY_UPDATE");
		SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL");
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT	= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT");
		SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE	= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE");
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG	= eST.Common.StEJBRepository.getStKeyValue("SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG");
		SQL_ST_RECORDS_PER_TRN_SELECT	= eST.Common.StEJBRepository.getStKeyValue("SQL_ST_RECORDS_PER_TRN_SELECT");
	}
// added by manish to clear the SQL string after function call

	private void clearSQL(){

		SQL_ST_SAL_HDR_SELECT_COUNT_FOR_PH=null;         
		SQL_ST_SAL_DTL_SELECT_COUNT_FOR_PH=null;         
		SQL_ST_SAL_HDR_UPDATE_FOR_SAL=null;         
		SQL_ST_SAL_HDR_INSERT_FOR_SAL=null;         
		SQL_ST_SAL_HDR_DELETE_FOR_SAL=null;         
		SQL_ST_SAL_DTL_UPDATE_FOR_SAL=null;         
		SQL_ST_SAL_DTL_INSERT_FOR_SAL=null;         
		SQL_ST_SAL_DTL_DELETE_FOR_SAL=null;         
		SQL_ST_SAL_DTL_DELETE_FOR_PH=null;         
		SQL_ST_SAL_DTL_DELETE_ALL_FOR_SAL=null;     
		SQL_ST_SAL_DTL_EXP_INSERT_FOR_SAL=null;     
		SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL=null;     
		SQL_ST_SAL_DTL_EXP_DELETE_FOR_PH=null;     
		SQL_ST_SAL_DTL_EXP_DELETE_ALL_FOR_SAL=null; 
//		SQL_ST_ITEM_BATCH_FOR_SAL=null;             

		SQL_ST_GET_MONTH_AND_YEAR=null;             
//		SQL_ST_CHECK_SUMMARY_EXISTS=null;           
		SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT=null;    
		SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL=null;  
		SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL=null; 											   
		SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL=null;
		SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL1=null;
		SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL_FOR_PH=null;
		SQL_ST_CHECK_BATCH_EXISTS=null;             
		SQL_ST_BATCH_CONTROL_INSERT=null;           
		SQL_ST_CHECK_ITEM_BATCH_EXISTS=null;        
		SQL_ST_ITEM_BATCH_INSERT=null;              
		SQL_ST_GET_ITEM_BATCH_STOCK_POS=null;       
		SQL_ST_ITEM_BATCH_DELETE=null;              
		SQL_ST_ITEM_BATCH_UPDATE=null;              
		SQL_ST_ITEM_VALUE_SELECT=null;              
		SQL_ST_ITEM_VALUE_SELECT1=null;              
		SQL_ST_ITEM_MASTER_UPDATE=null;             
		SQL_ST_GET_ITEM_STORE_STOCK_POS=null;       
		SQL_ST_ITEM_STORE_QTY_UPDATE=null;          
		SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL=null;    
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT=null;     
		SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE=null;     
		SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG=null;
		SQL_ST_RECORDS_PER_TRN_SELECT=null;
	}

	String SQL_ST_SAL_HDR_SELECT_COUNT_FOR_PH;
	String SQL_ST_SAL_DTL_SELECT_COUNT_FOR_PH;
	String SQL_ST_SAL_HDR_UPDATE_FOR_SAL;
	String SQL_ST_SAL_HDR_INSERT_FOR_SAL;
	String SQL_ST_SAL_HDR_DELETE_FOR_SAL;
	String SQL_ST_SAL_DTL_UPDATE_FOR_SAL;
	String SQL_ST_SAL_DTL_INSERT_FOR_SAL;
	String SQL_ST_SAL_DTL_DELETE_FOR_SAL;
	String SQL_ST_SAL_DTL_DELETE_FOR_PH;
	String SQL_ST_SAL_DTL_DELETE_ALL_FOR_SAL;
	String SQL_ST_SAL_DTL_EXP_INSERT_FOR_SAL;
	String SQL_ST_SAL_DTL_EXP_DELETE_FOR_PH;
	String SQL_ST_SAL_DTL_EXP_DELETE_FOR_SAL;
	String SQL_ST_SAL_DTL_EXP_DELETE_ALL_FOR_SAL;
//	String SQL_ST_ITEM_BATCH_FOR_SAL;

//for item movement summ
	String SQL_ST_GET_MONTH_AND_YEAR;
//	String SQL_ST_CHECK_SUMMARY_EXISTS;
	String SQL_ST_ITEM_MOVE_SUMM_SELECT_COUNT;
	String SQL_ST_ITEM_MOVE_SUMM_INSERT_FOR_SAL;
	String SQL_ST_ITEM_MOVE_SUMM_UPDATE_FOR_SAL;

//batchRelease
	String SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL;
	String SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL1;

	String SQL_ST_SAL_DTL_EXP_SELECT_FOR_BLOCK_REL_FOR_PH;
//updateonline
	String SQL_ST_CHECK_BATCH_EXISTS;
	String SQL_ST_BATCH_CONTROL_INSERT;
	String SQL_ST_CHECK_ITEM_BATCH_EXISTS;
	String SQL_ST_ITEM_BATCH_INSERT;
	String SQL_ST_GET_ITEM_BATCH_STOCK_POS;
	String SQL_ST_ITEM_BATCH_DELETE;
	String SQL_ST_ITEM_BATCH_UPDATE;
	String SQL_ST_ITEM_VALUE_SELECT;
	String SQL_ST_ITEM_VALUE_SELECT1;
	String SQL_ST_ITEM_MASTER_UPDATE;
	String SQL_ST_GET_ITEM_STORE_STOCK_POS;
	String SQL_ST_ITEM_STORE_QTY_UPDATE;
	String SQL_ST_ITEM_TRN_DTL_INSERT_FOR_SAL;
	String SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT;
	String SQL_SY_ACC_ENTITY_DOC_TYPE_UPDATE;
    String SQL_SY_ACC_ENTITY_DOC_TYPE_SELECT_FLAG;
	String SQL_ST_RECORDS_PER_TRN_SELECT;
	
	//Added by suresh.r on 17-12-2014 against EMRInc 3054 phy_inv check beg
	public HashMap chkPhysicalInventoryProcessStarted(HashMap hmParameter, Connection connection){
		String store_code		=(String)hmParameter.get("store_code");
		String item_code	=(String)hmParameter.get("item_code");
		HashMap hmResult	= new HashMap();
		ArrayList alParameters=	new ArrayList();
		String stSQL="";		
		try{
			stSQL=	"SELECT COUNT(*) TOTAL FROM st_item_store WHERE store_code =? AND item_code =? AND phy_inv_id IS NOT NULL";
			alParameters.add(store_code);
			alParameters.add(item_code);
			HashMap hmRecord	= new HashMap();
			hmRecord	=	fetchRecord(connection,stSQL,alParameters);
			if(((String)hmRecord.get("TOTAL")).equals("0")){
				hmResult.put("Result", "false");
			}else{
				hmResult.put("Result", "true");
				stSQL=	"SELECT a.PHY_INV_ID PHY_INV_ID,b.SHORT_DESC ITEM_DESC FROM st_item_store a,mm_item_lang_vw b  WHERE a.store_code =? AND a.item_code =? AND b.item_code =a.item_code AND b.language_id = 'en' AND a.phy_inv_id IS NOT NULL";
				hmRecord	=	fetchRecord(connection,stSQL,alParameters);
				hmResult.put("PHY_INV_ID",(String)hmRecord.get("PHY_INV_ID"));
				hmResult.put("ITEM_DESC",(String)hmRecord.get("ITEM_DESC"));
			}
		}
		catch (Exception exception) {
			exception.printStackTrace();
		}
		return hmResult;
	}
	//Added by suresh.r on 17-12-2014 against end
	
}

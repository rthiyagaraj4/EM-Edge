/*******************************************************************************
 * Copyright 1999-2015, Computer Sciences Corporation. All rights reserved.
 *  
 * Warning: This computer program is protected by copyright law and international treaties.
 * Unauthorized reproduction or distribution of this program, or any portion of it, 
 * may result in severe civil and criminal penalties, and will be prosecuted to 
 * the maximum extent possible under the law.
 ******************************************************************************/
package ePO.PORequisition;
import javax.ejb.SessionContext;
import javax.ejb.EJBException;
import eCommon.Common.*;
import ePO.Common.PoEJBSessionAdapter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Properties;
import java.util.HashMap;

/**
*
* @ejb.bean
*	name="PORequisitionManager"
*	type="Stateless"
*	transaction-type="Bean"
*	view-type="both"
*	jndi-name="PORequisition"
*	local-jndi-name="PORequisition"
*	impl-class-name="ePO.PORequisition.PORequisitionManager"
*	
*
* @ejb.interface
*	extends="javax.ejb.EJBObject"
*	local-extends="javax.ejb.EJBLocalObject" 
*	local-class="ePO.PORequisition.PORequisitionLocal"
*	remote-class="ePO.PORequisition.PORequisitionRemote"
*	generate= "local,remote"
*
* @ejb.home
*	extends="javax.ejb.EJBHome" 
*	local-extends="javax.ejb.EJBLocalHome"
*	local-class="ePO.PORequisition.PORequisitionLocalHome"
*	remote-class="ePO.PORequisition.PORequisitionHome"
*	generate= "local,remote"
*
*
*/


public class  PORequisitionManager extends PoEJBSessionAdapter {
//	public SessionContext context = null;
	public void setSessionContext( SessionContext sessionContext) {
		super.setSessionContext(sessionContext);
		this.context = sessionContext;
	}
	///Function for handling generic operation..
	String SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE;	

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap insert(HashMap hmData, HashMap hmSQL)	{
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql =	"";
		ArrayList alData = null;
		ArrayList alRecord = null;
		Properties properties = null;
		ArrayList doc_no = new ArrayList();
		String doc_no_temp = "";
		//int      sizeOfTrn		=	1;
		int      trnRecords		=	1;

		boolean isUpdateSuccessful		= true;
		boolean isDocNoAutoGenerated	=	false;
		boolean isPurUnitPrefix			=	false;
		boolean isFacilityPrefix		=	false;
		boolean isYearPrefix			=	false;
		int iResult = 0;
		int failedRecordIndex = -1;
		int[] iaResult = null;
		String do_no = "";
		//int sResult = 0;
		hmReturn.put(RESULT,FALSE);
			System.out.flush();
			ArrayList	alStatusData			=	null;

		try {
			properties =	(Properties) hmData.get("properties");
			connection = getConnection(properties);
			connection.setAutoCommit(false);
			
			SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE	=	(String)hmSQL.get ("SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE");

			alData =	(ArrayList) hmData.get("InsertHDRData");

			HashMap hmRecord	=	fetchRecord(connection, SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE);

			isDocNoAutoGenerated	=	checkForNull((String)hmRecord.get("REQ_DOC_NO_GEN_METHOD"),"N").equals("A");
			isPurUnitPrefix			=	checkForNull((String)hmRecord.get("REQ_PURUNIT_PREFIX_YN"),"N").equals("Y");
			isFacilityPrefix		=	checkForNull((String)hmRecord.get("REQ_FACILITY_PREFIX_YN"),"N").equals("Y");
			isYearPrefix			=	checkForNull((String)hmRecord.get("REQ_YEAR_PREFIX_YN"),"N").equals("Y");
			
			// Insert Header Value
			
				if (isDocNoAutoGenerated) {
					if(isPurUnitPrefix){
						doc_no_temp = (String)alData.get(8);
					}
					if(isFacilityPrefix){
						doc_no_temp = doc_no_temp +  (String)alData.get(0);
					}
					if(isYearPrefix){
						doc_no_temp = doc_no_temp +  (String)fetchRecord(connection, SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE).get("CURRENT_YEAR");
					}
				//	doc_no_temp = 	doc_no_temp + (String)fetchRecord(connection, SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE).get("REQ_NEXT_SRLNO");
					do_no = (String)fetchRecord(connection, SQL_PO_DOC_TYPE_SELECT_FLAG_FROM_CONTROL_TABLE).get("REQ_NEXT_SRLNO"); 
					if( do_no != null && do_no != ""){
						doc_no_temp = 	doc_no_temp + do_no;
					}else{
						hmReturn.put(RESULT,FALSE);
						hmReturn.put(MSGID,DOCNO_NULL);
						return hmReturn;
												
					}	
				}else{
				doc_no_temp=(String)alData.get(2);		
				}

				alData.set(2,doc_no_temp);

				doc_no.add((String)alData.get(2));

				sql = (String) hmSQL.get	("InsertHDRSQL");

				preparedStatement = connection.prepareStatement(sql);
				setData(preparedStatement,alData);
				iResult = preparedStatement.executeUpdate();
				if(preparedStatement!=null)
						preparedStatement.close();
				if(iResult != 0) {
					hmReturn.put(RESULT,TRUE);
					hmReturn.put(MSGID,RECORD_INSERTED);
				}
				else {
					connection.rollback();
					throw new EJBException("Insert failed in header");
				}

				// Insert Detail Value
				sql = null;
				alData =null;

				alData =	(ArrayList) hmData.get("InsertDTLData");
				
				sql = (String)	hmSQL.get	("InsertDTLSQL");
								
				preparedStatement = connection.prepareStatement(sql);
				
				trnRecords = alData.size();

				for (int index = 0; index < trnRecords; index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					alRecord.set(1,doc_no_temp);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				try{
				iaResult = preparedStatement.executeBatch();
				}catch(Exception exception){
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MSGID,exception.toString());
				connection.rollback();
				return hmReturn;
				}
				if(preparedStatement!=null)
						preparedStatement.close();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						failedRecordIndex = i;
						isUpdateSuccessful = false;
						break;
					}	
				}
				if(!isUpdateSuccessful){
					connection.rollback();
					throw new EJBException("Update failed while inserting detail record " + failedRecordIndex);
				}
		
				preparedStatement = null;
				alStatusData=null;
				sql = null;
			
		
				//Update the document no
				ArrayList allanguageData			=	(ArrayList)	hmData.get("LANGUAGE_DATA");
				String locale=(String)allanguageData.get(0);
				if (isDocNoAutoGenerated) {
					String s  = "";
					String s1 = "";
					sql = (String)	hmSQL.get	("UpdateSQL");
					alData = (ArrayList)	hmData.get ("UpdateData");
					preparedStatement = connection.prepareStatement(sql);
					setData(preparedStatement,alData);
					iResult = preparedStatement.executeUpdate();
					if(doc_no.size()>1){
						java.util.Locale loc = new java.util.Locale(locale);
						java.util.ResourceBundle common_labels = java.util.ResourceBundle.getBundle( "eCommon.resources.Labels",loc);
						s = getPOMessage(locale, "DOC_NOS_GEN_FROM", "PO") ;
					
						s1=s+"  "+doc_no.get(0)+" "+common_labels.getString("Common.to.label")+" "+doc_no.get(doc_no.size()-1);
					}else{
						s = getPOMessage(locale, "DOC_NO", "PO") ;
						s1=s+":  "+doc_no.get(0);
					}
					hmReturn.put("flag",s1);
					if(preparedStatement!=null)
							preparedStatement.close();
					if(iResult<=0){
						connection.rollback();
						throw new SQLException("Update of Document No failed");
					}
				}
				// After successful insertion and updation 

				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_INSERTED);
				if (connection!=null) {
						closeConnection(connection,properties);	
				}
		}catch(SQLException sqlException) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				if(sqlException.getErrorCode()==1) {
					hmReturn.put(MESSAGE,CODE_ALREADY_EXISTS);
					hmReturn.put(MSGID,CODE_ALREADY_EXISTS);

				}
				else {
					hmReturn.put(MESSAGE,sqlException.toString());
					hmReturn.put(MSGID,sqlException.toString());
				}
				sqlException.printStackTrace();
			}
			catch (Exception exception) {
				exception.printStackTrace(); 
			}
        }
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				hmReturn.put(MSGID,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace(); 
			}
        }
		finally{
			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				if (connection!=null) {
					closeConnection(connection,(Properties)hmData.get(properties));	
				}
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		} 
	
		hmReturn.put("doc_no",doc_no);

		return hmReturn;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap modify(HashMap hmData, HashMap hmSQL)	 {
		Connection	connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		ArrayList alData =	new ArrayList();
		ArrayList	 alRecord =	new ArrayList();
		Properties properties = null;
		String sql =	"";
		int iResult =	0;
//		ArrayList	alStatusData			=	null;
	
		int iaResult[] = null;
	//	int sResult = 0;
		boolean isUpdateSuccessful = true;
		hmReturn.put(RESULT,FALSE);
		hmReturn.put(MESSAGE,"No records found to be modified..");
		properties =	(Properties) hmData.get("properties");
		try {
			connection = getConnection(properties);
			connection.setAutoCommit(false);
			alData =	(ArrayList)	hmData.get ("UpdateData");
			sql = (String)	hmSQL.get	("UpdateSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult	 =	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult!=0){
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_MODIFIED);
			}
			alData = null;
			sql = null;
			if (hmData.containsKey("DeleteDTLData") && hmSQL.containsKey("DeleteDTLSQL")) {
				alData = (ArrayList)	hmData.get ("DeleteDTLData");
				sql = (String)	hmSQL.get	("DeleteDTLSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
					preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++){
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record");
					}
				}
			}
			alData = null;
			sql = null;
			if (hmData.containsKey("UpdateDTLData") && hmSQL.containsKey("UpdateDTLSQL")) {
				alData = (ArrayList)	hmData.get ("UpdateDTLData");
				sql = (String)	hmSQL.get	("UpdateDTLSQL");
				if (alData.size() >0) {
					preparedStatement = connection.prepareStatement(sql);
					for (int index = 0; index < alData.size(); index++) {
						alRecord = (java.util.ArrayList) alData.get(index);
						setData(preparedStatement, alRecord);
						preparedStatement.addBatch();
					}
					iaResult = preparedStatement.executeBatch();
					if(preparedStatement!=null)
					preparedStatement.close();
					for (int i=0;i<iaResult.length ;i++) {
						if((iaResult[i] != -2) && (iaResult[i]<0)){
							isUpdateSuccessful = false;
							break;
						}	
					}
					if(!isUpdateSuccessful){
						connection.rollback();
						throw new EJBException("Update failed while inserting detail record");
					}	
				}
			}
			if (hmData.containsKey("InsertDTLData") && hmSQL.containsKey("InsertDTLSQL")) {
				alData = (ArrayList)	hmData.get ("InsertDTLData");
				sql = (String)	hmSQL.get	("InsertDTLSQL");
				preparedStatement = connection.prepareStatement(sql);
				for (int index = 0; index < alData.size(); index++) {
					alRecord = (java.util.ArrayList) alData.get(index);
					setData(preparedStatement, alRecord);
					preparedStatement.addBatch();
				}
				iaResult = preparedStatement.executeBatch();
				if(preparedStatement!=null)
					preparedStatement.close();
				//preparedStatement.clearParameters();
				for (int i=0;i<iaResult.length ;i++){
					if((iaResult[i] != -2) && (iaResult[i]<0)){
						isUpdateSuccessful = false;
						break;
					}	
				}
			}

			if(isUpdateSuccessful){
				connection.commit();
				hmReturn.put(RESULT,TRUE);
				hmReturn.put(MSGID,RECORD_MODIFIED);
			}
				if (connection!=null) {
						closeConnection(connection,properties);	
				}

			
		}
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MSGID,exception.toString());
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
				subexception.printStackTrace();
			}
        }
		finally{
 			try{
				if(preparedStatement!=null)
					preparedStatement.close();
				closeConnection(connection,(Properties)hmData.get(properties));	
			}
			catch (Exception subexception){
				subexception.printStackTrace();
			}
		}
		return hmReturn;
	}

	/**
	* @ejb.interface-method
	*	 view-type="both"
	*/

	public HashMap delete(HashMap hmData, HashMap hmSQL)	{
		Connection connection = null;
		HashMap hmReturn = new HashMap();
		PreparedStatement preparedStatement	=	null;
		String sql = "";
		Properties properties = null;
		ArrayList alData =	new ArrayList();
//		ArrayList alRecords =	new ArrayList();
//		ArrayList alRecord =	new ArrayList();
//		int iaResult[] = null;
//		boolean isUpdateSuccessful = true;
		int iResult = 0;
		properties =	(Properties) hmData.get("properties");
		hmReturn.put(RESULT,FALSE);
		hmReturn.put(MESSAGE,"No record found to be deleted..");
		try {
			connection = getConnection(properties);
			connection.setAutoCommit(false);

			//Delete Details
			alData = (ArrayList)	hmData.get("DeleteDTLData");
			sql = (String)	hmSQL.get	("DeleteDTLSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in header !");
			}
			//Delete Header
			alData = (ArrayList)	hmData.get("DeleteHDRData");
			sql = (String)	hmSQL.get	("DeleteHDRSQL");
			preparedStatement = connection.prepareStatement(sql);
			setData(preparedStatement,alData);
			iResult		=	preparedStatement.executeUpdate();
			if(preparedStatement!=null)
					preparedStatement.close();
			if(iResult<=0) {
				connection.rollback();
				throw new Exception("Delete failed in header !");
			}
			connection.commit();
			hmReturn.put(RESULT,TRUE);
			hmReturn.put(MSGID,RECORD_DELETED);
			if (connection!=null) {
						closeConnection(connection,properties);	
			}		
		}
		catch(Exception exception) {
			try {
				connection.rollback();
				hmReturn.put(RESULT,FALSE);
				hmReturn.put(MESSAGE,exception.toString());
				exception.printStackTrace();
			}
			catch (Exception subexception) {
					subexception.printStackTrace();
			}
        }
		finally{
			try{
				if(preparedStatement!=null) {
					preparedStatement.close();
				}
				closeConnection(connection,(Properties)hmData.get(properties));	
			}
			catch (Exception exception){
				exception.printStackTrace();
			}
		}
		return hmReturn;
	}
	protected final String MESSAGE = "message";
	protected final String RESULT = "result";
	protected final Boolean TRUE = new Boolean(true);
	protected final Boolean FALSE =	new Boolean(false);
	private final String CODE_ALREADY_EXISTS = "CODE_ALREADY_EXISTS";
    private final String RECORD_INSERTED = "RECORD_INSERTED";
    private final String RECORD_MODIFIED = "RECORD_MODIFIED";
    private final String RECORD_DELETED  =	"RECORD_DELETED";
	private final String DOCNO_NULL  	=	"DOCNO_NULL";
}

          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -62)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define OERROR          (sqlca.sqlcode < 0)
#define MAX_LINES 42
#define REP_WIDTH 136
#define VER  "VER : 4.10\n"
#define ESC  0x1B

EXEC SQL BEGIN DECLARE SECTION;

	VARCHAR     l_translated_value	[201],	
		    l_pk_value	[100],

		    nd_curr_pgm_id [15],
		    nd_session_id [16],
		    nd_pgm_date   [25],
		    nd_pwd 	[91],
		    nd_facility_id[3];	
	
	VARCHAR	    nd_from_doctor_id[16],
		    nd_to_doctor_id[16],
		    nd_from_rev_catg_code[11],
		    nd_to_rev_catg_code[11],
		    nd_episode_type[2],
		    nd_episode_split_yn[2],
		    nd_blng_grp_id[6],
		    nd_rev_cust_code[9],
		    nd_repeat_grp_col[2],
		    d_acc_entity_name[100],
		    d_user[31],
		    d_curr_date[21],		    
		    d_physician_id[16], 
		    d_prv_physician_id[16], 
		    d_physician_name[16],
		    d_prv_physician_name[16],		    
		    d_rev_catg[16],
		    d_prv_rev_catg[16],
		    d_episode_type[4],
			p_language_id [3];
		    

	double	    d_hosp_revenue_amt,
		    d_doctor_share,
		    d_settled_amount,

		    d_rt_hosp_revenue_amt,
		    d_rt_doctor_share,
		    d_rt_settled_amount,

		    d_dt_hosp_revenue_amt,
		    d_dt_doctor_share,
		    d_dt_settled_amount,
		    
		    d_gt_hosp_revenue_amt,
		    d_gt_doctor_share,
		    d_gt_settled_amount;

	char loc_legend[999][201],
	     loc_legend100_1[201],
	     loc_legend100_2[201],
	     loc_legend110_1[201],
	     loc_legend110_2[201],	
	     loc_legend90_1[201],
	     loc_legend90_2[201];
	
	char l_mesg[200];
	int i,page_no=0,lctr=0, l_line_cnt_for_dtl_rec = 0;
	char filename[500];

	int nd_from_month, nd_to_month, nd_from_year, nd_to_year;

	
	int len = 0, r_ctr = 0;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }


    strcpy(g_pgm_id,"DFR00005");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);
	 

    EXEC sql connect :nd_pwd;  
	  
	if (sqlca.sqlcode < 0 )
	{
		disp_message(ORA_MESG,"Error in connecting to Oracle");
		proc_exit();
	}

	set_meduser_role(); 

	

    	strcpy(nd_curr_pgm_id.arr,g_pgm_id); 
    	nd_curr_pgm_id.len = strlen(nd_curr_pgm_id.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility_id.arr,argv[4]);
    	nd_facility_id.len = strlen(nd_facility_id.arr);
    	strcpy(g_facility_id,nd_facility_id.arr);	
	
        open_files();
	get_sy_prog_param();
        fetch_legend_value();    
        declare_cur();
        get_header_dtls();

	fprintf(fp,"%c&l1O",ESC); 
	fprintf(fp,"%c&a2L",ESC); 	/* To Set the Left margin  */
	fprintf(fp,"%c(s13H",ESC); 


	print_first_page();	

	process_dtl();	

	end_of_rep();

	fprintf(fp,"%cE",ESC); /* To Reset the Printer */ 

	fclose(fp);
    
 }

 end_of_rep()  
{
	fprintf(fp,"\n%55s***  END OF REPORT ***\n\f"," ");
	fflush(fp);
}

 declare_cur()
 {
 EXEC SQL DECLARE DR_PAY_CUR CURSOR FOR
       SELECT a.physician_id physician_id, 
       b.short_name physician_name,       
       c.short_desc revenue_category,                            
       DECODE(:nd_episode_split_yn,'Y',DECODE(a.episode_type,'E','EM',
							     'O','OP',
							     'D','DC',
							     'I','IP',
							     'R','EX')
				       ,'All') Episode_Type,
       nvl(sum(nvl(a.net_revenue_amt,0)),0) hosp_revenue_amt,
       nvl(sum(nvl(a.dr_revenue_amt,0)),0)  doctor_share,
       nvl(sum(nvl(a.settled_amt,0)),0)     settled_amount
FROM df_rev_folio_slmt_vw a,
     sy_physician_mast b,
     df_revenue_category c
WHERE a.operating_facility_id = :nd_facility_id
//AND a.processing_month BETWEEN :nd_from_month AND :nd_to_month
AND a.processing_year||TO_CHAR(a.processing_month,'FM00') 
      BETWEEN :nd_from_year||TO_CHAR(:nd_from_month,'FM00') 
      AND :nd_to_year||TO_CHAR(:nd_to_month,'FM00')       
//AND nvl(a.df_trx_status,'X') != 'C'
AND a.physician_id BETWEEN NVL(:nd_from_doctor_id,'!!!!!!!!!!!!!!!') 
		   AND NVL(:nd_to_doctor_id,'~~~~~~~~~~~~~~~') 		  
AND a.blng_grp_id like :nd_blng_grp_id||'%'
AND nvl(a.revenue_cust_code,'X') like :nd_rev_cust_code||'%'
AND a.episode_type = decode(:nd_episode_type,'A',a.episode_type,:nd_episode_type)
AND a.operating_facility_id = b.facility_id
AND a.physician_id = b.physician_id
AND a.revenue_category = c.revenue_category
GROUP BY a.physician_id, 
         b.short_name,       
         c.short_desc,                            
         DECODE(:nd_episode_split_yn,'Y',DECODE(a.episode_type,'E','EM',
							     'O','OP',
							     'D','DC',
							     'I','IP',
							     'R','EX')
				       ,'All'),
	DECODE(a.episode_type,'E',1,'O',2,'D',3,'I',4,5)
				     
ORDER BY a.physician_id,
	 c.short_desc,
	 DECODE(a.episode_type,'E',1,'O',2,'D',3,'I',4,5);
}

 process_dtl()
 {
	open_dr_pay_cur();	

	while(fetch_dr_pay_cur())
	{	
		if (d_prv_physician_id.arr[0] == '\0' && d_prv_rev_catg.arr[0] == '\0' )		  
		 {
			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					d_physician_id.arr,d_physician_name.arr,
					d_rev_catg.arr,d_episode_type.arr);					
					print_formated(d_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_doctor_share);
					fprintf(fp," ");
					print_formated(d_settled_amount);
		 }
		 else if (strcmp(d_physician_id.arr,d_prv_physician_id.arr) == 0 &&
			  strcmp(d_rev_catg.arr,d_prv_rev_catg.arr) == 0)
		 {
			if (l_line_cnt_for_dtl_rec == 1 || nd_repeat_grp_col.arr[0] == 'Y')
			{

				fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					d_physician_id.arr,d_physician_name.arr,
					d_rev_catg.arr,d_episode_type.arr);					
					print_formated(d_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_doctor_share);
					fprintf(fp," ");
					print_formated(d_settled_amount);
			}
			else
			{

				fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","",d_episode_type.arr);					
					print_formated(d_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_doctor_share);
					fprintf(fp," ");
					print_formated(d_settled_amount);
			}
		}
		else if (strcmp(d_physician_id.arr,d_prv_physician_id.arr) == 0 &&
			  strcmp(d_rev_catg.arr,d_prv_rev_catg.arr) != 0)
		 {

			//	if ((lctr + 3) > MAX_LINES)
			//	     next_line(3);	
		

				fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
				print_line('-',62);     							

				fprintf(fp, "%-15.15s %-15.15s %-24.24s- %-15.15s ",
					"","",
					d_prv_rev_catg.arr,loc_legend[130]);					
					print_formated(d_rt_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_rt_doctor_share);
					fprintf(fp," ");
					print_formated(d_rt_settled_amount);

				next_line(1);		

				fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
				print_line('-',62);     							

				d_rt_hosp_revenue_amt = 0;
				d_rt_doctor_share = 0;
				d_rt_settled_amount = 0;



			if (l_line_cnt_for_dtl_rec == 1 || nd_repeat_grp_col.arr[0] == 'Y')
			{				
				fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					d_physician_id.arr,d_physician_name.arr,
					d_rev_catg.arr,d_episode_type.arr);			
					print_formated(d_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_doctor_share);
					fprintf(fp," ");
					print_formated(d_settled_amount);
			}
			else
			{
				fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","",
					d_rev_catg.arr,d_episode_type.arr);					
					print_formated(d_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_doctor_share);
					fprintf(fp," ");
					print_formated(d_settled_amount);
			}
		}		
		else
		{


			//if ((lctr + 3) > MAX_LINES)
			//	     next_line(3);

			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
			print_line('-',62);     						

			fprintf(fp, "%-15.15s %-15.15s %-24.24s- %-15.15s ",
					"","",
					d_prv_rev_catg.arr,loc_legend[130]);					
					print_formated(d_rt_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_rt_doctor_share);
					fprintf(fp," ");
					print_formated(d_rt_settled_amount);

			next_line(1);		

			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
			print_line('-',62);     						


			d_rt_hosp_revenue_amt = 0;
			d_rt_doctor_share = 0;
			d_rt_settled_amount = 0;			

			//if ((lctr + 2) > MAX_LINES)
			  //    next_line(2);

			fprintf(fp, "%-15.15s %-10.10s %-30.30s %-15.15s ",
					"","",loc_legend[140],"");					
					print_formated(d_dt_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_dt_doctor_share);
					fprintf(fp," ");
					print_formated(d_dt_settled_amount);
			next_line(1);		

			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
			print_line('-',62);     						

			d_dt_hosp_revenue_amt = 0;
			d_dt_doctor_share = 0;
			d_dt_settled_amount = 0;			


			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					d_physician_id.arr,d_physician_name.arr,
					d_rev_catg.arr,d_episode_type.arr);					
					print_formated(d_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_doctor_share);
					fprintf(fp," ");
					print_formated(d_settled_amount);

		}
		
		next_line(1);		

		d_rt_hosp_revenue_amt = d_rt_hosp_revenue_amt + d_hosp_revenue_amt;
		d_rt_doctor_share     = d_rt_doctor_share + d_doctor_share;
		d_rt_settled_amount   = d_rt_settled_amount + d_settled_amount;

		d_dt_hosp_revenue_amt = d_dt_hosp_revenue_amt + d_hosp_revenue_amt;
		d_dt_doctor_share     = d_dt_doctor_share + d_doctor_share;
		d_dt_settled_amount   = d_dt_settled_amount + d_settled_amount;

		d_gt_hosp_revenue_amt = d_gt_hosp_revenue_amt + d_hosp_revenue_amt;
		d_gt_doctor_share     = d_gt_doctor_share + d_doctor_share;
		d_gt_settled_amount   = d_gt_settled_amount + d_settled_amount;

		strcpy(d_prv_physician_id.arr,d_physician_id.arr);
		d_prv_physician_id.len = strlen(d_prv_physician_id.arr);

		strcpy(d_prv_rev_catg.arr,d_rev_catg.arr);
		d_prv_rev_catg.len = strlen(d_prv_rev_catg.arr);
		
		strcpy(d_prv_physician_name.arr,d_physician_name.arr);
		d_prv_physician_name.len = strlen(d_prv_physician_name.arr);		
		
	
		l_line_cnt_for_dtl_rec = l_line_cnt_for_dtl_rec  + 1;
	}

		//if ((lctr + 3) > MAX_LINES)
		//	next_line(3);

		fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
			print_line('-',62);     						

			fprintf(fp, "%-15.15s %-15.15s %-24.24s- %-15.15s ",
					"","",
					d_prv_rev_catg.arr,loc_legend[130]);					
					print_formated(d_rt_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_rt_doctor_share);
					fprintf(fp," ");
					print_formated(d_rt_settled_amount);

			next_line(1);		

			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
			print_line('-',62);     					



			//if ((lctr + 2) > MAX_LINES)
			//	     next_line(2);


			fprintf(fp, "%-15.15s %-10.10s %-30.30s %-15.15s ",
					"","",loc_legend[140],"");					
					print_formated(d_dt_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_dt_doctor_share);
					fprintf(fp," ");
					print_formated(d_dt_settled_amount);

			next_line(1);		

			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
			print_line('-',62);     
			

			//if ((lctr + 2) > MAX_LINES)
			  //   next_line(2);

			fprintf(fp, "%-15.15s %-20.20s %-20.20s %-15.15s ",
					"",loc_legend[150],"","");					
					print_formated(d_gt_hosp_revenue_amt);
					fprintf(fp," ");
					print_formated(d_gt_doctor_share);
					fprintf(fp," ");
					print_formated(d_gt_settled_amount);
			//next_line(1);		

			fprintf(fp, "\n%-15.15s %-20.20s %-20.20s %-15.15s ",
					"","","","");					
			print_line_last('-',62);     			
			
	
 }


print_formated(loc_amount)
double loc_amount;
{
    char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
	strcat(s_amt,"-");
        sprintf(str_amt,"%20s",s_amt);
	l_ltrim(s_amt);
        fprintf(fp,"%20s",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%20s",s_amt);
	l_ltrim(s_amt);
        fprintf(fp,"%20s",str_amt);
    }

}

open_dr_pay_cur() 
{
	EXEC SQL OPEN DR_PAY_CUR;
	if(OERROR)	   
		err_mesg("OPEN failed on cursor DR_PAY_CUR",0,"");

}



fetch_dr_pay_cur()
{
	d_physician_id.arr[0] = '\0';
	d_physician_name.arr[0] = '\0';
	d_rev_catg.arr[0] = '\0';
	d_episode_type.arr[0] = '\0';
	
	d_physician_id.len = 0;
	d_physician_name.len = 0;
	d_rev_catg.len = 0;
	d_episode_type.len = 0;	

	EXEC SQL FETCH DR_PAY_CUR
             INTO :d_physician_id, 
		  :d_physician_name,
		  :d_rev_catg,
		  :d_episode_type,
		  :d_hosp_revenue_amt,
		  :d_doctor_share,
		  :d_settled_amount;

	if (OERROR)
		err_mesg("FETCH failed on cursor DR_PAY_CUR ",0,"");

	d_physician_id.arr[d_physician_id.len] = '\0';
	d_physician_name.arr[d_physician_name.len] = '\0';
	d_rev_catg.arr[d_rev_catg.len] = '\0';
	d_episode_type.arr[d_episode_type.len] = '\0';	

	return(LAST_ROW?0:1);
}

close_dr_pay_cur()
{
	EXEC SQL CLOSE DR_PAY_CUR;
}



 print_first_page()
{
	print_page_title();
        fprintf(fp,"\nVER : 4.1\n");
   	fprintf(fp,"\n\n\n      INPUT PARAMETERS :\n");
	fprintf(fp,"      ----------------\n");  	

	fprintf(fp,"%35s : %-d/%-d\n",  "Period From",nd_from_month,nd_from_year);
	fprintf(fp,"%35s : %-d/%-d\n\n","         To",nd_to_month,nd_to_year);

	fprintf(fp,"%35s : %-s\n",  "Doctor Id From",nd_from_doctor_id.arr);
	fprintf(fp,"%35s : %-s\n\n","            To",nd_to_doctor_id.arr);

	fprintf(fp,"%35s : %-s\n",  "Revenue Category From",nd_from_rev_catg_code.arr);
	fprintf(fp,"%35s : %-s\n\n","                   To",nd_to_rev_catg_code.arr);
	
	fprintf(fp,"%35s : ","Episode Type");
	

	if ( nd_episode_type.arr[0] == 'A') 
		fprintf(fp,"%-s","All");
	else if ( nd_episode_type.arr[0] == 'E') 
		fprintf(fp,"%-s","Emergency");
	else if ( nd_episode_type.arr[0] == 'O') 
		fprintf(fp,"%-s","Outpatient");	
	else if ( nd_episode_type.arr[0] == 'D') 
		fprintf(fp,"%-s","Daycare");
	else if ( nd_episode_type.arr[0] == 'I') 
		fprintf(fp,"%-s","Inpatient");
	else if ( nd_episode_type.arr[0] == 'R') 
		fprintf(fp,"%-s","External");

	fprintf(fp,"\n\n");
	
	fprintf(fp,"%35s : %-s\n\n",  "Episode Split",nd_episode_split_yn.arr);
	fprintf(fp,"%35s : %-4.4s\n\n",  "Billing Group",nd_blng_grp_id.arr);
	fprintf(fp,"%35s : %-s\n\n",  "Revenue Customer",nd_rev_cust_code.arr);
	
	
        next_page();  
  

}

next_page() 
{
  
	fprintf(fp,"\n");
	fprintf(fp,"\f");
	lctr=0;
	fprintf(fp,"\n"); 

	l_line_cnt_for_dtl_rec = 1;

	// Used for Sub-title - printing to first line each page
	 
	print_page_title();
	print_column_title();  	
	
	
}

print_column_title()
 {
      fprintf(fp,"%-15.15s %-20.20s %-20.20s %-15.15s %20.20s %20.20s %20.20s ",
      loc_legend[60],loc_legend[70],loc_legend[80],loc_legend90_1,loc_legend100_1,loc_legend110_1,loc_legend[120]);

      next_line(1);

      fprintf(fp,"%-15.15s %-20.20s %-20.20s %-15.15s %20.20s %20.20s %20.20s ",
      "","","",loc_legend90_2,loc_legend100_2,loc_legend110_2,"");

      next_line(1);
      print_line('-',REP_WIDTH);         

 }


 open_files()
 {

	strcpy(filename,WORKING_DIR);
	strcat(filename,"DFR00005.lis");

	if ((fp = fopen(filename,"w")) == NULL)
	{
		disp_message(ERR_MESG,"Error in opening file DFR00005.lis");
		proc_exit();
	}

 }

 get_sy_prog_param()
 {	
	nd_from_doctor_id.arr[0] = '\0';
	nd_to_doctor_id.arr[0] = '\0';
	nd_from_rev_catg_code.arr[0] = '\0';
	nd_to_rev_catg_code.arr[0] = '\0';	
	nd_episode_type.arr[0] = '\0';	
	nd_episode_split_yn.arr[0] = '\0';
	nd_blng_grp_id.arr[0] = '\0';
	nd_rev_cust_code.arr[0] = '\0';
	nd_repeat_grp_col.arr[0] = '\0';

	nd_from_doctor_id.len = 0;
	nd_to_doctor_id.len = 0;
	nd_from_rev_catg_code.len = 0;
	nd_to_rev_catg_code.len = 0;
	nd_episode_type.len = 0;
	nd_episode_split_yn.len = 0;
	nd_blng_grp_id.len = 0;
	nd_rev_cust_code.len = 0;
	nd_repeat_grp_col.len = 0;
			
        EXEC SQL SELECT	PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,PARAM6,
			PARAM7,PARAM8,PARAM9,PARAM10, PARAM11,
			PARAM12,PARAM13
		 INTO	:nd_from_month, 
			:nd_to_month,
			:nd_from_year, 
			:nd_to_year,
			:nd_from_doctor_id,
			:nd_to_doctor_id,
			:nd_from_rev_catg_code,
			:nd_to_rev_catg_code,			
			:nd_episode_type,
			:nd_episode_split_yn,
			:nd_blng_grp_id,
			:nd_rev_cust_code,
			:nd_repeat_grp_col
		FROM SY_PROG_PARAM
                WHERE PGM_ID   = :nd_curr_pgm_id
                AND SESSION_ID = :nd_session_id
                AND PGM_DATE   = :nd_pgm_date;

	if (OERROR)
		err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

	if (NODATAFOUND)
		err_mesg("No Record found in SY_PROG_PARAM",0,"");
	


	nd_from_doctor_id.arr[nd_from_doctor_id.len] = '\0';
	nd_to_doctor_id.arr[nd_to_doctor_id.len] = '\0';
	nd_from_rev_catg_code.arr[nd_from_rev_catg_code.len] = '\0';
	nd_to_rev_catg_code.arr[nd_to_rev_catg_code.len] = '\0';	
	nd_episode_type.arr[nd_episode_type.len] = '\0';	
	nd_episode_split_yn.arr[nd_episode_split_yn.len] = '\0';
	nd_blng_grp_id.arr[nd_blng_grp_id.len] = '\0';
	nd_rev_cust_code.arr[nd_rev_cust_code.len] = '\0';
	nd_repeat_grp_col.arr[nd_repeat_grp_col.len] = '\0';


	EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :nd_curr_pgm_id
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");   
}


fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('DFR00005.LEGEND_'||
				LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		         INTO :l_pk_value
			 FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(
				:nd_facility_id,
				'SM',
				'SM_LANG_LEGEND',
				'DFLT_LEGEND_VALUE',
				:l_pk_value,
				:l_translated_value,
				:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}

	// WRAP
	

	r_ctr = 0;
	if (strlen(loc_legend[100]) > 0)
		split_text(loc_legend[100],20,loc_legend100_1,&r_ctr);
	if (strlen(loc_legend[100]) >= 20)	
		split_text(loc_legend[100],20,loc_legend100_2,&r_ctr);

	r_ctr = 0;
	if (strlen(loc_legend[110]) > 0)
		split_text(loc_legend[110],20,loc_legend110_1,&r_ctr);
	if (strlen(loc_legend[110]) >= 20)	
		split_text(loc_legend[110],20,loc_legend110_2,&r_ctr);

	r_ctr = 0;
	if (strlen(loc_legend[90]) > 0)
		split_text(loc_legend[90],15,loc_legend90_1,&r_ctr);
	if (strlen(loc_legend[90]) >= 15)	
		split_text(loc_legend[90],15,loc_legend90_2,&r_ctr);

}

next_line(skip) /* will check for MAX LINE before printing totals */		
int skip;
 {
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
	else
	{
		fprintf(fp,"\n"); ++lctr; 
		        /*     fprintf(fp,"LNNO:%2d",lno); */
	}
 }
        


print_page_title()
  {

	int hosp_nm_len,date1_len, rep_title_len = 10,
	    s1, s2,date_len,user_len,
	    pgm_len,sub_title_len;

	char v_rep_title[200],v_as_on_date[12],v_sub_title[200],v_title[200],
	     v_title1[200];
   
	fprintf(fp,"%3.3s : DF",loc_legend[10]);
	hosp_nm_len  =  d_acc_entity_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-8);
	fprintf(fp,"%s", d_acc_entity_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);
	date1_len=4; //strlen(loc_legend[40]);
	horz_skip(s2-date1_len-13);
	fprintf(fp,"%4.4s : %s", loc_legend[40],d_curr_date.arr);
    
	next_line(1);
	
	fprintf(fp,"%3.3s : %s", loc_legend[20],d_user.arr); 	 
	

	next_line(1);

	fprintf(fp,"%3.3s : %s",loc_legend[30],nd_curr_pgm_id.arr);
        pgm_len=strlen(nd_curr_pgm_id.arr);	 
	
	strcpy(v_sub_title,loc_legend[160]);

	sub_title_len = strlen(v_sub_title);
	s1 = (REP_WIDTH-sub_title_len)/2;
   	horz_skip(s1-pgm_len-6);
        fprintf(fp,"%s",v_sub_title);

        s2 = (REP_WIDTH-s1-sub_title_len);
	horz_skip(s2-17);
	fprintf(fp,"%4.4s : %-10d",loc_legend[50],++page_no);
	next_line(1);  
   
	lctr = 3;
	print_line('-',REP_WIDTH); 
	//next_line(1);

}


get_header_dtls()
{
	d_acc_entity_name.arr[0] = '\0';
	d_user.arr[0] = '\0';
	d_curr_date.arr[0] = '\0';

	d_acc_entity_name.len = 0;
	d_user.len = 0;
	d_curr_date.len = 0;

	EXEC SQL SELECT acc_entity_name, user, to_char(sysdate, 'DD/MM/YYYY')
	INTO :d_acc_entity_name,:d_user, :d_curr_date
        FROM SY_ACC_ENTITY
	WHERE acc_entity_id = :nd_facility_id;

	if (OERROR)
		err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	if (NODATAFOUND)
		err_mesg("No Record found in SY_ACC_ENTITY",0,"");

	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len] = '\0';
	d_curr_date.arr[d_curr_date.len] = '\0';

}

print_line(ch,n) /* this is to obtain required characters */
  char ch;
	int n;
	{
		if ((lctr + 1) >= MAX_LINES)
		{
			next_page(); 
		}
		else
		{
			int i;
			for(i=0;i<n;i++)
			fprintf(fp,"%c",ch);  fprintf(fp,"\n");++lctr;
		}

	}




print_line_last(ch,n) /* this is to obtain required characters */
  char ch;
	int n;
	{
		
	
			int i;
			for(i=0;i<n;i++)
			fprintf(fp,"%c",ch);  fprintf(fp,"\n");++lctr;
	

	}
	

     
horz_skip(num) /* this is to obtain required blank space */
int num;
	{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
	}

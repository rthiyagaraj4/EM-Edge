/******************************************************************************/
/* OCS MEDICOM VER 1.0                                                        */
/******************************************************************************/
/* PROGRAM NAME     : rdbpgmst.pc                                             */
/* AUTHOR           : VASANT KUMAR											  */	
/*																			  */	 
/* DATE WRITTEN     : 23/04/1995                                              */
/*                                                                            */
/* CALLED FROM      : rdbpgmst.inp                                            */
/*                                                                            */
/* INPUT PARAMETERS : USER_ID/PASSWORD                                        */
/*                    SESSION_ID                                              */
/*                    PGM_DATE IN 'DDMMYYHH24MISS' FORMAT                     */
/*                                                                            */
/* INPUT TAKEN FROM : 1. TABLE ID                                             */
/* SY_PROG_PARAM                                                              */
/*                                                                            */
/* TABLED ACCESSED/ : SY_PROG_PARAM                                           */
/*        UPDATED     SY_PROG_CONTROL                                         */
/*                    SY_DESIGNATION                                          */
/*                    SY_PHYSICIAN_MAST                                       */
/*                    MR_NOTES_SEC_HDG                                        */
/*                    MR_DIAG_STAGE                                           */
/*                    MR_ANALYSIS_CODE                                        */
/*                                                                            */
/* FUNCTION         : This program purges the suspended records from the      */
/*                    specified OP   master table                             */
/*                                                                            */
/*                    Each suspended record is validated and if any OERROR    */
/*                    is found it is recorded in OP_PURGE_MSG, otherwise      */
/*                    it is deleted.                                          */
/* Modified on	    :14/2/2000						      */
/*                                                                            */
/******************************************************************************/
/*                                                                            */
/* VERSION          : eHIS 4.1                                                */
/*                                                                            */
/* AUTHOR           : Rajanish Nambiar                                        */
/*                                                                            */
/* DATE MODIFIED    : 23rd Aug 2003                                           */
/*                                                                            */
/* DATE MODIFIED    : 07th Jan 2004 incorporated new masters                  */
/*                                  RD_DIAGNOSIS & RD_RATE_OF_COMPLICATION	  */
/*                                                                            */
/******************************************************************************/

#include <stdio.h>
#include <string.h>
#include "gl.h"
#include "RD.h"
#define DEBUG 0
#define RESOURCE_BUSY        (sqlca.sqlcode == -54) 
#define VIEW_LOG_FILE  1

EXEC SQL BEGIN DECLARE SECTION;

varchar d_pgm_id[9],
		uid_pwd[91],
		d_session_id[16],
		d_pgm_date[14],
		d_facility_id[3],
		d_ws_no[31],
		d_table_id[32],
		d_msg_desc[72],
		d_msg_num[8],
		d_master_code[42],
		d_dummy[2];

EXEC SQL END DECLARE SECTION;

EXEC ORACLE OPTION(HOLD_CURSOR = YES);
EXEC ORACLE OPTION(SELECT_ERROR = NO);
// EXEC ORACLE OPTION(REBIND = NO);

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include "winproc.h"
char string_var[75];
int can_delete;
char filename[150];

void proc_main(argc,argv)
int argc;
char *argv[];
{
	if (argc < 5) {
		disp_message(ERR_MESG, "RDBPGMST : Usage RDBPGMST userid/password session_id pgm_date\n");
		proc_exit();
	}
	strcpy(d_pgm_id.arr, argv[0]);
	d_pgm_id.len = strlen(d_pgm_id.arr); 
	
	strcpy(uid_pwd.arr,argv[1]);
	uid_pwd.len = strlen(uid_pwd.arr);
	strcpy(filename,WORKING_DIR);
	strcat(filename,"rdbpurge.lis");
	
	strcpy(d_session_id.arr,argv[2]);
	d_session_id.len = strlen(d_session_id.arr);
	strcpy(g_session_id,argv[2]);
	
	strcpy(d_pgm_date.arr,argv[3]);
	d_pgm_date.len = strlen(d_pgm_date.arr);

/*	strcpy(g_pgm_date,argv[3]);      Added By Gopikannan for 31449 */
	strncpy(g_pgm_date,argv[3],10);

	
	strcpy(d_facility_id.arr, argv[4]);
	d_facility_id.len = strlen(d_facility_id.arr);
	

	EXEC SQL CONNECT :uid_pwd;	

	if (OERROR){
		disp_message(ORA_MESG, "Unable to connect to oracle.\n");
		//	  printf("%s\n",sqlca.sqlerrm.sqlerrmc);
		proc_exit();
	}
		
	set_meduser_role();
	
	strcpy(g_pgm_id,"RDBPURGE");
	
	strcpy(g_facility_id, d_facility_id.arr); /* Added by Gopikannan for 31449 */
	
	chk_active();
	
	EXEC SQL  
	SELECT PARAM1,PARAM2 
	INTO   :d_table_id,:d_ws_no 
 	FROM   SY_PROG_PARAM
	WHERE  OPERATING_FACILITY_ID = :d_facility_id
	AND    PGM_ID				 = 'RDBPURGE'
	AND    PGM_DATE			     = :d_pgm_date
	AND	   SESSION_ID			 = :d_session_id;
		  
	if (OERROR || NO_DATA_FOUND)
		err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");
		d_table_id.arr[d_table_id.len] = '\0';
		start_prog_control();
		start_prog_msg();
		d_table_id.arr[d_table_id.len] = '\0';
		/*  sprintf(string_var, "Purging of suspended %s codes in progress. Please wait ...\n\n",d_table_id.arr);
		disp_message(ERR_MESG, string_var);  */

	if (!strcmp(d_table_id.arr,"RD_SECTION"))
		purge_section();
	else if	(!strcmp(d_table_id.arr,"RD_EXAMINATION"))
		purge_examination();
	else if (!strcmp(d_table_id.arr,"RD_CLINIC"))
		purge_clinic();
	else if (!strcmp(d_table_id.arr,"RD_APPT_SERIES"))
		purge_appt_series();
	else if (!strcmp(d_table_id.arr,"RD_VIEW"))
		purge_view();
	else if (!strcmp(d_table_id.arr,"RD_ORGAN_SITE"))
		purge_organ_site();
	else if (!strcmp(d_table_id.arr,"RD_TRANSPORT_MODE"))
		purge_trans_mode_code();
	else if (!strcmp(d_table_id.arr,"RD_RECORDS_STORE"))
		purge_records_store();
	else if (!strcmp(d_table_id.arr,"RD_RECORDS_MEDIA"))
		purge_records_media();
	else if (!strcmp(d_table_id.arr,"RD_WINGS"))
		purge_wing() ;
	else if (!strcmp(d_table_id.arr,"RD_ITEMS"))
		purge_items() ;
	else if (!strcmp(d_table_id.arr,"RD_ITEM_CLASS"))
		purge_item_class() ;
	else if (!strcmp(d_table_id.arr,"RD_REASONS"))
		purge_reason() ;
	else if (!strcmp(d_table_id.arr,"RD_ADMIN_ROUTE"))
		purge_admin_route() ;
	else if (!strcmp(d_table_id.arr,"RD_ADMIN_REACTION"))
		purge_admin_reaction() ;
	else if (!strcmp(d_table_id.arr,"RD_EXAM_CATEGORY"))
		purge_exam_category() ;
	else if (!strcmp(d_table_id.arr,"RD_DIAGNOSIS"))
		purge_diagnosis() ;
	else if (!strcmp(d_table_id.arr,"RD_COMPLICATION"))
		purge_complication();
	else if (!strcmp(d_table_id.arr,"RD_COMP_MANAGEMENT_TYPE"))
		purge_management_type();
	else
		err_mesg("Invalid table_id",0,"");

	end_prog_msg();

	end_prog_control();

	del_param();

	EXEC SQL COMMIT WORK RELEASE;
	
	return;

}	//end of main

purge_section()
{
	EXEC SQL LOCK TABLE RD_SECTION
			   IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_SECTION",0,"");

	EXEC SQL DECLARE RD_SECTION_CUR CURSOR FOR 
              SELECT  SECTION_CODE
			  FROM    RD_SECTION
			  WHERE   STATUS  = 'S' 
			  FOR     UPDATE  OF STATUS;

	/*EXEC SQL DECLARE RD_SERVICE_TYPE_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_SERVICE_TYPE
			  WHERE   SECTION_CODE = :d_master_code; */

	EXEC SQL DECLARE RD_EXAMINATION_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_EXAMINATION
			  WHERE   SECTION_CODE = :d_master_code;

	EXEC SQL DECLARE RD_DEF_STORAGE_LOCN_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_DEF_STORAGE_LOCN
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id
			  AND     SECTION_CODE = :d_master_code;

     EXEC SQL DECLARE RD_REQUEST_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_REQUEST
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id
			  AND     SECTION_CODE = :d_master_code;

     /*EXEC SQL DECLARE RD_RECORDS_INDEX_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_RECORDS_INDEX
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id
			  AND     SECTION_CODE = :d_master_code;*/

     EXEC SQL DECLARE RD_APPT_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_APPT
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id
			  AND     SECTION_CODE = :d_master_code;

     EXEC SQL DECLARE RD_APPT_DEL_TR_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_APPT_DEL_TR
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id
			  AND     SECTION_CODE = :d_master_code;

     EXEC SQL DECLARE RD_CLINIC_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_CLINIC
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id
			  AND     SECTION_CODE = :d_master_code;

     EXEC SQL DECLARE RD_TRANS_RECORD_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_TRANS_RECORD
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id
			  AND     SECTION_CODE = :d_master_code;

     EXEC SQL DECLARE RD_APPT_STATS_1_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_APPT_STATS
			  WHERE   SECTION_CODE = :d_master_code;

     EXEC SQL OPEN RD_SECTION_CUR;

     if (OERROR)
		err_mesg("OPEN failed on cursor RD_SECTION_CUR",0,"");
		while (fetch_section())
		{
			/****** COMMENTED ON 21/10/1998 RD_SERVICE_TYPE TABLE NOT EXIST****/
			/*EXEC SQL OPEN RD_SERVICE_TYPE_1_CUR;
			if (OERROR) 
			err_mesg("OPEN failed on cursor RD_SERVICE_TYPE_1_CUR",0,"");
			EXEC SQL FETCH RD_SERVICE_TYPE_1_CUR
	     	INTO  :d_dummy;
			if (OERROR) 
			err_mesg("FETCH failed on cursor RD_SERVICE_TYPE_1_CUR",0,"");
			if (sqlca.sqlcode EQ 0)
			{
			log_messg("RD0249","RD_SERVICE_TYPE");
			continue; 
			}*/
		
			EXEC SQL OPEN RD_EXAMINATION_1_CUR;
			if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAMINATION_1_CUR",0,"");

			EXEC SQL FETCH RD_EXAMINATION_1_CUR 
	     			  INTO :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_EXAMINATION_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_EXAMINATION");
			   continue; 
			}
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   			EXEC SQL OPEN RD_DEF_STORAGE_LOCN_1_CUR;
			if (OERROR) 
			err_mesg("OPEN failed on cursor RD_DEF_STORAGE_LOCN_1_CUR",0,"");

			EXEC SQL FETCH RD_DEF_STORAGE_LOCN_1_CUR 
	     			  INTO :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_DEF_STORAGE_LOCN_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_DEF_STORAGE_LOCN");
			   continue; 
			}
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   			EXEC SQL OPEN RD_REQUEST_1_CUR;
			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_REQUEST_1_CUR",0,"");

			EXEC SQL FETCH RD_REQUEST_1_CUR 
	     			  INTO :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_REQUEST_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_REQUEST");
			   continue; 
			}
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   			/*EXEC SQL OPEN RD_RECORDS_INDEX_1_CUR;
			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_RECORDS_INDEX_1_CUR",0,"");

			EXEC SQL FETCH RD_RECORDS_INDEX_1_CUR 
	     			  INTO  :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_RECORDS_INDEX_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_RECORDS_INDEX");
			   continue; 
			}	 */ //rvN on 22nd Dec 2003
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
			
			EXEC SQL OPEN RD_APPT_1_CUR;
			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_APPT_1_CUR",0,"");

			EXEC SQL FETCH RD_APPT_1_CUR 
	     		      INTO  :d_dummy;
			
			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_APPT_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_APPT");
			   continue; 
			}
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
			EXEC SQL OPEN RD_APPT_DEL_TR_1_CUR;
			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_APPT_DEL_TR_1_CUR",0,"");

			EXEC SQL FETCH RD_APPT_DEL_TR_1_CUR 
	     		      INTO :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_APPT_DEL_TR_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_APPT_DEL_TR");
			   continue; 
			}
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
			
			EXEC SQL OPEN RD_CLINIC_1_CUR;

			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_CLINIC_1_CUR",0,"");

			EXEC SQL FETCH RD_CLINIC_1_CUR 
	     			  INTO :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_CLINIC_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_CLINIC");
			   continue; 
			}
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   			EXEC SQL OPEN RD_TRANS_RECORD_1_CUR;

			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_TRANS_RECORD_1_CUR",0,"");

			EXEC SQL FETCH RD_TRANS_RECORD_1_CUR 
	     			  INTO :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_TRANS_RECORD_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_TRANS_RECORD");
			   continue; 
			}
			/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   			EXEC SQL OPEN RD_APPT_STATS_1_CUR;

			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_APPT_STATS_1_CUR",0,"");

			EXEC SQL FETCH RD_APPT_STATS_1_CUR 
	     			  INTO  :d_dummy;

			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_APPT_STATS_1_CUR",0,"");

			if (sqlca.sqlcode EQ 0){
			   log_messg("RD0249","RD_APPT_STATS");
			   continue; 
			}

		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_SECTION
	   	   WHERE CURRENT OF RD_SECTION_CUR;
	  
		if (OERROR)
	    err_mesg("DELETE failed on table RD_SECTION",0,"");

		if (sqlca.sqlcode EQ 0)
	    log_messg("RD0250"," ");


		EXEC SQL DELETE RD_SECTION_CTL
		   WHERE SECTION_CODE = :d_master_code ;

		if (OERROR)
	    err_mesg("DELETE failed on table RD_SECTION_CTL",0,"");
	
		if (sqlca.sqlcode EQ 0)
	    log_messg("RD0250"," ");

	} /* end of while  */

    EXEC SQL CLOSE RD_SECTION_CUR;
	//EXEC SQL CLOSE RD_SERVICE_TYPE_1_CUR;
    EXEC SQL CLOSE RD_EXAMINATION_1_CUR;
    EXEC SQL CLOSE RD_DEF_STORAGE_LOCN_1_CUR;
    EXEC SQL CLOSE RD_REQUEST_1_CUR;
    //EXEC SQL CLOSE RD_RECORDS_INDEX_1_CUR;
    EXEC SQL CLOSE RD_APPT_1_CUR;
    EXEC SQL CLOSE RD_APPT_DEL_TR_1_CUR;
    EXEC SQL CLOSE RD_CLINIC_1_CUR;
    EXEC SQL CLOSE RD_TRANS_RECORD_1_CUR;
    EXEC SQL CLOSE RD_APPT_STATS_1_CUR;
}

fetch_section(){
     can_delete = TRUE;

     EXEC SQL FETCH RD_SECTION_CUR
              INTO  :d_master_code;

     if (OERROR) 
       err_mesg("FETCH failed on cursor RD_SECTION_CUR",0,"");

     if (NO_DATA_FOUND) 
       return 0;
     d_master_code.arr[d_master_code.len] = '\0';

     if (DEBUG) {
       sprintf(string_var, "Section Code = %s\n",d_master_code.arr);
       disp_message(ERR_MESG, string_var); }
     return 1;
}
/***************************** End of SECTION Grp  ****************************/

/*purge_service_type()
{

     EXEC SQL LOCK TABLE RD_SERVICE_TYPE
              IN EXCLUSIVE MODE NOWAIT;

     if (RESOURCE_BUSY)
       err_mesg("TABLE cannot be locked in exclusive mode",0,"");
     else
       if (OERROR)
         err_mesg("LOCK failed on table RD_SERVICE_TYPE",0,"");

     EXEC SQL DECLARE RD_SERVICE_TYPE_CUR CURSOR FOR 
          SELECT  SERVICE_TYPE_CODE
	      FROM    RD_SERVICE_TYPE
	      WHERE   STATUS  = 'S' 
	      FOR     UPDATE  OF STATUS;

     EXEC SQL DECLARE RD_EXAMINATION_2_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_EXAMINATION
	      WHERE   SERVICE_TYPE_CODE = :d_master_code;

     EXEC SQL DECLARE RD_TEXT_BLOCK_2_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_TEXT_BLOCK
	      WHERE   SERVICE_TYPE_CODE = :d_master_code;

     EXEC SQL DECLARE RD_SERVICES_FOR_CLINIC_2_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_SERVICES_FOR_CLINIC
	      WHERE   SERVICE_TYPE_CODE = :d_master_code;

     EXEC SQL DECLARE RD_REQUEST_2_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_REQUEST
	      WHERE   SERVICE_TYPE_CODE = :d_master_code;

     EXEC SQL DECLARE RD_RECORDS_INDEX_2_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_RECORDS_INDEX
	      WHERE   SERVICE_TYPE_CODE = :d_master_code;

     EXEC SQL DECLARE RD_APPT_2_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_APPT
	      WHERE   SERVICE_TYPE_CODE = :d_master_code;

     EXEC SQL DECLARE RD_APPT_DEL_TR_2_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_APPT_DEL_TR
	      WHERE   SERVICE_TYPE_CODE = :d_master_code;

     EXEC SQL OPEN RD_SERVICE_TYPE_CUR;

     if (OERROR)
       err_mesg("OPEN failed on cursor RD_SERVICE_TYPE_CUR",0,"");

     while (fetch_service_type())
       {
   	  EXEC SQL OPEN RD_EXAMINATION_2_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_EXAMINATION_2_CUR",0,"");

	  EXEC SQL FETCH RD_EXAMINATION_2_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_EXAMINATION_2_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_EXAMINATION");
	       continue; 
	    }

	  EXEC SQL OPEN RD_TEXT_BLOCK_2_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_TEXT_BLOCK_2_CUR",0,"");

	  EXEC SQL FETCH RD_TEXT_BLOCK_2_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_TEXT_BLOCK_2_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_TEXT_BLOCK");
	       continue; 
	    }

	  EXEC SQL OPEN RD_SERVICES_FOR_CLINIC_2_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_SERVICES_FOR_CLINIC_2_CUR",0,"");

	  EXEC SQL FETCH RD_SERVICES_FOR_CLINIC_2_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_SERVICES_FOR_CLINIC_2_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_SERVICES_FOR_CLINIC");
	       continue; 
	    }

	  
   	  EXEC SQL OPEN RD_REQUEST_2_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_REQUEST_2_CUR",0,"");

	  EXEC SQL FETCH RD_REQUEST_2_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_REQUEST_2_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_REQUEST");
	       continue; 
	    }

	  
   	  EXEC SQL OPEN RD_RECORDS_INDEX_2_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_RECORDS_INDEX_2_CUR",0,"");

	  EXEC SQL FETCH RD_RECORDS_INDEX_2_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_RECORDS_INDEX_2_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_RECORDS_INDEX");
	       continue; 
	    }
 

   	  EXEC SQL OPEN RD_APPT_2_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_APPT_2_CUR",0,"");

	  EXEC SQL FETCH RD_APPT_2_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_APPT_2_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_APPT");
	       continue; 
	    }

	  

   	  EXEC SQL OPEN RD_APPT_DEL_TR_2_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_APPT_DEL_TR_2_CUR",0,"");

	  EXEC SQL FETCH RD_APPT_DEL_TR_2_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_APPT_DEL_TR_2_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_APPT_DEL_TR");
	       continue; 
	    }

		
		EXEC SQL DELETE RD_SERVICE_TYPE
	   		   WHERE CURRENT OF RD_SERVICE_TYPE_CUR; 
		if (OERROR)
			err_mesg("DELETE failed on table RD_SERVICE_TYPE",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

	} // end of while 

    EXEC SQL CLOSE RD_SERVICE_TYPE_CUR;
    EXEC SQL CLOSE RD_EXAMINATION_2_CUR;
    EXEC SQL CLOSE RD_SERVICES_FOR_CLINIC_2_CUR;
    EXEC SQL CLOSE RD_TEXT_BLOCK_2_CUR;
    EXEC SQL CLOSE RD_REQUEST_2_CUR;
    EXEC SQL CLOSE RD_RECORDS_INDEX_2_CUR;
    EXEC SQL CLOSE RD_APPT_2_CUR;
    EXEC SQL CLOSE RD_APPT_DEL_TR_2_CUR;

}

fetch_service_type()
{
     can_delete = TRUE;

     EXEC SQL FETCH RD_SERVICE_TYPE_CUR 
              INTO  :d_master_code;

     if (OERROR) 
       err_mesg("FETCH failed on cursor RD_SERVICE_TYPE_CUR",0,"");

     if (NO_DATA_FOUND) 
       return 0;

     d_master_code.arr[d_master_code.len] = '\0';

     if (DEBUG)  {
       sprintf(string_var, "Service Type Code = %s\n", d_master_code.arr);
       disp_message(ERR_MESG, string_var); }

     return 1;
}*/ //commented by rvN on 09/10/2003
/***************************** End of SERVICE Grp  ****************************/

purge_examination()
{
     EXEC SQL LOCK TABLE RD_EXAMINATION
              IN EXCLUSIVE MODE NOWAIT;

     if (RESOURCE_BUSY)
       err_mesg("TABLE cannot be locked in exclusive mode",0,"");
     else
       if (OERROR)
         err_mesg("LOCK failed on table RD_EXAMINATION",0,"");

     EXEC SQL DECLARE RD_EXAMINATION_CUR CURSOR FOR 
              SELECT  EXAM_CODE
			  FROM    RD_EXAMINATION
			  WHERE   STATUS  = 'S' 
			  FOR     UPDATE  OF STATUS;

     EXEC SQL DECLARE RD_GROUP_EXAMS_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_GROUP_EXAMS
			  WHERE   GROUP_EXAM_CODE = :d_master_code
			  OR      COMPONENT_EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_EXAM_VIEWS_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_EXAM_VIEWS
			  WHERE   EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_ITEMS_FOR_EXAM_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_ITEMS_FOR_EXAM
			  WHERE   EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_CONFLICTING_EXAMS_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_CONFLICTING_EXAMS
			  WHERE	  EXAM_CODE_1 = :d_master_code
				 OR   EXAM_CODE_2 = :d_master_code;

     EXEC SQL DECLARE RD_EXAMS_REQUESTED_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_EXAM_VIEW_REQUESTED
			  WHERE	  OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_EXAM_VIEW_REQUESTED_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_EXAM_VIEW_REQUESTED
			  WHERE	  OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_ITEMS_CONSUMED_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_ITEMS_CONSUMED
			  WHERE	  OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_ITEM_BLNG_SRVC_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_ITEM_BLNG_SRVC
			  WHERE	  OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_ITEM_BATCH_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_ITEM_BATCH
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_OTHER_CHARGES_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_OTHER_CHARGES
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_PAT_EXAM_CONFLICTS_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_PAT_EXAM_CONFLICTS
			  WHERE   EXAM_CODE = :d_master_code;

     /*EXEC SQL DECLARE RD_RECORDS_INDEX_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_RECORDS_INDEX
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;*/ //rvN on 22/12/2003

     EXEC SQL DECLARE RD_APPT_EXAMS_3_CUR  CURSOR FOR
			  SELECT  'X'
			  FROM    RD_APPT
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_APPT_EXAMS_DEL_TR_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_APPT_DEL_TR
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE RD_APPT_STATS_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_APPT_STATS
			  WHERE   OPERATING_FACILITY_ID = :d_facility_id 
			  AND     EXAM_CODE = :d_master_code;

     EXEC SQL DECLARE OR_ORDER_LINE_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    OR_ORDER_LINE, OR_ORDER
			  WHERE   NVL(OR_ORDER.ORDERING_FACILITY_ID,OR_ORDER.PERFORMING_FACILITY_ID) = :d_facility_id 
			  AND     OR_ORDER_LINE.ORDER_TYPE_CODE = OR_ORDER.ORDER_TYPE_CODE
			  AND     OR_ORDER_LINE.ORDER_ID = OR_ORDER.ORDER_ID
			  AND     OR_ORDER_LINE.ORDER_CATEGORY = 'RAD'
			  AND     ORDER_CATALOG_CODE = :d_master_code;

     /*EXEC SQL DECLARE OR_ORDER_LINE_DTL_3_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    OR_ORDER_LINE_DTL, OR_ORDER
			  WHERE   OR_ORDER_LINE_DTL.ORDER_TYPE_CODE = OR_ORDER.ORDER_TYPE_CODE
			  AND     OR_ORDER_LINE_DTL.ORDER_ID = OR_ORDER.ORDER_ID
			  AND     ORDER_CATEGORY = 'RAD'
			  AND     ORDER_CATALOG_CODE= :d_master_code;*/ //commented by rvN on 09/10/2003 table not found OR_ORDER_LINE_DTL

	EXEC SQL OPEN RD_EXAMINATION_CUR;

    if (OERROR)
      err_mesg("OPEN failed on cursor RD_EXAMINATION_CUR",0,"");

    while (fetch_examination())
	{
   		EXEC SQL OPEN RD_GROUP_EXAMS_3_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_GROUP_EXAMS_3_CUR",0,"");

		EXEC SQL FETCH RD_GROUP_EXAMS_3_CUR 
	    		  INTO  :d_dummy;
		
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_GROUP_EXAMS_3_CUR",0,"");
		
		if (sqlca.sqlcode EQ 0)
		{
			log_messg("RD0249","RD_GROUP_EXAMS");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_EXAM_VIEWS_3_CUR;
			if (OERROR) 
				err_mesg("OPEN failed on cursor RD_EXAM_VIEWS_3_CUR",0,"");

			EXEC SQL FETCH RD_EXAM_VIEWS_3_CUR 
	     			  INTO  :d_dummy;
			
			if (OERROR) 
				err_mesg("FETCH failed on cursor RD_EXAM_VIEWS_3_CUR",0,"");

			if (sqlca.sqlcode EQ 0)
			{
				log_messg("RD0249","RD_EXAM_VIEWS");
				continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		EXEC SQL OPEN RD_ITEMS_FOR_EXAM_3_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ITEMS_FOR_EXAM_3_CUR",0,"");
		
		EXEC SQL FETCH RD_ITEMS_FOR_EXAM_3_CUR 
				  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ITEMS_FOR_EXAM_3_CUR",0,"");
		
		if (sqlca.sqlcode EQ 0){
			log_messg("RD0249","RD_ITEMS_FOR_EXAM");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_CONFLICTING_EXAMS_3_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_CONFLICTING_EXAMS_3_CUR",0,"");

		EXEC SQL FETCH RD_CONFLICTING_EXAMS_3_CUR 
	     		  INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_CONFLICTING_EXAMS_3_CUR",0,"");

		if (sqlca.sqlcode EQ 0){
			log_messg("RD0249","RD_CONFLICTING_EXAMS");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		
		EXEC SQL OPEN RD_EXAMS_REQUESTED_3_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAMS_REQUESTED_3_CUR",0,"");

		EXEC SQL FETCH RD_EXAMS_REQUESTED_3_CUR 
	     		  INTO :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAMS_REQUESTED_3_CUR",0,"");

		if (sqlca.sqlcode EQ 0){
			log_messg("RD0249","RD_EXAMS_REQUESTED");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_EXAM_VIEW_REQUESTED_3_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAM_VIEW_REQUESTED_3_CUR",0,"");

		EXEC SQL FETCH RD_EXAM_VIEW_REQUESTED_3_CUR 
	     		  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAM_VIEW_REQUESTED_3_CUR",0,"");

		if (sqlca.sqlcode EQ 0){
			log_messg("RD0249","RD_EXAM_VIEW_REQUESTED");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_ITEMS_CONSUMED_3_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ITEMS_CONSUMED_3_CUR",0,"");

		EXEC SQL FETCH RD_ITEMS_CONSUMED_3_CUR 
	     		  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ITEMS_CONSUMED_3_CUR",0,"");

		if (sqlca.sqlcode EQ 0){
				log_messg("RD0249","RD_ITEMS_CONSUMED");
				continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_ITEM_BLNG_SRVC_3_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ITEM_BLNG_SRVC_3_CUR",0,"");

		EXEC SQL FETCH RD_ITEM_BLNG_SRVC_3_CUR 
	     		  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ITEM_BLNG_SRVC_3_CUR",0,"");

		if (sqlca.sqlcode EQ 0){
			log_messg("RD0249","RD_ITEM_BLNG_SRVC");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_ITEM_BATCH_3_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ITEM_BATCH_3_CUR",0,"");

		EXEC SQL FETCH RD_ITEM_BATCH_3_CUR 
				  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ITEM_BATCH_3_CUR",0,"");

		if (sqlca.sqlcode EQ 0){
			log_messg("RD0249","RD_ITEM_BATCH");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_OTHER_CHARGES_3_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_OTHER_CHARGES_3_CUR",0,"");

		  EXEC SQL FETCH RD_OTHER_CHARGES_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_OTHER_CHARGES_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_OTHER_CHARGES");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  EXEC SQL OPEN RD_PAT_EXAM_CONFLICTS_3_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_PAT_EXAM_CONFLICTS_3_CUR",0,"");

		  EXEC SQL FETCH RD_PAT_EXAM_CONFLICTS_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_PAT_EXAM_CONFLICTS_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_PAT_EXAM_CONFLICTS");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  /*EXEC SQL OPEN RD_RECORDS_INDEX_3_CUR;
		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_RECORDS_INDEX_3_CUR",0,"");

		  EXEC SQL FETCH RD_RECORDS_INDEX_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_RECORDS_INDEX_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_RECORDS_INDEX");
			   continue; 
			}	 */ //rvN on 22nd Dec 2003
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  EXEC SQL OPEN RD_APPT_EXAMS_3_CUR;
		  
		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_EXAMS_3_CUR",0,"");

		  EXEC SQL FETCH RD_APPT_EXAMS_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_EXAMS_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_APPT_EXAMS");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  EXEC SQL OPEN RD_APPT_EXAMS_DEL_TR_3_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_EXAMS_DEL_TR_3_CUR",0,"");

		  EXEC SQL FETCH RD_APPT_EXAMS_DEL_TR_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_EXAMS_DEL_TR_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_APPT_EXAMS_DEL_TR");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  EXEC SQL OPEN RD_APPT_STATS_3_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_STATS_3_CUR",0,"");

		  EXEC SQL FETCH RD_APPT_STATS_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_STATS_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_APPT_STATS");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  EXEC SQL OPEN OR_ORDER_LINE_3_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor OR_ORDER_LINE_3_CUR",0,"");

		  EXEC SQL FETCH OR_ORDER_LINE_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor OR_ORDER_LINE_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","OR_ORDER_LINE");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		/*EXEC SQL OPEN OR_ORDER_LINE_DTL_3_CUR;

			if (OERROR) 
			err_mesg("OPEN failed on cursor OR_ORDER_LINE_DTL_3_CUR",0,"");

		  EXEC SQL FETCH OR_ORDER_LINE_DTL_3_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor OR_ORDER_LINE_DTL_3_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","OR_ORDER_LINE_DTL");
			   continue; 
		}*/

		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_EXAMINATION
				  WHERE CURRENT OF RD_EXAMINATION_CUR; 

		if (OERROR)
			err_mesg("DELETE failed on table RD_EXAMINATION",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} /* end of while  */

     EXEC SQL CLOSE RD_EXAMINATION_CUR;
     EXEC SQL CLOSE RD_GROUP_EXAMS_3_CUR;
     EXEC SQL CLOSE RD_EXAM_VIEWS_3_CUR;
     EXEC SQL CLOSE RD_ITEMS_FOR_EXAM_3_CUR;
     EXEC SQL CLOSE RD_CONFLICTING_EXAMS_3_CUR;
     EXEC SQL CLOSE RD_EXAMS_REQUESTED_3_CUR;
     EXEC SQL CLOSE RD_EXAM_VIEW_REQUESTED_3_CUR;
     EXEC SQL CLOSE RD_ITEMS_CONSUMED_3_CUR;
     EXEC SQL CLOSE RD_ITEM_BLNG_SRVC_3_CUR;
     EXEC SQL CLOSE RD_ITEM_BATCH_3_CUR;
     EXEC SQL CLOSE RD_OTHER_CHARGES_3_CUR;
     EXEC SQL CLOSE RD_PAT_EXAM_CONFLICTS_3_CUR;
     //EXEC SQL CLOSE RD_RECORDS_INDEX_3_CUR;
     EXEC SQL CLOSE RD_APPT_EXAMS_3_CUR;
     EXEC SQL CLOSE RD_APPT_EXAMS_DEL_TR_3_CUR;
     EXEC SQL CLOSE RD_APPT_STATS_3_CUR;
     EXEC SQL CLOSE OR_ORDER_LINE_3_CUR;
     //EXEC SQL CLOSE OR_ORDER_LINE_DTL_3_CUR;
     //EXEC SQL CLOSE RD_RECORDS_INDEX_3_CUR;
  }

fetch_examination()
  {
     can_delete = TRUE;

     EXEC SQL FETCH RD_EXAMINATION_CUR
	      INTO  :d_master_code;

     if (OERROR) 
       err_mesg("FETCH failed on cursor RD_EXAMINATION_CUR",0,"");

     if (NO_DATA_FOUND) 
       return 0;

     d_master_code.arr[d_master_code.len] = '\0';

     if (DEBUG) {
       sprintf(string_var, "Exam Code = %s\n",d_master_code.arr);
       disp_message(ERR_MESG, string_var);       }

     return 1;
  }

/******************************* End of EXAM Grp  *****************************/
purge_clinic()
{

	EXEC SQL LOCK TABLE RD_CLINIC
			   IN EXCLUSIVE MODE NOWAIT;
	
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_CLINIC",0,"");

	EXEC SQL DECLARE RD_CLINIC_CUR CURSOR FOR 
			 SELECT  CLINIC_CODE 
			 FROM    RD_CLINIC
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_APPT_4_CUR CURSOR FOR 
			 SELECT  'X'
			 FROM    RD_APPT
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     CLINIC_CODE = :d_master_code;

	EXEC SQL DECLARE RD_APPT_DEL_TR_4_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_APPT_DEL_TR
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     CLINIC_CODE = :d_master_code;

	/*EXEC SQL DECLARE RD_CLINIC_SCHEDULE_4_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_CLINIC_SCHEDULE
	      WHERE   CLINIC_CODE = :d_master_code;
		  *** commented on 19/10/1998 */

	EXEC SQL DECLARE RD_CLINIC_TIME_TABLE_4_CUR CURSOR FOR 
			 SELECT  'X'
			 FROM    RD_CLINIC_TIME_TABLE
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     CLINIC_CODE = :d_master_code;

	/*EXEC SQL DECLARE RD_CLINIC_SCHEDULE_VALIDITY_4_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_CLINIC_SCHEDULE_VALIDITY
	      WHERE   CLINIC_CODE = :d_master_code; 
		  ***commented on 24/10/97*/

	EXEC SQL DECLARE RD_CLINIC_BREAK_4_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_CLINIC_BREAK
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     CLINIC_CODE = :d_master_code;

	EXEC SQL DECLARE RD_USER_CLINIC_RIGHTS_4_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_USER_CLINIC_RIGHTS
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     CLINIC_CODE = :d_master_code;

	EXEC SQL DECLARE RD_TRANS_RECORD_4_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_TRANS_RECORD
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     CLINIC_CODE = :d_master_code;

	EXEC SQL DECLARE RD_APPT_STATS_4_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_APPT_STATS
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     CLINIC_CODE = :d_master_code;

	/*EXEC SQL DECLARE RD_SERVICES_FOR_CLINIC_4_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_SERVICES_FOR_CLINIC
	      WHERE   CLINIC_CODE = :d_master_code; 
			**** commented on 19/10/1998  ****/

    EXEC SQL OPEN RD_CLINIC_CUR;

    if (OERROR)
		err_mesg("OPEN failed on cursor RD_CLINIC_CUR",0,"");

	while (fetch_clinic())
	{
		EXEC SQL OPEN RD_APPT_4_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_4_CUR",0,"");

		EXEC SQL FETCH RD_APPT_4_CUR 
	     		  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_4_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
	    {
	        log_messg("RD0249","RD_APPT");
	        continue; 
	    }
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		
		EXEC SQL OPEN RD_APPT_DEL_TR_4_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_DEL_TR_4_CUR",0,"");

		EXEC SQL FETCH RD_APPT_DEL_TR_4_CUR 
	     		  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_DEL_TR_4_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_APPT_DEL_TR");
	       continue; 
	    }
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/*  commented on 19/10/1998
   		EXEC SQL OPEN RD_CLINIC_SCHEDULE_4_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_CLINIC_SCHEDULE_4_CUR",0,"");

		  EXEC SQL FETCH RD_CLINIC_SCHEDULE_4_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_CLINIC_SCHEDULE_4_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_CLINIC_SCHEDULE");
			   continue; 
			}******/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		
		EXEC SQL OPEN RD_CLINIC_TIME_TABLE_4_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_CLINIC_TIME_TABLE_4_CUR",0,"");

		  EXEC SQL FETCH RD_CLINIC_TIME_TABLE_4_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_CLINIC_TIME_TABLE_4_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_CLINIC_TIME_TABLE");
			   continue; 
			}

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/* EXEC SQL OPEN RD_CLINIC_SCHEDULE_VALIDITY_4_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_CLINIC_SCHEDULE_VALIDITY_4_CUR",0,"");

		  EXEC SQL FETCH RD_CLINIC_SCHEDULE_VALIDITY_4_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_CLINIC_SCHEDULE_VALIDITY_4_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_CLINIC_SCHEDULE_VALIDITY");
			   continue; 
			}
			****commented on 24/10/97 */
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		EXEC SQL OPEN RD_CLINIC_BREAK_4_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_CLINIC_BREAK_4_CUR",0,"");

		EXEC SQL FETCH RD_CLINIC_BREAK_4_CUR 
	     		  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_CLINIC_BREAK_4_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
			{
				log_messg("RD0249","RD_CLINIC_BREAK");
				continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		EXEC SQL OPEN RD_USER_CLINIC_RIGHTS_4_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_USER_CLINIC_RIGHTS_4_CUR",0,"");

		EXEC SQL FETCH RD_USER_CLINIC_RIGHTS_4_CUR 
				  INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_USER_CLINIC_RIGHTS_4_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
			{
				log_messg("RD0249","RD_USER_CLINIC_RIGHTS");
				continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_TRANS_RECORD_4_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_TRANS_RECORD_4_CUR",0,"");

		EXEC SQL FETCH RD_TRANS_RECORD_4_CUR 
	     		  INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_TRANS_RECORD_4_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
			{
				log_messg("RD0249","RD_TRANS_RECORD");
				continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_APPT_STATS_4_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_STATS_4_CUR",0,"");
		EXEC SQL FETCH RD_APPT_STATS_4_CUR 
	     		  INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_STATS_4_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
			{
				log_messg("RD0249","RD_APPT_STATS");
				continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		/******* commented on 19/10/1998
		EXEC SQL OPEN RD_SERVICES_FOR_CLINIC_4_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_SERVICES_FOR_CLINIC_4_CUR",0,"");

		  EXEC SQL FETCH RD_SERVICES_FOR_CLINIC_4_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_SERVICES_FOR_CLINIC_4_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_SERVICES_FOR_CLINIC");
			   continue; 
			}**********/

		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_CLINIC
	   		      WHERE CURRENT OF RD_CLINIC_CUR; 
			if (OERROR)
				err_mesg("DELETE failed on table RD_CLINIC",0,"");

			if (sqlca.sqlcode EQ 0)
				log_messg("RD0250"," ");
	} /* end of while  */

    EXEC SQL CLOSE RD_CLINIC_CUR;
    EXEC SQL CLOSE RD_APPT_4_CUR;
    EXEC SQL CLOSE RD_APPT_DEL_TR_4_CUR;
    /*** commented on 19/10/1998 EXEC SQL CLOSE RD_CLINIC_SCHEDULE_4_CUR;   ****/
    EXEC SQL CLOSE RD_CLINIC_TIME_TABLE_4_CUR;
	//  EXEC SQL CLOSE RD_CLINIC_SCHEDULE_VALIDITY_4_CUR;
    EXEC SQL CLOSE RD_CLINIC_BREAK_4_CUR;
    EXEC SQL CLOSE RD_USER_CLINIC_RIGHTS_4_CUR;
    EXEC SQL CLOSE RD_TRANS_RECORD_4_CUR;
    EXEC SQL CLOSE RD_APPT_STATS_4_CUR;
    /**** commented on 19/10/1998 EXEC SQL CLOSE RD_SERVICES_FOR_CLINIC_4_CUR; ****/
}

fetch_clinic()
{
	can_delete = TRUE;

    EXEC SQL FETCH RD_CLINIC_CUR
              INTO  :d_master_code;

    if (OERROR) 
		err_mesg("FETCH failed on cursor RD_CLINIC_CUR",0,"");

	if (NO_DATA_FOUND) 
		return 0;

	d_master_code.arr[d_master_code.len] = '\0';

    if (DEBUG) {
		sprintf(string_var, "Section Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
     return 1;
}
/***************************** End of CLINIC Grp ******************************/

purge_appt_series()
{
	EXEC SQL LOCK TABLE RD_APPT_SERIES
               IN EXCLUSIVE MODE NOWAIT;
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_APPT_SERIES",0,"");

	EXEC SQL DECLARE RD_APPT_SERIES_CUR CURSOR FOR 
			 SELECT  APPT_SERIES_CODE
			 FROM    RD_APPT_SERIES
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 ANd     STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_CLINIC_5_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_CLINIC
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 ANd     APPT_SERIES_CODE = :d_master_code;

	EXEC SQL OPEN RD_APPT_SERIES_CUR;

    if (OERROR)
		err_mesg("OPEN failed on cursor RD_APPT_SERIES_CUR",0,"");

	while (fetch_appt_series())
    {
   		EXEC SQL OPEN RD_CLINIC_5_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_CLINIC_5_CUR",0,"");

		EXEC SQL FETCH RD_CLINIC_5_CUR 
				  INTO  :d_dummy;

		if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_CLINIC_5_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
	    {
			log_messg("RD0249","RD_CLINIC");
			continue; 
	    }

		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_APPT_SERIES
				  WHERE CURRENT OF RD_APPT_SERIES_CUR; 

		if (OERROR)
			err_mesg("DELETE failed on table RD_APPT_SERIES",0,"");

		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

    } /* end of while  */

	EXEC SQL CLOSE RD_APPT_SERIES_CUR;
    EXEC SQL CLOSE RD_CLINIC_5_CUR;
}

fetch_appt_series()
{
     can_delete = TRUE;

     EXEC SQL FETCH RD_APPT_SERIES_CUR
              INTO  :d_master_code;

     if (OERROR) 
       err_mesg("FETCH failed on cursor RD_APPT_SERIES_CUR",0,"");

     if (NO_DATA_FOUND) 
       return 0;

     d_master_code.arr[d_master_code.len] = '\0';

     if (DEBUG) {
       sprintf(string_var, "Appointment Series Code = %s\n",d_master_code.arr);
       disp_message(ERR_MESG, string_var); }
     return 1;
  }
/************************** End of APPT SERIES grp ****************************/
 
purge_view ()
{

	EXEC SQL LOCK TABLE RD_VIEW
               IN EXCLUSIVE MODE NOWAIT;

     if (RESOURCE_BUSY)
       err_mesg("TABLE cannot be locked in exclusive mode",0,"");
     else
       if (OERROR)
         err_mesg("LOCK failed on table RD_VIEW",0,"");

     EXEC SQL DECLARE RD_VIEW_CUR CURSOR FOR 
              SELECT  VIEW_CODE
			  FROM    RD_VIEW
			  WHERE   STATUS  = 'S' 
			  FOR     UPDATE  OF STATUS;

     EXEC SQL DECLARE RD_EXAM_VIEWS_6_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_EXAM_VIEWS
			  WHERE   VIEW_CODE = :d_master_code;

	/*NO VIEWS AVAILABLE IN TABLE */
    /* EXEC SQL DECLARE RD_EXAM_VIEW_REQUESTED_6_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_EXAM_VIEW_REQUESTED
			  WHERE   VIEW1_CODE = :d_master_code
			  OR      VIEW2_CODE = :d_master_code
			  OR      VIEW3_CODE = :d_master_code;

     EXEC SQL DECLARE RD_APPT_EXAMS_6_CUR  CURSOR FOR
			  SELECT  'X'
			  FROM    RD_APPT
			  WHERE   VIEW1_CODE = :d_master_code
			  OR      VIEW2_CODE = :d_master_code
			  OR      VIEW3_CODE = :d_master_code; 

     EXEC SQL DECLARE RD_APPT_EXAMS_DEL_TR_6_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    RD_APPT_EXAMS_DEL_TR
			  WHERE   VIEW1_CODE = :d_master_code
			  OR      VIEW2_CODE = :d_master_code
			  OR      VIEW3_CODE = :d_master_code;

     EXEC SQL DECLARE OR_ORDER_LINE_DTL_6_CUR CURSOR FOR 
              SELECT  'X'
			  FROM    OR_ORDER_LINE_DTL
			  WHERE   VIEW1_CODE = :d_master_code
			  OR      VIEW2_CODE = :d_master_code
			  OR      VIEW3_CODE = :d_master_code;*/

	EXEC SQL OPEN RD_VIEW_CUR;

    if (OERROR)
		err_mesg("OPEN failed on cursor RD_VIEW_CUR",0,"");

    while (fetch_view())
	{
   		EXEC SQL OPEN RD_EXAM_VIEWS_6_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAM_VIEWS_6_CUR",0,"");

		EXEC SQL FETCH RD_EXAM_VIEWS_6_CUR 
	     		  INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAM_VIEWS_6_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_EXAM_VIEWS");
	       continue; 
	    }
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		
		/*
   		  EXEC SQL OPEN RD_EXAM_VIEW_REQUESTED_6_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAM_VIEW_REQUESTED_6_CUR",0,"");

		  EXEC SQL FETCH RD_EXAM_VIEW_REQUESTED_6_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAM_VIEW_REQUESTED_6_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_EXAM_VIEW_REQUESTED");
			   continue; 
			}*/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		/* EXEC SQL OPEN RD_APPT_EXAMS_6_CUR;
		  
		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_EXAMS_6_CUR",0,"");

		  EXEC SQL FETCH RD_APPT_EXAMS_6_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_EXAMS_6_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_APPT_EXAMS");
			   continue; 
			}*/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		/*EXEC SQL OPEN RD_APPT_EXAMS_DEL_TR_6_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_APPT_EXAMS_DEL_TR_6_CUR",0,"");

		  EXEC SQL FETCH RD_APPT_EXAMS_DEL_TR_6_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_APPT_EXAMS_DEL_TR_6_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_APPT_EXAMS_DEL_TR");
			   continue; 
			}*/
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		/*EXEC SQL OPEN OR_ORDER_LINE_DTL_6_CUR;

		if (OERROR) 
		  err_mesg("OPEN failed on cursor OR_ORDER_LINE_DTL_6_CUR",0,"");

		EXEC SQL FETCH OR_ORDER_LINE_DTL_6_CUR 
	   		   INTO  :d_dummy;

		if (OERROR) 
		  err_mesg("FETCH failed on cursor OR_ORDER_LINE_DTL_6_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
		  {
			 log_messg("RD0249","OR_ORDER_LINE_DTL");
			 continue; 
		  }*/

		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_VIEW
				  WHERE CURRENT OF RD_VIEW_CUR; 

		if (OERROR)
			err_mesg("DELETE failed on table RD_VIEW",0,"");

		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

	} /* end of while  */

    EXEC SQL CLOSE RD_VIEW_CUR;
    EXEC SQL CLOSE RD_EXAM_VIEWS_6_CUR;
    /* EXEC SQL CLOSE RD_EXAM_VIEW_REQUESTED_6_CUR;
    EXEC SQL CLOSE RD_APPT_EXAMS_6_CUR;
    EXEC SQL CLOSE RD_APPT_EXAMS_DEL_TR_6_CUR;
    EXEC SQL CLOSE OR_ORDER_LINE_DTL_6_CUR;*/
}

fetch_view()
{
	can_delete = TRUE;

    EXEC SQL FETCH RD_VIEW_CUR
		      INTO  :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_VIEW_CUR",0,"");

	if (NO_DATA_FOUND) 
		return 0;

	d_master_code.arr[d_master_code.len] = '\0';
	if (DEBUG) {
       sprintf(string_var, "Exam Code = %s\n",d_master_code.arr);
       disp_message(ERR_MESG, string_var); }
       
     return 1;
}
/**********************End of View Purging*******************/

/**********************purging for Organ Sites**************/
purge_organ_site ()
{

	EXEC SQL LOCK TABLE RD_ORGAN_SITE
			   IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_ORGAN_SITE",0,"");

	EXEC SQL DECLARE RD_ORGAN_SITE_CUR CURSOR FOR 
			 SELECT  ORGAN_SITE_ID
			 FROM    RD_ORGAN_SITE
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_EX_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_EXAMINATION
			 WHERE   ORGAN_SITE_ID = :d_master_code;

     EXEC SQL OPEN RD_ORGAN_SITE_CUR;

     if (OERROR)
       err_mesg("OPEN failed on cursor RD_ORGAN_SITE_CUR",0,"");

     while (fetch_organ_site())
       {
   	  EXEC SQL OPEN RD_EX_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_EX_CUR",0,"");

	  EXEC SQL FETCH RD_EX_CUR 
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_EX_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_EXAMINATION");
	       continue; 
	    }


		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
        /*******************************************************************/

		EXEC SQL DELETE RD_ORGAN_SITE
	   			  WHERE CURRENT OF RD_ORGAN_SITE_CUR; 

		if (OERROR)
			err_mesg("DELETE failed on table RD_ORGAN_SITE",0,"");

		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

	} /* end of while  */

    EXEC SQL CLOSE RD_ORGAN_SITE_CUR;
	EXEC SQL CLOSE RD_EX_CUR;
  
}

fetch_organ_site()
{
	can_delete = TRUE;

    EXEC SQL FETCH RD_ORGAN_SITE_CUR
			  INTO  :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_ORGAN_SITE_CUR",0,"");

	if (NO_DATA_FOUND) 
		return 0;

	d_master_code.arr[d_master_code.len] = '\0';

    if (DEBUG) {
		sprintf(string_var, "Organ Site = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
       
	return 1;
}

/**********************End of organ sites Purging*******************/

/**********************purging for Transport Modes**************/
purge_trans_mode_code ()
{
	EXEC SQL LOCK TABLE RD_TRANSPORT_MODE
               IN EXCLUSIVE MODE NOWAIT;
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_TRANSPORT_MODE",0,"");

	EXEC SQL DECLARE RD_TRANSPORT_MODE_CUR CURSOR FOR 
			 SELECT  TRANS_MODE_CODE
			 FROM    RD_TRANSPORT_MODE
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_AP_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_APPT
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND	 TRANSPORT_MODE = :d_master_code;

    EXEC SQL DECLARE RD_AP_DT_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_APPT_DEL_TR
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND	 TRANSPORT_MODE = :d_master_code;

	EXEC SQL OPEN RD_TRANSPORT_MODE_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_TRANSPORT_MODE_CUR",0,"");
	
	while (fetch_trans_mode_code())
    {
   		EXEC SQL OPEN RD_AP_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_AP_CUR",0,"");

		EXEC SQL FETCH RD_AP_CUR 
	     		 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_AP_CUR",0,"");

		if (sqlca.sqlcode EQ 0){
	       log_messg("RD0249","RD_APPT");
	       continue; 
		}

		EXEC SQL OPEN RD_AP_DT_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_AP_DT_CUR",0,"");

		EXEC SQL FETCH RD_AP_DT_CUR 
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_AP_DT_CUR",0,"");

		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_APPT_DEL_TR");
			continue; 
		}  
		
		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_TRANSPORT_MODE
				 WHERE  CURRENT OF RD_TRANSPORT_MODE_CUR; 

		if (OERROR)
			err_mesg("DELETE failed on table RD_TRANSPORT_MODE",0,"");

		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} /* end of while  */
    EXEC SQL CLOSE RD_TRANSPORT_MODE_CUR;
    EXEC SQL CLOSE RD_AP_CUR;
	EXEC SQL CLOSE RD_AP_DT_CUR;
}

fetch_trans_mode_code()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_TRANSPORT_MODE_CUR
			 INTO  :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_TRANSPORT_MODE_CUR",0,"");

	if (NO_DATA_FOUND) 
		return 0;

	d_master_code.arr[d_master_code.len] = '\0';

    if (DEBUG) {
		sprintf(string_var, "Taransport Mode = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
     return 1;
}

/**********************End of Transport Mode Purging*******************/

/**********************purging For Reported****************/
/*purge_reporter()
{

     EXEC SQL LOCK TABLE RD_REPORTED
              IN EXCLUSIVE MODE NOWAIT;

     if (RESOURCE_BUSY)
       err_mesg("TABLE cannot be locked in exclusive mode",0,"");
     else
       if (OERROR)
         err_mesg("LOCK failed on table RD_REPORTED",0,"");

     EXEC SQL DECLARE RD_REPORTED_CUR CURSOR FOR 
               SELECT REPORT_ID
	             FROM RD_REPORTED
	            WHERE STATUS  = 'S' 
	              FOR UPDATE  OF STATUS;

     
      EXEC SQL DECLARE RD_EXAM_VIEW_REPORT_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_EXAM_VIEW_REQUESTED
	      WHERE   REPORTER_ID = :d_master_code;
	      

     EXEC SQL OPEN RD_REPORTED_CUR;

     if (OERROR)
       err_mesg("OPEN failed on cursor RD_REPORTED_CUR",0,"");

    while (fetch_reporter())
	{
   		  EXEC SQL OPEN RD_EXAM_VIEW_REPORT_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAM_VIEW_REPORT_CUR",0,"");

		  EXEC SQL FETCH RD_EXAM_VIEW_REPORT_CUR
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAM_VIEW_REPORT_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_EXAM_VIEW_REQUESTED");
			   continue; 
			}
	
		//******************************************************************
		//        If Master Code is not referenced in any table above      *
        //******************************************************************

		EXEC SQL DELETE RD_REPORTED
	   			 WHERE  CURRENT OF RD_REPORTED_CUR; 

		if (OERROR)
	    err_mesg("DELETE failed on table RD_REPORTED",0,"");

		if (sqlca.sqlcode EQ 0)
		log_messg("RD0250"," ");

	}  //end of while  
	EXEC SQL CLOSE RD_REPORTED_CUR;
    EXEC SQL CLOSE RD_EXAM_VIEW_REPORT_CUR;
}
fetch_reporter()
{
	can_delete = TRUE;

    EXEC SQL FETCH RD_REPORTED_CUR
			 INTO  :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_REPORTED_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';

    if (DEBUG) {
		sprintf(string_var, "Report Id  = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}*/

/**********************End of View Purging*******************/

/**********************purging For Radiologist****************/
/*purge_radiologist()
 {

     EXEC SQL LOCK TABLE RD_RADIOLOGIST
              IN EXCLUSIVE MODE NOWAIT;

     if (RESOURCE_BUSY)
       err_mesg("TABLE cannot be locked in exclusive mode",0,"");
     else
       if (OERROR)
         err_mesg("LOCK failed on table RD_RADIOLOGIST",0,"");

     EXEC SQL DECLARE RD_RADIOLOGIST_CUR CURSOR FOR 
              SELECT  RADIOLOGIST_ID
	      FROM    RD_RADIOLOGIST
	      WHERE   STATUS  = 'S' 
	      FOR     UPDATE  OF STATUS;

     
      EXEC SQL DECLARE RD_EXAM_VIEW_REQUESTED_CUR CURSOR FOR 
              SELECT  'X'
	      FROM    RD_EXAM_VIEW_REQUESTED
	      WHERE   RADIOLOGIST_ID = :d_master_code;
	      

     EXEC SQL OPEN RD_RADIOLOGIST_CUR;

     if (OERROR)
       err_mesg("OPEN failed on cursor RD_RADIOLOGIST_CUR",0,"");

     while (fetch_radiologist())
       {
   	  EXEC SQL OPEN RD_EXAM_VIEW_REQUESTED_CUR;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_EXAM_VIEW_REQUESTED_CUR",0,"");

	  EXEC SQL FETCH RD_EXAM_VIEW_REQUESTED_CUR
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_EXAM_VIEW_REQUESTED_CUR",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_EXAM_VIEW_REQUESTED");
	       continue; 
	    }

	  //*******************************************************************
	  //*        If Master Code is not referenced in any table above      *
	  //*******************************************************************


	  EXEC SQL DELETE RD_RADIOLOGIST
	   	   WHERE CURRENT OF RD_RADIOLOGIST_CUR; 

	  if (OERROR)
	    err_mesg("DELETE failed on table RD_RADIOLOGIST",0,"");

	  if (sqlca.sqlcode EQ 0)
	    log_messg("RD0250"," ");

       } // end of while

     EXEC SQL CLOSE RD_RADIOLOGIST_CUR;
     EXEC SQL CLOSE RD_EXAM_VIEW_REQUESTED_CUR;
     
}

fetch_radiologist()
{
     can_delete = TRUE;

     EXEC SQL FETCH RD_RADIOLOGIST_CUR
	      INTO  :d_master_code;

     if (OERROR) 
       err_mesg("FETCH failed on cursor RD_RADIOLOGIST_CUR",0,"");

     if (NO_DATA_FOUND) 
       return 0;

     d_master_code.arr[d_master_code.len] = '\0';

     if (DEBUG) {
       sprintf(string_var, "Radiologist Id  = %s\n",d_master_code.arr);
       disp_message(ERR_MESG, string_var); }
       
     return 1;
}*/
/**********************End of Radiologist Purging************/

/************************Purging For Technician****************/
/*purge_technician()
{

     EXEC SQL LOCK TABLE RD_TECHNICIAN
              IN EXCLUSIVE MODE NOWAIT;

     if (RESOURCE_BUSY)
       err_mesg("TABLE cannot be locked in exclusive mode",0,"");
     else
       if (OERROR)
         err_mesg("LOCK failed on table RD_TECHNICIAN",0,"");

     EXEC SQL DECLARE RD_TECHNICIAN_CUR CURSOR FOR 
              SELECT  TECHNICIAN_ID
	      FROM    RD_TECHNICIAN
	      WHERE   STATUS  = 'S' 
	      FOR     UPDATE  OF STATUS;

     
      EXEC SQL DECLARE RD_EXAM_VIEW_REQUESTED_CUR1 CURSOR FOR 
              SELECT  'X'
	      FROM    RD_EXAM_VIEW_REQUESTED
	      WHERE   TECHNICIAN_ID = :d_master_code
	      OR      TECHNICIAN_ID2 = :d_master_code
	      OR      TECHNICIAN_ID3 = :d_master_code;
		  

     EXEC SQL OPEN RD_TECHNICIAN_CUR;

     if (OERROR)
       err_mesg("OPEN failed on cursor RD_TECHNICIAN_CUR",0,"");

     while (fetch_technician())
       {
   	  EXEC SQL OPEN RD_EXAM_VIEW_REQUESTED_CUR1;

	  if (OERROR) 
	    err_mesg("OPEN failed on cursor RD_EXAM_VIEW_REQUESTED_CUR1",0,"");

	  EXEC SQL FETCH RD_EXAM_VIEW_REQUESTED_CUR1
	     	   INTO  :d_dummy;

	  if (OERROR) 
	    err_mesg("FETCH failed on cursor RD_EXAM_VIEW_REQUESTED_CUR1",0,"");

	  if (sqlca.sqlcode EQ 0)
	    {
	       log_messg("RD0249","RD_EXAM_VIEW_REQUESTED");
	       continue; 
	    }

		//*****************************************************************
		//        If Master Code is not referenced in any table above      
		//*****************************************************************

		EXEC SQL DELETE RD_TECHNICIAN
	   	   WHERE CURRENT OF RD_TECHNICIAN_CUR; 

	  if (OERROR)
	    err_mesg("DELETE failed on table RD_TECHNICIAN",0,"");

	  if (sqlca.sqlcode EQ 0)
	    log_messg("RD0250"," ");

       } // end of while

     EXEC SQL CLOSE RD_TECHNICIAN_CUR;
     EXEC SQL CLOSE RD_EXAM_VIEW_REQUESTED_CUR1;
}

fetch_technician()
{
     can_delete = TRUE;

     EXEC SQL FETCH RD_TECHNICIAN_CUR
	      INTO  :d_master_code;

     if (OERROR) 
       err_mesg("FETCH failed on cursor RD_TECHNICIAN_CUR",0,"");

     if (NO_DATA_FOUND) 
       return 0;

     d_master_code.arr[d_master_code.len] = '\0';

     if (DEBUG)  {
       sprintf(string_var, "Technician Id  = %s\n",d_master_code.arr);
       disp_message(ERR_MESG, string_var); }
       
     return 1;
}*/
/************************END OF TECHNICIAN PURGING***********************/

/********************Purging for Records Media Type*********************/
purge_records_media()
{

	EXEC SQL LOCK TABLE RD_RECORDS_MEDIA
			   IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_RECORDS_MEDIA",0,"");

	EXEC SQL DECLARE RD_RECORDS_MEDIA_TYPE_CUR CURSOR FOR 
			 SELECT  MEDIA_TYPE_CODE
			 FROM    RD_RECORDS_MEDIA
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_DEF_STORAGE_LOCN_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_DEF_STORAGE_LOCN
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     MEDIA_TYPE_CODE = :d_master_code;

    EXEC SQL DECLARE RD_EXAM_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_EXAMINATION
			 WHERE   MEDIA_TYPE_CODE = :d_master_code;

    EXEC SQL DECLARE RD_EXAM_VIEW_REQ_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_EXAM_VIEW_REQUESTED
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     MEDIA_TYPE_CODE = :d_master_code;
  
    /*EXEC SQL DECLARE RD_RECORDS_IND_1_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_RECORDS_INDEX
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     MEDIA_TYPE_CODE = :d_master_code;	 */ //rvN on 22nd Dec 2003
    
    EXEC SQL OPEN RD_RECORDS_MEDIA_TYPE_CUR;

    if (OERROR)
      err_mesg("OPEN failed on cursor RD_RECORDS_MEDIA_TYPE_CUR",0,"");

	while (fetch_records_media())
	{
   		EXEC SQL OPEN RD_DEF_STORAGE_LOCN_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_DEF_STORAGE_LOCN_CUR",0,"");
		
		EXEC SQL FETCH RD_DEF_STORAGE_LOCN_CUR
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_DEF_STORAGE_LOCN_CUR",0,"");
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_DEF_STORAGE_LOCN");
			continue; 
	    }
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_EXAM_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAM_CUR",0,"");

		EXEC SQL FETCH RD_EXAM_CUR
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAM_CUR",0,"");
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_EXAMINATION");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_EXAM_VIEW_REQ_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAM_VIEW_REQ_CUR",0,"");
		
		EXEC SQL FETCH RD_EXAM_VIEW_REQ_CUR
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAM_VIEW_REQ_CUR",0,"");
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_EXAM_VIEW_REQUESTED");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		//EXEC SQL OPEN RD_RECORDS_IND_1_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_RECORDS_IND_1_CUR",0,"");

		//EXEC SQL FETCH RD_RECORDS_IND_1_CUR 
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_RECORDS_IND_1_CUR",0,"");
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_RECORDS_INDEX");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		
		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_RECORDS_MEDIA
	   			 WHERE CURRENT OF RD_RECORDS_MEDIA_TYPE_CUR; 
		if (OERROR)
			err_mesg("DELETE failed on table RD_RECORDS_MEDIA",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} /* end of while  */

    EXEC SQL CLOSE RD_RECORDS_MEDIA_TYPE_CUR;
	EXEC SQL CLOSE RD_DEF_STORAGE_LOCN_CUR;
	EXEC SQL CLOSE RD_EXAM_CUR;
    EXEC SQL CLOSE RD_EXAM_VIEW_REQ_CUR;
	//EXEC SQL CLOSE RD_RECORDS_IND_1_CUR;
}

fetch_records_media()
{
	can_delete = TRUE;

    EXEC SQL FETCH RD_RECORDS_MEDIA_TYPE_CUR
             INTO  :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_RECORDS_MEDIA_TYPE_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';

    if (DEBUG) {
		sprintf(string_var, "Media Type Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/*********************End of Record Media Type Purging*****************/

/********************Purging for Records Stoarage Location*************/
purge_records_store()
{

     EXEC SQL LOCK TABLE RD_RECORDS_STORE
              IN EXCLUSIVE MODE NOWAIT;

     if (RESOURCE_BUSY)
       err_mesg("TABLE cannot be locked in exclusive mode",0,"");
     else
       if (OERROR)
         err_mesg("LOCK failed on table RD_RECORDS_STORE",0,"");

	EXEC SQL DECLARE RD_RECORDS_STORE_CUR CURSOR FOR 
             SELECT  STORAGE_LOCN_CODE
			 FROM    RD_RECORDS_STORE
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

    EXEC SQL DECLARE RD_DEF_STORAGE_LOCN_CUR1 CURSOR FOR 
             SELECT  'X'
			 FROM     RD_DEF_STORAGE_LOCN
			 WHERE    OPERATING_FACILITY_ID = :d_facility_id
			 AND      DEF_STORAGE_LOCN_CODE = :d_master_code;

	EXEC SQL DECLARE RD_EXAM_VIEW_REQ_CUR1 CURSOR FOR 
             SELECT  'X'
			 FROM     RD_EXAM_VIEW_REQUESTED
			 WHERE    OPERATING_FACILITY_ID = :d_facility_id
			 AND      STORAGE_LOCN_CODE = :d_master_code;

    EXEC SQL DECLARE RD_RECORDS_IND_1_CUR1 CURSOR FOR 
             SELECT  'X'
			 FROM    RD_RECORDS_INDEX
			 WHERE   FACILITY_ID = :d_facility_id
			 AND     STORAGE_LOCN_CODE = :d_master_code;
	
	EXEC SQL OPEN RD_RECORDS_STORE_CUR;

	if (OERROR)
		err_mesg("OPEN failed on cursor RD_RECORDS_STORE_CUR",0,"");

	while (fetch_records_store())
	{
   		EXEC SQL OPEN RD_DEF_STORAGE_LOCN_CUR1;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_DEF_STORAGE_LOCN_CUR1",0,"");
		
		EXEC SQL FETCH RD_DEF_STORAGE_LOCN_CUR1
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_DEF_STORAGE_LOCN_CUR1",0,"");
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_DEF_STORAGE_LOCN");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		EXEC SQL OPEN RD_EXAM_VIEW_REQ_CUR1;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXAM_VIEW_REQ_CUR1",0,"");

		EXEC SQL FETCH RD_EXAM_VIEW_REQ_CUR1
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXAM_VIEW_REQ_CUR1",0,"");
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_EXAM_VIEW_REQUESTED");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
			
		EXEC SQL OPEN RD_RECORDS_IND_1_CUR1;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_RECORDS_IND_1_CUR1",0,"");
		
		EXEC SQL FETCH RD_RECORDS_IND_1_CUR1 
				 INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_RECORDS_IND_1_CUR1",0,"");
		
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_RECORDS_INDEX");
			continue; 
		}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_RECORDS_STORE
				 WHERE CURRENT OF RD_RECORDS_STORE_CUR; 
		if (OERROR)
			err_mesg("DELETE failed on table RD_RECORDS_MEDIA",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} /* end of while  */

    EXEC SQL CLOSE RD_RECORDS_MEDIA_TYPE_CUR;
	EXEC SQL CLOSE RD_DEF_STORAGE_LOCN_CUR;
	EXEC SQL CLOSE RD_EXAM_VIEW_REQ_CUR;
	//EXEC SQL CLOSE RD_RECORDS_IND_1_CUR;
}

fetch_records_store()
{
	can_delete = TRUE;

    EXEC SQL FETCH RD_RECORDS_STORE_CUR
			 INTO  :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_RECORDS_STORE_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';

    if (DEBUG) {
		sprintf(string_var, "Storage Location Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }

     return 1;
  }

/*********************End of Record storage Location Purging*****************/

/************************************Purging for Wings **********************/
purge_wing()
{

	EXEC SQL LOCK TABLE RD_WINGS
			 IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_WINGS",0,"");

	EXEC SQL DECLARE RD_WING_CUR CURSOR FOR 
			 SELECT  WING_CODE
			 FROM    RD_WINGS
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	/*EXEC SQL DECLARE RD_PARAM_1_CUR CURSOR FOR 
			   SELECT  'X'
			   FROM    RD_PARAM
			   WHERE   WING_CODE = :d_master_code;*/ //commented by rvN on 09/10/2003 wing_code not available

	EXEC SQL DECLARE RD_SECTION_CTL_1_CUR CURSOR FOR 
			 SELECT  'X'
			 FROM    RD_SECTION_CTL
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     WING_CODE = :d_master_code;

    EXEC SQL DECLARE RD_WNG_DEF_STORAGE_LCN_1_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_DEF_STORAGE_LOCN
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     WING_CODE = :d_master_code;

    /*EXEC SQL DECLARE RD_WING_RECORDS_INDEX_1_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_RECORDS_INDEX
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     WING_CODE = :d_master_code;	 */ //rvN on 22nd Dec 2003

    EXEC SQL DECLARE RD_WING_CLINIC_1_CUR CURSOR FOR 
             SELECT  'X'
	         FROM    RD_CLINIC
	         WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     WING_CODE = :d_master_code;

    EXEC SQL DECLARE RD_WING_REQUEST_1_CUR CURSOR FOR 
             SELECT  'X'
			 FROM    RD_REQUEST
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     WING_CODE = :d_master_code;

	EXEC SQL OPEN RD_WING_CUR;

    if (OERROR)
		err_mesg("OPEN failed on cursor RD_WING_CUR",0,"");

	while (fetch_wing())
	{
		/*EXEC SQL OPEN RD_PARAM_1_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_PARAM_1_CUR",0,"");
		EXEC SQL FETCH RD_PARAM_1_CUR 
			INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_PARAM_1_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
	    {
			log_messg("RD0249","RD_PARAM");
			continue; 
	    }*/

		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		EXEC SQL OPEN RD_WNG_DEF_STORAGE_LCN_1_CUR;

		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_WNG_DEF_STORAGE_LCN_1_CUR",0,"");

		EXEC SQL FETCH RD_WNG_DEF_STORAGE_LCN_1_CUR 
	    		   INTO  :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_WNG_DEF_STORAGE_LCN_1_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_DEF_STORAGE_LOCN");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  EXEC SQL OPEN RD_WING_REQUEST_1_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_WING_REQUEST_1_CUR",0,"");

		  EXEC SQL FETCH RD_WING_REQUEST_1_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_WING_REQUEST_1_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_REQUEST");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		  /*EXEC SQL OPEN RD_WING_RECORDS_INDEX_1_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_WING_RECORDS_INDEX_1_CUR",0,"");

		  EXEC SQL FETCH RD_WING_RECORDS_INDEX_1_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_WING_RECORDS_INDEX_1_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_RECORDS_INDEX");
			   continue; 
			}	 */ //rvN on 22nd Dec 2003
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		  EXEC SQL OPEN RD_SECTION_CTL_1_CUR;

		  if (OERROR) 
			err_mesg("OPEN failed on cursor RD_SECTION_CTL_1_CUR",0,"");

		  EXEC SQL FETCH RD_SECTION_CTL_1_CUR 
	     		   INTO  :d_dummy;

		  if (OERROR) 
			err_mesg("FETCH failed on cursor RD_SECTION_CTL_1_CUR",0,"");

		  if (sqlca.sqlcode EQ 0)
			{
			   log_messg("RD0249","RD_SECTION_CTL");
			   continue; 
			}
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		EXEC SQL OPEN RD_WING_CLINIC_1_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_WING_CLINIC_1_CUR",0,"");
	  
		EXEC SQL FETCH RD_WING_CLINIC_1_CUR 
	     	     INTO  :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_WING_CLINIC_1_CUR",0,"");
		if (sqlca.sqlcode EQ 0) {
			log_messg("RD0249","RD_CLINIC");
			continue; 
	    }
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

   		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
        /*******************************************************************/

 		EXEC SQL DELETE RD_WINGS
	   			 WHERE CURRENT OF RD_WING_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_WINGS",0,"");

		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

		/* EXEC SQL DELETE RD_SECTION_CTL
		   WHERE SECTION_CODE = :d_master_code ;

		if (OERROR)
			err_mesg("DELETE failed on table RD_SECTION_CTL",0,"");
		if (sqlca.sqlcode EQ 0)
	    log_messg("RD0250"," ");*/

	} /* end of while  */

    EXEC SQL CLOSE RD_WING_CUR;
    EXEC SQL CLOSE RD_DEF_STORAGE_LOCN_1_CUR;
    EXEC SQL CLOSE RD_REQUEST_1_CUR;
    //EXEC SQL CLOSE RD_RECORDS_INDEX_1_CUR;
    EXEC SQL CLOSE RD_CLINIC_1_CUR;
    EXEC SQL CLOSE RD_SECTION_CTL_1_CUR;
	//EXEC SQL CLOSE RD_PARAM_1_CUR;
     
}

fetch_wing()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_WING_CUR
              INTO :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_WING_CUR",0,"");
	
	if (NO_DATA_FOUND) 
		return 0;

	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Wing Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/***************************** End of Wings ******************************/

/************************************Purging for Admin Reaction **********************/
purge_admin_reaction()
{
	EXEC SQL LOCK TABLE RD_ADMIN_REACTION
			 IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_ADMIN_REACTION",0,"");

	EXEC SQL DECLARE RD_ADMIN_REACTION_CUR CURSOR FOR 
			 SELECT  ADMIN_REACTION_CODE
			 FROM    RD_ADMIN_REACTION
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_ADMIN_REACTION_ITEMS_CUR CURSOR FOR 
			 SELECT  'X'
		         FROM    RD_ITEMS_CONSUMED
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     ADMIN_REACTION_CODE = :d_master_code;
	EXEC SQL OPEN RD_ADMIN_REACTION_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor ADMIN_REACTION_CUR",0,"");

	while (fetch_admin_reaction())
	{
		EXEC SQL OPEN RD_ADMIN_REACTION_ITEMS_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ADMIN_REACTION_ITEMS_CUR",0,"");

		EXEC SQL FETCH RD_ADMIN_REACTION_ITEMS_CUR 
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ADMIN_REACTION_ITEMS_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_ITEMS_CONSUMED");
		   continue; 
		}
   		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
	        /*******************************************************************/
 		EXEC SQL DELETE RD_ADMIN_REACTION
	   		  WHERE CURRENT OF RD_ADMIN_REACTION_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_ADMIN_REACTION",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

	} /* end of while  */

    EXEC SQL CLOSE RD_ADMIN_REACTION_CUR;
	EXEC SQL CLOSE RD_ADMIN_REACTION_ITEMS_CUR;
}

fetch_admin_reaction()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_ADMIN_REACTION_CUR
                  INTO :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_ADMIN_REACTION_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Admin Reaction Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/***************************** End of Admin Reaction ************************/

/***************************** Purging for Admin Route **********************/
purge_admin_route()
{
	EXEC SQL LOCK TABLE RD_ADMIN_ROUTE
			 IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_ADMIN_ROUTE",0,"");

	EXEC SQL DECLARE RD_ADMIN_ROUTE_CUR CURSOR FOR 
			 SELECT  ADMIN_ROUTE_CODE
			 FROM    RD_ADMIN_ROUTE
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_ADMIN_ROUTE_ITEMS_CUR CURSOR FOR 
			 SELECT  'X'
		     FROM    RD_ITEMS_CONSUMED
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     ADMIN_ROUTE_CODE = :d_master_code;

	EXEC SQL OPEN RD_ADMIN_ROUTE_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor ADMIN_ROUTE_CUR",0,"");

	while (fetch_admin_route())
	{
		EXEC SQL OPEN RD_ADMIN_ROUTE_ITEMS_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ADMIN_ROUTE_ITEMS_CUR",0,"");

		EXEC SQL FETCH RD_ADMIN_ROUTE_ITEMS_CUR 
	    		  INTO :d_dummy;

		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ADMIN_ROUTE_ITEMS_CUR",0,"");

		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_ITEMS_CONSUMED");
		   continue; 
		}
		
   		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

 		EXEC SQL DELETE RD_ADMIN_ROUTE
	   		  WHERE CURRENT OF RD_ADMIN_ROUTE_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_ADMIN_ROUTE",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

	} /* end of while  */

    EXEC SQL CLOSE RD_ADMIN_ROUTE_CUR;
	EXEC SQL CLOSE RD_ADMIN_ROUTE_ITEMS_CUR;
     
}

fetch_admin_route()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_ADMIN_ROUTE_CUR
              INTO :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_ADMIN_ROUTE_CUR",0,"");
	
	if (NO_DATA_FOUND) 
		return 0;

	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Admin Route Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/***************************** End of Admin Route ******************************/

/***************************** Purging for Item Class **************************/
purge_item_class()
{
	EXEC SQL LOCK TABLE RD_ITEM_CLASS
			 IN EXCLUSIVE MODE NOWAIT;
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_ITEM_CLASS",0,"");

	EXEC SQL DECLARE ITEM_CLASS_CUR CURSOR FOR 
			 SELECT  ITEM_CLASS_CODE
			 FROM    RD_ITEM_CLASS
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;
	EXEC SQL DECLARE ITEM_CLASS_ITEMS_CUR CURSOR FOR 
			 SELECT  'X'
		         FROM    RD_ITEMS
			 WHERE   ITEM_CLASS_CODE = :d_master_code;

	EXEC SQL OPEN ITEM_CLASS_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor ITEM_CLASS_CUR",0,"");

	while (fetch_item_class())
	{
		EXEC SQL OPEN ITEM_CLASS_ITEMS_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor ITEM_CLASS_ITEMS",0,"");

		EXEC SQL FETCH ITEM_CLASS_ITEMS_CUR
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor ITEM_CLASS_ITEMS_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_ITEMS_CONSUMED");
		   continue; 
		}
	/*******************************************************************/
	/*        If Master Code is not referenced in any table above      */
	/*******************************************************************/
		EXEC SQL DELETE RD_ITEM_CLASS
	   		  WHERE CURRENT OF ITEM_CLASS_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_ITEM_CLASS",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} /* end of while  */

    EXEC SQL CLOSE ITEM_CLASS_CUR;
	EXEC SQL CLOSE ITEM_CLASS_ITEMS_CUR;
}

fetch_item_class()
{
	can_delete = TRUE;
	EXEC SQL FETCH ITEM_CLASS_CUR
                  INTO :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor ITEM_CLASS_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Item Class Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/***************************** End of Item Class ******************************/

/********************************* Items ************************************/
purge_items()
{
	EXEC SQL LOCK TABLE RD_ITEMS
			 IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_ITEMS",0,"");

	EXEC SQL DECLARE RD_ITEMS_CUR CURSOR FOR 
			 SELECT  ITEM_CODE
			 FROM    RD_ITEMS
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_ITM_ITEMS_CONSUMED_CUR CURSOR FOR 
			 SELECT  'X'
		     FROM    RD_ITEMS_CONSUMED
			 WHERE   OPERATING_FACILITY_ID = :d_facility_id
			 AND     ITEM_CODE = :d_master_code;

	EXEC SQL DECLARE RD_ITM_ITEMS_FOR_EXAM_CUR CURSOR FOR 
			 SELECT  'X'
		     FROM    RD_ITEMS_FOR_EXAM
			 WHERE   ITEM_CODE = :d_master_code;

	EXEC SQL OPEN RD_ITEMS_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_ITEMS_CUR",0,"");

	while (fetch_items())
	{
		EXEC SQL OPEN RD_ITM_ITEMS_CONSUMED_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ITM_ITEMS_CONSUMED_CUR CURSOR",0,"");

		EXEC SQL FETCH RD_ITM_ITEMS_CONSUMED_CUR
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ITM_ITEMS_CONSUMED_CUR CURSOR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_ITEMS_CONSUMED");
		   continue; 
		}
   		
		EXEC SQL OPEN RD_ITM_ITEMS_FOR_EXAM_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_ITM_ITEMS_FOR_EXAM_CUR CURSOR",0,"");

		EXEC SQL FETCH RD_ITM_ITEMS_FOR_EXAM_CUR 
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_ITM_ITEMS_FOR_EXAM_CUR CURSOR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_ITEMS_FOR_EXAM");
		   continue; 
		}
		
		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/
 		EXEC SQL DELETE RD_ITEMS
	   		  WHERE CURRENT OF RD_ITEMS_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_ITEMS",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

	} /* end of while  */

	EXEC SQL CLOSE RD_ITEMS_CUR;
}

fetch_items()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_ITEMS_CUR
                  INTO :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_ITEMS_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Items Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/*********************************** End of Items ************************************/

/***************************** Reason *****************************************/
purge_reason()
{
	EXEC SQL LOCK TABLE RD_REASONS
			 IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_REASONS",0,"");

	EXEC SQL LOCK TABLE RD_REASON_ACTION_TYPE
			 IN EXCLUSIVE MODE NOWAIT;
	
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_REASON_ACTION_TYPE",0,"");

	
	EXEC SQL DECLARE RD_REASONS_CUR CURSOR FOR 
			 SELECT  REASON_CODE
			 FROM    RD_REASONS
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_RSN_RCD_INDEX_MERGED_CUR CURSOR FOR 
			 SELECT  'X'
		     FROM    RD_RECORDS_INDEX_MERGED
			 WHERE   FACILITY_ID = :d_facility_id
			 AND     REASON_CODE = :d_master_code;

	EXEC SQL DECLARE RD_RSN_REQUEST_QUEUE_CUR CURSOR FOR 
			 SELECT  'X'
		     FROM    RD_REQUEST_QUEUE
			 WHERE   PERFORMING_FACILITY_ID = :d_facility_id
			 AND     REASON_CODE = :d_master_code;

	EXEC SQL OPEN RD_REASONS_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_REASONS_CUR",0,"");

	while (fetch_reason())
	{
		EXEC SQL OPEN RD_RSN_RCD_INDEX_MERGED_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_RSN_RCD_INDEX_MERGED_CUR",0,"");

		EXEC SQL FETCH RD_RSN_RCD_INDEX_MERGED_CUR 
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_RSN_RCD_INDEX_MERGED_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_RECORDS_INDEX_MERGED");
		   continue; 
		}
   		
		EXEC SQL OPEN RD_RSN_REQUEST_QUEUE_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_RSN_REQUEST_QUEUE_CUR",0,"");

		EXEC SQL FETCH RD_RSN_REQUEST_QUEUE_CUR 
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_RSN_REQUEST_QUEUE_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_REQUEST_QUEUE");
		   continue; 
		}
		
		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
	    /*******************************************************************/
 		EXEC SQL DELETE RD_REASON_ACTION_TYPE
	   		  WHERE REASON_CODE = :d_master_code;
		if (OERROR)
			err_mesg("DELETE failed on table RD_REASON_ACTION_TYPE",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

		EXEC SQL DELETE RD_REASONS
	   		  WHERE CURRENT OF RD_REASONS_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_REASON",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

		

	} /* end of while  */

    EXEC SQL CLOSE RD_REASONS_CUR;
	EXEC SQL CLOSE RD_RSN_RCD_INDEX_MERGED_CUR;
	EXEC SQL CLOSE RD_RSN_REQUEST_QUEUE_CUR;
}

fetch_reason()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_REASONS_CUR
              INTO :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_REASONS_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Reason Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/***************************** End of Reson **************************/

/***************************** Exam Category *************************/
purge_exam_category()
{
	EXEC SQL LOCK TABLE RD_EXAM_CATEGORY
			 IN EXCLUSIVE MODE NOWAIT;

	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_EXAM_CATEGORY",0,"");

	EXEC SQL DECLARE RD_EXAM_CATEGORY_CUR CURSOR FOR 
			 SELECT  EXAM_CATEGORY_CODE
			 FROM    RD_EXAM_CATEGORY
			 WHERE   STATUS  = 'S'
			 ORDER BY 1 DESC 
			 FOR     UPDATE  OF STATUS;

	EXEC SQL DECLARE RD_EXM_EXAM_CATEGORY_CUR CURSOR FOR 
			 SELECT  'X'
			 FROM    RD_EXAMS
			 WHERE   EXAM_CATEGORY_CODE = :d_master_code;

    EXEC SQL OPEN RD_EXAM_CATEGORY_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_EXAM_CATEGORY_CUR",0,"");

	while (fetch_exam_category())
	{
		
		EXEC SQL OPEN RD_EXM_EXAM_CATEGORY_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_EXM_EXAM_CATEGORY_CUR",0,"");

		EXEC SQL FETCH RD_EXM_EXAM_CATEGORY_CUR
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_EXM_EXAM_CATEGORY_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_EXAMS");
		   continue; 
		}
   		
		EXEC SQL SELECT  EXAM_CATEGORY_CODE
				 INTO    :d_dummy
				 FROM    RD_EXAM_CATEGORY
				 WHERE   SUBSTR(EXAM_CATEGORY_CODE,1,2) like :d_master_code||'%'
				 AND     EXAM_CATEGORY_LEVEL =2;
				 
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_EXAM_CATEGORY");
		   continue; 
		}
		/*******************************************************************/
		/*        If Master Code is not referenced in any table above      */
		/*******************************************************************/

		EXEC SQL DELETE RD_EXAM_CATEGORY
	   	   WHERE CURRENT OF RD_EXAM_CATEGORY_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_EXAM_CATEGORY",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");

	} /* end of while  */

	EXEC SQL CLOSE RD_EXAM_CATEGORY_CUR;
	EXEC SQL CLOSE RD_EXM_EXAM_CATEGORY_CUR;
}

fetch_exam_category()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_EXAM_CATEGORY_CUR
                  INTO :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_EXAM_CATEGORY_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Exam Category = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/***************************** End of Exam Category ********************************/

/***************************** Purging Diagnosis ***********************************/
purge_diagnosis()
{
	EXEC SQL LOCK TABLE RD_DIAGNOSIS
			 IN EXCLUSIVE MODE NOWAIT;
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_DIAGNOSIS",0,"");

	EXEC SQL DECLARE RD_DIAGNOSIS_CUR CURSOR FOR 
			 SELECT  DIAGNOSIS_CODE
			 FROM    RD_DIAGNOSIS
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;
	
	/*EXEC SQL DECLARE RD_DIAGN_RQST_LN_DIAGN_CUR CURSOR FOR 
			 SELECT  'X'
			 FROM    RD_REQUEST_LINE_DIAGNOSIS
			 WHERE   DIAGNOSIS_CODE = :d_master_code;*/

	EXEC SQL OPEN RD_DIAGNOSIS_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_DIAGNOSIS_CUR",0,"");

	while (fetch_diagnosis())
	{
		/*EXEC SQL OPEN RD_DIAGN_RQST_LN_DIAGN_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_DIAGN_RQST_LN_DIAGN_CUR",0,"");

		EXEC SQL FETCH RD_DIAGN_RQST_LN_DIAGN_CUR
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_DIAGN_RQST_LN_DIAGN_CUR",0,"");*/
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_REQUEST_LINE_DIAGNOSIS");
		   continue; 
		} 
	/*******************************************************************/
	/*        If Master Code is not referenced in any table above      */
	/*******************************************************************/
		EXEC SQL DELETE RD_DIAGNOSIS
	   		  WHERE CURRENT OF RD_DIAGNOSIS_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_DIAGNOSIS",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} /* end of while  */

	EXEC SQL CLOSE RD_DIAGNOSIS_CUR;
	//EXEC SQL CLOSE RD_DIAGN_RQST_LN_DIAGN_CUR;
}

fetch_diagnosis()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_DIAGNOSIS_CUR
                  INTO :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_DIAGNOSIS_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Diagnosis Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
/***************************** End of Diagnosis ************************************/

//----------------------- Purging Complication -----------------------
purge_complication()
{
	EXEC SQL LOCK TABLE RD_COMPLICATION
			 IN EXCLUSIVE MODE NOWAIT;
	
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_COMPLICATION",0,"");

	EXEC SQL 
	DECLARE RD_COMPLICATION_CUR CURSOR FOR 
	SELECT  complication_type
	FROM    rd_complication
	WHERE   NVL(status, 'Y') = 'S' 
	FOR     UPDATE  OF STATUS;
	
	EXEC SQL 
	DECLARE RD_COMP_RQST_LN_COMP_CUR CURSOR FOR 
	SELECT 'X'
	FROM   rd_request_line_complications
	WHERE  complication_type = :d_master_code;

	EXEC SQL OPEN RD_COMPLICATION_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_COMPLICATION_CUR",0,"");

	while (fetch_complication())
	{
		EXEC SQL OPEN RD_COMP_RQST_LN_COMP_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_COMP_RQST_LN_COMP_CUR",0,"");

		EXEC SQL FETCH RD_COMP_RQST_LN_COMP_CUR
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_COMP_RQST_LN_COMP_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_REQUEST_LINE_COMPLICATIONS");
		   continue; 
		}
	//+-----------------------------------------------------------------+
	//|        If Master Code is not referenced in any table above      |
	//+-----------------------------------------------------------------+
		EXEC SQL 
		DELETE rd_complication
		WHERE  CURRENT OF RD_COMPLICATION_CUR;
		
		if (OERROR)
			err_mesg("DELETE failed on table rd_complication",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} // end of while  

	EXEC SQL CLOSE RD_COMPLICATION_CUR;
	EXEC SQL CLOSE RD_COMP_RQST_LN_COMP_CUR;
}

fetch_complication()
{
	can_delete = TRUE;
	
	EXEC SQL 
	FETCH RD_COMPLICATION_CUR
    INTO  :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_COMPLICATION_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Complication Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
//------------------------ End of Complication -----------------------

//-------------------------- Management Type -------------------------
purge_management_type()
{
	EXEC SQL LOCK TABLE rd_comp_management_type
			 IN EXCLUSIVE MODE NOWAIT;
	
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table rd_comp_management_type",0,"");

	EXEC SQL 
	DECLARE RD_MANAGEMENT_CUR CURSOR FOR 
	SELECT  management_type
	FROM    rd_comp_management_type
	WHERE   NVL(status, 'Y') = 'S' 
	FOR     UPDATE  OF STATUS;
	
	EXEC SQL 
	DECLARE RD_COMP_RQST_LN_MNGMNT_CUR CURSOR FOR 
	SELECT 'X'
	FROM   rd_request_line_complications
	WHERE  management_type = :d_master_code;

	EXEC SQL OPEN RD_MANAGEMENT_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_MANAGEMENT_CUR",0,"");

	while (fetch_management_type())
	{
		EXEC SQL OPEN RD_COMP_RQST_LN_MNGMNT_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_COMP_RQST_LN_MNGMNT_CUR",0,"");

		EXEC SQL FETCH RD_COMP_RQST_LN_MNGMNT_CUR
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_COMP_RQST_LN_MNGMNT_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_REQUEST_LINE_COMPLICATIONS");
		   continue; 
		}
	//+-----------------------------------------------------------------+
	//|        If Master Code is not referenced in any table above      |
	//+-----------------------------------------------------------------+
		EXEC SQL 
		DELETE rd_comp_management_type
		WHERE  CURRENT OF RD_MANAGEMENT_CUR;
		
		if (OERROR)
			err_mesg("DELETE failed on table rd_comp_management_type",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} // end of while  

	EXEC SQL CLOSE RD_MANAGEMENT_CUR;
	EXEC SQL CLOSE RD_COMP_RQST_LN_MNGMNT_CUR;
}

fetch_management_type()
{
	can_delete = TRUE;
	
	EXEC SQL 
	FETCH RD_MANAGEMENT_CUR
    INTO  :d_master_code;

	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_MANAGEMENT_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Complication Management Type = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
//----------------------- End of Management Type ---------------------

log_messg(l_errid, l_table_name)
char *l_errid;
char *l_table_name;
{
	can_delete = FALSE;
    strcpy(d_msg_num.arr,l_errid);

    get_message(d_msg_num.arr,d_msg_desc.arr);
    strcat(d_msg_desc.arr,l_table_name);

    d_msg_num.len = strlen(d_msg_num.arr);
    d_msg_desc.len = strlen(d_msg_desc.arr);

    EXEC SQL INSERT INTO RD_PURGE_MSG
 			 VALUES ( :d_table_id,
	 				  :d_master_code,
					  :d_msg_num,
					  :d_msg_desc,
					  :d_ws_no,
					  :d_facility_id,
					  :d_ws_no,
					  :d_facility_id ) ;
	if (OERROR) 
		err_mesg("INSERT failed on table RD_PURGE_MSG",0,"");
}

del_param()
{
     EXEC SQL 
	 DELETE SY_PROG_PARAM
	 WHERE  OPERATING_FACILITY_ID = :d_facility_id 
	 AND	PGM_ID				  = 'RDBPURGE' 
	 AND	PGM_DATE			  = :d_pgm_date
	 AND	SESSION_ID			  = :d_session_id;

	if (OERROR) 
		err_mesg("DELETE failed on table SY_PROG_PARAM",0,""); 
}
//----------------------  End of Program  ----------------------------

/*
//--------------------- Purging Complication  ------------------------
purge_complication()
{
	EXEC SQL LOCK TABLE RD_RATE_OF_COMPLICATION
			 IN EXCLUSIVE MODE NOWAIT;
	
	if (RESOURCE_BUSY)
		err_mesg("TABLE cannot be locked in exclusive mode",0,"");
	else
		if (OERROR)
			err_mesg("LOCK failed on table RD_RATE_OF_COMPLICATION",0,"");

	EXEC SQL DECLARE RD_RATE_OF_COMPLICATION_CUR CURSOR FOR 
			 SELECT  RATE_OF_COMP_CODE
			 FROM    RD_RATE_OF_COMPLICATION
			 WHERE   STATUS  = 'S' 
			 FOR     UPDATE  OF STATUS;
	
	EXEC SQL DECLARE RD_COMP_RQST_LN_DIAGN_CUR CURSOR FOR 
			 SELECT  'X'
		     FROM    RD_REQUEST_LINE_DIAGNOSIS
			 WHERE   RATE_OF_COMP_CODE = :d_master_code;

	EXEC SQL OPEN RD_RATE_OF_COMPLICATION_CUR;
	if (OERROR)
		err_mesg("OPEN failed on cursor RD_RATE_OF_COMPLICATION_CUR",0,"");

	while (fetch_complication())
	{
		EXEC SQL OPEN RD_COMP_RQST_LN_DIAGN_CUR;
		if (OERROR) 
			err_mesg("OPEN failed on cursor RD_COMP_RQST_LN_DIAGN_CUR",0,"");

		EXEC SQL FETCH RD_COMP_RQST_LN_DIAGN_CUR
	    		  INTO :d_dummy;
		if (OERROR) 
			err_mesg("FETCH failed on cursor RD_COMP_RQST_LN_DIAGN_CUR",0,"");
		if (sqlca.sqlcode EQ 0)
		{
		   log_messg("RD0249","RD_REQUEST_LINE_DIAGNOSIS");
		   continue; 
		}
	//+--------------------------------------------------------------+
	//       If Master Code is not referenced in any table above     |
	//+--------------------------------------------------------------+
		EXEC SQL DELETE RD_RATE_OF_COMPLICATION
	   		      WHERE CURRENT OF RD_RATE_OF_COMPLICATION_CUR;
		if (OERROR)
			err_mesg("DELETE failed on table RD_RATE_OF_COMPLICATION",0,"");
		if (sqlca.sqlcode EQ 0)
			log_messg("RD0250"," ");
	} // end of while

	EXEC SQL CLOSE RD_RATE_OF_COMPLICATION_CUR;
	EXEC SQL CLOSE RD_COMP_RQST_LN_DIAGN_CUR;
}

fetch_complication()
{
	can_delete = TRUE;
	EXEC SQL FETCH RD_RATE_OF_COMPLICATION_CUR
              INTO :d_master_code;
	if (OERROR) 
		err_mesg("FETCH failed on cursor RD_RATE_OF_COMPLICATION_CUR",0,"");
	if (NO_DATA_FOUND) 
		return 0;
	d_master_code.arr[d_master_code.len] = '\0';
	
	if (DEBUG) {
		sprintf(string_var, "Complication Code = %s\n",d_master_code.arr);
		disp_message(ERR_MESG, string_var); }
	return 1;
}
//----------------------- End of Complication ------------------------
*/
/*
#define DEBUG
*/

#define OERROR (sqlca.sqlcode < 0)
#define NO_DATA (sqlca.sqlcode == 1403)  
#define EQ ==
 
EXEC SQL BEGIN DECLARE SECTION;

VARCHAR    t_main_acc1_code        [8],
	       t_main_acc2_code        [6],
	       t_dept_code             [8],
	       t_product_group_code    [4],
	       t_product_line_code     [6],
	       t_subledger_group_code  [4],
	       t_subledger_line_code   [10],
	       t_doc_type_code         [8],
           t_summ_process_flag     [2],
	       t_module_id             [4];

int i;
extern int d_curr_year,
	       d_curr_month,
           d_num_of_acc_periods;

extern char d_summ_flag;

double t_year_bal_cr,
       t_year_bal_dr,
	   t_year_bal_cr_fc,
	   t_year_bal_dr_fc,
	   t_latest_year_bal_cr,
	   t_latest_year_bal_dr,
	   t_latest_year_bal_cr_fc,
	   t_latest_year_bal_dr_fc;

long t_batch_num,
     t_doc_num;

varchar testing[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.h;


extern char g_pgm_id[];

extern char g_err_msg[];


do_prbal_year()  
{
	EXEC SQL INSERT INTO GL_PERIOD_ACC_BAL_LOCAL
			(MAIN_ACC1_CODE,MAIN_ACC2_CODE,DEPT_CODE,PRODUCT_GROUP_CODE,
			 PRODUCT_LINE_CODE,SUBLEDGER_GROUP_CODE,SUBLEDGER_LINE_CODE,
		     POST_MONTH,POST_YEAR,MONTH_BAL_CR,MONTH_BAL_DR,MONTH_BAL_CR_FC,MONTH_BAL_DR_FC,
			 YEAR_BAL_CR,YEAR_BAL_DR,YEAR_BAL_CR_FC,YEAR_BAL_DR_FC
			)
		    (SELECT A.MAIN_ACC1_CODE,A.MAIN_ACC2_CODE,A.DEPT_CODE,A.PRODUCT_GROUP_CODE,
					A.PRODUCT_LINE_CODE,A.SUBLEDGER_GROUP_CODE,A.SUBLEDGER_LINE_CODE,
					A.POST_MONTH,(A.POST_YEAR + 1),0,0,0,0,0,0,0,0
			   FROM GL_PERIOD_ACC_BAL_LOCAL A
              WHERE A.POST_YEAR = :d_curr_year 
                AND (A.MAIN_ACC1_CODE||A.MAIN_ACC2_CODE||A.DEPT_CODE||A.PRODUCT_GROUP_CODE||
                     A.PRODUCT_LINE_CODE||A.SUBLEDGER_GROUP_CODE||A.SUBLEDGER_LINE_CODE)
             NOT IN
            ( SELECT (B.MAIN_ACC1_CODE||B.MAIN_ACC2_CODE||B.DEPT_CODE||B.PRODUCT_GROUP_CODE||
                      B.PRODUCT_LINE_CODE||B.SUBLEDGER_GROUP_CODE||B.SUBLEDGER_LINE_CODE)
                FROM GL_PERIOD_ACC_BAL_LOCAL B
               WHERE B.POST_YEAR = (:d_curr_year + 1)
                 AND A.MAIN_ACC1_CODE = B.MAIN_ACC1_CODE
                 AND A.MAIN_ACC2_CODE = B.MAIN_ACC2_CODE
                 AND A.DEPT_CODE      = B.DEPT_CODE
                 AND A.PRODUCT_GROUP_CODE = B.PRODUCT_GROUP_CODE
                 AND A.PRODUCT_LINE_CODE  = B.PRODUCT_LINE_CODE
                 AND A.SUBLEDGER_GROUP_CODE = B.SUBLEDGER_GROUP_CODE
                 AND A.SUBLEDGER_LINE_CODE  = B.SUBLEDGER_LINE_CODE
			 ));
/*
    EXEC SQL INSERT INTO GL_PERIOD_ACC_BAL_LOCAL
	               ( MAIN_ACC1_CODE ,
		    	 MAIN_ACC2_CODE ,
		    	 DEPT_CODE ,
		    	 PRODUCT_GROUP_CODE ,
		    	 PRODUCT_LINE_CODE ,
		    	 SUBLEDGER_GROUP_CODE ,
		    	 SUBLEDGER_LINE_CODE ,
		    	 POST_MONTH ,
		    	 POST_YEAR ,
		    	 MONTH_BAL_CR ,
		    	 MONTH_BAL_DR ,
		    	 YEAR_BAL_CR ,
		    	 YEAR_BAL_DR 
		       )
	     SELECT      MAIN_ACC1_CODE ,
		    	 MAIN_ACC2_CODE ,
		    	 DEPT_CODE ,
		    	 PRODUCT_GROUP_CODE ,
		    	 PRODUCT_LINE_CODE ,
		    	 SUBLEDGER_GROUP_CODE ,
		    	 SUBLEDGER_LINE_CODE ,
		    	 POST_MONTH ,
		    	 POST_YEAR + 1,
		    	 0 ,
		    	 0 ,
		    	 0 ,
		    	 0 
	     FROM        GL_PERIOD_ACC_BAL_LOCAL
             WHERE      POST_YEAR = :d_curr_year;   
*/

    EXEC SQL DECLARE GL_PERIOD_YEAR CURSOR FOR
	     SELECT  A.MAIN_ACC1_CODE,
	             A.MAIN_ACC2_CODE,
	             A.DEPT_CODE,
	             A.PRODUCT_GROUP_CODE,
	             A.PRODUCT_LINE_CODE ,
	             A.SUBLEDGER_GROUP_CODE ,
	             A.SUBLEDGER_LINE_CODE,
		         A.YEAR_BAL_CR,
		         A.YEAR_BAL_DR,
			     A.YEAR_BAL_CR_FC,
			     A.YEAR_BAL_DR_FC
             FROM    GL_PERIOD_ACC_BAL_LOCAL A
	     WHERE   A.POST_MONTH  = :d_curr_month
	     AND     A.POST_YEAR   = :d_curr_year 
             AND     EXISTS (SELECT 'X' FROM GL_ACC_CHART B
			     WHERE   A.MAIN_ACC1_CODE = B.MAIN_ACC1_CODE
		             AND     A.MAIN_ACC2_CODE = B.MAIN_ACC2_CODE
			     AND     NVL(ACC_NATURE_CODE,'XX') = 'BS');

    EXEC SQL OPEN GL_PERIOD_YEAR;

    if(OERROR)
        err_mesg("OPEN failed on cursor GL_PERIOD_YEAR",0,"");

    while(fetch_period_year()) {
	
			t_latest_year_bal_cr = t_year_bal_cr;
			t_latest_year_bal_dr = t_year_bal_dr;
			t_latest_year_bal_cr_fc = t_year_bal_cr_fc;
			t_latest_year_bal_dr_fc = t_year_bal_dr_fc;
	   for ( i=0; i<=12 ; i++)
	   {		
			
			EXEC SQL SELECT :t_latest_year_bal_cr + month_bal_cr,
							:t_latest_year_bal_dr + month_bal_dr,
							:t_latest_year_bal_cr_fc + month_bal_cr_fc,
							:t_latest_year_bal_dr_fc + month_bal_dr_fc
					   INTO :t_latest_year_bal_cr,
							:t_latest_year_bal_dr,
							:t_latest_year_bal_cr_fc,
							:t_latest_year_bal_dr_fc
					   FROM  GL_PERIOD_ACC_BAL_LOCAL
					  WHERE  MAIN_ACC1_CODE       =  :t_main_acc1_code
						AND  MAIN_ACC2_CODE       =  :t_main_acc2_code
						AND  DEPT_CODE            =  :t_dept_code
						AND  PRODUCT_GROUP_CODE   =  :t_product_group_code
						AND  PRODUCT_LINE_CODE    =  :t_product_line_code
						AND  SUBLEDGER_GROUP_CODE =  :t_subledger_group_code
						AND  SUBLEDGER_LINE_CODE  =  :t_subledger_line_code
						AND  POST_YEAR            =  :d_curr_year + 1
						AND  POST_MONTH           =  :i ;
					
					if (NO_DATA)
					err_mesg("Balance Record not found",0,"");
					 

					if(OERROR)
						err_mesg("SELECT failed on table GL_PERIOD_ACC_BAL_LOCAL",0,"");
   
			EXEC SQL UPDATE GL_PERIOD_ACC_BAL_LOCAL
				 SET    YEAR_BAL_CR          =  :t_latest_year_bal_cr,
					    YEAR_BAL_DR          =  :t_latest_year_bal_dr,
						YEAR_BAL_CR_FC       =  :t_latest_year_bal_cr_fc,
						YEAR_BAL_DR_FC       =  :t_latest_year_bal_dr_fc
					 WHERE  MAIN_ACC1_CODE       =  :t_main_acc1_code
					 AND    MAIN_ACC2_CODE       =  :t_main_acc2_code
					 AND    DEPT_CODE            =  :t_dept_code
					 AND    PRODUCT_GROUP_CODE   =  :t_product_group_code
					 AND    PRODUCT_LINE_CODE    =  :t_product_line_code
					 AND    SUBLEDGER_GROUP_CODE =  :t_subledger_group_code
					 AND    SUBLEDGER_LINE_CODE  =  :t_subledger_line_code
					 AND    POST_YEAR            =  :d_curr_year + 1
					 AND    POST_MONTH           =  :i;
				if(OERROR)
	 			err_mesg("UPDATE failed on table GL_PERIOD_ACC_BAL_LOCAL",0,"");
        } /* end of for loop */
	} /* end of while fetch_period_year */ 

    EXEC SQL CLOSE GL_PERIOD_YEAR;

    if(OERROR)
        err_mesg("CLOSE failed on cursor GL_PERIOD_YEAR",0,"");


}

do_fin_updates() 
{

#ifdef DEBUG
    printf("Inside do_fin_updates ...\n");
    printf("g_pgm_id = <%s>\n",g_pgm_id);
#endif

    if(!strcmp(g_pgm_id,"GLBMTEND")) {

#ifdef DEBUG
    printf("Updating gl_stmt_column for month end ...\n");
#endif

        EXEC SQL UPDATE GL_STMT_COLUMN
	         SET    FM_MM_PER = 
			DECODE(FM_MM_PER,:d_num_of_acc_periods,1,FM_MM_PER + 1),
			FM_YY_PER = DECODE(FM_MM_PER,:d_num_of_acc_periods,
					   FM_YY_PER + 1,FM_YY_PER)
	         WHERE  COLUMN_TYPE_CODE = 'MOV'
	         AND    NVL(FM_INC_FCTR_CODE,'X') = 'M';

	if(OERROR)
	    err_mesg("UPDATE failed on table GL_STMT_COLUMN",0,"");
    
        EXEC SQL UPDATE GL_STMT_COLUMN
	         SET    TO_MM_PER = 
			DECODE(TO_MM_PER,:d_num_of_acc_periods,1,TO_MM_PER + 1),
			TO_YY_PER = DECODE(TO_MM_PER,:d_num_of_acc_periods,
					   TO_YY_PER + 1,TO_YY_PER)
	         WHERE  COLUMN_TYPE_CODE = 'MOV'
	         AND    NVL(TO_INC_FCTR_CODE,'X') = 'M';

	if(OERROR)
	    err_mesg("UPDATE failed on table GL_STMT_COLUMN",0,"");

    }
    else {

#ifdef DEBUG
    printf("Updating gl_stmt_column for year end ...\n");
#endif

        EXEC SQL UPDATE GL_STMT_COLUMN
	         SET    FM_YY_PER = FM_YY_PER + 1
	         WHERE  COLUMN_TYPE_CODE = 'MOV'
	         AND    NVL(FM_INC_FCTR_CODE,'X') = 'M';

	if(OERROR)
	    err_mesg("UPDATE failed on table GL_STMT_COLUMN",0,"");
    
        EXEC SQL UPDATE GL_STMT_COLUMN
	         SET    TO_MM_PER = 1,
			TO_YY_PER = TO_YY_PER + 1
	         WHERE  COLUMN_TYPE_CODE = 'MOV'
	         AND    NVL(TO_INC_FCTR_CODE,'X') = 'M';

	if(OERROR)
	    err_mesg("UPDATE failed on table GL_STMT_COLUMN",0,"");

        EXEC SQL UPDATE GL_STMT_COLUMN
	         SET	FM_YY_PER = FM_YY_PER + 1
	         WHERE  COLUMN_TYPE_CODE = 'MOV'
	         AND    NVL(FM_INC_FCTR_CODE,'X') = 'Y';

	if(OERROR)
	    err_mesg("UPDATE failed on table GL_STMT_COLUMN",0,"");
    
        EXEC SQL UPDATE GL_STMT_COLUMN
	         SET    TO_YY_PER = TO_YY_PER + 1
	         WHERE  COLUMN_TYPE_CODE = 'MOV'
	         AND    NVL(TO_INC_FCTR_CODE,'X') = 'Y';

	if(OERROR)
	    err_mesg("UPDATE failed on table GL_STMT_COLUMN",0,"");


    } 


}

fetch_period_year() 
{

    t_year_bal_cr  = 0;
    t_year_bal_dr  = 0;
    t_year_bal_cr_fc = 0;
	t_year_bal_dr_fc = 0;
    EXEC SQL FETCH GL_PERIOD_YEAR
	     INTO  :t_main_acc1_code,
		   :t_main_acc2_code,
		   :t_dept_code,
		   :t_product_group_code,
		   :t_product_line_code,
		   :t_subledger_group_code,
		   :t_subledger_line_code,
		   :t_year_bal_cr,
		   :t_year_bal_dr,
		   :t_year_bal_cr_fc,
		   :t_year_bal_dr_fc;

    if(OERROR)
	err_mesg("FETCH failed on cursor GL_PERIOD_YEAR",0,"");

    if(NO_DATA)
	return 0;

	t_main_acc1_code.arr[t_main_acc1_code.len]             = '\0';
	t_main_acc2_code.arr[t_main_acc2_code.len]             = '\0';
	t_dept_code.arr[t_dept_code.len]                       = '\0';
	t_product_group_code.arr[t_product_group_code.len]     = '\0';
	t_product_line_code.arr[t_product_line_code.len]       = '\0';
	t_subledger_group_code.arr[t_subledger_group_code.len] = '\0';
	t_subledger_line_code.arr[t_subledger_line_code.len]   = '\0';

#ifdef DEBUG
    printf("Fetching posting a/c for BS \n");
    printf("Account code = %s-%s %s %s-%s %s-%s\n",t_main_acc1_code.arr,
    t_main_acc2_code.arr ,t_dept_code.arr ,t_product_group_code.arr,
    t_product_line_code.arr ,t_subledger_group_code.arr , 
    t_subledger_line_code.arr);
#endif

    return 1;


}

do_prior_post()
{

#ifdef DEBUG
    printf("BEGINING PRIOR POSTING\n");
    printf("Curr Month = %d  Curr Year = %d\n",d_curr_month,d_curr_year);
#endif

    EXEC SQL DECLARE BATCH_HDR_CUR CURSOR FOR
	     SELECT  BATCH_NUM
	     FROM    GL_TXN_BATCH_HDR 
	     WHERE   POST_MONTH = 0
	     AND     POST_YEAR  = :d_curr_year
	     AND     NVL(POSTED_FLAG,'N') = 'Y'
	     FOR     UPDATE OF BATCH_NUM;

    EXEC SQL DECLARE DOC_HDR_CUR CURSOR FOR
	     SELECT  DOC_TYPE_CODE,
		     DOC_NUM
	     FROM    GL_TXN_DOC_HDR
	     WHERE   BATCH_NUM = :t_batch_num;

    EXEC SQL DECLARE DOC_HDR_CUR1 CURSOR FOR
	     SELECT  DOC_TYPE_CODE,
		     DOC_NUM
	     FROM    GL_TXN_DOC_HDR
	     WHERE   BATCH_NUM  = 0
	     AND     POST_MONTH = 0
	     AND     POST_YEAR  = :d_curr_year
	     AND     NVL(POSTED_FLAG,'N') = 'Y'
	     FOR     UPDATE OF DOC_TYPE_CODE;

    EXEC SQL OPEN BATCH_HDR_CUR;

    if(OERROR)
        err_mesg("OPEN failed on cursor BATCH_HDR_CUR",0,"");

    t_summ_process_flag.arr[0] = '\0';
    t_summ_process_flag.len = 0;

    if(d_summ_flag EQ 'O') {
       t_summ_process_flag.arr[0] = 'Y';
       t_summ_process_flag.len = 1;
    }


    while(fetch_batch_hdr()) {

	EXEC SQL OPEN DOC_HDR_CUR;

	if(OERROR)
	    err_mesg("OPEN failed on cursor DOC_HDR_CUR",0,"");

	while(fetch_doc()) {

            if(post_doc(t_batch_num,t_doc_type_code.arr,
			t_doc_num,g_err_msg) EQ -1) 

       	        err_mesg(g_err_msg,0,"");

	} /* end of while fetch doc_hdr */

        EXEC SQL UPDATE GL_TXN_BATCH_HDR
	         SET    SUMMARY_PROCESSED_FLAG = :t_summ_process_flag 
	         WHERE CURRENT OF BATCH_HDR_CUR;

        if(OERROR)
            err_mesg("UPDATE failed on table GL_TXN_BATCH_HDR",0,"");

    } /* end of while fetch batch_hdr */


    t_batch_num = 0;

    EXEC SQL OPEN DOC_HDR_CUR1;

    if(OERROR)
        err_mesg("OPEN failed on cursor DOC_HDR_CUR1",0,"");


    while(fetch_doc_hdr1()) {

        if(post_doc(t_batch_num,t_doc_type_code.arr,
		t_doc_num,g_err_msg) EQ -1) 

            err_mesg(g_err_msg,0,"");

	    EXEC SQL UPDATE GL_TXN_DOC_HDR
		     SET    SUMMARY_PROCESSED_FLAG = :t_summ_process_flag 
		     WHERE CURRENT OF DOC_HDR_CUR1;
    
	    if(OERROR)
                 err_mesg("UPDATE failed on table GL_TXN_DOC_HDR",0,"");

    } /* end of while fetch_doc_hdr1 */

    EXEC SQL CLOSE BATCH_HDR_CUR;
    EXEC SQL CLOSE DOC_HDR_CUR;
    EXEC SQL CLOSE DOC_HDR_CUR1;

}


do_rev_fut_post()
{

#ifdef DEBUG
    printf("BEGINING REVERSE AND FUTURE POSTING\n");
    printf("Curr Month = %d  Curr Year = %d\n",d_curr_month,d_curr_year);
#endif

    t_summ_process_flag.arr[0] = '\0';
    t_summ_process_flag.len = 0;

    if(d_summ_flag EQ 'O') {
       t_summ_process_flag.arr[0] = 'Y';
       t_summ_process_flag.len = 1;
    }
 
    EXEC SQL DECLARE BATCH_HDR_FUTURE CURSOR FOR
	     SELECT  BATCH_NUM
	     FROM    GL_TXN_BATCH_HDR 
	     WHERE   POST_MONTH = :d_curr_month
	     AND     POST_YEAR  = :d_curr_year
	     AND     NVL(POSTED_FLAG,'N') = 'Y'
	     FOR     UPDATE OF BATCH_NUM;

    EXEC SQL DECLARE DOC_HDR_FUTURE CURSOR FOR
	     SELECT  DOC_TYPE_CODE,
		     DOC_NUM
	     FROM    GL_TXN_DOC_HDR
	     WHERE   BATCH_NUM = :t_batch_num;


    EXEC SQL DECLARE DOC_HDR_CUR2 CURSOR FOR
	     SELECT  DOC_TYPE_CODE,
		     DOC_NUM,
		     NVL(MODULE_ID,'XX')
	     FROM    GL_TXN_DOC_HDR
	     WHERE   BATCH_NUM  = 0
	     AND     POST_MONTH = :d_curr_month
	     AND     POST_YEAR  = :d_curr_year
	     AND     NVL(MODULE_ID,'XX')  =  'GL'
	     AND     NVL(POSTED_FLAG,'N') = 'Y'
	     FOR     UPDATE OF DOC_TYPE_CODE;


    EXEC SQL DECLARE DOC_HDR_CUR3 CURSOR FOR
	     SELECT  DOC_TYPE_CODE,
		     DOC_NUM,
                     BATCH_NUM,
		     NVL(MODULE_ID,'XX')
	     FROM    GL_TXN_DOC_HDR
	     WHERE   POST_MONTH = :d_curr_month
	     AND     POST_YEAR  = :d_curr_year
	     AND     NVL(MODULE_ID,'XX')  !=  'GL'
	     AND     NVL(POSTED_FLAG,'N') = 'Y'
	     FOR     UPDATE OF DOC_TYPE_CODE;

    EXEC SQL OPEN BATCH_HDR_FUTURE;

    if(OERROR)
        err_mesg("OPEN failed on cursor BATCH_HDR_FUTURE",0,"");

    while(fetch_batch_hdr_fut()) {

	EXEC SQL OPEN DOC_HDR_FUTURE;

	if(OERROR)
	    err_mesg("OPEN failed on cursor DOC_HDR_FUTURE",0,"");

	while(fetch_doc_hdr_fut()) {

            if(post_doc(t_batch_num,t_doc_type_code.arr,
			t_doc_num,g_err_msg) EQ -1) 

       	        err_mesg(g_err_msg,0,"");

	} /* end of while fetch doc_hdr */

        EXEC SQL UPDATE GL_TXN_BATCH_HDR
	         SET    SUMMARY_PROCESSED_FLAG = :t_summ_process_flag 
	         WHERE CURRENT OF BATCH_HDR_CUR;

    } /* end of while fetch batch_hdr_future */


    EXEC SQL OPEN DOC_HDR_CUR2;

    if(OERROR)
        err_mesg("OPEN failed on cursor DOC_HDR_CUR2",0,"");

    t_batch_num = 0;
   
    while(fetch_doc_hdr2()) {

        if(post_doc(t_batch_num,t_doc_type_code.arr,
		t_doc_num,g_err_msg) EQ -1) 

            err_mesg(g_err_msg,0,"");


            EXEC SQL UPDATE GL_TXN_DOC_HDR
	             SET    SUMMARY_PROCESSED_FLAG = :t_summ_process_flag 
	             WHERE CURRENT OF DOC_HDR_CUR2;
           
            if(OERROR)
                err_mesg("UPDATE failed on table GL_TXN_DOC_HDR",0,"");

    
    } /* end of while fetch doc_hdr2 */


    EXEC SQL OPEN DOC_HDR_CUR3;

    if(OERROR)
        err_mesg("OPEN failed on cursor DOC_HDR_CUR3",0,"");

    while(fetch_doc_hdr3()) {

        if(post_doc(t_batch_num,t_doc_type_code.arr,
		t_doc_num,g_err_msg) EQ -1) 

            err_mesg(g_err_msg,0,"");


            EXEC SQL UPDATE GL_TXN_DOC_HDR
	             SET    SUMMARY_PROCESSED_FLAG = :t_summ_process_flag 
	             WHERE CURRENT OF DOC_HDR_CUR3;
           
            if(OERROR)
                err_mesg("UPDATE failed on table GL_TXN_DOC_HDR",0,"");

    
    } /* end of while fetch doc_hdr3 */


    EXEC SQL CLOSE BATCH_HDR_FUTURE;
    EXEC SQL CLOSE DOC_HDR_FUTURE;
    EXEC SQL CLOSE DOC_HDR_CUR2;
    EXEC SQL CLOSE DOC_HDR_CUR3;

}


fetch_batch_hdr()
{

    EXEC SQL FETCH BATCH_HDR_CUR 
	     INTO  :t_batch_num;

    if(OERROR)
        err_mesg("FETCH failed on cursor BATCH_HDR_CUR",0,"");

    if(NO_DATA)
	return 0;
    else
	return 1;

}

fetch_doc()
{

    EXEC SQL FETCH DOC_HDR_CUR
	     INTO  :t_doc_type_code,
		   :t_doc_num;
	
    if(OERROR)
        err_mesg("FETCH failed on cursor DOC_HDR_CUR",0,"");

    if(NO_DATA)
	return 0;

    t_doc_type_code.arr[t_doc_type_code.len] = '\0';

    return 1;
}


fetch_doc_hdr1()
{

    EXEC SQL FETCH DOC_HDR_CUR1
	     INTO  :t_doc_type_code,
		   :t_doc_num;
	
    if(OERROR)
        err_mesg("FETCH failed on cursor DOC_HDR_CUR1",0,"");

    if(NO_DATA)
	return 0;

    t_doc_type_code.arr[t_doc_type_code.len] = '\0';

    return 1;
}


fetch_doc_hdr2()
{

    EXEC SQL FETCH DOC_HDR_CUR2
	     INTO  :t_doc_type_code,
		   :t_doc_num,
		   :t_module_id;
	
    if(OERROR)
        err_mesg("FETCH failed on cursor DOC_HDR_CUR2",0,"");

    if(NO_DATA)
	return 0;

    t_doc_type_code.arr[t_doc_type_code.len] = '\0';
    t_module_id.arr[t_module_id.len]         = '\0';

    return 1;
}

fetch_doc_hdr3()
{
    t_batch_num=0;

    EXEC SQL FETCH DOC_HDR_CUR3
	     INTO  :t_doc_type_code,
		   :t_doc_num,
		   :t_batch_num,
		   :t_module_id;
	
    if(OERROR)
        err_mesg("FETCH failed on cursor DOC_HDR_CUR3",0,"");

    if(NO_DATA)
	return 0;

    t_doc_type_code.arr[t_doc_type_code.len] = '\0';
    t_module_id.arr[t_module_id.len]         = '\0';

    return 1;
}


fetch_batch_hdr_fut()
{

    EXEC SQL FETCH BATCH_HDR_FUTURE 
	     INTO  :t_batch_num;

    if(OERROR)
        err_mesg("FETCH failed on cursor BATCH_HDR_FUTURE",0,"");

    if(NO_DATA)
	return 0;
    else
	return 1;

}

fetch_doc_hdr_fut()
{

    EXEC SQL FETCH DOC_HDR_FUTURE
	     INTO  :t_doc_type_code,
		   :t_doc_num;
	
    if(OERROR)
        err_mesg("FETCH failed on cursor DOC_HDR_FUTURE",0,"");

    if(NO_DATA)
	return 0;

    t_doc_type_code.arr[t_doc_type_code.len] = '\0';

    return 1;
}


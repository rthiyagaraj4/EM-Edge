/*******************************************************************************************
*  
*	Name			SMTCKPRI.PC
*
*	Author			K  S Sundar 
*
*	Purpose			Checks if the specified printer is valid 
*					or not.
*
*	Steps			Reads SY_PRINT_DRIVER table (Key SessionID , DateTime)
*
*					If record found,
*						Open the printer (SY_PRINTER_DRIVER.PRINTER_NAME)
*						If Success,
*							Update SY_PRINT_DRIVER.DEST_PORT_NAME = "Success"
*						Else
*							Update SY_PRINT_DRIVER.DEST_PORT_NAME = "Failure"
*							Register the error
*					Else
*						Register the error.
*					Return.
*
*   ===============================================================
*	Input Parameters							Mandatory/Optional
*   ===============================================================
*	1. DB Connect String (User/Password@DBName)	M
*	2. Workstation Id							M
*	3. SessionID								M
*	4. DateTime	 								M
*
*	Agrument separator is space
*
*   ====================
*	Modification History  
*   ===============================================================
*	Date		Person		Remarks
*   ===============================================================
*	Sep 28,2002	S Sundar	Created.
*
*	Apr 23,2003	S Sundar	1. Debug.H and DebugProc.H removed
*							2. Debug.C added
*							3. New Debug.H added
*							4. Calls related to debug renamed as Trace
*							5. Reference to WORKING_DIR removed as it is not being used.
*
*	Apr 26,2003	S Sundar	1. get_output_directory procedure is removed as
*							   no log file is getting created.
*
*	Jun 23,2003	Nanjayan	1. bv_error_text Data Length has been 
*							   increased from 64 to 501 as 
*							   SY_PRINT_DRIVERS.ERROR_TEXT is to be
*							   modified as VARCHAR2(500).
*							2. For Downward compatibility, SMRMDUSR.C
*							   has been changed. 
*							   Hence, new version is re-attached.
*
*	Oct 7, 2003	S Sundar	1. Printer driver is not required anymore.
*							   Hence, all the references to printer driver
*							   is removed.
*
*	Jun 2, 2004	S Sundar	1. When this program invoked by SMTPRDOC,
*							   fetching of SY_PRINT_DRIVERS.NUM_OF_PAGES
*							   by SMTPRDOC, sometimes, does not work good.
*							   That is, even if NUM_OF_PAGES is 1, sometimes,
*							   SMTPRDOC fetches 0. Hence, decided to check
*							   for return value instead of SY_PRINT_DRIVERS.NUM_OF_PAGES.
*
*	Sep 21,2005	S Sundar	1. set_meduser_role() is called after EnableOrDisableTracing().
*							   So tracing is not enabled at all yielding -942 Error
*								when reading sy_pgm_events_ctl table.
*								set_meduer_role() is moved before EnableOrDisableTracing().
*
*******************************************************************************************/


# include <windows.h>
# include <winspool.h>
# include <malloc.h>
# include <assert.h>
# include <stdio.h>
# include <stdlib.h>
# include <conio.h>
# include <string.h>
# include <time.h>
#include <time.h>
#include <sys/stat.h>
# include <debug.h>

# if defined (WIN32)
	#define IS_WIN32 TRUE
# else
	#define IS_WIN32 FALSE
# endif

# define IS_NT		IS_WIN32 && (BOOL) (GetVersion() < 0x80000000)
# define IS_WIN32S	IS_WIN32 && (BOOL) (!(IS_NT) && (LOBYTE(LOWORD(GetVersion())) < 4 ))
# define IS_WIN95	(BOOL) (!(IS_NT) && !(IS_WIN32S)) && IS_WIN32

# define PRINTER_OK		1				// Printer Status 
# define PRINTER_NOT_OK 0				// Printer Status 

EXEC SQL BEGIN DECLARE SECTION;
	varchar  bv_uid_pwd[132];
	varchar  bv_session_id[20];
//	varchar  bv_session_datetime[15]; /***** Commented for the TIMESTAMP ISSUE in Billing *****/
	varchar  bv_session_datetime[50];

	varchar  bv_routed_printer_name[64];
	varchar  bv_routed_port[64];
	varchar  bv_error_text[501];

	varchar  l_workstation_id[31],
			 l_user_id[31],
		   l_error_text[501];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

/*
*	global decalrations;
*/

HANDLE	gv_hPrinter;					// Printer handle
void	ValidatePrinter();				// Validate the printer
BOOL	GetPrinterJobStatus(JOB_INFO_2 **ppJobInfo, int *pcJobs, DWORD *pStatus); 
int		GetPrinterStatus();				// Get the printer status.
int		IsPrinterValid;


/*
* WinMain
*/
int WINAPI WinMain(HINSTANCE  hInstance,HINSTANCE  hPrevInstance,LPSTR  lpCmdLine, int  nShowCmd)
{
	/*
	* Declare local variables.
	*/
	struct _stat LVFileStat;
	int LVResult;
	char *LVStrBuf;

	char LVFunctionName[64];
	char sep[3]=" ";
	char *lv_uid_pwd, *lv_session_id, *lv_session_datetime;
	char *lv_ws_no;
	int  lv_ret_flag;
	char tmpbuf[500];

	/*
	* Initialize variables.
	*/
	bv_uid_pwd.arr[0] = '\0';
	bv_uid_pwd.len =0;
	bv_session_id.arr[0] = '\0';
	bv_session_id.len =0;
	bv_session_datetime.arr[0] = '\0';
	bv_session_datetime.len =0;

	/*
	* Read command line parameters.
	*/
	lv_uid_pwd=strtok(lpCmdLine,sep);
	lv_ws_no=strtok(NULL,sep);
	lv_session_id=strtok(NULL,sep);
	lv_session_datetime=strtok(NULL,sep);

	if (lv_uid_pwd == NULL || lv_ws_no==NULL || lv_session_id==NULL || lv_session_datetime==NULL)
	{
		MessageBox(NULL,"Usage Connect_String Workstation_id sessionid datetime ","MEDICOM: Validating Printer",MB_OK );
		exit(1);
	}

	strcpy(bv_uid_pwd.arr,lv_uid_pwd);
	bv_uid_pwd.len = strlen(bv_uid_pwd.arr);

	strcpy(l_workstation_id.arr,lv_ws_no);
	l_workstation_id.len = strlen(l_workstation_id.arr);
	l_workstation_id.arr[l_workstation_id.len]='\0';

	strcpy(bv_session_id.arr,lv_session_id);
	bv_session_id.len = strlen(bv_session_id.arr);

	strcpy(bv_session_datetime.arr,lv_session_datetime);
	bv_session_datetime.len = strlen(bv_session_datetime.arr);

	/*
	* Create Window
	*/
	wndclass.style			= CS_HREDRAW | CS_VREDRAW;
	wndclass.lpfnWndProc    = NULL;
	wndclass.cbClsExtra		= 0;
	wndclass.cbWndExtra		= 0;
	wndclass.hInstance		= hInstance;
	wndclass.hIcon			= LoadIcon ( NULL, IDI_APPLICATION );
	wndclass.hCursor		= LoadCursor ( NULL, IDC_ARROW);
	wndclass.hbrBackground	= GetStockObject (WHITE_BRUSH);
	wndclass.lpszMenuName	= NULL;
	wndclass.lpszClassName	= "Drivers";
	RegisterClass ( &wndclass );

	hwnd = CreateWindow("Read Printer Details",(LPSTR)NULL,
                         WS_POPUP | WS_DLGFRAME,170,190,300,100,
                         (HWND)NULL,(HMENU)NULL,(HANDLE)hInstance,
						 (LPSTR) lpCmdLine);

	
	strcpy(GVProgramID, "SMTCKPRI");	
	
	/*
	* Connect to database
	*/
	EXEC SQL CONNECT :bv_uid_pwd;
	if(OERROR)
	{
		MessageBox(hwnd,"Unable to connect to oracle.","MEDICOM: Validating Printer",MB_OK|MB_ICONSTOP);
		exit(1);
	}


	/*	
	 * Following code for setting meduser role is added by C. Ganesan on 26/10/2002 at 19:00
	 * Following code was moved by S. Sundar on 21/09/2005 at 16:00
	 */
	set_meduser_role();


	/*
	* Enable or disable tracing.
	*/
	EnableOrDisableTracing();


	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "WinMain");	
		Trace(LVFunctionName,"Begin");

		LVResult = _stat(_pgmptr, &LVFileStat);
		if (LVResult == 0)
		{	
			LVStrBuf = strtok(ctime(&LVFileStat.st_mtime),"\n");	
			sprintf(GVTraceMsg,"File Name=[%Fs]  TimeStamp=[%s]  Size=[%ld Bytes]", _pgmptr, LVStrBuf , LVFileStat.st_size );
			Trace(LVFunctionName,GVTraceMsg);
		}

		sprintf(GVTraceMsg,"uid_pwd=[%s]    sessionid=[%s]    datetime=[%s]",bv_uid_pwd.arr, bv_session_id.arr, bv_session_datetime.arr);
		Trace(LVFunctionName,GVTraceMsg);
	}


	ValidatePrinter();			

	if (IS_TRACING)
	{ 
		sprintf(GVTraceMsg,"End Is Printer Valid?=[%d]", IsPrinterValid);
		Trace(LVFunctionName,GVTraceMsg);
	}

	if (IsPrinterValid)
	{
		exit(0);
	}
	else
	{
		exit (-1);
	}

} // Winmain


/*
*
* Function		ValidatePrinter
* Author		S Sundar
* Purpose		To validate the printer (SY_PRINT_DRIVERS.PRINTER_NAME).
*			
*/
void ValidatePrinter()
{	
	char		LVFunctionName[64];
	char		lv_printer_name[128];
	int			lv_printer_status;
	DOC_INFO_1	LVDocument;
	DWORD		LVPrintJob;
	
	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "ValidatePrinter()");
		Trace(LVFunctionName,"Begin");
		Trace(LVFunctionName,"Reading SY_PRINT_DRIVERS for printer details ...");
	}
	
	IsPrinterValid = 0;

	/*
	* Get the printer name from SY_PRINT_DRIVERS table.
	*/
	EXEC SQL
	SELECT printer_name, dest_port_name
	INTO   :bv_routed_printer_name, :bv_routed_port
	FROM   sy_print_drivers
	WHERE  session_id    = :bv_session_id
	AND    add_date_time = :bv_session_datetime;

	if(OERROR) 
	{
		sprintf(GVTraceMsg,"Error at Select SY_PRINT_DRVIERS() : %s",sqlca.sqlerrm.sqlerrmc);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return;
	}

	if(NO_DATA_FOUND) 
	{
		sprintf(GVTraceMsg,"No record found in SY_PRINT_DRVIERS() for checking!!!");
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return;
	}

	bv_routed_printer_name.arr[bv_routed_printer_name.len]='\0';
	bv_routed_printer_name.len=strlen(bv_routed_printer_name.arr);

	bv_routed_port.arr[bv_routed_port.len]='\0';
	bv_routed_port.len=strlen(bv_routed_port.arr);


	if (IS_TRACING) 
	{
		sprintf(GVTraceMsg, "Printer=[%s] Port=[%s]", bv_routed_printer_name.arr,  bv_routed_port.arr);
		Trace(LVFunctionName,GVTraceMsg);
	}
	if (IS_TRACING) Trace(LVFunctionName,"Check if printer is valid");


	/*
	* Check if printer is valid. Use OpenPrinter to check for validity.
	*/
	lv_printer_status = PRINTER_OK;
	strcpy(lv_printer_name, bv_routed_printer_name.arr);
	if (IS_TRACING) Trace(LVFunctionName,"Calling OpenPrinter ...");
	if(!OpenPrinter(lv_printer_name,&gv_hPrinter,NULL))
	{
		GetLastErrorMessage();

		lv_printer_status = PRINTER_NOT_OK;

		/*
		*
		* If the name of the printer is renamed after installed in MEDICOM
		* then OpenPrinter will fail.
		* Hence, Check for the port. 
		* If port is "LPT%". If yes, then skip error reporting.
		* 
		*/
		if (strncmp(bv_routed_port.arr,"LPT", 3) != 0)
		{
			sprintf (GVTraceMsg, "OpenPrinter() Failed with error: %s", GVLastErrorMessage);
			if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);

			bv_error_text.arr[0] = '\0';
			strcpy(bv_error_text.arr,GVTraceMsg);
			bv_error_text.len = strlen(bv_error_text.arr);

			EXEC SQL 
			UPDATE sy_print_drivers
			SET    num_of_pages		= 0,
				   error_text		= :bv_error_text
			WHERE  session_id		= :bv_session_id
			AND    add_date_time	= :bv_session_datetime;

			if (OERROR | NO_DATA_FOUND)
			{
				sprintf(GVTraceMsg,"Error at Update SY_PRINT_DRVIERS() : %s",sqlca.sqlerrm.sqlerrmc);
				if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
				if (IS_TRACING) Trace(LVFunctionName,"End");
				return;
			}
			EXEC SQL COMMIT;

			if (IS_TRACING) Trace(LVFunctionName,"End");
			return;
		} //if (strcmp(bv_routed_port.arr,"LPT") != 0)
	}

	/*
	* Assign dummy values to LVDocument. Only for using
	* in StartDocPrinter function.
	*/
	//LVDocument.pDocName	   = "Dummy"; 
	LVDocument.pDocName	   = ""; 
    LVDocument.pOutputFile = NULL; 
    LVDocument.pDatatype   = NULL; 

	if (IS_TRACING) Trace(LVFunctionName,"Calling StartDocPrinter ...");
	if((LVPrintJob=StartDocPrinter(gv_hPrinter,1,(LPSTR)&LVDocument))==0)
	{	
		GetLastErrorMessage();
		sprintf(GVTraceMsg,"APP-SY2437 %s - %s",bv_routed_printer_name.arr,GVLastErrorMessage);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);

			bv_error_text.arr[0] = '\0';
			strcpy(bv_error_text.arr,GVTraceMsg);
			bv_error_text.len = strlen(bv_error_text.arr);

			EXEC SQL 
			UPDATE sy_print_drivers
			SET    num_of_pages		= 0,
				   error_text		= :bv_error_text
			WHERE  session_id		= :bv_session_id
			AND    add_date_time	= :bv_session_datetime;

			if (OERROR | NO_DATA_FOUND)
			{
				sprintf(GVTraceMsg,"Error at Update SY_PRINT_DRVIERS() : %s",sqlca.sqlerrm.sqlerrmc);
				if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
				if (IS_TRACING) Trace(LVFunctionName,"End");
				return;
			}
			EXEC SQL COMMIT;

		if (IS_TRACING) Trace(LVFunctionName,"End");
		return 0;
	}

	/*
	* Abort printing.
	*/	
	if (IS_TRACING) Trace(LVFunctionName,"Calling AbortPrinter ...");
	if (AbortPrinter(gv_hPrinter) == 0)
	{
		GetLastErrorMessage();
		sprintf(GVTraceMsg,"Error at AbortPrinter() : [%s]", GVLastErrorMessage);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
	}

	/*
	* Close printer.
	*/	
	if (IS_TRACING) Trace(LVFunctionName,"Calling ClosePrinter ...");
	if (ClosePrinter(gv_hPrinter) == 0)
	{
		GetLastErrorMessage();
		sprintf(GVTraceMsg,"Error at ClosePrinter() : [%s]", GVLastErrorMessage);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
	}

	/*
	* If lv_printer_status == PRINTER_NOT_OK,
	* it means, OpenPrinter() failed and port is "LPT%"
	* In such case, check whethter driver is installed.
	*/
	if (lv_printer_status == PRINTER_NOT_OK)
	{
		if (IS_TRACING) Trace(LVFunctionName,"OpenPrinter() failed!! Port is LPT%. Check for driver");	
	}

	/*
	* Now, we know that printer is valid.
	* Check for printer status - READY or NOT READY for printing
	* Following code is commented by Sundar
	* as the status returned was always NULL.
	if (IS_TRACING) Trace(LVFunctionName,"Check if printer is ready for printing.");
	if (!GetPrinterStatus())
	{
		if (IS_TRACING) Trace(LVFunctionName,"Updating SY_PRINT_DRIVERS ... Printer is NOT ready.");

		bv_error_text.arr[0] = '\0';
		strcpy(bv_error_text.arr,"Printer is NOT Ready");
		bv_error_text.arr[bv_error_text.len]='\0';
		bv_error_text.len=strlen(bv_error_text.arr);

		EXEC SQL 
		UPDATE sy_print_drivers
		SET    num_of_pages		= 0,
			   error_text		= :bv_error_text
		WHERE  session_id		= :bv_session_id
		AND    add_date_time	= :bv_session_datetime;

		if(OERROR) 
		{
			sprintf(GVTraceMsg,"Error at Update SY_PRINT_DRVIERS() : %s",sqlca.sqlerrm.sqlerrmc);
			if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
			if (IS_TRACING) Trace(LVFunctionName,"End");
			return;
		}

		if (IS_TRACING) Trace(LVFunctionName,"End");
		return;
	}
	*/

	/*
	* Printer is valid and ready for printing.
	* Return SUCCESS flag.
	*/
	if (IS_TRACING) Trace(LVFunctionName,"Updating SY_PRINT_DRIVERS ... Printer is valid and ready for printing.");
	IsPrinterValid = 1;

	EXEC SQL 
	UPDATE sy_print_drivers
	SET    num_of_pages		= 1
	WHERE  session_id		= :bv_session_id
	AND    add_date_time	= :bv_session_datetime;

	if(OERROR) 
	{
		sprintf(GVTraceMsg,"Error at Update SY_PRINT_DRVIERS() : %s",sqlca.sqlerrm.sqlerrmc);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
		if (IS_TRACING) Trace(LVFunctionName,"End");
		return;
	}
	EXEC SQL COMMIT;


	if (IS_TRACING) Trace(LVFunctionName,"End");
	return;

} //ValidatePrinter


/*
*
* Function		GetPrinterStatus
* Author		S Sundar
* Purpose		To check if printer is ready.
*			
int GetPrinterStatus()
{
	char				LVFunctionName[64];
	DOC_INFO_1			di;
	DWORD				dwJob;
	HDC       hDC;

	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "GetPrinterStatus");
		Trace(LVFunctionName,"Begin");
	}

  // Get the DC using the RAW.DRV driver
  if( (hDC = CreateDC( "RAW", NULL, "LPT1", NULL ) ) == NULL )
    return FALSE;


	di.pDocName	   = "c:\tab.sql"; 
    di.pOutputFile = NULL; 
    di.pDatatype   = NULL; 

	if (IS_TRACING) Trace(LVFunctionName,"StartDoc");
	if((dwJob=StartDoc(gv_hPrinter,1,(LPSTR)&di))==0)
	if (1)
	{	
		if (IS_TRACING) Trace(LVFunctionName,"StartDoc Failed.");
		GetLastErrorMessage();
		sprintf (GVTraceMsg, "StartDoc() Failed with error: %s", GVLastErrorMessage);
		if (IS_TRACING) Trace(LVFunctionName,GVTraceMsg);
	}


	if (IS_TRACING) Trace(LVFunctionName,"End");
	return 1;

}
*/








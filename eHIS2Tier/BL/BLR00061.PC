/************************************************************************/
/* PROGRAM NAME          : BLR00061.PC                                  */
/* AUTHOR                : D Ganesh Murthi                              */
/* DATE WRITTEN          : 15/02/2005                                	*/
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/************************************************************************/

#include <stdio.h>  
#include <string.h>
#include <bl.h>   

#define OERROR				(sqlca.sqlcode < 0)
#define LAST_ROW			(sqlca.sqlcode == 1403)
#define NO_DATA_FOUND		(sqlca.sqlcode == 1403)
#define NOT_FOUND			(sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY			(sqlca.sqlcode == -54)
#define DUPLICATE_KEY			(sqlca.sqlcode == -1)
#define	MAX_LINES			60
#define ESC				0x1B
#define INIT_MESG			"Report Generation is in progress"

EXEC SQL BEGIN DECLARE SECTION;

VARCHAR		uid_pwd					[132],
			hosp_name				[120],
			date_time				[20],
			user_id					[20],
			nd_pgm_date				[35],
			nd_facility_name		[100],
			nd_session_id			[16],
			nd_facility_id			[3],
			d_acc_entity_name		[41],
			d_user					[21],
			d_sysdate				[17],
			date					[20];
            
VARCHAR		nd_lang_id				[4],
			l_pk_value				[200],
			l_translated_value		[201],
			l_from_and_to_date		[71];

VARCHAR 	nd_fr_date				[20],
			nd_to_date				[20],
			l_sysdate				[20],
			l_hospital_name			[50],
			d_base_currency			[9],
			nd_episode_type			[3],	
			nd_blng_grp_fr_catg		[5],
			nd_blng_grp_to_catg		[5],
			nd_fr_nur_unit			[5],
			nd_to_nur_unit			[5],
			nd_fr_bed_class			[3],
			nd_to_bed_class			[3];	

VARCHAR		d_blng_grp_catg			[5],
            d_nur_unit  			[5], 
		    d_blng_grp_catg_desc	[40],
			d_prv_blng_grp_catg		[5],
    		d_blng_grp_id			[5],
    		d_short_name			[61],
    		d_patient_id			[21],
    		d_episode_type			[3],
    		d_episode_id			[9],
    		d_visit_id				[5],
    		d_bed_class_code		[3],
    		d_admission_date		[20],
			
			p_language_id			[3],

    		d_discharge_date_time	[20];

double		d_deposit_adj_amt_pd ,
			d_bill_amt ,
			d_disc_amt ,
			d_tot_adj_amt ,
			d_tot_exempt_amt ,
			d_tot_paid_amt ,
			d_tot_efund_amt ,
			d_tot_write_off_amt ,
			d_bill_tot_outst_amt;

/* Pradeep 23-10-2006 */
double		l_sub_deposit_total,
			l_sub_bill_total,
			l_sub_exemption_total,
			l_sub_paid_total,
			l_sub_refund_total,
			l_sub_reconsilation_total,
			l_sub_writeoff_total,
			l_sub_outst_total,
			l_grand_deposit_total,
			l_grand_bill_total,
			l_grand_exemption_total,
			l_grand_paid_total,
			l_grand_refund_total,
			l_grand_reconsilation_total,
			l_grand_writeoff_total,
			l_grand_outst_total;

int len29,r_ctr29;
int len2,r_ctr2;
int len3,r_ctr3;
int len4,r_ctr4;
int len8,r_ctr8;
int len17,r_ctr17;
int len18,r_ctr18;

int len19,r_ctr19;
int len20,r_ctr20;
int len21,r_ctr21;
int len22,r_ctr22;
int len23,r_ctr23;
int len24,r_ctr24;
int len25,r_ctr25;
int len26,r_ctr26;

int len32,r_ctr32;
int len45,r_ctr45;
int len46,r_ctr46;
int len47,r_ctr47;

int len33,r_ctr33;
int len34,r_ctr34;
int len36,r_ctr36;
int len37,r_ctr37;
int len38,r_ctr38;
int len40,r_ctr40;
int len42,r_ctr42;
int len43,r_ctr43;
int len44,r_ctr44;

char		filename[200];

char		string_var[200];

char		loc_legend[100][201],		
		
		loc_legend2_1[201],
		loc_legend2_2[201],
		
		loc_legend3_1[201],
		loc_legend3_2[201],
		
		loc_legend4_1[201],
		loc_legend4_2[201],
		
		loc_legend8_1[201],
		loc_legend8_2[201],
		
		loc_legend17_1[201],
		loc_legend17_2[201],
		
		loc_legend18_1[201],
		loc_legend18_2[201],

		loc_legend19_1[201],
		loc_legend19_2[201],

		loc_legend20_1[201],
		loc_legend20_2[201],

		loc_legend21_1[201],
		loc_legend21_2[201],

		loc_legend22_1[201],
		loc_legend22_2[201],

		loc_legend23_1[201],
		loc_legend23_2[201],

		loc_legend24_1[201],
		loc_legend24_2[201],

		loc_legend25_1[201],
		loc_legend25_2[201],

		loc_legend26_1[201],
		loc_legend26_2[201],

		loc_legend29_1[201],
		loc_legend29_2[201],
         
        loc_legend32_1[201],
		loc_legend32_2[201],
		loc_legend45_1[201],
		loc_legend46_1[201],
		loc_legend47_1[201],
        loc_legend45_2[201],
		loc_legend46_2[201],
		loc_legend47_2[201], 

		loc_legend33_1[201],
		loc_legend33_2[201],
		loc_legend34_1[201],
		loc_legend34_2[201],
		loc_legend36_1[201],
		loc_legend36_2[201],
		loc_legend37_1[201],
		loc_legend37_2[201],
		loc_legend38_1[201],
		loc_legend38_2[201],
		loc_legend40_1[201],
		loc_legend40_2[201],
		loc_legend42_1[201],
		loc_legend42_2[201],
		loc_legend43_1[201],
		loc_legend43_2[201],
		loc_legend44_1[201],
		loc_legend44_2[201],
         
		l_mesg[100],
		l_mesg1[100];

//char		loc_legend17_1[100],loc_legend17_2[100];

int			l_line_no =0;
int			l_page_no =0;
int			i;
int			d_srlno = 1;
int			first;

VARCHAR 	bill_num				[100],
			bill_date				[20],
			dep_receipt				[100],
			dep_receipt_date		[20],
			receipt_no				[100],
			receipt_date			[20];

int no_more_bills, no_more_receipts, no_more_deposits;


EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
  
#include <winproc.h>

int    lctr = 0,pctr = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 4)
    {
       int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }

	strcpy(uid_pwd.arr,argv[1]);
	uid_pwd.len = strlen(uid_pwd.arr);

	nd_session_id.len = 0;
	nd_session_id.arr[nd_session_id.len] = '\0';

	strcpy(nd_session_id.arr,argv[2]);
	nd_session_id.len = strlen(nd_session_id.arr);
	nd_session_id.arr[nd_session_id.len] = '\0'; 

	nd_pgm_date.len = 0;
	nd_pgm_date.arr[nd_pgm_date.len] = '\0';
   
	strcpy(nd_pgm_date.arr,argv[3]);
	nd_pgm_date.len = strlen(nd_pgm_date.arr);
	nd_pgm_date.arr[nd_pgm_date.len] = '\0';

	strcpy(nd_facility_id.arr,argv[4]);
	nd_facility_id.len = strlen(nd_facility_id.arr);
	nd_facility_id.arr[nd_facility_id.len] = '\0';

	if(sql_connect() == -1)
	{
		disp_message(ERR_MESG,"Error in connecting to Oracle\n");
		if (uid_pwd.len == 0)
			disp_message(ERR_MESG,"Null oracle uid/pwd\n\n\n");
		proc_exit();
	}

    set_meduser_role();
	strcpy(p_language_id.arr,l_language_id.arr);
	p_language_id.len = l_language_id.len; 
	p_language_id.arr[p_language_id.len]='\0';

    fetch_prog_param();  

    fetch_hosp_name();
    
	declare_cursors();
   
	open_file();

	first = 0;

	fetch_legend_value();

	split_legend();

    print_report();

    end_of_rep();

	EXEC SQL DELETE SY_PROG_PARAM
            WHERE PGM_ID   = 'BLR00061'
            AND SESSION_ID = :nd_session_id
            AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

    
    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");

}


sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
      return(0);
}

declare_cursors()
{


EXEC SQL DECLARE IP_LIST CURSOR FOR 
select 		nvl(d.blng_grp_catg,'**'),
		a.BLNG_GRP_ID,
		a.PATIENT_ID,
		a.EPISODE_TYPE,
		a.EPISODE_ID,
		nvl(a.VISIT_ID,0), 
		b.short_name,  
		a.ward_code,
		nvl(a.BED_CLASS_CODE,c.CUR_BED_CLASS_CODE),
       	to_char(a.ADMISSION_DATE,'dd/mm/yyyy'), 
		to_char(c.discharge_date_time,'dd/mm/yyyy'),
		sum(nvl(a.PREPAY_ADJ_AMT,0)+nvl(a.DEPOSIT_ADJ_AMT,0)),        
		sum(nvl(a.BILL_AMT,0)),
		sum(nvl(a.MAN_DISC_AMT,0))+sum(nvl(a.OVERALL_DISC_AMT,0)) disc_amt,
		sum(nvl(a.BILL_TOT_ADJUST_AMT,0)),
		sum(nvl(a.BILL_TOT_EXEMPT_AMT,0)),
		sum(nvl(a.BILL_PAID_AMT,0))  tot_paid_amt,
		sum(nvl(a.TOT_REFUND_AMT,0)) tot_efund_amt,
		sum(nvl(a.BILL_TOT_WRITE_OFF_AMT,0)),
		sum(nvl(a.BILL_TOT_OUTST_AMT,0)) 
		
from 		bl_bill_dcp_dtl_vw a, 
		mp_patient_mast b,   
		bl_encounter_for_qry_vw c, 
		bl_blng_grp_by_catg d
where 	a.operating_facility_id = :nd_facility_id
and 	a.admission_date between to_date(nvl(:nd_fr_date,'01/01/1900')||' 00:00:00','dd/mm/yyyy hh24:mi:ss') 
		and 	to_date(nvl(:nd_to_date,'31/12/2300')||' 23:59:59','dd/mm/yyyy hh24:mi:ss')
and	a.patient_id		= b.patient_id
and 	a.episode_type		= c.episode_type
and 	a.episode_id		= c.episode_id
and 	a.blng_grp_id		= d.blng_grp_id(+)
and	nvl(a.bill_status,'X') != 'C'
and nvl(a.BED_CLASS_CODE,c.CUR_BED_CLASS_CODE) 
                between nvl(:nd_fr_bed_class,'!!') and nvl(:nd_to_bed_class,'~~')
and nvl(d.blng_grp_catg,'!!!!') between nvl(:nd_blng_grp_fr_catg,'!!!!') and nvl(:nd_blng_grp_to_catg,'~~~~')
and nvl(a.ward_code,'!!!!') between nvl(:nd_fr_nur_unit,'!!!!') and nvl(:nd_to_nur_unit,'~~~~')
and a.episode_type = :nd_episode_type
and c.language_id=:p_language_id
group by	d.blng_grp_catg,
		a.BLNG_GRP_ID,
		a.PATIENT_ID,
		a.EPISODE_TYPE, 
		a.EPISODE_ID,
		nvl(a.VISIT_ID,0), 
		b.short_name,
		a.ward_code,
		nvl(a.BED_CLASS_CODE,c.CUR_BED_CLASS_CODE),
		to_char(a.ADMISSION_DATE,'dd/mm/yyyy'), 
		to_char(c.discharge_date_time,'dd/mm/yyyy')

UNION 
select 
       nvl(d.blng_grp_catg,'**'),
       b.BLNG_GRP_ID,
       b.patient_id,
       b.EPISODE_TYPE,
       b.EPISODE_ID,
       0,
       null,
	   c.cur_ward_code,
       b.BED_BILL_BED_CLASS_CODE,
	   null,
       null,
	   SUM(DOC_AMT),
       0,
	   0,
	   0,
	   0,
	   0,
	   0,
	   0,
	   0
	   
from   
bl_receipt_refund_hdr a,
bl_episode_fin_dtls b,
ip_episode c,
bl_blng_grp_by_catg d
where 	b.operating_facility_id = :nd_facility_id
and 	b.ADMISSION_DATE_TIME between to_date(nvl(:nd_fr_date,'01/01/1900')||' 00:00:00','dd/mm/yyyy hh24:mi:ss') 
and 	to_date(nvl(:nd_to_date,'31/12/2300')||' 23:59:59','dd/mm/yyyy hh24:mi:ss')
and a.recpt_nature_code in ('AD','PR')
and		a.episode_type in ('I','D')
and nvl(b.bed_bill_bed_class_code,'!!')
                between nvl(:nd_fr_bed_class,'!!') and nvl(:nd_to_bed_class,'~~') 
and d.blng_grp_catg between nvl(:nd_blng_grp_fr_catg,'!!!!') and nvl(:nd_blng_grp_to_catg,'~~~~') 
and nvl(c.cur_ward_code,'!!!!') between nvl(:nd_fr_nur_unit,'!!!!') and nvl(:nd_to_nur_unit,'~~~~')
and   a.patient_id   = b.patient_id
and   a.episode_id   = b.episode_id
and   a.episode_type   = b.episode_type
and   a.patient_id   = c.patient_id
and   a.episode_id   = c.episode_id
and   a.episode_type   = c.episode_type
and 	b.blng_grp_id		= d.blng_grp_id(+)
and   nvl(a.cancelled_ind,'N') <> 'Y'
and   a.recpt_refund_ind='R'
and NOT EXISTS (SELECT 1 FROM bl_bill_dcp_dtl_vw x WHERE x.PATIENT_ID=b.PATIENT_ID 
			   	and 	b.episode_type		= x.episode_type
				and 	b.episode_id		= x.episode_id
				and	nvl(x.bill_status,'X') != 'C')
group by	d.blng_grp_catg,
		b.BLNG_GRP_ID,
		b.PATIENT_ID,
		b.EPISODE_TYPE, 
		b.EPISODE_ID,
		c.cur_ward_code,
    b.BED_BILL_BED_CLASS_CODE,
	to_char(B.ADMISSION_DATE_TIME,'dd/mm/yyyy')
		order by 1,3, 9;
		
EXEC SQL OPEN IP_LIST;

	if(OERROR)	   
	  err_mesg("OPEN failed on cursor IP_LIST",0,"");

EXEC SQL DECLARE IP_BILLS CURSOR FOR 
select a.doc_type_code||'/'||a.doc_num bill_num, TO_CHAR(a.doc_date,'DD/MM/YYYY') bill_date
from 	bl_bill_dcp_dtl_vw a,bl_blng_grp_by_catg d
where 	a.operating_facility_id = :nd_facility_id
and     a.episode_type = :d_episode_type
and     a.episode_id   = :d_episode_id
and     a.patient_id   = :d_patient_id
and 	a.blng_grp_id		= d.blng_grp_id(+)
and	nvl(a.bill_status,'X') != 'C'
and  a.bed_class_code=:d_bed_class_code
and  nvl(d.blng_grp_catg,'**')=:d_blng_grp_catg
and  a.ward_code=:d_nur_unit
order by a.doc_date;


EXEC SQL DECLARE IP_DEPOSITS CURSOR FOR 
select a.doc_type_code||'/'||a.doc_number dep_receipt, TO_CHAR(a.doc_Date,'DD/MM/YYYY') dep_receipt_date
from   bl_receipt_refund_hdr a
where a.operating_facility_id = :nd_facility_id
and a.recpt_nature_code in ('AD','PR')
and   a.patient_id   = :d_patient_id
and   a.episode_id   = :d_episode_id
and   a.episode_type = :d_episode_type
and   nvl(a.cancelled_ind,'N') <> 'Y'
and   a.recpt_refund_ind='R'
order by a.doc_date;

EXEC SQL DECLARE IP_RECEIPTS CURSOR FOR 
select a.doc_type_code||'/'||a.doc_number receipt_no, TO_CHAR(a.doc_Date,'DD/MM/YYYY') receipt_date
from   bl_receipt_refund_hdr a, bl_bill_hdr b,bl_blng_grp_by_catg c 
where a.recpt_nature_code in ('BI')
and   a.patient_id   = :d_patient_id
and   a.episode_id   = :d_episode_id
and   a.episode_type = :d_episode_type
and   nvl(a.cancelled_ind,'N') <> 'Y'
and   a.recpt_refund_ind='R'
and   a.bill_doc_type_code=b.doc_type_code
and   a.bill_doc_number=b.doc_num
and 	b.blng_grp_id		= c.blng_grp_id(+)
and  b.bed_class_code=:d_bed_class_code 
and  b.ward_code=:d_nur_unit
and  nvl(c.blng_grp_catg,'**')=:d_blng_grp_catg
order by 2;

}

open_detail_cursors()
{
EXEC SQL OPEN IP_BILLS;
EXEC SQL OPEN IP_DEPOSITS;
EXEC SQL OPEN IP_RECEIPTS;

no_more_bills    = 0;
no_more_receipts = 0;
no_more_deposits = 0;

}

fetch_detail_cursors()
{

    bill_num.arr[0]			= '\0';    
    bill_date.arr[0]		= '\0';
    bill_num.len  = 0;
	bill_date.len = 0;

	if (no_more_bills==0)
	{
		EXEC SQL FETCH IP_BILLS INTO  :bill_num,:bill_date;
		bill_num.arr[bill_num.len]   = '\0';
		bill_date.arr[bill_date.len] = '\0';

		if(OERROR)
		  err_mesg("FETCH failed on cursor IP_BILLS",0,"");

		if(NO_DATA_FOUND)
		  no_more_bills =1;
	 }

    dep_receipt.arr[0]			= '\0';    
    dep_receipt_date.arr[0]		= '\0';
    dep_receipt.len      = 0;
	dep_receipt_date.len = 0;

	if (no_more_deposits==0)
	{
		EXEC SQL FETCH IP_DEPOSITS INTO  :dep_receipt,:dep_receipt_date;
		dep_receipt.arr[dep_receipt.len]   = '\0';
		dep_receipt_date.arr[dep_receipt_date.len] = '\0';

		if(OERROR)
		  err_mesg("FETCH failed on cursor IP_DEPOSITS",0,"");

		if(NO_DATA_FOUND)
		  no_more_deposits =1;
	}


    receipt_no.arr[0]		= '\0';    
    receipt_date.arr[0]		= '\0';
    receipt_no.len			= 0;
	receipt_date.len		= 0;

	if (no_more_receipts==0)
	{
		EXEC SQL FETCH IP_RECEIPTS INTO  :receipt_no,:receipt_date;
		receipt_no.arr[receipt_no.len]   = '\0';
		receipt_date.arr[receipt_date.len] = '\0';

		if(OERROR)
		  err_mesg("FETCH failed on cursor IP_RECEIPTS",0,"");

		if(NO_DATA_FOUND)
		  no_more_receipts =1;
	}

    if (no_more_bills==1 && no_more_deposits==1 && no_more_receipts==1)
      return 0;
	else
	  return 1;
}

close_detail_cursors()
{
EXEC SQL CLOSE IP_BILLS;
EXEC SQL CLOSE IP_DEPOSITS;
EXEC SQL CLOSE IP_RECEIPTS;

}

fetch_cursors()
{
    d_blng_grp_catg.arr[0]			= '\0'; 
	d_nur_unit.arr[0]               = '\0';    
    d_blng_grp_id.arr[0]			= '\0';
    d_short_name.arr[0]				= '\0';
    d_patient_id.arr[0]				= '\0';
    d_episode_type.arr[0]			= '\0';
    d_episode_id.arr[0]				= '\0';
    d_visit_id.arr[0]				= '\0';
    d_bed_class_code.arr[0]			= '\0';
    d_admission_date.arr[0]			= '\0';
    d_discharge_date_time.arr[0]	= '\0';

    d_blng_grp_catg.len				= 0;  
	d_nur_unit.len                  = 0;
    d_blng_grp_id.len				= 0;
    d_short_name.len				= 0;
    d_patient_id.len				= 0;
    d_episode_type.len				= 0;
    d_episode_id.len				= 0;
    d_visit_id.len					= 0;
    d_bed_class_code.len			= 0;
    d_admission_date.len			= 0;
    d_discharge_date_time.len		= 0;


    d_deposit_adj_amt_pd			=0;
    d_bill_amt						=0;
    d_disc_amt						=0;
    d_tot_adj_amt					=0;
    d_tot_exempt_amt				=0;
    d_tot_paid_amt					=0;
    d_tot_efund_amt					=0;
    d_tot_write_off_amt				=0;
    d_bill_tot_outst_amt			=0;


    EXEC SQL FETCH IP_LIST 
	     INTO  
		:d_blng_grp_catg,		
		:d_blng_grp_id,
		:d_patient_id,
		:d_episode_type,
		:d_episode_id ,
		:d_visit_id , 
		:d_short_name,
		:d_nur_unit,
		:d_bed_class_code,
		:d_admission_date, 
		:d_discharge_date_time,
		:d_deposit_adj_amt_pd,
		:d_bill_amt ,
		:d_disc_amt,
		:d_tot_adj_amt,
		:d_tot_exempt_amt,
		:d_tot_paid_amt,
		:d_tot_efund_amt,
		:d_tot_write_off_amt,
		:d_bill_tot_outst_amt;

    if(OERROR)
	err_mesg("FETCH failed on cursor IP_LIST",0,"");

    if(NO_DATA_FOUND)
	return 0;

    d_blng_grp_catg.arr[d_blng_grp_catg.len]            = '\0';
	d_nur_unit.arr[d_nur_unit.len]                      = '\0';
    
    d_blng_grp_id.arr[d_blng_grp_id.len]				= '\0';
    d_short_name.arr[d_short_name.len]					= '\0';
    d_patient_id.arr[d_patient_id.len]    				= '\0';
    d_episode_type.arr[d_episode_type.len]				= '\0';
    d_episode_id.arr[d_episode_id.len]                  = '\0';
    d_visit_id.arr[d_visit_id.len]						= '\0';
    d_bed_class_code.arr[d_bed_class_code.len]			= '\0';
    d_admission_date.arr[d_admission_date.len]			= '\0';
    d_discharge_date_time.arr[d_discharge_date_time.len]= '\0';


    d_blng_grp_catg_desc.arr[0]			= '\0';
    d_blng_grp_catg_desc.len			= 0;
	
    EXEC SQL SELECT short_desc into :d_blng_grp_catg_desc
    FROM BL_BLNG_GRP_CATG
    WHERE BLNG_GRP_CATG = :d_blng_grp_catg;

    if(NO_DATA_FOUND)
    {
	strcpy(d_blng_grp_catg_desc.arr,"NOT SPECIFIED");	
	d_blng_grp_catg_desc.len = strlen(d_blng_grp_catg_desc.arr);
	
    }


    d_blng_grp_catg_desc.arr[d_blng_grp_catg_desc.len]  = '\0';

    return 1;
}

fetch_prog_param()
{
    nd_fr_date.arr[0]     ='\0'; 
    nd_to_date.arr[0]     ='\0';
		nd_episode_type.arr[0]='\0';
	nd_blng_grp_fr_catg.arr[0]='\0';
	nd_blng_grp_to_catg.arr[0]='\0';
		 nd_fr_nur_unit.arr[0]='\0';
		 nd_to_nur_unit.arr[0]='\0';
		nd_fr_bed_class.arr[0]='\0';
		nd_to_bed_class.arr[0]='\0';

    nd_fr_date.len        = 0;
    nd_to_date.len        = 0;
		    nd_episode_type.len = 0;
	nd_blng_grp_fr_catg.len = 0;
	nd_blng_grp_to_catg.len = 0;
		 nd_fr_nur_unit.len = 0;
		 nd_to_nur_unit.len = 0;
		nd_fr_bed_class.len = 0;
		nd_to_bed_class.len = 0;

 
     EXEC SQL SELECT  PARAM1,PARAM2,
						PARAM3,
						nvl(PARAM4,'!!!!'),
						nvl(PARAM5,'~~~~'),
						nvl(PARAM6,'!!'),
						nvl(PARAM7,'~~'),
						nvl(PARAM8,'!!!!'),
						nvl(PARAM9,'~~~~')
          
            INTO     :nd_fr_date, :nd_to_date,
			           :nd_episode_type,
					 :nd_blng_grp_fr_catg,
					 :nd_blng_grp_to_catg,
					 :nd_fr_bed_class,
					 :nd_to_bed_class,
					  :nd_fr_nur_unit,
					  :nd_to_nur_unit
            FROM	 SY_PROG_PARAM
            WHERE	 PGM_ID   = 'BLR00061'
            AND		 SESSION_ID = :nd_session_id
            AND		 PGM_DATE   = :nd_pgm_date;
			

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

	nd_fr_date.arr[nd_fr_date.len]	= '\0';
	nd_to_date.arr[nd_to_date.len]	= '\0';
		nd_episode_type.arr[nd_episode_type.len]		= '\0';
	nd_blng_grp_fr_catg.arr[nd_blng_grp_fr_catg.len]= '\0';
	nd_blng_grp_to_catg.arr[nd_blng_grp_to_catg.len]= '\0';
	nd_fr_nur_unit.arr[nd_fr_nur_unit.len]			= '\0';
	nd_to_nur_unit.arr[nd_to_nur_unit.len]			= '\0';
	nd_fr_bed_class.arr[nd_fr_bed_class.len]		= '\0';
	nd_to_bed_class.arr[nd_to_bed_class.len]		= '\0';


}

end_of_rep()
{   
    fprintf(fp,"\n");
    fprintf(fp,"%105s***  END OF REPORT ***\n\f"," ");

    fprintf(fp,"%c",0x12); /*** Set Dot-matrix Printer to Normal Mode ***/

    
	fflush(fp);
}

open_file()
{
    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00061.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00061.lis");
       proc_exit();
    }
}



print_letter_deposit_detail()
{

	   if ((d_prv_blng_grp_catg.arr[0]== '\0') &&  (d_blng_grp_catg.arr[0] != '\0'))
	   {
		   strcpy(d_prv_blng_grp_catg.arr,d_blng_grp_catg.arr);
		   fprintf(fp,"%-3.3s %-30.30s\n\n",d_blng_grp_catg.arr,d_blng_grp_catg_desc.arr);
		   d_srlno = 1;
		   l_line_no++;
		   l_line_no++;

		}

	   else
	   {
   		if ((strcmp(d_prv_blng_grp_catg.arr,d_blng_grp_catg.arr) == 0) && (d_blng_grp_catg.arr[0] != '\0')) 
				{
				 // fprintf(fp,"%-3.3s ","");
				
				 d_srlno++;

				}
				

		else
		{
			
		if ((strcmp(d_prv_blng_grp_catg.arr,d_blng_grp_catg.arr) != 0) && (d_blng_grp_catg.arr[0] != '\0')) 
		{
			if (first != 0)
			{
				get_sub_totals();
			}
			 strcpy(d_prv_blng_grp_catg.arr,d_blng_grp_catg.arr);
			 if (l_line_no == 0)
			 {
				fprintf(fp,"%-3.3s %-30.30s\n\n",d_blng_grp_catg.arr,d_blng_grp_catg_desc.arr);
			 }
			 else
			 {
				fprintf(fp,"\n%-3.3s %-30.30s\n\n",d_blng_grp_catg.arr,d_blng_grp_catg_desc.arr);
				l_line_no++;
				l_line_no++;
			 }
				 d_srlno = 1;			 
				 l_line_no++;
		}
				
	}
	}

	   if((d_blng_grp_catg.arr[0] == '\0') && (d_prv_blng_grp_catg.arr[0] != '\0'))
		  {  
			d_prv_blng_grp_catg.arr[0] = '\0';
			if (l_line_no == 0)
			{
			//	fprintf(fp,"%-3.3s "," ");
					if (first != 0)
					{
						get_sub_totals();
					}
				
			}
			else
			{
				fprintf(fp,"\n");
				l_line_no++;  
			}
     			d_srlno =1;
						
		   }
	   else
	   {
	   if((d_blng_grp_catg.arr[0] == '\0') && (d_prv_blng_grp_catg.arr[0] == '\0'))
		 {
			//fprintf(fp,"%-3.3s "," ");
     			d_srlno++;
		  }
    
    EXEC SQL  select sum(doc_amt) into d_deposit_adj_amt_pd
          from   bl_receipt_refund_hdr a
          where a.operating_facility_id = :nd_facility_id
          and a.recpt_nature_code in ('AD','PR')
          and   a.patient_id   = :d_patient_id
          and   a.episode_id   = :d_episode_id
          and   a.episode_type = :d_episode_type
          and   nvl(a.cancelled_ind,'N') <> 'Y'
          and   a.recpt_refund_ind='R';

		fprintf(fp,"%5d %-20.20s %-10.10s %-40.40s %-5.5s %-12.12s %-13.13s",
		d_srlno, d_patient_id.arr,d_episode_id.arr,d_short_name.arr,d_bed_class_code.arr,
			d_admission_date.arr,d_discharge_date_time.arr);
			print_formated(d_deposit_adj_amt_pd);
			print_formated(d_bill_amt);	
			print_formated(d_tot_exempt_amt);
			print_formated(d_tot_paid_amt);
			print_formated(d_tot_efund_amt);
			print_formated(d_tot_adj_amt);
			print_formated(d_tot_write_off_amt);
			print_formated(d_bill_tot_outst_amt);
		fprintf(fp,"\n");
		l_line_no++;
		first = 1;
		
		
			l_sub_deposit_total += d_deposit_adj_amt_pd;
			l_sub_bill_total += d_bill_amt;
			l_sub_exemption_total += d_tot_exempt_amt;
			l_sub_paid_total += d_tot_paid_amt;
			l_sub_refund_total += d_tot_efund_amt;
			l_sub_reconsilation_total += d_tot_adj_amt;
			l_sub_writeoff_total += d_tot_write_off_amt;
			l_sub_outst_total += d_bill_tot_outst_amt;

			l_grand_deposit_total += l_sub_deposit_total;
			l_grand_bill_total += l_sub_bill_total;
			l_grand_exemption_total += l_sub_exemption_total;
			l_grand_paid_total += l_sub_paid_total;
			l_grand_refund_total += l_sub_refund_total;
			l_grand_reconsilation_total += l_sub_reconsilation_total;
			l_grand_writeoff_total += l_sub_writeoff_total;
			l_grand_outst_total += l_sub_outst_total;
		
		check_page_break();
        
		open_detail_cursors();
		while (fetch_detail_cursors())
		{


		fprintf(fp,"%5s %-20.20s %-10.10s %-40.40s %-5.5s %-12.12s %-13.13s %-15.15s %-15.15s %-14.14s %-15.15s",
		"", "","","","","","",dep_receipt.arr,bill_num.arr,"",receipt_no.arr);
		fprintf(fp,"\n");
		l_line_no++;

		check_page_break();

		fprintf(fp,"%5s %-20.20s %-10.10s %-40.40s %-5.5s %-12.12s %-13.13s %-15.15s %-15.15s %-14.14s %-15.15s",
		"", "","","","","","",dep_receipt_date.arr,bill_date.arr,"",receipt_date.arr);
		fprintf(fp,"\n");
		l_line_no++;

		check_page_break();
			
		}
		close_detail_cursors();
		

		}
   	}



split_legend()
{
		len29 = strlen(loc_legend[29]);
		split_text(loc_legend[29],5,loc_legend29_1,&r_ctr29);
		if (len29 >= 5)
		split_text(loc_legend[29],5,loc_legend29_2,&r_ctr29);

		len2 = strlen(loc_legend[2]);
		split_text(loc_legend[2],20,loc_legend2_1,&r_ctr2);
		if (len2 >= 20)
		split_text(loc_legend[2],20,loc_legend2_2,&r_ctr2);

		len3 = strlen(loc_legend[3]);
		split_text(loc_legend[3],10,loc_legend3_1,&r_ctr3);
		if (len3 >= 10)
		split_text(loc_legend[3],10,loc_legend3_2,&r_ctr3);

		len4 = strlen(loc_legend[4]);
		split_text(loc_legend[4],40,loc_legend4_1,&r_ctr4);
		if (len4 >= 40)
		split_text(loc_legend[4],40,loc_legend4_2,&r_ctr4);

		len8 = strlen(loc_legend[8]);
		split_text(loc_legend[8],5,loc_legend8_1,&r_ctr8);
		if (len8 >= 5)
		split_text(loc_legend[8],5,loc_legend8_2,&r_ctr8);

		len17 = strlen(loc_legend[17]);
		split_text(loc_legend[17],12,loc_legend17_1,&r_ctr17);
		if (len17 >= 12)
		split_text(loc_legend[17],12,loc_legend17_2,&r_ctr17);

		len18 = strlen(loc_legend[18]);
		split_text(loc_legend[18],13,loc_legend18_1,&r_ctr18);
		if (len18 >= 13)
		split_text(loc_legend[18],13,loc_legend18_2,&r_ctr18);				

		len19 = strlen(loc_legend[19]);
		split_text(loc_legend[19],10,loc_legend19_1,&r_ctr19);
		if (len19 >= 10)
		split_text(loc_legend[19],14,loc_legend19_2,&r_ctr19);


        
		len32 = strlen(loc_legend[32]);
		split_text(loc_legend[32],20,loc_legend32_1,&r_ctr32);
		if (len32 >= 20)
		split_text(loc_legend[32],14,loc_legend32_2,&r_ctr32);

		len46 = strlen(loc_legend[46]);
		split_text(loc_legend[46],20,loc_legend46_1,&r_ctr46);
		if (len46 >= 20)
		split_text(loc_legend[46],14,loc_legend46_2,&r_ctr46);

		len45 = strlen(loc_legend[45]);
		split_text(loc_legend[45],20,loc_legend45_1,&r_ctr45);
		if (len45 >= 20)
		split_text(loc_legend[45],14,loc_legend45_2,&r_ctr45);
		
		len47 = strlen(loc_legend[47]);
		split_text(loc_legend[47],10,loc_legend47_1,&r_ctr47);
		//if (len47 >= 20)
		//split_text(loc_legend[47],40,loc_legend47_2,&r_ctr47);

		len20 = strlen(loc_legend[20]);
		split_text(loc_legend[20],10,loc_legend20_1,&r_ctr20);
		if (len20 >= 10)
		split_text(loc_legend[20],14,loc_legend20_2,&r_ctr20);

		len21 = strlen(loc_legend[21]);
		split_text(loc_legend[21],10,loc_legend21_1,&r_ctr21);
		if (len21 >= 10)
		split_text(loc_legend[21],14,loc_legend21_2,&r_ctr21);

		len22 = strlen(loc_legend[22]);
		split_text(loc_legend[22],10,loc_legend22_1,&r_ctr22);
		if (len22 >= 10)
		split_text(loc_legend[22],14,loc_legend22_2,&r_ctr22);

		len23 = strlen(loc_legend[23]);
		split_text(loc_legend[23],10,loc_legend23_1,&r_ctr23);
		if (len23 >= 10)
		split_text(loc_legend[23],14,loc_legend23_2,&r_ctr23);		

		len24 = strlen(loc_legend[24]);
		split_text(loc_legend[24],10,loc_legend24_1,&r_ctr24);
		if (len24 >= 10)
		split_text(loc_legend[24],14,loc_legend24_2,&r_ctr24);		

		len25 = strlen(loc_legend[25]);
		split_text(loc_legend[25],10,loc_legend25_1,&r_ctr25);
		if (len25 >= 10)
		split_text(loc_legend[25],14,loc_legend25_2,&r_ctr25);		

		len26 = strlen(loc_legend[26]);
		split_text(loc_legend[26],10,loc_legend26_1,&r_ctr26);
		if (len26 >= 10)
		split_text(loc_legend[26],14,loc_legend26_2,&r_ctr26);
		
		len44 = strlen(loc_legend[44]);
		split_text(loc_legend[44],20,loc_legend44_1,&r_ctr44);
		if (len44 >= 10)
		split_text(loc_legend[44],14,loc_legend44_2,&r_ctr44);	
		
		len42 = strlen(loc_legend[42]);
		split_text(loc_legend[42],20,loc_legend42_1,&r_ctr42);
		if (len42 >= 10)
		split_text(loc_legend[42],14,loc_legend42_2,&r_ctr42);	
			
                len43 = strlen(loc_legend[43]);
		split_text(loc_legend[43],20,loc_legend43_1,&r_ctr43);
		if (len43 >= 10)
		split_text(loc_legend[43],14,loc_legend43_2,&r_ctr43);	

		len38 = strlen(loc_legend[38]);
		split_text(loc_legend[38],30,loc_legend38_1,&r_ctr38);
		if (len38 >= 10)
		split_text(loc_legend[38],14,loc_legend38_2,&r_ctr38);	

		len36 = strlen(loc_legend[36]);
		split_text(loc_legend[36],30,loc_legend36_1,&r_ctr36);
		if (len36 >= 10)
		split_text(loc_legend[36],14,loc_legend36_2,&r_ctr36);	

		len37 = strlen(loc_legend[37]);
		split_text(loc_legend[37],30,loc_legend37_1,&r_ctr37);
		if (len37 >= 10)
		split_text(loc_legend[37],14,loc_legend37_2,&r_ctr37);	

		len40 = strlen(loc_legend[40]);
		split_text(loc_legend[40],30,loc_legend40_1,&r_ctr40);
		if (len40 >= 10)
		split_text(loc_legend[40],14,loc_legend40_2,&r_ctr40);	

		len33 = strlen(loc_legend[33]);
		split_text(loc_legend[33],30,loc_legend33_1,&r_ctr33);
		if (len33 >= 10)
		split_text(loc_legend[33],14,loc_legend33_2,&r_ctr33);	

		len34 = strlen(loc_legend[34]);
		split_text(loc_legend[34],30,loc_legend34_1,&r_ctr34);
		if (len34 >= 10)
		split_text(loc_legend[34],14,loc_legend34_2,&r_ctr34);	
               
	

}
/* Pradeep 23-10-2006 */
get_sub_totals()
{
	fprintf(fp,"%119s"," ");
	for(i=0;i<112;i++)
	fprintf(fp,"%s","_");
	fprintf(fp,"\n%85s%9s%17s"," ",loc_legend[30]," ");
	print_formated(l_sub_deposit_total);
	print_formated(l_sub_bill_total);
	print_formated(l_sub_exemption_total);
	print_formated(l_sub_paid_total);
	print_formated(l_sub_refund_total);
	print_formated(l_sub_reconsilation_total);
	print_formated(l_sub_writeoff_total);
	print_formated(l_sub_outst_total);
	fprintf(fp,"\n");
	fprintf(fp,"%119s"," ");
	for(i=0;i<112;i++)
	fprintf(fp,"%s","_");
	fprintf(fp,"\n");
		
	l_sub_deposit_total			= 0;
	l_sub_bill_total			= 0;
	l_sub_exemption_total		= 0;
	l_sub_paid_total			= 0;
	l_sub_refund_total			= 0;
	l_sub_reconsilation_total	= 0;
	l_sub_writeoff_total		= 0;
	l_sub_outst_total			= 0;
}

get_grand_totals()
{
	fprintf(fp,"%112s"," ");
	for(i=0;i<120;i++)
	fprintf(fp,"%s","_");
	fprintf(fp,"\n%82s%8s%-6s%15s"," ",loc_legend[31],d_base_currency.arr," ");
	print_formated(l_grand_deposit_total);
	print_formated(l_grand_bill_total);
	print_formated(l_grand_exemption_total);
	print_formated(l_grand_paid_total);
	print_formated(l_grand_refund_total);
	print_formated(l_grand_reconsilation_total);
	print_formated(l_grand_writeoff_total);
	print_formated(l_grand_outst_total);
	fprintf(fp,"\n");
	fprintf(fp,"%112s"," ");
	for(i=0;i<120;i++)
	fprintf(fp,"%s","_");
	fprintf(fp,"\n");
	
	l_grand_deposit_total		= 0;
	l_grand_bill_total			= 0;
	l_grand_exemption_total		= 0;
	l_grand_paid_total			= 0;
	l_grand_refund_total		= 0;
	l_grand_reconsilation_total	= 0;
	l_grand_writeoff_total		= 0;
	l_grand_outst_total			= 0;
}
/* Pradeep 23-10-2006 */

print_report()
{
    print_page_title();

    d_prv_blng_grp_catg.arr[0]='\0';
	d_prv_blng_grp_catg.len=0;

	while(fetch_cursors())
	{
	     
	  print_letter_deposit_detail();
	  
	     
	}
	 
	get_sub_totals();
	 
	get_grand_totals();
	
}    
  
fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

    EXEC SQL   SELECT ACC_ENTITY_NAME, 
			   TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
			   USER
         INTO  :hosp_name, :date_time, :user_id
         FROM  SY_ACC_ENTITY
		 WHERE  ACC_ENTITY_ID = :nd_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

	hosp_name.arr[hosp_name.len]           = '\0';
	date_time.arr[date_time.len]           = '\0';
	user_id.arr[user_id.len]               = '\0';
}


print_formated(loc_amount)
double loc_amount;
{
    char s_amt[30], str_amt[30];	
    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
	    //strcat(s_amt,"-");
        sprintf(str_amt,"-%s",s_amt);
		l_ltrim(s_amt);
        fprintf(fp,"%15s",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
		l_ltrim(s_amt);
        fprintf(fp,"%15s",str_amt);
    }
}

check_page_break()
{
	if (l_line_no >= 60)	
	{
	        l_line_no = 0;
		fprintf(fp,"\f\n");
		print_page_title();
	}
}


print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp," ");
	}
}

fetch_legend_value()
{
    for(i=1;i<100;i++)
	{	l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00061.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		         INTO :l_pk_value
				 FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN			
			blcommon.get_local_lang_desc(	
							:nd_facility_id,
							'SM',
							'SM_LANG_LEGEND',
							'DFLT_LEGEND_VALUE',
							:l_pk_value,
							:l_translated_value,
							:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;
	
	l_report_width=228;

	get_header_dtls();

	fprintf(fp,"%c",0x0F); // set printer to compressed mode 

	l_acc_entity_length = strlen(d_acc_entity_name.arr);

	//Code for Line 1
	l_start_point=(l_report_width/2)-(l_acc_entity_length/2);
	fprintf(fp,"MDL           : BL");
	l_start_point=l_start_point-18;
	print_spaces(l_start_point);
	fprintf(fp,"%s",d_acc_entity_name.arr);
	l_comp_name_end_point=l_start_point+18+l_acc_entity_length;
	l_start_point=(l_report_width-(15+strlen(date.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp,"%-15.15s : %s\n",loc_legend[11],date.arr);

	//Code for Line 2  
	l_start_point=0;
	l_start_point=(l_report_width/2)-((strlen(loc_legend[1]))/2);
	fprintf(fp,"OPR           : %s",d_user.arr);
	l_start_point=l_start_point-(strlen(d_user.arr)+16);
	print_spaces(l_start_point);
	fprintf(fp,"%s",loc_legend[1]);
	l_comp_name_end_point=l_start_point+(strlen(d_user.arr)+16)+strlen(loc_legend[1]);
	l_start_point=(l_report_width-(17+strlen(date_time.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp," %-15.15s : %s\n",loc_legend[12],date_time.arr);

	//Code for Line 3
	l_start_point=0;
		l_from_and_to_date.arr[0] = '\0';
	EXEC SQL SELECT :loc_legend[27]||' '||:nd_fr_date ||' '|| :loc_legend[28] ||' '|| :nd_to_date
	           INTO :l_from_and_to_date
	           FROM dual;
	l_from_and_to_date.arr[l_from_and_to_date.len] = '\0';

	l_start_point=(l_report_width/2)-((strlen(l_from_and_to_date.arr))/2);
	fprintf(fp,"%-14.14s: BLR00061",loc_legend[14]);
	l_start_point=l_start_point-24;
	print_spaces(l_start_point);
	fprintf(fp,"%s",l_from_and_to_date.arr);
	l_comp_name_end_point=l_start_point+24+strlen(l_from_and_to_date.arr);
	l_start_point=(l_report_width-(17+7)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(fp,"%-15.15s : %d\n",loc_legend[13],++l_page_no);	
		
	l_line_no= l_line_no + 3;
	print_page_header();	
}  

print_page_header()
{	
	int k = 0;
	char from_blg_cat[21],  to_blg_cat[21];
	char fr_bed_class[21],  to_bed_class[21];
	char fr_nur[21],  to_nur[21];
   	print_line(233);   
	fprintf(fp,"\n");  

	if (l_page_no == 1)
	{
	//	fprintf(fp,"VER		: 10.3\n\n\n\n");
	fprintf(fp,"\n\n\n\n");
		fprintf(fp,"		INPUT PARAMETER\n");	
		fprintf(fp,"		---------------\n\n");	
/* 		fprintf(fp,"			FROM DATE	: %s\n",nd_fr_date.arr);	
		fprintf(fp,"			  TO DATE	: %s\n",nd_to_date.arr); 
		COMMENTED BY SAIKIRAN ON IN13000 TO ALIGN ALL THE LEGENDS PROPERLY 
		*/
 	
 		fprintf(fp,"%-19s     FROM DATE       : %s\n"," ",nd_fr_date.arr);	
		fprintf(fp,"%-19s       TO DATE       : %s\n"," ",nd_to_date.arr); 
     
/*		if (nd_episode_type.arr[0] == 'I')
		fprintf(fp,"		     %-s       : %s\n",loc_legend[44],loc_legend[42]);
		else
		fprintf(fp,"%-15s: %s\n",loc_legend[44],loc_legend[43]);
		COMMENTED BY SAIKIRAN ON IN13000 TO ALIGN ALL THE LEGENDS PROPERLY 
*/
       
		if (nd_episode_type.arr[0] == 'I')
		fprintf(fp,"%-20s %-s       : %s\n"," ",loc_legend[44],loc_legend[42]);
		else
		fprintf(fp,"%-20s %-s       : %-s\n"," ",loc_legend[44],loc_legend[43]);


	if(strcmp(nd_blng_grp_fr_catg.arr,"!!!!")==0)
			strcpy(from_blg_cat, loc_legend[33]);
		else
			strcpy(from_blg_cat, nd_blng_grp_fr_catg.arr);
		

		if(strcmp(nd_blng_grp_to_catg.arr,"~~~~")==0)
			strcpy(to_blg_cat, loc_legend[34]);
		else
			strcpy(to_blg_cat, nd_blng_grp_to_catg.arr);

fprintf(fp,"%10.10s %-28.30s : %-8s %-8s %-4s %-8s\n"," ",loc_legend[38],loc_legend[36],from_blg_cat,loc_legend[37],to_blg_cat);  


		if(strcmp(nd_fr_nur_unit.arr,"!!!!")==0)
			strcpy(fr_nur, loc_legend[33]);
		else
			strcpy(fr_nur, nd_fr_nur_unit.arr);
		

		if(strcmp(nd_to_nur_unit.arr,"~~~~")==0)
			strcpy(to_nur, loc_legend[34]);
		else
			strcpy(to_nur, nd_to_nur_unit.arr);

fprintf(fp,"%20.20s %-18.18s : %-8s %-8s %-4s %-8s\n"," ",loc_legend[50],loc_legend[36],fr_nur,loc_legend[37],to_nur);  




  
		if(strcmp(nd_fr_bed_class.arr,"!!")==0)
			strcpy(fr_bed_class, loc_legend[33]);
		else
			strcpy(fr_bed_class, nd_fr_bed_class.arr);

		if(strcmp(nd_to_bed_class.arr,"~~")==0)
			strcpy(to_bed_class, loc_legend[34]);
		else
			strcpy(to_bed_class,nd_to_bed_class.arr);

 fprintf(fp,"%23.10s %-15.15s : %-8s %-8s %-4s %-8s \n"," ",loc_legend[40],loc_legend[36],fr_bed_class,loc_legend[37],to_bed_class);	
 //fprintf(fp,"%23.10s %-30.30s : %-8s %-8s %-4s %-8s\n"," ",loc_legend[101],loc_legend[101],fr_bed_class,loc_legend[37],to_bed_class);  

		l_line_no = 60;
		check_page_break();
	}
	else
	{	
		//fprintf(fp,"%5.5s %-20.20s %-10.10s %-40.40s %-5.5s %-12.12s %-13.13s",
		//loc_legend[29],loc_legend[2],loc_legend[3],loc_legend[4],loc_legend[8],loc_legend[17],loc_legend[18]);

		//fprintf(fp," %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s\n",
		//loc_legend[19],loc_legend[20],loc_legend[21],loc_legend[22],loc_legend[23],loc_legend[24],loc_legend[25],loc_legend[26]);	

		

		fprintf(fp,"%5.5s %-20.20s %-10.10s %-40.40s %-5.5s %-12.12s %-13.13s",
		loc_legend29_1,loc_legend2_1,loc_legend3_1,loc_legend4_1,loc_legend8_1,loc_legend17_1,loc_legend18_1);

		fprintf(fp," %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s\n",
		loc_legend19_1,loc_legend20_1,loc_legend21_1,loc_legend22_1,loc_legend23_1,loc_legend24_1,loc_legend25_1,loc_legend26_1);	


		fprintf(fp,"%5.5s %-20.20s %-10.10s %-40.40s %-5.5s %-12.12s %-13.13s",
		loc_legend29_2	,loc_legend2_2,loc_legend3_2,loc_legend4_2,loc_legend8_2,loc_legend17_2,loc_legend18_2);
						
		fprintf(fp," %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s %14.14s\n",
		loc_legend19_2,loc_legend20_2,loc_legend21_2,loc_legend22_2,loc_legend23_2,loc_legend24_2,loc_legend25_2,loc_legend26_2);	
         
		fprintf(fp," %125s",loc_legend32_1);
		fprintf(fp," %14s",loc_legend46_1);
		fprintf(fp," %31s",loc_legend32_1);
        fprintf(fp,"\n");
        fprintf(fp," %125s",loc_legend45_1);
        fprintf(fp," %14.14s",loc_legend47_1);
		fprintf(fp," %31.31s",loc_legend45_1);
		fprintf(fp,"\n");
         

		//fprintf(fp," %133s       %20s %30s\n",loc_legend45_1,loc_legend47_1,loc_legend45_1);
		  

		//fprintf(fp,"%5.5s %-72.72s %-9.9s %-10.10s\n"," "," ", "", loc_legend17_2);		

		print_line(233);

		fprintf(fp,"\n");
		l_line_no = l_line_no+5;
	}
}


print_line(l_length)
int l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(fp,"-");
	}
}
get_header_dtls()
{
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL SELECT ACC_ENTITY_NAME,
					'('||BASE_CURRENCY||')',
				    USER,
				    TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'),
					TO_CHAR(SYSDATE,'DD/MM/YYYY'),
					TO_CHAR(SYSDATE,'HH24:MI:SS')
		      INTO :d_acc_entity_name,
				   :d_base_currency,
			  	   :d_user,
				   :d_sysdate,
				   :date,
				   :date_time
              FROM SY_ACC_ENTITY
			 WHERE acc_entity_id = :nd_facility_id;

	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
    date.arr[date.len]							 = '\0';
    date_time.arr[date_time.len]				 = '\0';	

	return;    

	err_exit:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL ROLLBACK WORK RELEASE;
	   disp_message(ERR_MESG,"Oracle error at get_header_dtls() occured....");
	   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	   proc_exit();
}




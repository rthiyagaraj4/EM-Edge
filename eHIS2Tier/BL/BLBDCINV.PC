/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLBDCINV.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 07-AUG-1993                                 */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */ 
/*                                                                      */
/*  TABLE DETAILS                                                        */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*          1.         BL_BILL_HDR               Read                   */
/*          2.         BL_BILL_LINE              Read                   */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/
      
#include <stdio.h>          
#include <string.h>
#include <gl.h>
#include <bl.h>    

  

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])

#define VIEW_LOG_FILE 1

EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [30],
		    date_time                                  [20],
		    user_id                                    [91],
			uid_pwd									   [91],
		    nd_session_id                              [16],
		    nd_pgm_date                                [25],
		    d_curr_pgm_name                            [15],
			nd_facility_id							   [3],
			d_ws_no                                    [31],
		    nd_fm_doc_date                             [12],
		    nd_to_doc_date                             [12],
		    nd_fm_doc_type_code                        [7],
		    nd_to_doc_type_code                        [7],
		    nd_fm_doc_num                              [9],
		    nd_to_doc_num                              [9],
		    nd_inv_doc_type_code                       [7],
		    nd_inv_date                                [12],
		    nd_doc_num_gen_flag                        [2],
	
		    d_acc_status                               [2],
		    d_acc_valid_flag                           [2],
		    t_bill_print_flag						   [2],
		    d_sy_acc_rowid                             [31];

      long  nd_inv_start_doc_num,
		    nd_new_doc_num;

   VARCHAR bl_h_doc_type_code                          [7],
		   bl_h_doc_num                                [9],
		   bl_h_doc_date                               [13],
		   bl_h_bill_trx_type_code                     [2],
		   bl_h_serv_locn_code                         [5],
		   bl_h_bill_from_date                         [13],
		   bl_h_bill_to_date                           [13],
		   bl_h_gross_amt                              [23],
		   bl_h_serv_disc_amt                          [23],
		   bl_h_man_disc_amt                           [23],
		   bl_h_overall_disc_perc                      [6],
		   bl_h_overall_disc_amt                       [23],
		   bl_h_ovr_disc_acc_int_code                  [7],
		   bl_h_prepay_adj_amt                         [23],
		   bl_h_deposit_adj_amt                        [23],
		   bl_h_bill_amt                               [23],
		   bl_h_bill_hosp_amt                          [23],
		   bl_h_bill_drfee_amt                         [23],
		   bl_h_bill_prv_doc_type_code                 [7],
		   bl_h_bill_prv_doc_number                    [23],
		   bl_h_bill_prv_doc_date                      [13],
		   bl_h_bill_prv_bill_amt                      [23],
		   bl_h_bill_prv_bill_paid_amt                 [23],
		   bl_h_bill_prv_outst_amt                     [23],
		   bl_h_bill_hosp_prv_outst_amt                [23],
		   bl_h_bill_df_prv_outst_amt               [23],
		   bl_h_bill_tot_amt                           [23],
		   bl_h_bill_hosp_tot_amt                      [23],
		   bl_h_bill_drfee_tot_amt                     [23],
		   bl_h_bill_tot_outst_amt                     [23],
		   bl_h_bill_hosp_tot_outst_amt                [23],
		   bl_h_bill_df_tot_outst_amt               [23],
		   bl_h_bill_paid_amt                          [23],
		   bl_h_episode_type                           [2],
		   bl_h_patient_id                             [21],
		   bl_h_episode_id                             [9],
		   bl_h_visit_id                               [5],
		   bl_h_admission_date                         [13],
		   bl_h_ward_code                              [5],
		   bl_h_bed_class_code                         [3],
		   bl_h_room_num                               [5],
		   bl_h_bed_num                                [9],
		   bl_h_physician_id                           [16],
		   bl_h_clinic_code                            [5],
		   bl_h_cust_code                              [9],
		   bl_h_blng_grp_id                            [5],
		   bl_h_bill_type_code                         [3],
		   bl_h_cons_invoice_ind                       [2],
		   bl_h_bill_status                            [2],
		   bl_h_bill_print_flag                        [2],
		   bl_h_drfee_bill_upd_flag                    [2],
		   bl_h_drfee_rec_upd_flag                     [2],
		   bl_h_drfee_receipt_amt                      [23],
		   bl_h_ar_inv_doc_type_code                   [7],
		   bl_h_ar_inv_doc_number                      [9],
		   bl_h_ar_inv_doc_date                        [13],
		   bl_h_last_rct_doc_type_code               [7],
		   bl_h_last_recpt_doc_num                     [23],
		   bl_h_last_recpt_doc_date                    [13],
		   bl_h_bill_nature_code                       [2],
		   bl_h_tot_paid_amt                           [23],
		   bl_h_bill_posted_flag                       [2],
		   bl_h_added_by_id                            [21],
		   bl_h_modified_by_id                         [21],
		   bl_h_added_date                             [13],
		   bl_h_modified_date                          [13],
		   bl_h_rowid                                  [31],
       	
		   nd_new_doc_type_code                        [7],
	
		   bl_par_post_month                           [3],
		   bl_par_post_year                            [5],
	    
		   recv_int_code                               [7],
		   bl_recv_acc_int_code                        [7],
		   ar_recv_acc_int_code                        [7],
		   bl_bill_type_long_desc                      [31],
	
		   bl_rec_main_acc1_code                       [7],
		   bl_rec_main_acc2_code                       [5],
		   bl_rec_dept_code                            [12],
		   bl_rec_subledger_group_code                 [4],
		   bl_rec_subledger_line_code                  [9],
		   bl_rec_product_group_code                   [4],
		   bl_rec_product_line_code                    [5],
	
		   ar_rec_main_acc1_code                       [7],
		   ar_rec_main_acc2_code                       [5],
		   ar_rec_dept_code                            [12],
		   ar_rec_subledger_group_code                 [4],
		   ar_rec_subledger_line_code                  [9],
		   ar_rec_product_group_code                   [4],
		   ar_rec_product_line_code                    [5],
	
		   bl_cust_pmnt_terms_code                     [3],
		   ar_pmnt_cred_days_period                    [4],
		   ar_pmnt_settl_days_period                   [4],
		   ar_pmnt_settl_percent                       [9],
	
		   bl_h_credit_doc_ref_desc                    [16];
	
double     bill_tot_outst_amt,
		   bill_hosp_tot_outst_amt,
		   bill_drfee_tot_outst_amt,
		   d_tot_boun_clr_amt,
		   d_bounced_hosp_charges,
		   d_bounced_drfee_charges;

     int   bl_par_def_pat_crdt_days      = 0,
		   boun_exists,count;

    char   d_ip_gl_yn,
		   d_op_gl_yn,
		   d_rf_gl_yn,
		   d_bill_print_reqd_for_inv_yn;

    char   aMesg[2000];

	char   l_msg[500];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

int    g_err_typ;

char g_err_id[8],
     g_err_msg[72];

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0;

	//disp_message(ERR_MESG,"1");

    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    } 
 
	//disp_message(ERR_MESG,"1");

    strcpy(g_pgm_id,"BLBDCINV");


	strcpy(uid_pwd.arr,argv[1]);
    uid_pwd.len = strlen(uid_pwd.arr);

    EXEC SQL CONNECT :uid_pwd;

    if(OERROR) {
		disp_message(ORA_MESG,"Unable to connect to oracle.");
		proc_exit();
    }
  
   	//disp_message(ERR_MESG,"2");

   set_meduser_role();

 
    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);
	strcpy(g_facility_id,nd_facility_id.arr);

    start_prog_msg();
//disp_message(ERR_MESG,"Before fetch prog param");
    fetch_prog_param();
//disp_message(ERR_MESG,"bef fetch bl param");

    fetch_bl_param();

   // fetch_ws_id(); 
//disp_message(ERR_MESG,"bef declare cur");
    declare_cur();
//disp_message(ERR_MESG,"bef open cur  hdr");    
    open_cur_hdr();
//disp_message(ERR_MESG,"bef while");

    while(fetch_cur())
    {
	 if(d_bill_print_reqd_for_inv_yn=='Y')
	 {

	   if(t_bill_print_flag.arr[0]=='N')
	  {
	   sprintf(aMesg,"Document Is Not Printed %s/%s",
	   bl_h_doc_type_code.arr,bl_h_doc_num.arr);
	   //log_err_mesg(l_msg,0,"");
	    disp_message(INFO_MESG,aMesg);
	   continue;
	}

	 } 


       rec_ctr++;
       if (!lock_record())
       {
	   //disp_message(ERR_MESG,"while 0");
	 sprintf(aMesg,"Bill Record %-s/%-s is locked ",
		bl_h_doc_type_code.arr,bl_h_doc_num.arr);
         disp_message(INFO_MESG,aMesg);
	 continue;
       }
  
 //disp_message(ERR_MESG,"while 1");

       bill_tot_outst_amt       -= d_tot_boun_clr_amt;
       bill_hosp_tot_outst_amt  += d_bounced_hosp_charges;
       bill_drfee_tot_outst_amt += d_bounced_drfee_charges;
//disp_message(ERR_MESG,"while 2");
       fetch_dtls();	   
//disp_message(ERR_MESG,"Before Insert rec...");
       insert_rec();  
//disp_message(ERR_MESG,"After Insert rec...");
       
       EXEC SQL COMMIT WORK;

       if (OERROR)
	 err_mesg("COMMIT failed",0,""); 
    }
//disp_message(ERR_MESG,"process success"); 
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
	 err_mesg("COMMIT WORK RELEASE failed REA",0,"");

   return;
}


fetch_prog_param()
{
    nd_facility_id.arr[0]               = '\0';
    nd_fm_doc_date.arr[0]               = '\0';
    nd_to_doc_date.arr[0]               = '\0';
    nd_fm_doc_type_code.arr[0]          = '\0';
    nd_to_doc_type_code.arr[0]          = '\0';
    nd_fm_doc_num.arr[0]                = '\0';
    nd_to_doc_num.arr[0]                = '\0';
    nd_facility_id.len                  = 0;
    nd_fm_doc_date.len                  = 0;
    nd_to_doc_date.len                  = 0;
    nd_fm_doc_type_code.len             = 0;
    nd_to_doc_type_code.len             = 0;
    nd_fm_doc_num.len                   = 0;
    nd_to_doc_num.len                   = 0;
    EXEC SQL SELECT operating_facility_id,PARAM1,PARAM2,PARAM3,PARAM4,
		   PARAM5,PARAM6, PARAM7
	      INTO :nd_facility_id,:nd_fm_doc_date,      :nd_to_doc_date,
		   :nd_fm_doc_type_code, :nd_to_doc_type_code,
		   :nd_fm_doc_num,       :nd_to_doc_num,
		   :d_ws_no
	      FROM SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_name
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;


   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_facility_id.arr[nd_facility_id.len]             = '\0';
   nd_fm_doc_date.arr[nd_fm_doc_date.len]             = '\0';
   nd_to_doc_date.arr[nd_to_doc_date.len]             = '\0';
   nd_fm_doc_type_code.arr[nd_fm_doc_type_code.len]   = '\0';
   nd_to_doc_type_code.arr[nd_to_doc_type_code.len]   = '\0';
   nd_fm_doc_num.arr[nd_fm_doc_num.len]               = '\0';
   nd_to_doc_num.arr[nd_to_doc_num.len]               = '\0';
/*
   disp_message(ERR_MESG,"d_curr_pgm_name");
disp_message(ERR_MESG,d_curr_pgm_name.arr);
disp_message(ERR_MESG,"nd_fm_doc_type_code");
disp_message(ERR_MESG,nd_fm_doc_type_code.arr);*/

   strcpy(g_facility_id,nd_facility_id.arr);

   EXEC SQL DELETE SY_PROG_PARAM
	     WHERE PGM_ID     = :d_curr_pgm_name
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
	 err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

fetch_bl_param()
{

    bl_par_post_month.arr[0]      = '\0';
    bl_par_post_year.arr[0]       = '\0';

    bl_par_post_month.len         = 0;
    bl_par_post_year.len          = 0;

    bl_par_def_pat_crdt_days      = 0;

    d_ip_gl_yn       = '\0';
    d_op_gl_yn       = '\0';
    d_rf_gl_yn       = '\0';
	d_bill_print_reqd_for_inv_yn ='\0';

    /*
    EXEC SQL SELECT CURRENT_PROC_ACC_MONTH,  CURRENT_PROC_ACC_YEAR,
		    DEF_PAT_CRDT_DAYS
	       INTO :bl_par_post_month,      :bl_par_post_year,
		    :bl_par_def_pat_crdt_days
	       FROM BL_PARAMETERS
		   WHERE operating_facility_id = :nd_facility_id;
    */


    EXEC SQL SELECT 
            CURRENT_PROC_ACC_MONTH,
            CURRENT_PROC_ACC_YEAR,
    
    /*      TO_CHAR(SYSDATE,'MM'),
            TO_CHAR(SYSDATE,'YY'),  */
            
		    DEF_PAT_CRDT_DAYS,
		    NVL(IP_GL_REQD_YN,'N'),
		    NVL(OP_GL_REQD_YN,'N'),
		    NVL(RF_GL_REQD_YN,'N'),
			nvl(BILL_PRINTING_REQD_FOR_DCP_YN,'N')
	       INTO :bl_par_post_month,      :bl_par_post_year,
		    :bl_par_def_pat_crdt_days,
		    :d_ip_gl_yn,
		    :d_op_gl_yn,
		    :d_rf_gl_yn,
			:d_bill_print_reqd_for_inv_yn
	       FROM BL_PARAMETERS
		   WHERE operating_facility_id = :nd_facility_id;

    if (OERROR)
	 err_mesg("SELECT failed on table BL_PARAMETERS",0,"");

    if (NOT_FOUND)
	err_mesg("Record not found in BL PARAMETERS",0,"");

    bl_par_post_month.arr[bl_par_post_month.len] = '\0';
    bl_par_post_year.arr[bl_par_post_year.len] = '\0';

}
/*
fetch_ws_id()
{
   d_ws_no.arr[0]      = '\0'; 
  d_ws_no.len = 0;

  EXEC SQL EXECUTE
	BEGIN
		workstation.get_workstation_id (:nd_facility_id, :d_ws_no);
	END;
	END-EXEC;

  d_ws_no.arr[d_ws_no.len]      = '\0'; 
} 
*/
declare_cur()
{

     EXEC SQL DECLARE BL_HDR_CUR CURSOR FOR
	       SELECT DOC_TYPE_CODE,
		      DOC_NUM,
			  Nvl(bill_print_flag,'N')
		 FROM BL_BILL_HDR a
		 WHERE operating_facility_id = :nd_facility_id AND
	     TRUNC(DOC_DATE)     BETWEEN
			NVL(TO_DATE(:nd_fm_doc_date,'DD/MM/YYYY'),
                           to_date('01/01/1900','DD/MM/YYYY'))
		     AND 
			NVL(TO_DATE(:nd_to_doc_date,'DD/MM/YYYY'),
                            to_date('01/01/3000','DD/MM/YYYY'))
		  AND 
				  RPAD(DOC_TYPE_CODE,6,' ')|| LPAD(DOC_NUM,8,'0')
					 BETWEEN
					 RPAD(NVL(:nd_fm_doc_type_code,' '),6,' ')||
					 LPAD(NVL(:nd_fm_doc_num,0),8,'0')
					 AND
					 RPAD(NVL(:nd_to_doc_type_code,'~~~~~~'),6,' ')||
					 LPAD(NVL(:nd_to_doc_num,99999999),8,'0')
		  AND BILL_NATURE_CODE = 'C'
		  AND BILL_TRX_TYPE_CODE != 'I'
		  AND ( (BILL_POSTED_FLAG = 'Y' 
                 AND  EXISTS
                (SELECT 'x' FROM  BL_PARAMETERS  B
                 WHERE  operating_facility_id = :nd_facility_id and decode(a.episode_type,'O','Y','E','Y', 'I','Y','D','Y','R','Y','N')=
                           
                                   Decode(decode(a.episode_type,'O',OP_GL_REQD_YN,
                                                                'E',OP_GL_REQD_YN,
                                                                'I',IP_GL_REQD_YN,
                                                                'D',IP_GL_REQD_YN,
                                                                'R',RF_GL_REQD_YN,null),'Y','Y',null)
                )
                )
              OR (EXISTS
                 (SELECT 'x' FROM  BL_PARAMETERS  B
                  WHERE  operating_facility_id = :nd_facility_id and decode(a.episode_type,'O','N','E','N', 'I','N','D','N','R','N','Y')=
                           
                                   Decode(decode(a.episode_type,'O',OP_GL_REQD_YN,
                                                                'E',OP_GL_REQD_YN,
                                                                'I',IP_GL_REQD_YN,
                                                                'D',IP_GL_REQD_YN,
                                                                'R',RF_GL_REQD_YN,null),'N','N',null)
                 )
				)
            ) 
		
		  AND BILL_STATUS IS NULL;



     EXEC SQL DECLARE BL_HDR_REC_CUR CURSOR FOR
	       SELECT TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
		      BILL_TRX_TYPE_CODE,
		      SERV_LOCN_CODE,
		      TO_CHAR(BILL_FROM_DATE,'DD/MM/YYYY'),
		      TO_CHAR(BILL_TO_DATE,'DD/MM/YYYY'),
		      GROSS_AMT,
		      SERV_DISC_AMT,
		      MAN_DISC_AMT,
		      OVERALL_DISC_PERC,
		      OVERALL_DISC_AMT,
		      OVR_DISC_ACC_INT_CODE,
		      PREPAY_ADJ_AMT,
		      DEPOSIT_ADJ_AMT,
		      BILL_AMT,
		      BILL_HOSP_AMT,
		      BILL_DRFEE_AMT,
		      BILL_PRV_DOC_TYPE_CODE,
		      BILL_PRV_DOC_NUMBER,
		      TO_CHAR(BILL_PRV_DOC_DATE,'DD/MM/YYYY'),
		      BILL_PRV_BILL_AMT,
		      BILL_PRV_BILL_PAID_AMT,
		      BILL_PRV_OUTST_AMT,
		      BILL_HOSP_PRV_OUTST_AMT,
		      BILL_DRFEE_PRV_OUTST_AMT,
		      BILL_TOT_AMT,
		      BILL_HOSP_TOT_AMT,
		      BILL_DRFEE_TOT_AMT,
		      NVL(BILL_TOT_OUTST_AMT,0),
		      NVL(BILL_HOSP_TOT_OUTST_AMT,0),
		      NVL(BILL_DRFEE_TOT_OUTST_AMT,0),
		      NVL(BILL_TOT_OUTST_AMT,0),
		      NVL(BILL_HOSP_TOT_OUTST_AMT,0),
		      NVL(BILL_DRFEE_TOT_OUTST_AMT,0),
		      BILL_PAID_AMT,
		      EPISODE_TYPE,
		      PATIENT_ID,
		      EPISODE_ID,
		      VISIT_ID,
		      TO_CHAR(ADMISSION_DATE,'DD/MM/YYYY'),
		      WARD_CODE,
		      BED_CLASS_CODE,
		      ROOM_NUM,
		      BED_NUM,
		      PHYSICIAN_ID,
		      CLINIC_CODE,
		      CUST_CODE,
		      BLNG_GRP_ID,
		      BILL_TYPE_CODE,
		      CONS_INVOICE_IND,
		      BILL_STATUS,
		      BILL_PRINT_FLAG,
		      DRFEE_BILL_UPD_FLAG,
		      DRFEE_REC_UPD_FLAG,
		      DRFEE_RECEIPT_AMT,
		      AR_INV_DOC_TYPE_CODE,
		      AR_INV_DOC_NUMBER,
		      TO_CHAR(AR_INV_DOC_DATE,'DD/MM/YYYY'),
		      LAST_RECPT_DOC_TYPE_CODE,
		      LAST_RECPT_DOC_NUM,
		      TO_CHAR(LAST_RECPT_DOC_DATE,'DD/MM/YYYY'),
		      BILL_NATURE_CODE,
		      TOT_PAID_AMT,
		      BILL_POSTED_FLAG,
		      ADDED_BY_ID,
		      MODIFIED_BY_ID,
		      ADDED_DATE,
		      MODIFIED_DATE,
		      ROWID
		 FROM BL_BILL_HDR
		WHERE operating_facility_id = :nd_facility_id AND
			  DOC_TYPE_CODE = :bl_h_doc_type_code
		  AND DOC_NUM       = :bl_h_doc_num
		  FOR UPDATE OF BILL_STATUS NOWAIT;

     EXEC SQL DECLARE BL_BILL_TYPE_CUR CURSOR FOR
	       SELECT b.BL_RECV_ACC_INT_CODE,
		      b.DCP_RECV_ACC_INT_CODE,
		      a.LONG_DESC
		 FROM BL_BILL_TYPE A, BL_BILL_TYPE_INT b
		WHERE a.BILL_TYPE_CODE = :bl_h_bill_type_code
		and a.BILL_TYPE_CODE = b.BILL_TYPE_CODE
		and a.ACC_ENTITY_CODE = b.ACC_ENTITY_CODE
		AND   TO_DATE(:bl_h_doc_date,'DD/MM/YYYY') between 
		      NVL(b.eff_from_date,TO_DATE('01/01/1900','DD/MM/YYYY')) AND 
		      NVL(b.eff_to_date,SYSDATE);
		      /* Effective date range is included ON 01/06/2004 */

     EXEC SQL DECLARE BL_GL_ACCOUNT_CUR CURSOR FOR
	       SELECT MAIN_ACC1_CODE,
		      MAIN_ACC2_CODE,
		      DEPT_CODE,
		      SUBLEDGER_GROUP_CODE,
		      SUBLEDGER_LINE_CODE,
		      PRODUCT_GROUP_CODE,
		      PRODUCT_LINE_CODE
		 FROM BL_GL_ACCOUNT
		WHERE ACC_INT_CODE = :recv_int_code;

}

open_cur_hdr()
{
     EXEC SQL OPEN BL_HDR_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_HDR_CUR",0,"");
}

fetch_cur()
{
//disp_message(ERR_MESG,"In fetch_cur...");
bl_h_doc_type_code.arr[0]                                         = '\0';
bl_h_doc_num.arr[0]                                               = '\0';
t_bill_print_flag.arr[0]            = '\0';
bl_h_doc_type_code.len                                            = 0;
bl_h_doc_num.len                                                  = 0;
t_bill_print_flag.len=0;

     EXEC SQL FETCH BL_HDR_CUR
	       INTO :bl_h_doc_type_code,
		    :bl_h_doc_num,
		    :t_bill_print_flag;
//disp_message(ERR_MESG,"fetch cur 2");
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_HDR_CUR",0,"");

bl_h_doc_type_code.arr[bl_h_doc_type_code.len]                           = '\0';
bl_h_doc_num.arr[bl_h_doc_num.len]                                       = '\0';
t_bill_print_flag.arr[t_bill_print_flag.len]  = '\0';

if(LAST_ROW) 
count=0;
   return(LAST_ROW?0:1);
   //disp_message(ERR_MESG,"process success"); 
}

lock_record()
{
   char l_str[100];

bl_h_doc_date.arr[0]                                              = '\0';
bl_h_bill_trx_type_code.arr[0]                                    = '\0';
bl_h_serv_locn_code.arr[0]                                        = '\0';
bl_h_bill_from_date.arr[0]                                        = '\0';
bl_h_bill_to_date.arr[0]                                          = '\0';
bl_h_gross_amt.arr[0]                                             = '\0';
bl_h_serv_disc_amt.arr[0]                                         = '\0';
bl_h_man_disc_amt.arr[0]                                          = '\0';
bl_h_overall_disc_perc.arr[0]                                     = '\0';
bl_h_overall_disc_amt.arr[0]                                      = '\0';
bl_h_ovr_disc_acc_int_code.arr[0]                                 = '\0';
bl_h_prepay_adj_amt.arr[0]                                        = '\0';
bl_h_deposit_adj_amt.arr[0]                                       = '\0';
bl_h_bill_amt.arr[0]                                              = '\0';
bl_h_bill_hosp_amt.arr[0]                                         = '\0';
bl_h_bill_drfee_amt.arr[0]                                        = '\0';
bl_h_bill_prv_doc_type_code.arr[0]                                = '\0';
bl_h_bill_prv_doc_number.arr[0]                                   = '\0';
bl_h_bill_prv_doc_date.arr[0]                                     = '\0';
bl_h_bill_prv_bill_amt.arr[0]                                     = '\0';
bl_h_bill_prv_bill_paid_amt.arr[0]                                = '\0';
bl_h_bill_prv_outst_amt.arr[0]                                    = '\0';
bl_h_bill_hosp_prv_outst_amt.arr[0]                               = '\0';
bl_h_bill_df_prv_outst_amt.arr[0]                              = '\0';
bl_h_bill_tot_amt.arr[0]                                          = '\0';
bl_h_bill_hosp_tot_amt.arr[0]                                     = '\0';
bl_h_bill_drfee_tot_amt.arr[0]                                    = '\0';
bl_h_bill_tot_outst_amt.arr[0]                                    = '\0';
bl_h_bill_hosp_tot_outst_amt.arr[0]                               = '\0';
bl_h_bill_df_tot_outst_amt.arr[0]                              = '\0';
bl_h_bill_paid_amt.arr[0]                                         = '\0';
bl_h_episode_type.arr[0]                                          = '\0';
bl_h_patient_id.arr[0]                                            = '\0';
bl_h_episode_id.arr[0]                                            = '\0';
bl_h_visit_id.arr[0]                                              = '\0';
bl_h_admission_date.arr[0]                                        = '\0';
bl_h_ward_code.arr[0]                                             = '\0';
bl_h_bed_class_code.arr[0]                                        = '\0';
bl_h_room_num.arr[0]                                              = '\0';
bl_h_bed_num.arr[0]                                               = '\0';
bl_h_physician_id.arr[0]                                          = '\0';
bl_h_clinic_code.arr[0]                                           = '\0';
bl_h_cust_code.arr[0]                                             = '\0';
bl_h_blng_grp_id.arr[0]                                           = '\0';
bl_h_bill_type_code.arr[0]                                        = '\0';
bl_h_cons_invoice_ind.arr[0]                                      = '\0';
bl_h_bill_status.arr[0]                                           = '\0';
bl_h_bill_print_flag.arr[0]                                       = '\0';
bl_h_drfee_bill_upd_flag.arr[0]                                   = '\0';
bl_h_drfee_rec_upd_flag.arr[0]                                    = '\0';
bl_h_drfee_receipt_amt.arr[0]                                     = '\0';
bl_h_ar_inv_doc_type_code.arr[0]                                  = '\0';
bl_h_ar_inv_doc_number.arr[0]                                     = '\0';
bl_h_ar_inv_doc_date.arr[0]                                       = '\0';
bl_h_last_rct_doc_type_code.arr[0]                              = '\0';
bl_h_last_recpt_doc_num.arr[0]                                    = '\0';
bl_h_last_recpt_doc_date.arr[0]                                   = '\0';
bl_h_bill_nature_code.arr[0]                                      = '\0';
bl_h_tot_paid_amt.arr[0]                                          = '\0';
bl_h_bill_posted_flag.arr[0]                                      = '\0';
bl_h_added_by_id.arr[0]                                           = '\0';
bl_h_modified_by_id.arr[0]                                        = '\0';
bl_h_added_date.arr[0]                                            = '\0';
bl_h_modified_date.arr[0]                                         = '\0';
bl_h_rowid.arr[0]                                                 = '\0';

bl_h_doc_date.len                                                 = 0;
bl_h_bill_trx_type_code.len                                       = 0;
bl_h_serv_locn_code.len                                           = 0;
bl_h_bill_from_date.len                                           = 0;
bl_h_bill_to_date.len                                             = 0;
bl_h_gross_amt.len                                                = 0;
bl_h_serv_disc_amt.len                                            = 0;
bl_h_man_disc_amt.len                                             = 0;
bl_h_overall_disc_perc.len                                        = 0;
bl_h_overall_disc_amt.len                                         = 0;
bl_h_ovr_disc_acc_int_code.len                                    = 0;
bl_h_prepay_adj_amt.len                                           = 0;
bl_h_deposit_adj_amt.len                                          = 0;
bl_h_bill_amt.len                                                 = 0;
bl_h_bill_hosp_amt.len                                            = 0;
bl_h_bill_drfee_amt.len                                           = 0;
bl_h_bill_prv_doc_type_code.len                                   = 0;
bl_h_bill_prv_doc_number.len                                      = 0;
bl_h_bill_prv_doc_date.len                                        = 0;
bl_h_bill_prv_bill_amt.len                                        = 0;
bl_h_bill_prv_bill_paid_amt.len                                   = 0;
bl_h_bill_prv_outst_amt.len                                       = 0;
bl_h_bill_hosp_prv_outst_amt.len                                  = 0;
bl_h_bill_df_prv_outst_amt.len                                 = 0;
bl_h_bill_tot_amt.len                                             = 0;
bl_h_bill_hosp_tot_amt.len                                        = 0;
bl_h_bill_drfee_tot_amt.len                                       = 0;
bl_h_bill_tot_outst_amt.len                                       = 0;
bl_h_bill_hosp_tot_outst_amt.len                                  = 0;
bl_h_bill_df_tot_outst_amt.len                                 = 0;
bl_h_bill_paid_amt.len                                            = 0;
bl_h_episode_type.len                                             = 0;
bl_h_patient_id.len                                               = 0;
bl_h_episode_id.len                                               = 0;
bl_h_visit_id.len                                                 = 0;
bl_h_admission_date.len                                           = 0;
bl_h_ward_code.len                                                = 0;
bl_h_bed_class_code.len                                           = 0;
bl_h_room_num.len                                                 = 0;
bl_h_bed_num.len                                                  = 0;
bl_h_physician_id.len                                             = 0;
bl_h_clinic_code.len                                              = 0;
bl_h_cust_code.len                                                = 0;
bl_h_blng_grp_id.len                                              = 0;
bl_h_bill_type_code.len                                           = 0;
bl_h_cons_invoice_ind.len                                         = 0;
bl_h_bill_status.len                                              = 0;
bl_h_bill_print_flag.len                                          = 0;
bl_h_drfee_bill_upd_flag.len                                      = 0;
bl_h_drfee_rec_upd_flag.len                                       = 0;
bl_h_drfee_receipt_amt.len                                        = 0;
bl_h_ar_inv_doc_type_code.len                                     = 0;
bl_h_ar_inv_doc_number.len                                        = 0;
bl_h_ar_inv_doc_date.len                                          = 0;
bl_h_last_rct_doc_type_code.len                                 = 0;
bl_h_last_recpt_doc_num.len                                       = 0;
bl_h_last_recpt_doc_date.len                                      = 0;
bl_h_bill_nature_code.len                                         = 0;
bl_h_tot_paid_amt.len                                             = 0;
bl_h_bill_posted_flag.len                                         = 0;
bl_h_added_by_id.len                                              = 0;
bl_h_modified_by_id.len                                           = 0;
bl_h_added_date.len                                               = 0;
bl_h_modified_date.len                                            = 0;
bl_h_rowid.len                                                    = 0;

bill_tot_outst_amt       = 0;
bill_hosp_tot_outst_amt  = 0;
bill_drfee_tot_outst_amt = 0;

     EXEC SQL OPEN BL_HDR_REC_CUR;

     sprintf(l_str,"BL BILL HDR Document %s - %s busy",
	     bl_h_doc_type_code.arr,bl_h_doc_num.arr);

     if (RESOURCE_BUSY)
     {
	 log_err_mesg(l_str,0,"");
	 return(0);
     }
     else if (OERROR)
	 err_mesg("OPEN failed on cursor BL_HDR_REC_CUR",0,"");
//disp_message(ERR_MESG,"fetch cur ");

     EXEC SQL FETCH BL_HDR_REC_CUR
	       INTO :bl_h_doc_date,
		    :bl_h_bill_trx_type_code,
		    :bl_h_serv_locn_code,
		    :bl_h_bill_from_date,
		    :bl_h_bill_to_date,
		    :bl_h_gross_amt,
		    :bl_h_serv_disc_amt,
		    :bl_h_man_disc_amt,
		    :bl_h_overall_disc_perc,
		    :bl_h_overall_disc_amt,
		    :bl_h_ovr_disc_acc_int_code,
		    :bl_h_prepay_adj_amt,
		    :bl_h_deposit_adj_amt,
		    :bl_h_bill_amt,
		    :bl_h_bill_hosp_amt,
		    :bl_h_bill_drfee_amt,
		    :bl_h_bill_prv_doc_type_code,
		    :bl_h_bill_prv_doc_number,
		    :bl_h_bill_prv_doc_date,
		    :bl_h_bill_prv_bill_amt,
		    :bl_h_bill_prv_bill_paid_amt,
		    :bl_h_bill_prv_outst_amt,
		    :bl_h_bill_hosp_prv_outst_amt,
		    :bl_h_bill_df_prv_outst_amt,
		    :bl_h_bill_tot_amt,
		    :bl_h_bill_hosp_tot_amt,
		    :bl_h_bill_drfee_tot_amt,
		    :bl_h_bill_tot_outst_amt,
		    :bl_h_bill_hosp_tot_outst_amt,
		    :bl_h_bill_df_tot_outst_amt,
		    :bill_tot_outst_amt,
		    :bill_hosp_tot_outst_amt,
		    :bill_drfee_tot_outst_amt,
		    :bl_h_bill_paid_amt,
		    :bl_h_episode_type,
		    :bl_h_patient_id,
		    :bl_h_episode_id,
		    :bl_h_visit_id,
		    :bl_h_admission_date,
		    :bl_h_ward_code,
		    :bl_h_bed_class_code,
		    :bl_h_room_num,
		    :bl_h_bed_num,
		    :bl_h_physician_id,
		    :bl_h_clinic_code,
		    :bl_h_cust_code,
		    :bl_h_blng_grp_id,
		    :bl_h_bill_type_code,
		    :bl_h_cons_invoice_ind,
		    :bl_h_bill_status,
		    :bl_h_bill_print_flag,
		    :bl_h_drfee_bill_upd_flag,
		    :bl_h_drfee_rec_upd_flag,
		    :bl_h_drfee_receipt_amt,
		    :bl_h_ar_inv_doc_type_code,
		    :bl_h_ar_inv_doc_number,
		    :bl_h_ar_inv_doc_date,
		    :bl_h_last_rct_doc_type_code,
		    :bl_h_last_recpt_doc_num,
		    :bl_h_last_recpt_doc_date,
		    :bl_h_bill_nature_code,
		    :bl_h_tot_paid_amt,
		    :bl_h_bill_posted_flag,
		    :bl_h_added_by_id,
		    :bl_h_modified_by_id,
		    :bl_h_added_date,
		    :bl_h_modified_date,
		    :bl_h_rowid;
//disp_message(ERR_MESG,"fetch cur 56");
      if (OERROR)
	 err_mesg("FETCH failed on cursor BL_HDR_CUR",0,"");
       if (NOT_FOUND)
     err_mesg("No data found on cursor BL_HDR_CUR",0,"");

//disp_message(ERR_MESG,"end of fetch cur");

bl_h_doc_date.arr[bl_h_doc_date.len]                                     = '\0';
bl_h_bill_trx_type_code.arr[bl_h_bill_trx_type_code.len]                 = '\0';
bl_h_serv_locn_code.arr[bl_h_serv_locn_code.len]                         = '\0';
bl_h_bill_from_date.arr[bl_h_bill_from_date.len]                         = '\0';
bl_h_bill_to_date.arr[bl_h_bill_to_date.len]                             = '\0';
bl_h_gross_amt.arr[bl_h_gross_amt.len]                                   = '\0';
bl_h_serv_disc_amt.arr[bl_h_serv_disc_amt.len]                           = '\0';
bl_h_man_disc_amt.arr[bl_h_man_disc_amt.len]                             = '\0';
bl_h_overall_disc_perc.arr[bl_h_overall_disc_perc.len]                   = '\0';
bl_h_overall_disc_amt.arr[bl_h_overall_disc_amt.len]                     = '\0';
bl_h_ovr_disc_acc_int_code.arr[bl_h_ovr_disc_acc_int_code.len]           = '\0';
bl_h_prepay_adj_amt.arr[bl_h_prepay_adj_amt.len]                         = '\0';
bl_h_deposit_adj_amt.arr[bl_h_deposit_adj_amt.len]                       = '\0';
bl_h_bill_amt.arr[bl_h_bill_amt.len]                                     = '\0';
bl_h_bill_hosp_amt.arr[bl_h_bill_hosp_amt.len]                           = '\0';
bl_h_bill_drfee_amt.arr[bl_h_bill_drfee_amt.len]                         = '\0';
bl_h_bill_prv_doc_type_code.arr[bl_h_bill_prv_doc_type_code.len]         = '\0';
bl_h_bill_prv_doc_number.arr[bl_h_bill_prv_doc_number.len]               = '\0';
bl_h_bill_prv_doc_date.arr[bl_h_bill_prv_doc_date.len]                   = '\0';
bl_h_bill_prv_bill_amt.arr[bl_h_bill_prv_bill_amt.len]                   = '\0';
bl_h_bill_prv_bill_paid_amt.arr[bl_h_bill_prv_bill_paid_amt.len]         = '\0';
bl_h_bill_prv_outst_amt.arr[bl_h_bill_prv_outst_amt.len]                 = '\0';
bl_h_bill_hosp_prv_outst_amt.arr[bl_h_bill_hosp_prv_outst_amt.len]       = '\0';
bl_h_bill_df_prv_outst_amt.arr[bl_h_bill_df_prv_outst_amt.len]     = '\0';
bl_h_bill_tot_amt.arr[bl_h_bill_tot_amt.len]                             = '\0';
bl_h_bill_hosp_tot_amt.arr[bl_h_bill_hosp_tot_amt.len]                   = '\0';
bl_h_bill_drfee_tot_amt.arr[bl_h_bill_drfee_tot_amt.len]                 = '\0';
bl_h_bill_tot_outst_amt.arr[bl_h_bill_tot_outst_amt.len]                 = '\0';
bl_h_bill_hosp_tot_outst_amt.arr[bl_h_bill_hosp_tot_outst_amt.len]       = '\0';
bl_h_bill_df_tot_outst_amt.arr[bl_h_bill_df_tot_outst_amt.len]     = '\0';
bl_h_bill_paid_amt.arr[bl_h_bill_paid_amt.len]                           = '\0';
bl_h_episode_type.arr[bl_h_episode_type.len]                             = '\0';
bl_h_patient_id.arr[bl_h_patient_id.len]                                 = '\0';
bl_h_episode_id.arr[bl_h_episode_id.len]                                 = '\0';
bl_h_visit_id.arr[bl_h_visit_id.len]                                     = '\0';
bl_h_admission_date.arr[bl_h_admission_date.len]                         = '\0';
bl_h_ward_code.arr[bl_h_ward_code.len]                                   = '\0';
bl_h_bed_class_code.arr[bl_h_bed_class_code.len]                         = '\0';
bl_h_room_num.arr[bl_h_room_num.len]                                     = '\0';
bl_h_bed_num.arr[bl_h_bed_num.len]                                       = '\0';
bl_h_physician_id.arr[bl_h_physician_id.len]                             = '\0';
bl_h_clinic_code.arr[bl_h_clinic_code.len]                               = '\0';
bl_h_cust_code.arr[bl_h_cust_code.len]                                   = '\0';
bl_h_blng_grp_id.arr[bl_h_blng_grp_id.len]                               = '\0';
bl_h_bill_type_code.arr[bl_h_bill_type_code.len]                         = '\0';
bl_h_cons_invoice_ind.arr[bl_h_cons_invoice_ind.len]                     = '\0';
bl_h_bill_status.arr[bl_h_bill_status.len]                               = '\0';
bl_h_bill_print_flag.arr[bl_h_bill_print_flag.len]                       = '\0';
bl_h_drfee_bill_upd_flag.arr[bl_h_drfee_bill_upd_flag.len]               = '\0';
bl_h_drfee_rec_upd_flag.arr[bl_h_drfee_rec_upd_flag.len]                 = '\0';
bl_h_drfee_receipt_amt.arr[bl_h_drfee_receipt_amt.len]                   = '\0';
bl_h_ar_inv_doc_type_code.arr[bl_h_ar_inv_doc_type_code.len]             = '\0';
bl_h_ar_inv_doc_number.arr[bl_h_ar_inv_doc_number.len]                   = '\0';
bl_h_ar_inv_doc_date.arr[bl_h_ar_inv_doc_date.len]                       = '\0';
bl_h_last_rct_doc_type_code.arr[bl_h_last_rct_doc_type_code.len]     = '\0';
bl_h_last_recpt_doc_num.arr[bl_h_last_recpt_doc_num.len]                 = '\0';
bl_h_last_recpt_doc_date.arr[bl_h_last_recpt_doc_date.len]               = '\0';
bl_h_bill_nature_code.arr[bl_h_bill_nature_code.len]                     = '\0';
bl_h_tot_paid_amt.arr[bl_h_tot_paid_amt.len]                             = '\0';
bl_h_bill_posted_flag.arr[bl_h_bill_posted_flag.len]                     = '\0';
bl_h_added_by_id.arr[bl_h_added_by_id.len]                               = '\0';
bl_h_modified_by_id.arr[bl_h_modified_by_id.len]                         = '\0';
bl_h_added_date.arr[bl_h_added_date.len]                                 = '\0';
bl_h_modified_date.arr[bl_h_modified_date.len]                           = '\0';
bl_h_rowid.arr[bl_h_rowid.len]                                           = '\0';

   return(ROW_COUNT);
}

fetch_dtls()
{
      //disp_message(ERR_MESG,"in fetch dtls...");
     EXEC SQL OPEN BL_BILL_TYPE_CUR; 

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_BILL_TYPE_CUR",0,"");

    bl_recv_acc_int_code.arr[0]            = '\0';
    ar_recv_acc_int_code.arr[0]            = '\0';
    bl_bill_type_long_desc.arr[0]          = '\0';

    bl_recv_acc_int_code.len               = 0;
    ar_recv_acc_int_code.len               = 0;
    bl_bill_type_long_desc.len             = 0;

    //disp_message(ERR_MESG,bl_h_bill_type_code.arr);  //pradeep
	 EXEC SQL FETCH BL_BILL_TYPE_CUR
	       INTO :bl_recv_acc_int_code,
		    :ar_recv_acc_int_code, 
		    :bl_bill_type_long_desc;

//disp_message(ERR_MESG,"fetch_dtl 1");

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_BILL_TYPE_CUR",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in BL BILL TYPE",0,"");

     bl_recv_acc_int_code.arr[bl_recv_acc_int_code.len] = '\0';
     ar_recv_acc_int_code.arr[ar_recv_acc_int_code.len] = '\0';
     bl_bill_type_long_desc.arr[bl_bill_type_long_desc.len] = '\0';



     strcpy(recv_int_code.arr,bl_recv_acc_int_code.arr);
     recv_int_code.len = strlen(recv_int_code.arr);

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     bl_rec_main_acc1_code.arr[0]             = '\0';
     bl_rec_main_acc2_code.arr[0]             = '\0';
     bl_rec_dept_code.arr[0]                  = '\0';
     bl_rec_subledger_group_code.arr[0]       = '\0';
     bl_rec_subledger_line_code.arr[0]        = '\0';
     bl_rec_product_group_code.arr[0]         = '\0';
     bl_rec_product_line_code.arr[0]          = '\0';

     bl_rec_main_acc1_code.len                = 0;
     bl_rec_main_acc2_code.len                = 0;
     bl_rec_dept_code.len                     = 0;
     bl_rec_subledger_group_code.len          = 0;
     bl_rec_subledger_line_code.len           = 0;
     bl_rec_product_group_code.len            = 0;
     bl_rec_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :bl_rec_main_acc1_code,
		    :bl_rec_main_acc2_code,
		    :bl_rec_dept_code,
		    :bl_rec_subledger_group_code,
		    :bl_rec_subledger_line_code,
		    :bl_rec_product_group_code,
		    :bl_rec_product_line_code;

	
     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in BL GL ACCOUNT",0,"");
 
     bl_rec_main_acc1_code.arr[bl_rec_main_acc1_code.len]              = '\0';
     bl_rec_main_acc2_code.arr[bl_rec_main_acc2_code.len]              = '\0';
     bl_rec_dept_code.arr[bl_rec_dept_code.len]                        = '\0';
     bl_rec_subledger_group_code.arr[bl_rec_subledger_group_code.len]  = '\0';
     bl_rec_subledger_line_code.arr[bl_rec_subledger_line_code.len]    = '\0';
     bl_rec_product_group_code.arr[bl_rec_product_group_code.len]      = '\0';
     bl_rec_product_line_code.arr[bl_rec_product_line_code.len]        = '\0';

     strcpy(recv_int_code.arr,ar_recv_acc_int_code.arr);
     recv_int_code.len = strlen(recv_int_code.arr);

     EXEC SQL OPEN BL_GL_ACCOUNT_CUR;

     if (OERROR)
	 err_mesg("OPEN failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");

     ar_rec_main_acc1_code.arr[0]             = '\0';
     ar_rec_main_acc2_code.arr[0]             = '\0';
     ar_rec_dept_code.arr[0]                  = '\0';
     ar_rec_subledger_group_code.arr[0]       = '\0';
     ar_rec_subledger_line_code.arr[0]        = '\0';
     ar_rec_product_group_code.arr[0]         = '\0';
     ar_rec_product_line_code.arr[0]          = '\0';

     ar_rec_main_acc1_code.len                = 0;
     ar_rec_main_acc2_code.len                = 0;
     ar_rec_dept_code.len                     = 0;
     ar_rec_subledger_group_code.len          = 0;
     ar_rec_subledger_line_code.len           = 0;
     ar_rec_product_group_code.len            = 0;
     ar_rec_product_line_code.len             = 0;

     EXEC SQL FETCH BL_GL_ACCOUNT_CUR
	       INTO :ar_rec_main_acc1_code,
		    :ar_rec_main_acc2_code,
		    :ar_rec_dept_code,
		    :ar_rec_subledger_group_code,
		    :ar_rec_subledger_line_code,
		    :ar_rec_product_group_code,
		    :ar_rec_product_line_code;

     if (OERROR)
	 err_mesg("FETCH failed on cursor BL_GL_ACCOUNT_CUR - 2",0,"");

     if (NOT_FOUND)
	 err_mesg("Record not found in BL GL ACCOUNT - 2",0,"");
 
     ar_rec_main_acc1_code.arr[ar_rec_main_acc1_code.len]             = '\0';
     ar_rec_main_acc2_code.arr[ar_rec_main_acc2_code.len]             = '\0';
     ar_rec_dept_code.arr[ar_rec_dept_code.len]                       = '\0';
     ar_rec_subledger_group_code.arr[ar_rec_subledger_group_code.len] = '\0';
     ar_rec_subledger_line_code.arr[ar_rec_subledger_line_code.len]   = '\0';
     ar_rec_product_group_code.arr[ar_rec_product_group_code.len]     = '\0';
     ar_rec_product_line_code.arr[ar_rec_product_line_code.len]       = '\0';

}

insert_rec()
{

   // disp_message(ERR_MESG,bl_h_doc_type_code.arr);
//	 disp_message(ERR_MESG,bl_h_doc_num.arr);
	 EXEC SQL INSERT INTO BL_DCP_ORG_TRN_HDR
	     (operating_facility_id,
		 DOC_TYPE_CODE,
		 DOC_NUMBER,
		 PATIENT_ID,
		 DOC_DATE,
		 DUE_DATE,
		 TRX_TYPE_CODE,
		 EPISODE_TYPE,
		 EPISODE_ID,
		 VISIT_ID,
		 
		 PAT_DOC_REFERENCE,
		 BILL_TYPE_CODE,
		 DOC_NATURE_CODE,
		 DOC_AMT,
		 HOSP_CHG_AMT,
		 DRFEE_CHG_AMT,
		 MAIN_ACC1_CODE,
		 MAIN_ACC2_CODE,
		 SUBLEDGER_GROUP_CODE,
		 SUBLEDGER_LINE_CODE,
		 DEPT_CODE,
		 PRODUCT_GROUP_CODE,
		 PRODUCT_LINE_CODE,
		 NARRATION,
		 POST_MONTH,
		 POST_YEAR,
		 MAX_LINE_NUM,
		 POSTED_FLAG,
		 POSTED_DATE_TIME,
		 POSTED_BY_ID,
		 ADDED_BY_ID,
		 MODIFIED_BY_ID,
		 ADDED_DATE,
		 MODIFIED_DATE,
		 ADDED_AT_WS_NO,         
		 ADDED_FACILITY_ID,      
		 MODIFIED_AT_WS_NO,      
		 MODIFIED_FACILITY_ID   

	       )
	      VALUES
	       (:nd_facility_id,
		 :bl_h_doc_type_code,             /* DOC_TYPE_CODE */
		 :bl_h_doc_num,                     /* DOC_NUM       */
		 :bl_h_patient_id,                  /* PATIENT ID    */
 		 TO_DATE(:bl_h_doc_date,'DD/MM/YYYY'), /* DOC DATE      */
		 TO_DATE(:bl_h_doc_date,'DD/MM/YYYY') + :bl_par_def_pat_crdt_days, /* DUE DATE */
		 '1',                               /* TRX TYPE CODE */
		 :bl_h_episode_type,                /* EPISODE TYPE  */
		 :bl_h_episode_id,                  /* EPISODE ID    */
		 :bl_h_visit_id,                    /* VISIT ID      */
		 
		 NULL,                              /* PAT_DOC_REFERENCE */
		 :bl_h_bill_type_code,              /* BILL TYPE CODE */
		 NULL,                              /* DOC NATURE CODE */
		 :bill_tot_outst_amt,               /* DOC AMT       */
		 :bill_hosp_tot_outst_amt,          /* HOSP CHG AMT  */
		 :bill_drfee_tot_outst_amt,         /* DRFEE CHG AMT */
		 :ar_rec_main_acc1_code,           /* -------------- */
		 :ar_rec_main_acc2_code,           /*                */
		 :ar_rec_subledger_group_code,     /*    POSTING     */
		 :ar_rec_subledger_line_code,      /*                */
		 :ar_rec_dept_code,                /*      A/C       */
		 :ar_rec_product_group_code,       /*                */
		 :ar_rec_product_line_code,        /* -------------- */
		 NULL,                             /* NARRATION      */
         to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'MM'), /* POST MONTH     */
         to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'YYYY'), /* POST YEAR      */
		 1,                                /* MAX LINE NUM   */
		 'Y',                              /* POSTED FLAG    */
         SYSDATE,                             /* POSTED DATE TIME */
		 USER,                             /* POSTED BY ID   */
		 USER,                             /* ADDED BY ID    */
		 USER,                             /* MODIFIED BY ID */
		 SYSDATE,					       /* ADDED DATE     */
		 sysdate ,                             /* MODIFIED DATE  */
         :d_ws_no,
		 :nd_facility_id,
		 :d_ws_no,
		 :nd_facility_id
	       );

     if (OERROR)
	 err_mesg("INSERT failed on table BL_DCP_ORG_TRN_HDR",0,"");

    /**** Added NK 23/03/94 to post immediately ****/

	

    process_hdr();

	


    /***********************************************/


     EXEC SQL INSERT INTO BL_DCP_ORG_TRN_DTL
	       (OPERATING_FACILITY_ID,
		 DOC_TYPE_CODE,
		 DOC_NUMBER,
		 LINE_NUM,
		 MAIN_ACC1_CODE,
		 MAIN_ACC2_CODE,
		 SUBLEDGER_GROUP_CODE,
		 SUBLEDGER_LINE_CODE,
		 DEPT_CODE,
		 PRODUCT_GROUP_CODE,
		 PRODUCT_LINE_CODE,
		 DOC_AMT,
		 NARRATION,
		 ADDED_BY_ID,
		 MODIFIED_BY_ID,
		 ADDED_DATE,
		 MODIFIED_DATE,
		 ADDED_AT_WS_NO,         
		 ADDED_FACILITY_ID,      
		 MODIFIED_AT_WS_NO,      
		 MODIFIED_FACILITY_ID   
	       )
	     VALUES
	       (:nd_facility_id,
		 :bl_h_doc_type_code,               /* DOC_TYPE_CODE  */
		 :bl_h_doc_num,                     /* DOC_NUM        */
		 1,                                 /* LINE NUM       */
		 :bl_rec_main_acc1_code,            /* -------------- */
		 :bl_rec_main_acc2_code,            /*                */
		 :bl_rec_subledger_group_code,      /*    POSTING     */
		 :bl_rec_subledger_line_code,       /*                */
		 :bl_rec_dept_code,                 /*      A/C       */
		 :bl_rec_product_group_code,        /*                */
		 :bl_rec_product_line_code,         /* -------------- */
		 :bill_tot_outst_amt,               /* DOC AMT        */
		 NULL,                              /* NARRATION      */
		 USER,                             /* ADDED BY ID    */
		 USER,                             /* MODIFIED BY ID */
		 SYSDATE,					       /* ADDED DATE     */
		 sysdate ,                             /* MODIFIED DATE  */
         :d_ws_no,
		 :nd_facility_id,
		 :d_ws_no,
		 :nd_facility_id
	       );

     if (OERROR)
	 err_mesg("INSERT failed on table BL_DCP_ORG_TRN_DTL",0,"");

    /**** Added NK 23/03/94 to post immediately ****/


    process_dtl();

 

    updt_patient_fin_dtls();


    /***********************************************/
}

/**************** ADDED NK 23/03/94 ****************************************/
process_hdr()
{
   char aMesg[80];
         
	 
		if(validate_posting_acct( ar_rec_main_acc1_code.arr,
				  ar_rec_main_acc2_code.arr,
				  ar_rec_dept_code.arr,
				  ar_rec_product_group_code.arr,
				  ar_rec_product_line_code.arr,
				  ar_rec_subledger_group_code.arr,
				  ar_rec_subledger_line_code.arr,
				  'Y',
				  "BL",
				  &g_err_typ,
				  g_err_id,
				  g_err_msg
				  ) ==  -1) {

				  

	    if (g_err_typ) {  /* application error */
		sprintf(aMesg,"Posting A/C (HDR) : %s-%s %s %s-%s %s-%s\n",
			ar_rec_main_acc1_code.arr,
			ar_rec_main_acc2_code.arr,
			ar_rec_dept_code.arr,
			ar_rec_product_group_code.arr,
			ar_rec_product_line_code.arr,
			ar_rec_subledger_group_code.arr,
			ar_rec_subledger_line_code.arr);

		disp_message(ERR_MESG,aMesg);
        disp_message(ERR_MESG,g_err_id);
//if strcmp(t_bill_print_flag.arr ,"N") == 0 )

		if(!strcmp(g_err_id,"GL1430"))
		  err_mesg("Invalid Posting Account",0,"");
		else if(!strcmp(g_err_id,"GL1540"))
		  err_mesg("Posting A/C should be detail account",0,"");
		else if(!strcmp(g_err_id,"GL2530"))
		  err_mesg("Monthly Balance not Available for this Posting A/c, Cannot Process",0,"");
		else
		  err_mesg("Posting A/C has been suspended",0,"");
	    }

	    else   /* oracle error */

		err_mesg(g_err_msg,0,"");

	} /* end of if validate_posting_acct */ 


//disp_message(ERR_MESG,"Before pending doc...");
	insrt_pending_doc();
//disp_message(ERR_MESG,"Before dcp trn....");
	
	insrt_bl_dcp_trn();
//disp_message(ERR_MESG,"Before gl list");
	
	insrt_bl_gl_dist(1);

	

}

insrt_pending_doc()
{

    EXEC SQL INSERT INTO BL_DCP_PENDING_DOC 
		    ( operating_facility_id,
			 PATIENT_ID,
			 ORG_DOC_TYPE_CODE,
			 ORG_DOC_NUMBER,
			 ORG_DOC_DATE,
			 DUE_DATE,
			 TRX_TYPE_CODE,
			 EPISODE_TYPE,
			 EPISODE_ID,
			 VISIT_ID,
			 PAT_DOC_REFERENCE,
			 BILL_TYPE_CODE,
			 DOC_NATURE_CODE,
			 DOC_AMT,
			 HOSP_CHG_AMT,
			 DRFEE_CHG_AMT,
			 DOC_OUTST_AMT,
			 HOSP_CHG_OUTST_AMT,
			 DRFEE_CHG_OUTST_AMT,
			 MAIN_ACC1_CODE,
			 MAIN_ACC2_CODE,
			 DEPT_CODE,
			 PRODUCT_GROUP_CODE,
			 PRODUCT_LINE_CODE,
			 SUBLEDGER_GROUP_CODE,
			 SUBLEDGER_LINE_CODE,
			 NARRATION,
			 POST_MONTH,
			 POST_YEAR,
			 TRX_PROCESSED_IND,
			 MAX_LINE_NUM,
			 POSTED_DATE,
			 POSTED_BY_ID,
			 ADDED_BY_ID,            
			 MODIFIED_BY_ID,         
			 ADDED_DATE     ,        
			 MODIFIED_DATE   ,       
			 ADDED_AT_WS_NO   ,      
			 ADDED_FACILITY_ID ,     
			 MODIFIED_AT_WS_NO  ,    
			 MODIFIED_FACILITY_ID   
		    )
	     VALUES (:nd_facility_id,
		 :bl_h_patient_id,
		 :bl_h_doc_type_code,
		 :bl_h_doc_num,
		 TO_DATE(:bl_h_doc_date,'DD/MM/YYYY'),
		 TO_DATE(:bl_h_doc_date,'DD/MM/YYYY') + :bl_par_def_pat_crdt_days,
		 '1',
		 :bl_h_episode_type,
		 :bl_h_episode_id,
		 :bl_h_visit_id,
		 NULL,
		 :bl_h_bill_type_code,
		 NULL,
		 :bill_tot_outst_amt,
		 :bill_hosp_tot_outst_amt,
		 :bill_drfee_tot_outst_amt,
		 :bill_tot_outst_amt,
		 :bill_hosp_tot_outst_amt,
		 :bill_drfee_tot_outst_amt,
		 :ar_rec_main_acc1_code,
		 :ar_rec_main_acc2_code,
		 :ar_rec_dept_code,
		 :ar_rec_product_group_code,
		 :ar_rec_product_line_code,
		 :ar_rec_subledger_group_code,
		 :ar_rec_subledger_line_code,
		 NULL,
         to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'MM'),
         to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'YYYY'),
		 'Y',
		 1,
		 SYSDATE,
		 USER,
		 USER,                             /* ADDED BY ID    */
		 USER,                             /* MODIFIED BY ID */
		 SYSDATE,					       /* ADDED DATE     */
		 sysdate ,                             /* MODIFIED DATE  */
         :d_ws_no,
		 :nd_facility_id,
		 :d_ws_no,
		 :nd_facility_id
	       );
	     
    if(OERROR)
	err_mesg("INSERT failed on table BL_DCP_PENDING_DOC",0,"");

}

insrt_bl_dcp_trn()
{
    EXEC SQL INSERT INTO BL_DCP_TRN
		    (operating_facility_id,
			 PATIENT_ID,
			 ORG_DOC_TYPE_CODE,
			 ORG_DOC_NUMBER,
			 LINE_NUM,
			 DOC_TYPE_CODE,
			 DOC_NUMBER,
			 DOC_DATE,
			 PAT_DOC_REFERENCE,
			 DOC_NATURE_CODE,
			 DOC_AMT,
			 TRX_TYPE_CODE,
			 NARRATION,
			 POST_MONTH,
			 POST_YEAR,
			 POSTED_DATE,
			 POSTED_BY_ID,
 			 ADDED_BY_ID,            
			 MODIFIED_BY_ID,         
			 ADDED_DATE     ,        
			 MODIFIED_DATE   ,       
			 ADDED_AT_WS_NO   ,      
			 ADDED_FACILITY_ID ,     
			 MODIFIED_AT_WS_NO  ,    
			 MODIFIED_FACILITY_ID   
		    )    
	    VALUES  ( :nd_facility_id,
		      :bl_h_patient_id,
			 :bl_h_doc_type_code,
			 :bl_h_doc_num,
			 0,
			 :bl_h_doc_type_code,
			 :bl_h_doc_num,
			 TO_DATE(:bl_h_doc_date,'DD/MM/YYYY'),
			 NULL,
			 NULL,
			 :bill_tot_outst_amt,
			 '1',
			 NULL,
             to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'MM'),
             to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'YYYY'),
			 SYSDATE,
			 USER,
	 		 USER,                             /* ADDED BY ID    */
			 USER,                             /* MODIFIED BY ID */
			 SYSDATE,					       /* ADDED DATE     */
			 sysdate ,                             /* MODIFIED DATE  */
			:d_ws_no,
			:nd_facility_id,
			:d_ws_no,
			:nd_facility_id
			 );
	    
    if(OERROR)
	err_mesg("INSERT failed on table BL_DCP_TRN",0,"");

}

process_dtl()
{


    char aMesg[80];
	if(validate_posting_acct( bl_rec_main_acc1_code.arr,

				  bl_rec_main_acc2_code.arr,
				  bl_rec_dept_code.arr,
				  bl_rec_product_group_code.arr,
				  bl_rec_product_line_code.arr,
				  bl_rec_subledger_group_code.arr,
				  bl_rec_subledger_line_code.arr,
				  'N',
				  "BL",
				  &g_err_typ,
				  g_err_id,
				  g_err_msg
				  ) ==  -1) {

	    if (g_err_typ) {  /* application error */
		sprintf(aMesg,"Posting A/C (LINE) : %s-%s %s %s-%s %s-%s\n",
			bl_rec_main_acc1_code.arr,
			bl_rec_main_acc2_code.arr,
			bl_rec_dept_code.arr,
			bl_rec_product_group_code.arr,
			bl_rec_product_line_code.arr,
			bl_rec_subledger_group_code.arr,
			bl_rec_subledger_line_code.arr);
	
		disp_message(INFO_MESG,aMesg);
		
		if(!strcmp(g_err_id,"GL1430"))		  
		  err_mesg("Invalid Posting Account",0,"");
		  
		else if(!strcmp(g_err_id,"GL1540"))
		  err_mesg("Posting A/C should be detail account",0,"");

		else if(!strcmp(g_err_id,"GL2530"))
		  err_mesg("Monthly Balance not Available for this Posting A/c, Cannot Process",0,"");

		else
		  err_mesg("Posting A/C has been suspended",0,"");
	    }

	    else   /* oracle error */

		err_mesg(g_err_msg,0,"");

	} /* end of if validate_posting_acct */ 

	insrt_bl_gl_dist(2);

}

insrt_bl_gl_dist(flg)
int flg;
{

    if( (bl_h_episode_type.arr[0] == 'I' && d_ip_gl_yn == 'N') ||
        (bl_h_episode_type.arr[0] == 'D' && d_ip_gl_yn == 'N') || 
	(bl_h_episode_type.arr[0] == 'O' && d_op_gl_yn == 'N') ||
        (bl_h_episode_type.arr[0] == 'E' && d_op_gl_yn == 'N') ||
	(bl_h_episode_type.arr[0] == 'R' && d_rf_gl_yn == 'N') )
	return;

    if(flg EQ 1) {

	EXEC SQL INSERT INTO BL_GL_DISTRIBUTION
			(    operating_facility_id,
			     MAIN_ACC1_CODE,
			     MAIN_ACC2_CODE,
			     DEPT_CODE,
			     PRODUCT_GROUP_CODE,
			     PRODUCT_LINE_CODE,
			     SUBLEDGER_GROUP_CODE,
			     SUBLEDGER_LINE_CODE,
			     POST_YEAR,
			     POST_MONTH,
			     TRX_DATE,
			     TRX_DOC_REF,
			     TRX_DOC_REF_LINE_NUM,
			     TRX_DOC_REF_SEQ_NUM,
			     EPISODE_TYPE,
			     PATIENT_ID,
			     EPISODE_ID,
			     VISIT_ID,
			     NARRATION,
			     TRX_TYPE_CODE,
			     DISTRIBUTION_AMT,
			     GL_INTERFACE_FLAG,
	  			 ADDED_BY_ID,            
				 MODIFIED_BY_ID,         
				 ADDED_DATE     ,        
				 MODIFIED_DATE   ,       
				ADDED_AT_WS_NO   ,      
				ADDED_FACILITY_ID ,     
				MODIFIED_AT_WS_NO  ,    
				MODIFIED_FACILITY_ID   
			)
		VALUES  (:nd_facility_id,
		         :ar_rec_main_acc1_code,
			     :ar_rec_main_acc2_code,
			     :ar_rec_dept_code,
			     :ar_rec_product_group_code,
			     :ar_rec_product_line_code,
			     :ar_rec_subledger_group_code,
			     :ar_rec_subledger_line_code,
                 to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'YYYY'),
                 to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'MM'),
                             to_date(:bl_h_doc_date,'DD/MM/YYYY'),
			     RPAD(:bl_h_doc_type_code,6,' ')||'-'||
					LPAD(:bl_h_doc_num,8,'0'),
			     0,
			     0,
			     :bl_h_episode_type,
			     :bl_h_patient_id,
			     :bl_h_episode_id,
			     :bl_h_visit_id,
			     NULL,
			     '1',
			     :bill_tot_outst_amt,
			     'N',
				 	 		 USER,                             /* ADDED BY ID    */
			 USER,                             /* MODIFIED BY ID */
			 SYSDATE,					       /* ADDED DATE     */
			 sysdate ,                             /* MODIFIED DATE  */
			:d_ws_no,
			:nd_facility_id,
			:d_ws_no,
			:nd_facility_id);

    }
    else {

	EXEC SQL INSERT INTO BL_GL_DISTRIBUTION
			(    operating_facility_id,
				 MAIN_ACC1_CODE,
			     MAIN_ACC2_CODE,
			     DEPT_CODE,
			     PRODUCT_GROUP_CODE,
			     PRODUCT_LINE_CODE,
			     SUBLEDGER_GROUP_CODE,
			     SUBLEDGER_LINE_CODE,
			     POST_YEAR,
			     POST_MONTH,
			     TRX_DATE,
			     TRX_DOC_REF,
			     TRX_DOC_REF_LINE_NUM,
			     TRX_DOC_REF_SEQ_NUM,
			     EPISODE_TYPE,
			     PATIENT_ID,
			     EPISODE_ID,
			     VISIT_ID,
			     NARRATION,
			     TRX_TYPE_CODE,
			     DISTRIBUTION_AMT,
			     GL_INTERFACE_FLAG,
 	  			 ADDED_BY_ID,            
				 MODIFIED_BY_ID,         
				 ADDED_DATE     ,        
				 MODIFIED_DATE   ,       
				ADDED_AT_WS_NO   ,      
				ADDED_FACILITY_ID ,     
				MODIFIED_AT_WS_NO  ,    
				MODIFIED_FACILITY_ID   
			)
		VALUES  ( :nd_facility_id,
				  :bl_rec_main_acc1_code,
			     :bl_rec_main_acc2_code,
			     :bl_rec_dept_code,
			     :bl_rec_product_group_code,
			     :bl_rec_product_line_code,
			     :bl_rec_subledger_group_code,
			     :bl_rec_subledger_line_code,
                 to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'YYYY'),
                 to_char(to_date(:bl_h_doc_date,'DD/MM/YYYY'),'MM'),
   			     TO_DATE(:bl_h_doc_date,'DD/MM/YYYY'),
			     RPAD(:bl_h_doc_type_code,6,' ')||'-'||
					LPAD(:bl_h_doc_num,8,'0'),
			     0,
			     0,
			     :bl_h_episode_type,
			     :bl_h_patient_id,
			     :bl_h_episode_id,
			     :bl_h_visit_id,
			     NULL,
			     '1',
			     :bill_tot_outst_amt * -1,
			     'N',
	 	 		 USER,                             /* ADDED BY ID    */
				 USER,                             /* MODIFIED BY ID */
				 SYSDATE,					       /* ADDED DATE     */
				sysdate ,                             /* MODIFIED DATE  */
				:d_ws_no,
				:nd_facility_id,
				:d_ws_no,
				:nd_facility_id);
    }

    if(OERROR)
	err_mesg("INSERT failed on table BL_GL_DISTRIBUTION",0,"");

}

updt_patient_fin_dtls()
{

    EXEC SQL UPDATE BL_PATIENT_FIN_DTLS
	  SET    TOT_DEF_PAT_OUTST_AMT = NVL(TOT_DEF_PAT_OUTST_AMT,0) +
					    :bill_tot_outst_amt,
		    TRX_PROCESSED_IND     = 'Y',
      TOT_OUTST_IP_AMT      =  NVL(TOT_OUTST_IP_AMT,0) -
			       DECODE(:bl_h_episode_type,'I',
				      :bill_tot_outst_amt,'D',:bill_tot_outst_amt,0),
      TOT_OUTST_OP_AMT      =  NVL(TOT_OUTST_OP_AMT,0) -
			       DECODE(:bl_h_episode_type,'O',
				      :bill_tot_outst_amt,'E',:bill_tot_outst_amt,0),
      TOT_OUTST_REF_AMT     =  NVL(TOT_OUTST_REF_AMT,0) -
			       DECODE(:bl_h_episode_type,'R',
				      :bill_tot_outst_amt,0)
	     WHERE  PATIENT_ID            = :bl_h_patient_id;

    if(OERROR || NO_DATA_FOUND)
	err_mesg("UPDATE failed on table BL_PATIENT_FIN_DTLS",0,"");

    if(bl_h_episode_type.arr[0] != 'R') {

      if (bl_h_episode_id.arr[0] != '\0')
	      { if (bl_h_episode_id.arr[0] != '\0')
            {
	EXEC SQL UPDATE BL_EPISODE_FIN_DTLS
		 SET    TOT_OUTST_AMT = NVL(TOT_OUTST_AMT,0) - 
					:bill_tot_outst_amt
		 WHERE  operating_facility_id = :nd_facility_id AND
		 EPISODE_TYPE  = :bl_h_episode_type
		 AND    EPISODE_ID    = :bl_h_episode_id;
    
	 if(OERROR || NO_DATA_FOUND)
	     err_mesg("UPDATE failed on table BL_EPISODE_FIN_DTLS",0,"");
         }


		}
    }

    if(bl_h_episode_type.arr[0] == 'O' || bl_h_episode_type.arr[0] == 'E'  ) {

		if (bl_h_episode_id.arr[0] != '\0')
		   {

	EXEC SQL UPDATE BL_VISIT_FIN_DTLS
		 SET    TOT_OUTST_AMT = NVL(TOT_OUTST_AMT,0) - 
					:bill_tot_outst_amt
		 WHERE  operating_facility_id = :nd_facility_id AND
		 EPISODE_TYPE  = :bl_h_episode_type
		 AND    EPISODE_ID    = :bl_h_episode_id
		 AND    VISIT_ID      = :bl_h_visit_id;

	 if(OERROR || NO_DATA_FOUND)
	     err_mesg("UPDATE failed on table BL_VISIT_FIN_DTLS",0,"");

		 }
    }

   //09/11/2002 As part of system controls and checks amt_transferred 
   //column is introduced
    EXEC SQL UPDATE BL_BILL_HDR
	     SET    BILL_TOT_OUTST_AMT       = 0,
		    BILL_HOSP_TOT_OUTST_AMT  = 0,
                    BILL_DRFEE_TOT_OUTST_AMT = 0,
                    BILL_STATUS              = 'D',
                    AR_INV_DOC_TYPE_CODE     = :bl_h_doc_type_code,
                    AR_INV_DOC_NUMBER        = :bl_h_doc_num,
                    AR_INV_DOC_DATE          = TO_DATE(:bl_h_doc_date,'DD/MM/YYYY'),
					AMT_TRANSFERRED			 = :bill_tot_outst_amt
	     WHERE  operating_facility_id = :nd_facility_id AND
		 DOC_TYPE_CODE = :bl_h_doc_type_code
	     AND    DOC_NUM       = :bl_h_doc_num;

    if(OERROR)
	err_mesg("UPDATE failed on table BL_BILL_HDR",0,"");
}

check_boun_exists()
{   

    boun_exists = 0;

    EXEC SQL SELECT COUNT(*)
	     INTO   :boun_exists
	     FROM   BL_RECEIPT_REFUND_HDRDTL_VW
	     WHERE  operating_facility_id = :nd_facility_id 
	     AND EPISODE_TYPE = :bl_h_episode_type
	     AND EPISODE_ID   = :bl_h_episode_id
	     AND VISIT_ID     = DECODE(:bl_h_episode_type,'I',VISIT_ID,
	                                 'D',VISIT_ID,
					  :bl_h_visit_id)
	     AND    PATIENT_ID   = :bl_h_patient_id
	     AND    BOUNCED_YN   = 'Y' 
	     AND REPL_CHQ_DOC_TYPE_CODE is null;

    if(OERROR)
	err_mesg("SELECT failed on table BL_RECEIPT_REFUND_DTL",0,"");

    return boun_exists;

}

get_boun_clr_amt()
{

    d_tot_boun_clr_amt      = 0;
    d_bounced_hosp_charges  = 0;
    d_bounced_drfee_charges = 0;

    EXEC SQL SELECT NVL(AFT_DISCH_PREPAY_BOUN_CLR,0) +
		    NVL(AFT_DISCH_DEP_BOUN_CLR,0)    +
		    NVL(AFT_DISCH_PMNT_BOUN_CLR,0),
		    NVL(BOUNCED_HOSP_CHARGES,0),
		    NVL(BOUNCED_DRFEE_CHARGES,0)
	     INTO   :d_tot_boun_clr_amt,
		    :d_bounced_hosp_charges,
		    :d_bounced_drfee_charges
	     FROM   BL_EPISODE_FIN_DTLS
	     WHERE  operating_facility_id = :nd_facility_id 
	     AND EPISODE_TYPE = :bl_h_episode_type
	     AND EPISODE_ID   = :bl_h_episode_id;

    if(OERROR)
	err_mesg("SELECT failed on table BL_EPISODE_FIN_DTLS",0,"");

}


/*
check_for_bill_printed()
{

    d_tot_boun_clr_amt      = 0;
    d_bounced_hosp_charges  = 0;
    d_bounced_drfee_charges = 0;

    EXEC SQL SELECT bill_print_flag
	     INTO  :nd_bill_print_flag
	     FROM   bl_bill_hdr
	     WHERE  operating_facility_id = :nd_facility_id 
	     AND EPISODE_TYPE = :bl_h_episode_type
	     AND EPISODE_ID   = :bl_h_episode_id;

    if(OERROR)
	err_mesg("SELECT failed on table BL_EPISODE_FIN_DTLS",0,"");

}
*/

/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRBDINM.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* Converted To Windows  : Prasad B G S          4/7/96                 */
/* DATE WRITTEN          : 25-AUG-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include <bl.h>

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;

    VARCHAR hosp_name                                  [120],
            date_time                                  [20],
            user_id                                    [91],
			nd_pwd									   [91],
            nd_session_id                              [16],
            nd_pgm_date                                [25],
            d_curr_pgm_name                            [15],
            nd_pkg_serv_flag                           [2],
            nd_rep_flag                                [2],
            nd_fm_bed_class                            [3],
            nd_to_bed_class                            [3],
            nd_fm_blng_serv                            [11],
            nd_to_blng_serv                            [11],
            nd_fm_date                                 [12],
            nd_to_date                                 [12],
            nd_fm_month                                [3],
            nd_to_month                                [3],
            nd_fm_year                                 [5],
            nd_to_year                                 [5],
            nd_fm_date_prn                             [12],
            nd_to_date_prn                             [12],
			nd_operating_facility_id				   [3],

            bl_blng_long_desc                          [41],
            bl_bed_long_desc                           [31];

   VARCHAR bl_bed_class_code                           [3],
           bl_blng_serv_code                           [11],
           bl_concat_month_yr                          [7],
           bl_base_charge                              [23],
           bl_gross_charge                             [23],
           bl_disc_amt                                 [23],
           bl_net_amt                                  [23];

  double   bl_base_charge_db,
           bl_gross_charge_db,
           bl_disc_amt_db,
           bl_net_amt_db,

           mnth_tot_base_charge,
           mnth_tot_gross_charge,
           mnth_tot_disc_amt,
           mnth_tot_net_amt,

           bed_tot_base_charge,
           bed_tot_gross_charge,
           bed_tot_disc_amt,
           bed_tot_net_amt,

           grn_tot_base_charge,
           grn_tot_gross_charge,
           grn_tot_disc_amt,
           grn_tot_net_amt;

char  filename[150];
char  l_mesg[200];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char       store_bed_class_code                           [3],
           store_concat_mnth_yr                           [7];

int    lctr = 0,pctr = 0;

FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    int rec_ctr = 0;

    if (argc < 4)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }
 
    strcpy(g_pgm_id,"BLRBDINM");

/*    if (sql_connect(argv[1]) == -1)
    {
        disp_message(ERR_MESG,"Error in connecting to Oracle");
        proc_exit();
    }
*/

   strcpy(nd_pwd.arr,argv[1]);
	 nd_pwd.len = strlen(nd_pwd.arr);

	 EXEC sql connect :nd_pwd;
	  
	  if (sqlca.sqlcode < 0 )
	   {
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
        }
	set_meduser_role(); 

    strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,nd_session_id.arr);

    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);
    strcpy(g_pgm_date,nd_pgm_date.arr);

    start_prog_msg();

    fetch_prog_param();
    declare_cur();
    fetch_hosp_name();
    open_file();
     
    open_cur();

    while(fetch_cur())
    {
       if (rec_ctr == 0)
       {
          strcpy(store_concat_mnth_yr,bl_concat_month_yr.arr);
          strcpy(store_bed_class_code,bl_bed_class_code.arr);
          fetch_bed_cls_desc();
          print_rec(0);
          print_rec(1);
       }
       else if (strcmp(store_concat_mnth_yr,bl_concat_month_yr.arr))
       {
            print_month_yr_tot(1);
            strcpy(store_concat_mnth_yr,bl_concat_month_yr.arr);
            strcpy(store_bed_class_code,bl_bed_class_code.arr);
       }
       else if (strcmp(store_bed_class_code,bl_bed_class_code.arr))
       {
            fetch_bed_cls_desc();
            print_bed_class_tot(1);
            strcpy(store_bed_class_code,bl_bed_class_code.arr);
       }

       rec_ctr++;
       print_rec(2);
     }

     if (rec_ctr)
         print_grand_tot();
     
    end_of_rep();
    end_prog_msg();

    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
         err_mesg("COMMIT WORK RELEASE failed",0,"");
    return;
}

fetch_prog_param()
{
    nd_pkg_serv_flag.arr[0]         = '\0';
    nd_rep_flag.arr[0]              = '\0';
    nd_fm_bed_class.arr[0]          = '\0';
    nd_to_bed_class.arr[0]          = '\0';
    nd_fm_blng_serv.arr[0]          = '\0';
    nd_to_blng_serv.arr[0]          = '\0';
    nd_fm_date.arr[0]               = '\0';
    nd_to_date.arr[0]               = '\0';
    nd_fm_month.arr[0]              = '\0';
    nd_to_month.arr[0]              = '\0';
    nd_fm_year.arr[0]               = '\0';
    nd_to_year.arr[0]               = '\0';
    nd_fm_date_prn.arr[0]           = '\0';
    nd_to_date_prn.arr[0]           = '\0';

    nd_pkg_serv_flag.len            = 0;
    nd_rep_flag.len                 = 0;
    nd_fm_bed_class.len             = 0;
    nd_to_bed_class.len             = 0;
    nd_fm_blng_serv.len             = 0;
    nd_to_blng_serv.len             = 0;
    nd_fm_date.len                  = 0;
    nd_to_date.len                  = 0;
    nd_fm_month.len                 = 0;
    nd_to_month.len                 = 0;
    nd_fm_year.len                  = 0;
    nd_to_year.len                  = 0;
    nd_fm_date_prn.len              = 0;
    nd_to_date_prn.len              = 0;

/*-- Y2K correction. The 'from and to' date prn variable will receive now
     the formatted values as DD/MM/YYYY.  So below format has been
	 commented VSK 14/11/1999. */

   EXEC SQL SELECT OPERATING_FACILITY_ID,
				   PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,
                   PARAM6,PARAM7,PARAM8,PARAM9,PARAM10,
                   PARAM11,PARAM12,PARAM7,PARAM8
//                 TO_CHAR(TO_DATE(PARAM7,'DD-MON-YY'),'DD/MM/YYYY'),
//                 TO_CHAR(TO_DATE(PARAM8,'DD-MON-YY'),'DD/MM/YYYY')
              INTO :nd_operating_facility_id,
				   :nd_pkg_serv_flag,
                   :nd_rep_flag,
                   :nd_fm_bed_class,
                   :nd_to_bed_class,
                   :nd_fm_blng_serv,
                   :nd_to_blng_serv,
                   :nd_fm_date,
                   :nd_to_date,
                   :nd_fm_month,
                   :nd_to_month,
                   :nd_fm_year,
                   :nd_to_year,
                   :nd_fm_date_prn,
                   :nd_to_date_prn
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

nd_pkg_serv_flag.arr[nd_pkg_serv_flag.len] = '\0';
nd_rep_flag.arr[nd_rep_flag.len] = '\0';
nd_fm_bed_class.arr[nd_fm_bed_class.len] = '\0';
nd_to_bed_class.arr[nd_to_bed_class.len] = '\0';
nd_fm_blng_serv.arr[nd_fm_blng_serv.len] = '\0';
nd_to_blng_serv.arr[nd_to_blng_serv.len] = '\0';
nd_fm_date.arr[nd_fm_date.len] = '\0';
nd_to_date.arr[nd_to_date.len] = '\0';
nd_fm_month.arr[nd_fm_month.len] = '\0';
nd_to_month.arr[nd_to_month.len] = '\0';
nd_fm_year.arr[nd_fm_year.len] = '\0';
nd_to_year.arr[nd_to_year.len] = '\0';
nd_fm_date_prn.arr[nd_fm_date_prn.len] = '\0';
nd_to_date_prn.arr[nd_to_date_prn.len] = '\0';

   strcpy(g_facility_id, nd_operating_facility_id.arr);

   EXEC SQL DELETE SY_PROG_PARAM
             WHERE PGM_ID     = :d_curr_pgm_name
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
         err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
   
}

declare_cur()
{

     EXEC SQL DECLARE BL_SRV_INC_SUM_DTL_CUR CURSOR FOR
               SELECT BED_CLASS_CODE,
                      BLNG_SERV_CODE,
                      LTRIM(TO_CHAR(SERV_MONTH,'09'))||'/'||
                        LTRIM(TO_CHAR(SERV_YEAR,'0009')),
                      TO_CHAR(NVL(BASE_CHARGE,0),'999,999,990.99'),
                      TO_CHAR(NVL(GROSS_CHARGE,0),'999,999,990.99'),
                      TO_CHAR(NVL(DISC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(GROSS_CHARGE,0) - NVL(DISC_AMT,0),'999,999,990.99'),
                      NVL(BASE_CHARGE,0),
                      NVL(GROSS_CHARGE,0),   
                      NVL(DISC_AMT,0),
                      NVL(GROSS_CHARGE,0) - NVL(DISC_AMT,0)
                 FROM BL_SRV_INC_SUM_MTH_DTL
                WHERE EPISODE_TYPE in ('I','D') //EPNH 30/10/2004
                  AND BED_CLASS_CODE 
                         BETWEEN NVL(:nd_fm_bed_class,' ') AND
                                 NVL(:nd_to_bed_class,'~~')
                  AND BLNG_SERV_CODE
                         BETWEEN NVL(:nd_fm_blng_serv,' ') AND
                                 NVL(:nd_to_blng_serv,'~~~~~~~~~~')
                  AND (SERV_YEAR * 100) + SERV_MONTH
                    BETWEEN TO_NUMBER(NVL(:nd_fm_year,'0000')) * 100 
                        +  TO_NUMBER(NVL(:nd_fm_month, '01')) 
                       AND TO_NUMBER(NVL(:nd_to_year,'9999')) * 100 
                       +  TO_NUMBER(NVL(:nd_to_month, '12')) 
                     AND  OPERATING_FACILITY_ID = :nd_operating_facility_id
                ORDER BY SERV_YEAR,SERV_MONTH,BED_CLASS_CODE,BLNG_SERV_CODE;

     EXEC SQL DECLARE BL_PKG_INC_SUM_DTL_CUR CURSOR FOR
               SELECT BED_CLASS_CODE,
                      PACKAGE_CODE,
                      LTRIM(TO_CHAR(SERV_MONTH,'09'))||'/'||
                           LTRIM(TO_CHAR(SERV_YEAR,'0009')),
                      TO_CHAR(NVL(BASE_CHARGE,0),'999,999,990.99'),
                      TO_CHAR(NVL(GROSS_CHARGE,0),'999,999,990.99'),
                      TO_CHAR(NVL(DISC_AMT,0),'999,999,990.99'),
                      TO_CHAR(NVL(GROSS_CHARGE,0) - NVL(DISC_AMT,0),'999,999,990.99'),
                      NVL(BASE_CHARGE,0),
                      NVL(GROSS_CHARGE,0),
                      NVL(DISC_AMT,0),
                      NVL(GROSS_CHARGE,0) - NVL(DISC_AMT,0)
                 FROM BL_PKG_INC_SUM_MTH_DTL
                WHERE EPISODE_TYPE in ('I','D') //EPNH 30/10/2004
                  AND BED_CLASS_CODE 
                         BETWEEN NVL(:nd_fm_bed_class,' ') AND
                                 NVL(:nd_to_bed_class,'~~')
                  AND PACKAGE_CODE
                         BETWEEN NVL(:nd_fm_blng_serv,' ') AND
                                 NVL(:nd_to_blng_serv,'~~~~~~~~~~')
                  AND SERV_YEAR||SERV_MONTH
                    BETWEEN
                         LTRIM(:nd_fm_year,'0009')||
                         LTRIM(:nd_fm_month,'09')
                    AND
                         LTRIM(:nd_to_year,'0009')||
                         LTRIM(:nd_to_month,'09')
				  AND   OPERATING_FACILITY_ID = :nd_operating_facility_id
                ORDER BY SERV_YEAR,SERV_MONTH,BED_CLASS_CODE,PACKAGE_CODE;

    EXEC SQL DECLARE BL_PACKAGE_HDR_CUR CURSOR FOR
              SELECT LONG_DESC
                FROM BL_PACKAGE_HDR
               WHERE PACKAGE_CODE = :bl_blng_serv_code;

    EXEC SQL DECLARE BL_BLNG_SERV_CUR CURSOR FOR
              SELECT LONG_DESC
                FROM BL_BLNG_SERV
               WHERE BLNG_SERV_CODE = :bl_blng_serv_code;

    EXEC SQL DECLARE IP_BED_CLASS_CUR CURSOR FOR
              SELECT LONG_DESC
                FROM IP_BED_CLASS
               WHERE BED_CLASS_CODE = :bl_bed_class_code;

 
 /*sprintf(l_mesg," 1 %s 2 %s 3 %s  4 %s  5 %s 6 %s  7 %s  8 %s  9 %s ",nd_fm_bed_class.arr,
                 nd_to_bed_class.arr,nd_fm_blng_serv.arr,nd_to_blng_serv.arr,nd_fm_year.arr,
		 nd_fm_month.arr,nd_to_year.arr,nd_to_month.arr,nd_operating_facility_id.arr);

 disp_message(ERR_MESG,l_mesg);*/

    
}

open_cur()
{
   if (nd_pkg_serv_flag.arr[0] == 'S')
   {
     EXEC SQL OPEN BL_SRV_INC_SUM_DTL_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_SRV_INC_SUM_DTL_CUR",0,"");
  }
  else 
  {
     EXEC SQL OPEN BL_PKG_INC_SUM_DTL_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor BL_PKG_INC_SUM_DTL_CUR",0,"");
  }
}

fetch_cur()
{
bl_bed_class_code.arr[0]                                          = '\0';
bl_blng_serv_code.arr[0]                                          = '\0';
bl_concat_month_yr.arr[0]                                         = '\0';
bl_base_charge.arr[0]                                             = '\0';
bl_gross_charge.arr[0]                                            = '\0';
bl_disc_amt.arr[0]                                                = '\0';
bl_net_amt.arr[0]                                                 = '\0';

bl_bed_class_code.len                                             = 0;
bl_blng_serv_code.len                                             = 0;
bl_concat_month_yr.len                                            = 0;
bl_base_charge.len                                                = 0;
bl_gross_charge.len                                               = 0;
bl_disc_amt.len                                                   = 0;
bl_net_amt.len                                                    = 0;

bl_base_charge_db                                                 = 0;
bl_gross_charge_db                                                = 0;
bl_disc_amt_db                                                    = 0;
bl_net_amt_db                                                     = 0;

   if (nd_pkg_serv_flag.arr[0] == 'S')
   {
     EXEC SQL FETCH BL_SRV_INC_SUM_DTL_CUR
               INTO :bl_bed_class_code,
                    :bl_blng_serv_code,
                    :bl_concat_month_yr,
                    :bl_base_charge,
                    :bl_gross_charge,
                    :bl_disc_amt,
                    :bl_net_amt,
                    :bl_base_charge_db,
                    :bl_gross_charge_db,
                    :bl_disc_amt_db,
                    :bl_net_amt_db;

   if (OERROR)
         err_mesg("FETCH failed on cursor BL_SRV_INC_SUM_DTL_CUR",0,"");
    

  

  }
  else
  {
     EXEC SQL FETCH BL_PKG_INC_SUM_DTL_CUR
               INTO :bl_bed_class_code,
                    :bl_blng_serv_code,
                    :bl_concat_month_yr,
                    :bl_base_charge,
                    :bl_gross_charge,
                    :bl_disc_amt,
                    :bl_net_amt,
                    :bl_base_charge_db,
                    :bl_gross_charge_db,
                    :bl_disc_amt_db,
                    :bl_net_amt_db;

   if (OERROR)
         err_mesg("FETCH failed on cursor BL_PKG_INC_SUM_DTL_CUR",0,"");

  }

bl_bed_class_code.arr[bl_bed_class_code.len]                             = '\0';
bl_blng_serv_code.arr[bl_blng_serv_code.len]                             = '\0';
bl_concat_month_yr.arr[bl_concat_month_yr.len]                           = '\0';
bl_base_charge.arr[bl_base_charge.len]                                   = '\0';
bl_gross_charge.arr[bl_gross_charge.len]                                 = '\0';
bl_disc_amt.arr[bl_disc_amt.len]                                         = '\0';
bl_net_amt.arr[bl_net_amt.len]                                           = '\0';

    return(LAST_ROW?0:1);
}

fetch_bed_cls_desc()
{
    bl_bed_long_desc.arr[0]                                           = '\0';
    bl_bed_long_desc.len                                              = 0;

    EXEC SQL OPEN IP_BED_CLASS_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor IP_BED_CLASS_CUR",0,"");

    EXEC SQL FETCH IP_BED_CLASS_CUR
              INTO :bl_bed_long_desc;

   if (OERROR)
        err_mesg("FETCH failed on cursor BL_PACKAGE_HDR_CUR",0,"");

   bl_bed_long_desc.arr[bl_bed_long_desc.len] = '\0';

}

fetch_pkg_serv_desc()
{
    bl_blng_long_desc.arr[0]                                           = '\0';
    bl_blng_long_desc.len                                              = 0;

    if (nd_pkg_serv_flag.arr[0] == 'P')
    {
        EXEC SQL OPEN BL_PACKAGE_HDR_CUR;
        if (OERROR)
             err_mesg("OPEN failed on cursor BL_PACKAGE_HDR_CUR",0,"");
   
        EXEC SQL FETCH BL_PACKAGE_HDR_CUR
                  INTO :bl_blng_long_desc;

        if (OERROR)
             err_mesg("FETCH failed on cursor BL_PACKAGE_HDR_CUR",0,"");
   }
   else 
   {
        EXEC SQL OPEN BL_BLNG_SERV_CUR;
        if (OERROR)
             err_mesg("OPEN failed on cursor BL_BLNG_SERV_CUR",0,"");
   
        EXEC SQL FETCH BL_BLNG_SERV_CUR
                  INTO :bl_blng_long_desc;

        if (OERROR)
             err_mesg("FETCH failed on cursor BL_BLNG_SERV_CUR",0,"");
   }
   bl_blng_long_desc.arr[bl_blng_long_desc.len]                      = '\0';

}

print_rec(ind)
int ind;
{
  if (ind == 0)
  {
       fprintf(fp,"MONTH           : %s\n",bl_concat_month_yr.arr);
       fflush(fp);
       lctr++;
  }
  else if (ind == 1)
  {
     if (lctr > 53)
        print_head(1);
     fprintf(fp,"BED CLASS       : %-2s %-30s\n\n",
            bl_bed_class_code.arr,bl_bed_long_desc.arr);
     fflush(fp);
     lctr+=2;
  }
  else 
  {
      if (lctr > 53)
         print_head(1);
      fetch_pkg_serv_desc();
      fprintf(fp,"        %-10s %-40s ",
	  //%s %s %s %s\n",
               bl_blng_serv_code.arr,bl_blng_long_desc.arr);
               print_formated(bl_base_charge_db,fp); fprintf(fp," ");
               print_formated(bl_gross_charge_db,fp);fprintf(fp," ");
               print_formated(bl_disc_amt_db,fp);fprintf(fp," ");
               print_formated(bl_net_amt_db,fp);
	  fprintf(fp,"\n");
      lctr++;

      bed_tot_base_charge += bl_base_charge_db;
      bed_tot_gross_charge += bl_gross_charge_db;
      bed_tot_disc_amt += bl_disc_amt_db;
      bed_tot_net_amt += bl_net_amt_db;
  }
}

print_month_yr_tot(l_flg)
int l_flg;
{
    print_bed_class_tot(0);

    if (lctr > 52)
       print_head(1);

    fprintf(fp,"\n");
    fprintf(fp,"                                                             --------------  --------------  --------------  --------------\n");
    fprintf(fp,"                                   %s  ", "MONTHLY TOTAL         :");
    print_formated(mnth_tot_base_charge,fp);fprintf(fp," ");
    print_formated(mnth_tot_gross_charge,fp);fprintf(fp," ");
    print_formated(mnth_tot_disc_amt,fp);fprintf(fp," ");
    print_formated(mnth_tot_net_amt,fp);
    fprintf(fp,"\n");
    fprintf(fp,"                                                             --------------  --------------  --------------  --------------\n");
    fflush(fp);
    lctr+=4;

       grn_tot_base_charge += mnth_tot_base_charge;
       grn_tot_gross_charge += mnth_tot_gross_charge;
       grn_tot_disc_amt += mnth_tot_disc_amt;
       grn_tot_net_amt += mnth_tot_net_amt;

       mnth_tot_base_charge = 0;
       mnth_tot_gross_charge = 0;
       mnth_tot_disc_amt = 0;
       mnth_tot_net_amt = 0;

       if (l_flg)
       {
          print_rec(0);
          print_rec(1);
       }
}

print_bed_class_tot(l_flg)
int l_flg;
{

    if (lctr > 52)
       print_head(1);

    fprintf(fp,"\n");
    fprintf(fp,"                                                             --------------  --------------  --------------  --------------\n");
    fprintf(fp,"                                   %s  ",
                 "BED CLASS TOTAL       :");
    print_formated(bed_tot_base_charge,fp);fprintf(fp," ");
    print_formated(bed_tot_gross_charge,fp);fprintf(fp," ");
    print_formated(bed_tot_disc_amt,fp);fprintf(fp," ");
    print_formated(bed_tot_net_amt,fp);
    fprintf(fp,"\n");
    fprintf(fp,"                                                             --------------  --------------  --------------  --------------\n");
    fflush(fp);
    lctr+=4;

    mnth_tot_base_charge += bed_tot_base_charge;
    mnth_tot_gross_charge += bed_tot_gross_charge;
    mnth_tot_disc_amt += bed_tot_disc_amt;
    mnth_tot_net_amt += bed_tot_net_amt;

    bed_tot_base_charge = 0;
    bed_tot_gross_charge = 0;
    bed_tot_disc_amt = 0;
    bed_tot_net_amt = 0;

    if (l_flg)
       print_rec(1);
}

print_grand_tot()
{

/* print_month_yr_tot only added by Irfan.J.S on 20/05/2000 to cater for grand total against SCF-571 */
	print_month_yr_tot(0);
    //print_bed_class_tot(0);

    if (lctr > 52)
       print_head(0);

  fprintf(fp,"\n");
  fprintf(fp,"                                                             --------------  --------------  --------------  --------------\n");
  fprintf(fp,"                                   %s  ",
                 "GRAND TOTAL           :");
				   print_formated(grn_tot_base_charge,fp);fprintf(fp," ");
  print_formated(grn_tot_gross_charge,fp);fprintf(fp," ");
  print_formated(grn_tot_disc_amt,fp);fprintf(fp," ");
  print_formated(grn_tot_net_amt,fp);
  fprintf(fp,"\n");
  fprintf(fp,"                                                             --------------  --------------  --------------  --------------\n");
fflush(fp);
}

end_of_rep()
{
fprintf(fp,"\n\n                                                      ***  END OF REPORT ***\n");
fflush(fp);
}

open_file()
{


  strcpy(filename,WORKING_DIR);
  strcat(filename,"blrbdinm.lis");

  if ((fp = fopen(filename,"w")) == NULL)
  {
       disp_message(ERR_MESG,"Error in opening file blrbdinm.lis");
       proc_exit();
  }
  print_title();
  print_head(0);
}

print_title()
{
fprintf(fp,
"\fMDL : BL                                         %-30s                                        %-16s\n",
hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                                PAGE : %4d\n",
"BLRBDINM",
 (nd_pkg_serv_flag.arr[0] == 'P')?
"       INCOME ANALYSIS BY BED CLASS - PACKAGES       ":
"       INCOME ANALYSIS BY BED CLASS - SERVICES       ", ++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,"VER : 4.1\n");
fflush(fp);

fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
fprintf(fp,"                  PACKAGE/SERVICE      : %s\n\n",nd_pkg_serv_flag.arr);
/*
fprintf(fp,"                  DAILY/MONTHLY REPORT : %s\n\n",nd_rep_flag.arr);
*/
fprintf(fp,"                  BED CLASS       FROM : %s\n",nd_fm_bed_class.arr);
fprintf(fp,"                                  TO   : %s\n\n",nd_to_bed_class.arr);
fprintf(fp,"                  PACKAGE/SERVICE FROM : %s\n",nd_fm_blng_serv.arr);
fprintf(fp,"                                  TO   : %s\n\n",nd_to_blng_serv.arr);
/*
fprintf(fp,"                  DATE            FROM : %s\n",nd_fm_date_prn.arr);
fprintf(fp,"                                  TO   : %s\n\n",nd_to_date_prn.arr);
*/
fprintf(fp,"                  MONTH           FROM : %02d/%04d\n",
                    atoi(nd_fm_month.arr),atoi(nd_fm_year.arr));
fprintf(fp,"                                  TO   : %02d/%04d\n\n",
                    atoi(nd_to_month.arr),atoi(nd_to_year.arr));
}

print_head(l_flg)
int l_flg;
{
fprintf(fp,
"\fMDL : BL                                         %-30s                                        %-16s\n",
hosp_name.arr,date_time.arr);
fprintf(fp,"OPR : %-10s \n", user_id.arr);
fprintf(fp,
"REP : %-8s                       %s                                PAGE : %4d\n",
"BLRBDINM",
 (nd_pkg_serv_flag.arr[0] == 'P')?
"       INCOME ANALYSIS BY BED CLASS - PACKAGES       ":
"       INCOME ANALYSIS BY BED CLASS - SERVICES       ", ++pctr);
 fprintf(fp,"DAILY REPORT\n");
 fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------\n");
 if (nd_pkg_serv_flag.arr[0] == 'S')
 fprintf(fp,"        BILLING SERVICE & DESCRIPTION                       BASE CHARGE    GROSS CHARGE        DISC AMT      NET CHARGE\n");
 else
 fprintf(fp,"        PACKAGE & DESCRIPTION                               BASE CHARGE    GROSS CHARGE        DISC AMT      NET CHARGE\n");
 fprintf(fp,"----------------------------------------------------------------------------------------------------------------------------------\n");
fflush(fp);
lctr = 8;
 if (l_flg)
 {
   print_rec(0);
   print_rec(1);
 }
}

fetch_hosp_name()
{
    hosp_name.arr[0] = '\0';
    date_time.arr[0] = '\0';
    user_id.arr[0]   = '\0';
    hosp_name.len    = 0;
    date_time.len    = 0;
    user_id.len      = 0;

/*-- Y2K correction. Format introduced for year as YYYY instead of YY 
     VSK 15/11/1999 */

    EXEC SQL SELECT ACC_ENTITY_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                    USER
               INTO :hosp_name, :date_time, :user_id
               FROM SY_ACC_ENTITY
			   WHERE ACC_ENTITY_ID = :nd_operating_facility_id;

       if (OERROR) err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

hosp_name.arr[hosp_name.len]           = '\0';
date_time.arr[date_time.len]           = '\0';
user_id.arr[user_id.len]               = '\0';
}
/*
print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (loc_amount >= 0)
   {
      sprintf(out_str,"%15.2f",loc_amount);
 //     ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s ",out_str1);
   }
   else
   {
      sprintf(out_str,"%15.2f",-loc_amount);
//      ltrim(out_str);str_comma(out_str);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s-",out_str1);
   }
}
*/
print_formated(loc_amount,fp)
double loc_amount;
FILE *fp;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);
        //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt,"-");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);
                //ltrim(s_amt);
        format_amt(s_amt);
        //strcat(s_amt," ");
      sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%-14s ",str_amt);
        }
}
/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLR00083.PC                                  */
/* AUTHOR                : Robert Joseph                                */  
/* DATE WRITTEN          : 07/06/2005                                   */      
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 
   
#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND			  sqlca.sqlcode == 1403
#define OERROR          (sqlca.sqlcode < 0)
#define MAX_LINES 42
//#define VER  "VER : 4.10\n"
#define ESC  0x1B
/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;


VARCHAR     hosp_name                       [120],
			date							[20],
            date_time                       [20],
			d_acc_entity_name				[61],
			d_user							[31],
			d_head_name						[31],
			d_sysdate						[20],
			d_curr_date						[20],
			nd_facility_id					[3],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
            nd_facility				        [3],
			nd_period						[8],
			nd_fm_date						[21],
			nd_to_date						[21],
			nd_mth							[21],
			nd_year							[5],
			d_facility_id					[3],
			d_nationality_code				[5],
			d_nationality_desc				[16],
			d_visit_type_code				[3],
			d_episode_id					[13],
			d_visit_id						[7],
			d_patient_id					[21],
			prev_facility_id				[3],
			prev_nationality_code			[5],
			l_translated_value				[201],	
			l_pk_value						[100],
			p_language_id                    [3];

	char	nd_episode_type, nd_period_type, nd_blng_info_for,
			nd_category, nd_print_ded_yn, d_legal_yn, d_visit_type_ind,
			d_episode_type, prev_visit_type_ind, prev_legal_yn;

	int		i,sl_no=1,page_no=0, REP_WIDTH = 252,
			d_new_attend_cnt		= 0,
			d_fup_attend_cnt		= 0,
			d_tot_attend_cnt		= 0,
			net_new_attend_cnt		= 0,
			net_fup_attend_cnt		= 0,
			net_tot_attend_cnt		= 0;
	
	double	d_amt					= 0,
			d_new_deposit_amt		= 0,
			d_fup_deposit_amt		= 0,
			d_tot_deposit_amt		= 0,
			d_new_charged_amt		= 0,
			d_fup_charged_amt		= 0,
			d_tot_charged_amt		= 0,
			d_new_collected_amt		= 0,
			d_fup_collected_amt		= 0,
			d_tot_collected_amt		= 0,
			d_new_outst_amt			= 0,
			d_fup_outst_amt			= 0,
			d_tot_outst_amt			= 0,
			d_new_deduct_amt		= 0,
			d_fup_deduct_amt		= 0,
			d_tot_deduct_amt		= 0,
			net_tot_deduct_amt		= 0,
			net_new_deposit_amt		= 0,
			net_fup_deposit_amt		= 0,
			net_tot_deposit_amt		= 0,
			net_new_charged_amt		= 0,
			net_fup_charged_amt		= 0,
			net_tot_charged_amt		= 0,
			net_new_collected_amt	= 0,
			net_fup_collected_amt	= 0,
			net_tot_collected_amt	= 0,
			net_new_outst_amt		= 0,
			net_fup_outst_amt		= 0,
			net_tot_outst_amt		= 0;

	char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char string_var [100];

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0, recctr = 1, ftime = 0, bgftime = 0;


FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }

	strcpy(g_pgm_id,"BLR00083");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);
	 
    EXEC sql connect :nd_pwd;
  	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

		set_meduser_role(); 

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);


	 strcpy(p_language_id.arr,l_language_id.arr);
	 p_language_id.len = l_language_id.len;


    EXEC SQL SELECT	PARAM1, PARAM2, PARAM3, PARAM4,
					PARAM5,	PARAM6, PARAM7, PARAM8,
					PARAM9, PARAM10, PARAM11	
			 INTO	:nd_facility_id, :nd_episode_type,
					:nd_period_type, :nd_period,
					:nd_blng_info_for, :nd_category,
					:nd_fm_date, :nd_to_date,
					:nd_mth, :nd_year, :nd_print_ded_yn
			 FROM	SY_PROG_PARAM
			 WHERE PGM_ID		= :d_curr_pgm_name
			 AND   SESSION_ID	= :nd_session_id
			 AND   PGM_DATE		= :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

	nd_facility_id.arr[nd_facility_id.len]	= '\0';
	nd_period.arr[nd_period.len]			= '\0';
	nd_fm_date.arr[nd_fm_date.len]			= '\0';
	nd_to_date.arr[nd_to_date.len]			= '\0';
	nd_mth.arr[nd_mth.len]					= '\0';
	nd_year.arr[nd_year.len]				= '\0';
         
   EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");

	if (nd_print_ded_yn == 'Y')
		REP_WIDTH = 266;
   
    open_files();

    declare_cur();

	get_header_dtls();

	fetch_legend_value();
 
//	fprintf(fp,"%c&l1O",ESC);	/* Set Landscape*/ 
//	fprintf(fp, "%c(s17H", ESC);/* Reduce the font size*/
//	fprintf(fp,"%c&a4L",ESC); 	/* To Set the Left margin*/

 
	next_line(1);

	print_param();

	open_cur();

   ftime = 0;      

   while(fetch_cur())
   {	
   
       	print_rec();
   

   }

   
   
   if (ftime != 0)
   {
			if ((d_legal_yn == 'Y') && (ftime != 0))
			{
				fprintf(fp,"%15s %8d %8d %8d ",loc_legend[14], 
							d_new_attend_cnt, d_fup_attend_cnt, d_tot_attend_cnt);

				print_formated(d_new_deposit_amt);
				print_formated(d_fup_deposit_amt);
				print_formated(d_tot_deposit_amt);

				print_formated(d_new_charged_amt);
				print_formated(d_fup_charged_amt);
				print_formated(d_tot_charged_amt);

				print_formated(d_new_collected_amt);
				print_formated(d_fup_collected_amt);
				print_formated(d_tot_collected_amt);

				calc_outst_amt();

				print_formated(d_new_outst_amt);
				print_formated(d_fup_outst_amt);
				print_formated(d_tot_outst_amt);

				if (nd_print_ded_yn == 'Y')
				print_formated(d_tot_deduct_amt);
			}
			else if ((d_legal_yn != 'Y') && (ftime != 0))
			{
				fprintf(fp,"%15s %8d %8d %8d ",loc_legend[15], 
							d_new_attend_cnt, d_fup_attend_cnt, d_tot_attend_cnt);

				print_formated(d_new_deposit_amt);
				print_formated(d_fup_deposit_amt);
				print_formated(d_tot_deposit_amt);

				print_formated(d_new_charged_amt);
				print_formated(d_fup_charged_amt);
				print_formated(d_tot_charged_amt);

				print_formated(d_new_collected_amt);
				print_formated(d_fup_collected_amt);
				print_formated(d_tot_collected_amt);

				calc_outst_amt();

				print_formated(d_new_outst_amt);
				print_formated(d_fup_outst_amt);
				print_formated(d_tot_outst_amt);

				if (nd_print_ded_yn == 'Y')
				print_formated(d_tot_deduct_amt);
			}

		print_grand_tot();
   }	


    print_end();

	fprintf(fp,"%cE",ESC); /* To Reset the Printer */
 }

open_files()
{
	strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00083.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLR00083.lis");
       proc_exit();
    }

}

declare_cur()
{
	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
		(nd_episode_type == 'V'))
	{
	EXEC SQL DECLARE VISIT_CUR CURSOR FOR
	SELECT	A.FACILITY_ID, A.EPISODE_TYPE, A.EPISODE_ID, A.VISIT_ID, 
			A.PATIENT_ID, NVL(B.NATIONALITY_CODE,'zzzz'), B.LEGAL_YN,
			DECODE(C.VISIT_TYPE_IND,'F','F','L')
	FROM	OP_VISIT A, MP_PATIENT B, OP_VISIT_TYPE C
	WHERE	A.FACILITY_ID = NVL(:nd_facility_id,A.FACILITY_ID)
	AND	A.VISIT_REGN_DATE_TIME >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss')
	AND	A.VISIT_REGN_DATE_TIME < 	to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss')	
	AND	NVL(A.VISIT_STATUS,'X') != '9'
	AND	A.PATIENT_ID = B.PATIENT_ID
	AND	A.VISIT_TYPE_CODE = C.VISIT_TYPE_CODE	
	AND	NVL(A.EPISODE_TYPE,'O') = DECODE(:nd_episode_type,'O','O','E','E',NVL(A.EPISODE_TYPE,'O'))
	AND	NVL(B.CITIZEN_YN,'N') = DECODE(:nd_category,'C','Y','N','N',NVL(B.CITIZEN_YN,'N'))
	ORDER BY A.FACILITY_ID, NVL(B.NATIONALITY_CODE,'zzzz'), B.LEGAL_YN, DECODE(C.VISIT_TYPE_IND,'F','F','L');

	if (OERROR)
        err_mesg("DECLARE failed on cursor 7/22/2005",0,"");
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
	EXEC SQL DECLARE ADM_CUR CURSOR FOR
	SELECT	A.FACILITY_ID, A.EPISODE_TYPE, A.EPISODE_ID,  
			A.PATIENT_ID, NVL(B.NATIONALITY_CODE,'zzzz'), B.LEGAL_YN, 'F'
	FROM	IP_EPISODE A, MP_PATIENT B
	WHERE	A.FACILITY_ID = NVL(:nd_facility_id,A.FACILITY_ID)
	AND	A.ADMISSION_DATE_TIME >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss')
	AND	A.ADMISSION_DATE_TIME < 	to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss')
	AND	A.PATIENT_ID = B.PATIENT_ID
	AND	NVL(A.EPISODE_STATUS,'X') != '9'
	AND	NVL(A.EPISODE_TYPE,'I') = DECODE(:nd_episode_type,'I','I','D','D',NVL(A.EPISODE_TYPE,'I'))
	AND	NVL(B.CITIZEN_YN,'N') = DECODE(:nd_category,'C','Y','N','N',NVL(B.CITIZEN_YN,'N'))
	ORDER BY A.FACILITY_ID, NVL(B.NATIONALITY_CODE,'zzzz'), B.LEGAL_YN;

	if (OERROR)
        err_mesg("DECLARE failed on cursor ADM_CUR",0,"");
	}
	
}

open_cur()
{
	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
		(nd_episode_type == 'V'))
	{
		EXEC SQL OPEN VISIT_CUR;
		if (OERROR)
        err_mesg("OPEN failed on cursor VISIT_CUR",0,"");
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
		EXEC SQL OPEN ADM_CUR;
		if (OERROR)
        err_mesg("OPEN failed on cursor ADM_CUR",0,"");
	}
}

close_cur()
{
	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
		(nd_episode_type == 'V'))
	{
		EXEC SQL CLOSE VISIT_CUR;
		if (OERROR)
        err_mesg("CLOSE failed on cursor VISIT_CUR",0,"");
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
		EXEC SQL CLOSE ADM_CUR;
		if (OERROR)
        err_mesg("CLOSE failed on cursor ADM_CUR",0,"");
	}
}

fetch_cur()
{ 
	d_facility_id.arr[0]		= '\0';
	d_episode_id.arr[0]			= '\0';
	d_visit_id.arr[0]			= '\0';
	d_patient_id.arr[0]			= '\0';
	d_nationality_code.arr[0]	= '\0';

	d_facility_id.len			= 0;
	d_episode_id.len			= 0;
	d_visit_id.len				= 0;
	d_patient_id.len			= 0;
	d_nationality_code.len		= 0;
	
	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
		(nd_episode_type == 'V'))
	{
		EXEC SQL FETCH  VISIT_CUR INTO 
			:d_facility_id,
			:d_episode_type,
			:d_episode_id,
			:d_visit_id,
			:d_patient_id,
			:d_nationality_code,
			:d_legal_yn,
			:d_visit_type_ind;

	if (OERROR)
		err_mesg("FETCH failed on cursor VISIT_CUR ",0,"");	 
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
	
		EXEC SQL FETCH  ADM_CUR INTO 
			:d_facility_id,
			:d_episode_type,
			:d_episode_id,
			:d_patient_id,
			:d_nationality_code,
			:d_legal_yn,
			:d_visit_type_ind;

	if (OERROR)
		err_mesg("FETCH failed on cursor ADM_CUR ",0,"");	
	}

    d_facility_id.arr[d_facility_id.len]			= '\0';
	d_episode_id.arr[d_episode_id.len]				= '\0';
	d_visit_id.arr[d_visit_id.len]					= '\0';
	d_patient_id.arr[d_patient_id.len]				= '\0';
	d_nationality_code.arr[d_nationality_code.len]	= '\0';

	return(LAST_ROW?0:1);   
}

print_rec()
{
    check_line(1);

	if ((strcmp(d_nationality_code.arr, prev_nationality_code.arr) != 0) ||
		(strcmp(d_facility_id.arr, prev_facility_id.arr) != 0) ||
		(d_legal_yn != prev_legal_yn))
	{
		get_nationality();

		if ((strcmp(d_nationality_code.arr, prev_nationality_code.arr) != 0) ||
		(d_legal_yn != prev_legal_yn))
		{
			if ((prev_legal_yn == 'Y') && (ftime != 0))
			{
				fprintf(fp,"%15s %8d %8d %8d ",loc_legend[14], 
							d_new_attend_cnt, d_fup_attend_cnt, d_tot_attend_cnt);

				print_formated(d_new_deposit_amt);
				print_formated(d_fup_deposit_amt);
				print_formated(d_tot_deposit_amt);

				print_formated(d_new_charged_amt);
				print_formated(d_fup_charged_amt);
				print_formated(d_tot_charged_amt);

				print_formated(d_new_collected_amt);
				print_formated(d_fup_collected_amt);
				print_formated(d_tot_collected_amt);

				calc_outst_amt();

				print_formated(d_new_outst_amt);
				print_formated(d_fup_outst_amt);
				print_formated(d_tot_outst_amt);

				if (nd_print_ded_yn == 'Y')
				print_formated(d_tot_deduct_amt);

				next_line(1);
			}
			else if ((prev_legal_yn != 'Y') && (ftime != 0))
			{
				fprintf(fp,"%15s %8d %8d %8d ",loc_legend[15], 
							d_new_attend_cnt, d_fup_attend_cnt, d_tot_attend_cnt);

				print_formated(d_new_deposit_amt);
				print_formated(d_fup_deposit_amt);
				print_formated(d_tot_deposit_amt);

				print_formated(d_new_charged_amt);
				print_formated(d_fup_charged_amt);
				print_formated(d_tot_charged_amt);

				print_formated(d_new_collected_amt);
				print_formated(d_fup_collected_amt);
				print_formated(d_tot_collected_amt);

				calc_outst_amt();

				print_formated(d_new_outst_amt);
				print_formated(d_fup_outst_amt);
				print_formated(d_tot_outst_amt);

				if (nd_print_ded_yn == 'Y')
				print_formated(d_tot_deduct_amt);
				next_line(1);
			}

			if (strcmp(d_nationality_code.arr, prev_nationality_code.arr) != 0)
			{
				fprintf(fp,"%-15.15s ", d_nationality_desc.arr);
			}

			if ((strcmp(d_nationality_code.arr, prev_nationality_code.arr) == 0) && 
				(d_legal_yn != prev_legal_yn) && (ftime != 0))
			{
				fprintf(fp,"%15s "," ");
			}
		}
		
		strcpy(prev_facility_id.arr, d_facility_id.arr);
		prev_facility_id.len = strlen(d_facility_id.arr);
		prev_facility_id.arr[prev_facility_id.len] = '\0';

		strcpy(prev_nationality_code.arr, d_nationality_code.arr);
		prev_nationality_code.len = strlen(d_nationality_code.arr);
		prev_nationality_code.arr[prev_nationality_code.len] = '\0';

		prev_legal_yn = d_legal_yn;

		d_new_attend_cnt		= 0;
		d_fup_attend_cnt		= 0;
		d_tot_attend_cnt		= 0;

		d_new_deposit_amt		= 0;
		d_fup_deposit_amt		= 0;
		d_tot_deposit_amt		= 0;
		d_new_charged_amt		= 0;
		d_fup_charged_amt		= 0;
		d_tot_charged_amt		= 0;
		d_new_collected_amt		= 0;
		d_fup_collected_amt		= 0;
		d_tot_collected_amt		= 0;
		d_new_deduct_amt		= 0;
		d_fup_deduct_amt		= 0;
		d_tot_deduct_amt		= 0;
		d_new_outst_amt			= 0;
		d_fup_outst_amt			= 0;
		d_tot_outst_amt			= 0;

	}
	
	ftime = 1;
	if (d_visit_type_ind == 'F')
	{
		d_new_attend_cnt	+= 1;
		net_new_attend_cnt	+= 1;
	}
	else
	{
		d_fup_attend_cnt	+= 1;
		net_fup_attend_cnt	+= 1;
	}

	d_tot_attend_cnt	+= 1;
	net_tot_attend_cnt	+= 1;

    calc_deposit_amt();
	
	calc_charged_amt();
	
	calc_collected_amt();

	calc_ded_amt();

}

calc_deposit_amt()
{
	d_amt = 0;

	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
	(nd_episode_type == 'V'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'O','O','E','E',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.VISIT_ID	= :d_visit_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_TYPE IN ('CANC-RECEIPT','RECEIPT')
		AND		TRX_NATURE_CODE in ('AD','PR');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'I','I','D','D',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_TYPE IN ('CANC-RECEIPT','RECEIPT')
		AND		TRX_NATURE_CODE in ('AD','PR');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if (d_visit_type_ind == 'F')
	{
		d_new_deposit_amt	+= d_amt;
		net_new_deposit_amt	+= d_amt;
	}
	else
	{
		d_fup_deposit_amt	+= d_amt;
		net_fup_deposit_amt	+= d_amt;
	}

	d_tot_deposit_amt	+= d_amt;
	net_tot_deposit_amt += d_amt;
	
}

calc_charged_amt()
{
	d_amt = 0;

	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
	(nd_episode_type == 'V'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM	BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'O','O','E','E',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.VISIT_ID	= :d_visit_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_TYPE in ('BILL','CANC-BILL');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'I','I','D','D',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_TYPE in ('BILL','CANC-BILL');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if (d_visit_type_ind == 'F')
	{
		d_new_charged_amt	+= d_amt;
		net_new_charged_amt	+= d_amt;
	}
	else
	{
		d_fup_charged_amt	+= d_amt;
		net_fup_charged_amt	+= d_amt;
	}

	d_tot_charged_amt	+= d_amt;
	net_tot_charged_amt += d_amt;
	
}

calc_collected_amt()
{
	d_amt = 0;

	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
	(nd_episode_type == 'V'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM	BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'O','O','E','E',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.VISIT_ID	= :d_visit_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_NATURE_CODE IN ('BI','DC');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'I','I','D','D',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_NATURE_CODE IN ('BI','DC');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if (d_visit_type_ind == 'F')
	{
		d_new_collected_amt	+= d_amt;
		net_new_collected_amt+= d_amt;
	}
	else
	{
		d_fup_collected_amt	+= d_amt;
		net_fup_collected_amt+= d_amt;
	}

	d_tot_collected_amt		+= d_amt;
	net_tot_collected_amt	+= d_amt;
	
}

calc_ded_amt()
{
	d_amt = 0;

	if ((nd_episode_type == 'O') || (nd_episode_type == 'E') ||
	(nd_episode_type == 'V'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM	BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'O','O','E','E',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.VISIT_ID	= :d_visit_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_TYPE in ('ADJ-BILL','CANC-ADJ-BILL','EXM-BILL','CANC-EXM-BILL',
					'WRITEOFF','CANC-WRITEOFF','DCP-ADJUST');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if ((nd_episode_type == 'I') || (nd_episode_type == 'D') ||
		(nd_episode_type == 'A'))
	{
		EXEC SQL SELECT	SUM(NVL(DEBIT_AMT,0)) into :d_amt
		FROM BL_PATIENT_STATEMENT_VW A
		WHERE	A.EPISODE_TYPE = DECODE(:nd_episode_type,'I','I','D','D',A.EPISODE_TYPE)
		AND		A.EPISODE_ID = :d_episode_id
		AND		A.PATIENT_ID = :d_patient_id
		AND		((:nd_blng_info_for = 'P' 
				AND A.DOC_DATE >= to_date(:nd_fm_date,'dd/mm/yyyy hh24:mi:ss') 
				AND A.DOC_DATE <  to_date(:nd_to_date,'dd/mm/yyyy hh24:mi:ss'))
				OR (:nd_blng_info_for = 'A'))
		AND		TRX_TYPE in ('ADJ-BILL','CANC-ADJ-BILL','EXM-BILL','CANC-EXM-BILL',
					'WRITEOFF','CANC-WRITEOFF','DCP-ADJUST');

		if (OERROR)
        err_mesg("SELECT failed on table BL_PATIENT_STATEMENT_VW",0,"");
	}

	if (d_visit_type_ind == 'F')
	{
		d_new_deduct_amt	+= d_amt;
	}
	else
	{
		d_fup_deduct_amt	+= d_amt;
	}

	d_tot_deduct_amt		+= d_amt;
	net_tot_deduct_amt		+= d_amt;
}

calc_outst_amt()
{
	d_new_outst_amt		+= d_new_charged_amt - d_new_collected_amt - d_new_deposit_amt - d_new_deduct_amt;
	net_new_outst_amt	+= d_new_outst_amt;

	d_fup_outst_amt		+= d_fup_charged_amt - d_fup_collected_amt - d_fup_deposit_amt - d_fup_deduct_amt;
	net_fup_outst_amt	+= d_fup_outst_amt;

	d_tot_outst_amt		+= d_new_outst_amt + d_fup_outst_amt;
	net_tot_outst_amt	+= d_new_outst_amt + d_fup_outst_amt;
}

print_grand_tot()
{
	check_line(4);
	next_line(1);
	print_line('-',REP_WIDTH);
	next_line(1);
	fprintf(fp,"%-31s %8d %8d %8d ","Total", net_new_attend_cnt, 
				net_fup_attend_cnt, net_tot_attend_cnt);

	print_formated(net_new_deposit_amt);
	print_formated(net_fup_deposit_amt);
	print_formated(net_tot_deposit_amt);

	print_formated(net_new_charged_amt);
	print_formated(net_fup_charged_amt);
	print_formated(net_tot_charged_amt);

	print_formated(net_new_collected_amt);
	print_formated(net_fup_collected_amt);
	print_formated(net_tot_collected_amt);

	print_formated(net_new_outst_amt);
	print_formated(net_fup_outst_amt);
	print_formated(net_tot_outst_amt);

	if (nd_print_ded_yn == 'Y')
	print_formated(net_tot_deduct_amt);

	next_line(1);
	print_line('-',REP_WIDTH);
	next_line(1);
}

get_nationality()
{
	d_nationality_desc.arr[0]	= '\0';
	d_nationality_desc.len		= 0;

	EXEC SQL SELECT SHORT_NAME INTO :d_nationality_desc
				FROM MP_COUNTRY
				WHERE COUNTRY_CODE = :d_nationality_code;

	if (LAST_ROW)
	{
		strcpy(d_nationality_desc.arr,"Others");
		d_nationality_desc.len = strlen(d_nationality_desc.arr);
	}

	if (OERROR)
		err_mesg("SELECT failed on table MP_COUNTRY ",0,"");

	d_nationality_desc.arr[d_nationality_desc.len]	= '\0';
}

get_header_dtls()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    d_acc_entity_name.arr[0] ='\0';
    d_curr_date.arr[0]   ='\0';
	d_user.arr[0] ='\0';
    d_sysdate.arr[0] ='\0';
	d_head_name.arr[0] ='\0';
    d_acc_entity_name.len =0;
    d_curr_date.len   =0;
	d_user.len =0;
    d_sysdate.len =0;
	d_head_name.len=0;

	EXEC SQL SELECT upper(ACC_ENTITY_NAME), /* description of the institution */
				   USER, TO_CHAR(SYSDATE, 'DD/MM/YYYY'),TO_CHAR(SYSDATE, 'HH24:MI:SS'),HEAD_OF_COMPANY_NAME
             INTO :d_acc_entity_name,
				  :d_user, :d_sysdate,:d_curr_date,d_head_name
			 FROM SY_ACC_ENTITY
			 WHERE acc_entity_id = :nd_facility;
    
	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
	d_curr_date.arr[d_curr_date.len]			 = '\0';
	d_head_name.arr[d_head_name.len]			 = '\0';

   
	return;
	err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	proc_exit();
}


print_page_title()
{

	int hosp_nm_len,date1_len, rep_title_len = 10,v_title_len,v_title1_len, s1, s2,date_len,user_len,pgm_len,sub_title_len;
	char v_rep_title[200],v_as_on_date[12],v_sub_title[200],v_title[200],v_title1[200];
   
	fprintf(fp,"MDL : BL");
	hosp_nm_len  =  d_acc_entity_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-8);
	fprintf(fp,"%s", d_acc_entity_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);
	date1_len=d_sysdate.len;
	//horz_skip(s2-date1_len-strlen(loc_legend[3])-3);
	horz_skip(s2-date1_len-15-3);
	fprintf(fp,"%15.15s : %s", loc_legend[3],d_sysdate.arr);
    
	next_line(1);
	
	fprintf(fp,"OPR : %s", d_user.arr); 	
        user_len=strlen(d_user.arr);
	strcpy(v_rep_title,loc_legend[1]);
	rep_title_len = strlen(v_rep_title);
	s1 = (REP_WIDTH-rep_title_len)/2;
	horz_skip(s1-user_len-6);
	fprintf(fp,"%s",loc_legend[1]);
   	s2 = (REP_WIDTH-s1-rep_title_len);
	horz_skip(s2-28);
	fprintf(fp,"%15.15s : %10s",loc_legend[2],d_curr_date.arr);
	next_line(1);


	fprintf(fp,"REP : %s",d_curr_pgm_name.arr);
        pgm_len=strlen(d_curr_pgm_name.arr);
	
	sprintf(v_sub_title, loc_legend[5]); 
	//strcpy(v_sub_title,d_head_name.arr);

	sub_title_len = strlen(v_sub_title);
	s1 = (REP_WIDTH-sub_title_len)/2;
   	horz_skip(s1-pgm_len-6);
    fprintf(fp,"%s",v_sub_title);

        s2 = (REP_WIDTH-s1-sub_title_len);
	    horz_skip(s2-28);
		fprintf(fp,"%15.15s : %10d",loc_legend[4],++page_no);
	next_line(1);

  s1=0;
	s1 = (REP_WIDTH-strlen(loc_legend[6])-strlen(nd_period.arr))/2;
	horz_skip(s1);
	fprintf(fp,"%s: %-s",loc_legend[6], nd_period.arr);
	next_line(1);

    s1=0;
	s1 = (REP_WIDTH-strlen(loc_legend[8])-strlen(d_acc_entity_name.arr))/2;
	horz_skip(s1);
	fprintf(fp,"%s: %-s",loc_legend[8], d_acc_entity_name.arr);
	next_line(1);

	print_line('-',REP_WIDTH); next_line(1);
	lctr = 7;	
}

print_column_title()
{

  fprintf(fp, "%-31.31s  %18.18s         %40.40s        %40.40s         %40.40s         %40.40s    ",loc_legend[9],loc_legend[10],loc_legend[16],loc_legend[17],loc_legend[18], loc_legend[19]);

  if(nd_print_ded_yn == 'Y')
  fprintf(fp,"%15.15s",loc_legend[20]);

  next_line(1);

  fprintf(fp, "%-31.31s %8.8s %8.8s %8.8s%15s %15s %15s %15s %15s %15s %15s %15s %15s %15s %15s %15s"," ",loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[11],loc_legend[12],loc_legend[13]);
  next_line(1);

  print_line('-',REP_WIDTH);
  next_line(1);

  lctr += 3;

}

print_param()
{
  print_page_title();

 // fprintf(fp,"VER 4.1\n");
 
  fprintf(fp,"\n\n\n\n");
  fprintf(fp,"        ");
  fprintf(fp,"INPUT PARAMETERS :\n");
  fprintf(fp,"        ");
  fprintf(fp,"------------------\n\n");

  fprintf(fp,"                FACILITY		        : %s\n\n",nd_facility_id.arr);

  if (nd_episode_type == 'O')
  fprintf(fp,"                EPISODE TYPE			: OUTPATIENT\n\n");

  if (nd_episode_type == 'E')
  fprintf(fp,"                EPISODE TYPE			: EMERGENCY\n\n");

  if (nd_episode_type == 'V')
  fprintf(fp,"                EPISODE TYPE			: OUTPATIENT AND EMERGENCY\n\n");

  if (nd_episode_type == 'I')
  fprintf(fp,"                EPISODE TYPE			: INPATIENT\n\n");

  if (nd_episode_type == 'D')
  fprintf(fp,"                EPISODE TYPE			: DAYCARE\n\n");

  if (nd_episode_type == 'A')
  fprintf(fp,"                EPISODE TYPE			: INPATIENT AND DAYCARE\n\n");

/*
  if (nd_period_type == 'M')
  fprintf(fp,"                PERIOD TYPE			: MONTHLY\n\n");
  else
  fprintf(fp,"                PERIOD TYPE			: YEARLY\n\n");*/

  fprintf(fp,"                PERIOD				: %s\n\n",nd_period.arr);

  if (nd_blng_info_for == 'P')
  fprintf(fp,"                BLNG INFO FOR			: ATTENDANCE OR ADMISSION PERIOD\n\n");
  else
  fprintf(fp,"                BLNG INFO FOR			: ALL\n\n");

  if (nd_category == 'C')
  fprintf(fp,"                CATEGORY			: CITIZEN\n\n");
  if (nd_category == 'N')
  fprintf(fp,"                CATEGORY			: NON-CITIZEN\n\n");
  if (nd_category == 'B')
  fprintf(fp,"                CATEGORY			: BOTH\n\n");

  if (nd_print_ded_yn == 'Y')
  fprintf(fp,"                PRINT DEDUCTION			: YES\n\n");
  else
  fprintf(fp,"                PRINT DEDUCTION			: NO\n\n");

  next_page();
}


check_line(skip) /* will check for MAX LINE before printing totals */
int skip;
{
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
}

next_line(skip) /* will check for MAX LINE before printing totals */		
int skip;
{
	if ((lctr + skip) > MAX_LINES)
	{
		next_page(); 
	}
	else
	{
		fprintf(fp,"\n"); ++lctr; 
	}
}

next_page() /* will move the cursor to next page */
{
  
	fprintf(fp,"\n");
	fprintf(fp,"\f");
	fprintf(fp,"\n");
	lctr=1;
	 
	print_page_title();
	print_column_title();  	
}

print_line(ch,n) /* this is to obtain required characters */
  char ch;
  int n;
{
	int i;
	for(i=0;i<n;i++)
	fprintf(fp,"%c",ch);  
}

horz_skip(num) /* this is to obtain required blank space */
int num;
{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
}

print_end()
{
  fprintf(fp,"\n\n");
  fprintf(fp,"%106s **   END  OF  REPORT   **"," ");
  //next_line(1);
  fflush(fp);
  fclose(fp);
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s  ",str_amt);
    }
}  

fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00083.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}

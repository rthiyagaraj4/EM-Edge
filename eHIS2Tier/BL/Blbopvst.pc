/************************************************************************/
/* OCS MEDICOM VER 1.10                                                 */
/************************************************************************/
/* PROGRAM NAME          : BLBOPVST.PC                                  */
/* AUTHOR                : M.NITIN KUMAR                                */
/* Converted To Windows  : Prasad B G S */
/* DATE WRITTEN          : 01-AUG-1993                                  */
/*                                                                      */  
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             : TO GENERATE DISCHARGE BILL                   */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.      SY_ACC_ENTITY_DOC_TYPE     QUERY/UPDATE              */
/*         2.      BL_EPISODE_FIN_DTLS        QUERY/UPDATE              */
/*         5.      BL_BLNG_GRP                QUERY                     */
/*         6.      BL_PATIENT_FOLIO_CHARGES   QUERY/UPDATE              */
/*         7.      BL_PATIENT_FIN_DTLS        UPDATE                    */
/*         8.      BL_OUTST_SERVICE_LINE      UPDATE                    */
/*         9.      BL_OUTST_HDR               UPDATE                    */
/*         10.     BL_OUTST_LINE              UPDATE                    */
/*                                                                      */
/*  PARAMETERS           :   PARAM1   -    EPISODE_ID                   */
/*                           PARAM2   -    DOC_TYPE_CODE                */
/*                           PARAM3   -    DOC_DATE                     */
/*                           PARAM4   -    PRINT Y/N                    */
/*                                                                      */
/************************************************************************/
   
#include <stdio.h>
#include <string.h>
#include "bl.h" 

#define RESOURCE_BUSY (sqlca.sqlcode == -54)

/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd      [132],
           nd_pgm_date  [35];

   VARCHAR nd_session_id                [16],
	   nd_episode_id                [9],
	   nd_visit_id                  [5],
	   nd_operating_facility_id     [3];


VARCHAR     d_patient_id                 [21],
			d_blng_grp_id                [3],
			d_admission_date             [11],
			d_discharge_date             [11],
			d_prt_grp_hdr_code           [3],
            d_prt_grp_line_code          [3],
            d_package_ind                [2],
            d_package_service_code       [11],
            d_blng_serv_code             [11],
            d_charge_type_code           [2],
            d_df_physician_id            [16],
			d_old_prt_grp_hdr_code       [3],
            d_old_prt_grp_line_code      [3],
            d_old_package_ind            [2],
            d_old_package_service_code   [11],
            d_old_blng_serv_code         [11],
            d_old_charge_type_code       [2],
            d_old_df_physician_id        [16],
			d_bill_doc_type_code         [7],
			d_cust_code                  [9],
			d_bill_type_code             [3],
			d_ins_cust_code              [9],
			d_epi_bill_doc_type_code     [7],
			d_epi_bill_doc_date          [10],
			d_clinic_code                [5],
			d_physician_id               [16];


char		nd_dummy,
			nd_print_yn,
			nd_bill_nat_code,
			d_bill_nat_code,
			d_settlement_ind,
			d_doc_num_gen_flag,
			d_bl_valid_flag,
			d_status,
			d_df_service_ind,
			d_cons_invoice_ind,
			d_drfee_rec_upd_flag,
			d_take_home_med,
			d_discharge_med,
            d_discharge_bill_gen_ind;

long       d_next_doc_no,
		   d_epi_bill_doc_number;

double      d_tot_unadj_dep_amt,
            d_tot_unadj_prep_amt,
            d_fin_unadj_dep_amt,
            d_fin_unadj_prep_amt,
            d_tot_paid_amt,
            d_tot_bus_man_disc_amt,
            d_upd_gross_charge_amt,
            d_upd_disc_amt,
            d_upd_net_charge_amt,
			srvlin_gross_amt,
			srvlin_disc_amt,
			srvlin_net_amt,
			billin_gross_amt,
			billin_disc_amt,
			billin_net_amt,
			biltot_gross_amt,
			biltot_disc_amt,
			biltot_net_amt,
			biltot_drfee_amt,
			biltot_hosp_amt,
			pkg_serv_gross_amt,
			pkg_serv_disc_amt,
			pkg_serv_net_amt,
			d_bill_amt,
            d_tot_billed_amt,
            d_tot_outst_amt,
            d_tot_unbld_amt,
            d_tot_unbld_cash_sett_amt,
			d_final_bill_amt,
			d_reduction_amt,
			d_hosp_outst_amt,
			d_drfee_outst_amt,
			d_drfee_receipt_amt,
			diff_amt,
			boun_clr_paid_amt;

long		d_serv_line_num,
			d_pkg_line_num,
			d_bill_line_num;

double		t_bill_amt,
			t_bill_paid_amt,
			t_prepay_adj_amt,
			t_man_disc_amt,
			t_overall_disc_amt,
			t_refund_amt;

VARCHAR		t_doc_type_code    [7];
long		t_doc_num;

EXEC SQL END DECLARE SECTION;
/*
EXEC ORACLE OPTION(HOLD_CURSOR = YES);
EXEC ORACLE OPTION(REBIND = NO);
*/
EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

int g_first;

void proc_main(argc,argv)
char *argv[];
int argc;
{
   if (argc < 6)
   {
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);


   strcpy(g_pgm_id,"BLBOPVST");

   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle");
      if (uid_pwd.len == 0)
         disp_message(ERR_MESG,"Null oracle uid/pwd");
      proc_exit();
   }

   set_meduser_role();

   g_pgm_date[0] = '\0';

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   strcpy(nd_episode_id.arr, argv[5]);
   nd_episode_id.len = strlen(nd_episode_id.arr);

   strcpy(nd_visit_id.arr, argv[6]);
   nd_visit_id.len = strlen(nd_visit_id.arr);

   strcpy(nd_operating_facility_id.arr, argv[4]);
   nd_operating_facility_id.len = strlen(nd_operating_facility_id.arr);

   start_prog_msg();

   decl_curs();

   gen_discharge_bill();

   close_curs();

   end_prog_msg();

   strcpy(g_facility_id, nd_operating_facility_id.arr);

   EXEC SQL COMMIT WORK RELEASE;
   return;
}

decl_curs()
{

    EXEC SQL DECLARE BL_VISIT_CUR CURSOR FOR
	     SELECT  PATIENT_ID,
		     BLNG_GRP_ID,
             SETTLEMENT_IND,
             TOT_DEP_PAID_AMT,
             TOT_PREP_PAID_AMT,
             (TOT_BILLED_AMT  - TOT_OUTST_AMT),
		     CUST_CODE,
		     TOT_BILLED_AMT,
		     TOT_OUTST_AMT,
		     TOT_UNBLD_AMT,
		     TOT_UNBLD_CASH_SETT_AMT ,
             'N',              /*NVL(DISCHARGE_BILL_GEN_IND,'N')*/
             NVL(TOT_BUS_MAN_DISC_AMT,0),
		     BILL_DOC_TYPE_CODE,
		     BILL_DOC_NUMBER,
		     BILL_DOC_DATE,
		     0,                /*NVL(AFT_DISCH_PMNT_BOUN_CLR,0)*/
		     CLINIC_CODE,
		     PHYSICIAN_ID,
		     BILL_TYPE_CODE
	     FROM    BL_VISIT_FIN_DTLS
	     WHERE   OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND     EPISODE_TYPE = 'O'
	     AND     EPISODE_ID   = :nd_episode_id
	     AND     VISIT_ID     = :nd_visit_id;

    EXEC SQL DECLARE BL_PAT_CHRGS_FOLIO_CUR CURSOR FOR
	     SELECT PRT_GRP_HDR_CODE,
                    PRT_GRP_LINE_CODE,
                    PACKAGE_IND,
                    PACKAGE_SERVICE_CODE,
                    BLNG_SERV_CODE,
                    UPD_GROSS_CHARGE_AMT,
                    UPD_DISC_AMT,
                    UPD_NET_CHARGE_AMT,
					DF_SERVICE_IND,
					BILL_DOC_TYPE_CODE,
					CHARGE_TYPE_CODE,
					DF_PHYSICIAN_ID  
	     FROM   BL_PATIENT_CHARGES_FOLIO
	     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND    EPISODE_TYPE = 'O'
	     AND    EPISODE_ID   = :nd_episode_id
	     AND    VISIT_ID     = :nd_visit_id
	     AND    PATIENT_ID   = :d_patient_id
	     AND    TRX_FINALIZE_IND = 'Y'  
	     AND    (NVL(PACKAGE_IND,'X') = 'S' OR
		    (NVL(PACKAGE_IND,'X') = 'P' AND 
		     NVL(PACKAGE_TRX_IND,'X') <> 'Y'))
	     AND    NVL(SETTLEMENT_IND,'A') = DECODE(:nd_bill_nat_code,
		       'C','C','A','A',NVL(SETTLEMENT_IND,'A'))
/*
	     AND    NVL(BILL_DOC_TYPE_CODE,'!!!!!!') = 
		     DECODE(:d_discharge_bill_gen_ind,'Y','!!!!!!',
			    NVL(BILL_DOC_TYPE_CODE,'!!!!!!'))
*/
	     ORDER BY CHARGE_TYPE_CODE,PRT_GRP_HDR_CODE, 
		      DF_PHYSICIAN_ID,PRT_GRP_LINE_CODE,
                      PACKAGE_IND, PACKAGE_SERVICE_CODE,
                      BLNG_SERV_CODE;

}

gen_discharge_bill()
{

   if(fetch_bl_visit()) {

       delete_recs();

       d_final_bill_amt = 0;
       d_next_doc_no    = 0;

       if(d_settlement_ind EQ  'C') {
           d_ins_cust_code.arr[0] = '\0';
           d_ins_cust_code.len = strlen(d_ins_cust_code.arr);
	   nd_bill_nat_code = 'B'; /* process both C and NULL types */
	   d_bill_nat_code = 'C';
	   process_recs();  
       }
       else {
	   /*
	   nd_bill_nat_code = 'C';
	   d_bill_nat_code = 'C';
           d_ins_cust_code.arr[0] = '\0';
           d_ins_cust_code.len = strlen(d_ins_cust_code.arr);
	   process_recs(); 
	   */
	   nd_bill_nat_code = 'B'; /* process both C and NULL types */
	   d_bill_nat_code = 'A';
	   d_next_doc_no = 1;
           strcpy(d_ins_cust_code.arr,d_cust_code.arr);
           d_ins_cust_code.len = strlen(d_ins_cust_code.arr);
	   process_recs();
      }

   }
   else
       disp_message(ERR_MESG,"No record selected from bl_visit_fin_dtls");

}


process_recs()
{

    int ctr = 0;
    d_next_doc_no ++;

    EXEC SQL OPEN BL_PAT_CHRGS_FOLIO_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor BL_PAT_CHRGS_FOILO_CUR",0,"");

    d_old_prt_grp_hdr_code.arr[0]      = '\0';
    d_old_prt_grp_line_code.arr[0]     = '\0';
    d_old_package_ind.arr[0]           = '\0';
    d_old_package_service_code.arr[0]  = '\0';
    d_old_blng_serv_code.arr[0]        = '\0';
    d_old_charge_type_code.arr[0]      = '\0';
    d_old_df_physician_id.arr[0]       = '\0';

    g_first = 1;

    srvlin_gross_amt   = 0;
    srvlin_disc_amt    = 0;
    srvlin_net_amt     = 0;

    pkg_serv_gross_amt = 0;
    pkg_serv_disc_amt  = 0;
    pkg_serv_net_amt   = 0;

    billin_gross_amt   = 0;
    billin_disc_amt    = 0;
    billin_net_amt     = 0;

    biltot_gross_amt  = 0;
    biltot_disc_amt   = 0;
    biltot_net_amt    = 0;

    biltot_drfee_amt  = 0;
    biltot_hosp_amt   = 0;

    d_serv_line_num   = 0;
    d_pkg_line_num    = 0;
    d_bill_line_num   = 0;

    while (fetch_pat_chrgs()) {
	
	if(prt_grp_change()) {
	    insrt_service_dtls();
	    insrt_bill_line();
	}
	else if(pkg_serv_change()) 
	    insrt_service_dtls();
	else if(blng_serv_change())
	    insrt_bill_pkg();

	srvlin_gross_amt += d_upd_gross_charge_amt;
	srvlin_disc_amt  += d_upd_disc_amt;
	srvlin_net_amt   += d_upd_net_charge_amt;

	pkg_serv_gross_amt += d_upd_gross_charge_amt;
	pkg_serv_disc_amt  += d_upd_disc_amt;
	pkg_serv_net_amt   += d_upd_net_charge_amt;

	billin_gross_amt += d_upd_gross_charge_amt;
	billin_disc_amt  += d_upd_disc_amt;
	billin_net_amt   += d_upd_net_charge_amt;

	biltot_gross_amt += d_upd_gross_charge_amt;
	biltot_disc_amt  += d_upd_disc_amt;
	biltot_net_amt   += d_upd_net_charge_amt;

	if(d_df_service_ind EQ 'D' || d_df_service_ind EQ 'R')
	    biltot_drfee_amt  +=  d_upd_gross_charge_amt;
	else
	    biltot_hosp_amt   +=  d_upd_gross_charge_amt;

	copy_val();

	ctr = 1;

    }

    if(ctr) {
        insrt_service_dtls();
        insrt_bill_line();
    }

    d_cons_invoice_ind = 'N';

    if(d_bill_nat_code != 'C') {

	EXEC SQL SELECT CONS_INVOICE_IND
		 INTO   :d_cons_invoice_ind
		 FROM   BL_BLNG_GRP
		 WHERE  BLNG_GRP_ID = :d_blng_grp_id;
	
        if(OERROR)
	    err_mesg("SELECT failed on table BL_BLNG_GRP",0,"");

    }

    insrt_bill_hdr();

    d_tot_unadj_dep_amt            = 0;
    d_tot_unadj_prep_amt           = 0;
    d_tot_paid_amt                 = 0;

}


fetch_bl_visit()
{

    d_patient_id.arr[0]      = '\0';
    d_blng_grp_id.arr[0]     = '\0';
    d_cust_code.arr[0]       = '\0';
    d_ins_cust_code.arr[0]   = '\0';
    d_settlement_ind         = '\0';
    d_epi_bill_doc_type_code.arr[0]  = '\0';
    d_epi_bill_doc_date.arr[0]       = '\0';
    d_clinic_code.arr[0]             = '\0';
    d_physician_id.arr[0]            = '\0';
    d_bill_type_code.arr[0]          = '\0';

    d_discharge_bill_gen_ind = '\0';

    d_patient_id.len         = 0;
    d_blng_grp_id.len        = 0;
    d_cust_code.len          = 0;
    d_ins_cust_code.len      = 0;
    d_epi_bill_doc_type_code.len = 0;
    d_epi_bill_doc_date.len      = 0;
    d_clinic_code.len            = 0;
    d_physician_id.len           = 0;
    d_bill_type_code.len         = 0;

    d_tot_unadj_dep_amt            = 0;
    d_tot_unadj_prep_amt           = 0;
    d_fin_unadj_dep_amt            = 0;
    d_fin_unadj_prep_amt           = 0;
    d_tot_paid_amt                 = 0;
    d_tot_billed_amt               = 0;
    d_tot_outst_amt                = 0;
    d_tot_unbld_amt                = 0;
    d_tot_unbld_cash_sett_amt      = 0;
    d_tot_bus_man_disc_amt         = 0;
    d_epi_bill_doc_number          = 0;
    boun_clr_paid_amt              = 0;

    EXEC SQL OPEN BL_VISIT_CUR;

    if(OERROR)
	err_mesg("OPEN failed on cursor BL_VISIT_CUR",0,"");

    EXEC SQL FETCH BL_VISIT_CUR INTO
                   :d_patient_id,
                   :d_blng_grp_id,
                   :d_settlement_ind,
                   :d_tot_unadj_dep_amt,
                   :d_tot_unadj_prep_amt,
                   :d_tot_paid_amt,
				   :d_cust_code,
                   :d_tot_billed_amt,
                   :d_tot_outst_amt,
                   :d_tot_unbld_amt,
                   :d_tot_unbld_cash_sett_amt,
                   :d_discharge_bill_gen_ind,
                   :d_tot_bus_man_disc_amt,
                   :d_epi_bill_doc_type_code,
                   :d_epi_bill_doc_number,
                   :d_epi_bill_doc_date,
				   :boun_clr_paid_amt,
                   :d_clinic_code,
                   :d_physician_id,
                   :d_bill_type_code;

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_VISIT_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    d_patient_id.arr[d_patient_id.len]    = '\0';
    d_blng_grp_id.arr[d_blng_grp_id.len]        = '\0';
    d_cust_code.arr[d_cust_code.len]      = '\0';
    d_epi_bill_doc_type_code.arr[d_epi_bill_doc_type_code.len]  = '\0';
    d_epi_bill_doc_date.arr[d_epi_bill_doc_date.len]            = '\0';
    d_clinic_code.arr[d_clinic_code.len]                        = '\0';
    d_physician_id.arr[d_physician_id.len]                      = '\0';
    d_bill_type_code.arr[d_bill_type_code.len]                  = '\0';

    d_fin_unadj_dep_amt = d_tot_unadj_dep_amt ;
    d_fin_unadj_prep_amt = d_tot_unadj_prep_amt;

    if(d_epi_bill_doc_type_code.arr[0])
	   get_prv_amts();

    return 1;
}

fetch_pat_chrgs()
{
    d_prt_grp_hdr_code.arr[0]        = '\0';
    d_prt_grp_line_code.arr[0]       = '\0';
    d_package_ind.arr[0]             = '\0';
    d_package_service_code.arr[0]    = '\0';
    d_blng_serv_code.arr[0]          = '\0';
    d_bill_doc_type_code.arr[0]      = '\0';
    d_charge_type_code.arr[0]        = '\0';
    d_df_physician_id.arr[0]         = '\0';

    d_prt_grp_hdr_code.len        = 0;
    d_prt_grp_line_code.len       = 0;
    d_package_ind.len             = 0;
    d_package_service_code.len    = 0;
    d_blng_serv_code.len          = 0;
    d_bill_doc_type_code.len      = 0;
    d_charge_type_code.len        = 0;
    d_df_physician_id.len         = 0;

    d_df_service_ind  = '\0';

    d_upd_gross_charge_amt   = 0;
    d_upd_disc_amt           = 0;
    d_upd_net_charge_amt     = 0;

    EXEC SQL FETCH BL_PAT_CHRGS_FOLIO_CUR 
				INTO
					:d_prt_grp_hdr_code,
                    :d_prt_grp_line_code,
                    :d_package_ind,
                    :d_package_service_code,
                    :d_blng_serv_code,
                    :d_upd_gross_charge_amt,
                    :d_upd_disc_amt,
                    :d_upd_net_charge_amt,
					:d_df_service_ind,
					:d_bill_doc_type_code,
					:d_charge_type_code,
					:d_df_physician_id;

    if(OERROR)
	err_mesg("FETCH failed on cursor BL_PAT_CHRGS_FOILO_CUR",0,"");

    if(NO_DATA_FOUND)
	return 0;

    d_prt_grp_hdr_code.arr[d_prt_grp_hdr_code.len]         = '\0';
    d_prt_grp_line_code.arr[d_prt_grp_line_code.len]       = '\0';
    d_package_ind.arr[d_package_ind.len]                 = '\0';
    d_package_service_code.arr[d_package_service_code.len] = '\0';
    d_blng_serv_code.arr[d_blng_serv_code.len]             = '\0';
    d_bill_doc_type_code.arr[d_bill_doc_type_code.len]     = '\0';
    d_charge_type_code.arr[d_charge_type_code.len]         = '\0';
    d_df_physician_id.arr[d_df_physician_id.len]           = '\0';

    if(g_first) {

        copy_val();

	g_first = 0;
    }
    return 1;
}

copy_val()
{
    strcpy(d_old_prt_grp_hdr_code.arr,d_prt_grp_hdr_code.arr);
    strcpy(d_old_prt_grp_line_code.arr,d_prt_grp_line_code.arr);
    strcpy(d_old_package_ind.arr,d_package_ind.arr);
    strcpy(d_old_package_service_code.arr,d_package_service_code.arr);
    strcpy(d_old_blng_serv_code.arr,d_blng_serv_code.arr);
    strcpy(d_old_charge_type_code.arr,d_charge_type_code.arr);
    strcpy(d_old_df_physician_id.arr,d_df_physician_id.arr);

    d_old_prt_grp_hdr_code.len     = strlen(d_old_prt_grp_hdr_code.arr);
    d_old_prt_grp_line_code.len    = strlen(d_old_prt_grp_line_code.arr);
    d_old_package_ind.len          = strlen(d_old_package_ind.arr);
    d_old_package_service_code.len = strlen(d_old_package_service_code.arr);
    d_old_blng_serv_code.len       = strlen(d_old_blng_serv_code.arr);
    d_old_charge_type_code.len     = strlen(d_old_charge_type_code.arr);
    d_old_df_physician_id.len      = strlen(d_old_df_physician_id.arr);
}

change()
{
    if(!strcmp(d_old_prt_grp_hdr_code.arr,d_prt_grp_hdr_code.arr) &&
       !strcmp(d_old_prt_grp_line_code.arr,d_prt_grp_line_code.arr) &&
       !strcmp(d_old_package_ind.arr,d_package_ind.arr) &&
       !strcmp(d_old_package_service_code.arr,d_package_service_code.arr) &&
       !strcmp(d_old_blng_serv_code.arr,d_blng_serv_code.arr))

	   return 0;
    else
	   return 1;
}

prt_grp_change()
{

    if(!strcmp(d_old_prt_grp_hdr_code.arr,d_prt_grp_hdr_code.arr)     &&
       !strcmp(d_old_prt_grp_line_code.arr,d_prt_grp_line_code.arr)   &&
       !strcmp(d_old_charge_type_code.arr,d_charge_type_code.arr)     &&
       !strcmp(d_old_df_physician_id.arr,d_df_physician_id.arr))

	   return 0;
    else
	   return 1;

}

pkg_serv_change()
{
    if(!strcmp(d_old_package_ind.arr,d_package_ind.arr) &&
       !strcmp(d_old_package_service_code.arr,d_package_service_code.arr))

	   return 0;
    else
	   return 1;
}

blng_serv_change()
{
    if(!strcmp(d_old_blng_serv_code.arr,d_blng_serv_code.arr))

	   return 0;
    else
	   return 1;
}


insrt_service_dtls()
{
    d_serv_line_num ++;
    
    EXEC SQL INSERT INTO BL_OUTST_SERV_LINE 
                       (  OPERATING_FACILITY_ID,
						  EPISODE_TYPE,
                          PATIENT_ID,
                          EPISODE_ID,
                          VISIT_ID,
                          OUTST_TMP_NUM,
                          PRT_GRP_HDR_CODE,
                          PRT_GRP_LINE_CODE,
                          PACKAGE_IND,
                          PACKAGE_SERVICE_CODE,
                          GROSS_AMT,
                          SERV_DISC_AMT,
                          NET_AMT,
                          ADDED_BY_ID,
                          ADDED_DATE,
                          MODIFIED_BY_ID,
                          MODIFIED_DATE,
						  LINE_NUM,
						  CHARGE_TYPE_CODE,
						  DF_PHYSICIAN_ID, 
						  AMT_SIGN_IND,
						  ADDED_AT_WS_NO,
						  ADDED_FACILITY_ID,
						  MODIFIED_AT_WS_NO,
						  MODIFIED_FACILITY_ID
                       )
               VALUES  ( 
						 :nd_operating_facility_id,
						 'O',
						 :d_patient_id,
						 :nd_episode_id,
						 :nd_visit_id,
						 :d_next_doc_no,
                         :d_old_prt_grp_hdr_code,
                         :d_old_prt_grp_line_code,
                         :d_old_package_ind,
                         :d_old_package_service_code,
                         :srvlin_gross_amt,
                         :srvlin_disc_amt,
                         :srvlin_net_amt,
                         USER,
                         SYSDATE,
                         user,
                         sysdate,
						 :d_serv_line_num,
						 :d_old_charge_type_code,
						 :d_old_df_physician_id,
						 0,
						'DFLT',
						:nd_operating_facility_id,
						'DFLT',
						:nd_operating_facility_id
                      );

    if(OERROR)
         err_mesg("INSERT failed on table BL_OUTST_SERV_LINE",0,"");

		srvlin_gross_amt       = 0;
		srvlin_disc_amt        = 0;
		srvlin_net_amt         = 0;

    if(d_old_package_ind.arr[0] EQ 'P')
	insrt_bill_pkg();
    else {

        pkg_serv_gross_amt       = 0;
        pkg_serv_disc_amt        = 0;
        pkg_serv_net_amt         = 0;

    }
    
}

insrt_bill_pkg()
{
		d_pkg_line_num ++;

        EXEC SQL INSERT INTO BL_OUTST_PKG_SERV_LINE 
                          (  OPERATING_FACILITY_ID,
							 EPISODE_TYPE,
                             PATIENT_ID,
                             EPISODE_ID,
                             VISIT_ID,
                             OUTST_TMP_NUM,
							 PRT_GRP_HDR_CODE,
							 PRT_GRP_LINE_CODE,
							 PACKAGE_IND,
							 PACKAGE_SERVICE_CODE,
							 BLNG_SERV_CODE,
							 GROSS_AMT,
							 SERV_DISC_AMT,
							 NET_AMT,
							 ADDED_BY_ID,
							 ADDED_DATE,
							 MODIFIED_BY_ID,
							 MODIFIED_DATE,
							 LINE_NUM,
							 CHARGE_TYPE_CODE,
							 DF_PHYSICIAN_ID, 
							 AMT_SIGN_IND,
							 ADDED_AT_WS_NO,
							 ADDED_FACILITY_ID,
							 MODIFIED_AT_WS_NO,
							 MODIFIED_FACILITY_ID
		         )
               VALUES    (   
			     :nd_operating_facility_id,
				 'O',
			     :d_patient_id,
			     :nd_episode_id,
			     :nd_visit_id,
			     :d_next_doc_no,
			     :d_old_prt_grp_hdr_code,
			     :d_old_prt_grp_line_code,
			     :d_old_package_ind,
			     :d_old_package_service_code,
			     :d_old_blng_serv_code,
			     :pkg_serv_gross_amt,
			     :pkg_serv_disc_amt,
			     :pkg_serv_net_amt,
			     USER,
			     SYSDATE,
			     user,
			     sysdate,
			     :d_pkg_line_num,
			     :d_old_charge_type_code,
			     :d_old_df_physician_id,
			     0,
				 'DFLT',
				:nd_operating_facility_id,
				'DFLT',
				:nd_operating_facility_id
			 );
    
        if(OERROR)
	    err_mesg("INSERT failed on table BL_OUTST_PKG_SERVICE_LINE",0,"");

        pkg_serv_gross_amt       = 0;
        pkg_serv_disc_amt        = 0;
        pkg_serv_net_amt         = 0;
    
}

insrt_bill_line()
{

    d_bill_line_num ++;

    EXEC SQL INSERT INTO BL_OUTST_LINE
                      (  OPERATING_FACILITY_ID,
						 EPISODE_TYPE,
                         PATIENT_ID,
                         EPISODE_ID,
                         VISIT_ID,
                         OUTST_TMP_NUM,
						 PRT_GRP_HDR_CODE,
						 PRT_GRP_LINE_CODE,
						 GROSS_AMT,
						 SERV_DISC_AMT,
						 NET_AMT,
						 MAN_DISC_PERC,
						 MAN_DISC_AMT,
						 MAN_DISC_ACC_INT_CODE,
						 ADDED_BY_ID,
						 ADDED_DATE,
						 MODIFIED_BY_ID,
						 MODIFIED_DATE,
						 LINE_NUM,
						 CHARGE_TYPE_CODE,
						 DF_PHYSICIAN_ID, 
						 AMT_SIGN_IND,
						 ADDED_AT_WS_NO,
						 ADDED_FACILITY_ID,
						 MODIFIED_AT_WS_NO,
						 MODIFIED_FACILITY_ID

		     )
             VALUES  (  :nd_operating_facility_id, 
						'O',
						:d_patient_id,
						:nd_episode_id,
						:nd_visit_id,
						:d_next_doc_no,
						:d_old_prt_grp_hdr_code,
						:d_old_prt_grp_line_code,
						:billin_gross_amt,
						:billin_disc_amt,
						:billin_net_amt,
						0	,
						0,
						NULL,
						USER,
						SYSDATE,
						USER,
						SYSDATE,
						:d_bill_line_num,
						:d_old_charge_type_code,
						:d_old_df_physician_id,
						0,
						'DFLT',
						:nd_operating_facility_id,
						'DFLT',
						:nd_operating_facility_id
		     );

    if(OERROR)
	err_mesg("INSERT failed on table BL_OUTST_LINE",0,"");

    billin_gross_amt  = 0;
    billin_disc_amt   = 0;
    billin_net_amt   = 0;

}
       
insrt_bill_hdr()
{

   /*
   d_reduction_amt = biltot_disc_amt + d_tot_unadj_prep_amt+
                     d_tot_unadj_dep_amt + d_tot_paid_amt;
   */

   d_reduction_amt = biltot_disc_amt + d_tot_unadj_prep_amt+
                     d_tot_unadj_dep_amt + d_tot_paid_amt +
		     t_man_disc_amt + t_overall_disc_amt - t_refund_amt;

   d_bill_amt = biltot_gross_amt - d_reduction_amt;

   d_final_bill_amt += d_bill_amt;

   diff_amt             = 0;
   d_drfee_rec_upd_flag = '\0';
   d_drfee_receipt_amt  = 0;

   if((biltot_hosp_amt - d_reduction_amt) <= 0 ) {
       d_hosp_outst_amt = 0;
       diff_amt = d_reduction_amt - biltot_hosp_amt;
    }
    else
	d_hosp_outst_amt = biltot_hosp_amt - d_reduction_amt;

    if(diff_amt) {
	if((biltot_drfee_amt - diff_amt) <= 0) {
	    d_drfee_outst_amt = 0;
	    d_drfee_receipt_amt = biltot_drfee_amt;
	}
	else {
	    d_drfee_outst_amt = biltot_drfee_amt - diff_amt;
	    d_drfee_receipt_amt = diff_amt;
	}
       d_drfee_rec_upd_flag='Y';
    }
    else
	d_drfee_outst_amt = biltot_drfee_amt;

    EXEC SQL INSERT INTO BL_OUTST_HDR
                      (  OPERATING_FACILITY_ID,
						 OUTST_TMP_NUM,
                         DOC_DATE,
                         GROSS_AMT,
                         SERV_DISC_AMT,
                         MAN_DISC_AMT,
                         OVERALL_DISC_PERC,
                         OVERALL_DISC_AMT,
                         PREPAY_ADJ_AMT,
                         DEPOSIT_ADJ_AMT,
                         TOT_PAID_AMT,
                         BILL_AMT,
                         BILL_HOSP_AMT,
                         BILL_DRFEE_AMT,
                         BILL_TOT_AMT,
                         BILL_HOSP_TOT_AMT,
                         BILL_DRFEE_TOT_AMT,
                         BILL_TOT_OUTST_AMT,
                         BILL_HOSP_TOT_OUTST_AMT,
                         BILL_DRFEE_TOT_OUTST_AMT,
                         BILL_PAID_AMT,
                         EPISODE_TYPE,
                         PATIENT_ID,
                         EPISODE_ID,
                         VISIT_ID,
                         ADMISSION_DATE,
                         PHYSICIAN_ID,
						 CLINIC_CODE,
                         CUST_CODE,
                         BLNG_GRP_ID,
                         BILL_TYPE_CODE,
                         CONS_INVOICE_IND,
						 BILL_PRV_DOC_TYPE_CODE,
						 BILL_PRV_DOC_NUMBER,
						 BILL_PRV_DOC_DATE,
						 TOT_REFUND_AMT,
						 ADDED_BY_ID,
						 ADDED_DATE,
						 MODIFIED_BY_ID,
						 MODIFIED_DATE,
						 ADDED_AT_WS_NO,
						 ADDED_FACILITY_ID,
						 MODIFIED_AT_WS_NO,
						 MODIFIED_FACILITY_ID
		      )
	    VALUES    ( 
					:nd_operating_facility_id,
					:d_next_doc_no,
					SYSDATE,
					:biltot_gross_amt,
					:biltot_disc_amt,
                    :d_tot_bus_man_disc_amt,
					0,
                    :d_tot_bus_man_disc_amt,
                    :d_tot_unadj_prep_amt,
                    :d_tot_unadj_dep_amt,
					:d_tot_paid_amt,
					:biltot_gross_amt - :biltot_disc_amt,
					:biltot_hosp_amt,
					:biltot_drfee_amt,
					:d_bill_amt,
					:biltot_hosp_amt,
					:biltot_drfee_amt,
					:d_bill_amt,
					:d_hosp_outst_amt,
					:d_drfee_outst_amt,
					0,
					'O',
					:d_patient_id,
					:nd_episode_id,
					:nd_visit_id,
					TO_DATE(:d_admission_date,'DD/MM/YYYY'),
                    :d_physician_id,
					:d_clinic_code,
					:d_ins_cust_code,
					:d_blng_grp_id,
					:d_bill_type_code,
					:d_cons_invoice_ind,
					:d_epi_bill_doc_type_code,
					:d_epi_bill_doc_number,
					TO_DATE(:d_epi_bill_doc_date),
					:t_refund_amt,
					USER,
					SYSDATE,
					USER,
					SYSDATE,
					'DFLT',
					:nd_operating_facility_id,
					'DFLT',
					:nd_operating_facility_id
		    );

    if(OERROR)
	err_mesg("INSERT failed on table BL_OUTST_HDR",0,"");

     biltot_gross_amt  = 0;
     biltot_disc_amt   = 0;
     biltot_net_amt    = 0;
     biltot_hosp_amt   = 0;
     biltot_drfee_amt  = 0;

}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

close_curs()
{
    EXEC SQL CLOSE BL_VISIT_CUR ;
    EXEC SQL CLOSE BL_PAT_CHRGS_FOLIO_CUR ;

}

delete_recs()
{

    EXEC SQL DELETE BL_OUTST_HDR 
	     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND    EPISODE_TYPE = 'O'
	     AND    EPISODE_ID   = :nd_episode_id
	     AND    VISIT_ID     = :nd_visit_id
	     AND    PATIENT_ID   = :d_patient_id;

    if(OERROR)
	err_mesg("DELETE failed on table BL_OUTST_HDR",0,"");

    EXEC SQL DELETE BL_OUTST_LINE 
	     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND    EPISODE_TYPE = 'O'
	     AND    EPISODE_ID   = :nd_episode_id
	     AND    VISIT_ID     = :nd_visit_id
	     AND    PATIENT_ID   = :d_patient_id;

    if(OERROR)
	err_mesg("DELETE failed on table BL_OUTST_LINE",0,"");

    EXEC SQL DELETE BL_OUTST_SERV_LINE 
	     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND    EPISODE_TYPE = 'O'
	     AND    EPISODE_ID   = :nd_episode_id
	     AND    VISIT_ID     = :nd_visit_id
	     AND    PATIENT_ID   = :d_patient_id;

    if(OERROR)
	err_mesg("DELETE failed on table BL_OUTST_SERV_LINE",0,"");

    EXEC SQL DELETE BL_OUTST_PKG_SERV_LINE 
	     WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND    EPISODE_TYPE = 'O'
	     AND    EPISODE_ID   = :nd_episode_id
	     AND    VISIT_ID     = :nd_visit_id
	     AND    PATIENT_ID   = :d_patient_id;

    if(OERROR)
	err_mesg("DELETE failed on table BL_OUTST_PKG_SERV_LINE",0,"");

}

get_prv_amts()
{

    double tot_bill_amt         = 0, 
	   tot_bill_paid_amt    = 0, 
	   tot_prepay_adj_amt   = 0,
	   tot_man_disc_amt     = 0,
	   tot_overall_disc_amt = 0,
	   tot_refund_amt       = 0;

    strcpy(t_doc_type_code.arr, d_epi_bill_doc_type_code.arr);
    t_doc_type_code.len = strlen(t_doc_type_code.arr);

    t_doc_num = d_epi_bill_doc_number;

    while(t_doc_type_code.arr[0]) {

	EXEC SQL SELECT NVL(BILL_AMT,0),
			NVL(BILL_PAID_AMT,0),
			NVL(PREPAY_ADJ_AMT,0),
			NVL(MAN_DISC_AMT,0),
			NVL(OVERALL_DISC_AMT,0),
			NVL(TOT_REFUND_AMT,0),
			BILL_PRV_DOC_TYPE_CODE,
			BILL_PRV_DOC_NUMBER
		 INTO   :t_bill_amt,
			:t_bill_paid_amt,
			:t_prepay_adj_amt,
			:t_man_disc_amt,
			:t_overall_disc_amt,
			:t_refund_amt,
			:t_doc_type_code,
			:t_doc_num
		 FROM   BL_BILL_HDR
		 WHERE  OPERATING_FACILITY_ID = :nd_operating_facility_id
		 AND    DOC_TYPE_CODE = :t_doc_type_code
		 AND    DOC_NUM       = :t_doc_num;

        if(OERROR)
    	    err_mesg("SELECT failed on table BL_BILL_HDR",0,"");

        if(NO_DATA_FOUND)
	    break;

	tot_bill_amt         += t_bill_amt;
	tot_bill_paid_amt    += t_bill_paid_amt;
	tot_prepay_adj_amt   += t_prepay_adj_amt;
	tot_man_disc_amt     += t_man_disc_amt;
	tot_overall_disc_amt += t_overall_disc_amt;
	tot_refund_amt       += t_refund_amt;
    }

    t_bill_amt         = tot_bill_amt;
    t_bill_paid_amt    = tot_bill_paid_amt;
    t_prepay_adj_amt   = tot_prepay_adj_amt;
    t_man_disc_amt     = tot_man_disc_amt;
    t_overall_disc_amt = tot_overall_disc_amt;
    t_refund_amt       = tot_refund_amt;

    d_tot_paid_amt = t_bill_paid_amt;

}

/*************************************************************
Author    :  Harish A   27/02/2004
Name      :  List of Receipts between specified dates
Project   :  ML
*************************************************************/
#include <stdio.h>          
#include <string.h>      
#include <math.h>
#include <bl.h> 

#define MAX_LINES 73
#define OERROR (sqlca.sqlcode < 0) 
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 4.1\n"                               

EXEC SQL BEGIN DECLARE SECTION;

	VARCHAR uid_pwd						[42],
			nd_session_id        		[16],
			nd_pgm_date	    			[20],
			nd_facility					[10],

			//input parameters through from SY_PROG_PARAM 

			//for header routine
			d_acc_entity_name			[41],
			d_user						[21],
			d_sysdate					[17],
			date						[20],
			date_time					[20],

			//Variable used inside the program
			l_from_recpt_date			[30],
			l_to_recpt_date				[30],	
			l_report_selection			[5],
			l_translated_value			[202],
			l_pk_value					[100],
			p_language_id				[3],
			l_receipt_no				[18],
			l_credit_card_yn			[2],
			l_doc_date					[30],
			l_slmt_desc					[101],
			l_patient_id				[50],
			l_episode_id				[20],
			l_patient_name				[50],
			l_added_by_id				[50],
			l_ext_acct_code				[20],
			l_from_and_to_date			[100];
	
	int		i, 
			l_serial_no = 0;

	double	l_doc_amt=0,
			l_total_doc_amt=0;

	char	loc_legend[999][201];
	char	l_serial_no_char[10];

	char	filename[10];
	char    aMesg[300];
	char	l_sql_stmt[3000];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

FILE *f1;

int  line_no=0, 
	 page_no=0;

void proc_main(argc, argv)
int argc;
char *argv[];
{
	void	get_params(),
  			get_header_dtls(),
  			do_report();
    
 
	if(argc < 5) 
	{
		disp_message(ERR_MESG,"Usage BLR00012 uid/passwd session_id pgm_date facility_id");
		proc_exit();
	}

    strcpy(uid_pwd.arr,argv[1]);
    uid_pwd.len = strlen(uid_pwd.arr);

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,argv[2]);
    
    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);

    strcpy(nd_facility.arr,argv[4]);
    nd_facility.len = strlen(nd_facility.arr);
	strcpy(g_facility_id, nd_facility.arr);

    strcpy(g_pgm_id,"BLR00012");
    strcpy(g_pgm_date,argv[3]);

	strcpy(filename,WORKING_DIR);
	strcat(filename,"BLR00012.lis");

	if((f1 = fopen(filename, "w")) == NULL) 
	{
		disp_message(ERR_MESG,".... Error opening output file ....");
		proc_exit();
	} 

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL CONNECT :uid_pwd;  

	set_meduser_role();
	
	strcpy(p_language_id.arr,l_language_id.arr);

	get_params();
	get_header_dtls();

	declare_cursor();
	fetch_legend_value();
	do_report();
	delete_prog_param();
	close_cursors();
	fclose(f1);
	
	EXEC SQL COMMIT WORK RELEASE;

	return;
   
	err_exit:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL ROLLBACK WORK RELEASE;
	   disp_message(ERR_MESG,"Oracle error at main() occured....");
	   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	   proc_exit();
}


// get the parameters from the SY_PROG_PARM table and
// delete the record after reading it.
void get_params()
{

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	l_from_recpt_date.arr[0]   = '\0';
	l_to_recpt_date.arr[0]     = '\0';  
	l_report_selection.arr[0]  = '\0';
	l_credit_card_yn.arr[0]    = '\0';

	EXEC SQL SELECT NVL(PARAM1,'!@#'),
			 	    NVL(PARAM2,'!@#'),
				    NVL(PARAM3,'R'),
					NVL(PARAM5,'N')
               INTO :l_from_recpt_date,
					:l_to_recpt_date,
					:l_report_selection,
					:l_credit_card_yn
			   FROM SY_PROG_PARAM
			  WHERE PGM_ID		= 'BLR00012'
		        AND	SESSION_ID	=  TO_NUMBER(:nd_session_id)
		        AND PGM_DATE	=  :nd_pgm_date;

	l_from_recpt_date.arr[l_from_recpt_date.len]	= '\0';
	l_to_recpt_date.arr[l_to_recpt_date.len]		= '\0';
	l_report_selection.arr[l_report_selection.len]  = '\0';
	l_credit_card_yn.arr[l_credit_card_yn.len]		= '\0';

    //delete the parameter record
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;

    EXEC SQL DELETE SY_PROG_PARAM
	 		  WHERE PGM_ID		= 'BLR00012'
	            AND SESSION_ID	= :nd_session_id
		        AND PGM_DATE	= :nd_pgm_date;

	return;

  err_exit:

	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	disp_message(ERR_MESG,"Oracle error at get_params() occured....");
	disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	proc_exit();
}
 


delete_prog_param()
{
   EXEC SQL DELETE SY_PROG_PARAM
			 WHERE PGM_ID		= 'BLR00012'
	           AND SESSION_ID	= :nd_session_id
		       AND PGM_DATE		= :nd_pgm_date;
   return;
}


fetch_legend_value()
{
	for(i=1;i<=50;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLR00012.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';



		EXEC SQL EXECUTE
		BEGIN
		  blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';

		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


//get the header details
void get_header_dtls()
{
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL SELECT ACC_ENTITY_NAME,
				    USER,
				    TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI'),
					TO_CHAR(SYSDATE,'DD/MM/YYYY'),
					TO_CHAR(SYSDATE,'HH24:MI:SS')
		      INTO :d_acc_entity_name,
			  	   :d_user,
				   :d_sysdate,
				   :date,
				   :date_time
              FROM SY_ACC_ENTITY
			 WHERE acc_entity_id = :nd_facility;

	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
    date.arr[date.len]							 = '\0';
    date_time.arr[date_time.len]				 = '\0';	

	return;

	err_exit:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL ROLLBACK WORK RELEASE;
	   disp_message(ERR_MESG,"Oracle error at get_header_dtls() occured....");
	   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	   proc_exit();
}
 
declare_cursor()
{

/* KGA 	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	
	strcpy(l_sql_stmt,"SELECT a.doc_type_code||'/'||a.doc_number, \
							 TO_CHAR(a.doc_date,'DD/MM/YYYY HH24:MI:SS'), \
							 c.short_desc, \
							 a.patient_id, \
							 DECODE(a.episode_id||'/'||visit_id,'/',NULL,a.episode_id||'/'||visit_id), \
							 b.short_name, \
							 a.doc_amt, \
							 a.added_by_id, \
							 a.ext_acct_code \
						FROM bl_receipt_refund_HDRdtl_VW a, \
							 mp_patient_mast b, \
							 bl_slmt_type c \
					   WHERE b.patient_id(+)		 = a.patient_id \
						 AND c.slmt_type_code		 = a.slmt_type_code \
						 AND a.operating_facility_id = :nd_facility \
						 AND a.doc_date             >= TO_DATE(:l_from_recpt_date,'DD/MM/YYYY HH24:MI:SS') \
						 AND a.doc_date             <= TO_DATE(:l_to_recpt_date,'DD/MM/YYYY HH24:MI:SS') \
						 AND recpt_refund_ind		 = 'R' \
						 AND NVL(cancelled_ind,'N') != 'Y' \
						 AND a.CASH_SLMT_FLAG != DECODE(:l_credit_card_yn,'Y','A','$') \
					   ORDER BY");
			

								  
	if(strcmp(l_report_selection.arr,"P")==0)   
		strcat(l_sql_stmt," a.patient_id");
	else if(strcmp(l_report_selection.arr,"R")==0)
		strcat(l_sql_stmt," a.doc_type_code, a.doc_number ");

	EXEC SQL PREPARE receipt_list FROM :l_sql_stmt;

	EXEC SQL DECLARE receipt_list_cur CURSOR FOR receipt_list;

	EXEC SQL OPEN receipt_list_cur USING :nd_facility, :l_from_recpt_date, :l_to_recpt_date, :l_credit_card_yn;

	return;

	err_exit:
		   EXEC SQL WHENEVER SQLERROR CONTINUE;
		   EXEC SQL ROLLBACK WORK RELEASE;
		   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
		   disp_message(ERR_MESG,"Oracle error at receipt_list_cur() occured....");
		   proc_exit();
*/

EXEC SQL DECLARE rec_list1 CURSOR FOR 
SELECT a.doc_type_code||'/'||a.doc_number||'/'||a.doc_srno, 
TO_CHAR(a.doc_date,'DD/MM/YYYY HH24:MI:SS'), 
c.short_desc, 
a.patient_id, 
DECODE(a.episode_id||'/'||visit_id,'/',NULL,nvl(a.episode_id,0)||'/'||nvl(visit_id,0)), 
b.short_name, 
a.doc_amt,
a.added_by_id, 
a.ext_acct_code 
FROM bl_receipt_refund_HDRdtl_VW a, 
mp_patient_mast b, 
bl_slmt_type c 
WHERE a.operating_facility_id = :nd_facility 
AND a.doc_date             >= TO_DATE(:l_from_recpt_date,'DD/MM/YYYY HH24:MI:SS') 
AND a.doc_date             <= TO_DATE(:l_to_recpt_date,'DD/MM/YYYY HH24:MI:SS') 
AND recpt_refund_ind		 = 'R' 
AND b.patient_id(+)		 = a.patient_id 
AND c.slmt_type_code		 = a.slmt_type_code 
//AND upper(c.language_id)     =upper(:p_language_id)
AND NVL(cancelled_ind,'N') != 'Y' 
AND a.CASH_SLMT_FLAG != DECODE(:l_credit_card_yn,'Y','A','$') 
ORDER BY a.patient_id;

if(OERROR)	   
err_mesg("DECLARE failed on cursor rec_list1",0,"");

EXEC SQL DECLARE rec_list2 CURSOR FOR 
SELECT a.doc_type_code||'/'||a.doc_number||'/'||a.doc_srno, 
TO_CHAR(a.doc_date,'DD/MM/YYYY HH24:MI:SS'), 
c.short_desc, 
a.patient_id, 
DECODE(a.episode_id||'/'||visit_id,'/',NULL,nvl(a.episode_id,0)||'/'||nvl(visit_id,0)), 
b.short_name, 
a.doc_amt, 
a.added_by_id, 
a.ext_acct_code 
FROM bl_receipt_refund_HDRdtl_VW a, 
mp_patient_mast b, 
bl_slmt_type c 
WHERE a.operating_facility_id = :nd_facility 
AND a.doc_date             >= TO_DATE(:l_from_recpt_date,'DD/MM/YYYY HH24:MI:SS') 
AND a.doc_date             <= TO_DATE(:l_to_recpt_date,'DD/MM/YYYY HH24:MI:SS') 
AND recpt_refund_ind		 = 'R' 
AND b.patient_id(+)		 = a.patient_id 
AND c.slmt_type_code		 = a.slmt_type_code 
//AND upper(c.language_id)     =upper(:p_language_id)
AND NVL(cancelled_ind,'N') != 'Y' 
AND a.CASH_SLMT_FLAG != DECODE(:l_credit_card_yn,'Y','A','$') 
ORDER BY a.doc_type_code, a.doc_number,a.doc_srno;

if(OERROR)	   
err_mesg("DECLARE failed on cursor rec_list2",0,"");

if(strcmp(l_report_selection.arr,"P")==0)   
{
  EXEC SQL OPEN rec_list1;
   if(OERROR)	   
	err_mesg("OPEN failed on cursor rec_list1",0,"");
}
else if(strcmp(l_report_selection.arr,"R")==0)
{
  EXEC SQL OPEN rec_list2;
   if(OERROR)	   
	err_mesg("OPEN failed on cursor rec_list2",0,"");
}


}

int fetch_receipt_list_cur()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	l_receipt_no.arr[0]		= '\0';
	l_doc_date.arr[0]		= '\0';
	l_slmt_desc.arr[0]		= '\0';
	l_patient_id.arr[0]		= '\0';
	l_episode_id.arr[0]		= '\0';
	l_patient_name.arr[0]	= '\0';
	l_doc_amt				= 0;
	l_added_by_id.arr[0]	= '\0';
	l_ext_acct_code.arr[0]	= '\0';


	
/* KGA 
	EXEC SQL FETCH	receipt_list_cur
	INTO 	:l_receipt_no,
	:l_doc_date,
	:l_slmt_desc,
	:l_patient_id,
	:l_episode_id,
	:l_patient_name,
	:l_doc_amt,
	:l_added_by_id,
	:l_ext_acct_code;

	if (NODATAFOUND)
		return 0;
*/

if(strcmp(l_report_selection.arr,"P")==0)   
{
EXEC SQL FETCH	rec_list1 
	INTO 	:l_receipt_no,
	:l_doc_date,
	:l_slmt_desc,
	:l_patient_id,
	:l_episode_id,
	:l_patient_name,
	:l_doc_amt,
	:l_added_by_id,
	:l_ext_acct_code;

	if (NODATAFOUND)
		return 0;

}
else if(strcmp(l_report_selection.arr,"R")==0)
{
EXEC SQL FETCH	rec_list2  
	INTO 	:l_receipt_no,
	:l_doc_date,
	:l_slmt_desc,
	:l_patient_id,
	:l_episode_id,
	:l_patient_name,
	:l_doc_amt,
	:l_added_by_id,
	:l_ext_acct_code;

	if (NODATAFOUND)
		return 0;
}



	l_receipt_no.arr[l_receipt_no.len]		= '\0';
	l_doc_date.arr[l_doc_date.len]			= '\0';
	l_slmt_desc.arr[l_slmt_desc.len]		= '\0';
	l_patient_id.arr[l_patient_id.len]		= '\0';
	l_episode_id.arr[l_episode_id.len]		= '\0';
	l_patient_name.arr[l_patient_name.len]	= '\0';
	l_added_by_id.arr[l_added_by_id.len]	= '\0';
	l_ext_acct_code.arr[l_ext_acct_code.len]= '\0';

    return 1;
	
	err_exit:
		EXEC SQL WHENEVER SQLERROR CONTINUE;
		EXEC SQL ROLLBACK WORK RELEASE;
		disp_message(ERR_MESG,"Oracle error at fetch_blng_serv_code_cur() occured....");
		sprintf(aMesg,"Error: %-100s",sqlca.sqlerrm.sqlerrmc);
		disp_message(ERR_MESG,aMesg);
		proc_exit();
}

close_cursors()
{

/*EXEC SQL CLOSE receipt_list_cur;*/
if(strcmp(l_report_selection.arr,"P")==0)   
{
EXEC SQL close rec_list1;
}
else if(strcmp(l_report_selection.arr,"R")==0)
{ 
EXEC SQL close rec_list2;
}

}

void do_report()  
{
	print_page_title();
	
	while(fetch_receipt_list_cur())		
	{
		print_rec();
		check_page_end();
	}
	print_report_total();
	end_report();
}

print_rec()
{
	++line_no;
	check_page_end();
	++l_serial_no;
	
	EXEC SQL SELECT TO_CHAR(:l_serial_no)
	           INTO :l_serial_no_char
			   FROM dual;

	fprintf(f1,"%7.7s  %-20.20s %-19.19s  %-15.15s %-20.20s  %-14.14s  %-70.70s ",l_serial_no_char,l_receipt_no.arr,l_doc_date.arr,l_slmt_desc.arr,l_patient_id.arr,l_episode_id.arr,l_patient_name.arr);
	print_formated(l_doc_amt);
	fprintf(f1," %-30.30s  %-10.10s\n",l_added_by_id.arr,l_ext_acct_code.arr);
	l_total_doc_amt = l_total_doc_amt + l_doc_amt;
}

print_report_total()
{
	line_no=line_no+3;
	check_page_end();
	fprintf(f1,"%7.7s  %-15.15s %-19.19s  %-15.15s %-20.20s  %-14.14s  %-70.70s ---------------\n"," "," "," "," "," "," "," ");
	fprintf(f1,"%7.7s  %-15.15s %-19.19s  %-15.15s %-20.20s  %-14.14s  %-70.70s "," "," "," "," "," "," "," ");
	print_formated(l_total_doc_amt);
	fprintf(f1,"\n%7.7s  %-15.15s %-19.19s  %-15.15s %-20.20s  %-14.14s  %-70.70s ---------------\n"," "," "," "," "," "," "," ");
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;

	l_report_width=230;
	l_acc_entity_length = strlen(d_acc_entity_name.arr);

	//Code for Line 1
	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	fprintf(f1,"MDL           : BL");
	l_start_point=l_start_point-18;
	print_spaces(l_start_point);
	fprintf(f1,"%s",d_acc_entity_name.arr);
	l_comp_name_end_point=l_start_point+18+l_acc_entity_length;
	l_start_point=(l_report_width-(15+strlen(date.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(f1,"%-15.15s : %s\n",loc_legend[1],date.arr);

	//Code for Line 2
	l_from_and_to_date.arr[0] = '\0';
	EXEC SQL SELECT :loc_legend[2]||' '||:l_from_recpt_date||' '||:loc_legend[17]||' '||:l_to_recpt_date
	           INTO :l_from_and_to_date
	           FROM dual;
	l_from_and_to_date.arr[l_from_and_to_date.len] = '\0';
	l_start_point=0;
	l_start_point=ceill((l_report_width/2)-((strlen(l_from_and_to_date.arr))/2));
	fprintf(f1,"OPR           : %s",d_user.arr);
	l_start_point=l_start_point-(strlen(d_user.arr)+16);
	print_spaces(l_start_point);
	fprintf(f1,"%s",l_from_and_to_date.arr);
	l_comp_name_end_point=l_start_point+(strlen(d_user.arr)+16)+strlen(l_from_and_to_date.arr);
	l_start_point=(l_report_width-(17+strlen(date_time.arr))-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(f1,"%-15.15s : %s\n",loc_legend[3],date_time.arr);

	//Code for Line 3
	l_start_point=0;
    if(strcmp(l_report_selection.arr,"P")==0)
     {
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[16]))/2));
	fprintf(f1,"%-14.14s: BLR00012",loc_legend[4]);
	l_start_point=l_start_point-24;
	print_spaces(l_start_point);
	fprintf(f1,"%s",loc_legend[16]);
	l_comp_name_end_point=l_start_point+24+strlen(loc_legend[16]);
	  }
    else
	  {
	l_start_point=ceill((l_report_width/2)-((strlen(loc_legend[18]))/2));
	fprintf(f1,"%-14.14s: BLR00012",loc_legend[4]);
	l_start_point=l_start_point-24;
	print_spaces(l_start_point);
	fprintf(f1,"%s",loc_legend[18]);
	l_comp_name_end_point=l_start_point+24+strlen(loc_legend[18]);
	  }

	l_start_point=(l_report_width-(17+8)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(f1,"%-15.15s : %d\n",loc_legend[5],++page_no);

	line_no= line_no + 3;
	print_page_header();	
	line_no= line_no + 4;
}

  
print_page_header()
{
	print_line(232);
	fprintf(f1,"\n");
	fprintf(f1,"%-7.7s  %-15.15s %-19.19s  %-15.15s %-20.20s  %-14.14s  %-70.70s  %14.14s  %-30.30s  %-10.10s\n",loc_legend[6],loc_legend[7],loc_legend[8],loc_legend[9],loc_legend[10],loc_legend[11],loc_legend[12],loc_legend[13],loc_legend[14],loc_legend[15]);	
	print_line(232);
	fprintf(f1,"\n");
	line_no = line_no+3;
}

print_line(l_length)
int l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1,"-");
	}
}

print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1," ");
	}
}


check_page_end()
{
	if ((line_no + 5) >= MAX_LINES)
	{
		fprintf(f1,"\f");
		line_no=0;
	    print_page_title();
	}	
	return;
}

//Print the finishing line of the report 
end_report()
{
	close_cursors();	
	fprintf(f1,"\n");
	fprintf(f1,"													     ");
	fprintf(f1,"** End of Report **");
	fprintf(f1,"");
}

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(f1,"%15sCR",str_amt);
        }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%15s",s_amt);
        fprintf(f1,"%15s  ",str_amt);
        }

}

#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER
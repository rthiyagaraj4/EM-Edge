/************************************************************************/
/* OCS MEDICOM VER 4.1                                                  */
/************************************************************************/
/* PROGRAM NAME          : BLRBLNAT.PC                                  */
/* AUTHOR                : Deepali Gosavi                               */  
/* DATE WRITTEN          : 04/10/2005                                   */      
/************************************************************************/
          
#include <stdio.h>         
#include <string.h> 
#include <bl.h>       
#include <math.h> 

#define OERROR (sqlca.sqlcode < 0)
#define LAST_ROW (sqlca.sqlcode == 1403)
#define NOT_FOUND (sqlca.sqlerrd[2] == 0)
#define RESOURCE_BUSY        (sqlca.sqlcode == -54)
#define DUPLICATE_KEY        (sqlca.sqlcode == -1)
#define ROW_COUNT            (sqlca.sqlerrd[2])
#define NODATAFOUND sqlca.sqlcode == 1403
#define OERROR          (sqlca.sqlcode < 0)
#define MAX_LINES 44
#define REP_WIDTH 132
#define VER  "VER : 4.10\n"
#define ESC  0x1B
/*
#define DEBUG 0
*/


EXEC SQL BEGIN DECLARE SECTION;


VARCHAR     hosp_name                       [120],
			date							[20],
            date_time                       [20],
			d_acc_entity_name				[61],
			d_user							[31],
			d_head_name						[31],
			d_sysdate						[20],
			d_curr_date						[20],
			nd_facility_id					[3],
            user_id                         [91],
	        nd_pwd 							[91],
            nd_session_id                   [16],
            nd_pgm_date                     [25],
            d_curr_pgm_name                 [15],
            nd_facility				        [3],
			nd_period_from					[15], 
			nd_period_to					[15],
			nd_period_from1					[15], 
			nd_period_to1					[15],  
			nd_doc_date_from				[15], 
			nd_doc_date_to					[15], 
			nd_doc_date_from1				[15], 
			nd_doc_date_to1					[15], 
			nd_patient_from					[21], 
			nd_patient_to					[21],
			nd_doc_type_from				[7],
			nd_doc_num_from					[9],
			nd_doc_type_to					[7],  
			nd_doc_num_to					[9],
			d_patient_id					[21],
			d_patient_name					[61],
			nd_patient_id                   [21],
			d_doc_type_code					[6],
			l_translated_value				[201],	
			l_pk_value						[100],
			d_bill_no						[17],
			d_bill_date						[20],
			d_bill_date1					[20],
			d_episode						[20],
			d_nature_old					[7],
			d_nature_new					[7],
			d_blng_grp_old					[5],
			d_blng_grp_new					[5],
			d_cust_old						[9],
			d_cust_new						[9],
			d_changed_by					[31],
			d_changed_date					[20],
			d_changed_date1					[20],
			d_blng_grp_old_desc				[41],
			d_cust_old_desc					[16],
			d_blng_grp_new_desc				[41],
			d_cust_new_desc					[16],
			nd_lang_id						[4],
			nd_temp_date					[20],
			nd_loc_date						[20],
			date_convert					[20];



	int i,sl_no=1,page_no=0;
	
	double d_episode_id,d_visit_id,d_doc_num ;

    double  d_patient_dep_amt=0,d_bill_amt=0, d_bill_outst_amt=0, d_tot_bill_outst_amt=0,
			d_patient_dep_amt_tot=0, d_bill_amt_tot=0,
			d_refund_amt=0, d_amt_adjusted=0, d_refund_amt_tot=0, d_amt_adjusted_tot=0;

	char filename[150];
	char x_msg[200];
	char loc_legend[999][201];
	char l_mesg[200];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include <winproc.h>

char string_var [100];

int    lctr = 0,pctr = 0,nvalid = 0,ncancel = 0, recctr = 1, ftime = 0, bgftime = 0;


FILE *fp;

void proc_main(argc,argv)
char *argv[];
int argc;
{
    if (argc < 5)
    {
     int i = 0;
       disp_message(ERR_MESG,"Not enough Parameters for running this program");
       proc_exit();
    }

	strcpy(g_pgm_id,"BLRBLNAT");
    strcpy(nd_pwd.arr,argv[1]);
    nd_pwd.len = strlen(nd_pwd.arr);
	 
    EXEC sql connect :nd_pwd;
  	  
    if (sqlca.sqlcode < 0 )
	{
        disp_message(ORA_MESG,"Error in connecting to Oracle");
        proc_exit();
    }

		set_meduser_role(); 

		strcpy(nd_lang_id.arr,l_language_id.arr);
		nd_lang_id.len = l_language_id.len;

    	strcpy(d_curr_pgm_name.arr,g_pgm_id); 
    	d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

    	strcpy(nd_session_id.arr,argv[2]);
    	nd_session_id.len = strlen(nd_session_id.arr);
    	strcpy(g_session_id,nd_session_id.arr);

    	strcpy(nd_pgm_date.arr,argv[3]);
    	nd_pgm_date.len = strlen(nd_pgm_date.arr);
    	strcpy(g_pgm_date,nd_pgm_date.arr);

    	strcpy(nd_facility.arr,argv[4]);
    	nd_facility.len = strlen(nd_facility.arr);
    	strcpy(g_facility_id,nd_facility.arr);



	nd_period_from.arr[0]	= '\0';	
	nd_period_to.arr[0]		= '\0';	 
	nd_doc_type_from.arr[0]	= '\0';	
	nd_doc_num_from.arr[0]	= '\0';	
	nd_doc_type_to.arr[0]	= '\0';	
	nd_doc_num_to.arr[0]	= '\0';	
	nd_doc_date_from.arr[0]	= '\0';	
	nd_doc_date_to.arr[0]	= '\0';	 
	nd_patient_from.arr[0]	= '\0';	
	nd_patient_to.arr[0]	= '\0';	

    EXEC SQL SELECT	PARAM1, PARAM2, 
					PARAM3, PARAM4, 
					PARAM5, PARAM6, 
					PARAM7, PARAM8, 
					PARAM9, PARAM10
			 INTO :nd_period_from, :nd_period_to, 
				  :nd_doc_type_from,:nd_doc_num_from,
				  :nd_doc_type_to,  :nd_doc_num_to,
				  :nd_doc_date_from,:nd_doc_date_to, 
				  :nd_patient_from, :nd_patient_to
			 FROM SY_PROG_PARAM
			 WHERE PGM_ID     = :d_curr_pgm_name
			 AND   SESSION_ID = :nd_session_id
			 AND   PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NODATAFOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");


	nd_period_from.arr[nd_period_from.len]		= '\0';	
	nd_period_to.arr[nd_period_to.len]			= '\0';	 
	nd_doc_type_from.arr[nd_doc_type_from.len]	= '\0';	
	nd_doc_num_from.arr[nd_doc_num_from.len]	= '\0';	
	nd_doc_type_to.arr[nd_doc_type_to.len]		= '\0';	
	nd_doc_num_to.arr[nd_doc_num_to.len]		= '\0';	

	nd_doc_date_from.arr[nd_doc_date_from.len]	= '\0';	
	nd_doc_date_to.arr[nd_doc_date_to.len]		= '\0';	 
	nd_patient_from.arr[nd_patient_from.len]	= '\0';	
	nd_patient_to.arr[nd_patient_to.len]		= '\0';	


	if(nd_period_from.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(date_convert.arr,nd_period_from.arr);
	fun_change_loc_date();
	strcpy(nd_period_from1.arr,date_convert.arr);
	}
	if(nd_period_to.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(date_convert.arr,nd_period_to.arr);
	fun_change_loc_date();
	strcpy(nd_period_to1.arr,date_convert.arr);
	}
	if(nd_doc_date_from.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(date_convert.arr,nd_doc_date_from.arr);
	fun_change_loc_date();
	strcpy(nd_doc_date_from1.arr,date_convert.arr);
	}
    if(nd_doc_date_to.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(date_convert.arr,nd_doc_date_to.arr);
	fun_change_loc_date();
	strcpy(nd_doc_date_to1.arr,date_convert.arr);
	}   
   EXEC SQL DELETE SY_PROG_PARAM
              WHERE PGM_ID   = :d_curr_pgm_name
              AND SESSION_ID = :nd_session_id
              AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");
    open_files();

    declare_cur();

	get_header_dtls();

	fetch_legend_value();

	fprintf(fp,"%c&l1O",ESC);				/* Set Landscape*/ 
 	fprintf(fp, "%c(s17H", ESC);			/* Reduce the font size*/
	fprintf(fp,"%c&a4L",ESC); 				/* To Set the Left margin*/

    print_param();
    open_det_cur();

    while(fetch_det_cur())
    {										
		print_rec();  								
    }	

    //print_tot();
    print_end();

	fprintf(fp,"%cE",ESC); /* To Reset the Printer */
 }


open_files()
{

    strcpy(filename,WORKING_DIR);
	strcat(filename,"BLRBLNAT.lis");

    if ((fp = fopen(filename,"w")) == NULL)
    {
       disp_message(ERR_MESG,"Error in opening file BLRBLNAT.lis");
       proc_exit();
    }

}

declare_cur()
{
	
	EXEC SQL DECLARE DET_CUR CURSOR FOR
		SELECT A.DOC_TYPE_CODE||'-'||to_char(A.DOC_NUM), to_char(B.DOC_DATE, 'DD/MM/YYYY'),
			   B.PATIENT_ID,	
			   DECODE(B.EPISODE_TYPE, 'I', B.EPISODE_TYPE||'/'||to_char(B.EPISODE_ID),
									  'D', B.EPISODE_TYPE||'/'||to_char(B.EPISODE_ID),
									  'E', B.EPISODE_TYPE||'/'||to_char(B.EPISODE_ID)||'/'||to_char(B.VISIT_ID),		
									  'O', B.EPISODE_TYPE||'/'||to_char(B.EPISODE_ID)||'/'||to_char(B.VISIT_ID),		
									  'R', B.EPISODE_TYPE)	EPISODE,	
			   DECODE(A.BILL_NATURE_CODE_OLD, 'C', 'Cash', 'Credit'), 
			   A.BLNG_GRP_ID_OLD, C.SHORT_DESC, A.CUST_CODE_OLD, 
			   DECODE(A.BILL_NATURE_CODE_NEW, 'C', 'Cash', 'Credit'),  
			   A.BLNG_GRP_ID_NEW, D.SHORT_DESC, A.CUST_CODE_NEW,
			   A.ADDED_BY_ID, to_char(A.AUDIT_DATE_TIME, 'DD/MM/YYYY HH24:MI')
		FROM   BL_BILL_HDR B, BL_BILL_HDR_AUDIT_LOG A, 
			   BL_BLNG_GRP C, BL_BLNG_GRP D			   
		WHERE  A.DOC_TYPE_CODE         = B.DOC_TYPE_CODE
        AND    A.DOC_NUM               = B.DOC_NUM                       
		AND    A.OPERATING_FACILITY_ID = :nd_facility	
		AND    A.OPERATING_FACILITY_ID = B.OPERATING_FACILITY_ID 
		AND    A.DOC_TYPE_CODE         = B.DOC_TYPE_CODE
		AND    A.DOC_NUM               = B.DOC_NUM
		AND    A.AUDIT_DATE_TIME BETWEEN TO_DATE(nvl(:nd_period_from, '01/01/1000')||' 00:00:00', 'DD/MM/YYYY HH24:MI:SS')
							     AND     TO_DATE(nvl(:nd_period_to,   '31/12/5000')||' 23:59:59', 'DD/MM/YYYY HH24:MI:SS')
		AND   RPAD(A.DOC_TYPE_CODE,6,' ')|| LPAD(A.DOC_NUM,8,'0') BETWEEN
              RPAD(NVL(:nd_doc_type_from,' '),6,' ')||LPAD(NVL(:nd_doc_num_from,0),8,'0') AND
              RPAD(NVL(:nd_doc_type_to,'~~~~~~'),6,' ')||LPAD(NVL(:nd_doc_num_to,99999999),8,'0')   
		AND   B.DOC_DATE BETWEEN TO_DATE(NVL(:nd_doc_date_from, '01/01/1000'),'DD/MM/YYYY') 
						 AND     TO_DATE(nvl(:nd_doc_date_to, '31/12/5000'),'DD/MM/YYYY')
		AND   B.PATIENT_ID BETWEEN NVL(:nd_patient_from, '!!!!!!!!!!!!!!!!!!!!')
						 AND     NVL(:nd_patient_to, '~~~~~~~~~~~~~~~~~~~~')
		AND   A.BLNG_GRP_ID_OLD = C.BLNG_GRP_ID
		AND   A.BLNG_GRP_ID_NEW = D.BLNG_GRP_ID
		ORDER BY A.DOC_TYPE_CODE||'-'||to_char(A.DOC_NUM);				     
}
 
open_det_cur()
{
   EXEC SQL OPEN DET_CUR;
	if (OERROR)
        err_mesg("OPEN failed on cursor DET_CUR",0,"");
}

close_det_cur()
{
	EXEC SQL CLOSE DET_CUR;   
}


fetch_det_cur()
{ 

		d_bill_no.arr[0]		= '\0';	  
		d_bill_date.arr[0]		= '\0';	  
		d_patient_id.arr[0]		= '\0';	  
		d_episode.arr[0]		= '\0';	  
		d_nature_old.arr[0]		= '\0';	  
		d_blng_grp_old.arr[0]	= '\0';	  
		d_cust_old.arr[0]		= '\0';	  
		d_nature_new.arr[0]		= '\0';	  
		d_blng_grp_new.arr[0]	= '\0';	  
		d_cust_new.arr[0]		= '\0';	  
		d_changed_by.arr[0]     = '\0';
		d_changed_date.arr[0]   = '\0';
		d_blng_grp_old_desc.arr[0]= '\0';
		d_blng_grp_new_desc.arr[0]= '\0';

		d_bill_no.len			= 0;
		d_bill_date.len  		= 0;
		d_patient_id.len		= 0;
		d_episode.len			= 0;
		d_nature_old.len		= 0;		
		d_blng_grp_old.len		= 0;
		d_cust_old.len			= 0;
		d_nature_new.len		= 0;		
		d_blng_grp_new.len		= 0;
		d_cust_new.len			= 0;
		d_changed_by.len		= 0;
		d_changed_date.len		= 0;
		d_blng_grp_old_desc.len	= 0;
		d_blng_grp_new_desc.len	= 0;

	EXEC SQL FETCH  DET_CUR INTO 
		:d_bill_no,
		:d_bill_date,		
		:d_patient_id,
		:d_episode,
		:d_nature_old,
		:d_blng_grp_old,
		:d_blng_grp_old_desc,
		:d_cust_old,
		:d_nature_new,
		:d_blng_grp_new,
		:d_blng_grp_new_desc,
		:d_cust_new,
		:d_changed_by,		
		:d_changed_date;

	if (OERROR)
		err_mesg("FETCH failed on cursor DET_CUR ",0,"");	
    

    d_bill_no.arr[d_bill_no.len]					= '\0';
	d_bill_date.arr[d_bill_date.len]				= '\0';
	d_patient_id.arr[d_patient_id.len]				= '\0';
	d_episode.arr[d_episode.len]					= '\0';
	d_nature_old.arr[d_nature_old.len]				= '\0';
    d_blng_grp_old.arr[d_blng_grp_old.len]			= '\0';
	d_cust_old.arr[d_cust_old.len]					= '\0';
	d_nature_new.arr[d_nature_new.len]				= '\0';
    d_blng_grp_new.arr[d_blng_grp_new.len]			= '\0';
	d_cust_new.arr[d_cust_new.len]					= '\0';
	d_changed_by.arr[d_changed_by.len]				= '\0';
	d_changed_date.arr[d_changed_date.len]			= '\0';
	d_blng_grp_old_desc.arr[d_blng_grp_old_desc.len]= '\0';
	d_blng_grp_new_desc.arr[d_blng_grp_new_desc.len]= '\0';


    d_cust_old_desc.arr[0]= '\0'; 
	d_cust_old_desc.len	= 0;
    d_cust_new_desc.arr[0]= '\0';
	d_cust_new_desc.len	= 0;

    if (strcmp(d_nature_old.arr, "Credit")==0)
	{
	   
	   EXEC SQL SELECT SHORT_NAME
			    INTO   :d_cust_old_desc
				FROM   AR_CUSTOMER
				WHERE  CUST_CODE = :d_cust_old;			   
			   d_cust_old_desc.arr[d_cust_old_desc.len]	= '\0';	

	}

    if (strcmp(d_nature_new.arr, "Credit")==0)
	{
	   
	   EXEC SQL SELECT SHORT_NAME
			    INTO   :d_cust_new_desc
				FROM   AR_CUSTOMER
				WHERE  CUST_CODE = :d_cust_new;			   
			   d_cust_new_desc.arr[d_cust_new_desc.len]	= '\0';	

	}


	return(LAST_ROW?0:1);   
}


print_rec()
{

    int first_ref=1;
		
    if (lctr > 40)
	   next_page();

    if(d_bill_date.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(date_convert.arr,d_bill_date.arr);
	fun_change_loc_date();
	strcpy(d_bill_date1.arr,date_convert.arr);
	}
	if(d_changed_date.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(date_convert.arr,d_changed_date.arr);
	fun_change_loc_date1();
	strcpy(d_changed_date1.arr,date_convert.arr);
	}

    fprintf(fp,"%4d ",recctr);
	fprintf(fp,"%-15.15s  %-15.15s ",d_bill_no.arr,d_bill_date1.arr);
    fprintf(fp,"%-20.20s %-18.18s ",d_patient_id.arr,d_episode.arr);
	fprintf(fp,"%-7s %-4.4s %-14.14s %-9.9s %-15.15s\n", d_nature_old.arr, d_blng_grp_old.arr, d_blng_grp_old_desc.arr, d_cust_old.arr, d_cust_old_desc.arr);
	lctr++;
	fprintf(fp,"     %-32.32s %-39.39s %-7s %-4.4s %-14.14s %-9.9s %-15.15s", d_changed_by.arr, d_changed_date1.arr, d_nature_new.arr, d_blng_grp_new.arr, d_blng_grp_new_desc.arr, d_cust_new.arr, d_cust_new_desc.arr);
    fprintf(fp,"\n");
	
	lctr++; 
	recctr++;

}

print_tot()
{
   fprintf(fp,"%79s                --------------   --------------\n"," ");
   fprintf(fp,"%83.83s            ",loc_legend[17]);
   print_formated(d_bill_amt_tot);    
   fprintf(fp, " ");
   print_formated(d_tot_bill_outst_amt);    
   next_line(1);
   fprintf(fp,"%79s                --------------   --------------\n"," ");
   next_line(1);
}

get_header_dtls()
{
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    d_acc_entity_name.arr[0] ='\0';
    d_curr_date.arr[0]   ='\0';
	d_user.arr[0] ='\0';
    d_sysdate.arr[0] ='\0';
	d_head_name.arr[0] ='\0';
    d_acc_entity_name.len =0;
    d_curr_date.len   =0;
	d_user.len =0;
    d_sysdate.len =0;
	d_head_name.len=0;

	EXEC SQL SELECT upper(ACC_ENTITY_NAME), /* description of the institution */
				   USER, TO_CHAR(SYSDATE, 'DD/MM/YYYY'),TO_CHAR(SYSDATE, 'HH24:MI:SS'),HEAD_OF_COMPANY_NAME
             INTO :d_acc_entity_name,
				  :d_user, :d_sysdate,:d_curr_date,d_head_name
			 FROM SY_ACC_ENTITY_LANG_VW
			 WHERE acc_entity_id = :nd_facility
			 AND LANGUAGE_ID = :nd_lang_id;
    
	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
	d_curr_date.arr[d_curr_date.len]			 = '\0';
	d_head_name.arr[d_head_name.len]			 = '\0';

	if(d_sysdate.arr[0]!='\0')
	{
	init_date_temp_var();
	strcpy(date_convert.arr,d_sysdate.arr);
	fun_change_loc_date();
	strcpy(d_sysdate.arr,date_convert.arr);
	}

   
	return;
	err_exit:
	EXEC SQL WHENEVER SQLERROR CONTINUE;
	EXEC SQL ROLLBACK WORK RELEASE;
	proc_exit();
}


print_page_title()
{

	int hosp_nm_len,date1_len, rep_title_len = 10,v_title_len,v_title1_len, s1, s2,date_len,user_len,pgm_len,sub_title_len;
	char v_rep_title[200],v_as_on_date[12],v_sub_title[200],v_title[200],v_title1[200];
   
	fprintf(fp,"\n");
	fprintf(fp,"MDL : BL");
	hosp_nm_len  =  d_acc_entity_name.len;
	s1 = (REP_WIDTH-hosp_nm_len)/2;
	horz_skip(s1-8);
	fprintf(fp,"%s", d_acc_entity_name.arr);
	s2 = (REP_WIDTH-s1-hosp_nm_len);
	date1_len=strlen(loc_legend[3]);
	horz_skip(s2-date1_len-12);
	fprintf(fp,"%s : %s", loc_legend[3],d_sysdate.arr);
    
	next_line(1);
	
	fprintf(fp,"OPR : %s", d_user.arr); 	
    user_len=strlen(d_user.arr);
	strcpy(v_rep_title,loc_legend[1]);
	rep_title_len = strlen(v_rep_title);
	s1 = (REP_WIDTH-rep_title_len)/2;
	//strcpy(v_as_on_date,nd_as_on_date.arr);
	//date_len= strlen(v_as_on_date);
	horz_skip(s1-user_len-6);
	fprintf(fp,"%s",v_rep_title);
   	s2 = (REP_WIDTH-s1-rep_title_len);
	horz_skip(s2-17);
	fprintf(fp," %-4.4s :   %-10s",loc_legend[2],d_curr_date.arr);
	next_line(1);

	fprintf(fp,"REP : %s",d_curr_pgm_name.arr);
    pgm_len=strlen(d_curr_pgm_name.arr);
	
    s2 = (REP_WIDTH-5);
    horz_skip(s2-28);
	fprintf(fp,"  %5.5s :  %9d",loc_legend[4],++page_no);
	next_line(1);

	//fprintf(fp,"%c(s3B",ESC); 	/* To set Bold style */

    //fprintf(fp,"%c(s-3B",ESC);	/* release bold style */
   
	lctr = 6;
	print_line('-',REP_WIDTH); next_line(1);
	
}


print_column_title()
 {

  //no.ID, name
  fprintf(fp, "%84.84s  %-20.20s%-15.15s", loc_legend[10],loc_legend[11],loc_legend[12]);
  next_line(1);

  fprintf(fp, "%4.4s %-16.16s %-15.15s %-20.20s %-18.18s %-20.20s",loc_legend[5],loc_legend[6],loc_legend[7],loc_legend[8],loc_legend[9], loc_legend[15]);
  next_line(1);

  fprintf(fp, "     %-32.32s %-40.40s%-20.20s",loc_legend[13], loc_legend[14], loc_legend[16]);
  next_line(1);

  print_line('-',REP_WIDTH);
  next_line(1);

 }


print_param()
{
  print_page_title();

  fprintf(fp,"VER 4.1\n");
 
  fprintf(fp,"\n\n\n\n");
  fprintf(fp,"        ");
  fprintf(fp,"%-16.16s :\n",loc_legend[17]);
  fprintf(fp,"        ");
  fprintf(fp,"------------------\n\n");

  fprintf(fp,"                %-10.10s %-7.7s : %s\n",loc_legend[18],loc_legend[23],nd_period_from1.arr);  
  fprintf(fp,"                           %-7.7s : %s\n",loc_legend[24],nd_period_to1.arr);
  fprintf(fp,"                %-10.10s %-7.7s : %s\n",loc_legend[19],loc_legend[23],nd_doc_type_from.arr);  
  fprintf(fp,"                %-10.10s %-7.7s : %s\n",loc_legend[20],loc_legend[23],nd_doc_num_from.arr);  
  fprintf(fp,"                %-10.10s %-7.7s : %s\n",loc_legend[19],loc_legend[24],nd_doc_type_to.arr);  
  fprintf(fp,"                %-10.10s %-7.7s : %s\n",loc_legend[20],loc_legend[24],nd_doc_num_to.arr);  
  fprintf(fp,"                %-10.10s %-7.7s : %s\n",loc_legend[21],loc_legend[23],nd_doc_date_from1.arr);  
  fprintf(fp,"                           %-7.7s : %s\n",loc_legend[24],nd_doc_date_to1.arr);
  fprintf(fp,"                %-10.10s %-7.7s : %s\n",loc_legend[22],loc_legend[23],nd_patient_from.arr);  
  fprintf(fp,"                           %-7.7s : %s\n",loc_legend[24],nd_patient_to.arr);  
  
  next_page();
}


check_line(skip) /* will check for MAX LINE before printing totals */
int skip;
{
	if ((lctr + skip) >= MAX_LINES)
	{
		next_page(); 
	}
}

next_line(skip) /* will check for MAX LINE before printing totals */		
int skip;
{
	if ((lctr + skip) > MAX_LINES)
	{
		next_page(); 
	}
	else
	{
		fprintf(fp,"\n"); ++lctr; 
	}
}

next_page() /* will move the cursor to next page */
{
  
	fprintf(fp,"\n");
	fprintf(fp,"\f");
	lctr=0;
	fprintf(fp,"\n"); 
	 
	print_page_title();
	print_column_title();  	
}

print_line(ch,n) /* this is to obtain required characters */
  char ch;
  int n;
{
	int i;
	for(i=0;i<n;i++)
	fprintf(fp,"%c",ch);  
}

horz_skip(num) /* this is to obtain required blank space */
int num;
{
	int i;
	for(i=0;i<num;i++)fprintf(fp," ");
}

print_end()
{
  fprintf(fp,"\n \n");
  fprintf(fp,"                                                   **   %-15.15s   ** ",loc_legend[25]);
  //next_line(1);
  fflush(fp);
  fclose(fp);
}


print_formated(loc_amount)
double loc_amount;
{
	char s_amt[15], str_amt[15];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14sCR",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
        fprintf(fp,"%14s  ",str_amt);
    }
}  



fetch_legend_value()
{
	for(i=1;i<=300;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRBLNAT.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:nd_lang_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
	}
}


get_local_date()
{
	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'DD/MM/YYYY'),:nd_lang_id,t_date);

		:nd_loc_date := to_char(t_date,'DD/MM/YYYY');

	END;

	END-EXEC;
    nd_loc_date .arr[nd_loc_date .len]='\0';
		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}
get_local_date1()
{
	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
		get_locale_date.convert_to_locale_date(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI'),:nd_lang_id,t_date);

		:nd_loc_date := to_char(t_date,'DD/MM/YYYY HH24:MI');

	END;

	END-EXEC;
    nd_loc_date .arr[nd_loc_date .len]='\0';
		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
date_convert.arr[0] = '\0';

nd_temp_date.len = 0;
nd_loc_date.len  = 0;
date_convert.len = 0;
}


fun_change_loc_date()
{
strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 
}

fun_change_loc_date1()
{
strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);

get_local_date1();

strcpy(date_convert.arr,nd_loc_date.arr); 
}

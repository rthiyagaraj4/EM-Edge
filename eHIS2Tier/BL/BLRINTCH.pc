/*************************************************************

Author    :  Harish A   24/01/2004
Name      :  Intercompany-Processed Encounters List
Project   :  BL

*************************************************************/

#include <stdio.h>          
#include <string.h>      
#include <math.h>
#include <bl.h> 

#define MAX_LINES 55
#define OERROR (sqlca.sqlcode < 0) 
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 4.1\n"     
                          
EXEC SQL BEGIN DECLARE SECTION;

	VARCHAR uid_pwd						[42],
			nd_session_id        		[16],
			nd_pgm_date	    			[20],
			l_function_id				[50],
			l_oper_facility_id			[10],
			l_start_date				[30],
			l_end_date					[30],
			l_gen_user_id				[30],
			nd_start_date               [30],
			l_cash_counter_code			[10],
			l_doc_type_code				[10],
			l_doc_num					[15],
			l_doc_date					[30],
			l_bill_nature_code			[10],
			l_bill_print_flag			[10],
			p_language_id			    [3],
			nd_facility_id				[3],
			l_fr_item_code              [30],
			l_fr_item_desc              [101],
			l_service_panel_ind         [4],
			l_blng_serv_panel_code      [20],
			l_blng_serv_panel_desc      [41],
			nd_temp_date				[21],
			nd_temp_date1				[21],
			date_convert				[21],
			date_convert1				[21],
			nd_loc_date					[21],
			nd_loc_date1			    [21],
			l_visit_regn_date_time		[30],
			l_discharge_date_time		[30],
			l_blng_grp_id				[10],
			l_patient_id				[25],
			l_episode_id				[20],
			l_visit_id					[10],
			l_short_name				[41],
			l_frm_facility_id			[4],
			l_to_facility_id			[4],
			nd_fr_facility_id			[4],
			nd_to_facility_id			[4],
			hdr_frm_facility_id			[4],
			hdr_to_facility_id			[4],
			hdr_patient_id              [25],
			hdr_episode_type            [4],
			hdr_episode_id              [9],
			hdr_to_episode_type         [2],
			hdr_visit_id                [5],
			l_frm_patient_id				[21],
			l_prog_id				        [21],
			l_frm_episode_id				[9],
			l_frm_visit_id					[5],
			l_frm_episode_type				[4],
			l_to_episode_type				[4],
			l_previous_visit_date		[30],
			l_previous_discharge_date	[30],	
			l_previous_blng_grp			[10],	
			l_episode_type				[20],
			d_acc_entity_name			[41],
			d_frm_acc_entity_name		[41],
			d_to_acc_entity_name		[41],
			d_user						[21],
			d_sysdate					[30],
			l_pk_value				   [100],
		    l_translated_value		   [201];


	int		l_page_no		= 1;
	int		l_line_no		= 0;
	int		i;

	double 	l_charge_amt=0,
	        tot_charge_amt,
	        grand_tot_charge_amt;

	char	filename[150];
	char loc_legend[999][201];

	char	l_print_format_change;
	char    aMesg[300];
	char	f_bill_tot_amt[14];
	char	f_charge_amt[14];
	char	l_mesg[1000];
	char      v_num[10];

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

FILE *f1;

int  line_no=0, 
	 page_no=0;

void proc_main(argc, argv)
int argc;
char *argv[];
{

 void	    get_params(),
  			get_header_dtls(),
  			do_report();
	
	//	disp_message(ERR_MESG,v_num);
	//sprintf(v_num,"%d",argc);
			//disp_message(ERR_MESG,v_num);	
	if(argc != 11) 
	{
		disp_message(ERR_MESG,"Usage BLRINTCH uid/passwd session_id pgm_date facility_id start_date end_date user cash_counter");
		proc_exit();
	}
		
    strcpy(uid_pwd.arr,argv[1]);
    uid_pwd.len = strlen(uid_pwd.arr);

    strcpy(nd_session_id.arr,argv[2]);
    nd_session_id.len = strlen(nd_session_id.arr);
    strcpy(g_session_id,argv[2]);
  
    strcpy(nd_pgm_date.arr,argv[3]);
    nd_pgm_date.len = strlen(nd_pgm_date.arr);

    strcpy(g_pgm_id,"BLRINTCH");
    strcpy(g_pgm_date,argv[3]);

    strcpy(l_oper_facility_id.arr,argv[4]);
    l_oper_facility_id.len = strlen(l_oper_facility_id.arr);
	strcpy(g_facility_id, l_oper_facility_id.arr);

    strcpy(l_start_date.arr,argv[5]);
    l_start_date.len = strlen(l_start_date.arr);

    strcpy(l_end_date.arr,argv[6]);
    l_end_date.len = strlen(l_end_date.arr);

    strcpy(l_gen_user_id.arr,argv[7]);
    l_gen_user_id.len = strlen(l_gen_user_id.arr);

    strcpy(nd_fr_facility_id.arr,argv[8]);
    nd_fr_facility_id.len = strlen(nd_fr_facility_id.arr);

    strcpy(nd_to_facility_id.arr,argv[9]);
    nd_to_facility_id.len = strlen(nd_to_facility_id.arr);

    strcpy(l_prog_id.arr,argv[10]);
    l_prog_id.len = strlen(l_prog_id.arr);

	/*strcpy(filename,WORKING_DIR);
	strcat(filename,"blrintch.lis");
	
	
	if((f1 = fopen(filename, "w")) == NULL) 
	{
		disp_message(ERR_MESG,".... Error opening output file ....");
		proc_exit();
	} */

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL CONNECT :uid_pwd;  
	set_meduser_role();
	strcpy(p_language_id.arr,l_language_id.arr);
    p_language_id.len = l_language_id.len;

	l_function_id.arr[0] = '\0';

	EXEC SQL SELECT PARAM1            /* FUNCTION ID */
			 INTO :l_function_id
			 FROM   SY_PROG_PARAM
			 WHERE  PGM_ID     =:l_prog_id // 'BLTINTCH'
			 AND    PGM_DATE   = :nd_pgm_date
			 AND    SESSION_ID = TO_NUMBER(:nd_session_id);


    if(ERROR || NO_DATA_FOUND)
	    err_mesg("SELECT failed on table  SY_PROG_PARAM",0,"");


	EXEC SQL DELETE SY_PROG_PARAM
	 WHERE  PGM_ID     = :l_prog_id //'BLTINTCH' 
	 AND    PGM_DATE   = :nd_pgm_date
	 AND    SESSION_ID = TO_NUMBER(:nd_session_id);

	  if(ERROR) 
	err_mesg("DELETE failed on table SY_PROG_PARAM",0,""); 

//	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0)
//	 {
	strcpy(filename,WORKING_DIR);
	strcat(filename,"BLRINTCH.lis");
	// }
//	if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTERS")==0)
//	{
//	strcpy(filename,WORKING_DIR);
//	strcat(filename,"BLRCPYRF.lis");
//	}

	
	if((f1 = fopen(filename, "w")) == NULL) 
	{
		disp_message(ERR_MESG,".... Error opening output file ....");
		proc_exit();
	} 

    fetch_legend_value();
	get_header_dtls();
	declare_cursor1();
	//declare_cursor();
	do_report();
	close_cursors();
	fclose(f1);

	EXEC SQL COMMIT WORK RELEASE;

	return;
   
	err_exit:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL ROLLBACK WORK RELEASE;
	   disp_message(ERR_MESG,"Oracle error at main() occured....");
	   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	   proc_exit();
}

//get the header details
void get_header_dtls()
{
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	d_acc_entity_name.arr[0] = '\0';
	d_user.arr[0]            = '\0';
	d_sysdate.arr[0]         = '\0';
	d_frm_acc_entity_name.arr[0] = '\0';
	d_to_acc_entity_name.arr[0] = '\0';


    EXEC SQL SELECT ltrim(rtrim(acc_entity_name)),
				    ltrim(rtrim(USER)),
				    ltrim(rtrim(TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')))
		       INTO :d_acc_entity_name,
			  	    :d_user,
				    :d_sysdate
               FROM SY_ACC_ENTITY_LANG_VW
			  WHERE acc_entity_id = :l_oper_facility_id
			  AND language_id=:p_language_id;

    EXEC SQL SELECT ltrim(rtrim(acc_entity_name))
		       INTO :d_frm_acc_entity_name
               FROM SY_ACC_ENTITY_LANG_VW
			  WHERE acc_entity_id = :nd_fr_facility_id
			  AND language_id=:p_language_id;

   EXEC SQL SELECT ltrim(rtrim(acc_entity_name))
		       INTO :d_to_acc_entity_name
               FROM SY_ACC_ENTITY_LANG_VW
			  WHERE acc_entity_id = :nd_to_facility_id
			  AND language_id=:p_language_id;

	d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
	d_user.arr[d_user.len]                       = '\0';
	d_sysdate.arr[d_sysdate.len]                 = '\0';
	d_frm_acc_entity_name.arr[d_frm_acc_entity_name.len] = '\0';
	d_to_acc_entity_name.arr[d_to_acc_entity_name.len]   = '\0';

	return;

	err_exit:
	   EXEC SQL WHENEVER SQLERROR CONTINUE;
	   EXEC SQL ROLLBACK WORK RELEASE;
	   disp_message(ERR_MESG,"Oracle error at get_header_dtls() occured....");
	   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
	   proc_exit();
}

declare_cursor1()

{

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) {

   EXEC SQL DECLARE	    hdr_cur
	          CURSOR
			     FOR	
                 SELECT	patient_id,
						fr_episode_type,
						nvl(fr_episode_id,99999999),
						nvl(fr_visit_id,0)
				FROM	BL_INT_COMP_LOG_DTL
			   WHERE	fr_facility_id = :nd_fr_facility_id
			     AND    to_facility_id = :nd_to_facility_id
			     AND	user_id				  = :l_gen_user_id
				 and    SESSION_ID                   =:nd_session_id
				 AND    TO_CHAR(start_date_time,'DD/MM/RRRRHH24:MI:SS') = :l_start_date;
	 }



	if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTER")==0) {

   EXEC SQL DECLARE	    hdr_cur1
	          CURSOR
			     FOR	
                 SELECT	patient_id,
						fr_episode_type,
						nvl(fr_episode_id,99999999),
						nvl(fr_visit_id,0)
				FROM	BL_INT_COMP_LOG_DTL
			   WHERE	fr_facility_id = :nd_fr_facility_id
			     AND    to_facility_id = :nd_to_facility_id
			     AND	user_id				  = :l_gen_user_id
				 and    SESSION_ID                   =:nd_session_id
				 AND    TO_CHAR(start_date_time,'DD/MM/RRRRHH24:MI:SS') = :l_start_date;
	 }

	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0)
	EXEC SQL OPEN hdr_cur;
	if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTER")==0)
	EXEC SQL OPEN hdr_cur1;
	return;

	err_exit:
	
		   EXEC SQL WHENEVER SQLERROR CONTINUE;
		   EXEC SQL ROLLBACK WORK RELEASE;
		   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
		   disp_message(ERR_MESG,"Oracle error at declare_cursor1() occured....");
		   proc_exit();
}	 

declare_cursor()

{

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) {

	EXEC SQL DECLARE	bill_dtl_cur
	          CURSOR
			     FOR
  			  SELECT	a.FR_FACILITY_ID,
						a.TO_FACILITY_ID,
						A.PATIENT_ID,
						a.FR_EPISODE_TYPE,
						nvl(a.FR_EPISODE_ID,99999999),
						nvl(a.FR_VISIT_ID,0),
						decode(:p_language_id,'en',d.short_name,nvl(d.short_name_loc_lang,d.short_name)),
						a.TO_EPISODE_TYPE,
						b.start_date_time,
						a.FR_ITEM_CODE,
						a.FR_SERV_ITEM_DESC,
						a.SERVICE_PANEL_IND,
						a.BLNG_SERV_PANEL_CODE,
						a.CHARGE_AMT
			    FROM	BL_INT_COMP_LOG_SERV_DTL a,BL_INT_COMP_LOG_DTL b,
						mp_patient_mast	d
			   WHERE	A.patient_id			=  D.patient_id
			   and      a.patient_id=b.patient_id
			   and      nvl(a.fr_episode_id,99999999)=nvl(b.fr_episode_id,99999999)
			   and      a.fr_episode_type=b.fr_episode_type
			   AND	    a.user_id				  =b.user_id
			   AND	    a.user_id				    = :l_gen_user_id
			   and      b.patient_id                =:hdr_patient_id
			   and      b.fr_episode_type              =:hdr_episode_type
			   and      nvl(b.fr_episode_id,99999999)                =:hdr_episode_id
			   and      nvl(b.fr_visit_id,0)           =:hdr_visit_id
			   and      a.SESSION_ID                   =b.SESSION_ID
			   and      b.SESSION_ID                   =:nd_session_id
	    AND	TO_CHAR(b.start_date_time,'DD/MM/RRRRHH24:MI:SS') = :l_start_date
			   ORDER 
			      BY    TRUNC(b.start_date_time),
				        A.PATIENT_ID;

	 }

		if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTER")==0) {

	EXEC SQL DECLARE	bill_dtl_cur1
	          CURSOR
			     FOR
  			  SELECT	a.FR_FACILITY_ID,
						a.TO_FACILITY_ID,
						A.PATIENT_ID,
						a.FR_EPISODE_TYPE,
						nvl(a.FR_EPISODE_ID,99999999),
						nvl(a.FR_VISIT_ID,0),
						decode(:p_language_id,'en',d.short_name,nvl(d.short_name_loc_lang,d.short_name)),
						a.TO_EPISODE_TYPE,
						b.start_date_time,
						a.FR_ITEM_CODE,
						a.FR_SERV_ITEM_DESC,
						a.SERVICE_PANEL_IND,
						a.BLNG_SERV_PANEL_CODE,
						a.CHARGE_AMT
			    FROM	BL_INT_COMP_LOG_SERV_DTL a,BL_INT_COMP_LOG_DTL b,
						mp_patient_mast	d
			   WHERE	A.patient_id			=  D.patient_id
			   and      a.patient_id=b.patient_id
			   and      nvl(a.fr_episode_id,99999999)=nvl(b.fr_episode_id,99999999)
			   and      a.fr_episode_type=b.fr_episode_type
			   AND	    a.user_id				  =b.user_id
			   AND	    a.user_id				    = :l_gen_user_id
			   and      b.patient_id                =:hdr_patient_id
			   and      b.fr_episode_type              =:hdr_episode_type
			   and      nvl(b.fr_episode_id,99999999)                =:hdr_episode_id
			   and      nvl(b.fr_visit_id,0)           =:hdr_visit_id
			   and      a.SESSION_ID                   =b.SESSION_ID
			   and      b.SESSION_ID                   =:nd_session_id
	    AND	TO_CHAR(b.start_date_time,'DD/MM/RRRRHH24:MI:SS') = :l_start_date
			   ORDER 
			      BY    TRUNC(b.start_date_time),
				        A.PATIENT_ID;

	 }
	 		
	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0)
	EXEC SQL OPEN bill_dtl_cur;
	if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTER")==0)
	EXEC SQL OPEN bill_dtl_cur1;

	return;

	err_exit:
	
		   EXEC SQL WHENEVER SQLERROR CONTINUE;
		   EXEC SQL ROLLBACK WORK RELEASE;
		   disp_message(ERR_MESG, sqlca.sqlerrm.sqlerrmc);
		   disp_message(ERR_MESG,"Oracle error at declare_cursor() occured....");
		   proc_exit();
}

int fetch_hdr_cur()

{

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	hdr_patient_id.arr[0]	        = '\0';
	hdr_episode_type.arr[0]			= '\0';
	hdr_episode_id.arr[0]			= '\0';
	hdr_visit_id.arr[0]				= '\0'; 

   if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) {           
	EXEC SQL FETCH  hdr_cur
             INTO      :hdr_patient_id,
					   :hdr_episode_type,
					   :hdr_episode_id,
					   :hdr_visit_id;
   }

   if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTER")==0) {
	EXEC SQL FETCH  hdr_cur1
             INTO      :hdr_patient_id,
					   :hdr_episode_type,
					   :hdr_episode_id,
					   :hdr_visit_id;
   }
//disp_message(ERR_MESG,hdr_episode_type.arr);
//disp_message(ERR_MESG,hdr_episode_id.arr);
	if (NODATAFOUND)
		return 0;

	hdr_patient_id.arr[hdr_patient_id.len]	= '\0';
	hdr_episode_type.arr[hdr_episode_type.len]		= '\0';
	hdr_episode_id.arr[hdr_episode_id.len]	= '\0';
	hdr_visit_id.arr[hdr_visit_id.len]		= '\0';
    
	return 1;
	
	err_exit:
		EXEC SQL WHENEVER SQLERROR CONTINUE;
		EXEC SQL ROLLBACK WORK RELEASE;
		disp_message(ERR_MESG,"Oracle error at fetch_hdr_cur() occured....");
		sprintf(aMesg,"Error: %-100s",sqlca.sqlerrm.sqlerrmc);
		disp_message(ERR_MESG,aMesg);
		proc_exit();
}




int fetch_bill_dtl_cur()

{

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	l_frm_facility_id.arr[0]	= '\0';
	l_to_facility_id.arr[0]			= '\0';
	l_frm_patient_id.arr[0]				= '\0';
	l_frm_episode_type.arr[0]				= '\0'; 
	l_frm_episode_id.arr[0]				= '\0';
	l_frm_visit_id.arr[0]				= '\0';
	l_short_name.arr[0]				= '\0';
	l_to_episode_type.arr[0]				= '\0'; 
	nd_start_date.arr[0]				= '\0';
	l_fr_item_code.arr[0]               	= '\0';
	l_fr_item_desc.arr[0]               	= '\0';
	l_service_panel_ind.arr[0]          	= '\0';
	l_blng_serv_panel_code.arr[0]       	= '\0';

	l_charge_amt = 0; 
      if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) {               
	EXEC SQL FETCH  bill_dtl_cur
			  INTO  :l_frm_facility_id,
					:l_to_facility_id,
					:l_frm_patient_id,
					:l_frm_episode_type,
					:l_frm_episode_id,
					:l_frm_visit_id,
					:l_short_name,
					:l_to_episode_type,
					:nd_start_date,
					:l_fr_item_code,
					:l_fr_item_desc,
					:l_service_panel_ind,
					:l_blng_serv_panel_code,
					:l_charge_amt;
}
   if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTER")==0) {  
   	EXEC SQL FETCH  bill_dtl_cur1
			  INTO  :l_frm_facility_id,
					:l_to_facility_id,
					:l_frm_patient_id,
					:l_frm_episode_type,
					:l_frm_episode_id,
					:l_frm_visit_id,
					:l_short_name,
					:l_to_episode_type,
					:nd_start_date,
					:l_fr_item_code,
					:l_fr_item_desc,
					:l_service_panel_ind,
					:l_blng_serv_panel_code,
					:l_charge_amt;
}
//disp_message(ERR_MESG,l_service_panel_ind.arr);
//disp_message(ERR_MESG,l_blng_serv_panel_code.arr);
	if (NODATAFOUND)
		return 0;

	l_frm_facility_id.arr[l_frm_facility_id.len]	= '\0';
	l_to_facility_id.arr[l_to_facility_id.len]		= '\0';
	l_frm_patient_id.arr[l_frm_patient_id.len]		= '\0';
	l_frm_episode_type.arr[l_frm_episode_type.len]	= '\0';
	l_frm_episode_id.arr[l_frm_episode_id.len]		= '\0';
	l_frm_visit_id.arr[l_frm_visit_id.len]			= '\0';
	l_short_name.arr[l_short_name.len]				= '\0';          
	l_to_episode_type.arr[l_to_episode_type.len]	= '\0';                
	nd_start_date.arr[nd_start_date.len]	        = '\0'; 
	l_fr_item_code.arr[l_fr_item_code.len]	        = '\0'; 
	l_fr_item_desc.arr[l_fr_item_desc.len]	        = '\0'; 
	l_service_panel_ind.arr[l_service_panel_ind.len]	        = '\0'; 
	l_blng_serv_panel_code.arr[l_blng_serv_panel_code.len]	        = '\0'; 	
    
	return 1;
	
	err_exit:
		EXEC SQL WHENEVER SQLERROR CONTINUE;
		EXEC SQL ROLLBACK WORK RELEASE;
		disp_message(ERR_MESG,"Oracle error at fetch_bill_dtl_cur() occured....");
		sprintf(aMesg,"Error: %-100s",sqlca.sqlerrm.sqlerrmc);
		disp_message(ERR_MESG,aMesg);
		proc_exit();
}




close_cursors()
{

	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0)
	{
	EXEC SQL CLOSE bill_dtl_cur;
	EXEC SQL CLOSE hdr_cur;
	}
	if (strcmp(l_function_id.arr,"BL_COPY_CHARGES_ENCOUNTER")==0)
	{
	EXEC SQL CLOSE bill_dtl_cur1;
	EXEC SQL CLOSE hdr_cur1;
	}
	
}

void do_report()  
{
	print_parameter_page();

//	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0)
	print_report();
	end_report();
}

print_parameter_page()
{
	print_page_title();

	fprintf(f1,"\n\n\n\n\n\n\t\t%-16.16s\n",loc_legend[1]);
	fprintf(f1,"\t\t----------------\n\n");


	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[2],l_gen_user_id.arr);

	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[9],d_frm_acc_entity_name.arr);

	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[10],d_to_acc_entity_name.arr);
	init_date_temp_var();                              //pradeep
	strcpy(date_convert.arr,l_start_date.arr);            // pradeep
	fun_change_loc_date();
	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[4],date_convert.arr);
	init_date_temp_var();                              //pradeep
	strcpy(date_convert.arr,l_end_date.arr);            // pradeep
	fun_change_loc_date();
	fprintf(f1,"\t\t%-13.13s   :    %s\n\n",loc_legend[5],date_convert.arr);
	check_page_end(55);
}

print_page_title()
{
	double l_report_width;
	double l_acc_entity_length;
	double l_start_point;
	double l_comp_name_end_point;
	int	   l_page_width;

	l_line_no= 0;
	l_report_width      = 147;
	l_acc_entity_length = strlen(d_acc_entity_name.arr);

	//Code for Line 1
	l_start_point=ceill((l_report_width/2)-(l_acc_entity_length/2));
	//fprintf(f1,"MDL : BL");
	fprintf(f1,"%-3.3s : %-2.2s",loc_legend[6],loc_legend[21]);
	l_start_point=l_start_point-8;
	print_spaces(l_start_point);
	fprintf(f1,"%s",d_acc_entity_name.arr);
	l_comp_name_end_point=l_start_point+8+l_acc_entity_length;
	l_start_point=((l_report_width-17)-l_comp_name_end_point);
	print_spaces(l_start_point);
	init_date_temp_var();                             
	strcpy(date_convert.arr,d_sysdate.arr);          
	fun_change_loc_date();
	fprintf(f1,"%s\n",date_convert.arr);

	//Code for Line 2
	l_start_point=0;
	fprintf(f1,"%-3.3s : %-15s",loc_legend[7],d_user.arr);
	l_start_point=ceill((l_report_width/2)-18);
	l_start_point=l_start_point-21;
	print_spaces(l_start_point);
	//if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) 
	fprintf(f1,"%-40.40s\n",loc_legend[22]);

	//Code for Line 3
	l_start_point=0;

	//if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) 
	fprintf(f1,"%-3.3s : BLRINTCH",loc_legend[8]);

	l_start_point=ceill((l_report_width/2)-8);
	l_start_point=l_start_point-14;
	print_spaces(l_start_point);
	fprintf(f1,"                 ");
	l_comp_name_end_point=l_start_point+14+16;
	l_start_point=((l_report_width-17)-l_comp_name_end_point);
	print_spaces(l_start_point);
	fprintf(f1,"%-4.4s : %d\n",loc_legend[24],l_page_no);
	line_no=3;

	l_page_width=l_report_width;
	print_line(l_page_width);
	fprintf(f1,"\n");
	l_line_no = l_line_no + 3; 

	if(l_page_no > 1)
	{
//	if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) 
//{
		//fprintf(f1,"Patient No            Name                            Encounter\n");
		fprintf(f1,"%-12.12s          %-13.13s                   %-15.15s %-14.14s %-41.41s   %-15.15s\n",loc_legend[12],loc_legend[13],loc_legend[14],loc_legend[15],loc_legend[16],loc_legend[17]);
		print_line(l_page_width);
		fprintf(f1,"\n");	
		l_line_no = l_line_no + 2;
//}

	}
	l_page_no++;
}
  
print_report()
{
	int		l_width;
	tot_charge_amt =0;
	grand_tot_charge_amt =0;
	while(fetch_hdr_cur())
	{
	tot_charge_amt =0;
	  declare_cursor();
		while(fetch_bill_dtl_cur())
		{
			//if (strcmp(l_function_id.arr,"BL_TRANSFER_FACILITY_CHARGES")==0) 
			if (strcmp(l_service_panel_ind.arr,"S")==0) 
			{ 
			if(strlen(l_blng_serv_panel_code.arr)!=0)
			{
				l_blng_serv_panel_desc.arr[0] = '\0';

				EXEC SQL SELECT short_desc
						   INTO :l_blng_serv_panel_desc
						   FROM bl_blng_serv_lang_vw
						  WHERE language_id=:p_language_id
						  and BLNG_SERV_CODE = :l_blng_serv_panel_code;
				
				l_blng_serv_panel_desc.arr[l_blng_serv_panel_desc.len] = '\0';
			 }
			 }
			 else
			 {
 
 			 if(strlen(l_blng_serv_panel_code.arr)!=0)
			 {
				l_blng_serv_panel_desc.arr[0] = '\0';

				EXEC SQL SELECT short_desc
						   INTO :l_blng_serv_panel_desc
						   FROM bl_panel_hdr_lang_vw
						  WHERE language_id=:p_language_id
						  and panel_code = :l_blng_serv_panel_code;
				
				l_blng_serv_panel_desc.arr[l_blng_serv_panel_desc.len] = '\0';
			  }
			 }
			fprintf(f1,"%-20.20s  %-30.30s  %-1.1s/%-8.8s/%-4.4s %-1.1s/%-13.13s %-41.41s",l_frm_patient_id.arr,l_short_name.arr,l_frm_episode_type.arr,l_frm_episode_id.arr,l_frm_visit_id.arr,l_service_panel_ind.arr,l_blng_serv_panel_code.arr,l_blng_serv_panel_desc.arr);
			print_formated(l_charge_amt);
			fprintf(f1,"\n");
			l_line_no++;
			check_page_end(l_line_no);	
            tot_charge_amt =tot_charge_amt+l_charge_amt;
		}
	 fprintf(f1,"                          %85.85s","");
	 fprintf(f1,"==============================");
	 fprintf(f1,"\n");
	 fprintf(f1,"                                                                                                                %-15.15s",loc_legend[25]);
     print_formated(tot_charge_amt);
	 fprintf(f1,"\n");
	 fprintf(f1,"                          %85.85s","");
	 fprintf(f1,"==============================");
	 fprintf(f1,"\n");
	 l_line_no++;
	 check_page_end(l_line_no);
	 grand_tot_charge_amt =grand_tot_charge_amt+tot_charge_amt;
	}
	 fprintf(f1,"                                                                                                                %-15.15s",loc_legend[26]);
     print_formated(grand_tot_charge_amt);
	 fprintf(f1,"\n");
	 l_line_no++;
	 check_page_end(l_line_no);
}


print_line(l_length)
int l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1,"-");
	}
}

print_double_line(l_length)
int l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1,"=");
	}
}

print_spaces(l_length)
double l_length;
{
	for(i=0;i<l_length;i++)
	{
		fprintf(f1," ");
	}
}


check_page_end(l_line_no)
{
	if ((l_line_no + 5) >= MAX_LINES)
	{
		l_line_no=0;
		fprintf(f1,"\f");
	    print_page_title();
	}	
	return;
}

//Print the finishing line of the report 
end_report()
{
  fprintf(f1,"\n\n");
  fprintf(f1,"                                                   ");
  fprintf(f1,"%-15.15s",loc_legend[20]);
  fprintf(f1,"");
}

print_formated(loc_amount)
double loc_amount;
{
	char s_amt[30], str_amt[30];	

    if(loc_amount < 0)
	{
        put_val(s_amt,-loc_amount);        
        format_amt(s_amt);
	    strcat(s_amt,"-");
        sprintf(str_amt,"%14s",s_amt);
		l_ltrim(s_amt);
        fprintf(f1,"%14s",str_amt);
    }
    else 
	{
        put_val(s_amt,loc_amount);         
        format_amt(s_amt);
        sprintf(str_amt,"%14s",s_amt);
		l_ltrim(s_amt);
        fprintf(f1,"%14s ",str_amt);
    }

}
fetch_legend_value()
{
	for(i=1;i<=900;i++)
	{
		l_pk_value.arr[0] = '\0';

		EXEC SQL SELECT LTRIM(RTRIM('BLRINTCH.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009')))))
		           INTO :l_pk_value
				   FROM dual;

		l_pk_value.arr[l_pk_value.len]	= '\0';
		l_translated_value.arr[0]		= '\0';

		EXEC SQL EXECUTE
		BEGIN
			blcommon.get_local_lang_desc(:nd_facility_id,
										'SM',
										'SM_LANG_LEGEND',
										'DFLT_LEGEND_VALUE',
										:l_pk_value,
										:l_translated_value,
										:p_language_id);
		END;
		END-EXEC;

		l_translated_value.arr[l_translated_value.len] = '\0';
		strcpy(loc_legend[i],l_translated_value.arr);
		
	}
}


                     
init_date_temp_var()
{
nd_temp_date.arr[0] = '\0';
nd_temp_date1.arr[0] = '\0';
nd_loc_date.arr[0]  = '\0';
nd_loc_date1.arr[0]  = '\0';
date_convert.arr[0] = '\0';
date_convert1.arr[0] = '\0';


nd_temp_date.len = 0;
nd_temp_date1.len = 0;

nd_loc_date.len  = 0;
nd_loc_date1.len  = 0;

date_convert.len = 0;
date_convert1.len = 0;

}



fun_change_loc_date()
{

strcpy(nd_temp_date.arr,date_convert.arr);
nd_temp_date.len = strlen(nd_temp_date.arr);


get_local_date();

strcpy(date_convert.arr,nd_loc_date.arr); 

}

get_local_date()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date  date;
	
	BEGIN
	
	  
       	get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date,'DD/MM/YYYY HH24:MI:SS'),:p_language_id,t_date);  
      
	   :nd_loc_date := to_char(t_date,'DD/MM/YYYY HH24:MI');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}

fun_change_loc_date1()
{

strcpy(nd_temp_date1.arr,date_convert1.arr);
nd_temp_date1.len = strlen(nd_temp_date1.arr);


get_local_date1();

strcpy(date_convert1.arr,nd_loc_date1.arr); 

}

get_local_date1()
{

	
	EXEC SQL EXECUTE

	DECLARE

	t_date1  date;
	
	BEGIN
	
	  
       	get_locale_date.CONVERT_TO_LOCALE_DATE(to_date(:nd_temp_date1,'DD/MM/YYYY'),:p_language_id,t_date1);  
      
	   :nd_loc_date1 := to_char(t_date1,'DD/MM/YYYY');
	

	END;

	END-EXEC;
        

		if (OERROR)
        err_mesg("SELECTING Date failed",0,"");

}



#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER
/****************************************************************************************************
*
*	Name			Debug.PC 
*
*	Author			K S Sundar
*
*	Purpose			Common routines
*
*					1. RegisterError			To register the error in MEDICOM.
*					2. Trace					To update tracing log (SY_PGM_EVENTS_LOG).
*					3. EnableOrDisableTracing	To enable or disable tracing for the given program.
*					4. GetLastErrorMessage		To get the last error message
*					5. GetMEDICOMMessage		To get message text from MEDICOM.MESSAGE
*
*	****************
*	Important Notes:
*	****************
*	INTERACTIVE_MESSAGING is disabled. To enable it, WINPROC.H needs
*	to be included as disp_message function is used to display the 
*	message interactively - K S Sundar (Apr 23, 2003).
*
*   ====================
*	Modification History  
*   ===============================================================
*	Date		Person			Remarks
*   ===============================================================
*	Apr 22,2003	K S Sundar		Created
*							
*	Jun 30,2003	N K Nanjayan	INSERT INTO SY_PGM_EVENTS_LOG is modified:
*								Column-list added.
*
*	Sep 16,2003	K S Sundar		RegisterError Procedure modified:
*								Following new arguments added and passed 
*								to APPPRINT.register_error:
*								1. PReportFileName
*								2. PLocationType
*								3. PLocationCode
*								4. PPrinterID
*								5. PPrinterName
*								6. PQueueName
****************************************************************************************************/

/*
* Header Files.
*/
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <windows.h>
#include <time.h>
#include <string.h>
#include <Debug.h>

/*
* Define constants
*/
# define ORACLE_ERROR				(sqlca.sqlcode < 0)
# define ORACLE_RESOURCE_BUSY		(sqlca.sqlcode == 54)
# define ORACLE_NODATAFOUND 		(sqlca.sqlcode == 1403)
# define ORACLE_NULLCOLUMNFETCHED 	(sqlca.sqlcode == 1405)
# define ERR_MESG     				0

/*
* Declare Bind variables
*/
EXEC SQL BEGIN DECLARE SECTION;

	varchar BVMsgID[16];				// Message ID
	varchar BVMsgText[100];				// Message Text
	varchar BVPGMID[30];				// Program ID
	varchar BVFunctionName[30];			// For Program Tracing
	varchar BVTraceMsg[1024];			// For Program Tracing	
	varchar BVTracingYN[2];				// For Program Tracing
	varchar BVInteractiveTracingYN[2];	// For Program Tracing
	varchar BVPurgeAlwaysYN[2];			// For Program Tracing
	varchar BVComputerName[16];			// For Program Tracing
	int		BVSeqNo;					// For Program Tracing

	VARCHAR BVWorkstationID[64];
 	VARCHAR BVFacilityID[64];
 	VARCHAR BVModuleID[64];
 	VARCHAR BVDocumentID[64];
	VARCHAR BVReportFileName[256];
 	VARCHAR BVLocationType[64];
	VARCHAR BVLocationCode[64];
	VARCHAR BVPrinterID[64];
	VARCHAR BVPrinterName[64];
	VARCHAR BVQueueName[64];

 	VARCHAR BVErrorText[1024];  		// APPPRINT.Get_Routing_Printers Database Procedure

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;


/*******************************************************************************************
*
* Function 	GetLastErrorMessage
* 
* Author 	K S Sundar
*
* Date 		Dec 17, 2002
*
* Purpose 	Fetches the error message of GetLastError.
*
*******************************************************************************************/

void GetLastErrorMessage()
{
	LPVOID lpMsgBuf;	

	strcpy(GVLastErrorMessage,"");

	FormatMessage
	( 
		FORMAT_MESSAGE_ALLOCATE_BUFFER | 
		FORMAT_MESSAGE_FROM_SYSTEM | 
		FORMAT_MESSAGE_IGNORE_INSERTS,
		NULL,
		GetLastError(),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language
		(LPTSTR) &lpMsgBuf,
		0,
		NULL 
	);
	
	strcpy(GVLastErrorMessage,"");
	sprintf(GVLastErrorMessage,"%d-%s", GetLastError(), lpMsgBuf);
	strtok(GVLastErrorMessage,"\n");

} /* GetLastErrorMessage */


/*******************************************************************************************
*
* Function 	Trace
* 
* Author 	K S Sundar
*
* Date 		Dec 12, 2002
*
* Purpose 	Writes the tracing message to SY_PGM_EVENTS_LOG table.
*
*******************************************************************************************/

void Trace(char *function_name, char *msg)
{

	strcpy(BVPGMID.arr,GVProgramID);
	BVPGMID.len = strlen(BVPGMID.arr);

	strcpy(BVFunctionName.arr,function_name);
	BVFunctionName.len = strlen(BVFunctionName.arr);

	strcpy(BVTraceMsg.arr,msg);
	BVTraceMsg.len = strlen(BVTraceMsg.arr);

	//if (IS_INTERACTIVE_TRACING) disp_message(ERR_MESG,msg);

	/*
	* Get the maximum seqno.
	*/
	BVSeqNo = 0;
	EXEC SQL SELECT MAX(NVL(SEQNO,0))
		 INTO   :BVSeqNo
		 FROM   sy_pgm_events_log
	 WHERE  PGMID = :BVPGMID;

	if(sqlca.sqlcode < 0)
	{
		sprintf(GVTraceMsg,"SELECT ON sy_pgm_events_log failed : %s",sqlca.sqlerrm.sqlerrmc);
		//if (IS_INTERACTIVE_TRACING) disp_message(ERR_MESG,GVTraceMsg);
	}

	/*
	* Insert the record in sy_pgm_events_log table.
	*/
	BVSeqNo = BVSeqNo + 1;
	EXEC SQL 
	INSERT INTO sy_pgm_events_log
	(
		dbuserid,
		pgmid, 
		machineid, 
		seqno, 
		timestamp, 
		functionname, 
		message
	)
	VALUES
	(
		USER, 
		:BVPGMID, 
		:BVComputerName, 
		:BVSeqNo, 
		SYSDATE, :
		BVFunctionName, 
		:BVTraceMsg
	);

	if(sqlca.sqlcode < 0)
	{
		sprintf(GVTraceMsg,"INSERT ON sy_pgm_events_log failed : %s",sqlca.sqlerrm.sqlerrmc);
		//if (IS_INTERACTIVE_TRACING) disp_message(ERR_MESG,GVTraceMsg);
	}
	else
		EXEC SQL COMMIT;
}


/*******************************************************************************************
*
* Function 	RegisterError
* 
* Author 	K S Sundar
*
* Date 		Dec 12, 2002
*
* Purpose 	1. Calls APPPRINT.register_error backend procedure 
*			   to register the error
*			2. Call Trace function to insert the error in tracing log.
*
*******************************************************************************************/
void RegisterError
(
	char *PFacilityID, 
	char *PModuleID, 
	char *PWorkstationID, 
	char *PDocumentID,
	char *PReportFileName,	 
	char *PLocationType,	 
	char *PLocationCode,	 
	char *PPrinterID,	 
	char *PPrinterName,	 
	char *PQueueName, 
	char *PFunctionName, 
	char *PMsg
)
{ 
	char LVFunctionName[64];
	
	strcpy(LVFunctionName,"RegisterError");

	if (IS_TRACING) Trace(LVFunctionName,"Begin");

	strcpy(BVFacilityID.arr,PFacilityID);
	BVFacilityID.len = strlen(BVFacilityID.arr);

	strcpy(BVModuleID.arr,PModuleID);
	BVModuleID.len = strlen(BVModuleID.arr);

	strcpy(BVWorkstationID.arr,PWorkstationID);
	BVWorkstationID.len = strlen(BVWorkstationID.arr);

	strcpy(BVDocumentID.arr,PDocumentID);
	BVDocumentID.len = strlen(BVDocumentID.arr);
	
	strcpy(BVReportFileName.arr,PReportFileName);
	BVReportFileName.len = strlen(BVReportFileName.arr);

	strcpy(BVLocationType.arr,PLocationType);
	BVLocationType.len = strlen(BVLocationType.arr);

	strcpy(BVLocationCode.arr,PLocationCode);
	BVLocationCode.len = strlen(BVLocationCode.arr);

	strcpy(BVPrinterID.arr,PPrinterID);
	BVPrinterID.len = strlen(BVPrinterID.arr);

	strcpy(BVPrinterName.arr,PPrinterName);
	BVPrinterName.len = strlen(BVPrinterName.arr);

	strcpy(BVQueueName.arr,PQueueName);
	BVQueueName.len = strlen(BVQueueName.arr);

	BVErrorText.arr[0] = '\0';
	BVErrorText.arr[BVErrorText.len] = 0;    /* added by Aparna */

	if (strcmp(PMsg,"") == 0)
	{
		if (ORACLE_ERROR || ORACLE_RESOURCE_BUSY || ORACLE_NODATAFOUND)
			sprintf(BVErrorText.arr,"Error at %s : <%s>", PFunctionName, sqlca.sqlerrm.sqlerrmc);
		else
			sprintf(BVErrorText.arr,"Error at %s",PFunctionName);  /* added p_functionName by aparna*/
	}
	else
	{
		/* Blank Message. Get oracle error message */
		strcpy(BVErrorText.arr,PMsg);
	}
	BVErrorText.len = strlen(BVErrorText.arr);
	if (IS_TRACING) Trace(LVFunctionName,BVErrorText.arr);

	EXEC SQL EXECUTE 
	BEGIN 
		APPPRINT.register_error
		(
			:BVFacilityID,
			:BVModuleID,
			:BVWorkstationID,
			:BVDocumentID,
			:BVReportFileName,
			:BVLocationType,
			:BVLocationCode,
			:BVPrinterID,
			:BVPrinterName,
			:BVQueueName,
			:BVErrorText	
		);
    	   END ;
	END-EXEC ; 		


	if (IS_TRACING) Trace(LVFunctionName,"End");

} // void RegisterError

/*******************************************************************************************
*
* Function 	EnableOrDisableTracing
* 
* Author 	K S Sundar
*
* Date 		Dec 12, 2002
*
* Purpose 	1. Reads SY_PGM_EVENTS_CTL table
*			2. Enables or disables tracing.
*
*******************************************************************************************/

void EnableOrDisableTracing()
{
   	char	LVMachineName[20];
	DWORD	LVMachineNo = 20;
	int		LVAllMachinesYN = 0;

	strcpy(BVPGMID.arr,GVProgramID);
	BVPGMID.len = strlen(BVPGMID.arr);

	/*
	*  Get the computer name.
	*/
	GetComputerName(LVMachineName, &LVMachineNo );
	strcpy(BVComputerName.arr, LVMachineName);
	BVComputerName.len = strlen(BVComputerName.arr);

	/*
	*  Check if tracing is ON for this program for this machine id.
	*/
	strcpy(BVTracingYN.arr,"");
	EXEC SQL 
	SELECT NVL(tracingyn,'N'), NVL(interactivetracingyn,'N'), NVL(purgealwaysyn,'N')
	INTO   :BVTracingYN, :BVInteractiveTracingYN, :BVPurgeAlwaysYN
	FROM   sy_pgm_events_ctl
	WHERE  PGMID = :BVPGMID
	AND    MACHINEID = :BVComputerName;

	BVTracingYN.len = strlen(BVTracingYN.arr);
	BVInteractiveTracingYN.len = strlen(BVInteractiveTracingYN.arr);
	BVPurgeAlwaysYN.len = strlen(BVPurgeAlwaysYN.arr);

	if(sqlca.sqlcode < 0 || sqlca.sqlcode == 1403 || _stricmp(BVTracingYN.arr,"N")==0)
	{
		IS_TRACING = 0;
	}
	else
		IS_TRACING = 1;

	if (sqlca.sqlcode == 1403)	// Tracing is not on for this machine.
	{
		/*
		*  Check if tracing is ON for this program (for all machines).
		*/
		strcpy(BVTracingYN.arr,"");
		EXEC SQL 
		SELECT NVL(tracingyn,'N'), NVL(interactivetracingyn,'N'), NVL(purgealwaysyn,'N')
		INTO   :BVTracingYN, :BVInteractiveTracingYN, :BVPurgeAlwaysYN
		FROM   sy_pgm_events_ctl
		WHERE  PGMID	 = :BVPGMID
		AND    machineid = 'ALL';

		BVTracingYN.len = strlen(BVTracingYN.arr);
		BVInteractiveTracingYN.len = strlen(BVInteractiveTracingYN.arr);
		BVPurgeAlwaysYN.len = strlen(BVPurgeAlwaysYN.arr);


		if(sqlca.sqlcode < 0 || sqlca.sqlcode == 1403 || _stricmp(BVTracingYN.arr,"N")==0)
			IS_TRACING = 0;
		else
		{
			IS_TRACING = 1;
			LVAllMachinesYN = 1;
		}

	}

	if (IS_TRACING)
	{
		/*
		* Enable or disable interactive tracing.
		*/
		if (strcmp(BVInteractiveTracingYN.arr,"Y") == 0)
			IS_INTERACTIVE_TRACING = 1;
		else
			IS_INTERACTIVE_TRACING = 0;

		/*
		* Purge tracing records for PrintDocument program if purging is enabled.
		*/
		if (strcmp(BVPurgeAlwaysYN.arr,"Y") == 0)
		{
			if (LVAllMachinesYN)
			{
				EXEC SQL 
				DELETE  sy_pgm_events_log
				WHERE   PGMID = :BVPGMID;
			}
			else
			{
				EXEC SQL 
				DELETE  sy_pgm_events_log
				WHERE   PGMID = :BVPGMID
				AND     MACHINEID = :BVComputerName;
			}
		}
	}

} /* void EnableOrDisableTracing() */



/*
*
* Function  GetMEDICOMMessage
* Author    K S Sundar
* Purpose   To get the MEDICOM error message.
*
*/
void GetMEDICOMMessage(l_errid, l_msg_desc)
char *l_errid, *l_msg_desc;
{
	char LVFunctionName[64];

	if (IS_TRACING)
	{
		strcpy(LVFunctionName, "GetMEDICOMMessage()");
		Trace(LVFunctionName,"Begin");
	}

	BVMsgID.arr[0] = '\0';
	strcpy(BVMsgID.arr,l_errid);
	BVMsgID.len = strlen(BVMsgID.arr);

	strcpy(BVMsgText.arr,"");
	EXEC SQL 
	SELECT MESSAGE_TEXT
	INTO   :BVMsgText
	FROM   MESSAGE
	WHERE  MESSAGE_ID = :BVMsgID;

	if(sqlca.sqlcode < 0 || sqlca.sqlcode == 1403)
	{
		strcpy(l_msg_desc,sqlca.sqlerrm.sqlerrmc);
		sprintf(l_errid,"%d",sqlca.sqlcode);
	}
	else 
	{
		BVMsgText.arr[BVMsgText.len] = '\0';
		strcpy(l_msg_desc,BVMsgText.arr);
	}

	if (IS_TRACING) Trace(LVFunctionName,l_msg_desc);
	if (IS_TRACING) Trace(LVFunctionName,"End");

}

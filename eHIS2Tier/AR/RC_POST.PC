#include <stdio.h> 
#include <string.h>
#include <math.h>

                 

#define OERROR (sqlca.sqlcode < 0)

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)
/*
#define DEBUG 0
*/

EXEC SQL BEGIN DECLARE SECTION;

 VARCHAR    l_hdr_acc_entity_code               [5],
            l_hdr_doc_type_code                 [7],
            l_hdr_doc_num                       [9],
            l_hdr_last_line_num                 [5],
            l_hdr_doc_date                      [15],
            l_hdr_doc_ref                       [11],
            l_hdr_cust_code                     [9],
            l_hdr_main_acc1_code                [7],
            l_hdr_main_acc2_code                [5],
            l_hdr_subledger_group_code          [4],
            l_hdr_subledger_line_code           [9],
            l_hdr_dept_code                     [7],
            l_hdr_product_group_code            [4],
            l_hdr_product_line_code             [5],
            l_hdr_amt_local                     [17],
            l_hdr_narration                     [51],
            l_hdr_post_month                    [3],
            l_hdr_post_year                     [5],
            l_hdr_currency_code                 [7],
            l_hdr_exchg_rate                    [15],
            l_hdr_misc_cust_long_name           [41],
            l_hdr_misc_cust_short_name          [16],
            l_hdr_misc_cust_add1_desc           [31],
            l_hdr_misc_cust_add2_desc           [31],
            l_hdr_misc_cust_add3_desc           [31],
            l_hdr_misc_cust_zip_desc            [31],
            l_hdr_misc_long_name_ch             [41],
            l_hdr_misc_short_name_ch            [16],
            l_hdr_misc_add1_desc_ch             [31],
            l_hdr_misc_add2_desc_ch             [31],
            l_hdr_misc_add3_desc_ch             [31],
            l_hdr_misc_zip_desc_ch              [31],
            l_hdr_tel_num                       [31],
            l_hdr_contact_name                  [41],
            l_hdr_contact_name_title            [41],
            l_hdr_rowid                         [31],
			l_consolidated_yn                   [2],
			l_bank_desc                         [31],
            l_hdr_ar_interface_cd               [3],

            l_line_main_acc1_code                  [7],
            l_line_main_acc2_code                  [5],
            l_line_dept_code                       [7],
            l_line_product_group_code              [4],
            l_line_product_line_code               [5],
            l_line_subledger_group_code            [4],
            l_line_subledger_line_code             [9],
            l_line_amt_local                       [17],
            l_line_line_num                        [5],
            l_line_org_doc_type_code               [7],
            l_line_org_doc_num                     [9],
            l_line_line_type_code                  [2],
            l_line_narration                       [51],
            l_line_acc_entity_code                 [5],

            l_hdr_ar_cheque_num                    [11],
            l_hdr_ar_cheque_date                   [12],
            df_param_ref_num                       [10],
	    l_episode_type                         [2],
	    l_episode_id                           [9],
	    l_patient_id                           [11],
	    l_visit_id                             [5],
	    l_doc_type_code                        [7],
	    l_doc_num                              [9];

VARCHAR  d_interface_code[2],
         d_pat_doc_type_code          [7],
         d_pat_doc_num                [9],
         d_pat_patient_id             [21],
         d_pat_bill_doc_type_code     [7],
         d_pat_bill_num               [9],
         d_pat_inv_doc_type_code      [7],
         d_pat_inv_doc_num            [9],
         d_pat_bill_date              [12],
         d_pat_rowid                  [31];

int         l_ar_pend_last_doc_line_num;

double      l_line_amt_total = 0;

double       d_pat_amount ,
		temp_pend_amt,
		temp_amount,
             d_pat_abs_amount ;

double      l_ar_pend_doctor_fee_amt = 0,
            l_ar_pend_pending_amt    = 0,
            l_ar_pend_hosp_charges   = 0,
            doctor_fees_to_be_paid   = 0;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;


extern long atol();
extern double atof();

ar_rec_posting(
            passed_acc_entity_code,
            passed_doc_type_code,
            passed_doc_num,
            passed_last_line_num,
            passed_doc_date,
            passed_doc_ref,
            passed_cust_code,
            passed_main_acc1_code,
            passed_main_acc2_code,
            passed_subledger_group_code,
            passed_subledger_line_code,
            passed_dept_code,
            passed_product_group_code,
            passed_product_line_code,
            passed_amt_local,
            passed_narration,
            passed_post_month,
            passed_post_year,
            passed_currency_code,
            passed_exchg_rate,
            passed_misc_cust_long_name,
            passed_misc_cust_short_name,
            passed_misc_cust_add1_desc,
            passed_misc_cust_add2_desc,
            passed_misc_cust_add3_desc,
            passed_misc_cust_zip_desc,
            passed_misc_long_name_ch,
            passed_misc_short_name_ch,
            passed_misc_add1_desc_ch,
            passed_misc_add2_desc_ch,
            passed_misc_add3_desc_ch,
            passed_misc_zip_desc_ch,
            passed_tel_num,
            passed_contact_name,
            passed_contact_name_title,
            passed_rowid,
            l_ar_interface,
            passed_doc_date_chking,
            passed_last_rec_doc_dt,
            passed_cheque_num,
            passed_cheque_date,
			passed_bank_desc)
char passed_acc_entity_code       [  ],
     passed_doc_type_code         [  ],
     passed_doc_num               [  ],
     passed_last_line_num         [  ],
     passed_doc_date              [  ],
     passed_doc_ref               [  ],
     passed_cust_code             [  ],
     passed_main_acc1_code        [  ],
     passed_main_acc2_code        [  ],
     passed_subledger_group_code  [  ],
     passed_subledger_line_code   [  ],
     passed_dept_code             [  ],
     passed_product_group_code    [  ],
     passed_product_line_code     [  ],
     passed_amt_local             [  ],
     passed_narration             [  ],
     passed_post_month            [  ],
     passed_post_year             [  ],
     passed_currency_code         [  ],
     passed_exchg_rate            [  ],
     passed_misc_cust_long_name   [  ],
     passed_misc_cust_short_name  [  ],
     passed_misc_cust_add1_desc   [  ],
     passed_misc_cust_add2_desc   [  ],
     passed_misc_cust_add3_desc   [  ],
     passed_misc_cust_zip_desc    [  ],
     passed_misc_long_name_ch     [  ],
     passed_misc_short_name_ch    [  ],
     passed_misc_add1_desc_ch     [  ],
     passed_misc_add2_desc_ch     [  ],
     passed_misc_add3_desc_ch     [  ],
     passed_misc_zip_desc_ch      [  ],
     passed_tel_num               [  ],
     passed_contact_name          [  ],
     passed_contact_name_title    [  ],
     passed_rowid                 [  ],
     l_ar_interface               [  ],
     passed_cheque_num            [  ],
     passed_cheque_date           [  ],
	 passed_bank_desc             [  ];

char passed_doc_date_chking       [ ],
     passed_last_rec_doc_dt       [ ];
{

static int decl_flg = 1;

if (decl_flg) l_decl_line();


strcpy(l_hdr_acc_entity_code.arr,passed_acc_entity_code);
strcpy(l_hdr_doc_type_code.arr,passed_doc_type_code);
strcpy(l_hdr_doc_num.arr,passed_doc_num);
strcpy(l_hdr_last_line_num.arr,passed_last_line_num);
strcpy(l_hdr_doc_date.arr,passed_doc_date);
strcpy(l_hdr_doc_ref.arr,passed_doc_ref);
strcpy(l_hdr_cust_code.arr,passed_cust_code);
strcpy(l_hdr_main_acc1_code.arr,passed_main_acc1_code);
strcpy(l_hdr_main_acc2_code.arr,passed_main_acc2_code);
strcpy(l_hdr_subledger_group_code.arr,passed_subledger_group_code);
strcpy(l_hdr_subledger_line_code.arr,passed_subledger_line_code);
strcpy(l_hdr_dept_code.arr,passed_dept_code);
strcpy(l_hdr_product_group_code.arr,passed_product_group_code);
strcpy(l_hdr_product_line_code.arr,passed_product_line_code);
strcpy(l_hdr_amt_local.arr,passed_amt_local);
strcpy(l_hdr_narration.arr,passed_narration);
strcpy(l_hdr_post_month.arr,passed_post_month);
strcpy(l_hdr_post_year.arr,passed_post_year);
strcpy(l_hdr_currency_code.arr,passed_currency_code);
strcpy(l_hdr_exchg_rate.arr,passed_exchg_rate);
strcpy(l_hdr_misc_cust_long_name.arr,passed_misc_cust_long_name);
strcpy(l_hdr_misc_cust_short_name.arr,passed_misc_cust_short_name);
strcpy(l_hdr_misc_cust_add1_desc.arr,passed_misc_cust_add1_desc);
strcpy(l_hdr_misc_cust_add2_desc.arr,passed_misc_cust_add2_desc);
strcpy(l_hdr_misc_cust_add3_desc.arr,passed_misc_cust_add3_desc);
strcpy(l_hdr_misc_cust_zip_desc.arr,passed_misc_cust_zip_desc);
strcpy(l_hdr_misc_long_name_ch.arr,passed_misc_long_name_ch);
strcpy(l_hdr_misc_short_name_ch.arr,passed_misc_short_name_ch);
strcpy(l_hdr_misc_add1_desc_ch.arr,passed_misc_add1_desc_ch);
strcpy(l_hdr_misc_add2_desc_ch.arr,passed_misc_add2_desc_ch);
strcpy(l_hdr_misc_add3_desc_ch.arr,passed_misc_add3_desc_ch);
strcpy(l_hdr_misc_zip_desc_ch.arr,passed_misc_zip_desc_ch);
strcpy(l_hdr_tel_num.arr,passed_tel_num);
strcpy(l_hdr_contact_name.arr,passed_contact_name);
strcpy(l_hdr_contact_name_title.arr,passed_contact_name_title);
strcpy(l_hdr_rowid.arr,passed_rowid);
strcpy(l_hdr_ar_interface_cd.arr,l_ar_interface);
strcpy(l_hdr_ar_cheque_num.arr,passed_cheque_num);
strcpy(l_hdr_ar_cheque_date.arr,passed_cheque_date);
strcpy(l_bank_desc.arr,passed_bank_desc);


l_hdr_acc_entity_code.len = strlen(l_hdr_acc_entity_code.arr);
l_hdr_doc_type_code.len = strlen(l_hdr_doc_type_code.arr);
l_hdr_doc_num.len = strlen(l_hdr_doc_num.arr);
l_hdr_last_line_num.len = strlen(l_hdr_last_line_num.arr);
l_hdr_doc_date.len = strlen(l_hdr_doc_date.arr);
l_hdr_doc_ref.len = strlen(l_hdr_doc_ref.arr);
l_hdr_cust_code.len = strlen(l_hdr_cust_code.arr);
l_hdr_main_acc1_code.len = strlen(l_hdr_main_acc1_code.arr);
l_hdr_main_acc2_code.len = strlen(l_hdr_main_acc2_code.arr);
l_hdr_subledger_group_code.len = strlen(l_hdr_subledger_group_code.arr);
l_hdr_subledger_line_code.len = strlen(l_hdr_subledger_line_code.arr);
l_hdr_dept_code.len = strlen(l_hdr_dept_code.arr);
l_hdr_product_group_code.len = strlen(l_hdr_product_group_code.arr);
l_hdr_product_line_code.len = strlen(l_hdr_product_line_code.arr);
l_hdr_amt_local.len = strlen(l_hdr_amt_local.arr);
l_hdr_narration.len = strlen(l_hdr_narration.arr);
l_hdr_post_month.len = strlen(l_hdr_post_month.arr);
l_hdr_post_year.len = strlen(l_hdr_post_year.arr);
l_hdr_currency_code.len = strlen(l_hdr_currency_code.arr);
l_hdr_exchg_rate.len = strlen(l_hdr_exchg_rate.arr);
l_hdr_misc_cust_long_name.len = strlen(l_hdr_misc_cust_long_name.arr);
l_hdr_misc_cust_short_name.len = strlen(l_hdr_misc_cust_short_name.arr);
l_hdr_misc_cust_add1_desc.len = strlen(l_hdr_misc_cust_add1_desc.arr);
l_hdr_misc_cust_add2_desc.len = strlen(l_hdr_misc_cust_add2_desc.arr);
l_hdr_misc_cust_add3_desc.len = strlen(l_hdr_misc_cust_add3_desc.arr);
l_hdr_misc_cust_zip_desc.len = strlen(l_hdr_misc_cust_zip_desc.arr);
l_hdr_misc_long_name_ch.len = strlen(l_hdr_misc_long_name_ch.arr);
l_hdr_misc_short_name_ch.len = strlen(l_hdr_misc_short_name_ch.arr);
l_hdr_misc_add1_desc_ch.len = strlen(l_hdr_misc_add1_desc_ch.arr);
l_hdr_misc_add2_desc_ch.len = strlen(l_hdr_misc_add2_desc_ch.arr);
l_hdr_misc_add3_desc_ch.len = strlen(l_hdr_misc_add3_desc_ch.arr);
l_hdr_misc_zip_desc_ch.len = strlen(l_hdr_misc_zip_desc_ch.arr);
l_hdr_tel_num.len = strlen(l_hdr_tel_num.arr);
l_hdr_contact_name.len = strlen(l_hdr_contact_name.arr);
l_hdr_contact_name_title.len = strlen(l_hdr_contact_name_title.arr);
l_hdr_rowid.len = strlen(l_hdr_rowid.arr);
l_hdr_ar_interface_cd.len = strlen(l_hdr_ar_interface_cd.arr);
l_hdr_ar_cheque_num.len   = strlen(l_hdr_ar_cheque_num.arr);
l_hdr_ar_cheque_date.len   = strlen(l_hdr_ar_cheque_date.arr);
l_bank_desc.len   = strlen(l_bank_desc.arr);

#ifdef DEBUG
  sprintf(string_var,"Doc - <%s-%s> \n",l_hdr_doc_type_code.arr,
                    l_hdr_doc_num.arr);
                    disp_message(INFO_MESG,string_var);
#endif


#ifdef DEBUG
   sprintf(string_var," last rec dt -> <%ld>  doc date -> <%ld>\n",
	     passed_last_rec_doc_dt,passed_doc_date_chking);
	     disp_message(INFO_MESG,string_var);
#endif
 
 if (l_hdr_ar_interface_cd.arr[0] == 'O')
      l_gl_doc_insert();

 l_rc_open_rec_line();

 l_line_amt_total = 0;
 
 while (l_fetch_rc_line())
 {
   #ifdef DEBUG
      disp_message(INFO_MESG,"After rec from Rc line \n"); 
   #endif

    l_ar_pend_last_doc_line_num = 1;

#ifdef DEBUG
  disp_message(INFO_MESG,"Before ins gl_insert_line\n");
#endif

/**********************************************************/

 
 if (strcmp(l_consolidated_yn.arr , "Y") == 0)
 {
  
    l_alloc_pat_dtls();

    l_open_pat_cur();


	while(fetch_alloc_pat_dtls())
	{
    
      EXEC SQL 
		   SELECT PEND_AMOUNT, AMOUNT 
		   INTO   :temp_pend_amt, :temp_amount
		   FROM   AR_PATIENT_DTLS
		   WHERE  DOC_TYPE_CODE = :d_pat_inv_doc_type_code 
		   AND    DOC_NUM       =     :d_pat_inv_doc_num
		   AND    BILL_DOC_TYPE_CODE =    :d_pat_bill_doc_type_code
		   AND    BILL_NUM           =  :d_pat_bill_num;

	 
	 if ((temp_pend_amt > 0 ) && (temp_pend_amt >= d_pat_amount) && (temp_amount > 0)) 
            
	   {
	  
	      EXEC SQL  UPDATE AR_PATIENT_DTLS
	     		SET PEND_AMOUNT = PEND_AMOUNT + :d_pat_amount
			WHERE DOC_TYPE_CODE      = :d_pat_inv_doc_type_code 
      			AND   DOC_NUM            =     :d_pat_inv_doc_num
      			AND   BILL_DOC_TYPE_CODE =    :d_pat_bill_doc_type_code
      			AND   BILL_NUM           =  :d_pat_bill_num;

	  	if (OERROR)
        	err_mesg("UPDATE failed on table AR_PATIENT_DTLS",0,"");
	     }

     if ((temp_pend_amt < 0) && (temp_pend_amt <= d_pat_amount) && (temp_amount < 0))
	 {
	  
	      EXEC SQL  UPDATE AR_PATIENT_DTLS
	     		SET PEND_AMOUNT = PEND_AMOUNT + :d_pat_amount
			WHERE DOC_TYPE_CODE      = :d_pat_inv_doc_type_code 
      			AND   DOC_NUM            =     :d_pat_inv_doc_num
      			AND   BILL_DOC_TYPE_CODE =    :d_pat_bill_doc_type_code
      			AND   BILL_NUM           =  :d_pat_bill_num;

	  	if (OERROR)
        	err_mesg("UPDATE failed on table AR_PATIENT_DTLS",0,"");
     	}


     }

   }

/*************************************************************/
    if (l_hdr_ar_interface_cd.arr[0] == 'O')
        l_gl_insert_line();

    if (l_line_line_type_code.arr[0] == 'P')
    {
        l_ar_pend_doctor_fee_amt = 0;
        l_ar_pend_pending_amt    = 0;
        l_ar_pend_hosp_charges   = 0;
        doctor_fees_to_be_paid   = 0;

        l_episode_type.arr[0]  = '\0';
        l_patient_id.arr[0]    = '\0';
        l_episode_id.arr[0]    = '\0';
        l_visit_id.arr[0]      = '\0';

        l_episode_type.len     = 0;
        l_patient_id.len       = 0;
        l_episode_id.len       = 0;
        l_visit_id.len         = 0;

        EXEC SQL SELECT NVL(LAST_DOC_LINE_NUM,1) + 1, NVL(DOCTOR_FEE_AMT,0),
                        NVL(PENDING_AMT,0),
                        NVL(PENDING_AMT,0) - NVL(DOCTOR_FEE_AMT,0),
			EPISODE_TYPE,
			EPISODE_ID,
			VISIT_ID,
			PATIENT_ID
                   INTO :l_ar_pend_last_doc_line_num,
                        :l_ar_pend_doctor_fee_amt,
                        :l_ar_pend_pending_amt,
                        :l_ar_pend_hosp_charges,
                        :l_episode_type,
                        :l_episode_id,
                        :l_visit_id,
                        :l_patient_id
                   FROM AR_PENDING_DOC
                  WHERE CUST_CODE     = :l_hdr_cust_code
                    AND DOC_TYPE_CODE = :l_line_org_doc_type_code
                    AND DOC_NUM       = :l_line_org_doc_num;
        if (OERROR)
            err_mesg("SELECT failed on table AR_PENDING_DOC",0,"");

#ifdef DEBUG
sprintf(string_var,"pend doc fees <%f> pending amt <%f> pend hosp ch <%f>\n",
           l_ar_pend_doctor_fee_amt,l_ar_pend_pending_amt,
           l_ar_pend_hosp_charges);
           disp_message(INFO_MESG,string_var);
sprintf(string_var,"line amt loc is <%f>\n",atof(l_line_amt_local.arr));
disp_message(INFO_MESG,string_var);
#endif

        if (l_ar_pend_doctor_fee_amt > 0.00)
            if (doubcmp(l_ar_pend_pending_amt,atof(l_line_amt_local.arr)) == 0)
                 doctor_fees_to_be_paid  =  l_ar_pend_doctor_fee_amt;
            else if (atof(l_line_amt_local.arr) > l_ar_pend_hosp_charges) 
                  doctor_fees_to_be_paid  = atof(l_line_amt_local.arr) -
                     ((l_ar_pend_hosp_charges > 0)?l_ar_pend_hosp_charges:0);

#ifdef DEBUG
  sprintf(string_var,"doctor fees to be paid <%f>\n", doctor_fees_to_be_paid);
  disp_message(INFO_MESG,string_var);
#endif

         EXEC SQL UPDATE AR_PENDING_DOC
                     SET PENDING_AMT = NVL(PENDING_AMT,0) - :l_line_amt_local,
                         DOCTOR_FEE_AMT = NVL(DOCTOR_FEE_AMT,0) - 
                                 :doctor_fees_to_be_paid,
                         LAST_DOC_LINE_NUM = :l_ar_pend_last_doc_line_num,
                         LAST_UPD_DATE     = SYSDATE
                   WHERE CUST_CODE = :l_hdr_cust_code
                     AND DOC_TYPE_CODE = :l_line_org_doc_type_code
                     AND DOC_NUM       = :l_line_org_doc_num;

         if (OERROR)
             err_mesg("UPDATE failed on table AR_PENDING_DOC",0,"");
         
        /* Commented since "Doctor Fee DF" module is no more supported
        if (doctor_fees_to_be_paid > 0.00)
              ins_df_cust_pmnt_int();
        */
    }
    
    if (l_line_line_type_code.arr[0] == 'A')
    {
    EXEC SQL INSERT INTO AR_PENDING_DOC
        (
         ACC_ENTITY_CODE,
         DOC_TYPE_CODE,
         DOC_NUM,
         LAST_DOC_LINE_NUM,
         CUST_CODE,
         DOC_DATE,
         NARRATION,
         GROSS_AMT,
         PAYABLE_AMT,
         DISCOUNT_AMT,
         PENDING_AMT,
         ALLOCATED_AMT,
         CURRENCY_CODE,
         EXCHG_RATE,
         CUST_REF,
         MAIN_ACC1_CODE,
         MAIN_ACC2_CODE,
         SUBLEDGER_GROUP_CODE,
         SUBLEDGER_LINE_CODE,
         DEPT_CODE,
         PRODUCT_GROUP_CODE,
         PRODUCT_LINE_CODE,
         POST_MONTH,
         POST_YEAR,
         MISC_CUST_LONG_NAME,
         MISC_CUST_SHORT_NAME,
         MISC_CUST_ADD1_DESC,
         MISC_CUST_ADD2_DESC,
         MISC_CUST_ADD3_DESC,
         MISC_CUST_ZIP_DESC,
         MISC_CUST_LONG_NAME_CHINESE,
         MISC_CUST_SHORT_NAME_CHINESE,
         MISC_CUST_ADD1_DESC_CHINESE,
         MISC_CUST_ADD2_DESC_CHINESE,
         MISC_CUST_ADD3_DESC_CHINESE,
         MISC_CUST_ZIP_DESC_CHINESE,
         TEL_NUM,
         CONTACT_NAME,
         CONTACT_NAME_TITLE,
         TRN_TYPE_CODE,
         LAST_UPD_DATE,
		 ADDED_BY_ID,
		 ADDED_DATE,
		 MODIFIED_BY_ID,
		 MODIFIED_DATE
       )
    VALUES
       (
         :l_hdr_acc_entity_code,
         :l_hdr_doc_type_code,
         :l_hdr_doc_num,
         1,
         :l_hdr_cust_code,
         to_date(:l_hdr_doc_date,'DD/MM/YYYY'),
         :l_line_narration,
         :l_line_amt_local * -1,
         :l_line_amt_local * -1,
         0,
         :l_line_amt_local * -1,
         0,
         :l_hdr_currency_code,
         :l_hdr_exchg_rate,
         :l_hdr_doc_ref,
         :l_line_main_acc1_code,
         :l_line_main_acc2_code,
         :l_line_subledger_group_code,
         :l_line_subledger_line_code,
         :l_line_dept_code,
         :l_line_product_group_code,
         :l_line_product_line_code,
         :l_hdr_post_month,
         :l_hdr_post_year,
         :l_hdr_misc_cust_long_name,
         :l_hdr_misc_cust_short_name,
         :l_hdr_misc_cust_add1_desc,
         :l_hdr_misc_cust_add2_desc,
         :l_hdr_misc_cust_add3_desc,
         :l_hdr_misc_cust_zip_desc,
         :l_hdr_misc_long_name_ch,
         :l_hdr_misc_short_name_ch,
         :l_hdr_misc_add1_desc_ch,
         :l_hdr_misc_add2_desc_ch,
         :l_hdr_misc_add3_desc_ch,
         :l_hdr_misc_zip_desc_ch,
         :l_hdr_tel_num,
         :l_hdr_contact_name,
         :l_hdr_contact_name_title,
         '5',
          SYSDATE,
		  USER,
		  SYSDATE,
		  USER,
		  SYSDATE
         );
        
   if (OERROR)
         err_mesg("INSERT failed on table AR_PENDING_DOC",0,"");
   } 

   if (l_line_line_type_code.arr[0] != 'D')
   {
	    l_line_amt_total += atof(l_line_amt_local.arr);
			
      EXEC SQL INSERT INTO AR_CUST_TRN
           (
             ACC_ENTITY_CODE,
             CUST_CODE,
             ORG_DOC_TYPE_CODE,
             ORG_DOC_NUM,
             LINE_NUM,
             DOC_TYPE_CODE,
             DOC_NUM,
             DOC_DATE,
             NARRATION,
             AMOUNT,
             CUST_REF,
             TRN_TYPE_CODE,
			 POST_MONTH,
			 POST_YEAR,
			 BANK_DESC,
			 CHEQUE_NUM,
			 CHEQUE_DATE    
          )
       VALUES
          (
             :l_hdr_acc_entity_code,
             :l_hdr_cust_code,
             :l_line_org_doc_type_code,
             :l_line_org_doc_num,
             :l_ar_pend_last_doc_line_num,
             :l_hdr_doc_type_code,
             :l_hdr_doc_num,
             to_date(:l_hdr_doc_date,'DD/MM/YYYY'),
             :l_line_narration,
             :l_line_amt_local * -1,
             :l_hdr_doc_ref,
            '5',
			:l_hdr_post_month,
            :l_hdr_post_year,
			:l_bank_desc,
			:l_hdr_ar_cheque_num, 
			:l_hdr_ar_cheque_date 
           );

         if (OERROR)
               err_mesg("INSERT failed on table AR_CUST_TRN",0,"");
     }





 }  /**** End of Fetch line loop ****/

   if (atol(passed_last_rec_doc_dt) > atol(passed_doc_date_chking))
   {
      EXEC SQL UPDATE AR_CUSTOMER
                  SET OUTSTANDING_BALANCE_AMT = 
                        NVL(OUTSTANDING_BALANCE_AMT,0) -  :l_line_amt_total
                WHERE CUST_CODE = :l_hdr_cust_code;
    }
    else
    {
      EXEC SQL UPDATE AR_CUSTOMER
                  SET OUTSTANDING_BALANCE_AMT = 
                        NVL(OUTSTANDING_BALANCE_AMT,0) -  :l_line_amt_total,
                      LAST_REC_DOC_TYPE  = :l_hdr_doc_type_code,
                      LAST_REC_DOC_NUM   = :l_hdr_doc_num,
                      LAST_REC_DOC_DATE  = to_date(:l_hdr_doc_date,'DD/MM/YYYY')
                WHERE CUST_CODE = :l_hdr_cust_code;

    }
		
    if (OERROR)
         err_mesg("UPDATE failed on table AR_CUSTOMER",0,"");


 
  EXEC SQL UPDATE AR_REC_HDR
              SET POSTED_FLAG               = 'Y',
                  INTERFACE_FLAG            = 
                        DECODE(:l_hdr_ar_interface_cd,'O','Y','N'),
                  POSTED_DATE               = SYSDATE,
                  POSTED_BY_ID              = USER
            WHERE ROWID = :l_hdr_rowid;

  if (OERROR)
        err_mesg("UPDATE failed on table AR_INV_HDR - AR Posting",0,"");

#ifdef DEBUG
   disp_message(INFO_MESG,"After ar_inv_posting...\n");
#endif

}


l_alloc_pat_dtls()  
{
         
   EXEC SQL DECLARE l_alloc_pat_cur CURSOR FOR		 
		  SELECT DOC_TYPE_CODE,
                      DOC_NUM,
                      INV_DOC_TYPE_CODE,
					  INV_DOC_NUM       ,     
                      BILL_DOC_TYPE_CODE,
                      BILL_NUM,
                      NVL(AMOUNT,0),
					  ABS(nvl(AMOUNT,0)),
                      ROWID
			  FROM AR_PATIENT_ALLOC_DTLS
              WHERE DOC_TYPE_CODE = :l_hdr_doc_type_code
                AND DOC_NUM       = :l_hdr_doc_num
               ORDER BY DOC_TYPE_CODE , DOC_NUM;


}

l_open_pat_cur()
{
    EXEC SQL OPEN l_alloc_pat_cur;

    if (OERROR)
         err_mesg("OPEN failed on cursor l_alloc_pat_cur",0,"");
}

fetch_alloc_pat_dtls()
{
  d_pat_doc_type_code.arr[0]       = '\0';
  d_pat_doc_num.arr[0]             = '\0';
  d_pat_bill_doc_type_code.arr[0]  = '\0';
  d_pat_bill_num.arr[0]            = '\0';
  d_pat_inv_doc_type_code.arr[0] = '\0';
  d_pat_inv_doc_num.arr[0] = '\0';
  d_pat_rowid.arr[0]               = '\0';

  d_pat_doc_type_code.len          = 0;
  d_pat_doc_num.len                = 0;
  d_pat_bill_doc_type_code.len     = 0;
  d_pat_bill_num.len               = 0;
  d_pat_inv_doc_type_code.len = 0;
  d_pat_inv_doc_num.len = 0;
  d_pat_rowid.len                  = 0;

  d_pat_amount      = 0;
  d_pat_abs_amount  =0;

         EXEC SQL FETCH l_alloc_pat_cur
                INTO 
  				  :d_pat_doc_type_code,
                  :d_pat_doc_num,
                  :d_pat_inv_doc_type_code,
                  :d_pat_inv_doc_num,
                  :d_pat_bill_doc_type_code,
                  :d_pat_bill_num,
                  :d_pat_amount,
                  :d_pat_abs_amount,
                  :d_pat_rowid;

	 if (OERROR)
            err_mesg("FETCH failed on cursor l_alloc_pat_cur - rc_post",0,"");

                  
    d_pat_doc_type_code.arr[d_pat_doc_type_code.len]           = '\0';
    d_pat_doc_num.arr[d_pat_doc_num.len]                       = '\0';
    d_pat_bill_doc_type_code.arr[d_pat_bill_doc_type_code.len] = '\0';
    d_pat_bill_num.arr[d_pat_bill_num.len]                     = '\0';
    d_pat_rowid.arr[d_pat_rowid.len]                           = '\0';
    d_pat_inv_doc_type_code.arr[d_pat_inv_doc_type_code.len] = '\0';
    d_pat_inv_doc_num.arr[d_pat_inv_doc_num.len]= '\0';

	 if (LAST_ROW)
      return(0);
     else
      return(1);

}



l_decl_line()
{

   EXEC SQL DECLARE L_CUR_REC_LINE CURSOR FOR
             SELECT AMT_LOCAL,
                    LINE_NUM,
                    MAIN_ACC1_CODE,
                    MAIN_ACC2_CODE,
                    DEPT_CODE,
                    PRODUCT_GROUP_CODE,
                    PRODUCT_LINE_CODE,
                    SUBLEDGER_GROUP_CODE,
                    SUBLEDGER_LINE_CODE,
                    ORG_DOC_TYPE_CODE,
                    ORG_DOC_NUM,
                    LINE_TYPE_CODE,
                    NARRATION,
					CONSOLIDATED_INV_YN
               FROM AR_REC_LINE
              WHERE DOC_TYPE_CODE = :l_hdr_doc_type_code
                AND DOC_NUM       = :l_hdr_doc_num;
}

l_rc_open_rec_line()
{
    EXEC SQL OPEN L_CUR_REC_LINE;

    if (OERROR)
         err_mesg("OPEN failed on cursor L_CUR_REC_LINE",0,"");
}

l_fetch_rc_line()
{
      l_line_main_acc1_code.arr[0]       = '\0';
      l_line_main_acc2_code.arr[0]       = '\0';
      l_line_dept_code.arr[0]            = '\0';
      l_line_product_group_code.arr[0]   = '\0';
      l_line_product_line_code.arr[0]    = '\0';
      l_line_subledger_group_code.arr[0] = '\0';
      l_line_subledger_line_code.arr[0]  = '\0';
      l_line_amt_local.arr[0]            = '\0';
      l_line_line_num.arr[0]             = '\0';

      l_line_org_doc_type_code.arr[0]    = '\0';
      l_line_org_doc_num.arr[0]          = '\0';
      l_line_line_type_code.arr[0]       = '\0';
      l_line_narration.arr[0]            = '\0';
	  l_consolidated_yn.arr[0]           = '\0';

      l_line_main_acc1_code.len          = 0;
      l_line_main_acc2_code.len          = 0;
      l_line_dept_code.len               = 0;
      l_line_product_group_code.len      = 0;
      l_line_product_line_code.len       = 0;
      l_line_subledger_group_code.len    = 0;
      l_line_subledger_line_code.len     = 0;
      l_line_amt_local.len               = 0;
      l_line_line_num.len                = 0;

      l_line_org_doc_type_code.len       = 0;
      l_line_org_doc_num.len             = 0;
      l_line_line_type_code.len          = 0;
      l_line_narration.len               = 0;
	  l_consolidated_yn.len              = 0;


#ifdef DEBUG
      disp_message(INFO_MESG,"Before fetching rec from ar_inv_line\n");
#endif

      EXEC SQL FETCH L_CUR_REC_LINE
                INTO :l_line_amt_local,
                     :l_line_line_num,
                     :l_line_main_acc1_code,
                     :l_line_main_acc2_code,
                     :l_line_dept_code,
                     :l_line_product_group_code,
                     :l_line_product_line_code,
                     :l_line_subledger_group_code,
                     :l_line_subledger_line_code,
                     :l_line_org_doc_type_code,
                     :l_line_org_doc_num,
                     :l_line_line_type_code,
                     :l_line_narration,
					 :l_consolidated_yn;

      if (OERROR)
         err_mesg("FETCH failed on cursor CUR_REC_LINE - rc_post",0,"");

l_line_line_num.arr[l_line_line_num.len] = '\0';
l_line_main_acc1_code.arr[l_line_main_acc1_code.len]             = '\0';
l_line_main_acc2_code.arr[l_line_main_acc2_code.len]             = '\0';
l_line_dept_code.arr[l_line_dept_code.len]                       = '\0';
l_line_product_group_code.arr[l_line_product_group_code.len]     = '\0';
l_line_product_line_code.arr[l_line_product_line_code.len]       = '\0';
l_line_subledger_group_code.arr[l_line_subledger_group_code.len] = '\0';
l_line_subledger_line_code.arr[l_line_subledger_line_code.len]   = '\0';
l_line_amt_local.arr[l_line_amt_local.len]                       = '\0';

l_line_org_doc_type_code.arr[l_line_org_doc_type_code.len]       = '\0';
l_line_org_doc_num.arr[l_line_org_doc_num.len]                   = '\0';
l_line_line_type_code.arr[l_line_line_type_code.len]             = '\0';
l_line_narration.arr[l_line_narration.len]                       = '\0';
l_consolidated_yn.arr[l_consolidated_yn.len] = '\0';

#ifdef DEBUG
      sprintf(string_var,"After fetching rec count is <%d> \n",sqlca.sqlerrd[2]);
      disp_message(INFO_MESG,string_var);
#endif

  if (LAST_ROW)
      return(0);
  else
      return(1);

}

l_gl_doc_insert()
{
#ifdef DEBUG
   sprintf(string_var,"Inside gl_doc_insert...\n");
   disp_message(INFO_MESG,string_var);
#endif 

   EXEC SQL INSERT INTO GL_TXN_DOC_HDR
          (
           ACC_ENTITY_CODE,
           DOC_TYPE_CODE,
           BATCH_NUM,
           DOC_NUM,
           DOC_DATE,
           DOC_REF,
           NARRATION,
           POST_MONTH,
           POST_YEAR,
           CTRL_AMT,
           DOC_NATURE,
           UNIT_TYPE_CODE,
           CURRENCY_CODE,
           EXCHG_RATE,
           ERROR_FLAG,
           ADDED_BY_ID,
           MODIFIED_BY_ID,
           ADDED_DATE,
           MODIFIED_DATE,
           MAX_LINE_NUM,
           MODULE_ID,
           TXN_TYPE_DESC,
           STD_JV_REF,
           PRINT_FLAG
           )
      VALUES
         (
           :l_hdr_acc_entity_code,
           :l_hdr_doc_type_code,
           0,
           :l_hdr_doc_num,
           to_date(:l_hdr_doc_date,'DD/MM/YYYY'),
           SUBSTR(:l_hdr_doc_ref,1,10),
           :l_hdr_narration,
           :l_hdr_post_month,
           :l_hdr_post_year,
           0,
           NULL,
           NULL,
           NULL,
           NULL,
           NULL,
           USER,
           USER,
           SYSDATE,
           SYSDATE,
           :l_hdr_last_line_num,
           'AR',
           NULL,
           NULL,
           NULL
         );

    if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_HDR",0,"");
            
  EXEC SQL INSERT INTO GL_TXN_DOC_LINE
         (
           ACC_ENTITY_CODE,
           BATCH_NUM,
           DOC_TYPE_CODE,
           DOC_NUM,
           MAIN_ACC1_CODE,
           MAIN_ACC2_CODE,
           SUBLEDGER_GROUP_CODE,
           SUBLEDGER_LINE_CODE,
           DEPT_CODE,
           PRODUCT_GROUP_CODE,
           PRODUCT_LINE_CODE,
           FOREIGN_AMT,
           LOCAL_AMT,
           NARRATION,
           LINE_NUM,
           INTER_ACC_ENTITY,
		   CUST_SUPP_CODE
         )
      VALUES
         (
           :l_hdr_acc_entity_code,
           0, 
           :l_hdr_doc_type_code,
           :l_hdr_doc_num,
           :l_hdr_main_acc1_code,
           :l_hdr_main_acc2_code,
           :l_hdr_subledger_group_code,
           :l_hdr_subledger_line_code,
           :l_hdr_dept_code,
           :l_hdr_product_group_code,
           :l_hdr_product_line_code,
           NULL,
           :l_hdr_amt_local,
           :l_hdr_narration,
           '0',
           NULL,
		   :l_hdr_cust_code 
         );

     if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_LINE",0,"");    

#ifdef DEBUG
   disp_message(INFO_MESG,"After gl_doc_insert...\n");
#endif 
}

l_gl_insert_line()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside gl_insert_line...\n");
#endif 

  EXEC SQL INSERT INTO GL_TXN_DOC_LINE
         (
           ACC_ENTITY_CODE,
           BATCH_NUM,
           DOC_TYPE_CODE,
           DOC_NUM,
           MAIN_ACC1_CODE,
           MAIN_ACC2_CODE,
           SUBLEDGER_GROUP_CODE,
           SUBLEDGER_LINE_CODE,
           DEPT_CODE,
           PRODUCT_GROUP_CODE,
           PRODUCT_LINE_CODE,
           FOREIGN_AMT,
           LOCAL_AMT,
           NARRATION,
           LINE_NUM,
           INTER_ACC_ENTITY,
		   CUST_SUPP_CODE
         )
     VALUES  
         (
           :l_hdr_acc_entity_code,
           0,
           :l_hdr_doc_type_code,
           :l_hdr_doc_num,
           :l_line_main_acc1_code,
           :l_line_main_acc2_code,
           :l_line_subledger_group_code,
           :l_line_subledger_line_code,
           :l_line_dept_code,
           :l_line_product_group_code,
           :l_line_product_line_code,
           null,
           :l_line_amt_local * -1,
           :l_line_narration,
           :l_line_line_num,
           null,
		   :l_hdr_cust_code 
         );

     if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_LINE - for line",0,"");    




#ifdef DEBUG
   disp_message(INFO_MESG,"After gl_insert_line...\n");
#endif 
}

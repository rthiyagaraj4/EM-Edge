/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : ARBGLEXP.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 14-MAR-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                               */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        SY_PROG_CONTROL          Update/Lookup             */
/*         2.        SY_PROG_MESG                Insert                 */
/*         3.        AR_INV_HDR               Query/Update              */
/*         4.        AR_INV_LINE                 Query                  */
/*         5.        AR_DN_HDR                Query/Update              */
/*         6.        AR_DN_INV_HDR               Query                  */
/*         7.        AR_DN_LINE                  Query                  */
/*         8.        AR_CN_HDR                Query/Update              */
/*         9.        AR_CN_INV_HDR               Query                  */
/*        10.        AR_CN_LINE                  Query                  */
/*        11.        AR_ADJ_HDR               Query/Update              */
/*        12.        AR_ADJ_INV_HDR              Query                  */
/*        13.        AR_ADJ_LINE                 Query                  */
/*        14.        AR_PAY_HDR               Query/Update              */
/*        15.        AR_PAY_LINE                 Query                  */
/*        16.        AR_REC_HDR               Query/Update              */
/*        17.        AR_REC_LINE                 Query                  */
/*        18.        AR_GL_DISTRBN_TEMP       Query/Update              */
/*        19.        GL_TXN_DOC_HDR           Insert/Delete             */
/*        20.        GL_TXN_DOC_LINE          Insert/Delete             */
/*        21.        AR_CASHIER               Query/Update                  */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                       log_err_mesg                   */
/*         2.        POST                validate_posting_acct          */
/*         3.        POST_DOC            post_doc (GL posting acc val)  */
/*                                                                      */
/*                                                                      */
/************************************************************************/
                     
#include <stdio.h>
#include <math.h>
#include <string.h>
//#include "winexecc.h"
#include "gl.h"

#define OERROR (sqlca.sqlcode < 0)

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)

#define RESOURCE_BUSY        (sqlca.sqlcode == -54)

#define DEBUG 0

#define VIEW_LOG_FILE 1


EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd[132];

   VARCHAR  nd_facility_id              [3],
			nd_session_id               [16],
            nd_pgm_date                 [25],
				p_language_id			    [3],
			nd_acc_entity_code          [5],

            nd_exp_year                 [5],
            nd_exp_month                [3],
            nd_interface_mode           [2],
            nd_inv_doc_type_code        [7],
            nd_dn_doc_type_code         [7],
            nd_cn_doc_type_code         [7],
            nd_adj_doc_type_code        [7],
            nd_rec_doc_type_code        [7],
            nd_pay_doc_type_code        [7],

            nd_tmp_doc_type_code        [7],

            d_ar_hdr_doc_type_code      [7],
            d_ar_hdr_doc_num            [9],
            d_ar_hdr_doc_date           [12],
            d_ar_hdr_cust_ref           [16],
			d_cust_code                 [9],
			d_acc_entity_code           [5],
            d_ar_hdr_narration          [51],
            d_ar_hdr_main_acc1_code     [9],
            d_ar_hdr_main_acc2_code     [7],
            d_ar_hdr_dept_code          [7],
            d_ar_hdr_product_group_code [4],
            d_ar_hdr_product_line_code  [5],
            d_ar_hdr_sub_group_code[4],
            d_ar_hdr_sub_line_code [9],
            d_ar_hdr_amount             [17],
            d_ar_off_rec_hdr_main_acc1_code     [9],
            d_ar_off_rec_hdr_main_acc2_code     [7],
            d_ar_off_rec_hdr_dept_code          [7],
            d_ar_off_rec_hdr_product_group_code [4],
            d_ar_off_rec_hdr_product_line_code  [5],
            d_ar_off_rec_hdr_sub_group_code[4],
            d_ar_off_rec_hdr_sub_line_code [9],

			d_ar_off_rec_hdr_amount     [17],

            d_ar_hdr_rowid              [31],
			d_ar_off_hdr_rowid          [31],
            d_gd_hdr_cust_ref       [16],


            d_ar_hdr_adj_type           [3],
            d_ar_hdr_org_doc_type_code  [7],
            d_ar_hdr_org_doc_num        [9],

            d_ar_line_main_acc1_code    [9],
            d_ar_line_main_acc2_code    [7],
            d_ar_line_dept_code         [7],
            d_ar_line_product_group_code[4],
            d_ar_line_product_line_code [5],
            d_ar_line_sub_group_code[4],
            d_ar_line_sub_line_code [9],
            d_ar_line_amt_local         [17],
            d_ar_line_narration         [51],
			d_module_valid_id            [3],

            d_ar_hdr_doc_ref            [16],

            d_narration1                [51],
            d_cust_ref1                 [16],

            d_ar_bank_reconcile_flg     [3],
            d_chk_main_acc1_code        [9],
            d_chk_main_acc2_code        [7],
            d_chk_dept_code             [7],
            d_chk_product_group_code    [4],
            d_chk_product_line_code     [5],
            d_chk_sub_group_code  [4],
            d_chk_sub_line_code   [9],

            ar_interface_code           [2],
            d_gl_dist_doc_type_code     [7],
            d_gl_dist_doc_num           [9],
            d_gl_dist_doc_date          [12],

            d_sy_acc_rowid              [31],
			
			l_gl_cust_ref              [16],
            l_gl_narration             [51],
            l_gd_debit_amt             [17],
            l_gd_credit_amt            [17],
            l_gd_amount                [17],
            l_gd_cheque_num            [11],
            l_prv_cheque_num           [11],
            l_gd_cheque_date           [15],
            l_gd_amount_negative       [17],
            l_gd_trn_type_code         [5];


     int    d_ar_hdr_post_month,
            d_ar_hdr_post_year,
            d_ar_run_line_num = 0;

    int     d_gl_dist_post_month,
            d_gl_dist_post_year;


	int		d_ar_switch =0;

	int     l_gd_hdr_sign_amount,
            l_gd_sign_amount;    /* sign(amount)  0 -> 0   */
                                 /*               1 -> +ve */
                                 /*              -1 -> -ve */



/* These variables ar used for calling post_doc (Posting acc validation) */

int  d_curr_year;
int  d_curr_month;
int  d_num_of_acc_periods;
char d_summ_flag;
     
/*                                                                         */

char mesg1[300];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
 
#include "winproc.h"


   char		tempstring                 [50],
            l_gd_hdr_amount            [19],
            l_gd_hdr_amt_negative      [19];
 

   char tmp_main_acc1_code[10],
        tmp_main_acc2_code[10],
        tmp_dept_code[10],
        tmp_product_group_code[10],
        tmp_product_line_code[10],
        tmp_sub_group_code[10],
        tmp_sub_line_code[10];

  char  tmp_doc_type_code[10],
        tmp_doc_num[10],
        tmp_doc_date [12],
        valid_flag;

   int  tmp_post_month,
        tmp_post_year;

int t_type = 0;

int g_err_typ;

char g_err_id[10],
     g_err_msg[80];

char trn_desc[8][20] = {"","Invoice","Debit Note","Credit Note","Adjustment",
                        "Receipt","Payment"};

void proc_main(argc,argv)
char *argv[];
int argc;
{
   char mesg1[50];

   if (argc != 5)
   { 
    int i = 0;
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(g_pgm_id,"ARBGLEXP");

 
   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);
 
   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   if(sql_connect() == -1)
   {
      disp_message(ERR_MESG,"Error in connecting to Oracle\n");
      sprintf(mesg1,"Error is %s\n",sqlca.sqlerrm.sqlerrmc);
      disp_message(ERR_MESG,mesg1);
      proc_exit();
   }              

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   strcpy(g_facility_id,argv[4]);

   set_meduser_role();
   	
	strcpy(p_language_id.arr,l_language_id.arr);
	p_language_id.len = l_language_id.len;


   chk_active();

   start_prog_control();
   start_prog_msg();
   nd_exp_month.arr[0]         = '\0';
   nd_exp_year.arr[0]          = '\0';
   nd_interface_mode.arr[0]    = '\0';
   nd_inv_doc_type_code.arr[0] = '\0';
   nd_dn_doc_type_code.arr[0]  = '\0';
   nd_cn_doc_type_code.arr[0]  = '\0';
   nd_adj_doc_type_code.arr[0] = '\0';
   nd_rec_doc_type_code.arr[0] = '\0';
   nd_pay_doc_type_code.arr[0] = '\0';
   

   nd_exp_month.len            = 0;
   nd_exp_year.len             = 0;
   nd_interface_mode.len       = 0;
   nd_inv_doc_type_code.len    = 0;
   nd_dn_doc_type_code.len     = 0;
   nd_cn_doc_type_code.len     = 0;
   nd_adj_doc_type_code.len    = 0;
   nd_rec_doc_type_code.len    = 0;
   nd_pay_doc_type_code.len    = 0;

   EXEC SQL SELECT operating_facility_id,
				   PARAM1,PARAM2,PARAM3,NVL(PARAM4,' '),NVL(PARAM5,' '),
                   NVL(PARAM6,' '),NVL(PARAM7,' '),NVL(PARAM8,' '),NVL(PARAM9,' ')
              INTO :nd_facility_id,
				   :nd_exp_year,
                   :nd_exp_month,
                   :nd_interface_mode,
                   :nd_inv_doc_type_code,
                   :nd_dn_doc_type_code,
                   :nd_cn_doc_type_code,
                   :nd_adj_doc_type_code,
                   :nd_rec_doc_type_code,
                   :nd_pay_doc_type_code
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBGLEXP'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   nd_exp_month.arr[nd_exp_month.len]                 = '\0';
   nd_exp_year.arr[nd_exp_year.len]                   = '\0';
   nd_interface_mode.arr[nd_interface_mode.len]       = '\0';
   nd_inv_doc_type_code.arr[nd_inv_doc_type_code.len] = '\0';
   nd_dn_doc_type_code.arr[nd_dn_doc_type_code.len]   = '\0';
   nd_cn_doc_type_code.arr[nd_cn_doc_type_code.len]   = '\0';
   nd_adj_doc_type_code.arr[nd_adj_doc_type_code.len] = '\0';
   nd_rec_doc_type_code.arr[nd_rec_doc_type_code.len] = '\0';
   nd_pay_doc_type_code.arr[nd_pay_doc_type_code.len] = '\0';

    nd_acc_entity_code.arr[0] = '\0';
	
	nd_acc_entity_code.len    = 0;
	
	EXEC SQL SELECT   ACC_ENTITY_CODE, NUM_OF_ACC_PERIODS
              INTO     :nd_acc_entity_code, :d_num_of_acc_periods
              FROM SY_ACC_ENTITY
			  where  acc_entity_id = :nd_facility_id;

   if (OERROR)
        err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

		nd_acc_entity_code.arr[nd_acc_entity_code.len]  = '\0';
    



   delete_prog_param(); 

   fetch_ar_param();

   if (ar_interface_code.arr[0] != 'B')
   {
        err_mesg("",1,"AR2320");
        proc_exit();
   }
  
   
   declare_cursors();

   for (t_type=1;t_type<7;t_type++)
   {

      lock_tables(t_type);
      delete_gl_distrbn(t_type);
      open_hdr(t_type);

      while(fetch_hdr(t_type))   
      {
          process_rec(t_type);
          if (valid_flag != 'Y')
          {
              delete_rec();
          }
          else
          {
              update_hdr_rec(t_type);

              if (nd_interface_mode.arr[0] == 'D')
                   gl_posting();
          }
		  
      }

      if (nd_interface_mode.arr[0] == 'S')
      {
          process_summary_1();
          process_summary_2();
      }

      EXEC SQL COMMIT WORK;

      if (OERROR)
         err_mesg("COMMIT failed",0,""); 

    }
    end_prog_msg();
    end_prog_control();



    EXEC SQL COMMIT WORK RELEASE;


}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

delete_prog_param()
{
   EXEC SQL DELETE
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBGLEXP'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   EXEC SQL COMMIT WORK;

   if (OERROR)
         err_mesg("COMMIT failed",0,""); 
}

fetch_ar_param()
{
   ar_interface_code.arr[0]    = '\0';
   ar_interface_code.len       = 0;

   EXEC SQL SELECT NVL(AR_INTERFACE_CODE,'N')
              INTO :ar_interface_code
              FROM AR_PARAMETER;
  
   if (OERROR)
         err_mesg("SELECT failed on table AR_PARAMETER",0,"");

   ar_interface_code.arr[ar_interface_code.len]      = '\0';


   EXEC SQL SELECT CURRENT_ACC_YEAR,CURRENT_ACC_MONTH,
                   NVL(SUMMARY_PROCESS_FLAG,'X') 
              INTO :d_curr_year,    :d_curr_month,
                   :d_summ_flag
              FROM GL_PARAMETER;

    if (OERROR)
        err_mesg("SELECT failed on table GL_PARAMETER",0,"");

    if (NOT_FOUND)
        err_mesg("Record not maintained in GL_PARAMETER",0,"");

}  
 
declare_cursors() 
{ 
 
    EXEC SQL DECLARE AR_INV_HDR_CUR CURSOR FOR
              SELECT ACC_ENTITY_CODE,
                     DOC_TYPE_CODE, 
                     DOC_NUM,
                     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                     NVL(CUST_REF,' '),
                     NVL(NARRATION,' '),
                     NVL(POST_MONTH,0),
                     NVL(POST_YEAR,0),
                     NVL(MAIN_ACC1_CODE_NEW,' '),
                     NVL(MAIN_ACC2_CODE_NEW,' '),
                     NVL(DEPT_CODE_NEW,' '),
                     NVL(PRODUCT_GROUP_CODE_NEW,' '),
                     NVL(PRODUCT_LINE_CODE_NEW,' '),
                     NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                     NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                     PAYABLE_AMT,
					 NVL(PAYABLE_AMT,0),
					 SIGN(PAYABLE_AMT),
                     DECODE(SIGN(PAYABLE_AMT),-1,-PAYABLE_AMT,PAYABLE_AMT),
					 CUST_CODE,
                     ROWID   
                FROM AR_INV_HDR
               WHERE POSTED_FLAG  = 'Y' 
                 AND INTERFACE_FLAG = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     :nd_exp_year||:nd_exp_month;

    EXEC SQL DECLARE AR_DN_HDR_CUR CURSOR FOR
              SELECT ACC_ENTITY_CODE,
			         DOC_TYPE_CODE, 
                     DOC_NUM,
                     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                     POST_MONTH,
                     POST_YEAR,
                     ROWID
                FROM AR_DN_HDR
               WHERE POSTED_FLAG  = 'Y' 
                 AND INTERFACE_FLAG = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     :nd_exp_year||:nd_exp_month;

    EXEC SQL DECLARE AR_CN_HDR_CUR CURSOR FOR
              SELECT ACC_ENTITY_CODE,
			         DOC_TYPE_CODE, 
                     DOC_NUM,
                     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                     POST_MONTH,
                     POST_YEAR,
                     ROWID
                FROM AR_CN_HDR
               WHERE POSTED_FLAG  = 'Y' 
                 AND INTERFACE_FLAG = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     :nd_exp_year||:nd_exp_month;

    EXEC SQL DECLARE AR_ADJ_HDR_CUR CURSOR FOR
              SELECT ACC_ENTITY_CODE,
			         DOC_TYPE_CODE, 
                     DOC_NUM,
                     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                     POST_MONTH,
                     POST_YEAR,
                     ROWID
                FROM AR_ADJ_HDR
               WHERE POSTED_FLAG  = 'Y' 
                 AND INTERFACE_FLAG = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     :nd_exp_year||:nd_exp_month;

    EXEC SQL DECLARE AR_REC_HDR_CUR CURSOR FOR
              SELECT ACC_ENTITY_CODE,
			         DOC_TYPE_CODE, 
                     DOC_NUM,
                     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                     NVL(DOC_REF,' '),
                     NVL(NARRATION,' '),
                     POST_MONTH,
                     POST_YEAR,
                     NVL(MAIN_ACC1_CODE,' '),
                     NVL(MAIN_ACC2_CODE,' '),
                     NVL(DEPT_CODE,' '),
                     NVL(PRODUCT_GROUP_CODE,' '),
                     NVL(PRODUCT_LINE_CODE,' '),
                     NVL(SUBLEDGER_GROUP_CODE,' '),
                     NVL(SUBLEDGER_LINE_CODE,' '),
                     NVL(AMT_LOCAL,0),
                     AMT_LOCAL,
                     SIGN(AMT_LOCAL),
                     DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL),
                     CHEQUE_NUM,
                     to_char(CHEQUE_DATE,'DD/MM/YYYY'),
					 CUST_CODE,
                     ROWID
                FROM AR_REC_HDR
               WHERE POSTED_FLAG  = 'Y' 
                 AND INTERFACE_FLAG = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     :nd_exp_year||:nd_exp_month;

    EXEC SQL DECLARE AR_OFF_REC_HDR_CUR CURSOR FOR
              SELECT ACC_ENTITY_CODE, 
                     NVL(NARRATION,' '),
                     NVL(MAIN_ACC1_CODE_BANK,' '),
                     NVL(MAIN_ACC2_CODE_BANK,' '),
                     NVL(DEPT_CODE_BANK,' '),                     
                     NVL(PRODUCT_GROUP_CODE_BANK,' '),
                     NVL(PRODUCT_LINE_CODE_BANK,' '),
                     NVL(SUBLEDGER_GROUP_CODE_BANK,' '),
                     NVL(SUBLEDGER_LINE_CODE_BANK,' '),
                     AMT_LOCAL,
			         NVL(MAIN_ACC1_CODE_SUSP,' '),
                     NVL(MAIN_ACC2_CODE_SUSP,' '),
                     NVL(DEPT_CODE_SUSP,' '),
                     NVL(PRODUCT_GROUP_CODE_SUSP,' '),
                     NVL(PRODUCT_LINE_CODE_SUSP,' '),
                     NVL(SUBLEDGER_GROUP_CODE_SUSP,' '),
                     NVL(SUBLEDGER_LINE_CODE_SUSP,' '),
                     -1 * AMT_LOCAL,
                     AMT_LOCAL,
                     SIGN(AMT_LOCAL),
                     DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL),
                     CHEQUE_NUM,
                     to_char(CHEQUE_DATE,'DD/MM/YYYY'),
					 CUST_CODE,
					 ROWID
                FROM AR_CASHIER  
                WHERE DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                 AND DOC_NUM        = :d_ar_hdr_doc_num;


    EXEC SQL DECLARE AR_PAY_HDR_CUR CURSOR FOR
              SELECT ACC_ENTITY_CODE,
			         DOC_TYPE_CODE,
                     DOC_NUM,
                     TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                     NVL(CHEQUE_NUM,' '),
                     NVL(NARRATION,' '),
                     NVL(POST_MONTH,0),
                     NVL(POST_YEAR,0),
                     NVL(MAIN_ACC1_CODE_NEW,' '),
                     NVL(MAIN_ACC2_CODE_NEW,' '),
                     NVL(DEPT_CODE_NEW,' '),
                     NVL(PRODUCT_GROUP_CODE_NEW,' '),
                     NVL(PRODUCT_LINE_CODE_NEW,' '),
                     NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                     NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                     -1 * AMT_LOCAL,
                     AMT_LOCAL,
                     SIGN(AMT_LOCAL),
                     DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL),
                     CHEQUE_NUM,
                     to_char(CHEQUE_DATE,'DD/MM/YYYY'),
					 CUST_CODE,
                     ROWID
                FROM AR_PAY_HDR
               WHERE POSTED_FLAG  = 'Y' 
                 AND INTERFACE_FLAG = 'N' 
                 AND LTRIM(TO_CHAR(POST_YEAR,'0009'))||
                     LTRIM(TO_CHAR(POST_MONTH,'09'))
                     <= 
                     :nd_exp_year||:nd_exp_month;

    EXEC SQL DECLARE AR_INV_LINE_CUR CURSOR FOR
              SELECT MAIN_ACC1_CODE_NEW,
                     NVL(MAIN_ACC2_CODE_NEW,' '),
                     NVL(DEPT_CODE_NEW,' '),
                     NVL(PRODUCT_GROUP_CODE_NEW,' '),
                     NVL(PRODUCT_LINE_CODE_NEW,' '),
                     NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                     NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                     -1 * AMT_LOCAL,
                     AMT_LOCAL,
                     SIGN(AMT_LOCAL),
                     DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL),
                     NVL(NARRATION,' ')
                FROM AR_INV_LINE
               WHERE DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                 AND DOC_NUM       = :d_ar_hdr_doc_num;

   EXEC SQL DECLARE AR_DN_INV_HDR_CUR CURSOR FOR
             SELECT ORG_DOC_TYPE_CODE,
                    ORG_DOC_NUM,
                    NVL(NARRATION,' '),
                    NVL(CUST_REF,' '),
                    NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    DOC_AMT,
                    -1 * DOC_AMT,
                    SIGN(DOC_AMT),
                    DECODE(SIGN(DOC_AMT),-1,-DOC_AMT,DOC_AMT),
					CUST_CODE
               FROM AR_DN_INV_HDR
              WHERE DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                AND DOC_NUM       = :d_ar_hdr_doc_num;


   EXEC SQL DECLARE AR_DN_LINE_CUR  CURSOR FOR
             SELECT NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    -1 * AMOUNT,
					AMOUNT,
                    SIGN(AMOUNT),
                    DECODE(SIGN(AMOUNT),-1,-AMOUNT,AMOUNT),
                    NVL(NARRATION, ' ')
               FROM AR_DN_LINE
              WHERE DOC_TYPE_CODE     = :d_ar_hdr_doc_type_code
                AND DOC_NUM           = :d_ar_hdr_doc_num
                AND ORG_DOC_TYPE_CODE = :d_ar_hdr_org_doc_type_code
                AND ORG_DOC_NUM       = :d_ar_hdr_org_doc_num;

   EXEC SQL DECLARE AR_CN_INV_HDR_CUR CURSOR FOR    
             SELECT ORG_DOC_TYPE_CODE,
                    ORG_DOC_NUM,
                    NVL(NARRATION,' '),
                    NVL(CUST_REF,' '),
                    NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    -1 * DOC_AMT,
                    DOC_AMT,
                    SIGN(DOC_AMT),
                    DECODE(SIGN(DOC_AMT),-1,-DOC_AMT,DOC_AMT),
					CUST_CODE
               FROM AR_CN_INV_HDR
              WHERE DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                AND DOC_NUM       = :d_ar_hdr_doc_num;


   EXEC SQL DECLARE AR_CN_LINE_CUR  CURSOR FOR
             SELECT NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    NVL(AMOUNT,0),
                    AMOUNT,
                    SIGN(AMOUNT),
                    DECODE(SIGN(AMOUNT),-1,-AMOUNT,AMOUNT),
                    NVL(NARRATION,' ')
               FROM AR_CN_LINE
              WHERE DOC_TYPE_CODE     = :d_ar_hdr_doc_type_code
                AND DOC_NUM           = :d_ar_hdr_doc_num
                AND ORG_DOC_TYPE_CODE = :d_ar_hdr_org_doc_type_code
                AND ORG_DOC_NUM       = :d_ar_hdr_org_doc_num;

   EXEC SQL DECLARE AR_ADJ_INV_HDR_CUR CURSOR FOR
             SELECT ORG_DOC_TYPE_CODE,
                    ORG_DOC_NUM,
                    NVL(NARRATION,' '),
                    NVL(CUST_REF,' '),
                    NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),  
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    NVL(ADJ_TYPE,' '),
                    DECODE(ADJ_TYPE,'D',DOC_AMT,-1 * DOC_AMT),
                    DOC_AMT,
                    SIGN(DOC_AMT),
                    DECODE(SIGN(DOC_AMT),-1,-DOC_AMT,DOC_AMT),
					CUST_CODE
               FROM AR_ADJ_INV_HDR
              WHERE DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                AND DOC_NUM       = :d_ar_hdr_doc_num;


   EXEC SQL DECLARE AR_ADJ_LINE_CUR  CURSOR FOR
             SELECT NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    DECODE(:d_ar_hdr_adj_type,'D',-1 * AMOUNT,AMOUNT),
                    AMOUNT,
                    SIGN(AMOUNT),
                    DECODE(SIGN(AMOUNT),-1,-AMOUNT,AMOUNT),
                    NVL(NARRATION,' ')
               FROM AR_ADJ_LINE
              WHERE DOC_TYPE_CODE     = :d_ar_hdr_doc_type_code
                AND DOC_NUM           = :d_ar_hdr_doc_num
                AND ORG_DOC_TYPE_CODE = :d_ar_hdr_org_doc_type_code
                AND ORG_DOC_NUM       = :d_ar_hdr_org_doc_num;

   EXEC SQL DECLARE AR_REC_LINE_CUR  CURSOR FOR
             SELECT NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),   
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    -1 * AMT_LOCAL,
                    AMT_LOCAL,
                    SIGN(AMT_LOCAL),
                    DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL),
                    NVL(NARRATION, ' ')
               FROM AR_REC_LINE
              WHERE DOC_TYPE_CODE     = :d_ar_hdr_doc_type_code
                AND DOC_NUM           = :d_ar_hdr_doc_num;
     
   EXEC SQL DECLARE AR_PAY_LINE_CUR  CURSOR FOR
             SELECT NVL(MAIN_ACC1_CODE_NEW,' '),
                    NVL(MAIN_ACC2_CODE_NEW,' '),
                    NVL(DEPT_CODE_NEW,' '),
                    NVL(PRODUCT_GROUP_CODE_NEW,' '),
                    NVL(PRODUCT_LINE_CODE_NEW,' '),
                    NVL(SUBLEDGER_GROUP_CODE_NEW,' '),
                    NVL(SUBLEDGER_LINE_CODE_NEW,' '),
                    NVL(AMT_LOCAL,0),
                    AMT_LOCAL,
                    SIGN(AMT_LOCAL),
                    DECODE(SIGN(AMT_LOCAL),-1,-AMT_LOCAL,AMT_LOCAL),
                    NVL(NARRATION,' ')
               FROM AR_PAY_LINE
              WHERE DOC_TYPE_CODE     = :d_ar_hdr_doc_type_code
                AND DOC_NUM           = :d_ar_hdr_doc_num;

   EXEC SQL DECLARE GL_POSTING_ACC_CUR CURSOR FOR
             SELECT NVL(BANK_RECONCILE_FLAG,'N')
               FROM GL_POSTING_ACC
              WHERE MAIN_ACC1_CODE       = :d_chk_main_acc1_code
                AND MAIN_ACC2_CODE       = :d_chk_main_acc2_code
                AND DEPT_CODE            = :d_chk_dept_code
                AND PRODUCT_GROUP_CODE   = :d_chk_product_group_code
                AND PRODUCT_LINE_CODE    = :d_chk_product_line_code
                AND SUBLEDGER_GROUP_CODE = :d_chk_sub_group_code
                AND SUBLEDGER_LINE_CODE  = :d_chk_sub_line_code;

   EXEC SQL DECLARE AR_GL_DISTRBN_TEMP_CUR1 CURSOR FOR
             SELECT POST_MONTH,
                    POST_YEAR,
                    NVL(MAIN_ACC1_CODE,' '),
                    NVL(MAIN_ACC2_CODE,' '),
                    NVL(DEPT_CODE,' '),
                    NVL(PRODUCT_GROUP_CODE,' '),
                    NVL(PRODUCT_LINE_CODE,' '),
                    NVL(SUBLEDGER_GROUP_CODE,' '),
                    NVL(SUBLEDGER_LINE_CODE,' '),
                    SUM(DEBIT_AMT)
               FROM AR_GL_DISTRBN_TEMP
              WHERE NVL(TRN_TYPE_CODE,'N') = 'N'
              GROUP BY POST_MONTH,
                       POST_YEAR,
                       MAIN_ACC1_CODE,
                       MAIN_ACC2_CODE,
                       DEPT_CODE,
                       PRODUCT_GROUP_CODE,
                       PRODUCT_LINE_CODE,
                       SUBLEDGER_GROUP_CODE,
                       SUBLEDGER_LINE_CODE;

   EXEC SQL DECLARE AR_GL_DISTRBN_TEMP_CUR2 CURSOR FOR
             SELECT DOC_TYPE_CODE,
                    DOC_NUM,
                    TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                    NVL(DOC_REF,' '),
                    NVL(MAIN_ACC1_CODE,' '),
                    NVL(MAIN_ACC2_CODE,' '),
                    NVL(DEPT_CODE,' '),
                    NVL(PRODUCT_GROUP_CODE,' '),
                    NVL(PRODUCT_LINE_CODE,' '),
                    NVL(SUBLEDGER_GROUP_CODE,' '),
                    NVL(SUBLEDGER_LINE_CODE,' '),
                    NVL(DEBIT_AMT,0),
                    NVL(NARRATION,' '),
                    POST_MONTH,
                    POST_YEAR,
					CHEQUE_NUM
               FROM AR_GL_DISTRBN_TEMP
              WHERE TRN_TYPE_CODE = 'Y'
              ORDER BY DOC_TYPE_CODE,DOC_NUM,DOC_REF,NARRATION;

}

delete_gl_distrbn()
{
    EXEC SQL DELETE FROM AR_GL_DISTRBN_TEMP;
    if (OERROR)
         err_mesg("DELETE failed on table AR_GL_DISTRBN_TEMP",0,"");

    EXEC SQL COMMIT WORK;

    if (OERROR)
         err_mesg("COMMIT failed",0,"");
}

lock_tables(l_type)
int l_type;
{

     EXEC SQL LOCK TABLE AR_GL_DISTRBN_TEMP
                IN EXCLUSIVE MODE NOWAIT;
     if (RESOURCE_BUSY)
      err_mesg("AR_GL_DISTRBN_TEMP table could not be locked for exclusive use",
                        0,"");
     else if (OERROR)
         err_mesg("LOCK failed on table AR_GL_DISTRBN_TEMP",0,"");
             
     switch(l_type)
     {
        case 1 : 
                  strcpy(nd_tmp_doc_type_code.arr,nd_inv_doc_type_code.arr);

                  EXEC SQL LOCK TABLE AR_INV_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2230");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_INV_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_INV_LINE
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2230");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_INV_LINE",0,"");
                  break;
        case 2 :  
                  strcpy(nd_tmp_doc_type_code.arr,nd_dn_doc_type_code.arr);

                  EXEC SQL LOCK TABLE AR_DN_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2240");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_DN_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_DN_INV_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2240");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_DN_INV_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_DN_LINE
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2240");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_DN_LINE",0,"");
                  break;
        case 3 :  
                  strcpy(nd_tmp_doc_type_code.arr,nd_cn_doc_type_code.arr);

                  EXEC SQL LOCK TABLE AR_CN_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2250");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_CN_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_CN_INV_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2250");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_CN_INV_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_CN_LINE
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2250");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_CN_LINE",0,"");
                  break;
        case 4 :  
                  strcpy(nd_tmp_doc_type_code.arr,nd_adj_doc_type_code.arr);

                  EXEC SQL LOCK TABLE AR_ADJ_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2260");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_ADJ_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_ADJ_INV_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2260");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_ADJ_INV_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_ADJ_LINE
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2260");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_ADJ_LINE",0,"");
                  break;
        case 5 :  
                  strcpy(nd_tmp_doc_type_code.arr,nd_rec_doc_type_code.arr);

                  EXEC SQL LOCK TABLE AR_REC_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2270");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_REC_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_REC_LINE
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2270");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_REC_LINE",0,"");
                  break;
        case 6 :  
                  strcpy(nd_tmp_doc_type_code.arr,nd_pay_doc_type_code.arr);

                  EXEC SQL LOCK TABLE AR_PAY_HDR
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2280");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_PAY_HDR",0,"");

                  EXEC SQL LOCK TABLE AR_PAY_LINE
                             IN EXCLUSIVE MODE NOWAIT;
                  if (RESOURCE_BUSY)
                       err_mesg("",1,"AR2280");
                   else if (OERROR)
                       err_mesg("LOCK failed on table AR_PAY_LINE",0,"");
                  break;
     }

     nd_tmp_doc_type_code.len = strlen(nd_tmp_doc_type_code.arr);

     if (nd_interface_mode.arr[0] == 'S')
     {
     EXEC SQL SELECT ROWID
                INTO :d_sy_acc_rowid
                FROM SY_ACC_ENTITY_DOC_TYPE
               WHERE DOC_TYPE_CODE = :nd_tmp_doc_type_code
                 FOR UPDATE OF NEXT_DOC_NO;

     if (RESOURCE_BUSY)
         err_mesg("",1,"AR2310");
     else if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");
     else if (NOT_FOUND)
         err_mesg("",1,"SY1610");
     }
}

open_hdr(l_type)
int l_type;
{

     switch(l_type)
     {
        case 1 :  
                 EXEC SQL OPEN AR_INV_HDR_CUR;

                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_INV_HDR_CUR",0,"");
                 break;
        case 2 :  
                 EXEC SQL OPEN AR_DN_HDR_CUR;

                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_DN_HDR_CUR",0,"");
                 break;
        case 3 :  
                 EXEC SQL OPEN AR_CN_HDR_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_CN_HDR_CUR",0,"");
                 break;
        case 4 :  
                 EXEC SQL OPEN AR_ADJ_HDR_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_ADJ_HDR_CUR",0,"");
                 break;
        case 5 :  
                 EXEC SQL OPEN AR_REC_HDR_CUR;

                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_REC_HDR_CUR",0,"");
                 break;
        case 6 :  
                 EXEC SQL OPEN AR_PAY_HDR_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_PAY_HDR_CUR",0,"");
                 break;
       }
}

fetch_hdr(l_type)
int l_type;
{

   init_hdr_variables(l_type);

   valid_flag = 'Y';
   d_ar_run_line_num = 0;
   
   switch (l_type)
   {
       case 1 :
             EXEC SQL FETCH AR_INV_HDR_CUR
                       INTO :d_acc_entity_code,
					        :d_ar_hdr_doc_type_code, 
                            :d_ar_hdr_doc_num,
                            :d_ar_hdr_doc_date,
                            :d_ar_hdr_cust_ref,
                            :d_ar_hdr_narration,
                            :d_ar_hdr_post_month,
                            :d_ar_hdr_post_year,
                            :d_ar_hdr_main_acc1_code,
                            :d_ar_hdr_main_acc2_code,
                            :d_ar_hdr_dept_code,
                            :d_ar_hdr_product_group_code,
                            :d_ar_hdr_product_line_code,
                            :d_ar_hdr_sub_group_code,
                            :d_ar_hdr_sub_line_code,
                            :d_ar_hdr_amount,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
							:d_cust_code,
                            :d_ar_hdr_rowid;

             if (OERROR)
                  err_mesg("FETCH failed on cursor AR_INV_HDR_CUR",0,"");
             break;   
       case 2 :
             EXEC SQL FETCH AR_DN_HDR_CUR
                       INTO :d_acc_entity_code,
					        :d_ar_hdr_doc_type_code, 
                            :d_ar_hdr_doc_num,
                            :d_ar_hdr_doc_date,
                            :d_ar_hdr_post_month,
                            :d_ar_hdr_post_year,
                            :d_ar_hdr_rowid;
             if (OERROR) 
                 err_mesg("FETCH failed on cursor AR_DN_HDR_CUR",0,"");
             break; 
       case 3 :
             EXEC SQL FETCH AR_CN_HDR_CUR
                       INTO :d_acc_entity_code,
					        :d_ar_hdr_doc_type_code, 
                            :d_ar_hdr_doc_num,
                            :d_ar_hdr_doc_date,
                            :d_ar_hdr_post_month,
                            :d_ar_hdr_post_year,
                            :d_ar_hdr_rowid;
             if (OERROR)
                 err_mesg("FETCH failed on cursor AR_CN_HDR_CUR",0,"");
             break;
       case 4 :
             EXEC SQL FETCH AR_ADJ_HDR_CUR
                       INTO :d_acc_entity_code,
					        :d_ar_hdr_doc_type_code, 
                            :d_ar_hdr_doc_num,
                            :d_ar_hdr_doc_date,
                            :d_ar_hdr_post_month,
                            :d_ar_hdr_post_year,
                            :d_ar_hdr_rowid;
             if (OERROR)
                 err_mesg("FETCH failed on cursor AR_ADJ_HDR_CUR",0,"");
             break;
       case 5 :
             EXEC SQL FETCH AR_REC_HDR_CUR
                       INTO :d_acc_entity_code,
					        :d_ar_hdr_doc_type_code, 
                            :d_ar_hdr_doc_num,
                            :d_ar_hdr_doc_date,
                            :d_ar_hdr_cust_ref,
                            :d_ar_hdr_narration,
                            :d_ar_hdr_post_month,
                            :d_ar_hdr_post_year,
                            :d_ar_hdr_main_acc1_code,
                            :d_ar_hdr_main_acc2_code,
                            :d_ar_hdr_dept_code,
                            :d_ar_hdr_product_group_code,
                            :d_ar_hdr_product_line_code,
                            :d_ar_hdr_sub_group_code,
                            :d_ar_hdr_sub_line_code,
                            :d_ar_hdr_amount,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :l_gd_cheque_num,
                            :l_gd_cheque_date,
							:d_cust_code,
                            :d_ar_hdr_rowid;
             if (OERROR)
                 err_mesg("FETCH failed on cursor AR_ADJ_HDR_CUR",0,"");
             break;
       case 6 :
             EXEC SQL FETCH AR_PAY_HDR_CUR
                       INTO :d_acc_entity_code,
					        :d_ar_hdr_doc_type_code, 
                            :d_ar_hdr_doc_num,
                            :d_ar_hdr_doc_date,
                            :d_ar_hdr_cust_ref,
                            :d_ar_hdr_narration,
                            :d_ar_hdr_post_month,
                            :d_ar_hdr_post_year,
                            :d_ar_hdr_main_acc1_code,
                            :d_ar_hdr_main_acc2_code,
                            :d_ar_hdr_dept_code,
                            :d_ar_hdr_product_group_code,
                            :d_ar_hdr_product_line_code,
                            :d_ar_hdr_sub_group_code,
                            :d_ar_hdr_sub_line_code,
                            :d_ar_hdr_amount,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :l_gd_cheque_num,
                            :l_gd_cheque_date,
							:d_cust_code,
                            :d_ar_hdr_rowid;
             if (OERROR)
                 err_mesg("FETCH failed on cursor AR_PAY_HDR_CUR",0,"");
             break;
    }

    null_term_hdr(l_type);

    if (l_type == 1 || l_type == 5 || l_type == 6)
    {
        strcpy(l_gd_hdr_amount,l_gd_amount.arr);
        l_gd_hdr_sign_amount = l_gd_sign_amount;
        strcpy(l_gd_hdr_amt_negative,l_gd_amount_negative.arr);
    }


    if (LAST_ROW) 
        return (0);
    else 
        return (1);
}

init_hdr_variables(t_type)
int t_type;
{
    switch (t_type)
    {
       case 1 :
       case 5 :
       case 6 :
            d_ar_hdr_doc_type_code.arr[0]         = '\0';
            d_ar_hdr_doc_num.arr[0]               = '\0';
            d_ar_hdr_doc_date.arr[0]              = '\0';
            d_ar_hdr_cust_ref.arr[0]              = '\0';
			d_cust_code.arr[0]                    = '\0';
			d_acc_entity_code.arr[0]              = '\0';
            d_ar_hdr_narration.arr[0]             = '\0';
            d_ar_hdr_main_acc1_code.arr[0]        = '\0';
            d_ar_hdr_main_acc2_code.arr[0]        = '\0';
            d_ar_hdr_dept_code.arr[0]             = '\0';
            d_ar_hdr_product_group_code.arr[0]    = '\0';
            d_ar_hdr_product_line_code.arr[0]     = '\0';
            d_ar_hdr_sub_group_code.arr[0]  = '\0';
            d_ar_hdr_sub_line_code.arr[0]   = '\0';
            d_ar_hdr_amount.arr[0]                = '\0';
            d_ar_hdr_rowid.arr[0]                 = '\0';
            d_ar_off_hdr_rowid.arr[0]             = '\0';
			l_gd_amount.arr[0]                    = '\0';
            l_gd_amount_negative.arr[0]           = '\0';
            l_gd_cheque_num.arr[0]                = '\0';
            l_gd_cheque_date.arr[0]               = '\0';


    		d_ar_off_rec_hdr_main_acc1_code.arr[0]    = '\0';
            d_ar_off_rec_hdr_main_acc2_code.arr[0]    = '\0';
            d_ar_off_rec_hdr_dept_code.arr[0]         = '\0';
            d_ar_off_rec_hdr_amount.arr[0]            = '\0';
            d_ar_off_rec_hdr_product_group_code.arr[0]    = '\0';
            d_ar_off_rec_hdr_product_line_code.arr[0]     = '\0';
            d_ar_off_rec_hdr_sub_group_code.arr[0]  = '\0';
            d_ar_off_rec_hdr_sub_line_code.arr[0]   = '\0';


            d_ar_hdr_doc_type_code.len            = 0;
            d_ar_hdr_doc_num.len                  = 0;
            d_ar_hdr_doc_date.len                 = 0;
            d_ar_hdr_cust_ref.len                 = 0;
			d_cust_code.len                       = 0;
			d_acc_entity_code.len                 = 0;
            d_ar_hdr_narration.len                = 0;
            d_ar_hdr_main_acc1_code.len           = 0;
            d_ar_hdr_main_acc2_code.len           = 0;
            d_ar_hdr_dept_code.len                = 0;
            d_ar_hdr_product_group_code.len       = 0;
            d_ar_hdr_product_line_code.len        = 0;
            d_ar_hdr_sub_group_code.len     = 0;
            d_ar_hdr_sub_line_code.len      = 0;
            d_ar_hdr_amount.len                   = 0;
            d_ar_hdr_rowid.len                    = 0;
			d_ar_off_hdr_rowid.len                = 0;


     		d_ar_off_rec_hdr_main_acc1_code.len   = 0;
            d_ar_off_rec_hdr_main_acc2_code.len   = 0;
            d_ar_off_rec_hdr_dept_code.len        = 0;
            d_ar_off_rec_hdr_amount.len           = 0;
            d_ar_off_rec_hdr_product_group_code.len   = 0;
            d_ar_off_rec_hdr_product_line_code.len    = 0;
            d_ar_off_rec_hdr_sub_group_code.len     = 0;
            d_ar_off_rec_hdr_sub_line_code.len      = 0;

            d_ar_hdr_post_month                   = 0;
            d_ar_hdr_post_year                    = 0;

			l_gd_amount.len                       = 0;
            l_gd_amount_negative.len              = 0;
            l_gd_cheque_num.len                   = 0;
            l_gd_cheque_date.len                  = 0;
            l_gd_sign_amount                      = 0;

          break;
    case 2 :
    case 3 : 
    case 4 :
            d_ar_hdr_doc_type_code.arr[0]         = '\0';
            d_ar_hdr_doc_num.arr[0]               = '\0';
            d_ar_hdr_doc_date.arr[0]              = '\0';
			d_acc_entity_code.arr[0]              = '\0';
            d_ar_hdr_rowid.arr[0]                 = '\0';

            d_ar_hdr_doc_type_code.len            = 0;
            d_ar_hdr_doc_num.len                  = 0;
            d_ar_hdr_doc_date.len                 = 0;
			d_acc_entity_code.len                 = 0;
            d_ar_hdr_rowid.len                    = 0;

            d_ar_hdr_post_month                   = 0;
            d_ar_hdr_post_year                    = 0;
          break;
     }
}

null_term_hdr(t_type)
int t_type;
{
    switch (t_type)
    {
       case 1 :
       case 5 :
       case 6 :
    d_ar_hdr_doc_type_code.arr[d_ar_hdr_doc_type_code.len]               = '\0';
    d_ar_hdr_doc_num.arr[d_ar_hdr_doc_num.len]                           = '\0';
    d_ar_hdr_doc_date.arr[d_ar_hdr_doc_date.len]                         = '\0';
    d_ar_hdr_cust_ref.arr[d_ar_hdr_cust_ref.len]                         = '\0';
    d_cust_code.arr[d_cust_code.len]                                     = '\0';
	d_acc_entity_code.arr[d_acc_entity_code.len]                         = '\0';
    d_ar_hdr_narration.arr[d_ar_hdr_narration.len]                       = '\0';
    d_ar_hdr_main_acc1_code.arr[d_ar_hdr_main_acc1_code.len]             = '\0';
    d_ar_hdr_main_acc2_code.arr[d_ar_hdr_main_acc2_code.len]             = '\0';
    d_ar_hdr_dept_code.arr[d_ar_hdr_dept_code.len]                       = '\0';
    d_ar_hdr_product_group_code.arr[d_ar_hdr_product_group_code.len]     = '\0';
    d_ar_hdr_product_line_code.arr[d_ar_hdr_product_line_code.len]       = '\0';
    d_ar_hdr_sub_group_code.arr[d_ar_hdr_sub_group_code.len] = '\0';
    d_ar_hdr_sub_line_code.arr[d_ar_hdr_sub_line_code.len]   = '\0';
    d_ar_hdr_amount.arr[d_ar_hdr_amount.len]                             = '\0';
    d_ar_hdr_rowid.arr[d_ar_hdr_rowid.len]                               = '\0';
    l_gd_amount.arr[l_gd_amount.len]                                     = '\0';
    l_gd_amount_negative.arr[l_gd_amount_negative.len]                   = '\0';
    l_gd_cheque_num.arr[l_gd_cheque_num.len]                             = '\0';
    l_gd_cheque_date.arr[l_gd_cheque_date.len]                           = '\0';
	d_ar_off_hdr_rowid.arr[d_ar_off_hdr_rowid.len]                       = '\0';

    d_ar_off_rec_hdr_main_acc1_code.arr[d_ar_off_rec_hdr_main_acc1_code.len] = '\0';
    d_ar_off_rec_hdr_main_acc2_code.arr[d_ar_off_rec_hdr_main_acc2_code.len] = '\0';
    d_ar_off_rec_hdr_dept_code.arr[d_ar_off_rec_hdr_dept_code.len]       = '\0';
    d_ar_off_rec_hdr_amount.arr[d_ar_off_rec_hdr_amount.len]             = '\0';
    d_ar_off_rec_hdr_product_group_code.arr[d_ar_off_rec_hdr_product_group_code.len]     = '\0';
    d_ar_off_rec_hdr_product_line_code.arr[d_ar_off_rec_hdr_product_line_code.len]       = '\0';
    d_ar_off_rec_hdr_sub_group_code.arr[d_ar_off_rec_hdr_sub_group_code.len] = '\0';
    d_ar_off_rec_hdr_sub_line_code.arr[d_ar_off_rec_hdr_sub_line_code.len]   = '\0';

          break;
    case 2 :
    case 3 :
    case 4 :
    d_ar_hdr_doc_type_code.arr[d_ar_hdr_doc_type_code.len]               = '\0';
    d_ar_hdr_doc_num.arr[d_ar_hdr_doc_num.len]                           = '\0';
    d_ar_hdr_doc_date.arr[d_ar_hdr_doc_date.len]                         = '\0';
    d_ar_hdr_rowid.arr[d_ar_hdr_rowid.len]                               = '\0';
          break;
     }
}

process_rec(l_type)
int l_type;
{
   switch (l_type)
   {
       case 1 :
       case 5 :
       case 6 :
             validate_posting(0);
             open_line(l_type);
             while (fetch_line(l_type))
             {
                 validate_posting(1);
                 gl_doc_insert(1);
             }
             gl_doc_insert(2);
             gl_doc_insert(0);
             break;
       case 2 :
       case 3 :
       case 4 :
             d_cust_ref1.arr[0]  = '\0';
             d_cust_ref1.len     = 0;
             d_narration1.len    = 0;
             d_narration1.arr[0] = '\0';

             open_trn_inv_hdr(l_type);
             while (fetch_trn_inv_hdr(l_type))
             {
                validate_posting(0);
                open_line(l_type);
                while (fetch_line(l_type))
                {
                    validate_posting(1);
                    gl_doc_insert(1);
                }
                gl_doc_insert(2);
             }
             gl_doc_insert(0);
             break;
     }
}


process_off_rec()
{

 /*-----------------30/06/2002-------------------------*/   

	EXEC SQL OPEN AR_OFF_REC_HDR_CUR;

             EXEC SQL FETCH AR_OFF_REC_HDR_CUR
                       INTO :d_acc_entity_code,
					        :d_ar_hdr_narration,
                            :d_ar_hdr_main_acc1_code,
                            :d_ar_hdr_main_acc2_code,
                            :d_ar_hdr_dept_code,                            
                            :d_ar_hdr_product_group_code,
                            :d_ar_hdr_product_line_code,
                            :d_ar_hdr_sub_group_code,
                            :d_ar_hdr_sub_line_code,
                            :d_ar_hdr_amount,
				 		    :d_ar_off_rec_hdr_main_acc1_code,
                            :d_ar_off_rec_hdr_main_acc2_code,
                            :d_ar_off_rec_hdr_dept_code,                            
                            :d_ar_off_rec_hdr_product_group_code,
                            :d_ar_off_rec_hdr_product_line_code,
                            :d_ar_off_rec_hdr_sub_group_code,
                            :d_ar_off_rec_hdr_sub_line_code,
                            :d_ar_off_rec_hdr_amount,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :l_gd_cheque_num,
                            :l_gd_cheque_date,
							:d_cust_code,
							:d_ar_off_hdr_rowid;
;

             if (OERROR)
                 err_mesg("FETCH failed on cursor AR_OFF_REC_HDR_CUR",0,"");
          
	
     null_term_hdr(t_type);

     validate_posting(0);

	 gl_doc_insert(2);
     

	 strcpy(d_ar_hdr_main_acc1_code.arr, d_ar_off_rec_hdr_main_acc1_code.arr);
     strcpy(d_ar_hdr_main_acc2_code.arr, d_ar_off_rec_hdr_main_acc2_code.arr);
     strcpy(d_ar_hdr_dept_code.arr, d_ar_off_rec_hdr_dept_code.arr);
	 strcpy(d_ar_hdr_product_group_code.arr, d_ar_off_rec_hdr_product_group_code.arr);
	 strcpy(d_ar_hdr_product_line_code.arr, d_ar_off_rec_hdr_product_line_code.arr);
	 strcpy(d_ar_hdr_sub_group_code.arr, d_ar_off_rec_hdr_sub_group_code.arr);
	 strcpy(d_ar_hdr_sub_line_code.arr, d_ar_off_rec_hdr_sub_line_code.arr);
    
     strcpy(d_ar_hdr_amount.arr, d_ar_off_rec_hdr_amount.arr);

     strcpy(l_gd_amount.arr, d_ar_off_rec_hdr_amount.arr);
                            
     l_gd_sign_amount = -1;
      
	 //strcpy(l_gd_amount_negative.arr, d_ar_off_rec_hdr_amount.arr);
	 
     validate_posting(0);

     d_ar_hdr_amount.arr[17] = '\0';
     d_ar_hdr_amount.len = strlen(d_ar_hdr_amount.arr);

     l_gd_amount.arr[17] = '\0';
     l_gd_amount.len = strlen(l_gd_amount.arr);

     l_gd_amount_negative.arr[17] = '\0';
     l_gd_amount_negative.len = strlen(l_gd_amount_negative.arr);
     d_ar_switch = 1; 
     gl_doc_insert(2);
	 d_ar_switch = 0;
}  
validate_posting(ind)
int ind;
{

  if (ind == 0)
  {
      strcpy(d_module_valid_id.arr , "AR");

      if(validate_posting_acct( d_ar_hdr_main_acc1_code.arr,
                                d_ar_hdr_main_acc2_code.arr,
                                d_ar_hdr_dept_code.arr,
                                d_ar_hdr_product_group_code.arr,
                                d_ar_hdr_product_line_code.arr,
                                d_ar_hdr_sub_group_code.arr,
                                d_ar_hdr_sub_line_code.arr,
                                'Y',   /* For chking Bank Reconcile */
								d_module_valid_id.arr,
                                d_ar_hdr_post_year,
								d_ar_hdr_post_month,
								&g_err_typ,
                                g_err_id,
                                g_err_msg
                             ) ==  -1)
      {
             if(g_err_typ == 0)
                   err_mesg(g_err_msg,0,"");
             else 
                error_insert(g_err_id,0);
       }
  }
  else
  {
      strcpy(d_module_valid_id.arr , "AR");
	
      if(validate_posting_acct( d_ar_line_main_acc1_code.arr,
                                d_ar_line_main_acc2_code.arr,
                                d_ar_line_dept_code.arr,
                                d_ar_line_product_group_code.arr,
                                d_ar_line_product_line_code.arr,
                                d_ar_line_sub_group_code.arr,
                                d_ar_line_sub_line_code.arr,
                                'Y',   /* For chking Bank Reconcile */
								d_module_valid_id.arr, 
                                d_ar_hdr_post_year,
								d_ar_hdr_post_month,
								&g_err_typ,
                                g_err_id,
                                g_err_msg
                             ) ==  -1)
      {
             if(g_err_typ == 0)
                   err_mesg(g_err_msg,0,"");
             else 
                error_insert(g_err_id,1);
       }
   }
}

error_insert(l_err_id,l_type)
char l_err_id[];
int l_type;
{
   char str[132];

   valid_flag = 'N';

   if (l_type == 0)
   {
       sprintf(str,"%s - %s/%s  %s-%s  %s  %s-%s %s-%s",
           trn_desc[t_type],
           d_ar_hdr_doc_type_code.arr,
           d_ar_hdr_doc_num.arr,
           d_ar_hdr_main_acc1_code.arr,
           d_ar_hdr_main_acc2_code.arr,
           d_ar_hdr_dept_code.arr,
           d_ar_hdr_product_group_code.arr,
           d_ar_hdr_product_line_code.arr,
           d_ar_hdr_sub_group_code.arr,
           d_ar_hdr_sub_line_code.arr);

        log_err_mesg(str,1,l_err_id);
  }
  else
  {
       sprintf(str,"%s - %s/%s  %s-%s  %s  %s-%s %s-%s",
           trn_desc[t_type],
           d_ar_hdr_doc_type_code.arr,
           d_ar_hdr_doc_num.arr,
           d_ar_line_main_acc1_code.arr,
           d_ar_line_main_acc2_code.arr,
           d_ar_line_dept_code.arr,
           d_ar_line_product_group_code.arr,
           d_ar_line_product_line_code.arr,
           d_ar_line_sub_group_code.arr,
           d_ar_line_sub_line_code.arr);
        log_err_mesg(str,1,l_err_id);
   }
}

gl_doc_insert(ins_flg)
int ins_flg;
{
    if (valid_flag == 'N')
          return (0);

    if (t_type == 1 || t_type == 5 || t_type == 6)
    {
          strcpy(d_cust_ref1.arr,d_ar_hdr_cust_ref.arr);
          d_cust_ref1.arr[10] = '\0';
          d_cust_ref1.len = strlen(d_cust_ref1.arr);

          strcpy(d_narration1.arr,d_ar_hdr_narration.arr);
          d_narration1.len = strlen(d_narration1.arr);
    }

    if (ins_flg != 0)
         insert_distrbn((ins_flg == 2)?0:1);


    if (nd_interface_mode.arr[0] == 'S')
    {
         if (ins_flg != 0)
            insert_gl_distrbn_temp(ins_flg);
    }
    else if (ins_flg == 1)
    {
        d_ar_run_line_num ++;
/*
disp_message (ERR_MESG,d_ar_hdr_doc_type_code.arr);
disp_message (ERR_MESG,d_ar_hdr_doc_num.arr);
sprintf(tempstring,"%d",d_ar_run_line_num);
disp_message (ERR_MESG,tempstring);
*/
        EXEC SQL INSERT INTO GL_TXN_DOC_LINE
               (
                 ACC_ENTITY_CODE,
				 BATCH_NUM,
                 DOC_TYPE_CODE,
                 DOC_NUM,
                 MAIN_ACC1_CODE,
                 MAIN_ACC2_CODE,
                 DEPT_CODE,
                 PRODUCT_GROUP_CODE,
                 PRODUCT_LINE_CODE,
                 SUBLEDGER_GROUP_CODE,
                 SUBLEDGER_LINE_CODE,
                 LOCAL_AMT,
                 NARRATION,
                 LINE_NUM,
				 CUST_SUPP_CODE
               )
             VALUES
               (
                 :nd_acc_entity_code,
				 0,
                 :d_ar_hdr_doc_type_code,
                 :d_ar_hdr_doc_num,
                 :d_ar_line_main_acc1_code,
                 :d_ar_line_main_acc2_code,
                 :d_ar_line_dept_code,
                 :d_ar_line_product_group_code,
                 :d_ar_line_product_line_code,
                 :d_ar_line_sub_group_code,
                 :d_ar_line_sub_line_code,
                 :d_ar_line_amt_local,
                 :d_ar_line_narration,
                 :d_ar_run_line_num,
				 :d_cust_code
               );

         if (OERROR)
             err_mesg("INSERT failed on table GL_TXN_DOC_LINE - 1",0,"");
    }
    else
    {
     if (ins_flg == 2)
     { 
        d_ar_run_line_num ++;
/*
disp_message (ERR_MESG,d_ar_hdr_doc_type_code.arr);
disp_message (ERR_MESG,d_ar_hdr_doc_num.arr);
sprintf(tempstring,"%d",d_ar_run_line_num);
disp_message (ERR_MESG,tempstring);
*/
        EXEC SQL INSERT INTO GL_TXN_DOC_LINE
               (
                 ACC_ENTITY_CODE,
				 BATCH_NUM,
                 DOC_TYPE_CODE,
                 DOC_NUM,
                 MAIN_ACC1_CODE,
                 MAIN_ACC2_CODE,
                 DEPT_CODE,
                 PRODUCT_GROUP_CODE,
                 PRODUCT_LINE_CODE,
                 SUBLEDGER_GROUP_CODE,
                 SUBLEDGER_LINE_CODE,
                 LOCAL_AMT,
                 NARRATION,
                 LINE_NUM,
				 CUST_SUPP_CODE
               )
             VALUES
               (
                 :nd_acc_entity_code,
				 0,
                 :d_ar_hdr_doc_type_code,
                 :d_ar_hdr_doc_num,
                 :d_ar_hdr_main_acc1_code,
                 :d_ar_hdr_main_acc2_code,
                 :d_ar_hdr_dept_code,
                 :d_ar_hdr_product_group_code,
                 :d_ar_hdr_product_line_code,
                 :d_ar_hdr_sub_group_code,
                 :d_ar_hdr_sub_line_code,
                 :d_ar_hdr_amount,
                 :d_ar_hdr_narration,
                 :d_ar_run_line_num,
				 :d_cust_code
               );

       if (OERROR)
           err_mesg("INSERT failed on table GL_TXN_DOC_LINE - 2",0,"");
     }
     else
     {
       EXEC SQL INSERT INTO GL_TXN_DOC_HDR
              ( 
                ACC_ENTITY_CODE,
				BATCH_NUM,
                DOC_TYPE_CODE,
                DOC_NUM,
                DOC_DATE,
                DOC_REF,
                NARRATION,
                POST_MONTH,
                POST_YEAR,
                CTRL_AMT,
                ADDED_BY_ID,
                MODIFIED_BY_ID,
                ADDED_DATE,
                MODIFIED_DATE,
                MAX_LINE_NUM,
                MODULE_ID
              )
            VALUES
              (
                :nd_acc_entity_code,
				0,
                :d_ar_hdr_doc_type_code,
                :d_ar_hdr_doc_num,
                TO_DATE(:d_ar_hdr_doc_date,'DD/MM/YYYY'),
                SUBSTR(:d_cust_ref1,1,10),
                :d_narration1,
                :d_ar_hdr_post_month,
                :d_ar_hdr_post_year,
                0,
                USER,
                USER,
                SYSDATE,
                SYSDATE,
                :d_ar_run_line_num,
                'AR'
             );

    if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_HDR - HAHA 1",0,"");
    }
  }
}

insert_gl_distrbn_temp(ins_flg)
int ins_flg;
{
    EXEC SQL BEGIN DECLARE SECTION;
     int l_ins_flg = 0;
     VARCHAR d_gl_dist_doc_ref[16],
             d_gl_dist_narration[51];
    EXEC SQL END DECLARE SECTION;


    l_ins_flg = ins_flg;

    d_gl_dist_doc_ref.arr[0] = '\0';
    d_gl_dist_narration.arr[0]    = '\0';

    d_gl_dist_doc_ref.len    = 0;
    d_gl_dist_narration.len       = 0;

    if (ins_flg == 0) 
    {
       if ( (t_type == 1 || t_type == 5 || t_type == 6) ||
            ( (strcmp(d_ar_hdr_doc_type_code.arr,
               d_ar_hdr_org_doc_type_code.arr)==0)  &&
             (strcmp(d_ar_hdr_doc_num.arr,d_ar_hdr_org_doc_num.arr)==0)) )
       {
          strcpy(d_gl_dist_doc_ref.arr,d_ar_hdr_cust_ref.arr);
          d_gl_dist_doc_ref.arr[10] = '\0';
          d_gl_dist_doc_ref.len = strlen(d_gl_dist_doc_ref.arr);

          strcpy(d_gl_dist_narration.arr,d_narration1.arr);
          d_gl_dist_narration.len = strlen(d_gl_dist_narration.arr);
       }
    }

    fetch_bank_reconcile(ins_flg);

    EXEC SQL INSERT INTO AR_GL_DISTRBN_TEMP
          (
            DOC_TYPE_CODE,
            DOC_NUM,
            DOC_DATE,
            DOC_REF,
            MAIN_ACC1_CODE,
            MAIN_ACC2_CODE,
            DEPT_CODE,
            PRODUCT_GROUP_CODE,
            PRODUCT_LINE_CODE,
            SUBLEDGER_GROUP_CODE,
            SUBLEDGER_LINE_CODE	,
            DEBIT_AMT,
            NARRATION,
            POST_MONTH,
            POST_YEAR,
            TRN_TYPE_CODE
          )
      VALUES
          (
            :d_ar_hdr_doc_type_code,
            :d_ar_hdr_doc_num,
            TO_DATE(:d_ar_hdr_doc_date,'DD/MM/YYYY'),
            SUBSTR(:d_gl_dist_doc_ref,1,10),
            DECODE(:l_ins_flg,'2',
                :d_ar_hdr_main_acc1_code, :d_ar_line_main_acc1_code),
            DECODE(:l_ins_flg,'2',
                 :d_ar_hdr_main_acc2_code, :d_ar_line_main_acc2_code),
            DECODE(:l_ins_flg,'2',
                 :d_ar_hdr_dept_code, :d_ar_line_dept_code),
            DECODE(:l_ins_flg,'2',
                 :d_ar_hdr_product_group_code, :d_ar_line_product_group_code),
            DECODE(:l_ins_flg,'2',
                 :d_ar_hdr_product_line_code, :d_ar_line_product_line_code),
            DECODE(:l_ins_flg,'2',
               :d_ar_hdr_sub_group_code, :d_ar_line_sub_group_code),
            DECODE(:l_ins_flg,'2',
                 :d_ar_hdr_sub_line_code, :d_ar_line_sub_line_code),
            DECODE(:l_ins_flg,'2',
                 :d_ar_hdr_amount, :d_ar_line_amt_local),
            DECODE(:l_ins_flg,'2',:d_gl_dist_narration,:d_ar_line_narration),
            :d_ar_hdr_post_month,
            :d_ar_hdr_post_year,
            :d_ar_bank_reconcile_flg
          );

     if (OERROR)
         err_mesg("INSERT failed on table AR_GL_DISTRBN_TEMP",0,"");

}

fetch_bank_reconcile(l_flg)
int l_flg;
{
    if (l_flg == 0 || l_flg == 2)
    {
       strcpy(d_chk_main_acc1_code.arr,d_ar_hdr_main_acc1_code.arr);
       strcpy(d_chk_main_acc2_code.arr,d_ar_hdr_main_acc2_code.arr);
       strcpy(d_chk_dept_code.arr,d_ar_hdr_dept_code.arr);
       strcpy(d_chk_product_group_code.arr,d_ar_hdr_product_group_code.arr);
       strcpy(d_chk_product_line_code.arr,d_ar_hdr_product_line_code.arr);
       strcpy(d_chk_sub_group_code.arr,d_ar_hdr_sub_group_code.arr);
       strcpy(d_chk_sub_line_code.arr,d_ar_hdr_sub_line_code.arr);

       d_chk_main_acc1_code.len = strlen(d_chk_main_acc1_code.arr);
       d_chk_main_acc2_code.len = strlen(d_chk_main_acc2_code.arr);
       d_chk_dept_code.len      = strlen(d_chk_dept_code.arr);
d_chk_product_group_code.len    = strlen(d_chk_product_group_code.arr);
d_chk_product_line_code.len    = strlen(d_chk_product_line_code.arr);
d_chk_sub_group_code.len = strlen(d_chk_sub_group_code.arr);
d_chk_sub_line_code.len  = strlen(d_chk_sub_line_code.arr);
 
    }
    else
    {
       strcpy(d_chk_main_acc1_code.arr,d_ar_line_main_acc1_code.arr);
       strcpy(d_chk_main_acc2_code.arr,d_ar_line_main_acc2_code.arr);
       strcpy(d_chk_dept_code.arr,d_ar_line_dept_code.arr);
       strcpy(d_chk_product_group_code.arr,d_ar_line_product_group_code.arr);
       strcpy(d_chk_product_line_code.arr,d_ar_line_product_line_code.arr);
      strcpy(d_chk_sub_group_code.arr,d_ar_line_sub_group_code.arr);
       strcpy(d_chk_sub_line_code.arr,d_ar_line_sub_line_code.arr);

       d_chk_main_acc1_code.len = strlen(d_chk_main_acc1_code.arr);
       d_chk_main_acc2_code.len = strlen(d_chk_main_acc2_code.arr);
       d_chk_dept_code.len      = strlen(d_chk_dept_code.arr);
       d_chk_product_group_code.len     = strlen(d_chk_product_group_code.arr);
       d_chk_product_line_code.len      = strlen(d_chk_product_line_code.arr);
       d_chk_sub_group_code.len   = strlen(d_chk_sub_group_code.arr);
       d_chk_sub_line_code.len    = strlen(d_chk_sub_line_code.arr);
 
    }

    EXEC SQL OPEN GL_POSTING_ACC_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor GL_POSTING_ACC_CUR",0,"");

    d_ar_bank_reconcile_flg.arr[0] = '\0';
    d_ar_bank_reconcile_flg.len    = 0;

    EXEC SQL FETCH GL_POSTING_ACC_CUR
              INTO :d_ar_bank_reconcile_flg;

    if (OERROR)
         err_mesg("FETCH failed on cursor GL_POSTING_ACC_CUR",0,"");

    d_ar_bank_reconcile_flg.arr[d_ar_bank_reconcile_flg.len] = '\0';
}

open_line(l_type)
int l_type;
{
     switch(l_type)
     {
        case 1 :  
                 EXEC SQL OPEN AR_INV_LINE_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_INV_LINE_CUR",0,"");
                 break;
        case 2 :  
                 EXEC SQL OPEN AR_DN_LINE_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_DN_LINE_CUR",0,"");
                 break;
        case 3 :  
                 EXEC SQL OPEN AR_CN_LINE_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_CN_LINE_CUR",0,"");
                 break;
        case 4 :  
                 EXEC SQL OPEN AR_ADJ_LINE_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_ADJ_LINE_CUR",0,"");
                 break;
        case 5 :  
                 EXEC SQL OPEN AR_REC_LINE_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_REC_LINE_CUR",0,"");
                 break;
        case 6 :  
                 EXEC SQL OPEN AR_PAY_LINE_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_PAY_LINE_CUR",0,"");
                 break;
       }
}

fetch_line(l_type)
int l_type;
{
   init_line_variables();

   switch (l_type)
   {
       case 1 :
             EXEC SQL FETCH AR_INV_LINE_CUR
                       INTO :d_ar_line_main_acc1_code,
                            :d_ar_line_main_acc2_code,
                            :d_ar_line_dept_code,
                            :d_ar_line_product_group_code,
                            :d_ar_line_product_line_code,
                            :d_ar_line_sub_group_code,
                            :d_ar_line_sub_line_code,
                            :d_ar_line_amt_local,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :d_ar_line_narration;
             if (OERROR)
                  err_mesg("FETCH failed on cursor AR_INV_LINE_CUR",0,"");
             break;
       case 2 :
             EXEC SQL FETCH AR_DN_LINE_CUR
                       INTO :d_ar_line_main_acc1_code,
                            :d_ar_line_main_acc2_code,
                            :d_ar_line_dept_code,
                            :d_ar_line_product_group_code,
                            :d_ar_line_product_line_code,
                            :d_ar_line_sub_group_code,
                            :d_ar_line_sub_line_code,
                            :d_ar_line_amt_local,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :d_ar_line_narration;
             if (OERROR)
                  err_mesg("FETCH failed on cursor AR_DN_LINE_CUR",0,"");
             break;
       case 3 :
             EXEC SQL FETCH AR_CN_LINE_CUR
                       INTO :d_ar_line_main_acc1_code,
                            :d_ar_line_main_acc2_code,
                            :d_ar_line_dept_code,
                            :d_ar_line_product_group_code,
                            :d_ar_line_product_line_code,
                            :d_ar_line_sub_group_code,
                            :d_ar_line_sub_line_code,
                            :d_ar_line_amt_local,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :d_ar_line_narration;
             if (OERROR)
                  err_mesg("FETCH failed on cursor AR_CN_LINE_CUR",0,"");
             break;
       case 4 :
             EXEC SQL FETCH AR_ADJ_LINE_CUR
                       INTO :d_ar_line_main_acc1_code,
                            :d_ar_line_main_acc2_code,
                            :d_ar_line_dept_code,
                            :d_ar_line_product_group_code,
                            :d_ar_line_product_line_code,
                            :d_ar_line_sub_group_code,
                            :d_ar_line_sub_line_code,
                            :d_ar_line_amt_local,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :d_ar_line_narration;
             if (OERROR)
                  err_mesg("FETCH failed on cursor AR_ADJ_LINE_CUR",0,"");
             break;
       case 5 :
             EXEC SQL FETCH AR_REC_LINE_CUR
                       INTO :d_ar_line_main_acc1_code,
                            :d_ar_line_main_acc2_code,
                            :d_ar_line_dept_code,
                            :d_ar_line_product_group_code,
                            :d_ar_line_product_line_code,
                            :d_ar_line_sub_group_code,
                            :d_ar_line_sub_line_code,
                            :d_ar_line_amt_local,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :d_ar_line_narration;
             if (OERROR)
                  err_mesg("FETCH failed on cursor AR_REC_LINE_CUR",0,"");
             break;
       case 6 :
             EXEC SQL FETCH AR_PAY_LINE_CUR
                       INTO :d_ar_line_main_acc1_code,
                            :d_ar_line_main_acc2_code,
                            :d_ar_line_dept_code,
                            :d_ar_line_product_group_code,
                            :d_ar_line_product_line_code,
                            :d_ar_line_sub_group_code,
                            :d_ar_line_sub_line_code,
                            :d_ar_line_amt_local,
                            :l_gd_amount,
                            :l_gd_sign_amount,
                            :l_gd_amount_negative,
                            :d_ar_line_narration;
             if (OERROR)
                  err_mesg("FETCH failed on cursor AR_PAY_LINE_CUR",0,"");
             break;
     }
     null_term_line();

     if (LAST_ROW)
         return (0);
     else
         return (1);
}

init_line_variables()
{
   d_ar_line_main_acc1_code.arr[0]        = '\0';
   d_ar_line_main_acc2_code.arr[0]        = '\0';
   d_ar_line_dept_code.arr[0]             = '\0';
   d_ar_line_product_group_code.arr[0]    = '\0';
   d_ar_line_product_line_code.arr[0]     = '\0';
   d_ar_line_sub_group_code.arr[0]  = '\0';
   d_ar_line_sub_line_code.arr[0]   = '\0';
   d_ar_line_amt_local.arr[0]             = '\0';
   d_ar_line_narration.arr[0]             = '\0';
   l_gd_amount.arr[0]                     = '\0';
   l_gd_amount_negative.arr[0]            = '\0';


   d_ar_line_main_acc1_code.len           = 0;
   d_ar_line_main_acc2_code.len           = 0;
   d_ar_line_dept_code.len                = 0;
   d_ar_line_product_group_code.len       = 0;
   d_ar_line_product_line_code.len        = 0;
   d_ar_line_sub_group_code.len     = 0;
   d_ar_line_sub_line_code.len      = 0;
   d_ar_line_amt_local.len                = 0;
   d_ar_line_narration.len                = 0;
   l_gd_amount.len                        = 0;
   l_gd_amount_negative.len               = 0;

}

null_term_line()
{
  d_ar_line_main_acc1_code.arr[d_ar_line_main_acc1_code.len]             = '\0';
  d_ar_line_main_acc2_code.arr[d_ar_line_main_acc2_code.len]             = '\0';
  d_ar_line_dept_code.arr[d_ar_line_dept_code.len]                       = '\0';
  d_ar_line_product_group_code.arr[d_ar_line_product_group_code.len]     = '\0';
  d_ar_line_product_line_code.arr[d_ar_line_product_line_code.len]       = '\0';
  d_ar_line_sub_group_code.arr[d_ar_line_sub_group_code.len] = '\0';
  d_ar_line_sub_line_code.arr[d_ar_line_sub_line_code.len]   = '\0';
  d_ar_line_amt_local.arr[d_ar_line_amt_local.len]                       = '\0';
  d_ar_line_narration.arr[d_ar_line_narration.len]                       = '\0';
  l_gd_amount.arr[l_gd_amount.len]                                       = '\0';
  l_gd_amount_negative.arr[l_gd_amount_negative.len]                     = '\0';

}

open_trn_inv_hdr(l_type)
int l_type;
{
     switch(l_type)
     {
        case 2 :
                 EXEC SQL OPEN AR_DN_INV_HDR_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_DN_INV_HDR_CUR",0,"");
                 break;
        case 3 :  
                 EXEC SQL OPEN AR_CN_INV_HDR_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_CN_INV_HDR_CUR",0,"");
                 break;
        case 4 :  
                 EXEC SQL OPEN AR_ADJ_INV_HDR_CUR;
                 if (OERROR)
                      err_mesg("OPEN failed on cursor AR_ADJ_INV_HDR_CUR",0,"");
                 break;
       }
}

fetch_trn_inv_hdr(l_type)
int l_type;
{
     init_trn_ihdr_variables();

     switch(l_type)
     {
        case 2 :
               EXEC SQL FETCH AR_DN_INV_HDR_CUR
                         INTO :d_ar_hdr_org_doc_type_code,
                              :d_ar_hdr_org_doc_num,
                              :d_ar_hdr_narration,
                              :d_ar_hdr_cust_ref,
                              :d_ar_hdr_main_acc1_code,
                              :d_ar_hdr_main_acc2_code,
                              :d_ar_hdr_dept_code,
                              :d_ar_hdr_product_group_code,
                              :d_ar_hdr_product_line_code,
                              :d_ar_hdr_sub_group_code,
                              :d_ar_hdr_sub_line_code,
                              :d_ar_hdr_amount,
                              :l_gd_amount,
                              :l_gd_sign_amount,
                              :l_gd_amount_negative,
							  :d_cust_code;
               if (OERROR)
                   err_mesg("FETCH failed on cursor AR_DN_INV_HDR_CUR",0,"");
               break;
        case 3 :
               EXEC SQL FETCH AR_CN_INV_HDR_CUR
                         INTO :d_ar_hdr_org_doc_type_code,
                              :d_ar_hdr_org_doc_num,
                              :d_ar_hdr_narration,
                              :d_ar_hdr_cust_ref,
                              :d_ar_hdr_main_acc1_code,
                              :d_ar_hdr_main_acc2_code,
                              :d_ar_hdr_dept_code,
                              :d_ar_hdr_product_group_code,
                              :d_ar_hdr_product_line_code,
                              :d_ar_hdr_sub_group_code,
                              :d_ar_hdr_sub_line_code,
                              :d_ar_hdr_amount,
                              :l_gd_amount,
                              :l_gd_sign_amount,
                              :l_gd_amount_negative,
							  :d_cust_code;
               if (OERROR)
                   err_mesg("FETCH failed on cursor AR_CN_INV_HDR_CUR",0,"");
               break;
        case 4 :
               d_ar_hdr_adj_type.arr[0] = '\0';
               d_ar_hdr_adj_type.len    = 0;
    
               EXEC SQL FETCH AR_ADJ_INV_HDR_CUR
                         INTO :d_ar_hdr_org_doc_type_code,
                              :d_ar_hdr_org_doc_num,
                              :d_ar_hdr_narration,
                              :d_ar_hdr_cust_ref,
                              :d_ar_hdr_main_acc1_code,
                              :d_ar_hdr_main_acc2_code,
                              :d_ar_hdr_dept_code,
                              :d_ar_hdr_product_group_code,
                              :d_ar_hdr_product_line_code,
                              :d_ar_hdr_sub_group_code,
                              :d_ar_hdr_sub_line_code,
                              :d_ar_hdr_adj_type,
                              :d_ar_hdr_amount,
                              :l_gd_amount,
                              :l_gd_sign_amount,
                              :l_gd_amount_negative,
							  :d_cust_code;
               if (OERROR)
                   err_mesg("FETCH failed on cursor AR_ADJ_INV_HDR_CUR",0,"");

               d_ar_hdr_adj_type.arr[d_ar_hdr_adj_type.len] = '\0';
               break;
     }
     null_term_ihdr();
     if ((strcmp(d_ar_hdr_doc_type_code.arr,
             d_ar_hdr_org_doc_type_code.arr)==0)  &&
          (strcmp(d_ar_hdr_doc_num.arr,d_ar_hdr_org_doc_num.arr)==0))
      {
          strcpy(d_cust_ref1.arr,d_ar_hdr_cust_ref.arr);
          d_cust_ref1.arr[10] = '\0';
          d_cust_ref1.len = strlen(d_cust_ref1.arr);

          strcpy(d_narration1.arr,d_ar_hdr_narration.arr);
          d_narration1.len = strlen(d_narration1.arr);
      }

      strcpy(l_gd_hdr_amount,l_gd_amount.arr);
      l_gd_hdr_sign_amount = l_gd_sign_amount;
      strcpy(l_gd_hdr_amt_negative,l_gd_amount_negative.arr);


     if (LAST_ROW)
         return (0);
     else
         return (1);
}

init_trn_ihdr_variables()
{
  d_ar_hdr_org_doc_type_code.arr[0]     = '\0';
  d_ar_hdr_org_doc_num.arr[0]           = '\0';
  d_ar_hdr_narration.arr[0]             = '\0';
  d_ar_hdr_cust_ref.arr[0]              = '\0';
  d_cust_code.arr[0]                    = '\0';
  d_ar_hdr_main_acc1_code.arr[0]        = '\0';
  d_ar_hdr_main_acc2_code.arr[0]        = '\0';
  d_ar_hdr_dept_code.arr[0]             = '\0';
  d_ar_hdr_product_group_code.arr[0]    = '\0';
  d_ar_hdr_product_line_code.arr[0]     = '\0';
  d_ar_hdr_sub_group_code.arr[0]  = '\0';
  d_ar_hdr_sub_line_code.arr[0]   = '\0';
  d_ar_hdr_amount.arr[0]                = '\0';
  l_gd_amount.arr[0]                    = '\0';
  l_gd_amount_negative.arr[0]           = '\0';

  d_ar_hdr_org_doc_type_code.len        = 0;
  d_ar_hdr_org_doc_num.len              = 0;
  d_ar_hdr_narration.len                = 0;
  d_ar_hdr_cust_ref.len                 = 0;
  d_cust_code.len                       = 0;
  d_ar_hdr_main_acc1_code.len           = 0;
  d_ar_hdr_main_acc2_code.len           = 0;
  d_ar_hdr_dept_code.len                = 0;
  d_ar_hdr_product_group_code.len       = 0;
  d_ar_hdr_product_line_code.len        = 0;
  d_ar_hdr_sub_group_code.len     = 0;
  d_ar_hdr_sub_line_code.len      = 0;
  d_ar_hdr_amount.len                   = 0;
  l_gd_amount.len                       = 0;
  l_gd_amount_negative.len              = 0;

}

null_term_ihdr()
{
    d_ar_hdr_org_doc_type_code.arr[d_ar_hdr_org_doc_type_code.len]       = '\0';
    d_ar_hdr_org_doc_num.arr[d_ar_hdr_org_doc_num.len]                   = '\0';
    d_ar_hdr_narration.arr[d_ar_hdr_narration.len]                       = '\0';
    d_ar_hdr_cust_ref.arr[d_ar_hdr_cust_ref.len]                         = '\0';
	d_cust_code.arr[d_cust_code.len]                                     = '\0';
    d_ar_hdr_main_acc1_code.arr[d_ar_hdr_main_acc1_code.len]             = '\0';
    d_ar_hdr_main_acc2_code.arr[d_ar_hdr_main_acc2_code.len]             = '\0';
    d_ar_hdr_dept_code.arr[d_ar_hdr_dept_code.len]                       = '\0';
    d_ar_hdr_product_group_code.arr[d_ar_hdr_product_group_code.len]     = '\0';
    d_ar_hdr_product_line_code.arr[d_ar_hdr_product_line_code.len]       = '\0';
    d_ar_hdr_sub_group_code.arr[d_ar_hdr_sub_group_code.len] = '\0';
    d_ar_hdr_sub_line_code.arr[d_ar_hdr_sub_line_code.len]   = '\0';
    d_ar_hdr_amount.arr[d_ar_hdr_amount.len]                             = '\0';
    l_gd_amount.arr[l_gd_amount.len]                                     = '\0';
    l_gd_amount_negative.arr[l_gd_amount_negative.len]                   = '\0';

}

delete_rec()
{
   EXEC SQL DELETE FROM GL_TXN_DOC_HDR
                  WHERE BATCH_NUM     = 0
                    AND DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                    AND DOC_NUM       = :d_ar_hdr_doc_num;

   if (OERROR)
         err_mesg("DELETE failed on table GL_TXN_DOC_HDR",0,"");

   EXEC SQL DELETE FROM GL_TXN_DOC_LINE
                  WHERE BATCH_NUM     = 0
                    AND DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                    AND DOC_NUM       = :d_ar_hdr_doc_num;

   if (OERROR)
         err_mesg("DELETE failed on table GL_TXN_DOC_LINE",0,"");

   EXEC SQL DELETE FROM AR_GL_DISTRBN_TEMP
                  WHERE DOC_TYPE_CODE = :d_ar_hdr_doc_type_code
                    AND DOC_NUM       = :d_ar_hdr_doc_num;
 
   if (OERROR)
         err_mesg("DELETE failed on table AR_GL_DISTRBN_TEMP - 1",0,"");
}

gl_posting()
{
 char r_err_msg[100];

 if (post_doc((long)0,d_ar_hdr_doc_type_code.arr,
              atol(d_ar_hdr_doc_num.arr),r_err_msg) == -1)
        err_mesg(r_err_msg,0,""); 
}

gl_posting_2()
{
 char r_err_msg[100];

 if (post_doc((long)0,tmp_doc_type_code,atol(tmp_doc_num),r_err_msg) == -1)
        err_mesg(r_err_msg,0,""); 
}

update_hdr_rec(l_type)
int l_type;
{
     switch(l_type)
     {
        case 1 :  
                 EXEC SQL UPDATE AR_INV_HDR
                             SET INTERFACE_FLAG = 'Y'
                           WHERE ROWID = :d_ar_hdr_rowid;
                 if (OERROR)
                      err_mesg("UPDATE failed on cursor AR_INV_HDR",0,"");
                 break;
        case 2 :  
		         
                 EXEC SQL UPDATE AR_DN_HDR
                             SET INTERFACE_FLAG = 'Y'
                           WHERE ROWID = :d_ar_hdr_rowid;
                 if (OERROR)
                      err_mesg("UPDATE failed on cursor AR_DN_HDR",0,"");
                 break;
        case 3 :  
                 EXEC SQL UPDATE AR_CN_HDR
                             SET INTERFACE_FLAG = 'Y'
                           WHERE ROWID = :d_ar_hdr_rowid;
                 if (OERROR)
                      err_mesg("UPDATE failed on cursor AR_CN_HDR",0,"");
                 break;
        case 4 :  
                 EXEC SQL UPDATE AR_ADJ_HDR
                             SET INTERFACE_FLAG = 'Y'
                           WHERE ROWID = :d_ar_hdr_rowid;
                 if (OERROR)
                      err_mesg("UPDATE failed on cursor AR_ADJ_HDR",0,"");
                 break;
        case 5 :  

  		         process_off_rec();  
				 
				 EXEC SQL UPDATE AR_REC_HDR
                             SET INTERFACE_FLAG = 'Y'
                           WHERE ROWID = :d_ar_hdr_rowid;
                 if (OERROR)
                      err_mesg("UPDATE failed on cursor AR_REC_HDR",0,"");
                 break;

				 EXEC SQL UPDATE AR_CASHIER
                           SET INTERFACE_FLAG = 'Y'
                           WHERE ROWID = :d_ar_off_hdr_rowid;

                 if (OERROR)
                      err_mesg("UPDATE failed on cursor AR_CASHIER",0,"");
                 break;

        case 6 :  
                 EXEC SQL UPDATE AR_PAY_HDR
                            SET INTERFACE_FLAG = 'Y'
                           WHERE ROWID = :d_ar_hdr_rowid;
                 if (OERROR)
                      err_mesg("UPDATE failed on cursor AR_PAY_HDR",0,"");
                 break;
       }
}

process_summary_1()
{
    open_gl_distrbn_cur1();
    tmp_post_month = 0; 
    tmp_post_year  = 0;
    d_ar_run_line_num = 0;

    strcpy(d_ar_hdr_doc_type_code.arr,nd_tmp_doc_type_code.arr);
    d_ar_hdr_doc_type_code.len = strlen(d_ar_hdr_doc_type_code.arr);    

    while (fetch_distrbn_rec1()) 
    {        
		 
        if ( (tmp_post_month != d_ar_hdr_post_month) ||
             (tmp_post_year  != d_ar_hdr_post_year) )
        {
             insert_gl_hdr_rec();
             gl_posting();
             
			 tmp_post_month = d_ar_hdr_post_month;
             tmp_post_year  = d_ar_hdr_post_year;
             d_ar_run_line_num = 0;
			 
        }
        if (d_ar_run_line_num == 0)
         { 
		   generate_num();
		   update_ar_gl_dist();
          }
        insert_gl_line_rec();
     }
     if (d_ar_run_line_num > 0)
		insert_gl_hdr_rec();
     
     gl_posting();
 

} 

update_ar_gl_dist()
{
     EXEC SQL UPDATE AR_GL_DISTRBN
	    SET REF_DOC_TYPE_CODE = :d_ar_hdr_doc_type_code,
			REF_DOC_NUM       = :d_ar_hdr_doc_num
      WHERE REF_PROCESS = :nd_pgm_date
	    AND NVL(REF_FLAG,'N') = 'N' 
		AND POST_YEAR = :d_ar_hdr_post_year
		AND POST_MONTH = :d_ar_hdr_post_month
		AND TRN_TYPE_CODE = :l_gd_trn_type_code;
          
		  if (OERROR)
                  err_mesg("UPDATE failed on cursor AR_GL_DISTRBN ",0,"");
 
     
   if (!NOT_FOUND)
    {

   EXEC SQL INSERT INTO SY_DOC_CONTROL (ACC_ENTITY_CODE,                
										MODULE_ID,                      
										DOC_TYPE_CODE,                  
										DOC_NUM,                        
										DOC_DATE,                       
										POSTED_DATE,                    
										DOC_STATUS,                     
										NARRATION,                      
										POST_MONTH,                     
										POST_YEAR,                      
										CANCELLED_DATE,                 
										ADDED_BY_ID,                    
										ADDED_DATE ,                    
										ADDED_AT_WS_NO ,                
										ADDED_FACILITY_ID,              
										MODIFIED_BY_ID,                 
										MODIFIED_DATE,                  
										MODIFIED_AT_WS_NO,              
										MODIFIED_FACILITY_ID)
                       VALUES		( :nd_acc_entity_code,
					                  'AR',
									  :d_ar_hdr_doc_type_code,
									  :d_ar_hdr_doc_num,
									  TRUNC(SYSDATE),
									  SYSDATE,					            
                                      'P',
									  NULL, 
                                      :d_ar_hdr_post_month,
									  :d_ar_hdr_post_year,
									  TO_DATE(NULL),
									  USER,
									  SYSDATE,
									  NULL,
									  NULL,
									  USER,
									  SYSDATE, 
									  NULL,
									  NULL);
 
		  if (OERROR)
                  err_mesg("Insert failed on table SY_DOC_CONTROL 1",0,"");
   }
}
 
open_gl_distrbn_cur1()
{
   EXEC SQL OPEN AR_GL_DISTRBN_TEMP_CUR1;
   if (OERROR)
         err_mesg("OPEN failed on cursor AR_GL_DISTRBN_TEMP_CUR1",0,"");
} 

fetch_distrbn_rec1()
{
  d_ar_hdr_main_acc1_code.arr[0]        = '\0';
  d_ar_hdr_main_acc2_code.arr[0]        = '\0';
  d_ar_hdr_dept_code.arr[0]             = '\0';
  d_ar_hdr_product_group_code.arr[0]    = '\0';
  d_ar_hdr_product_line_code.arr[0]     = '\0';
  d_ar_hdr_sub_group_code.arr[0]  = '\0';
  d_ar_hdr_sub_line_code.arr[0]   = '\0';
  d_ar_hdr_amount.arr[0]                = '\0';

  d_ar_hdr_main_acc1_code.len           = 0;
  d_ar_hdr_main_acc2_code.len           = 0;
  d_ar_hdr_dept_code.len                = 0;
  d_ar_hdr_product_group_code.len       = 0;
  d_ar_hdr_product_line_code.len        = 0;
  d_ar_hdr_sub_group_code.len     = 0;
  d_ar_hdr_sub_line_code.len      = 0;
  d_ar_hdr_amount.len                   = 0;
  d_ar_hdr_post_month                   = 0;
  d_ar_hdr_post_year                    = 0;

    EXEC SQL FETCH AR_GL_DISTRBN_TEMP_CUR1
              INTO :d_ar_hdr_post_month,
                   :d_ar_hdr_post_year,
                   :d_ar_hdr_main_acc1_code,
                   :d_ar_hdr_main_acc2_code,
                   :d_ar_hdr_dept_code,
                   :d_ar_hdr_product_group_code,
                   :d_ar_hdr_product_line_code,
                   :d_ar_hdr_sub_group_code,
                   :d_ar_hdr_sub_line_code,
                   :d_ar_hdr_amount;

    if (OERROR)
         err_mesg("FETCH failed on cursor AR_GL_DISTRBN_TEMP_CUR1",0,"");

    d_ar_hdr_main_acc1_code.arr[d_ar_hdr_main_acc1_code.len]             = '\0';
    d_ar_hdr_main_acc2_code.arr[d_ar_hdr_main_acc2_code.len]             = '\0';
    d_ar_hdr_dept_code.arr[d_ar_hdr_dept_code.len]                       = '\0';
    d_ar_hdr_product_group_code.arr[d_ar_hdr_product_group_code.len]     = '\0';
    d_ar_hdr_product_line_code.arr[d_ar_hdr_product_line_code.len]       = '\0';
    d_ar_hdr_sub_group_code.arr[d_ar_hdr_sub_group_code.len] = '\0';
    d_ar_hdr_sub_line_code.arr[d_ar_hdr_sub_line_code.len]   = '\0';
    d_ar_hdr_amount.arr[d_ar_hdr_amount.len]                             = '\0';

    if (tmp_post_month == 0)
    {
        tmp_post_month = d_ar_hdr_post_month;
        tmp_post_year  = d_ar_hdr_post_year;
    }

    if (LAST_ROW) 
       return(0);
    else
       return(1);
 
}

generate_num()
{
     d_ar_hdr_doc_num.arr[0] = '\0';
     d_ar_hdr_doc_num.len    = 0;

     EXEC SQL SELECT NVL(NEXT_DOC_NO,0)
                INTO :d_ar_hdr_doc_num
                FROM SY_ACC_ENTITY_DOC_TYPE
               WHERE ROWID = :d_sy_acc_rowid;

     if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");

     d_ar_hdr_doc_num.arr[d_ar_hdr_doc_num.len] = '\0';

     EXEC SQL UPDATE SY_ACC_ENTITY_DOC_TYPE 
                 SET NEXT_DOC_NO = NVL(NEXT_DOC_NO,0) + 1
               WHERE ROWID = :d_sy_acc_rowid;
      if (OERROR)
         err_mesg("UPDATE failed on table SY_ACC_ENTITY_DOC_TYPE",0,"");

}

insert_gl_line_rec()
{
    d_ar_run_line_num ++;

    sprintf(d_narration1.arr,"AR %s %02d/%04d",trn_desc[t_type],
                         tmp_post_month,
                         tmp_post_year);
    d_narration1.len = strlen(d_narration1.arr);
/*
disp_message (ERR_MESG,d_ar_hdr_doc_type_code.arr);
disp_message (ERR_MESG,d_ar_hdr_doc_num.arr);
sprintf(tempstring,"%d",d_ar_run_line_num);
disp_message (ERR_MESG,tempstring);
*/  
    EXEC SQL INSERT INTO GL_TXN_DOC_LINE
           (
              ACC_ENTITY_CODE,
			  BATCH_NUM,
              DOC_TYPE_CODE,
              DOC_NUM,
              MAIN_ACC1_CODE,
              MAIN_ACC2_CODE,
              DEPT_CODE,
              PRODUCT_GROUP_CODE,
              PRODUCT_LINE_CODE,
              SUBLEDGER_GROUP_CODE,
              SUBLEDGER_LINE_CODE,
              LOCAL_AMT,
              NARRATION,
              LINE_NUM,
			  CUST_SUPP_CODE
            )
          VALUES
            (
              :nd_acc_entity_code,
			  0,
              :d_ar_hdr_doc_type_code,
              :d_ar_hdr_doc_num,
              :d_ar_hdr_main_acc1_code,
              :d_ar_hdr_main_acc2_code,
              :d_ar_hdr_dept_code,
              :d_ar_hdr_product_group_code,
              :d_ar_hdr_product_line_code,
              :d_ar_hdr_sub_group_code,
              :d_ar_hdr_sub_line_code,
              :d_ar_hdr_amount,
              :d_narration1,
              :d_ar_run_line_num,
			  :d_cust_code
            );

        if (OERROR)
           err_mesg("INSERT failed on table GL_TXN_DOC_LINE - 3",0,"");

}

insert_gl_hdr_rec()
{
       d_gl_dist_post_month  = tmp_post_month;
       d_gl_dist_post_year   = tmp_post_year;


       EXEC SQL INSERT INTO GL_TXN_DOC_HDR
              (
                ACC_ENTITY_CODE,
				BATCH_NUM,
                DOC_TYPE_CODE,
                DOC_NUM,
                DOC_DATE,
                DOC_REF,
                NARRATION,
                POST_MONTH,
                POST_YEAR,
                CTRL_AMT,
                ADDED_BY_ID,
                MODIFIED_BY_ID,
                ADDED_DATE,
                MODIFIED_DATE,
                MAX_LINE_NUM,
                MODULE_ID
              )
            VALUES
              (
                :nd_acc_entity_code,
				0,
                :d_ar_hdr_doc_type_code,
                :d_ar_hdr_doc_num,
                SYSDATE,
                NULL,
                NULL,
                :d_gl_dist_post_month,
                :d_gl_dist_post_year,
                0,
                USER,
                USER,
                SYSDATE,
                SYSDATE,
                :d_ar_run_line_num,
                'AR'
             );

    if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_HDR - 2 - HAHA 2",0,"");

}

process_summary_2()
{
    tmp_doc_type_code[0] = '\0';
    tmp_doc_num[0]       = '\0';
    d_ar_run_line_num = 0;
    
    open_gl_distrbn_cur2();
    while (fetch_distrbn_rec2())
    {
         if ( (strcmp(tmp_doc_type_code,d_ar_hdr_doc_type_code.arr) != 0) ||
              (strcmp(tmp_doc_num,d_ar_hdr_doc_num.arr) != 0) )
         {
             insert_gl_hdr_rec2();
             gl_posting_2();

             d_ar_run_line_num = 0;

             strcpy(tmp_doc_type_code,d_ar_hdr_doc_type_code.arr);
             strcpy(tmp_doc_num,d_ar_hdr_doc_num.arr);
             strcpy(tmp_doc_date,d_ar_hdr_doc_date.arr);

             tmp_post_month = d_ar_hdr_post_month;
             tmp_post_year  = d_ar_hdr_post_year;

             strcpy(d_cust_ref1.arr,d_ar_hdr_doc_ref.arr);
             d_cust_ref1.arr[10] = '\0';
             d_cust_ref1.len = strlen(d_cust_ref1.arr);

             strcpy(d_narration1.arr,d_ar_hdr_narration.arr);
             d_narration1.len = strlen(d_narration1.arr);
         }
         insert_gl_line_rec2();

         strcpy(l_prv_cheque_num.arr,l_gd_cheque_num.arr);
         l_prv_cheque_num.len = strlen(l_prv_cheque_num.arr);

    }
    if (d_ar_run_line_num > 0)
    {
        insert_gl_hdr_rec2();
        gl_posting_2();
    }

}

open_gl_distrbn_cur2()
{
   EXEC SQL OPEN AR_GL_DISTRBN_TEMP_CUR2;

   if (OERROR)
         err_mesg("OPEN failed on cursor AR_GL_DISTRBN_TEMP_CUR2",0,"");
}

fetch_distrbn_rec2()
{

  d_ar_hdr_doc_type_code.arr[0]         = '\0';
  d_ar_hdr_doc_num.arr[0]               = '\0';
  d_ar_hdr_doc_date.arr[0]              = '\0';
  d_ar_hdr_doc_ref.arr[0]               = '\0';
  d_ar_hdr_main_acc1_code.arr[0]        = '\0';
  d_ar_hdr_main_acc2_code.arr[0]        = '\0';
  d_ar_hdr_dept_code.arr[0]             = '\0';
  d_ar_hdr_product_group_code.arr[0]    = '\0';
  d_ar_hdr_product_line_code.arr[0]     = '\0';
  d_ar_hdr_sub_group_code.arr[0]  = '\0';
  d_ar_hdr_sub_line_code.arr[0]   = '\0';
  d_ar_hdr_amount.arr[0]                = '\0';
  d_ar_hdr_narration.arr[0]             = '\0';
  l_gd_cheque_num.arr[0]                = '\0';

  d_ar_hdr_main_acc1_code.len           = 0;
  d_ar_hdr_main_acc2_code.len           = 0;
  d_ar_hdr_dept_code.len                = 0;
  d_ar_hdr_product_group_code.len       = 0;
  d_ar_hdr_product_line_code.len        = 0;
  d_ar_hdr_sub_group_code.len     = 0;
  d_ar_hdr_sub_line_code.len      = 0;
  d_ar_hdr_amount.len                   = 0;
  d_ar_hdr_narration.len                = 0;
  l_gd_cheque_num.len                   = 0;

  d_ar_hdr_post_month                   = 0;
  d_ar_hdr_post_year                    = 0;

      EXEC SQL FETCH AR_GL_DISTRBN_TEMP_CUR2
                INTO :d_ar_hdr_doc_type_code,
                     :d_ar_hdr_doc_num,
                     :d_ar_hdr_doc_date,
                     :d_ar_hdr_doc_ref,
                     :d_ar_hdr_main_acc1_code,
                     :d_ar_hdr_main_acc2_code,
                     :d_ar_hdr_dept_code,
                     :d_ar_hdr_product_group_code,
                     :d_ar_hdr_product_line_code,
                     :d_ar_hdr_sub_group_code,
                     :d_ar_hdr_sub_line_code,
                     :d_ar_hdr_amount,
                     :d_ar_hdr_narration,
                     :d_ar_hdr_post_month,
                     :d_ar_hdr_post_year,
					 :l_gd_cheque_num;

      if (OERROR)
         err_mesg("FETCH failed on cursor AR_GL_DISTRBN_TEMP_CUR2",0,"");

    d_ar_hdr_doc_type_code.arr[d_ar_hdr_doc_type_code.len]               = '\0';
    d_ar_hdr_doc_num.arr[d_ar_hdr_doc_num.len]                           = '\0';
    d_ar_hdr_doc_date.arr[d_ar_hdr_doc_date.len]                         = '\0';
    d_ar_hdr_doc_ref.arr[d_ar_hdr_doc_ref.len]                           = '\0';
    d_ar_hdr_main_acc1_code.arr[d_ar_hdr_main_acc1_code.len]             = '\0';
    d_ar_hdr_main_acc2_code.arr[d_ar_hdr_main_acc2_code.len]             = '\0';
    d_ar_hdr_dept_code.arr[d_ar_hdr_dept_code.len]                       = '\0';
    d_ar_hdr_product_group_code.arr[d_ar_hdr_product_group_code.len]     = '\0';
    d_ar_hdr_product_line_code.arr[d_ar_hdr_product_line_code.len]       = '\0';
    d_ar_hdr_sub_group_code.arr[d_ar_hdr_sub_group_code.len] = '\0';
    d_ar_hdr_sub_line_code.arr[d_ar_hdr_sub_line_code.len]   = '\0';
    d_ar_hdr_amount.arr[d_ar_hdr_amount.len]                             = '\0';
    d_ar_hdr_narration.arr[d_ar_hdr_narration.len]                       = '\0';
    l_gd_cheque_num.arr[l_gd_cheque_num.len]                             = '\0';

     if (strlen(tmp_doc_type_code) == 0)
     {
          strcpy(tmp_doc_type_code,d_ar_hdr_doc_type_code.arr);
          strcpy(tmp_doc_num,d_ar_hdr_doc_num.arr);
          strcpy(tmp_doc_date,d_ar_hdr_doc_date.arr);
          tmp_post_month = d_ar_hdr_post_month;
          tmp_post_year  = d_ar_hdr_post_year;

          strcpy(d_cust_ref1.arr,d_ar_hdr_doc_ref.arr);
          d_cust_ref1.arr[10] = '\0';
          d_cust_ref1.len = strlen(d_cust_ref1.arr);

          strcpy(d_narration1.arr,d_ar_hdr_narration.arr);
          d_narration1.len = strlen(d_narration1.arr);
      }

    if (LAST_ROW)
         return(0);
    else
         return(1);
}

insert_gl_line_rec2()
{
    d_ar_run_line_num++;

    sprintf(d_narration1.arr,"AR %s %02d/%04d",trn_desc[t_type],
                         tmp_post_month,
                         tmp_post_year);
    d_narration1.len = strlen(d_narration1.arr);
/*
disp_message (ERR_MESG,d_ar_hdr_doc_type_code.arr);
disp_message (ERR_MESG,d_ar_hdr_doc_num.arr);
sprintf(tempstring,"%d",d_ar_run_line_num);
disp_message (ERR_MESG,tempstring);
*/ 
        EXEC SQL INSERT INTO GL_TXN_DOC_LINE
               (
                 ACC_ENTITY_CODE,
				 BATCH_NUM,
                 DOC_TYPE_CODE,
                 DOC_NUM,
                 MAIN_ACC1_CODE,
                 MAIN_ACC2_CODE,
                 DEPT_CODE,
                 PRODUCT_GROUP_CODE,
                 PRODUCT_LINE_CODE,
                 SUBLEDGER_GROUP_CODE,
                 SUBLEDGER_LINE_CODE,
                 LOCAL_AMT,
                 NARRATION,
                 LINE_NUM,
				 CUST_SUPP_CODE
               )
             VALUES
               (
                 :nd_acc_entity_code,
				 0,
                 :d_ar_hdr_doc_type_code,
                 :d_ar_hdr_doc_num,
                 :d_ar_hdr_main_acc1_code,
                 :d_ar_hdr_main_acc2_code,
                 :d_ar_hdr_dept_code,
                 :d_ar_hdr_product_group_code,
                 :d_ar_hdr_product_line_code,
                 :d_ar_hdr_sub_group_code,
                 :d_ar_hdr_sub_line_code,
                 :d_ar_hdr_amount,
                 :d_narration1,
                 :d_ar_run_line_num,
				 :d_cust_code
               );

       if (OERROR)
           err_mesg("INSERT failed on table GL_TXN_DOC_LINE - 2",0,"");

}

insert_gl_hdr_rec2()
{
      strcpy(d_gl_dist_doc_type_code.arr,tmp_doc_type_code);
      strcpy(d_gl_dist_doc_num.arr,tmp_doc_num);
      strcpy(d_gl_dist_doc_date.arr,tmp_doc_date);

      d_gl_dist_doc_type_code.len = strlen(d_gl_dist_doc_type_code.arr);
      d_gl_dist_doc_num.len       = strlen(d_gl_dist_doc_num.arr);
      d_gl_dist_doc_date.len      = strlen(d_gl_dist_doc_date.arr);

      d_gl_dist_post_month = tmp_post_month;
      d_gl_dist_post_year  = tmp_post_year;

       EXEC SQL INSERT INTO GL_TXN_DOC_HDR
              (
                ACC_ENTITY_CODE,
				BATCH_NUM,
                DOC_TYPE_CODE,
                DOC_NUM,
                DOC_DATE,
                DOC_REF,
                NARRATION,
                POST_MONTH,
                POST_YEAR,
                CTRL_AMT,
                ADDED_BY_ID,
                MODIFIED_BY_ID,
                ADDED_DATE,
                MODIFIED_DATE,
                MAX_LINE_NUM,
                MODULE_ID
              )
            VALUES
              (
                :nd_acc_entity_code,
				0,
                :d_gl_dist_doc_type_code,
                :d_gl_dist_doc_num,
                TO_DATE(:d_gl_dist_doc_date,'DD/MM/YYYY'),
                NULL,
                NULL,
                :d_gl_dist_post_month,
                :d_gl_dist_post_year,
                0,
                USER,
                USER,
                SYSDATE,
                SYSDATE,
                :d_ar_run_line_num,
                'AR'
             );

    if (OERROR)
         err_mesg("INSERT failed on table GL_TXN_DOC_HDR - HAHA 3",0,"");
}

insert_distrbn(hdr_line) /* 0 -> Hdr   1 -> Line */
int hdr_line;
{


    EXEC SQL BEGIN DECLARE SECTION;
       int l_ins_flg = 0;
    EXEC SQL END DECLARE SECTION;


    l_ins_flg = hdr_line;

    if (hdr_line == 0 && d_ar_switch == 0)
    {
        strcpy(l_gd_amount.arr,l_gd_hdr_amount);
        l_gd_amount.len = strlen(l_gd_amount.arr);

        l_gd_sign_amount = l_gd_hdr_sign_amount;

        strcpy(l_gd_amount_negative.arr,l_gd_hdr_amt_negative);
        l_gd_amount_negative.len = strlen(l_gd_amount_negative.arr);
    }


 
   calculate_credit_debit(hdr_line);

    if (strcmp(l_gd_trn_type_code.arr,"PAY") != 0)
    {
        strcpy(d_gd_hdr_cust_ref.arr,d_ar_hdr_cust_ref.arr);
        d_gd_hdr_cust_ref.len = strlen(d_gd_hdr_cust_ref.arr);
    }


   fetch_bank_reconcile(hdr_line);
        
   EXEC SQL INSERT INTO AR_GL_DISTRBN
            (
               DOC_TYPE_CODE,
               DOC_NUM,
               DOC_DATE,
               DOC_REF,
               CUST_CODE,
               MAIN_ACC1_CODE,
               MAIN_ACC2_CODE,
               DEPT_CODE,
               PRODUCT_GROUP_CODE,
               PRODUCT_LINE_CODE,
               SUBLEDGER_GROUP_CODE,
               SUBLEDGER_LINE_CODE,
               DEBIT_AMT,
               CREDIT_AMT,
               NARRATION,
               POST_MONTH,
               POST_YEAR,
               CHEQUE_NUM,
               CHEQUE_DATE,
               TRN_TYPE_CODE,
			   REF_FLAG ,
			   REF_PROCESS
            )
        VALUES
            (
            :d_ar_hdr_doc_type_code,
            :d_ar_hdr_doc_num,
            to_date(:d_ar_hdr_doc_date,'DD/MM/YYYY'),
            :d_gd_hdr_cust_ref,
            :d_cust_code, 
            DECODE(:l_ins_flg,'0',
                :d_ar_hdr_main_acc1_code, :d_ar_line_main_acc1_code),
            DECODE(:l_ins_flg,'0',
                 :d_ar_hdr_main_acc2_code, :d_ar_line_main_acc2_code),
            DECODE(:l_ins_flg,'0',
                 :d_ar_hdr_dept_code, :d_ar_line_dept_code),
            DECODE(:l_ins_flg,'0',
                 :d_ar_hdr_product_group_code, :d_ar_line_product_group_code),
            DECODE(:l_ins_flg,'0',
                 :d_ar_hdr_product_line_code, :d_ar_line_product_line_code),
            DECODE(:l_ins_flg,'0',
               :d_ar_hdr_sub_group_code, :d_ar_line_sub_group_code),
            DECODE(:l_ins_flg,'0',
                 :d_ar_hdr_sub_line_code, :d_ar_line_sub_line_code),
            ABS(:l_gd_debit_amt),
            :l_gd_credit_amt,
            DECODE(:l_ins_flg,'0',:d_ar_hdr_narration,:d_ar_line_narration),
            :d_ar_hdr_post_month,
            :d_ar_hdr_post_year, 
            :l_gd_cheque_num,
            to_date(:l_gd_cheque_date,'DD/MM/YYYY'),
            :l_gd_trn_type_code,
			:d_ar_bank_reconcile_flg,
		    :nd_pgm_date
            );


        if (OERROR)
           err_mesg("INSERT failed on table AR_GL_DISTRBN",0,"");
 
}

calculate_credit_debit(hdr_line) /* 0 -> Hdr   1 -> Line */
int hdr_line;
{
  switch  (t_type) 
  {
      case 1 : 
               strcpy(l_gd_trn_type_code.arr,"INV");
               if ( !hdr_line )   /* Hdr rec */
                   Debit();
               else if (l_gd_sign_amount == -1)          /* -ve */
                       Debit(); 
                    else 
                       Credit ();
               break; 
      case 2 :
               strcpy(l_gd_trn_type_code.arr,"DEB");
               if ( !hdr_line )   /* Hdr rec */
                   Debit();
               else if (l_gd_sign_amount == -1)          /* -ve */
                       Debit(); 
                    else 
                       Credit();
               break;
      case 3 : 
               strcpy(l_gd_trn_type_code.arr,"CRE");
               if ( !hdr_line )   /* Hdr rec */
                   Credit();
               else if (l_gd_sign_amount == -1)          /* -ve */
                       Credit(); 
                    else 
                       Debit();
               break;
      case 4 : 
               strcpy(l_gd_trn_type_code.arr,"ADJ");
               if ( !hdr_line )   /* Hdr rec */
               {
                   if (d_ar_hdr_adj_type.arr[0] == 'D')
                        Debit();
                   else
                        Credit();
               }
               else if (l_gd_sign_amount == -1)          /* -ve */
                    {
                       if (d_ar_hdr_adj_type.arr[0] == 'D')
                            Debit();
                       else
                            Credit();
                    }
                    else 
                    {
                       if (d_ar_hdr_adj_type.arr[0] == 'D')
                            Credit();
                       else
                            Debit();
                    }
               break;
      case 5 :
               strcpy(l_gd_trn_type_code.arr,"REC");
               if ( !hdr_line )   /* Hdr rec */
                       Debit();
               else if (l_gd_sign_amount == -1)          /* -ve */
                       Debit(); 
                  else 
                       Credit();
               break;
      case 6 :
               strcpy(l_gd_trn_type_code.arr,"PAY");
               if ( !hdr_line )   /* Hdr rec */
                   Credit();
               else if (l_gd_sign_amount == -1)          /* -ve */
                       Debit();
                  else 
                       Credit(); 
               break;
    }

    l_gd_trn_type_code.len = strlen(l_gd_trn_type_code.arr);
}

Credit()
{
   if (l_gd_sign_amount == 0)
         strcpy(l_gd_credit_amt.arr,"");
   else
   {
       if (l_gd_sign_amount == -1)
         strcpy(l_gd_credit_amt.arr,l_gd_amount_negative.arr);
       else
         strcpy(l_gd_credit_amt.arr,l_gd_amount.arr);
    }

   strcpy(l_gd_debit_amt.arr,"");

   l_gd_credit_amt.len = strlen(l_gd_credit_amt.arr);
   l_gd_debit_amt.len = strlen(l_gd_debit_amt.arr);
}

Debit()
{
   if (l_gd_sign_amount == 0)
         strcpy(l_gd_debit_amt.arr,"");
   else
   {
        if (l_gd_sign_amount == -1)
           strcpy(l_gd_debit_amt.arr,l_gd_amount_negative.arr);
        else
           strcpy(l_gd_debit_amt.arr,l_gd_amount.arr);
   }
  
   strcpy(l_gd_credit_amt.arr,"");

   l_gd_credit_amt.len = strlen(l_gd_credit_amt.arr);
   l_gd_debit_amt.len = strlen(l_gd_debit_amt.arr);
   
  if (d_ar_switch == 1)
   {
      strcpy(l_gd_credit_amt.arr,l_gd_amount_negative.arr);
	  strcpy(l_gd_debit_amt.arr,"");
	  l_gd_credit_amt.len = strlen(l_gd_credit_amt.arr);
      l_gd_debit_amt.len = strlen(l_gd_debit_amt.arr);
      d_ar_switch = 0;
	}
}


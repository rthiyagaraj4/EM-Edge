/************************************************************************/
/* OCS MEDICOM VER 1.0                                                    */
/************************************************************************/
/* PROGRAM NAME          : ARBOPDOC.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 30-NOV-1992                                       */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION             :                                              */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        AR_PENDING_DOC_TEMP      Query/Update              */
/*         2.        AR_CUST_TRN_TEMP            Query                  */
/*         3.        SY_ACC_ENTITY_DOC_TYPE      Lookup                 */
/*         4.        AR_CUSTOMER                 Lookup                 */
/*         5.        AR_PMNT_TERMS               Lookup                 */
/*         6.        BL_BLNG_GRP                 Lookup                 */
/*         7.        MP_PATIENT_MAST             Lookup                 */
/*         8.        AR_PARAMETER                Lookup                 */
/*         9.        GL_ACC_CHART                Lookup                 */
/*        10.        SY_DEPT                     Lookup                 */
/*        11.        GL_PRODUCT_LINE             Lookup                 */
/*        12.        GL_SUBLEDGER_LINE           Lookup                 */
/*        13.        GL_ACC_COMBINATION          Lookup                 */
/*        14.        ARROPDOC               Query/Insert/Delete         */
/*        15.        AR_PENDING_DOC            Insert/Lookup            */
/*        16.        AR_CUST_TRN               Insert/Lookup            */
/*        17.        SY_PROG_CONTROL           Update/Lookup            */
/*        18.        SY_PROG_MESG                 Insert                */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*                                                                      */
/************************************************************************/

    
#include <stdio.h>
#include <string.h>
#include "gl.h" 
/*
#define OERROR (sqlca.sqlcode < 0)
*/

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)

#define RESOURCE_BUSY        (sqlca.sqlcode == -54)


#define VIEW_LOG_FILE 1


EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include "winproc.h"

EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR  nd_facility_id   [3],
			uid_pwd[132],
			nd_pgm_date[35];

   VARCHAR nd_session_id                 [16],
	   nd_fm_cust_code               [12],
	   nd_fm_doc_type                [8],
	   nd_to_cust_code               [12],
	   nd_to_doc_type                [8],
	   	p_language_id			    [3],

	   d_pend_doc_type_code          [8],
	   d_check_doc_type_code         [8],
	   d_pend_doc_num                [12],
	   d_pend_cust_code              [12],
	   d_pend_pmnt_terms_code        [4],
	   d_pend_patient_id             [21],
	   d_pend_billing_group          [5],   -- CRF-0120
	   d_customer_status             [4],
	   d_customer_patient_flag       [4],
	   d_pmnt_terms_status           [4],
       d_cust_trn_temp_doc_type      [8],
	   d_cust_trn_temp_doc_num       [12],
	   d_pend_rowid                  [31],
	   d_pend_doc_date               [12],
	   d_pend_narration              [52],
	   d_pend_post_month             [4],
	   d_pend_post_year              [5],
 
	   d_cust_trn_rowid              [31],
	   d_cust_trn_line_num           [8],
	   d_sy_acc_bl_instal_flag       [4],
	   d_sy_acc_mp_instal_flag       [4],
	   nd_error_flag                 [4],
	   dummy                         [10][10],
	   d_ar_acc_status               [4],
	   d_ar_acc_valid_flag           [4],

	   d_main_acc1_code              [8],
	   d_main_acc2_code              [8],
	   d_dept_code                   [11],
	   d_product_group_code          [4],
	   d_product_line_code           [8],
	   d_subledger_group_code        [4],
	   d_subledger_line_code         [12],
	   d_bl_blng_grp_status          [2],


	    nd_acc_entity_code             [5],
	    p_operational_modules          [300],
		d_consolidated_yn              [2],
		d_module_valid_id              [3],
		


	   d_pend_trn_type_code          [3],
	   d_check_trn_type_code         [3],
	   d_cust_trn_type_code          [3],
	   d_consolidated_inv_yn         [2], 

	   d_ar_trn_type_code            [3],

	   ar_pat_doc_type_code          [7],
	   ar_pat_doc_num                [9],
	   ar_pat_patient_id             [21],
	   ar_pat_bill_doc_type_code     [7],
	   ar_pat_bill_num               [9],
	   ar_pat_remarks                [16],
	   ar_pat_bill_date              [12],
	   ar_pat_rowid                  [31];

   double  d_pend_pending_amt,
	   nd_dtl_tot_amt,
	   d_cust_trn_temp_amount,
	   ar_pat_amount,
	   ar_pat_alloc_amt,
	   ar_pat_tot_amt;

   int     d_sy_num_acc_per,
	   proc_rep_flag,
	   ar_pat_line_num;

	int    bl_instal_flag ,  mp_instal_flag, nd_no_of_decimal;


   long    d_pend_doc_date_yyyymmdd;

EXEC SQL END DECLARE SECTION;  

int g_err_typ;

char g_err_id[10],
     g_err_msg[80];

int  d_curr_year;
int  d_curr_month;
int  d_num_of_acc_periods;
char d_summ_flag;



void proc_main(argc,argv)
char *argv[];
int argc;
{
   char mesg1[50];
   if (argc != 5)
   {
    int i = 0;
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(g_pgm_id,"ARBOPDOC");

   strcpy(g_facility_id,argv[4]);

   if(sql_connect() == -1)
   {
      sprintf(mesg1,"Error in connecting to Oracle\n");
      if (uid_pwd.len == 0){
	 sprintf(mesg1,"Null oracle uid/pwd\n\n\n");
	 disp_message(ERR_MESG,mesg1);
	 }
      proc_exit();
   }

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);
       

   set_meduser_role();

	strcpy(p_language_id.arr,l_language_id.arr);
	p_language_id.len = l_language_id.len;
   
   chk_active();

   nd_fm_cust_code.arr[0]       = '\0';
   nd_fm_doc_type.arr[0]        = '\0';
   nd_to_cust_code.arr[0]       = '\0';
   nd_to_doc_type.arr[0]        = '\0';

   nd_fm_cust_code.len          = 0;
   nd_fm_doc_type.len           = 0;
   nd_to_cust_code.len          = 0;
   nd_to_doc_type.len           = 0;

   proc_rep_flag                = 0;

   EXEC SQL SELECT OPERATING_FACILITY_ID ,PARAM1,PARAM2,PARAM3
	      INTO :nd_facility_id, :nd_fm_cust_code,
		   :nd_to_cust_code,
		   :proc_rep_flag
	      FROM SY_PROG_PARAM
	     WHERE PGM_ID     = 'ARROPDOC'
	       AND SESSION_ID = :nd_session_id
	       AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
	err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
	err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_fm_cust_code.arr[nd_fm_cust_code.len]        = '\0';
   nd_fm_doc_type.arr[nd_fm_doc_type.len]          = '\0';
   nd_to_cust_code.arr[nd_to_cust_code.len]        = '\0';
   nd_to_doc_type.arr[nd_to_doc_type.len]          = '\0';

   start_prog_control();
   start_prog_msg();
   
   strcpy(nd_error_flag.arr,"N");
   nd_error_flag.len = 1;

   delete_records();
  
   fetch_acc_entity_flag();

   declare_cursor();

   open_pend_tmp_cur();

   while (fetch_cur())
   {
	EXEC SQL SELECT  ROWID
		   INTO  :d_pend_rowid
		   FROM  AR_PENDING_DOC_TEMP
		  WHERE  ROWID = :d_pend_rowid
		    FOR  UPDATE OF ERROR_FLAG NOWAIT;
     
	if (RESOURCE_BUSY)
	      continue;
	if (OERROR)
	   err_mesg("SELECT failed on table AR_PENDING_DOC_TEMP",0,"");

	if (sqlca.sqlerrd[2] == 0)
	      continue;

	strcpy(nd_error_flag.arr,"N");
	nd_error_flag.len = 1;
 
	validate_pending_doc();
   
	if (d_pend_trn_type_code.arr[0] == '1' &&
	     		(strcmp(d_consolidated_inv_yn.arr , "Y") == 0))


		        /*d_customer_patient_flag.arr[0] == 'Y') */

	{
	     ar_pat_tot_amt = 0;

	     if (!open_patient_dtls())
		  continue;

	     ar_pat_line_num = 1;

	     while (fetch_patient_dtls())
	     {
		  validate_patient_dtls();
		  update_pat_dtls();
	     }

	     if ((ar_pat_line_num != 1) &&
		(doubcmp(ar_pat_tot_amt,d_pend_pending_amt) != 0))
		   error_insert_pat(" HDR","AR2180","");
	}
  
	if (!open_cust_trn_temp())
	      continue;

	nd_dtl_tot_amt  =  0;
	while (fetch_cust_trn_temp())
	{
	    validate_cust_trn();
	    nd_dtl_tot_amt += d_cust_trn_temp_amount;
	}

/*        if (nd_dtl_tot_amt != d_pend_pending_amt)*/

	if (doubcmp(nd_dtl_tot_amt,d_pend_pending_amt) != 0)
	   error_insert(" HDR","AR1200");

	update_err_flg();
	if (nd_error_flag.arr[0]  ==  'N')
	     doc_post();
	EXEC SQL COMMIT WORK;
	if (OERROR)
	    err_mesg("COMMIT failed",0,"");
   }

   if (proc_rep_flag == 3)
   {
    EXEC SQL COMMIT WORK RELEASE;
    if (OERROR)
	err_mesg("COMMIT failed",0,"");

  /*  run_report(); */

    if(sql_connect() == -1)
    {
      disp_message(ERR_MESG,"Error in connecting to Oracle - 2 time");
      proc_exit();
    }
   }

/*   delete_records();*/
   end_prog_msg();
   end_prog_control();
   EXEC SQL COMMIT WORK RELEASE;

} 

fetch_acc_entity_flag()
{
                
   
   /*EXEC SQL SELECT BL_INSTAL_FLAG,  MP_INSTAL_FLAG, NUM_OF_ACC_PERIODS
	      INTO :d_sy_acc_bl_instal_flag, :d_sy_acc_mp_instal_flag,
		   :d_sy_num_acc_per
	      FROM SY_ACC_ENTITY;*/



	   EXEC SQL SELECT  NUM_OF_ACC_PERIODS , ACC_ENTITY_CODE,
	                    NO_OF_DECIMAL
              INTO   :d_sy_num_acc_per, :nd_acc_entity_code,
			         :nd_no_of_decimal
              FROM SY_ACC_ENTITY
		   where   ACC_ENTITY_ID = :nd_facility_id;


   if (OERROR)
	err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");


	EXEC SQL EXECUTE 
            BEGIN
	         GET_INSTALLED_MODULES(:p_operational_modules);
            END;
    END-EXEC; 

	EXEC SQL SELECT INSTR(:p_operational_modules , 'BL|')
	         into   :bl_instal_flag 
			from dual ;

	EXEC SQL SELECT INSTR(:p_operational_modules , 'MP|')
	         into   :mp_instal_flag
			from dual ;

   
	 if (bl_instal_flag > 0 )
	 {
         strcpy(d_sy_acc_bl_instal_flag.arr , "Y");
	  }
	else
	{

          strcpy(d_sy_acc_bl_instal_flag.arr , "N");   
	 }

	  if (mp_instal_flag > 0 )
	 {
         strcpy(d_sy_acc_mp_instal_flag.arr , "Y");
	  }
	else
	{

          strcpy(d_sy_acc_mp_instal_flag.arr , "N");   
	 }




   
}

declare_cursor()
{

   EXEC SQL DECLARE AR_PENDING_DOC_TEMP_CUR CURSOR FOR
	     SELECT DOC_TYPE_CODE,
		    DOC_NUM,
		    CUST_CODE,
		    PMNT_TERMS_CODE,
		    PATIENT_ID,
		    BILLING_GROUP,
		    PENDING_AMT,
		    MAIN_ACC1_CODE,
		    MAIN_ACC2_CODE,
		    DEPT_CODE,
		    PRODUCT_GROUP_CODE,
		    PRODUCT_LINE_CODE,
		    SUBLEDGER_GROUP_CODE,
		    SUBLEDGER_LINE_CODE,
		    ROWID,
		    TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
		    NARRATION,
		    POST_MONTH,
		    POST_YEAR,
		    TRN_TYPE_CODE,
			NVL(CONSOLIDATED_INV_YN,'N')
	       FROM AR_PENDING_DOC_TEMP
	      WHERE CUST_CODE >= nvl(:nd_fm_cust_code,'        ')
		AND CUST_CODE <= nvl(:nd_to_cust_code,'~~~~~~~~');

   EXEC SQL DECLARE SY_DOC_CONTROL_CUR CURSOR FOR
	     SELECT 'X'
	       FROM SY_DOC_CONTROL
	      WHERE MODULE_ID     = 'AR'
		AND DOC_TYPE_CODE = :d_pend_doc_type_code
		AND DOC_NUM       = :d_pend_doc_num;

   EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
	     SELECT NVL(STATUS,'X'),
		    PATIENT_FLAG  
	       FROM AR_CUSTOMER
	      WHERE CUST_CODE        = :d_pend_cust_code;

   EXEC SQL DECLARE AR_PMNT_TERMS_CUR CURSOR FOR
	     SELECT NVL(STATUS,'X')
	       FROM AR_PMNT_TERMS
	      WHERE PMNT_TERMS_CODE = :d_pend_pmnt_terms_code;

   EXEC SQL DECLARE AR_CUST_TRN_TEMP_CUR CURSOR FOR
	     SELECT DOC_TYPE_CODE,
		    DOC_NUM,
		    AMOUNT,
		    LINE_NUM,
		    TRN_TYPE_CODE
	       FROM AR_CUST_TRN_TEMP
	      WHERE ORG_DOC_TYPE_CODE = :d_pend_doc_type_code
		AND ORG_DOC_NUM       = :d_pend_doc_num
		FOR UPDATE OF LINE_NUM NOWAIT;

   EXEC SQL DECLARE SY_ACC_ENTITY_DOC_TYPE_CUR CURSOR FOR
	     SELECT NVL(STATUS,'X'),
		    NVL(AR_VALID_FLAG,'X')
	       FROM GL_ACC_ENTITY_DOC_TYPE_VW
	      WHERE DOC_TYPE_CODE   = :d_check_doc_type_code;

   EXEC SQL DECLARE SY_DOC_CONTROL_TRN_CUR CURSOR FOR
	     SELECT 'X'
	       FROM SY_DOC_CONTROL
	      WHERE DOC_TYPE_CODE     = :d_cust_trn_temp_doc_type
		AND DOC_NUM           = :d_cust_trn_temp_doc_num;

   EXEC SQL DECLARE AR_TRN_DOC_TYPE_CUR CURSOR FOR
	     SELECT TRN_TYPE_CODE
	       FROM AR_TRN_DOC_TYPE
	      WHERE DOC_TYPE_CODE = :d_check_doc_type_code
		AND TRN_TYPE_CODE = :d_check_trn_type_code;

   EXEC SQL DECLARE AR_PATIENT_DTLS_CUR CURSOR FOR
	     SELECT DOC_TYPE_CODE,
		    DOC_NUM,
		    PATIENT_ID,
		    BILL_DOC_TYPE_CODE,
		    BILL_NUM,
		    TO_CHAR(BILL_DATE,'DD/MM/YYYY'),
		    REMARKS,
		    NVL(AMOUNT,0),
		    TO_CHAR(TO_DATE(:d_pend_doc_date,'DD/MM/YYYY'),'YYYYMMDD'),
		    ROWID
	       FROM AR_PATIENT_DTLS
	      WHERE DOC_TYPE_CODE = :d_pend_doc_type_code
		AND DOC_NUM       = :d_pend_doc_num
	      ORDER BY BILL_DATE, PATIENT_ID
		FOR UPDATE OF LINE_NUM NOWAIT;

}

open_pend_tmp_cur()
{
   EXEC SQL OPEN AR_PENDING_DOC_TEMP_CUR;

   if (OERROR)
	err_mesg("OPEN failed on cursor AR_PENDING_DOC_TEMP_CUR",0,"");
}

fetch_cur()
{
    d_pend_doc_type_code.arr[0]   = '\0';
    d_pend_doc_num.arr[0]         = '\0';
    d_pend_cust_code.arr[0]       = '\0';
    d_pend_pmnt_terms_code.arr[0] = '\0';
    d_pend_patient_id.arr[0]      = '\0';
    d_pend_billing_group.arr[0]   = '\0';

    d_main_acc1_code.arr[0]       = '\0';
    d_main_acc2_code.arr[0]       = '\0';
    d_dept_code.arr[0]            = '\0';
    d_product_group_code.arr[0]   = '\0';
    d_product_line_code.arr[0]    = '\0';
    d_subledger_group_code.arr[0] = '\0';
    d_subledger_line_code.arr[0]  = '\0';

    d_pend_doc_date.arr[0]        = '\0';
    d_pend_narration.arr[0]       = '\0';
    d_pend_post_month.arr[0]      = '\0';
    d_pend_post_year.arr[0]       = '\0';

    d_pend_trn_type_code.arr[0]   = '\0';
	d_consolidated_inv_yn.arr[0]  = '\0';

    d_pend_doc_type_code.len   = 0;
    d_pend_doc_num.len         = 0;
    d_pend_cust_code.len       = 0;
    d_pend_pmnt_terms_code.len = 0;
    d_pend_patient_id.len      = 0;
    d_pend_billing_group.len   = 0;

    d_main_acc1_code.len       = 0;
    d_main_acc2_code.len       = 0;
    d_dept_code.len            = 0;
    d_product_group_code.len   = 0;
    d_product_line_code.len    = 0;
    d_subledger_group_code.len = 0;
    d_subledger_line_code.len  = 0;
    d_pend_doc_date.len        = 0;
    d_pend_narration.len       = 0;
    d_pend_post_month.len      = 0;
    d_pend_post_year.len       = 0;

    d_pend_trn_type_code.len   = 0;
	d_consolidated_inv_yn.len   = 0;

    d_pend_pending_amt         = 0;


	 EXEC SQL FETCH AR_PENDING_DOC_TEMP_CUR
	      INTO :d_pend_doc_type_code,
		   :d_pend_doc_num,
		   :d_pend_cust_code,
		   :d_pend_pmnt_terms_code,
		   :d_pend_patient_id,
		   :d_pend_billing_group,
		   :d_pend_pending_amt,
		   :d_main_acc1_code,
		   :d_main_acc2_code,
		   :d_dept_code,
		   :d_product_group_code,
		   :d_product_line_code,
		   :d_subledger_group_code,
		   :d_subledger_line_code,
		   :d_pend_rowid,
		   :d_pend_doc_date,
		   :d_pend_narration,
		   :d_pend_post_month,
		   :d_pend_post_year,
		   :d_pend_trn_type_code,
		   :d_consolidated_inv_yn;

    if (OERROR)
	err_mesg("FETCH failed on cursor AR_PENDING_DOC_TEMP_CUR",0,"");

    d_pend_doc_type_code.arr[d_pend_doc_type_code.len]     = '\0';
    d_pend_doc_num.arr[d_pend_doc_num.len]                 = '\0';
    d_pend_cust_code.arr[d_pend_cust_code.len]             = '\0';
    d_pend_pmnt_terms_code.arr[d_pend_pmnt_terms_code.len] = '\0';
    d_pend_patient_id.arr[d_pend_patient_id.len]           = '\0';
    d_pend_billing_group.arr[d_pend_billing_group.len]     = '\0';

    d_main_acc1_code.arr[d_main_acc1_code.len]             = '\0';
    d_main_acc2_code.arr[d_main_acc2_code.len]             = '\0';
    d_dept_code.arr[d_dept_code.len]                       = '\0';
    d_product_group_code.arr[d_product_group_code.len]     = '\0';
    d_product_line_code.arr[d_product_line_code.len]       = '\0';
    d_subledger_group_code.arr[d_subledger_group_code.len] = '\0';
    d_subledger_line_code.arr[d_subledger_line_code.len]   = '\0';
    d_pend_rowid.arr[d_pend_rowid.len]                     = '\0';

    d_pend_doc_date.arr[d_pend_doc_date.len]               = '\0';
    d_pend_narration.arr[d_pend_narration.len]             = '\0';
    d_pend_post_month.arr[d_pend_post_month.len]           = '\0';
    d_pend_post_year.arr[d_pend_post_year.len]             = '\0';

    d_pend_trn_type_code.arr[d_pend_trn_type_code.len]     = '\0';
	d_consolidated_inv_yn.arr[d_consolidated_inv_yn.len]   = '\0';

    if (LAST_ROW)
	 return (0);
    else 
	 return (1);
}

validate_pending_doc()
{
   strcpy(d_check_doc_type_code.arr,d_pend_doc_type_code.arr);
   d_check_doc_type_code.len = strlen(d_check_doc_type_code.arr);

   EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;
 
   if (OERROR) err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

   d_ar_acc_status.arr[0]     = '\0';
   d_ar_acc_valid_flag.arr[0] = '\0';

   d_ar_acc_valid_flag.len = 0;
   d_ar_acc_status.len     = 0;

   EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
	     INTO :d_ar_acc_status,
		  :d_ar_acc_valid_flag;
   
   if (OERROR)
	err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 

   d_ar_acc_status.arr[d_ar_acc_status.len]         = '\0';
   d_ar_acc_valid_flag.arr[d_ar_acc_valid_flag.len] = '\0';

   if (NOT_FOUND)
	 error_insert(" HDR","SY1610");
   else
   {
      if (d_ar_acc_valid_flag.arr[0] != 'Y')
	    error_insert(" HDR","SY1700");
      if (d_ar_acc_status.arr[0] == 'S')
	    error_insert(" HDR","SY1640");
   } 

   d_ar_trn_type_code.arr[0] = '\0';
   d_ar_trn_type_code.len    = 0;

   strcpy(d_check_trn_type_code.arr,d_pend_trn_type_code.arr);
   d_check_trn_type_code.len = strlen(d_check_trn_type_code.arr);

   strcpy(d_check_doc_type_code.arr,d_pend_doc_type_code.arr);
   d_check_doc_type_code.len = strlen(d_check_doc_type_code.arr);

   EXEC SQL OPEN AR_TRN_DOC_TYPE_CUR;

   if (OERROR)  
	 err_mesg("OPEN failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   EXEC SQL FETCH AR_TRN_DOC_TYPE_CUR
	     INTO :d_ar_trn_type_code;

   d_ar_trn_type_code.arr[d_ar_trn_type_code.len] = '\0';

   if (OERROR)
	 err_mesg("FETCH failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   if (NOT_FOUND)
	 error_insert(" HDR","AR2030");

   /****  AR_PENDING_DOC Validation   ******/

   EXEC SQL OPEN SY_DOC_CONTROL_CUR;   

   if (OERROR)
	err_mesg("OPEN failed on cursor SY_DOC_CONTROL_CUR",0,"");

   EXEC SQL FETCH SY_DOC_CONTROL_CUR
	     INTO :dummy;
   
   if (OERROR)
	err_mesg("FETCH failed on cursor SY_DOC_CONTROL_CUR",0,"");

   if (!NOT_FOUND)   /*   Record Exists   */
	error_insert(" HDR","AR1080");
  
   /****   AR_CUSTOMER Validation   *****/
  
   EXEC SQL OPEN AR_CUSTOMER_CUR;

   if (OERROR)
	err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

   d_customer_status.arr[0]       = '\0';
   d_customer_patient_flag.arr[0] = '\0';

   d_customer_status.len       = 0;
   d_customer_patient_flag.len = 0;

   EXEC SQL FETCH AR_CUSTOMER_CUR
	     INTO :d_customer_status,
		  :d_customer_patient_flag;

   d_customer_status.arr[d_customer_status.len] = '\0';
   d_customer_patient_flag.arr[d_customer_patient_flag.len] = '\0';

   if (OERROR)
	err_mesg("FETCH failed on cursor AR_CUSTOMER_CUR",0,"");

   if (NOT_FOUND)
	error_insert(" HDR","AR1210");
   else
     if (d_customer_status.arr[0] == 'S')
	error_insert(" HDR","AR1220");

   /****   AR_PMNT_TERMS  Validation   *****/

   EXEC SQL OPEN AR_PMNT_TERMS_CUR;
   if (OERROR)
	err_mesg("OPEN failed on cursor AR_PMNT_TERMS_CUR",0,"");

   d_pmnt_terms_status.arr[0] = '\0';
   d_pmnt_terms_status.len    = 0;

   EXEC SQL FETCH AR_PMNT_TERMS_CUR
	     INTO :d_pmnt_terms_status;

   d_pmnt_terms_status.arr[d_pmnt_terms_status.len] = '\0';
   if (OERROR)
	err_mesg("FETCH failed on cursor AR_PMNT_TERMS_CUR",0,"");
   if (NOT_FOUND)
	error_insert(" HDR","AR1240");
   else
      if (d_pmnt_terms_status.arr[0] == 'S')
	   error_insert(" HDR","AR1250");

   /****   PATIENT_MAST & BL_BLNG_GRP Validation    *****/

   if (d_customer_patient_flag.arr[0] == 'Y' && d_consolidated_inv_yn.arr[0]=='N')
   {
      if (d_sy_acc_bl_instal_flag.arr[0] == 'Y')
      {
	  d_bl_blng_grp_status.arr[0] = '\0';
	  d_bl_blng_grp_status.len    = 0;

	  EXEC SQL SELECT NVL(STATUS,'X')
		     INTO :d_bl_blng_grp_status
		     FROM BL_BLNG_GRP
		    WHERE BLNG_GRP_ID  = :d_pend_billing_group;

	  d_bl_blng_grp_status.arr[d_bl_blng_grp_status.len] = '\0';

	  if (OERROR)
	      err_mesg("SELECT failed on table BL_BLNG_GRP",0,"");

	  if (NOT_FOUND)
	     error_insert(" HDR","SY0110");
	  else if (d_bl_blng_grp_status.arr[0] == 'S')
	     error_insert(" HDR","BL0026");

      }
      if (d_sy_acc_mp_instal_flag.arr[0] == 'Y')
      {

	  EXEC SQL SELECT 'X'
		     INTO :dummy
		     FROM MP_PATIENT_MAST
		    WHERE PATIENT_ID  = :d_pend_patient_id;

	  if (OERROR)
	     err_mesg("SELECT failed on table MP_PATIENT_MAST",0,"");

	  if (NOT_FOUND)
	     error_insert(" HDR","SY2021");
      }
   }
   if (atoi(d_pend_post_month.arr) > d_sy_num_acc_per)
	   error_insert(" HDR","GL2290");

   validate_posting();
}

open_cust_trn_temp()
{
   EXEC SQL OPEN AR_CUST_TRN_TEMP_CUR;

   if (RESOURCE_BUSY)
   {
     error_insert(" HDR","AR2070");
     update_err_flg();
     EXEC SQL COMMIT WORK;
     return (0);
   }
   else if (OERROR)
	err_mesg("OPEN failed on cursor AR_CUST_TRN_TEMP_CUR",0,"");
   return (1);
}
 
fetch_cust_trn_temp()
{
   d_cust_trn_temp_doc_type.arr[0] = '\0';
   d_cust_trn_temp_doc_num.arr[0]       = '\0';
   d_cust_trn_line_num.arr[0]           = '\0';
   d_cust_trn_type_code.arr[0]          = '\0';

   d_cust_trn_temp_doc_type.len    = 0;
   d_cust_trn_temp_doc_num.len          = 0;
   d_cust_trn_line_num.len              = 0;
   d_cust_trn_type_code.len             = 0;

   d_cust_trn_temp_amount               = 0;

   EXEC SQL FETCH AR_CUST_TRN_TEMP_CUR
	     INTO :d_cust_trn_temp_doc_type,
		  :d_cust_trn_temp_doc_num,
		  :d_cust_trn_temp_amount,
		  :d_cust_trn_line_num,
		  :d_cust_trn_type_code;

   d_cust_trn_temp_doc_type.arr[d_cust_trn_temp_doc_type.len] = '\0';
   d_cust_trn_temp_doc_num.arr[d_cust_trn_temp_doc_num.len]             = '\0';
   d_cust_trn_line_num.arr[d_cust_trn_line_num.len]                     = '\0';
   d_cust_trn_type_code.arr[d_cust_trn_type_code.len]                   = '\0';

   if (OERROR)
	err_mesg("FETCH failed on cursor AR_CUST_TRN_TEMP_CUR",0,"");

   if (LAST_ROW)
       return (0);
   else 
       return (1);
}

open_patient_dtls()
{
   EXEC SQL OPEN AR_PATIENT_DTLS_CUR;

   if (RESOURCE_BUSY)
   {
     error_insert(" HDR","AR2070");
     update_err_flg();
     EXEC SQL COMMIT WORK;
     return (0);
   }
   else if (OERROR)
	err_mesg("OPEN failed on cursor AR_PATIENT_DTLS_CUR",0,"");

   return (1);
}

fetch_patient_dtls()
{
ar_pat_doc_type_code.arr[0]       = '\0';
ar_pat_doc_num.arr[0]             = '\0';
ar_pat_patient_id.arr[0]          = '\0';
ar_pat_bill_doc_type_code.arr[0]  = '\0';
ar_pat_bill_num.arr[0]            = '\0';
ar_pat_bill_date.arr[0]           = '\0';
ar_pat_remarks.arr[0]             = '\0';
ar_pat_rowid.arr[0]               = '\0';

ar_pat_doc_type_code.len          = 0;
ar_pat_doc_num.len                = 0;
ar_pat_patient_id.len             = 0;
ar_pat_bill_doc_type_code.len     = 0;
ar_pat_bill_num.len               = 0;
ar_pat_bill_date.len              = 0;
ar_pat_remarks.len                = 0;
ar_pat_rowid.len                  = 0;

ar_pat_amount                     = 0;
d_pend_doc_date_yyyymmdd          = 0;

   EXEC SQL FETCH AR_PATIENT_DTLS_CUR
	     INTO :ar_pat_doc_type_code,
		  :ar_pat_doc_num,
		  :ar_pat_patient_id,
		  :ar_pat_bill_doc_type_code,
		  :ar_pat_bill_num,
		  :ar_pat_bill_date,
		  :ar_pat_remarks,
		  :ar_pat_amount,
		  :d_pend_doc_date_yyyymmdd,
		  :ar_pat_rowid;

   if (OERROR)
       err_mesg("FETCH failed on cursor AR_PATIENT_DTLS_CUR",0,"");

ar_pat_doc_type_code.arr[ar_pat_doc_type_code.len]           = '\0';
ar_pat_doc_num.arr[ar_pat_doc_num.len]                       = '\0';
ar_pat_patient_id.arr[ar_pat_patient_id.len]                 = '\0';
ar_pat_bill_doc_type_code.arr[ar_pat_bill_doc_type_code.len] = '\0';
ar_pat_bill_num.arr[ar_pat_bill_num.len]                     = '\0';
ar_pat_bill_date.arr[ar_pat_bill_date.len]                   = '\0';
ar_pat_remarks.arr[ar_pat_remarks.len]                       = '\0';
ar_pat_rowid.arr[ar_pat_rowid.len]                           = '\0';

   if (LAST_ROW)
       return (0);
   else 
       return (1);
}

validate_patient_dtls()
{
   if (ar_pat_patient_id.len == 0)
	    error_insert_pat(" HDR","SY1470","Field = PATIENT NO ");
   else if (d_sy_acc_mp_instal_flag.arr[0] == 'Y')
   {
	EXEC SQL SELECT 'X'
		   INTO :dummy
		   FROM MP_PATIENT_MAST
		  WHERE PATIENT_ID  = :ar_pat_patient_id;

	 if (OERROR)
	     err_mesg("SELECT failed on table MP_PATIENT_MAST",0,"");

	 if (NOT_FOUND)
	    error_insert_pat(" HDR","SY2021","");
   }

   if (ar_pat_bill_doc_type_code.len == 0)
	 error_insert_pat(" HDR","SY1470","Field = BILL DOC TYPE ");
   else
   {
	 strcpy(d_check_doc_type_code.arr,ar_pat_bill_doc_type_code.arr);
	 d_check_doc_type_code.len = strlen(d_check_doc_type_code.arr);

	 EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;

	 if (OERROR)
	     err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

	 d_ar_acc_status.arr[0]     = '\0';
	 d_ar_acc_valid_flag.arr[0] = '\0';
	 d_ar_acc_valid_flag.len = 0;
	 d_ar_acc_status.len     = 0;

	 EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
		   INTO :d_ar_acc_status,
			:d_ar_acc_valid_flag;
	 if (OERROR)
	     err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 
	 d_ar_acc_status.arr[d_ar_acc_status.len]         = '\0';
	 d_ar_acc_valid_flag.arr[d_ar_acc_valid_flag.len] = '\0';

	 if (NOT_FOUND)
	       error_insert_pat(" HDR","SY1610","");
	 else
	 {
	      if (d_ar_acc_status.arr[0] == 'S')
		    error_insert_pat(" HDR","SY1640","");
	   } 
      }

      if (atol(ar_pat_bill_date.arr) > d_pend_doc_date_yyyymmdd)
	    error_insert_pat(" HDR","AR1170","");

      if (ar_pat_bill_num.len == 0)
	    error_insert_pat(" HDR","SY1470","Field = BILL NUM ");
      if (ar_pat_bill_date.len == 0)
	    error_insert_pat(" HDR","SY1470","Field = BILL DATE ");
     /* if (ar_pat_remarks.len == 0)
	    error_insert_pat(" HDR","SY1470","Field = REMARKS ");*/
      if (ar_pat_amount == 0)
	    error_insert_pat(" HDR","SY1470","Field = AMOUNT ");

  ar_pat_tot_amt += ar_pat_amount;
}

update_pat_dtls()
{
    EXEC SQL UPDATE AR_PATIENT_DTLS
		SET LINE_NUM = :ar_pat_line_num
	      WHERE ROWID    = :ar_pat_rowid;

     if (OERROR)
	 err_mesg("UPDATE failed on table AR_PATIENT_DTLS",0,"");

    ar_pat_line_num ++;

}

validate_cust_trn()
{
   strcpy(d_check_doc_type_code.arr,d_cust_trn_temp_doc_type.arr);
   d_check_doc_type_code.len = strlen(d_check_doc_type_code.arr);

   EXEC SQL OPEN SY_ACC_ENTITY_DOC_TYPE_CUR;
 
   if (OERROR) err_mesg("OPEN failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,"");

   d_ar_acc_status.arr[0]     = '\0';
   d_ar_acc_valid_flag.arr[0] = '\0';

   d_ar_acc_valid_flag.len = 0;
   d_ar_acc_status.len     = 0;

   EXEC SQL FETCH SY_ACC_ENTITY_DOC_TYPE_CUR
	     INTO :d_ar_acc_status,
		  :d_ar_acc_valid_flag;
   
   if (OERROR)
	err_mesg("FETCH failed on cursor SY_ACC_ENTITY_DOC_TYPE_CUR",0,""); 

   d_ar_acc_status.arr[d_ar_acc_status.len]         = '\0';
   d_ar_acc_valid_flag.arr[d_ar_acc_valid_flag.len] = '\0';

   if (NOT_FOUND)
	 error_insert(d_cust_trn_line_num.arr,"SY1610");
   else
   {
      if (d_ar_acc_valid_flag.arr[0] != 'Y')
	    error_insert(d_cust_trn_line_num.arr,"SY1700");
      if (d_ar_acc_status.arr[0] == 'S')
	    error_insert(d_cust_trn_line_num.arr,"SY1640");
    }

   d_ar_trn_type_code.arr[0] = '\0';
   d_ar_trn_type_code.len    = 0;

   strcpy(d_check_trn_type_code.arr,d_cust_trn_type_code.arr);
   d_check_trn_type_code.len = strlen(d_check_trn_type_code.arr);

   strcpy(d_check_doc_type_code.arr,d_cust_trn_temp_doc_type.arr);
   d_check_doc_type_code.len = strlen(d_check_doc_type_code.arr);

   EXEC SQL OPEN AR_TRN_DOC_TYPE_CUR;

   if (OERROR)
	 err_mesg("OPEN failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   EXEC SQL FETCH AR_TRN_DOC_TYPE_CUR
	     INTO :d_ar_trn_type_code;

   d_ar_trn_type_code.arr[d_ar_trn_type_code.len] = '\0';

   if (OERROR)
	 err_mesg("FETCH failed on cursor AR_TRN_DOC_TYPE_CUR",0,"");

   if (NOT_FOUND)
	 error_insert(d_cust_trn_line_num.arr,"AR2030");

   /****   CUST_TRN   Validation   ****/

     EXEC SQL OPEN SY_DOC_CONTROL_TRN_CUR;
     if (OERROR)
	err_mesg("OPEN failed on cursor SY_DOC_CONTROL_TRN_CUR",0,"");

     EXEC SQL FETCH SY_DOC_CONTROL_TRN_CUR
	       INTO :dummy;
     if (OERROR)
	err_mesg("FETCH failed on cursor SY_DOC_CONTROL_TRN_CUR",0,"");

     if (!NOT_FOUND)
	error_insert(d_cust_trn_line_num.arr,"AR1080");
/*
	ar_pat_alloc_amt = 0;
	
if (strcmp(d_consolidated_inv_yn.arr , "Y") == 0)
   {	
	if ((strcmp( d_cust_trn_temp_doc_type.arr, d_pend_doc_type_code.arr) != 0)
	&& (strcmp( d_cust_trn_temp_doc_num.arr, d_pend_doc_num.arr) != 0))

      {	
	  EXEC SQL SELECT sum(nvl(amount,0)) INTO
			   :ar_pat_alloc_amt
			   FROM
	           ar_patient_alloc_dtls
			   WHERE 
			   doc_type_code = :d_pend_doc_type_code and
			   doc_num = :d_pend_doc_num;

	 if (OERROR)
		err_mesg("SELECT  failed on AR_PATIENT_ALLOC_DTLS",0,"");

	 if (NOT_FOUND)
		error_insert(" PAT","SY1470");


	if (doubcmp(d_cust_trn_temp_amount,ar_pat_alloc_amt) != 0)
	   error_insert(" PAT","AR2180");
	  }
   }
*/
}

error_insert(line_no,msg_id)
char line_no[],msg_id[];
{
   EXEC SQL BEGIN DECLARE SECTION;
     VARCHAR ar_line_no[5],
	     ar_err_code[7],
	     l_ar_doc_error_text[71];
   EXEC SQL END DECLARE SECTION;

   char l_ch_payable_amt  [25],
	l_ch_tot_amt      [25];

   if (strcmp(line_no," HDR") == 0)
       strcpy(ar_line_no.arr,"   0");
   else 
       sprintf(ar_line_no.arr,"%4d",atoi(line_no) + 10);

   ar_line_no.len = strlen(ar_line_no.arr);

   strcpy(ar_err_code.arr,msg_id);
   ar_err_code.len = strlen(ar_err_code.arr);

   l_ar_doc_error_text.arr[0] = '\0';
   l_ar_doc_error_text.len    = 0;

   if (strcmp(ar_err_code.arr,"AR1200") == 0)
   {
       if (nd_no_of_decimal == 3)
	    {
		   sprintf(l_ch_payable_amt,"%19.3f",d_pend_pending_amt);
		   sprintf(l_ch_tot_amt,"%19.3f",nd_dtl_tot_amt);
        }
	   else
	    {
		   sprintf(l_ch_payable_amt,"%19.2f",d_pend_pending_amt);
		   sprintf(l_ch_tot_amt,"%19.2f",nd_dtl_tot_amt);
        }
/*
       ltrim(l_ch_payable_amt);
       ltrim(l_ch_tot_amt);
*/
       format_amt(l_ch_payable_amt,nd_no_of_decimal);
       format_amt(l_ch_tot_amt,nd_no_of_decimal);

       sprintf(l_ar_doc_error_text.arr,"Doc Amt = %s Sum of Trn Amt = %s ",
		   l_ch_payable_amt,l_ch_tot_amt);
       l_ar_doc_error_text.len = strlen(l_ar_doc_error_text.arr);
   }

   EXEC SQL INSERT INTO AR_DOC_ERROR
		   (PGM_ID,
		    DOC_TYPE_CODE,    DOC_NUM,
		    LINE_NUM,         ERROR_CODE,
		    ERROR_TEXT)
	    VALUES ('ARBOPDOC',:d_pend_doc_type_code,   :d_pend_doc_num,
		    :ar_line_no,      :ar_err_code,
		    :l_ar_doc_error_text);

   if (OERROR)
   {
     err_mesg("INSERT failed on table AR_DOC_ERROR",0,"");
  }

   strcpy(nd_error_flag.arr,"Y");
   nd_error_flag.len = 1;
}

error_insert_pat(line_no,msg_id,msg_txt)
char line_no[],msg_id[],msg_txt[];
{
   EXEC SQL BEGIN DECLARE SECTION;
     VARCHAR ar_line_no[5],
	     ar_err_code[7],
	     l_ar_doc_error_text[71];
   EXEC SQL END DECLARE SECTION;

   char l_ch_payable_amt  [25],
	l_ch_tot_amt      [25];

   strcpy(ar_line_no.arr,"   1");

   ar_line_no.len = strlen(ar_line_no.arr);

   strcpy(ar_err_code.arr,msg_id);
   ar_err_code.len = strlen(ar_err_code.arr);

   l_ar_doc_error_text.arr[0] = '\0';
   l_ar_doc_error_text.len    = 0;

   if (strcmp(ar_err_code.arr,"AR2180") == 0)
   {
	   if (nd_no_of_decimal == 3)
	   {
		   sprintf(l_ch_payable_amt,"%19.3f",d_pend_pending_amt);
		   sprintf(l_ch_tot_amt,"%19.3f",ar_pat_tot_amt);
       }
       else
	   {
		   sprintf(l_ch_payable_amt,"%19.2f",d_pend_pending_amt);
		   sprintf(l_ch_tot_amt,"%19.2f",ar_pat_tot_amt);
       }

//       ltrim(l_ch_payable_amt);
  //     ltrim(l_ch_tot_amt);
 
       format_amt(l_ch_payable_amt,nd_no_of_decimal);
       format_amt(l_ch_tot_amt,nd_no_of_decimal);

       sprintf(l_ar_doc_error_text.arr,
		 "Doc Amt = %s Sum of Patient Line Amt = %s ",
		   l_ch_payable_amt,l_ch_tot_amt);
   }
   else
       sprintf(l_ar_doc_error_text.arr,"%sin PATIENT DTLS Line %d ",msg_txt,
			 ar_pat_line_num);
   
   l_ar_doc_error_text.len = strlen(l_ar_doc_error_text.arr);

   EXEC SQL INSERT INTO AR_DOC_ERROR
		   (PGM_ID,
		    DOC_TYPE_CODE,    DOC_NUM,
		    LINE_NUM,         ERROR_CODE,
		    ERROR_TEXT)
	    VALUES ('ARBOPDOC',:d_pend_doc_type_code,   :d_pend_doc_num,
		    :ar_line_no,      :ar_err_code,
		    :l_ar_doc_error_text);

   if (OERROR)
   {
     err_mesg("INSERT failed on table AR_DOC_ERROR",0,"");
  }

   strcpy(nd_error_flag.arr,"Y");
   nd_error_flag.len = 1;
}

update_err_flg()
{
   EXEC SQL UPDATE AR_PENDING_DOC_TEMP 
	       SET ERROR_FLAG    = :nd_error_flag,
		   DISCOUNT_AMT  = NVL(DISCOUNT_AMT,0),
		   ALLOCATED_AMT = 0,
		   LAST_UPD_DATE = SYSDATE
	     WHERE ROWID      = :d_pend_rowid;

   if (OERROR)
	err_mesg("UPDATE failed on table AR_PENDING_DOC_TEMP...");

}

doc_post()
{
    EXEC SQL INSERT INTO  SY_DOC_CONTROL 
	     (
	      MODULE_ID,
	      DOC_TYPE_CODE,
	      DOC_NUM,  
	      DOC_DATE,
	      POSTED_DATE,
	      DOC_STATUS,
	      NARRATION ,
	      POST_MONTH,
	      POST_YEAR ,
	      ADDED_BY_ID,
	      ADDED_DATE,
	      MODIFIED_BY_ID,
	      MODIFIED_DATE
	     )
	     VALUES
	     (
	      'AR',
	      :d_pend_doc_type_code,
	      :d_pend_doc_num,
	      TO_DATE(:d_pend_doc_date,'DD/MM/YYYY'),
	      SYSDATE,
	      'P',
	      :d_pend_narration,
	      :d_pend_post_month,
	      :d_pend_post_year,
	       USER,
	       SYSDATE,
	       USER,
	       SYSDATE);

    if (OERROR)
	err_mesg("INSERT failed on table SY_DOC_CONTROL",0,"");
           
    EXEC SQL INSERT INTO AR_PENDING_DOC
		(ACC_ENTITY_CODE,
		    DOC_TYPE_CODE,
		    DOC_NUM,
		    LAST_DOC_LINE_NUM,
		    CUST_CODE,
		    DOC_DATE,
		    NARRATION,
		    BASE_DATE,
		    DUE_DATE,
		    GROSS_AMT,
		    PAYABLE_AMT,
		    DISCOUNT_AMT,
		    PENDING_AMT,
		    ALLOCATED_AMT,
		    CURRENCY_CODE,
		    EXCHG_RATE,
		    PMNT_TERMS_CODE,
		    SETTLEMENT_DATE,
		    SETTLEMENT_PERC,
		    CUST_REF,
		    PATIENT_ID,
		    BILLING_GROUP,
		    BILL_NUM,
		    BILL_DATE,
		    DOCTOR_FEE_AMT,
		    MAIN_ACC1_CODE,
		    MAIN_ACC2_CODE,
		    SUBLEDGER_GROUP_CODE,
		    SUBLEDGER_LINE_CODE,
		    DEPT_CODE,
		    PRODUCT_GROUP_CODE,
		    PRODUCT_LINE_CODE,
		    POST_MONTH,
		    POST_YEAR,
		    MISC_CUST_LONG_NAME,
		    MISC_CUST_SHORT_NAME,
		    MISC_CUST_ADD1_DESC,
		    MISC_CUST_ADD2_DESC,
		    MISC_CUST_ADD3_DESC,
		    MISC_CUST_ZIP_DESC,
		    MISC_CUST_LONG_NAME_CHINESE,
		    MISC_CUST_SHORT_NAME_CHINESE,
		    MISC_CUST_ADD1_DESC_CHINESE,
		    MISC_CUST_ADD2_DESC_CHINESE,
		    MISC_CUST_ADD3_DESC_CHINESE,
		    MISC_CUST_ZIP_DESC_CHINESE,
		    TEL_NUM,
		    CONTACT_NAME,
		    CONTACT_NAME_TITLE,
		    ERROR_FLAG,
		    BILL_DOC_TYPE_CODE,
		    TRN_TYPE_CODE,
		    LAST_UPD_DATE,
		    BILL_TYPE_CODE,
			EPISODE_TYPE,
		    EPISODE_ID,
		    VISIT_ID,
			MARKUP_AMT,
			CONSOLIDATED_INV_YN,
			MODULE_ID)
			(SELECT ACC_ENTITY_CODE,
		    DOC_TYPE_CODE,
		    DOC_NUM,
		    LAST_DOC_LINE_NUM,
		    CUST_CODE,
		    DOC_DATE,
		    NARRATION,
		    BASE_DATE,
		    DUE_DATE,
		    GROSS_AMT,
		    PAYABLE_AMT,
		    DISCOUNT_AMT,
		    PENDING_AMT,
		    ALLOCATED_AMT,
		    CURRENCY_CODE,
		    EXCHG_RATE,
		    PMNT_TERMS_CODE,
		    SETTLEMENT_DATE,
		    SETTLEMENT_PERC,
		    CUST_REF,
		    PATIENT_ID,
		    BILLING_GROUP,
		    BILL_NUM,
		    BILL_DATE,
		    DOCTOR_FEE_AMT,
		    MAIN_ACC1_CODE,
		    MAIN_ACC2_CODE,
		    SUBLEDGER_GROUP_CODE,
		    SUBLEDGER_LINE_CODE,
		    DEPT_CODE,
		    PRODUCT_GROUP_CODE,
		    PRODUCT_LINE_CODE,
		    POST_MONTH,
		    POST_YEAR,
		    MISC_CUST_LONG_NAME,
		    MISC_CUST_SHORT_NAME,
		    MISC_CUST_ADD1_DESC,
		    MISC_CUST_ADD2_DESC,
		    MISC_CUST_ADD3_DESC,
		    MISC_CUST_ZIP_DESC,
		    MISC_CUST_LONG_NAME_CHINESE,
		    MISC_CUST_SHORT_NAME_CHINESE,
		    MISC_CUST_ADD1_DESC_CHINESE,
		    MISC_CUST_ADD2_DESC_CHINESE,
		    MISC_CUST_ADD3_DESC_CHINESE,
		    MISC_CUST_ZIP_DESC_CHINESE,
		    TEL_NUM,
		    CONTACT_NAME,
		    CONTACT_NAME_TITLE,
		    ERROR_FLAG,
		    BILL_DOC_TYPE_CODE,
		    TRN_TYPE_CODE,
		    LAST_UPD_DATE,
		    BILL_TYPE_CODE,
			EPISODE_TYPE,
		    EPISODE_ID,
		    VISIT_ID,
			MARKUP_AMT,
			CONSOLIDATED_INV_YN,
			MODULE_ID
		    FROM AR_PENDING_DOC_TEMP
	      WHERE ROWID = :d_pend_rowid);

    if (OERROR)
	err_mesg("INSERT failed on table AR_PENDING_DOC",0,"");

    EXEC SQL INSERT INTO AR_CUST_TRN
		(ACC_ENTITY_CODE,
		    CUST_CODE,
		    ORG_DOC_TYPE_CODE,
		    ORG_DOC_NUM,
		    LINE_NUM,
		    DOC_TYPE_CODE,
		    DOC_NUM,
		    DOC_DATE,
		    NARRATION,
		    AMOUNT,
		    LINE_TYPE_CODE,
		    CUST_REF,
		    TRN_TYPE_CODE,
			POST_MONTH,
			POST_YEAR)
	     (SELECT ACC_ENTITY_CODE,
		    CUST_CODE,
		    ORG_DOC_TYPE_CODE,
		    ORG_DOC_NUM,
		    LINE_NUM,
		    DOC_TYPE_CODE,
		    DOC_NUM,
		    DOC_DATE,
		    NARRATION,
		    AMOUNT,
		    LINE_TYPE_CODE,
		    CUST_REF,
		    TRN_TYPE_CODE,
			POST_MONTH,
			POST_YEAR
	     FROM AR_CUST_TRN_TEMP
	      WHERE ORG_DOC_TYPE_CODE = :d_pend_doc_type_code
		AND ORG_DOC_NUM       = :d_pend_doc_num);

    if (OERROR)
	err_mesg("INSERT failed on table AR_CUST_TRN",0,"");

    EXEC SQL INSERT INTO  SY_DOC_CONTROL 
	     (
	      MODULE_ID,
	      DOC_TYPE_CODE,
	      DOC_NUM,  
	      DOC_DATE,
	      POSTED_DATE,
	      DOC_STATUS,
	      NARRATION ,
	      POST_MONTH,
	      POST_YEAR ,
	      ADDED_BY_ID,
	      ADDED_DATE,
	      MODIFIED_BY_ID,
	      MODIFIED_DATE
	     )
	     SELECT 'AR',
		    DOC_TYPE_CODE,
		    DOC_NUM,
		    DOC_DATE,
		    SYSDATE, 
		    'P',
		    NARRATION,
		    POST_MONTH,
		    POST_YEAR,
		    USER,
		    SYSDATE,
		    USER,
		    SYSDATE
	       FROM AR_CUST_TRN_TEMP
	      WHERE ORG_DOC_TYPE_CODE = :d_pend_doc_type_code
		AND ORG_DOC_NUM       = :d_pend_doc_num
		AND ORG_DOC_TYPE_CODE <> DOC_TYPE_CODE
		AND ORG_DOC_NUM       <> DOC_NUM;

    if (OERROR)
	err_mesg("INSERT failed on table SY_DOC_CONTROL - for CUST_TRN",0,"");

    EXEC SQL UPDATE AR_CUSTOMER
		SET OUTSTANDING_BALANCE_AMT = 
		       NVL(OUTSTANDING_BALANCE_AMT,0) +
		       :d_pend_pending_amt
	      WHERE CUST_CODE        = :d_pend_cust_code;

    if (OERROR)
	err_mesg("UPDATE failed on table AR_CUSTOMER",0,"");

    EXEC SQL DELETE AR_PENDING_DOC_TEMP 
	      WHERE ROWID = :d_pend_rowid;

    if (OERROR)
	err_mesg("DELETE failed on table AR_PENDING_DOC_TEMP",0,"");

    EXEC SQL DELETE AR_CUST_TRN_TEMP
	      WHERE ORG_DOC_TYPE_CODE = :d_pend_doc_type_code
		AND ORG_DOC_NUM       = :d_pend_doc_num;

    if (OERROR)
	err_mesg("DELETE failed on table AR_CUST_TRN_TEMP",0,"");

}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}
 
validate_posting() 
{  
   strcpy(d_module_valid_id.arr , "AR");

   if(validate_posting_acct( d_main_acc1_code.arr,
			     d_main_acc2_code.arr,
			     d_dept_code.arr,
			     d_product_group_code.arr,
			     d_product_line_code.arr,
			     d_subledger_group_code.arr,
			     d_subledger_line_code.arr,
			     'Y',   /* For chking Bank Reconcile */
				 d_module_valid_id.arr ,
			     atol(d_pend_post_year.arr),
				 atol(d_pend_post_month.arr),
				 &g_err_typ,
			     g_err_id,
			     g_err_msg
			  ) ==  -1)
   {
	  if(g_err_typ == 0)
		err_mesg(g_err_msg,0,"");
	  else 
	  {
	     error_insert(" HDR",g_err_id);
	  }
       }
}

run_report()
{
  char l_run_string[300],l_messg_str[132];
  int  l_ret_run_rep;

  sprintf(l_run_string,"r25run %s %s no \
  batch=yes desname=arbopdoc.lis session_id=%s pgm_date=%s PGM_ID=%s",
  "arropdoc",uid_pwd.arr,nd_session_id.arr,g_pgm_date,"ARBOPDOC");

  l_ret_run_rep = WinExec(l_run_string,SW_SHOWNORMAL);

  if (l_ret_run_rep)
  {
     sprintf(l_messg_str,"RUNREP - arropdoc session = %s failed \
return value %d",nd_session_id.arr,l_ret_run_rep);
     err_mesg(l_messg_str,1,"");
  }
}

delete_records()
{
    while (1)
    {
       EXEC SQL DELETE FROM AR_DOC_ERROR
		      WHERE PGM_ID = 'ARBOPDOC'
			AND ROWNUM < 500;

       if (OERROR)
	    err_mesg("DELETE failed on table AR_DOC_ERROR",0,"");

       EXEC SQL COMMIT WORK;
       if (NOT_FOUND)
	     break;
    }
}

doubcmp(_doub1,_doub2)
double _doub1,_doub2;
{
  char _doub_str1[25],_doub_str2[25];
  if (nd_no_of_decimal == 3) 
    {
  sprintf(_doub_str1,"%15.3f",_doub1);
  sprintf(_doub_str2,"%15.3f",_doub2);
  ltrim(_doub_str1);
  ltrim(_doub_str2);
  if (strcmp(_doub_str1,"-0.000") == 0)
     strcpy(_doub_str1,"0.000");
  if (strcmp(_doub_str2,"-0.000") == 0)
     strcpy(_doub_str2,"0.000");

    }
  else
   {
  sprintf(_doub_str1,"%15.2f",_doub1);
  sprintf(_doub_str2,"%15.2f",_doub2);
  ltrim(_doub_str1);
  ltrim(_doub_str2);
  if (strcmp(_doub_str1,"-0.00") == 0)
     strcpy(_doub_str1,"0.00");
  if (strcmp(_doub_str2,"-0.00") == 0)
     strcpy(_doub_str2,"0.00");

   }
  
  return(strcmp(_doub_str1,_doub_str2));
}

ltrim(l_str)
char *l_str;
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}


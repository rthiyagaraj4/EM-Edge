/************************************************************************/
/* OCS MEDICOM VER 1.0                                                   */
/************************************************************************/
/* PROGRAM NAME          : ARRORPRT.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 10-APR-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                                */
/*                                                                                                           */
/*  FUNCTION             :                                                */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        AR_CASHIER               Query/Update             */
/*         2.        SY_PROG_CONTROL           Update/Lookup            */
/*         3.        SY_PROG_MESG                Insert                 */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <string.h>
#include "gl.h"
char string_var[100];

/*
#define OERROR (sqlca.sqlcode < 0)
*/

#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define DEST_NAME "arrorprt.lis"

#define MAX_LINES 13
#define ESC 0x1B
/*
#define DEBUG 1
*/
#define SKIP_1 5
#define SKIP_2 68
#define SKIP_3 3
#define SKIP_4 15
#define SKIP_5 25
#define SKIP_6 15
#define SKIP_7 3
#define SKIP_8 13
#define SKIP_9 9

 
EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd      [132],
           hosp_name    [120],
           date_time    [20],
		   cur_str      [8],
		   sub_cur_str	[8],
           user_id      [20],
           nd_pgm_date  [35],
		      d_curr_pgm_name  [15];

   VARCHAR nd_facility_id   [3],
           nd_session_id    [16],
           nd_fm_doc_type   [7],
           nd_to_doc_type   [7],
           nd_fm_doc_num    [10],
           nd_to_doc_num    [10],
           nd_fm_doc_date   [12],
           nd_to_doc_date   [12];

   VARCHAR d_bl_doc_type_code     [7],
           d_bl_doc_num           [10],
           d_bl_doc_date          [12],
           d_bl_cust_code         [9],
           d_bl_doc_ref           [16],
           d_bl_bank_desc         [31],
           d_bl_cheque_num        [11],
           d_bl_cheque_date       [12],
           d_bl_rowid             [31],
           d_bl_narration         [51],
           d_ar_cust_long_name    [101];   /*   CRF-0120  */
   VARCHAR  p_language_id[4];
   double  d_bl_amt_local;

   int nd_no_of_decimal;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

FILE *fp;
int lctr = 0,pctr =0;
char filename[150];

void proc_main(argc,argv)
char *argv[];
int argc;
{
	strcpy(filename,WORKING_DIR);
	strcpy(OUTPUT_FILE_NAME,argv[5]);
	strcat(filename,OUTPUT_FILE_NAME);

	//strcat(filename,"blrrclst.lis");

   if (argc < 6)
   {
    int i = 0;
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

strcpy(g_pgm_id,"ARRORPRT");

   strcpy(d_curr_pgm_name.arr,g_pgm_id); 
   d_curr_pgm_name.len = strlen(d_curr_pgm_name.arr); 

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   if(sql_connect() == -1)
   {
      disp_message(ERR_MESG,"Error in connecting to Oracle");
      proc_exit();
   }

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

 
   /*if (argc != 8)
   {
      disp_message(ERR_MESG,"Not enough Parameters for running this program\n");
      proc_exit();
   }

   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); */

/*
   strcpy(g_session_id,argv[2]);
   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);
*/

  /* strcpy(g_pgm_id,"ARRORPRT");

   if(sql_connect() == -1)
   {
      disp_message(ORA_MESG,"Error in connecting to Oracle\n");
      if (uid_pwd.len == 0)
         disp_message(ORA_MESG,"Null oracle uid/pwd\n\n\n");
      proc_exit();
   } */

#ifdef DEBUG
  disp_message(ERR_MESG,"After connecting to oracle...\n");
#endif
   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
strcpy(g_facility_id,argv[4]);
  set_meduser_role();
     strcpy(p_language_id.arr,l_language_id.arr);
   p_language_id.len = l_language_id.len;

/*
   chk_active();
*/
/*   strcpy(g_pgm_date,argv[3]);
   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);*/

   nd_fm_doc_type.arr[0]    = '\0';
   nd_fm_doc_num.arr[0]     = '\0';
   nd_fm_doc_date.arr[0]    = '\0';
   nd_to_doc_type.arr[0]    = '\0';
   nd_to_doc_num.arr[0]     = '\0';
   nd_to_doc_date.arr[0]    = '\0';
   nd_facility_id.arr[0] = '\0';


   nd_fm_doc_type.len       = 0;
   nd_fm_doc_num.len        = 0;
   nd_fm_doc_date.len       = 0;
   nd_to_doc_type.len       = 0;
   nd_to_doc_num.len        = 0;
   nd_to_doc_date.len       = 0;
   nd_facility_id.len       = 0;

   EXEC SQL SELECT OPERATING_FACILITY_ID ,PARAM1,PARAM2,PARAM3,PARAM4,PARAM5,PARAM6
              INTO :nd_facility_id, :nd_fm_doc_type, :nd_fm_doc_num, :nd_fm_doc_date,
                   :nd_to_doc_type, :nd_to_doc_num, :nd_to_doc_date 
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARRORPRT'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");

   nd_fm_doc_type.arr[nd_fm_doc_type.len]    = '\0';
   nd_fm_doc_num.arr[nd_fm_doc_num.len]      = '\0';
   nd_fm_doc_date.arr[nd_fm_doc_date.len]    = '\0';
   nd_to_doc_type.arr[nd_to_doc_type.len]    = '\0';
   nd_to_doc_num.arr[nd_to_doc_num.len]      = '\0';
   nd_to_doc_date.arr[nd_to_doc_date.len]    = '\0';
   nd_facility_id.arr[nd_facility_id.len]        = '\0';


/* #ifdef DEBUG */
   sprintf(string_var,"fr type is <%d> - <%s>\n",nd_fm_doc_type.len ,nd_fm_doc_type.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to type is <%d> - <%s>\n",nd_to_doc_type.len ,nd_to_doc_type.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"fr num  is <%d> - <%s>\n",nd_fm_doc_num.len ,nd_fm_doc_num.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to num  is <%d> - <%s>\n",nd_to_doc_num.len ,nd_to_doc_num.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"fr dt   is <%d> - <%s>\n",nd_fm_doc_date.len ,nd_fm_doc_date.arr);
   disp_message(INFO_MESG,string_var);
   sprintf(string_var,"to dt   is <%d> - <%s>\n",nd_to_doc_date.len ,nd_to_doc_date.arr);
   disp_message(INFO_MESG,string_var);
/* #endif */

/*
   start_prog_control();
*/
   start_prog_msg();

   fetch_detls();

   open_files();
   
   declare_cursors();

   while(fetch_rec())
   {
  
/*-- Rowid was giving problem. So it has been replaced by doc_type_code
     and doc_num. VSK 16/11/1999 */
	   
        EXEC SQL SELECT ROWID
                 INTO   :d_bl_rowid
                 FROM   AR_CASHIER
//				 WHERE  ROWID = :d_bl_rowid
                 WHERE  DOC_TYPE_CODE  = :d_bl_doc_type_code 
				 AND	DOC_NUM = :d_bl_doc_num
                 AND    NVL(PRINT_FLAG,'N') = 'N'
                 FOR    UPDATE OF PRINT_FLAG NOWAIT;

       if(sqlca.sqlcode == -54 || sqlca.sqlerrd[2] == 0)
           continue;
       else if(OERROR)
           err_mesg("Lock failed on table AR_CASHIER",0,"");

        fetch_cust_dets();
        print_rec();
        update_rec();
   }

   fclose(fp);

   EXEC SQL DELETE FROM SY_PROG_PARAM
                  WHERE PGM_ID     = 'ARRORPRT'
                    AND SESSION_ID = :nd_session_id
                    AND PGM_DATE   = :nd_pgm_date;
   if (OERROR)   
        err_mesg("DELETE failed on table SY_PROG_PARAM",0,"");



   end_prog_msg();

/*
   end_prog_control();
*/

   EXEC SQL COMMIT WORK RELEASE;
   return;
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

fetch_detls()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"In fetch det\n");
#endif
   hosp_name.arr[0]      = '\0';
   date_time.arr[0]      = '\0';
   cur_str.arr[0]        = '\0';
   sub_cur_str.arr[0]    = '\0';
   user_id.arr[0]        = '\0';

   hosp_name.len      = 0;
   date_time.len      = 0;
   cur_str.len        = 0;
   sub_cur_str.len    = 0;
   user_id.len        = 0;
 
   EXEC SQL SELECT ACCOUNTING_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY'), BASE_CURRENCY,
                   USER,BASE_CURRENCY_DEC, NO_OF_DECIMAL
              INTO :hosp_name, :date_time, :cur_str, :user_id,
			       :sub_cur_str , nd_no_of_decimal
              FROM SY_ACC_ENTITY
			  where   ACC_ENTITY_ID = :nd_facility_id;
;

   if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]           = '\0';
   date_time.arr[date_time.len]           = '\0';
   cur_str.arr[cur_str.len]               = '\0';
   sub_cur_str.arr[sub_cur_str.len]       = '\0';
   user_id.arr[user_id.len]               = '\0';

}

open_files()
{
   
   //strcpy(filename,WORKING_DIR);
   //strcat(filename,DEST_NAME);
   char		txt_msg[101];   

   if ((fp = fopen(filename,"w")) == NULL)
   {
        sprintf(txt_msg,"Error While Opening File %s",filename);
		err_mesg(txt_msg,0,"");
		//err_mesg("\nError while opening File arrrmltr.lis\n",0,"");
        proc_exit();
   }

#ifdef DEBUG
   disp_message(INFO_MESG,"After opening file\n");
#endif
}

declare_cursors()
{
#ifdef DEBUG
   disp_message(INFO_MESG,"Inside declare cursors\n");
#endif

/*-- Y2K correction. Format introduced for 'FROM AND TO' Date 
     as DD/MM/YYYY VSK 14/11/1999 */

   EXEC SQL DECLARE AR_CASHIER_CUR CURSOR FOR
             SELECT DOC_TYPE_CODE,
                    DOC_NUM,
                    TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                    CUST_CODE,
                    DOC_REF,
                    NVL(AMT_LOCAL,0),
                    BANK_DESC,
                    CHEQUE_NUM,
                    TO_CHAR(CHEQUE_DATE,'DD/MM/YYYY'),
                    NARRATION,
                    ROWID
               FROM AR_CASHIER
              WHERE  DOC_TYPE_CODE >= NVL(:nd_fm_doc_type,'      ')
                AND DOC_TYPE_CODE <= NVL(:nd_to_doc_type,'~~~~~~')
                AND DOC_NUM       >= NVL(:nd_fm_doc_num,0)
                AND DOC_NUM       <= NVL(:nd_to_doc_num,99999999)
                AND NVL(DOC_DATE,SYSDATE)      >= 
                    NVL(TO_DATE(:nd_fm_doc_date,'DD/MM/YYYY'),to_date('00010101','YYYYDDMM'))
                AND NVL(DOC_DATE,SYSDATE)      <= 
                    NVL(TO_DATE(:nd_to_doc_date,'DD/MM/YYYY'),to_date('47123112','YYYYDDMM'))
                AND  NVL(POSTED_FLAG,'N') = 'N'
                AND NVL(PRINT_FLAG,'N')  = 'N'
              ORDER BY DOC_TYPE_CODE,DOC_NUM;

    EXEC SQL OPEN AR_CASHIER_CUR;
    if (OERROR)
         err_mesg("OPEN failed on cursor AR_CASHIER_CUR",0,"");

    EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
              SELECT DECODE(CHINESE_REPORTING_FLAG,'Y',
                     LONG_NAME_CHINESE,LONG_NAME)
                FROM AR_CUSTOMER
               WHERE CUST_CODE = :d_bl_cust_code;

	fprintf(fp,"%c(s4099T",ESC); 	/* To set the font name			*/
  	fprintf(fp,"%c&l8D",ESC); 	/* To set vertical lines per inch 	*/
	fprintf(fp,"%c(s12H",ESC); 	/* To set the font 			*/
	fprintf(fp,"%c&l6E",ESC); 	/* To Set the Top margin  		*/
} 
 
fetch_rec()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside fetch rec\n");
#endif
   d_bl_doc_type_code.arr[0] = '\0';
   d_bl_doc_num.arr[0]       = '\0';
   d_bl_doc_date.arr[0]      = '\0';
   d_bl_cust_code.arr[0]     = '\0';
   d_bl_doc_ref.arr[0]       = '\0';
   d_bl_bank_desc.arr[0]     = '\0';
   d_bl_cheque_num.arr[0]    = '\0';
   d_bl_cheque_date.arr[0]   = '\0';
   d_bl_narration.arr[0]     = '\0';
   d_bl_rowid.arr[0]         = '\0';

   d_bl_doc_type_code.len    = 0;
   d_bl_doc_num.len          = 0;
   d_bl_doc_date.len         = 0;
   d_bl_cust_code.len        = 0;
   d_bl_doc_ref.len          = 0;
   d_bl_bank_desc.len        = 0;
   d_bl_cheque_num.len       = 0;
   d_bl_cheque_date.len      = 0;
   d_bl_narration.len        = 0;
   d_bl_rowid.len            = 0;

   d_bl_amt_local            = 0;

   EXEC SQL FETCH AR_CASHIER_CUR
             INTO :d_bl_doc_type_code,
                  :d_bl_doc_num,
                  :d_bl_doc_date,
                  :d_bl_cust_code,
                  :d_bl_doc_ref,
                  :d_bl_amt_local,
                  :d_bl_bank_desc,
                  :d_bl_cheque_num,
                  :d_bl_cheque_date,
                  :d_bl_narration,
                  :d_bl_rowid;

    if (OERROR)
         err_mesg("FETCH failed on cursor AR_CASHIER_CUR",0,"");

    d_bl_doc_type_code.arr[d_bl_doc_type_code.len] = '\0';
    d_bl_doc_num.arr[d_bl_doc_num.len]             = '\0';
    d_bl_doc_date.arr[d_bl_doc_date.len]           = '\0';
    d_bl_cust_code.arr[d_bl_cust_code.len]         = '\0';
    d_bl_doc_ref.arr[d_bl_doc_ref.len]             = '\0';
    d_bl_bank_desc.arr[d_bl_bank_desc.len]         = '\0';
    d_bl_cheque_num.arr[d_bl_cheque_num.len]       = '\0';
    d_bl_cheque_date.arr[d_bl_cheque_date.len]     = '\0';
    d_bl_narration.arr[d_bl_narration.len]         = '\0';
    d_bl_rowid.arr[d_bl_rowid.len]                 = '\0';

    if (LAST_ROW)
        return(0);
    else
        return(1);
}

fetch_cust_dets()
{
#ifdef DEBUG
  disp_message(INFO_MESG,"Inside fetch cust dets\n");
#endif

    EXEC SQL OPEN AR_CUSTOMER_CUR;

    if (OERROR)
         err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

    d_ar_cust_long_name.arr[0]          = '\0';
    d_ar_cust_long_name.len             = 0;

    EXEC SQL FETCH AR_CUSTOMER_CUR
              INTO :d_ar_cust_long_name;

    if (OERROR)
         err_mesg("FETCH failed on cursor AR_CUSTOMER_CUR",0,"");

     d_ar_cust_long_name.arr[d_ar_cust_long_name.len] = '\0';

}

print_rec()
{
   char out_str[10][133];
   char s_amt[20];
   int  length_str[10];
   int  i = 0,no_of_lines = 0;

#ifdef DEBUG
  disp_message(INFO_MESG,"inside print rec\n");
#endif

/*
   fprintf(fp,"\f");
*/
   if ( nd_no_of_decimal == 3)
     sprintf(s_amt,"%15.3f",d_bl_amt_local);
   else   
     sprintf(s_amt,"%15.2f",d_bl_amt_local);
   
   format_amt(s_amt,nd_no_of_decimal);
 

   for(i=0;i<SKIP_1;i++) fprintf(fp,"\n");
   for(i=0;i<SKIP_2;i++) fprintf(fp," ");
   fprintf(fp,"%-6s/%-8s\n\n",d_bl_doc_type_code.arr,
                             d_bl_doc_num.arr);
   for(i=0;i<SKIP_2;i++) fprintf(fp," ");
   fprintf(fp,"%10s\n",d_bl_doc_date.arr);
   for(i=0;i<SKIP_3;i++) fprintf(fp,"\n");
   fprintf(fp,"%80s\n\n\n",s_amt);
   for(i=0;i<SKIP_4;i++) fprintf(fp," ");
   fprintf(fp,"%-40s\n\n",d_ar_cust_long_name.arr);
   length_str[0] = 45;
   for (i =1;i<10;i++) 
      length_str[i] = 80; 
   for (i =1;i<10;i++) 
      strcpy(out_str[i],"");
      
   no_of_lines = print_in_words(d_bl_amt_local,length_str,sub_cur_str.arr,out_str,nd_no_of_decimal); 
   
  
   if(d_bl_amt_local)
     fprintf(fp, "%-6s", cur_str.arr);
   for(i=0;i<SKIP_5;i++) fprintf(fp," ");
   if(strlen(out_str[1]))
       strcat(out_str[1],")");
   else
       strcat(out_str[0],")");
   fprintf(fp,"   %s  (%s\n\n",s_amt,out_str[0]);
   fprintf(fp,"    %s\n\n",out_str[1]);

   for(i=0;i<SKIP_6;i++) fprintf(fp," ");
   fprintf(fp,"%s\n",d_bl_narration.arr);

   for(i=0;i<SKIP_7;i++) fprintf(fp,"\n");
   for(i=0;i<SKIP_8;i++) fprintf(fp," ");
   fprintf(fp,"CHEQUE\n\n");
   for(i=0;i<SKIP_8;i++) fprintf(fp," ");
   fprintf(fp,"%s\n",d_bl_cheque_num.arr);
   for(i=0;i<SKIP_8;i++) fprintf(fp," ");
   fprintf(fp,"%s\n",d_bl_cheque_date.arr);
   for(i=0;i<SKIP_8;i++) fprintf(fp," ");
   fprintf(fp,"%s\n",d_bl_bank_desc.arr);
   for(i=0;i<SKIP_9;i++) fprintf(fp,"\n");
   fflush(fp); 
/*
sprintf(string_var,"Document ->  %s / %s \n Dt -> %s Cust -> %s Doc ref -> %s Amount -> %f \ \n Bank desc -> %s chk dtls -> %s %s\n",
disp_message(INFO_MESG,string_var);
   d_bl_doc_type_code.arr,
   d_bl_doc_num.arr,
   d_bl_doc_date.arr,
   d_bl_cust_code.arr,
   d_bl_doc_ref.arr,
   d_bl_amt_local,
   d_bl_bank_desc.arr,
   d_bl_cheque_num.arr,
   d_bl_cheque_date.arr);
sprintf(string_var,"Cust name is <%s>\n",d_ar_cust_long_name.arr); 
disp_message(INFO_MESG,string_var);
*/
}

update_rec()
{

/*-- Rowid was giving problem. So it has been replaced by doc_type_code
     and doc_num. VSK 16/11/1999 */

    EXEC SQL UPDATE AR_CASHIER
                SET PRINT_FLAG = 'Y'
//				WHERE ROWID = :d_bl_rowid
              WHERE  DOC_TYPE_CODE  = :d_bl_doc_type_code and
					 DOC_NUM = :d_bl_doc_num;

     if (OERROR)
         err_mesg("UPDATE failed on table AR_CASHIER",0,"");

    EXEC SQL COMMIT WORK;
    if (OERROR)
         err_mesg("COMMIT failed",0,""); 
}

ltrim(l_str)
char *l_str;
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}


rtrim(l_str)
char *l_str;
{
  while (*l_str != '\0') *l_str++;
  l_str--;
  while (*l_str == ' ') *l_str--;
  *(l_str+1) = '\0';
}


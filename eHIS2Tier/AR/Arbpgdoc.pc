/************************************************************************/
/* OCS MEDICOM VER 1.0                                                  */
/************************************************************************/
/* PROGRAM NAME          : ARBPGDOC.PC                                  */
/* AUTHOR                : S. SRIRAM                                    */
/* DATE WRITTEN          : 27-FEB-1993                                  */
/*                                                                      */
/* CALLED FROM           :                                              */
/*                                                                      */
/*  FUNCTION               :                                            */
/*                                                                      */
/*  TABLE DETAILS                                                       */
/*                                                                      */
/*        S. No.       TABLENAMES             INPUT/OUTPUT              */
/*                                                                      */
/*         1.        AR_CUSTOMER                 Update                 */
/*         2.        AR_PENDING_DOC           Query/Delete              */
/*         3.        AR_CUST_TRN              Query/Delete              */
/*         3.        SY_PROG_CONTROL          Update/Lookup             */
/*         4.        SY_PROG_MESG                Insert                 */
/*                                                                      */
/*  PARAMETERS           :            -                                 */
/*                                                                      */
/*  SUBROUTINES          :                                              */
/*                                                                      */
/*         1.        ERR_MESG            err_mesg                       */
/*                                                                      */
/*                                                                      */
/************************************************************************/

#include <stdio.h>
#include <math.h>
#include <string.h>
//#include "winexecc.h"
#include "gl.h"
/*
#define OERROR (sqlca.sqlcode < 0)
*/
#define LAST_ROW (sqlca.sqlcode == 1403)

#define NOT_FOUND (sqlca.sqlerrd[2] == 0)

#define TABLE_ALREADY_EXISTS (sqlca.sqlcode == -955)

#define RESOURCE_BUSY        (sqlca.sqlcode == -54)

/*
#define DEBUG 0
*/
EXEC SQL BEGIN DECLARE SECTION;

   VARCHAR uid_pwd[132];

   VARCHAR  nd_facility_id         [3],
			nd_session_id          [16],
            nd_pgm_date            [25],
            hosp_name              [120],
            date_time              [20],
            user_id                [20];

   VARCHAR  nd_fm_cust_code        [9],
            nd_to_cust_code        [9],
            nd_fm_group_code       [3],
            nd_to_group_code       [3],
            nd_purge_zero          [2],
            nd_print_flg           [2]; 

       int  month_paid_inv = 0;

   VARCHAR  ar_customer_cust_code           [9],
            ar_customer_patient_flag        [2],
            ar_customer_misc_cflag			[2],
            ar_customer_cust_long_name      [61],
            ar_pend_doc_type_code           [7],
            ar_pend_doc_num                 [9],
            ar_pend_rowid                   [31],
            cust_trn_doc_type_code          [7],
            cust_trn_doc_num                [9],
            cust_trn_org_doc_type_code      [7],
            cust_trn_org_doc_num            [9],
            ar_pend_doc_date                [12],
            ar_pend_base_date               [12],
            ar_pend_pmnt_terms_code         [3],
            ar_pend_due_date                [12],
            ar_pend_settlement_date         [12],
            ar_pend_settlement_perc         [8],
            ar_pend_cust_ref                [16],
            ar_pend_main_acc1_code          [7],
            ar_pend_main_acc2_code          [5],
            ar_pend_dept_code               [11],
            ar_pend_product_group_code      [4],
            ar_pend_product_line_code       [5],
            ar_pend_sub_group_code			[4],
            ar_pend_sub_line_code			[9],
            ar_pend_narration               [51],
            ar_pend_billing_group           [5],  -- CRF-0120
            ar_pend_patient_id              [21],
            ar_pend_bill_doc_type_code      [7],
            ar_pend_bill_num                [9],
            ar_pend_bill_date               [12],
            ar_pend_misc_clong_name			[101],  -- CRF-0120
            ar_pend_misc_cshort_name		[61],
            ar_pend_misc_cadd1_desc			[61],
            ar_pend_misc_cadd2_desc			[61],
            ar_pend_misc_cadd3_desc			[61],
            ar_pend_misc_czip_desc			[31],
            cust_trn_rowid                  [31],
            pmnt_terms_desc                 [31],
            gl_posting_desc                 [64],
            patient_desc                    [31],
            billing_group_desc              [41],  -- CRF-0120
			p_operational_modules           [201];

char        df_instal_flag;

double      ar_pend_gross_amt,
            ar_pend_discount_amt,
            ar_pend_payable_amt,
            ar_pend_doctor_fee_amt;

int         ar_pend_post_month,
            ar_pend_post_year;

int			nd_no_of_decimal;

EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;

#include "winproc.h"

int delete_cnt = 0;

FILE *fp;
int lctr = 0,pctr =0;
char filename[150];

void proc_main(argc,argv)
char *argv[];
int argc;
{
   char mesg1[50];
  
   strcpy(filename,WORKING_DIR);
   strcat(filename,"arbpgdoc.lis");

   if (argc != 5)
   {
    int i = 0;
      disp_message(ERR_MESG,"Not enough Parameters for running this program");
      proc_exit();
   }

   strcpy(g_pgm_id,"ARBPGDOC");
 
   strcpy(uid_pwd.arr,argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr);

   strcpy(nd_session_id.arr,argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr);

   strcpy(nd_pgm_date.arr,argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr);

   if(sql_connect() == -1)
   {
      disp_message(ERR_MESG,"Error in connecting to Oracle\n");
      sprintf(mesg1,"Error is %s\n",sqlca.sqlerrm.sqlerrmc);
      disp_message(ERR_MESG,mesg1);
      proc_exit();
   }

   /***** CHECKING FOR ACTIVE FLAG IN SY_PROG_CONTROL *****/
   strcpy(g_pgm_date,argv[3]);

   set_meduser_role();               
   
   chk_active();

   start_prog_control();
   start_prog_msg();

   nd_fm_cust_code.arr[0]      = '\0';
   nd_to_cust_code.arr[0]      = '\0';
   nd_fm_group_code.arr[0]     = '\0';
   nd_to_group_code.arr[0]     = '\0';
   nd_print_flg.arr[0]         = '\0';

   nd_fm_cust_code.len         = 0;
   nd_to_cust_code.len         = 0;
   nd_fm_group_code.len        = 0;
   nd_to_group_code.len        = 0;
   nd_print_flg.len            = 0;

   EXEC SQL SELECT operating_facility_id,
				   PARAM1,  PARAM2,
                   PARAM3,  PARAM4,
                   PARAM5
              INTO :nd_facility_id,
				   :nd_fm_cust_code,    :nd_to_cust_code,
                   :nd_fm_group_code,   :nd_to_group_code,
                   :nd_print_flg 
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBPGDOC'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

    nd_fm_cust_code.arr[nd_fm_cust_code.len]        = '\0';
    nd_to_cust_code.arr[nd_to_cust_code.len]        = '\0';
    nd_fm_group_code.arr[nd_fm_group_code.len]      = '\0';
    nd_to_group_code.arr[nd_to_group_code.len]      = '\0';
    nd_print_flg.arr[nd_print_flg.len]              = '\0';

   if (NOT_FOUND)
        err_mesg("No Record found in SY_PROG_PARAM",0,"");
 
   fetch_desc();
   fetch_ar_param();

   delete_prog_param();

   if (nd_print_flg.arr[0] == 'Y')
          lock_tables();

   open_files();
   declare_cursors();
   open_customer();
   while (fetch_customer())
   {
       open_pending_doc();
       while (fetch_pending_doc())
       {
           fetch_descriptions();
           print_details();
           if (nd_print_flg.arr[0] == 'N')
           {
              delete_pending_doc();
              delete_cust_trn();
              delete_patient_dtls();
           }
       }
   }
               
   print_end();

   EXEC SQL COMMIT WORK;
   if (OERROR)
         err_mesg("COMMIT failed",0,"");
   end_prog_msg();
   end_prog_control();
   EXEC SQL COMMIT WORK RELEASE;

}

lock_tables()
{
   EXEC SQL LOCK TABLE AR_PENDING_DOC
              IN EXCLUSIVE MODE NOWAIT;

   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2200");
   else if (OERROR)
           err_mesg("LOCK failed on table AR_PENDING_DOC",0,"");
 
   EXEC SQL LOCK TABLE AR_CUST_TRN
              IN EXCLUSIVE MODE NOWAIT;

   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2210");
   else if (OERROR)
           err_mesg("LOCK failed on table AR_CUST_TRN",0,"");

   EXEC SQL LOCK TABLE AR_CUSTOMER
              IN EXCLUSIVE MODE NOWAIT;

   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2190");
   else if (OERROR)
           err_mesg("LOCK failed on table AR_CUST_TRN",0,"");

   EXEC SQL LOCK TABLE AR_PATIENT_DTLS
              IN EXCLUSIVE MODE NOWAIT;

   if (RESOURCE_BUSY)
         err_mesg("",1,"AR2220");
   else if (OERROR)
         err_mesg("LOCK failed on table AR_PATIENT_DTLS",0,"");
}

delete_prog_param()
{
   EXEC SQL DELETE
              FROM SY_PROG_PARAM
             WHERE PGM_ID     = 'ARBPGDOC'
               AND SESSION_ID = :nd_session_id
               AND PGM_DATE   = :nd_pgm_date;

   if (OERROR)
        err_mesg("SELECT failed on table SY_PROG_PARAM",0,"");

   EXEC SQL COMMIT WORK;

   if (OERROR)
         err_mesg("COMMIT failed",0,""); 
}

declare_cursors()
{
   
     EXEC SQL DECLARE AR_CUSTOMER_CUR CURSOR FOR
               SELECT CUST_CODE,
                      NVL(PATIENT_FLAG,' '),
                      NVL(MISC_CUSTOMER_FLAG,' '),
                      NVL(LONG_NAME,' ')
                 FROM AR_CUSTOMER
                WHERE CUST_CODE 
              BETWEEN :nd_fm_cust_code 
                  AND :nd_to_cust_code
                  AND CUST_GROUP_CODE
              BETWEEN :nd_fm_group_code
                  AND :nd_to_group_code
                ORDER BY CUST_CODE;

     EXEC SQL DECLARE AR_PENDING_DOC_CUR CURSOR FOR
               SELECT DOC_TYPE_CODE,
                      DOC_NUM,
                      TO_CHAR(DOC_DATE,'DD/MM/YYYY'),
                      TO_CHAR(BASE_DATE,'DD/MM/YYYY'),
                      PMNT_TERMS_CODE,
                      GROSS_AMT,
                      DISCOUNT_AMT,
                      PAYABLE_AMT,
                      TO_CHAR(DUE_DATE,'DD/MM/YYYY'),
                      TO_CHAR(SETTLEMENT_DATE,'DD/MM/YYYY'),
                      TO_CHAR(SETTLEMENT_PERC,'990.00'),
                      CUST_REF,
                      MAIN_ACC1_CODE,
                      MAIN_ACC2_CODE,
                      DEPT_CODE,
                      PRODUCT_GROUP_CODE,
                      PRODUCT_LINE_CODE,
                      SUBLEDGER_GROUP_CODE,
                      SUBLEDGER_LINE_CODE,
                      NARRATION,
                      BILLING_GROUP,
                      DOCTOR_FEE_AMT,
                      PATIENT_ID,
                      BILL_DOC_TYPE_CODE,
                      BILL_NUM,
                      TO_CHAR(BILL_DATE,'DD/MM/YYYY'),
                      MISC_CUST_LONG_NAME,
                      MISC_CUST_SHORT_NAME,
                      MISC_CUST_ADD1_DESC,
                      MISC_CUST_ADD2_DESC,
                      MISC_CUST_ADD3_DESC,
                      MISC_CUST_ZIP_DESC,
                      POST_MONTH,
                      POST_YEAR,
                      ROWID
                 FROM AR_PENDING_DOC
                WHERE CUST_CODE = :ar_customer_cust_code
                  AND NVL(PENDING_AMT,0)    = 0
                  AND MONTHS_BETWEEN(SYSDATE,LAST_UPD_DATE) >= :month_paid_inv
		  /*
                  AND DECODE(:df_instal_flag,'Y',NVL(DOCTOR_FEE_AMT,0),0) = 0
		  */
                ORDER BY DOC_TYPE_CODE,DOC_NUM;

/*
     EXEC SQL DECLARE AR_CUST_TRN_CUR CURSOR FOR
               SELECT DOC_TYPE_CODE,     DOC_NUM,
                      ORG_DOC_TYPE_CODE, ORG_DOC_NUM,
                      ROWID
                 FROM AR_CUST_TRN
                WHERE CUST_CODE = :ar_customer_cust_code;
*/

     EXEC SQL DECLARE AR_PMNT_TERMS_CUR CURSOR FOR
               SELECT LONG_DESC
                 FROM AR_PMNT_TERMS
                WHERE PMNT_TERMS_CODE = :ar_pend_pmnt_terms_code;

     EXEC SQL DECLARE GL_POSTING_ACC_CUR CURSOR FOR
               SELECT CONCAT_POST_ACC_DESC
                 FROM GL_POSTING_ACC
                WHERE MAIN_ACC1_CODE       = :ar_pend_main_acc1_code
                  AND MAIN_ACC2_CODE       = :ar_pend_main_acc2_code
                  AND DEPT_CODE            = :ar_pend_dept_code
                  AND PRODUCT_GROUP_CODE   = :ar_pend_product_group_code
                  AND PRODUCT_LINE_CODE    = :ar_pend_product_line_code
                  AND SUBLEDGER_GROUP_CODE = :ar_pend_sub_group_code
                  AND SUBLEDGER_LINE_CODE  = :ar_pend_sub_line_code;

     EXEC SQL DECLARE BL_BLNG_GRP_CUR CURSOR FOR
               SELECT SHORT_DESC
                 FROM BL_BLNG_GRP
                WHERE BLNG_GRP_ID = :ar_pend_billing_group;

     EXEC SQL DECLARE MP_PATIENT_MAST_CUR CURSOR FOR
               SELECT SHORT_NAME
                 FROM MP_PATIENT_MAST
                WHERE PATIENT_ID = :ar_pend_patient_id;

}

fetch_descriptions()
{
     EXEC SQL OPEN AR_PMNT_TERMS_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor AR_PMNT_TERMS_CUR",0,"");

     pmnt_terms_desc.arr[0]    = '\0';
     pmnt_terms_desc.len       = 0;

     EXEC SQL FETCH AR_PMNT_TERMS_CUR
               INTO :pmnt_terms_desc;
  
     if (OERROR)
         err_mesg("FETCH failed on cursor AR_PMNT_TERMS_CUR",0,"");

     pmnt_terms_desc.arr[pmnt_terms_desc.len] = '\0';

      gl_posting_desc.arr[0]    = '\0';
      gl_posting_desc.len       = 0;

      EXEC SQL OPEN GL_POSTING_ACC_CUR;

      if (OERROR)
         err_mesg("OPEN failed on cursor GL_POSTING_ACC_CUR",0,"");

      EXEC SQL FETCH GL_POSTING_ACC_CUR
                INTO :gl_posting_desc;

      if (OERROR)
         err_mesg("FETCH failed on cursor GL_POSTING_ACC_CUR",0,"");

      gl_posting_desc.arr[gl_posting_desc.len] = '\0';


      EXEC SQL OPEN BL_BLNG_GRP_CUR;

      if (OERROR)
         err_mesg("OPEN failed on cursor BL_BLNG_GRP_CUR",0,"");

      billing_group_desc.arr[0]     = '\0';
      billing_group_desc.len        = 0;

      EXEC SQL FETCH BL_BLNG_GRP_CUR
                INTO :billing_group_desc;

      billing_group_desc.arr[billing_group_desc.len] = '\0';

      
      patient_desc.arr[0] = '\0';
      patient_desc.len    = 0;

      EXEC SQL OPEN MP_PATIENT_MAST_CUR;

      if (OERROR)
         err_mesg("OPEN failed on cursor MP_PATIENT_MAST_CUR",0,"");

      EXEC SQL FETCH MP_PATIENT_MAST_CUR
                INTO :patient_desc;
 
      if (OERROR)
         err_mesg("OPEN failed on cursor MP_PATIENT_MAST_CUR",0,"");

      patient_desc.arr[patient_desc.len] = '\0';
}

sql_connect()
{
  EXEC SQL CONNECT :uid_pwd;

  if (sqlca.sqlcode < 0)
      return(-1);
  return(0);
}

open_files()
{
 char err_stmt[70];

   if ((fp = fopen(filename,"w")) == NULL)
   {
        sprintf(err_stmt,"Error while opening File %s","arbpgdoc.lis");
        err_mesg(err_stmt,0,"");
        proc_exit();
   }

   print_title();
   print_head();

}

print_title()
{
  void print_hospital_name();
  
  /*
  fprintf(fp,
"\n\nMDL : AR                                         %-30s                                      %-15s\n",
      hosp_name.arr,date_time.arr);
  */
   print_hospital_name(133,"AR",hosp_name.arr,date_time.arr);

  fprintf(fp,"OPR : %-10s\n", user_id.arr);
  fprintf(fp,
"REP : %-8s                                       %-28s                                         PAGE : %4d\n",
    g_pgm_id,"PURGED DOCUMENTS REPORT",++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
//fprintf(fp,"VER : 1.10.01\n");
  fflush(fp);

fprintf(fp,"\n\n\n\n        INPUT PARAMETERS :\n        ----------------\n\n");
fprintf(fp,"                CUST CODE      FROM : %-10s\n",nd_fm_cust_code.arr);
fprintf(fp,"                                 TO : %-10s\n\n",nd_to_cust_code.arr);
fprintf(fp,"                GROUP CODE     FROM : %-10s\n",
                      nd_fm_group_code.arr);
fprintf(fp,"                                 TO : %-10s\n\n",
                      nd_to_group_code.arr);
fprintf(fp,"                PRINT ONLY          : %s\n\n",nd_print_flg.arr);

 fflush(fp);
}
   
print_head() 
{  
  void print_hospital_name();
  /*
  fprintf(fp,
"\fMDL : AR                                         %-30s                                      %-15s\n",
      hosp_name.arr,date_time.arr);
  */

  fprintf(fp,"\f");
  print_hospital_name(133,"AR",hosp_name.arr,date_time.arr);

  fprintf(fp,"OPR : %-10s\n", user_id.arr);
  fprintf(fp,
"REP : %-8s                                       %-28s                                         PAGE : %4d\n",
    g_pgm_id,"PURGED DOCUMENTS REPORT",++pctr);
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
fprintf(fp,
"DOC TYPE & NO   DOC DATE  CUST CODE & NAME                                TERMS PERIOD     AMT. GROSS       AMT. DISC        AMT. PAY\n");
fprintf(fp,
"       ST.DUE DT. DUE DATE   SETTL. DATE &   %% CUSTOMER REF               TERMS DESC\n");
fprintf(fp,
"-------------------------------------------------------------------------------------------------------------------------------------\n");
  fflush(fp);
  lctr = 8;
}

print_end()
{
fprintf(fp,
"\n\n\n                                                      **   END  OF  REPORT   ** \n\n");
  fflush(fp);
  fclose(fp);
}

fetch_ar_param()
{
   month_paid_inv = 0;

   EXEC SQL SELECT MONTHS_PAID_INV_PURGE
              INTO :month_paid_inv
              FROM AR_PARAMETER;
  
   if (OERROR)
         err_mesg("SELECT failed on table AR_PARAMETER",0,"");

}

fetch_desc()
{
   hosp_name.arr[0]      = '\0';
   date_time.arr[0]      = '\0';
   user_id.arr[0]        = '\0';

   hosp_name.len      = 0; 
   date_time.len      = 0;
   user_id.len        = 0;

   EXEC SQL SELECT ACCOUNTING_NAME, TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI'),
                   USER,NO_OF_DECIMAL
              INTO :hosp_name, :date_time, :user_id,:nd_no_of_decimal
              FROM SY_ACC_ENTITY
			 WHERE ACC_ENTITY_ID = :nd_facility_id;

    EXEC SQL EXECUTE 
            BEGIN
	         GET_INSTALLED_MODULES(:p_operational_modules);
            END;
    END-EXEC; 

	EXEC SQL SELECT INSTR(:p_operational_modules , 'DF')
	         into   :df_instal_flag 
			from dual ;

 
   if (OERROR)
         err_mesg("SELECT failed on table SY_ACC_ENTITY",0,"");

   hosp_name.arr[hosp_name.len]           = '\0';
   date_time.arr[date_time.len]           = '\0';
   user_id.arr[user_id.len]               = '\0';
}

open_customer()
{
     EXEC SQL OPEN AR_CUSTOMER_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor AR_CUSTOMER_CUR",0,"");

}

fetch_customer()
{
   ar_customer_cust_code.arr[0]          ='\0';
   ar_customer_patient_flag.arr[0]       = '\0';
   ar_customer_misc_cflag.arr[0] = '\0';
   ar_customer_cust_long_name.arr[0]     = '\0';

   ar_customer_cust_code.len             = 0;
   ar_customer_patient_flag.len          = 0;
   ar_customer_misc_cflag.len    = 0;
   ar_customer_cust_long_name.len        = 0;

   EXEC SQL FETCH AR_CUSTOMER_CUR
             INTO :ar_customer_cust_code,
                  :ar_customer_patient_flag,
                  :ar_customer_misc_cflag,
                  :ar_customer_cust_long_name;

  if (OERROR)
         err_mesg("FETCH failed on cursor AR_CUSTOMER_CUR",0,"");

ar_customer_cust_code.arr[ar_customer_cust_code.len]                   = '\0';
ar_customer_patient_flag.arr[ar_customer_patient_flag.len]             = '\0';
ar_customer_misc_cflag.arr[ar_customer_misc_cflag.len] = '\0';
ar_customer_cust_long_name.arr[ar_customer_cust_long_name.len]         = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

open_pending_doc()
{
     EXEC SQL OPEN AR_PENDING_DOC_CUR;

     if (OERROR)
         err_mesg("OPEN failed on cursor AR_PENDING_DOC_CUR",0,"");

}

fetch_pending_doc()
{
   ar_pend_doc_type_code.arr[0]             = '\0';
   ar_pend_doc_num.arr[0]                   = '\0';
   ar_pend_doc_date.arr[0]                  = '\0';
   ar_pend_base_date.arr[0]                 = '\0';
   ar_pend_pmnt_terms_code.arr[0]           = '\0';
   ar_pend_due_date.arr[0]                  = '\0';
   ar_pend_settlement_date.arr[0]           = '\0';
   ar_pend_settlement_perc.arr[0]           = '\0';
   ar_pend_cust_ref.arr[0]                  = '\0';
   ar_pend_main_acc1_code.arr[0]            = '\0';
   ar_pend_main_acc2_code.arr[0]            = '\0';
   ar_pend_dept_code.arr[0]                 = '\0';
   ar_pend_product_group_code.arr[0]        = '\0';
   ar_pend_product_line_code.arr[0]         = '\0';
   ar_pend_sub_group_code.arr[0]      = '\0';
   ar_pend_sub_line_code.arr[0]       = '\0';
   ar_pend_narration.arr[0]                 = '\0';
   ar_pend_billing_group.arr[0]             = '\0';
   ar_pend_patient_id.arr[0]                = '\0';
   ar_pend_bill_doc_type_code.arr[0]        = '\0';
   ar_pend_bill_num.arr[0]                  = '\0';
   ar_pend_bill_date.arr[0]                 = '\0';
   ar_pend_misc_clong_name.arr[0]       = '\0';
   ar_pend_misc_cshort_name.arr[0]      = '\0';
   ar_pend_misc_cadd1_desc.arr[0]       = '\0';
   ar_pend_misc_cadd2_desc.arr[0]       = '\0';
   ar_pend_misc_cadd3_desc.arr[0]       = '\0';
   ar_pend_misc_czip_desc.arr[0]        = '\0';
   ar_pend_rowid.arr[0]                     = '\0';

   ar_pend_doc_type_code.len                = 0;
   ar_pend_doc_num.len                      = 0;
   ar_pend_doc_date.len                     = 0;
   ar_pend_base_date.len                    = 0;
   ar_pend_pmnt_terms_code.len              = 0;
   ar_pend_due_date.len                     = 0;
   ar_pend_settlement_date.len              = 0;
   ar_pend_settlement_perc.len              = 0;
   ar_pend_cust_ref.len                     = 0;
   ar_pend_main_acc1_code.len               = 0;
   ar_pend_main_acc2_code.len               = 0;
   ar_pend_dept_code.len                    = 0;
   ar_pend_product_group_code.len           = 0;
   ar_pend_product_line_code.len            = 0;
   ar_pend_sub_group_code.len         = 0;
   ar_pend_sub_line_code.len          = 0;
   ar_pend_narration.len                    = 0;
   ar_pend_billing_group.len                = 0;
   ar_pend_patient_id.len                   = 0;
   ar_pend_bill_doc_type_code.len           = 0;
   ar_pend_bill_num.len                     = 0;
   ar_pend_bill_date.len                    = 0;
   ar_pend_misc_clong_name.len          = 0;
   ar_pend_misc_cshort_name.len         = 0;
   ar_pend_misc_cadd1_desc.len          = 0;
   ar_pend_misc_cadd2_desc.len          = 0;
   ar_pend_misc_cadd3_desc.len          = 0;
   ar_pend_misc_czip_desc.len           = 0;
   ar_pend_rowid.len                        = 0;

   ar_pend_gross_amt                        = 0;
   ar_pend_payable_amt                      = 0;
   ar_pend_discount_amt                     = 0;
   ar_pend_doctor_fee_amt                   = 0;

   EXEC SQL FETCH AR_PENDING_DOC_CUR
             INTO :ar_pend_doc_type_code,
                  :ar_pend_doc_num,
                  :ar_pend_doc_date,
                  :ar_pend_base_date,
                  :ar_pend_pmnt_terms_code,
                  :ar_pend_gross_amt,
                  :ar_pend_discount_amt,
                  :ar_pend_payable_amt,
                  :ar_pend_due_date,
                  :ar_pend_settlement_date,
                  :ar_pend_settlement_perc,
                  :ar_pend_cust_ref,
                  :ar_pend_main_acc1_code,
                  :ar_pend_main_acc2_code,
                  :ar_pend_dept_code,
                  :ar_pend_product_group_code,
                  :ar_pend_product_line_code,
                  :ar_pend_sub_group_code,
                  :ar_pend_sub_line_code,
                  :ar_pend_narration,
                  :ar_pend_billing_group,
                  :ar_pend_doctor_fee_amt,
                  :ar_pend_patient_id,
                  :ar_pend_bill_doc_type_code,
                  :ar_pend_bill_num,
                  :ar_pend_bill_date,
                  :ar_pend_misc_clong_name,
                  :ar_pend_misc_cshort_name,
                  :ar_pend_misc_cadd1_desc,
                  :ar_pend_misc_cadd2_desc,
                  :ar_pend_misc_cadd3_desc,
                  :ar_pend_misc_czip_desc,
                  :ar_pend_post_month,
                  :ar_pend_post_year,
                  :ar_pend_rowid;

if (OERROR)
         err_mesg("FETCH failed on cursor AR_PENDING_DOC",0,"");

ar_pend_doc_type_code.arr[ar_pend_doc_type_code.len]                     = '\0';
ar_pend_doc_num.arr[ar_pend_doc_num.len]                                 = '\0';
ar_pend_doc_date.arr[ar_pend_doc_date.len]                               = '\0';
ar_pend_base_date.arr[ar_pend_base_date.len]                             = '\0';
ar_pend_pmnt_terms_code.arr[ar_pend_pmnt_terms_code.len]                 = '\0';
ar_pend_due_date.arr[ar_pend_due_date.len]                               = '\0';
ar_pend_settlement_date.arr[ar_pend_settlement_date.len]                 = '\0';
ar_pend_settlement_perc.arr[ar_pend_settlement_perc.len]                 = '\0';
ar_pend_cust_ref.arr[ar_pend_cust_ref.len]                               = '\0';
ar_pend_main_acc1_code.arr[ar_pend_main_acc1_code.len]                   = '\0';
ar_pend_main_acc2_code.arr[ar_pend_main_acc2_code.len]                   = '\0';
ar_pend_dept_code.arr[ar_pend_dept_code.len]                             = '\0';
ar_pend_product_group_code.arr[ar_pend_product_group_code.len]           = '\0';
ar_pend_product_line_code.arr[ar_pend_product_line_code.len]             = '\0';
ar_pend_sub_group_code.arr[ar_pend_sub_group_code.len]       = '\0';
ar_pend_sub_line_code.arr[ar_pend_sub_line_code.len]         = '\0';
ar_pend_narration.arr[ar_pend_narration.len]                             = '\0';
ar_pend_billing_group.arr[ar_pend_billing_group.len]                     = '\0';
ar_pend_patient_id.arr[ar_pend_patient_id.len]                           = '\0';
ar_pend_bill_doc_type_code.arr[ar_pend_bill_doc_type_code.len]           = '\0';
ar_pend_bill_num.arr[ar_pend_bill_num.len]                               = '\0';
ar_pend_bill_date.arr[ar_pend_bill_date.len]                             = '\0';
ar_pend_misc_clong_name.arr[ar_pend_misc_clong_name.len]         = '\0';
ar_pend_misc_cshort_name.arr[ar_pend_misc_cshort_name.len]       = '\0';
ar_pend_misc_cadd1_desc.arr[ar_pend_misc_cadd1_desc.len]         = '\0';
ar_pend_misc_cadd2_desc.arr[ar_pend_misc_cadd2_desc.len]         = '\0';
ar_pend_misc_cadd3_desc.arr[ar_pend_misc_cadd3_desc.len]         = '\0';
ar_pend_misc_czip_desc.arr[ar_pend_misc_czip_desc.len]           = '\0';
ar_pend_rowid.arr[ar_pend_rowid.len]                                     = '\0';

   if (LAST_ROW) return (0);
   else return (1);
}

print_details()
{
   if (lctr > 56) print_head();

   fprintf(fp,"%-6s %8s %-10s %-8s %-40s %-2s  %02d/%02d ",
           ar_pend_doc_type_code.arr,
           ar_pend_doc_num.arr,
           ar_pend_doc_date.arr,
           ar_customer_cust_code.arr,
           ar_customer_cust_long_name.arr,
           ar_pend_pmnt_terms_code.arr,
           ar_pend_post_month,
           ar_pend_post_year);
            
           print_formated(ar_pend_gross_amt);
           fprintf(fp,"  ");
           print_formated(ar_pend_discount_amt);
           fprintf(fp,"  ");
           print_formated(ar_pend_payable_amt);
           fprintf(fp,"\n");


   fprintf(fp,"       %-10s %-10s %-10s %6s %-15s            %-30s\n",
            ar_pend_base_date.arr,
            ar_pend_due_date.arr,
            ar_pend_settlement_date.arr,
            ar_pend_settlement_perc.arr,
            ar_pend_cust_ref.arr,
            pmnt_terms_desc.arr);
  
    fprintf(fp,"    POSTING A/C   : %-6s-%-4s %-6s %-3s-%-4s %-3s-%-8s\n",
             ar_pend_main_acc1_code.arr,
             ar_pend_main_acc2_code.arr,
             ar_pend_dept_code.arr,
             ar_pend_product_group_code.arr,
             ar_pend_product_line_code.arr,
             ar_pend_sub_group_code.arr,
             ar_pend_sub_line_code.arr);
    fprintf(fp,"                    %-s\n",gl_posting_desc.arr);
    fprintf(fp,"    NARRATION     : %-50s\n",ar_pend_narration.arr);
    lctr+=5;

    if (ar_customer_patient_flag.arr[0]  == 'Y')
    {
        if (lctr > 56) print_head();

        fprintf(fp,"    BILLING GROUP : %-2s %-15s                  ",
                ar_pend_billing_group.arr,billing_group_desc.arr);
        fprintf(fp,"     BILL DOC TYPE, NO & DATE : %-6s %8s %-10s\n",
                   ar_pend_bill_doc_type_code.arr,
                   ar_pend_bill_num.arr,
                   ar_pend_bill_date.arr);
        fprintf(fp,"    PATIENT ID    : %-10s %-30s\n",
                   ar_pend_patient_id.arr,patient_desc.arr);
        lctr+=2;
        fflush(fp);
    }

    if (ar_customer_misc_cflag.arr[0] == 'Y')
    {
         if (lctr > 56) print_head();

         fprintf(fp,"    MISC CUSTOMER : %-40s %-15s\n",
                        ar_pend_misc_clong_name.arr,
                        ar_pend_misc_cshort_name.arr);
         fprintf(fp,"                    %-30s           %-30s\n",
                        ar_pend_misc_cadd1_desc.arr,
                        ar_pend_misc_cadd2_desc.arr);
         fprintf(fp,"                    %-30s           %-30s\n",
                        ar_pend_misc_cadd3_desc.arr,
                        ar_pend_misc_czip_desc.arr);
         lctr+=3;
         fflush(fp);
     
     }
     fprintf(fp,"\n");
     lctr ++;
     fflush(fp);
}

delete_pending_doc()
{
    EXEC SQL DELETE AR_PENDING_DOC
              WHERE ROWID = :ar_pend_rowid;

    if (OERROR)
         err_mesg("DELETE failed on table AR_PENDING_DOC",0,"");

}

delete_cust_trn()
{
   EXEC SQL DELETE FROM AR_CUST_TRN
             WHERE CUST_CODE = :ar_customer_cust_code
               AND ORG_DOC_TYPE_CODE = :ar_pend_doc_type_code
               AND ORG_DOC_NUM       = :ar_pend_doc_num;

   if (OERROR)
         err_mesg("DELETE failed on table AR_CUST_TRN",0,"");

}

delete_patient_dtls()
{
   EXEC SQL DELETE FROM AR_PATIENT_DTLS
             WHERE DOC_TYPE_CODE = :ar_pend_doc_type_code
               AND DOC_NUM       = :ar_pend_doc_num;

   if (OERROR)
         err_mesg("DELETE failed on table AR_PATIENT_DTLS",0,"");

}

print_formated(loc_amount)
double loc_amount;
{
   char out_str[30],out_str1[30];

   if (nd_no_of_decimal==3)
      sprintf(out_str,"%11.3f",loc_amount);
   else
      sprintf(out_str,"%11.2f",loc_amount);

	  format_amt(out_str,nd_no_of_decimal);

   if (loc_amount == 0)
      fprintf(fp,"%-14s"," ");
   else if (loc_amount > 0)
   {
      //sprintf(out_str,"%11.2f",loc_amount);
      //ltrim(out_str);	  
	  //put_comma(out_str);

 	  format_amt(out_str,nd_no_of_decimal);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14s",out_str1);
   }
   else
   {
      //sprintf(out_str,"%11.2f",-loc_amount);
      //ltrim(out_str);	  
	  //put_comma(out_str);
	  format_amt(out_str,nd_no_of_decimal);
      sprintf(out_str1,"%14s",out_str);
      fprintf(fp,"%-14sCR",out_str1);      
   }
}

void print_hospital_name(nd_rep_width    ,
                         nd_mod_id       ,
                         nd_hospital_name,
                         nd_date          )
int  nd_rep_width;
char nd_mod_id[3];
char nd_hospital_name[31];
char nd_date[17];
{
	int i = 0 , pos = 0 , len = 0, len_date = 0 , pos_date = 0,len1=0;

    /*Find the length of Hospital Name*/
    for(len = 0; nd_hospital_name[len] != '\0'; len++);

    /*Find the length of Date*/
    for(len_date = 0; nd_date[len_date] != '\0'; len_date++);

	len1 = (len % 2);

	if (len1==0)
	   len1=9;
    else
	   len1=10;

    len = len / 2;

    pos = (nd_rep_width / 2	) - len;

	pos_date = nd_rep_width - len_date;

	fprintf(fp,"MDL : %2s",nd_mod_id);

	for(i = 9; i < pos ; fprintf(fp," "),i++);

	fprintf(fp,"%s",nd_hospital_name);

	for(i = i + (len * 2) ; i < pos_date + 1; fprintf(fp," "),i++);

    fprintf(fp,"%s\n",nd_date);
}


ltrim(l_str)
char *l_str;
{
   char *ptr;
   ptr = l_str;
   while (*ptr== ' ') ptr++;
   for(;*ptr!='\0';ptr++,l_str++)
    *l_str = *ptr;
   *l_str = '\0';
}


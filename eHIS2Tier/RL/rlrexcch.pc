/****************************OCS MEDICOM ver 1.0*****************************
*  File	: rlrexcch.pc
   Author : Srikanth
   Date Created  : 25/07/2004
   Last Modified : 25/07/2004
   
*  Ver 1.10.01  
   
*  Purpose : To generate a report for Request Statistics of Test Codes

*  Input Parameters :  
              Command line inputs
	
		      1. Usr_id/Password
              2. Session id
		      3. Program Date
                 Parameters from SY_PROG_PARAM table 
              4. Preferred range of Section Codes.
  
*  Table Accessed : RL_REQUEST_HEADER,RL_REQUEST_DETAIL,
					RL_SECTION_CODE, RL_TEST_CODE,
					OP_CLINIC, IP_WARD, RL_REFERRAL
		    

*  Output File : RLREXCCH.lis
 ****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <rl.h>

#define MAX_LINES 55
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 1.10.01\n"
#define ESC 0x1B
#define REP_WIDTH 78 // added for globalisation

EXEC SQL BEGIN DECLARE SECTION;
/* INPUT PARAMETERS TO MAIN */

	VARCHAR  
	    nd_operating_facility_id   [3],
	    uid_pwd		               [91],
		nd_user_id                 [21],
		nd_session_id              [16],
		nd_pgm_date	               [20], 
		nd_user	                   [15],
        nd_file_no                 [15],
		nd_file_name			   [150],
		d_version_no			   [20],
		d_version  			       [20],
		d_added_by_id			   [31];
/****************************/
/* FIELDS from CURSOR SECTION CURSOR */
	varchar d_section_code	[2] , 
		    d_section_name  [41] ;

	int specimen_prefix = 0;

/* FIELDS from CURSOR TEST CURSOR */
	varchar d_test_code [11] ,
			rl_ordered_facility_id	[3],
		    d_test_name [41],
			d_reflex_type [3];


/* FIELDS for FETCHING SOURCE CURSOR */
	varchar d_source_code [11] ,			
			d_source_name [100],  /*Modified By Manoj S for ML-MMOH-CRF-0752.6*/
			d_source_type  [2] ;

/* FIELDS for GET TEST_GROUP DETAILS */
	long count_test ;
	long total_records;
	
/* Fields from table RL_SECTION_CODE */
	 varchar      d_printer_name            [16];

/* Fields from table EPISODE */
	 varchar      d_episode_type[3],
	              nd_episode_type[2];

	  int         d_episode_no;            

/* Fields from TFR_VISIT_NO */	 
	  int         d_tfr_visit_no, d_line_no;

/* Fields from PATIENT_ID */
     varchar	  d_patient_id[21],
	              d_customer_code[21],
	              nd_patient_id[21],
				  patient_name[61];
				  	
/* Specimen number as character */
     varchar	txt_specimen_no[15];

/* Fields for passing parameter to BL Procedure */

	varchar		p_charged_yn	   [2],		 		 		 
				p_status           [2],      
				p_err_code         [3],      
				p_sys_message_id   [9],          
				p_error_text       [200];      

double p_charged_gross_amt=0.0,p_charged_disc_amt=0.0,p_charged_net_amt=0.0;

/* Fields from table SY_ACC_ENTITY*/
	varchar 	//d_acc_entity_name        [61],
				d_acc_entity_name        [300],
				d_user                   [21],
				d_sysdate                [30],
				d_sysdate1                [30]; //added for globalisation
		 
 /*INPUT PARAMETERS FROM SY_PROG_PARAM TABLE */
	varchar nd_fm_section_code			[2],
			nd_to_section_code			[2],
			nd_type						[2],
			nd_fm_source_type			[5],
			nd_to_source_type			[5],
			nd_print_yn					[6],
			er_msg					  [200],
			cur_date				   [13],
			nd_incl_reflex_yn           [2];

	int 	nd_fm_month ,
			nd_fm_year ,
			nd_to_month ,
			nd_to_year ,
			er_msg_type=0;

	int		m_month,
			m_year,
			a_month,
			a_year,
			t_month,
			t_year;

/* FIELDS from DECLARING VARIABLES(COLUMN HEADINGS) IN DCLR_MONTH_VARIABLES()*/
	varchar x_date		[21] ,
			v_date		[30],
			v_date1		[30], //added for globalisation
			w_date		[30],
			w_date1		[30], //added for globalisation
			q_date		[21];

	varchar h_head		[8];

	varchar d_spec_date [12],
			d_spec_date1 [12];
	/***************added for globalisation*************************/
	varchar		l_translated_value		 [500],
	language_id			[5];

	int i;
	/***************added for globalisation*************************/
	int month[14];
	int year[14];
    long mnth_yr[14]; 
	int j_month, j_year;

	int  l_tab_exists ;

	
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>
 
char string_var[100] ;


/************************************************/
char string_var[100],tmpbuf[100];
int line_no = 0;
int page_no = 0 ;
long total_count = 0;
long g_total_count = 0;
int mon_incr = 0;
int tot_incr = 0;
char local_legend[35][500];//added for globalisation
char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1];

FILE *f1;

void proc_main(argc, argv)
int argc;
char *argv[];
{
   void get_params();
   void get_header_dtls();
   void gen_file_name();
   void do_report();
   void do_footer();     
   
   if(argc < 4) {
     disp_message(ORA_MESG,"Usage rlrexcch uid/passwd session_id pgm_date\n");
     proc_exit();
   }

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   strcpy(OUTPUT_FILE_NAME, argv[5]);

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   if(OERROR)
      disp_message(ORA_MESG,"Failed to connect using : \n");

#ifdef DEBUG
    printf("Connected to ORACLE as user: %s \n", uid_pwd.arr);
#endif
    
	set_meduser_role();
	get_params();
/*********************** added for globalisation ******************************/
    strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
	get_legend_value(33); 
/*********************** added for globalisation ******************************/
	get_header_dtls();
	gen_file_name(); 
	do_report();

	do_footer();  
    fprintf(f1,"%cE",ESC);	
	fclose(f1);

	return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();	
	
}	

void do_report()
{
	void dclr_source_cur();
	void close_test_cur();
	void close_test_cur_no_reflex();
	void chk_break(int lin_no);

	void dclr_test_cur();
	void dclr_test_cur_no_reflex();

	void get_source_name();
	void get_section_name();
	void get_test_name();	

	void print_rep_header();
	void print_page_header();	
	void print_cont_header();	

	void print_source_col_heading();
	

	char temp_source_name[11];
	char temp_episode_name[18];
	char temp_test_name[11];
	char flag_1 = 'N';
	char flag_2 = 'N';
	char flag_3 = 'N';
	char f_section = 'N';
	char f_source = 'N';
	char first_time = 'Y';

	int i =0,status=0;

	strcpy(temp_source_name, " ");
	strcpy(temp_episode_name, " ");
	strcpy(temp_test_name, " ");

	line_no = 0;
    page_no = 0;

    if (strcmp(nd_incl_reflex_yn.arr, "Y") == 0)
	{
		dclr_test_cur();
	}
	else
	{
	 	dclr_test_cur_no_reflex();
	}

	print_rep_header();
    while(fetch_test_cur())
	{

	  get_source_name();
	  get_test_name();	  
      fetch_patient_desc();
	 		  
	 strcpy(temp_test_name, " ");
		  if (flag_1 == 'N')
		  {
			 flag_1 = 'Y';			 
			 print_page_header();
			 print_cont_header();			 			 
		  }
	  status = get_rev_details();	      

	if (p_charged_yn.arr[0] == 'N')
	{
	  sprintf(temp_episode_name,"%-12d/%04d",d_episode_no,d_tfr_visit_no);	  	
      fprintf(f1,"%-20s%-60s \n",d_patient_id.arr,patient_name.arr);			  	  	  
	  fprintf(f1,"%-20s%-5s %-20.20s    %-15s %12s\n",temp_episode_name,d_source_code.arr,d_source_name.arr,txt_specimen_no.arr,d_spec_date1.arr);
	  
	  if ( strcmp(d_reflex_type.arr,"X") != 0)
		fprintf(f1,"%-11s%-4s%-37.37s%26s \n",d_test_code.arr,"[R]",d_test_name.arr,d_added_by_id.arr);
	  else
		fprintf(f1,"%-15s%-37.37s%26s \n",d_test_code.arr,d_test_name.arr,d_added_by_id.arr);

	  fprintf(f1,"\n");			  	  
	  line_no = line_no+4;
	  chk_break(4);
     }
	}
		        
	if (strcmp(nd_incl_reflex_yn.arr,"Y") == 0)
		close_test_cur();
	else
		close_test_cur_no_reflex();

}

/********* DECLARE TEST_CURSOR **********/
void dclr_test_cur()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
 
	EXEC SQL DECLARE TEST_CURSOR CURSOR FOR
			SELECT to_char(A.specimen_no),A.source_type,
				   // DECODE(A.episode_type, 'R', NVL(A.customer_code, A.patient_id), NVL(A.patient_id,'')),
				   NVL(A.patient_id,''),
				   NVL(A.customer_code, ''),
				   A.source_code,  B.test_code,
				   TO_CHAR(A.spec_regd_date_time, 'DD/MM/YYYY'),
				   A.episode_type, A.episode_no, A.tfr_visit_no,
				   NVL(B.reflex_type, 'X') ,B.line_no,A.added_by_id
			FROM RL_REQUEST_HEADER A, RL_REQUEST_DETAIL B
			WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND B.OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND A.source_type = DECODE(:nd_type, 'A', A.source_type, 'R', 'E','H','E',:nd_type)
			AND A.source_code BETWEEN DECODE(:nd_fm_source_type,'!!!!',A.source_code,:nd_fm_source_type)
			AND DECODE(:nd_to_source_type,'~~~~',A.source_code,:nd_to_source_type)
			AND A.spec_regd_date_time >= TO_DATE(:v_date, 'DD/MM/YYYYhh24:mi:ss')			
			AND A.spec_regd_date_time < TO_DATE(:w_date,'DD/MM/YYYYhh24:mi:ss')
			AND A.specimen_no = B.specimen_no 			
			AND NVL(A.cancelled_yn,'N') != 'Y'
			AND NVL(B.cancelled_yn,'N') != 'Y'
			ORDER BY A.specimen_no,A.section_code, A.source_type, 
					 A.source_code, B.test_code;					 		

	 EXEC SQL OPEN test_cursor;
	 
#ifdef DEBUG
    printf("leaving dclr_test_cur()\n");
    fflush(stdout);
#endif

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_test_cur() occured....\n");
   proc_exit();	
 }

/********* DECLARE TEST_CURSOR EXCLUDING REFLEX TEST **********/
void dclr_test_cur_no_reflex()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
 
	EXEC SQL DECLARE TEST_CURSOR_NO_REFLEX CURSOR FOR
			SELECT to_char(A.specimen_no),A.source_type,
				   // DECODE(A.episode_type, 'R', NVL(A.customer_code, A.patient_id), NVL(A.patient_id,'')),	 
   				   NVL(A.patient_id,''),
				   NVL(A.customer_code, ''),
				   A.source_code,  B.test_code, 
				   TO_CHAR(A.spec_regd_date_time, 'DD/MM/YYYY'),
				   A.episode_type, A.episode_no, A.tfr_visit_no,
				   NVL(B.reflex_type, 'X'), B.line_no,A.added_by_id
			FROM RL_REQUEST_HEADER A, RL_REQUEST_DETAIL B
			WHERE A.OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND B.OPERATING_FACILITY_ID = :nd_operating_facility_id
			AND A.source_type = DECODE(:nd_type, 'A', A.source_type, 'R', 'E','H','E',:nd_type)
			AND A.source_code BETWEEN DECODE(:nd_fm_source_type,'!!!!',A.source_code,:nd_fm_source_type)
			AND DECODE(:nd_to_source_type,'~~~~',A.source_code,:nd_to_source_type)
			AND A.spec_regd_date_time >= TO_DATE(:v_date, 'DD/MM/YYYYhh24:mi:ss')			
			AND A.spec_regd_date_time < TO_DATE(:w_date,'DD/MM/YYYYhh24:mi:ss')
			AND A.specimen_no = B.specimen_no
			AND NVL(A.cancelled_yn,'N') != 'Y'
			AND NVL(B.cancelled_yn,'N') != 'Y'
			AND B.REFLEX_TYPE IS NULL
			ORDER BY A.specimen_no,A.section_code, A.source_type,
					 A.source_code, B.test_code;

	 EXEC SQL OPEN test_cursor_no_reflex;
	 
#ifdef DEBUG
    printf("leaving dclr_test_cur_no_reflex()\n");
    fflush(stdout);
#endif

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_test_cur_no_reflex() occured....\n");
   proc_exit();	
 }

void close_test_cur()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL CLOSE test_cursor;
#ifdef DEBUG
    printf("leaving close_test_cur()\n");
    fflush(stdout);
#endif

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at close_test_cur() occured....\n");
   proc_exit();	
 }

void close_test_cur_no_reflex()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL CLOSE test_cursor_no_reflex;
#ifdef DEBUG
    printf("leaving close_test_cur_no_reflex()\n");
    fflush(stdout);
#endif

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at close_test_cur_no_reflex() occured....\n");
   proc_exit();	
 }

 /*************** FETCH TEST CURSOR ***************/
int fetch_test_cur()
{
  d_test_code.arr[0]                = '\0';
  d_section_code.arr[0]				= '\0';
  d_source_type.arr[0]				= '\0';
  d_source_code.arr[0]				= '\0';
  d_spec_date.arr[0]				= '\0';
  d_episode_type.arr[0]				= '\0';
  d_patient_id.arr[0]			    = '\0';
  txt_specimen_no.arr[0]		    = '\0';	
  d_added_by_id.arr[0]				= '\0';
  d_reflex_type.arr[0]              = '\0';
  d_customer_code.arr[0]            = '\0';


  d_test_code.len                   = 0;
  d_section_code.len				= 0;
  d_source_type.len					= 0;
  d_source_code.len					= 0;
  d_spec_date.len					= 0;
  d_episode_type.len				= 0;
  d_patient_id.len					= 0;
  txt_specimen_no.len				= 0;
  d_added_by_id.len					= 0;
  d_reflex_type.len					= 0;
  d_episode_no                      = 0;
  d_tfr_visit_no                    = 0;
  d_customer_code.len               = 0;



  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  
   if (strcmp(nd_incl_reflex_yn.arr,"Y") == 0)
   {

	EXEC SQL FETCH TEST_CURSOR INTO
		:txt_specimen_no, :d_source_type,:d_patient_id,:d_customer_code,
		:d_source_code, :d_test_code,  :d_spec_date, 
		:d_episode_type,:d_episode_no, :d_tfr_visit_no, 
		:d_reflex_type, :d_line_no, d_added_by_id; 
   }
   else
   {
	EXEC SQL FETCH TEST_CURSOR_NO_REFLEX INTO
		:txt_specimen_no, :d_source_type,:d_patient_id,:d_customer_code,
		:d_source_code, :d_test_code,  :d_spec_date, 
		:d_episode_type,:d_episode_no, :d_tfr_visit_no, 
		:d_reflex_type, :d_line_no,d_added_by_id;
   }
  
				
#ifdef DEBUG
         printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
#endif


  if (NODATAFOUND)
    return 0;


  d_test_code.arr[d_test_code .len]			= '\0';
  d_section_code.arr[d_section_code.len]	= '\0';
  d_source_code.arr[d_source_code.len]		= '\0';
  d_source_type.arr[d_source_type.len]		= '\0';
  d_spec_date.arr[d_spec_date.len]			= '\0';
  txt_specimen_no.arr[txt_specimen_no.len]  = '\0';
  d_episode_type.arr[d_episode_type.len]	= '\0';
  d_patient_id.arr[d_patient_id.len]		= '\0';
  d_added_by_id.arr[d_added_by_id.len]		= '\0';
  d_reflex_type.arr[d_reflex_type.len]      = '\0';
  d_customer_code.arr[d_customer_code.len]  = '\0';

        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_spec_date,'DD/MM/YYYY'), :language_id , t_date);
				:d_spec_date1 := to_char(t_date,'DD/MM/YYYY');
				END;
			END-EXEC;


#ifdef DEBUG
   printf("********* Details from RL_WORKLIST_FMT_DTL**************\n");
   printf(" d_test_code= %s\n", d_test_code.arr);
   printf(" d_test_name= %s\n", d_test_name.arr);
#endif

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_test_cursor() occured....\n");
   proc_exit();

}

/********* GET SOURCE_NAME  **********/
  void get_source_name()
  {
    d_source_name.arr[0]	= '\0';
	d_source_name.len		= 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	if ( strcmp(d_source_type.arr,"C") == 0)
	{
   				EXEC SQL SELECT LONG_DESC 
				INTO :d_source_name
				FROM OP_CLINIC_LANG_VW 
				WHERE FACILITY_ID = :nd_operating_facility_id
				AND clinic_code = :d_source_code
				AND LANGUAGE_ID = :language_id;       	
	}
	else
	{
		if (strcmp(d_source_type.arr,"W") == 0) 
		{
		
				EXEC SQL 
				/*SELECT LONG_DESC
				INTO :d_source_name
				FROM IP_WARD 
				WHERE FACILITY_ID = :nd_operating_facility_id
				AND ward_code = :d_source_code;
				*/
				SELECT LONG_DESC
				INTO :d_source_name
				FROM IP_NURSING_UNIT_LANG_VW 
				WHERE FACILITY_ID = :nd_operating_facility_id
				AND NURSING_UNIT_code = :d_source_code
				AND LANGUAGE_ID = :language_id;
		}
		else
		{
			if ( (strcmp(d_source_type.arr,"R") == 0 ) || (strcmp(d_source_type.arr,"E") == 0 ) )
			{
					EXEC SQL SELECT LONG_DESC
					INTO :d_source_name
					FROM RL_REFERRAL_LANG_VW 
					WHERE referral_code = :d_source_code
					AND LANGUAGE_ID = :language_id;
			}
		}
	}

#ifdef DEBUG
    printf("leaving dclr_source_cur()\n");
    fflush(stdout);
#endif

	d_source_name.arr[d_source_name.len]	= '\0';


  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_source_cur() occured....\n");
   proc_exit();	
  }


/********* GET SECTION_NAME  **********/
  void get_section_name()
  {
    d_section_name.arr[0]	= '\0';
	d_section_name.len		= 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL SELECT long_name
	INTO :d_section_name
	FROM RL_SECTION_CODE
	WHERE section_code = :d_section_code;

#ifdef DEBUG
    printf("leaving dclr_section_cur()\n");
    fflush(stdout);
#endif

	d_section_name.arr[d_section_name.len]	= '\0';

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_section_name() occured....\n");
   proc_exit();	
  }


/********* GET TEST_NAME  **********/
  void get_test_name()
  {
    d_test_name.arr[0]	= '\0';
	d_test_name.len		= 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL SELECT long_desc
	INTO :d_test_name
	FROM RL_TEST_CODE_LANG_VW 
	WHERE test_code = :d_test_code
	AND LANGUAGE_ID = :language_id;

#ifdef DEBUG
    printf("leaving dclr_source_cur()\n");
    fflush(stdout);
#endif

	d_test_name.arr[d_test_name.len]	= '\0';
	
  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_test_name() occured....\n");
   proc_exit();	
  }

print_month_col_heading()
{

    m_month = 0;
	m_year = 0;
	a_month = 0;
	a_year = 0;

	h_head.arr[0]		= '\0';
	h_head.len			= 0;


	strcpy(x_date.arr, v_date.arr);
	x_date.len = strlen(x_date.arr);

//	fprintf(f1, "Test        Description     ");
	fprintf(f1, "%-4.4s        %-11.11s     ", local_legend[1], local_legend[2]); //added for globalisation
	//fprintf(f1, "Description     ");

   	   EXEC SQL SELECT TO_DATE(:q_date, 'DD/MM/YYYY') - 
			TO_DATE(:x_date, 'DD/MM/YYYY') 
	   INTO :m_month
	   FROM DUAL;

	while(m_month >= 0)
	{
	   
	  EXEC SQL SELECT TO_CHAR(TO_DATE(:x_date, 'DD/MM/YYYY'), 'MM/YYYY')
			INTO :h_head FROM DUAL;
		
  	   h_head.arr[h_head.len]		= '\0';

	   fprintf(f1,"%-7s", h_head.arr);
	   fprintf(f1, " ");

	   EXEC SQL SELECT TO_CHAR(ADD_MONTHS(TO_DATE(:x_date, 'DD/MM/YYYY'), 1), 'DD/MM/YYYY')
			INTO :x_date FROM DUAL;
	
	   x_date.arr[x_date.len]		= '\0';

	   EXEC SQL SELECT TO_DATE(:q_date, 'DD/MM/YYYY') - 
			TO_DATE(:x_date, 'DD/MM/YYYY') 
	   INTO :m_month
	   FROM DUAL;

	}

//	fprintf(f1, "Total");
	fprintf(f1, "%s", local_legend[3]); //added for globalisation

	fprintf(f1,"\n-------------------------------------------------------------------------------");
	fprintf(f1,"----------------------------------------------------") ;
	fprintf(f1,"\n") ;

	line_no += 2;

}

/************** PRINT DEPARTMENT COLUMN HEADING ***************/
void print_dept_col_heading()
{
 fprintf(f1, "\n");
// fprintf(f1,"Dept : %s",d_section_name.arr);
 fprintf(f1,"%-4.4s : %s",local_legend[4], d_section_name.arr); //added for globalisation
 fprintf(f1,"\n-----------------------------------");
 line_no += 2;
 total_records++ ;
}

/***************PRINT SOURCE COLUMN HEADING *************/
void print_source_col_heading()
{
 fprintf(f1, "\n");
// fprintf(f1,"Source : %s",d_source_name.arr );
 fprintf(f1,"%-5.5s : %s",local_legend[5], d_source_name.arr ); //added for globalisation
 fprintf(f1,"\n");
 fprintf(f1,"-----------------------------------");
 fprintf(f1,"\n");
 line_no +=3 ;
}


void chk_break(int lin)
{
   if ((line_no + lin) >= MAX_LINES)
   {
     fprintf(f1,"\f");	 
	 print_page_header();	 
	 print_cont_header();
	 line_no += 1;
   }
}


/************* get_params ***************/
void get_params()
{	
	nd_fm_section_code.arr[0] 		= '\0';
	nd_fm_section_code.len			= 0 ;
	nd_to_section_code.arr[0]		= '\0' ;
	nd_to_section_code.len			= 0;
	nd_type.arr[0]					= '\0'	;
	nd_type.len				 		= 0;
	nd_fm_source_type.arr[0]		= '\0' ;
	nd_fm_source_type.len 			= 0;
	nd_to_source_type.arr[0]		= '\0' ;
	nd_to_source_type.len 			= 0;
	
	nd_incl_reflex_yn.arr[0]        = '\0';
	nd_incl_reflex_yn.len           = 0;

	v_date.arr[0]					= '\0';
	v_date.len						= 0;
	w_date.arr[0]					= '\0';
	w_date.len						= 0;
	q_date.arr[0]					= '\0';
	q_date.len						= 0;

   

   /* read the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   EXEC SQL SELECT OPERATING_FACILITY_ID,
            LTRIM(RTRIM(PARAM1)),
		    PARAM2,
		    PARAM3,
		    PARAM4,
		    PARAM5,
			PARAM6
		    INTO 
		    :nd_operating_facility_id,		    
		    :nd_type ,
		    :nd_fm_source_type ,
		    :nd_to_source_type ,
		    :v_date ,
		    :w_date,
			:nd_incl_reflex_yn
            FROM SY_PROG_PARAM
	        WHERE   UPPER(PGM_ID) = 'RLREXCCH'
		    AND SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND PGM_DATE = :nd_pgm_date;
	

   if(OERROR)
      disp_message(ORA_MESG,"get_parameter_function2 : \n");
   
  nd_operating_facility_id.arr[nd_operating_facility_id.len] = '\0';  
  nd_type.arr[nd_type.len]                              = '\0';
  nd_fm_source_type.arr[nd_fm_source_type.len] 			= '\0';
  nd_to_source_type.arr[nd_fm_source_type.len] 			= '\0';
  v_date.arr[v_date.len]								= '\0';
  w_date.arr[w_date.len]								= '\0';
  nd_incl_reflex_yn.arr[nd_incl_reflex_yn.len]          = '\0';

  #ifdef DEBUG
   printf("**********Parameters from SY_PROG_PARAM *******************\n");
   printf(" nd_fm_section_code = %s\n",nd_fm_section_code.arr);
   printf(" nd_to_section_code = %s\n",nd_to_section_code.arr);
   printf(" nd_type = %d\n",nd_type);
   printf(" nd_fm_source_type = %s\n",nd_fm_source_type.arr);
   printf(" nd_to_source_type = %s\n",nd_to_source_type.arr);
   printf(" v_date = %s\n",v_date.arr);
   printf(" w_date = %s\n",w_date.arr);
   getchar();  
#endif
  /* delete the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DELETE FROM SY_PROG_PARAM
	        WHERE UPPER(PGM_ID) = 'RLREXCCH'
	        AND SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND PGM_DATE = :nd_pgm_date;

     return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_params() occured....\n");
   proc_exit();
}

/************ GET_HEADER_DETAILS****************/
void get_header_dtls()
{
     d_acc_entity_name.arr[0]   = '\0';
	 d_acc_entity_name.len		= 0;
	 d_user.arr[0]				= '\0';
	 d_user.len                 = 0;
	 d_sysdate.arr[0]			= '\0';
	 d_sysdate.len              = 0;

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   EXEC SQL SELECT ACC_ENTITY_NAME,
		   USER,
		   TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI:SS')
	       INTO :d_acc_entity_name,
		   :d_user,
		   :d_sysdate
            FROM SY_ACC_ENTITY_lang_vw
			WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			and language_id = :language_id;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';

#ifdef DEBUG
   printf("d_acc_entity_name = %s\n", d_acc_entity_name.arr);
   printf("d_user = %s\n", d_user.arr);
   printf("d_sysdate = %s\n", d_sysdate.arr);
#endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_header_dtls() occured....\n");
   proc_exit();
}


/*************** GENERATE FILE NAME ***************/
void gen_file_name()
{

  	 /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);	 
	 strcat(nd_file_name.arr,OUTPUT_FILE_NAME);
	 nd_file_name.len = strlen(nd_file_name.arr);

	 if ((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var) ;
       proc_exit();
     }
    
}

/*********** PRINT REPORT HEADER **************/

void print_rep_header()
{
  char nd_fm_section_desc[10],
       nd_to_section_desc[10];
  int rec_len; //added for globalisation

  #ifdef DEBUG
      printf("before report header()\n");
  #endif
  print_page_header();

  #ifdef DEBUG
      printf("after page header()\n");   
  #endif
  
  get_version_no();   

  fprintf(f1,"%s\n",d_version.arr);

  fprintf(f1,"\n\n\n\n");
//  fprintf(f1,"                ");
//  fprintf(f1,"INPUT PARAMETERS :\n");
  rec_len = strlen(local_legend[6]);//added for globalisation
  print_space(43, rec_len,1);//added for globalisation
  fprintf(f1,"%s:\n", local_legend[6]);//added for globalisation
//  fprintf(f1,"                ");
//  fprintf(f1,"------------------\n\n");
  print_space(43, rec_len,1);//added for globalisation
  print_space(43, rec_len,0);//added for globalisation
  fprintf(f1,"\n\n");//added for globalisation
//  fprintf(f1,"                ");
//  fprintf(f1,"SOURCE TYPE    : %s\n",nd_type.arr);
  rec_len = strlen(local_legend[7]);//added for globalisation
  print_space(43, rec_len,1);//added for globalisation
  fprintf(f1,"%s: %s\n", local_legend[7], nd_type.arr); //added for globalisation
//  fprintf(f1,"                ");
//  fprintf(f1,"FROM SOURCE    : %s\n",nd_fm_source_type.arr);
  rec_len = strlen(local_legend[8]);//added for globalisation
  print_space(43, rec_len,1);//added for globalisation
  fprintf(f1,"%s: %s\n", local_legend[8], nd_fm_source_type.arr); //added for globalisation
//  fprintf(f1,"                ");
//  fprintf(f1,"TO SOURCE      : %s\n",nd_to_source_type.arr);
  rec_len = strlen(local_legend[9]);//added for globalisation
  print_space(43, rec_len,1);//added for globalisation
  fprintf(f1,"%s: %s\n", local_legend[9], nd_to_source_type.arr); //added for globalisation
//  fprintf(f1,"                ");
//  fprintf(f1,"SPEC FROM DATE : %s\n",v_date.arr);
        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:v_date,'DD/MM/YYYY hh24:mi:ss'), :language_id , t_date);
				:v_date1 := to_char(t_date,'DD/MM/YYYY hh24:mi:ss');
				END;
			END-EXEC;

  rec_len = strlen(local_legend[10]);//added for globalisation
  print_space(43, rec_len,1);//added for globalisation
  fprintf(f1,"%s: %s\n", local_legend[10], v_date1.arr); //added for globalisation
//  fprintf(f1,"                ");
//  fprintf(f1,"SPEC TO   DATE : %s\n",w_date.arr);
        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:w_date,'DD/MM/YYYY hh24:mi:ss'), :language_id , t_date);
				:w_date1 := to_char(t_date,'DD/MM/YYYY hh24:mi:ss');
				END;
			END-EXEC;

  rec_len = strlen(local_legend[11]);//added for globalisation
  print_space(43, rec_len,1);//added for globalisation
  fprintf(f1,"%s: %s\n", local_legend[11], w_date1.arr); //added for globalisation
//  fprintf(f1,"                ");
//  fprintf(f1,"INCLUDE REFLEX : %s\n",nd_incl_reflex_yn.arr);
  rec_len = strlen(local_legend[12]);//added for globalisation
  print_space(43, rec_len,1);//added for globalisation
  fprintf(f1,"%s: %s\n", local_legend[12], nd_incl_reflex_yn.arr); //added for globalisation
  fprintf(f1,"\n\n\n");
  fprintf(f1,"                ");
//  fprintf(f1,"[R] - Reflex Test");
  fprintf(f1,"[R] - %s", local_legend[13]);//added for globalisation
  fprintf(f1,"\n\n\n\n\n");
  fprintf(f1,"\f");      
}


/************ PRINT PAGE HEADER ****************/
void print_page_header()
{
 register int i;
 char nd_fm_section_desc[10],
       nd_to_section_desc[10];
 int spc_len;
 char buf[15]; //added for globalisation
 int col;// added for globalisation

 line_no = 0;
 page_no = page_no+1;

  
  fill_dash(78);
/*  fprintf(f1,"MDL : RL");
  spc_len = 15;
  for(i=1;i<=spc_len;i++)
  fprintf(f1," ");
  fprintf(f1,"%-30s", d_acc_entity_name.arr);
  spc_len = 6;
  for(i=1;i<=spc_len;i++)
  fprintf(f1," ");
  fprintf(f1,"%s", d_sysdate.arr);
  fprintf(f1,"\n"); 
*/

  memset(hdr_line1,' ',REP_WIDTH+1);
  strncpy(hdr_line1,"MDL : RL",8);
  col = (int)(REP_WIDTH - strlen(d_acc_entity_name.arr))/2;
  strncpy(hdr_line1 + col -1,d_acc_entity_name.arr,strlen(d_acc_entity_name.arr));
  EXEC SQL EXECUTE
	DECLARE
		t_date   date;
	BEGIN
		t_date := GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
		:d_sysdate1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
	END;
  END-EXEC;
	col = (REP_WIDTH-strlen(d_sysdate1.arr));
	strcpy(hdr_line1+col+1,d_sysdate1.arr);
  fprintf(f1,"\n");	
  fprintf(f1,hdr_line1);
  fprintf(f1,"\n");	

 fprintf(f1,"OPR : %s", d_user.arr);
// fprintf(f1,"              List of Tests not Charged             \n");
  memset(hdr_line2,' ',REP_WIDTH+1);
  col = (int)(REP_WIDTH - strlen(local_legend[14]))/2;
  strncpy(hdr_line2+ col -1,local_legend[14],strlen(local_legend[14]));
  fprintf(f1,hdr_line2);
  fprintf(f1,"\n");	

 fprintf(f1,"REP : RLREXCCH");
 fprintf(f1,"                                        ") ;
// fprintf(f1,"            Page : %4d", page_no);
 fprintf(f1,"            %-4.4s : %4d", local_legend[15],page_no);
 fprintf(f1,"\n");
 fill_dash(78);
 fprintf(f1,"\n");
 line_no = line_no + 8;
}

void print_cont_header()
{
 register int i;
 char nd_fm_section_desc[10],
       nd_to_section_desc[10];
 char loc_legend1[41];
 char loc_legend2[41];
 char loc_legend3[41];
 char loc_legend4[41];
 char loc_legend5[41];
 char loc_legend6[41];
 char loc_legend7[41];
 char loc_legend8[41];
 char loc_legend9[41];
 char loc_legend10[41];
 char loc_legend11[41];
 char loc_legend12[41];
 int spc_len;

// strcpy(loc_legend1,"Patient ID");
 strcpy(loc_legend1,local_legend[16]); //added for globalisation
 loc_legend1[10] = '\0';

// strcpy(loc_legend2,"Name");
 strcpy(loc_legend2,local_legend[17]); //added for globalisation
 loc_legend2[5] = '\0';

// strcpy(loc_legend3,"Episode     /Visit");
 strcpy(loc_legend3,local_legend[18]); //added for globalisation
 loc_legend3[19] = '\0';

// strcpy(loc_legend4,"Visit");
 strcpy(loc_legend4,local_legend[19]); //added for globalisation
 loc_legend4[6] = '\0';

// strcpy(loc_legend5,"Source");
 strcpy(loc_legend5,local_legend[5]); //added for globalisation
 loc_legend5[7] = '\0';

// strcpy(loc_legend6,"Name");
 strcpy(loc_legend6,local_legend[17]); //added for globalisation
 loc_legend6[5] = '\0';

// strcpy(loc_legend7,"Spec No");
 strcpy(loc_legend7,local_legend[20]); //added for globalisation
 loc_legend7[8] = '\0';

// strcpy(loc_legend8,"Test Code");
 strcpy(loc_legend8,local_legend[21]); //added for globalisation
 loc_legend8[10] = '\0';

// strcpy(loc_legend9,"Name");
 strcpy(loc_legend9,local_legend[17]); //added for globalisation
 loc_legend9[5] = '\0';

 strcpy(loc_legend10,"Test Date");
 strcpy(loc_legend10,local_legend[22]); //added for globalisation
 loc_legend10[9] = '\0';

// strcpy(loc_legend11,"Added By ID");
 strcpy(loc_legend11,local_legend[23]); //added for globalisation
 loc_legend11[12] = '\0';
	
 fprintf(f1,"\n") ;	
  
fprintf(f1,"%-20s%-60s \n",loc_legend1, loc_legend2);

fprintf(f1,"%-20s%-6s %-20s   %-15s %12s\n",loc_legend3,loc_legend5,loc_legend6,loc_legend7,loc_legend10);
fprintf(f1,"%-15s%-37s%26s\n",loc_legend8,loc_legend9,loc_legend11);
line_no = line_no + 4;
fill_dash(78);  
line_no = line_no + 1;
}

initialize_array()
{

    int i = 0;
	int k = 0;

	m_month = 0;
	m_year = 0;
	a_month = 0;
	a_year = 0;

	tot_incr = 0;

	strcpy(x_date.arr, v_date.arr);
	x_date.len = strlen(x_date.arr);

	for(k=0;k<13;k++)
	{
		month[k] = 0;
		year[k]	= 0;
	}


	EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:x_date, 'DD/MM/YYYY'), 'MM'))
	INTO :t_month FROM DUAL;
    
	EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:x_date, 'DD/MM/YYYY'), 'YYYY')) 
	INTO :t_year FROM DUAL;
	
    EXEC SQL SELECT TO_DATE(:q_date, 'DD/MM/YYYY') - 
		 TO_DATE(:x_date, 'DD/MM/YYYY') 
    INTO :m_month
    FROM DUAL;

    month[i] = t_month;
    year[i]	 = t_year;

	while(m_month >= 0)
	{

	   tot_incr++;


	   EXEC SQL SELECT TO_CHAR(ADD_MONTHS(TO_DATE(:x_date, 'DD/MM/YYYY'), 1), 'DD/MM/YYYY')
			INTO :x_date FROM DUAL;

	   x_date.arr[x_date.len]		= '\0';

	   EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:x_date, 'DD/MM/YYYY'), 'MM'))
	   INTO :t_month FROM DUAL;

	   EXEC SQL SELECT TO_NUMBER(TO_CHAR(TO_DATE(:x_date, 'DD/MM/YYYY'), 'YYYY'))
	   INTO :t_year FROM DUAL;


   	   EXEC SQL SELECT TO_DATE(:q_date, 'DD/MM/YYYY') - TO_DATE(:x_date, 'DD/MM/YYYY') 
	   INTO :m_month
	   FROM DUAL;

	   i++;
	   month[i] = t_month;
	   year[i]	= t_year;


	}

}

void do_footer()
{
   chk_break(4);
   fprintf(f1,"\n\n %15s   ***  END OF REPORT ***\n\f"," ");
   fflush(f1);
}


get_version_no()
{

     d_version_no.arr[0] = '\0';
     d_version_no.len    =  0;

     strcpy(d_version.arr,"VER : ");

	 EXEC SQL EXECUTE 
	      begin
			if SM_INSTALLATION_TAB_CHECK THEN
			   :l_tab_exists := 1;
			else
			   :l_tab_exists := 0;
			end if;
		  end;
	 END-EXEC;


    if (l_tab_exists) 
    {
	    /**
		EXEC SQL SELECT VERSION_NO INTO :d_version_no 
                 FROM   SM_INSTALLATION; 
        **/
		
		strcpy(d_version_no.arr,"4.1");

		//d_version_no.arr[d_version_no.len] = '\0';
		d_version_no.arr[strlen(d_version_no.arr)] = '\0';
		
		
    }
    else
	    strcpy(d_version_no.arr,"2.1");

	    strcat(d_version.arr,d_version_no.arr);


    if (OERROR)
	{
	    strcpy(d_version_no.arr,"2.1");
	    strcat(d_version.arr,d_version_no.arr);
    }

}

int get_rev_details()
 {

    /** manipulate the Patient ID for external patients 
        and episode type to R if episode type is H   
	 **/

	strcpy(nd_patient_id.arr, d_patient_id.arr);

	if (strcmp(d_episode_type.arr, "R") == 0)
	  strcpy(nd_patient_id.arr, d_customer_code.arr);

	nd_patient_id.len = strlen(nd_patient_id.arr);

	strcpy(nd_episode_type.arr, d_episode_type.arr);

	if (strcmp(d_episode_type.arr, "H") == 0)
	  strcpy(nd_episode_type.arr, "R");

	nd_episode_type.len = strlen(nd_episode_type.arr);

/******
 commented as this procedure is not available in srdv, needs to be reviewed later

	EXEC SQL EXECUTE 
			 BEGIN
				BL_PROC_FOR_EXT_SERVICE.GET_PAT_CHARGE_AMT_FOR_TEST 
				(
				 :nd_operating_facility_id,                  	
				 :nd_patient_id,                  	
				 :nd_episode_type,
				 :d_episode_no,
				 :d_tfr_visit_no,
				 'RL',                    	
				 :txt_specimen_no,                    	
				 :d_line_no,
				 :d_test_code,                   
				 :p_charged_yn,
				 :p_charged_gross_amt,
				 :p_charged_disc_amt,
				 :p_charged_net_amt,
				 :p_status,
				 :p_err_code,
				 :p_sys_message_id,
				 :p_error_text);    		
		END;
	END-EXEC;
	********/		
/* Commented on 07-09-2004
		if (strcmp(p_err_code.arr,"10") == 0)
		   {	
				sprintf(string_var," Error:%s in BL_PROC_FOR_EXT_SERVICE.GET_PAT_CHARGE_AMT_FOR_TEST \n", p_error_text.arr);
				disp_message(ERR_MESG, string_var);										
		   }
*/
     return 1;

}


int fetch_patient_desc()
{
    patient_name.arr[0]	= '\0';	
    patient_name.len		= 0;
	
    if (strcmp(d_episode_type.arr, "I") == 0 || 
				strcmp(d_episode_type.arr, "O") == 0 ||
				strcmp(d_episode_type.arr, "H") == 0)
     {
		EXEC SQL SELECT DECODE(:language_id, 'en', SHORT_NAME, 'th', SHORT_NAME_LOC_LANG) SHORT_NAME
				   INTO :patient_name
				   FROM MP_PATIENT_MAST
				  WHERE PATIENT_ID = :d_patient_id;
				  
	 }
	else
	 {
	   EXEC SQL SELECT DECODE(:language_id, 'en', SHORT_NAME, 'th', SHORT_NAME_LOC_LANG) short_name
				  INTO :patient_name
				  FROM RL_PATIENT_MAST
				 WHERE PATIENT_ID = :d_patient_id;
				 
	 }	

    if (OERROR) 
	{
	      sprintf(string_var,"Error when fetching the patient name:%s\n",sqlca.sqlerrm.sqlerrmc);	
	      disp_message(ERR_MESG, string_var);			      
	      return 0;
	}

	patient_name.arr[patient_name.len]           = '\0';
	return 1;
}

fill_dash(flg)
{
  int ini_lp1;
  for (ini_lp1=1;ini_lp1<=flg;ini_lp1++)
	fprintf(f1,"%s","-");
	fprintf(f1,"\n");
}

get_legend_value(int cou)
 {
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLREXCCH.LEGEND_');
	END;
	END-EXEC;

	for (i=1; i<=cou; i++)
	{
	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLREXCCH.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);
	}
 }
print_space(int aa, int bb, int cc)
{
	if (cc ==1)
	{
  		for(i=1;i <= (aa - bb) ;i++)
		{
			fprintf(f1,"%s"," ");
		}	
	}
	else if (cc ==0)
	{
  		for(i= (aa - bb);i <= aa ;i++)
		{
			fprintf(f1,"%s","-");
		}	
	}
}


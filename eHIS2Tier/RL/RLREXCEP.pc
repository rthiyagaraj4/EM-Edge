/****************************OCS MEDICOM ver 1.0*****************************
*  File	: rlrexcep.pc
   Author : Amjad
   Date Created  : 23/10/2005

*  Ver 1.10.01
      
*  Purpose : To generate a report for Specimens reviewed or amended

*  Input Parameters : 
              Command line inputs  
	
		      1. Usr_id/Password
              2. Session id
		      3. Program Date
                 
				 Parameters from SY_PROG_PARAM table 
  
*  Table Accessed : 
		    
*  Output File : rlrexcep.lis
 ****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <string.h>
#include <rl.h>

#define MAX_LINES 45
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 1.10.01\n"
#define ESC 0x1B

EXEC SQL BEGIN DECLARE SECTION;
/* INPUT PARAMETERS TO MAIN */

	VARCHAR  
	    nd_operating_facility_id   [3],
	    uid_pwd		               [91],
		nd_user_id                 [21],
		nd_session_id              [16],
		nd_pgm_date	               [20], 
		nd_user	                   [15],
        nd_file_no                 [15],
		nd_file_name			   [150],
		d_version_no			   [20],
		d_version  			       [20];

/**********************************************/
/*INPUT PARAMETERS FROM SY_PROG_PARAM TABLE */
	VARCHAR nd_sect_code				[3],
			nd_from_date				[20],
			nd_from_date1               [20],
			nd_to_date					[20],
			nd_to_date1                 [20],
			nd_test_type				[2],
			nd_test_code				[11],
			nd_amended					[2],
			nd_reason_code				[11],
			nd_technician_review_yn		[2],
			nd_abnormal_review_yn		[2],
			nd_normal_review_yn			[2],
			nd_tech_status				[2],
			nd_delta_status				[2],
			nd_qlty_status				[2],
			nd_cmnt_status				[2],
			nd_rslt_status				[2],
			nd_rule_status				[2],
			nd_spec_rule_status			[2],
			nd_marked_status			[2];

/**********************************************/
/*INPUT PARAMETERS FROM SPEC LOG CURSOR */
	VARCHAR		d_specimen_no		[21],
				d_sequence_no		[15],
				d_log_table_name	[31],
				d_time_stamp		[21],
				d_time_stamp1       [21],
				d_user_id			[31];

/**********************************************/
/* FIELDS from CURSOR TEST CURSOR */
	VARCHAR d_test_code				[11],
			d_group_test_code		[11],
			d_test_name				[41],
			d_tech_status			[2],
			d_rslt_status			[2],
			d_cmnt_status			[2],
			d_delta_status			[2],
			d_rule_status			[2],
			d_qlty_status			[2],
			d_spec_rule_status		[2],
			d_path_status			[2];

/****************************/
/* FIELDS from CURSOR SECTION CURSOR */
	varchar d_section_name			[41] ;

/****************************/
/* FIELDS from rl_request_header */
	VARCHAR d_patient_id			[21],
			d_spec_regd_date_time	[20],
			d_spec_regd_date_time1  [20];

/****************************/
/* FIELDS from RL_RESULT_MODIFY_REASON */
	VARCHAR d_remark_text			[41];

/* Fields from table SY_ACC_ENTITY*/
	varchar 	//d_acc_entity_name        [61],
				d_acc_entity_name        [300],
				d_user                   [21],
				d_sysdate                [17],
				d_sysdate1                [17];		 
	VARCHAR l_translated_value  [500], //added for globalisation
			language_id [5]; //added for globalisation
	
	int     i; //added for globalisation

	int  l_tab_exists ;
	char sql_stmt[7000];

EXEC SQL END DECLARE SECTION;


EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>
 
char string_var[5000] ;

/************************************************/
int line_no = 0;
int page_no = 0 ;
long total_count = 0;

//char flag_2 = 'N';
char temp_test_name [61];

FILE *f1;

char local_legend[40][600];  //added for globalisation

void proc_main(argc, argv)
int argc;
char *argv[];
{
   void get_params();
   void gen_file_name();
   void get_header_dtls();
   void do_report1();
   void do_report2();
   void do_footer();    

   if(argc < 4) {
     disp_message(ORA_MESG,"Usage rlrexcep uid/passwd session_id pgm_date\n");
     proc_exit();
   }

   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   strcpy(OUTPUT_FILE_NAME, argv[5]);
  
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   if(OERROR)
      disp_message(ORA_MESG,"Failed to connect using : \n");

#ifdef DEBUG
    printf("Connected to ORACLE as user: %s \n", uid_pwd.arr);
#endif

	set_meduser_role();

	/******* from here added for globalisation ********/
    strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
	/******* upto here added for globalisation ********/

	get_params(); 

	get_legend_value(36);  //added for globalisation

	get_header_dtls();

	gen_file_name(); 

  if ((strcmp(nd_amended.arr,"A") == 0) && ((strcmp(nd_technician_review_yn.arr,"N") == 0) && (strcmp(nd_abnormal_review_yn.arr,"N") == 0) && (strcmp(nd_normal_review_yn.arr,"N") == 0)))
	do_report2();
  else
	do_report1();	

    fprintf(f1,"%cE",ESC);	
 //   fprintf(f1,"\f");	

    fclose(f1);	 

   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL COMMIT WORK RELEASE;

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();	
	
}

/******** added for globalisation start ******************/

get_legend_value(int cou)
 {
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLREXCEP.LEGEND_');
	END;
	END-EXEC;

	for (i=1; i<=cou; i++)
	{
		l_translated_value.arr[0]		= '\0';


		EXEC SQL EXECUTE
		BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLREXCEP.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
		END;
		END-EXEC;
	
		l_translated_value.arr[l_translated_value.len] = '\0';

		//sp_message(ERR_MESG,l_translated_value.arr);

		strcpy(local_legend[i],l_translated_value.arr);

	}
 }
/******** added for globalisation end ******************/	

void do_report1()
{	
	void dclr_speclog_cur();
	void open_speclog_cur();
	void close_speclog_cur();	
	int fetch_speclog_cur();	

	void dclr_test_cur();
	void open_test_cur();
	void close_test_cur();	
	int fetch_test_cur();

	void get_spec_regd_date();	
	int get_remark_text();

	void get_section_name();
	void get_test_name1();
	void get_test_name2();

	void print_rep_header();
	void print_page_header();
	void print_dtl_record();
	void chk_break(int lin_no);	

	char first_time = 'Y';	
	int i =0;
	int j =0;

	line_no = 0;
    page_no = 0;

	print_page_header();
	print_rep_header();
	print_page_header();

    dclr_speclog_cur();
	dclr_test_cur();

	open_speclog_cur();		

    while(fetch_speclog_cur())
	{
		get_spec_regd_date();

		open_test_cur();		

	    while(fetch_test_cur())
		{
			// get_test_name2();
			if (strcmp(nd_amended.arr,"A") == 0)
			{
				if (get_remark_text() == 1) 
				{
					 print_dtl_record();
				}
			}
			else
				if (strcmp(nd_amended.arr,"L") == 0)				
				{
					if (get_remark_text()) 
					{
						// dont do n e thing...
					}
						print_dtl_record();
				}	
		}	

		close_test_cur();		
	}
	close_speclog_cur();

 //fprintf(f1,"\n\n\t\t\t\t\t*****END OF REPORT*****\n");
 fprintf(f1,"\n\n\t\t\t\t\t*****%13.13s*****\n",local_legend[36]);
}  


void do_report2()
{	
	void dclr_speclog_cur2();
	void open_speclog_cur2();
	void close_speclog_cur2();	
	int fetch_speclog_cur2();	

	void dclr_test_cur2();
	void open_test_cur2();
	void close_test_cur2();	
	int fetch_test_cur2();

	void get_spec_regd_date();	
	int get_remark_text();

	void get_section_name();
	void get_test_name1();
	void get_test_name2();

	void print_rep_header();
	void print_page_header();
	void print_dtl_record();
	void chk_break(int lin_no);	

	char first_time = 'Y';	
	int i =0;
	int j =0;

	line_no = 0;
    page_no = 0;

	print_page_header();
	print_rep_header();
	print_page_header();

    dclr_speclog_cur2();
	dclr_test_cur2();

	open_speclog_cur2();		

    while(fetch_speclog_cur2())
	{
		get_spec_regd_date();

		open_test_cur2();		

	    while(fetch_test_cur2())
		{
			// get_test_name2();
			print_dtl_record();
		}	
		close_test_cur2();		
	}
	close_speclog_cur2();

 //fprintf(f1,"\n\n\t\t\t\t\t*****END OF REPORT*****\n");
 fprintf(f1,"\n\n\t\t\t\t\t*****%13.13s*****\n",local_legend[36]);
}  


/*************** DECLARE LOG TABLE CURSOR ***************/
void dclr_speclog_cur()
 {
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL DECLARE SPECLOG_CURSOR CURSOR FOR
					SELECT A.specimen_no,A.sequence_no,ltrim(rtrim(upper(A.log_table_name))) log_table_name,
					       to_char(A.time_stamp,'dd/mm/yyyy hh24:mi') time_stamp,A.user_id
			          FROM rl_specimen_log A
			         WHERE A.time_stamp >= to_date(:nd_from_date,'dd/mm/yyyy hh24:mi') 
			           AND A.time_stamp < (to_date(:nd_to_date,'dd/mm/yyyy hh24:mi') + 1)
			           AND A.operating_facility_id = :nd_operating_facility_id
					   AND substr(specimen_no,1,2) = (
						 							  SELECT specimen_prefix 
													    FROM rl_section_code
													   WHERE section_code = :nd_sect_code
													 )
					   AND A.log_table_name in (decode(:nd_technician_review_yn,'Y','RL_TECHNICIAN_REVIEW','x'),decode(:nd_abnormal_review_yn,'Y','RL_ABNORMAL_REVIEW','x'),decode(:nd_normal_review_yn,'Y','RL_NORMAL_REVIEW','x')) 
				  ORDER BY A.specimen_no, A.sequence_no, A.time_stamp;   


#ifdef DEBUG
    printf("leaving dclr_speclog_cur()\n");
    fflush(stdout);
#endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_speclog_cur() occured....\n");
   proc_exit();	
}

/*************** OPEN LOG TABLE CURSOR ***************/
void open_speclog_cur()
{
EXEC SQL WHENEVER SQLERROR GOTO err_exit;

EXEC SQL OPEN SPECLOG_CURSOR;  

#ifdef DEBUG
    printf("leaving open_speclog_cur()\n");
    fflush(stdout);
 #endif
  return;

 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at open_speclog_cur() occured....\n");
   proc_exit();	
}

/*************** CLOSE LOG TABLE CURSOR ***************/
void close_speclog_cur()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL CLOSE SPECLOG_CURSOR;
	
 #ifdef DEBUG
    printf("leaving close_speclog_cur()\n");
    fflush(stdout);
 #endif
  return;
 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at close_speclog_cur() occured....\n");
   proc_exit();	
 }

/*************** FETCH LOG TABLE CURSOR ***************/
int fetch_speclog_cur()
{
	d_specimen_no.arr[0]			= '\0';
	d_sequence_no.arr[0]			= '\0';
	d_log_table_name.arr[0]			= '\0';
	d_time_stamp.arr[0]				= '\0';
	d_user_id.arr[0]				= '\0';

	d_specimen_no.len				= 0;
	d_sequence_no.len				= 0;
	d_log_table_name.len			= 0;
	d_time_stamp.len				= 0;
	d_user_id.len					= 0;

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL FETCH SPECLOG_CURSOR INTO
									d_specimen_no,
									d_sequence_no,
									d_log_table_name,
									d_time_stamp,
									d_user_id;
#ifdef DEBUG
         printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
#endif

  if(NODATAFOUND)
    return 0;

	d_specimen_no.arr[d_specimen_no.len]				= '\0';
	d_sequence_no.arr[d_sequence_no.len]				= '\0';
	d_log_table_name.arr[d_log_table_name.len]			= '\0';
	d_time_stamp.arr[d_time_stamp.len]					= '\0';
	d_user_id.arr[d_user_id.len]						= '\0';

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_speclog_cur() occured....\n");
   proc_exit();
}


/*************** DECLARE LOG TABLE CURSOR 2***************/
void dclr_speclog_cur2()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	/********** SELECT ************************/
	
	strcpy(sql_stmt,
	    " SELECT specimen_no,patient_id,group_test_code,test_code,remark_text,to_char(released_date,'dd/mm/yyyy hh24:mi') time_stamp \
	        FROM RL_RESULT_MODIFY_REASON \
	       WHERE operating_facility_id = :nd_operating_facility_id ");

	if ((strcmp(nd_test_type.arr,"I") == 0) || (strcmp(nd_test_type.arr,"G") == 0))
			{	
			strcat(sql_stmt," AND decode(nvl(:nd_test_type,'I'),'I',test_code,'G',group_test_code,test_code) = nvl(:nd_test_code,test_code) ");
			 }
	else 
		if (strcmp(nd_test_type.arr,"W") == 0)
			{
			strcat(sql_stmt," AND test_code IN ( SELECT test_code \
												   FROM rl_outst_work_group_dtl \
												  WHERE operating_facility_id = :nd_operating_facility_id \
												    AND outst_work_group_code = nvl(:nd_test_code,outst_work_group_code)) \
												");
			}
	
			strcat(sql_stmt," AND released_date >= to_date(:nd_from_date,'dd/mm/yyyy hh24:mi') \
							  AND released_date < (to_date(:nd_to_date,'dd/mm/yyyy hh24:mi') + 1) \
							  AND nvl(remark_code,'x') = nvl(:nd_reason_code,nvl(remark_code,'x')) \
							  AND substr(specimen_no,1,2) = (	\
						 									  SELECT specimen_prefix \
															    FROM rl_section_code \
															   WHERE section_code = :nd_sect_code \
															 ) \
								ORDER BY specimen_no,released_date \
						");			    
/*	
	sprintf(string_var," %s",sql_stmt);
	disp_message(ERR_MESG,string_var);
*/
	EXEC SQL PREPARE S FROM :sql_stmt;

	EXEC SQL DECLARE SPECLOG_CURSOR2 CURSOR FOR S;

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_speclog_cur2() occured....\n");
   proc_exit();	
 }


/*************** OPEN SPEC LOG CURSOR 2***************/
void open_speclog_cur2()
{
EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	if ((strcmp(nd_test_type.arr,"I") == 0) || (strcmp(nd_test_type.arr,"G") == 0))
	{
					EXEC SQL OPEN SPECLOG_CURSOR2 USING	
								:nd_operating_facility_id,
								:nd_test_type,
								:nd_test_code,
								:nd_from_date,
								:nd_to_date,
								:nd_reason_code,
								:nd_sect_code; 
	 }
	 else 	
	 	if (strcmp(nd_test_type.arr,"W") == 0)
			{
					EXEC SQL OPEN SPECLOG_CURSOR2 USING	
								:nd_operating_facility_id, 
								:nd_operating_facility_id ,
								:nd_test_code,
								:nd_from_date,
								:nd_to_date,
								:nd_reason_code,
								:nd_sect_code;
			}	

  return;
 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at open_speclog_cur2() occured....\n");
   proc_exit();	
}


/*************** CLOSE LOG TABLE CURSOR ***************/
void close_speclog_cur2()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL CLOSE SPECLOG_CURSOR2;
	
 #ifdef DEBUG
    printf("leaving close_speclog_cur()\n");
    fflush(stdout);
 #endif
  return;
 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at close_speclog_cur() occured....\n");
   proc_exit();	
 }


/*************** FETCH LOG TABLE CURSOR 2***************/
int fetch_speclog_cur2()
{
	d_specimen_no.arr[0]			= '\0';
	d_patient_id.arr[0]				= '\0';
	d_group_test_code.arr[0]		= '\0';
	d_test_code.arr[0]              = '\0';
	d_remark_text.arr[0]			= '\0';
	d_time_stamp.arr[0]				= '\0';

	d_specimen_no.len				= 0;
	d_patient_id.len                = 0;
	d_group_test_code.len           = 0;
	d_test_code.len					= 0;
	d_remark_text.len				= 0;
	d_time_stamp.arr[d_time_stamp.len]				= '\0';

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
	EXEC SQL FETCH SPECLOG_CURSOR2 INTO
							d_specimen_no,
							d_patient_id,
							d_group_test_code,
							d_test_code,
							d_remark_text,
							d_time_stamp;
	
#ifdef DEBUG
         printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
#endif

  if(NODATAFOUND)
    return 0;

	d_specimen_no.arr[d_specimen_no.len]		= '\0';
	d_patient_id.arr[d_patient_id.len]				= '\0';
	d_group_test_code.arr[d_group_test_code.len]	= '\0';
	d_test_code.arr[d_test_code.len]				= '\0';
	d_remark_text.arr[d_remark_text.len]			= '\0';
	d_time_stamp.arr[d_time_stamp.len]				= '\0';

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_speclog_cur2() occured....\n");
   proc_exit();
}


/*************** DECLARE TEST CURSOR ***************/
void dclr_test_cur()
 {
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	/********** SELECT ************************/
	
	strcpy(sql_stmt,
	    " SELECT test_code,nvl(tech_status,'-'),nvl(rslt_status,'-'),nvl(cmnt_status,'-'),nvl(delta_status,'-'),nvl(rule_status,'-'),nvl(qlty_status,'-'),nvl(spec_rule_status,'-'),nvl(path_status,'-') \
	        FROM rl_test_result A \
	       WHERE specimen_no = to_number(:d_specimen_no) \
	         AND operating_facility_id = :nd_operating_facility_id ");

	if ((strcmp(nd_test_type.arr,"I") == 0) || (strcmp(nd_test_type.arr,"G") == 0))
			{	
			strcat(sql_stmt," AND decode(nvl(:nd_test_type,'I'),'I',test_code,'G',group_test_code,test_code) = nvl(:nd_test_code,test_code) ");
			 }
	else 
		if (strcmp(nd_test_type.arr,"W") == 0)
			{
			strcat(sql_stmt," AND test_code IN ( SELECT test_code \
												   FROM rl_outst_work_group_dtl \
												  WHERE operating_facility_id = :nd_operating_facility_id \
												    AND outst_work_group_code = nvl(:nd_test_code,outst_work_group_code)) \
												");
			}
	
	 strcat(sql_stmt," AND NVL(cancelled_yn, 'N') = 'N' \
							  AND ( \
			       					( nvl(:nd_technician_review_yn,'N') = 'Y'  \
			       			  AND \
			       				  ( \
			       					   TECH_STATUS  = :ND_TECH_STATUS \
			        				OR RSLT_STATUS  = :ND_RSLT_STATUS \
			        				OR CMNT_STATUS  = :ND_CMNT_STATUS \
				      				OR DELTA_STATUS = :ND_DELTA_STATUS \
				    				OR RULE_STATUS  = :ND_RULE_STATUS \
				    				OR QLTY_STATUS  = :ND_QLTY_STATUS \
				    				OR SPEC_RULE_STATUS = :ND_SPEC_RULE_STATUS \
				    			 ) \
				    			) \
				   	 		OR PATH_STATUS IN (decode(:nd_abnormal_review_yn,'Y','A','x'),decode(:nd_normal_review_yn,'Y','N','x')) \
					  		OR MARKED_TECH_STATUS = decode(:nd_technician_review_yn,'Y','T','x') \
					  		OR MARKED_PATH_STATUS IN (decode(:nd_abnormal_review_yn,'Y','A','x'),decode(:nd_normal_review_yn,'Y','N','x'))) ");			    
/*	
	sprintf(string_var," %s",sql_stmt);
	disp_message(ERR_MESG,string_var);
*/

	EXEC SQL PREPARE S FROM :sql_stmt;

	EXEC SQL DECLARE TEST_CURSOR CURSOR FOR S;

 	
#ifdef DEBUG
    printf("leaving dclr_test_cur()\n");
    fflush(stdout);
#endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_test_cur() occured....\n");
   proc_exit();	
 }

/*************** OPEN TEST CURSOR ***************/
void open_test_cur()
{
EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	if ((strcmp(nd_test_type.arr,"I") == 0) || (strcmp(nd_test_type.arr,"G") == 0))
	{
					EXEC SQL OPEN test_cursor USING	
								:d_specimen_no,
								:nd_operating_facility_id,
								:nd_test_type,
								:nd_test_code,
								:nd_technician_review_yn,
								:nd_tech_status ,
								:nd_rslt_status ,
								:nd_cmnt_status ,
								:nd_delta_status ,
								:nd_rule_status ,
								:nd_qlty_status ,
								:nd_spec_rule_status ,
								:nd_abnormal_review_yn,
								:nd_normal_review_yn,
								:nd_technician_review_yn,
								:nd_abnormal_review_yn,
								:nd_normal_review_yn;  
	 }
	 else 	
	 	if (strcmp(nd_test_type.arr,"W") == 0)
			{
					EXEC SQL OPEN test_cursor USING	
								:d_specimen_no,
								:nd_operating_facility_id,
								:nd_operating_facility_id,
								:nd_test_code,
								:nd_technician_review_yn,
								:nd_tech_status ,
								:nd_rslt_status ,
								:nd_cmnt_status ,
								:nd_delta_status ,
								:nd_rule_status ,
								:nd_qlty_status ,
								:nd_spec_rule_status ,
								:nd_abnormal_review_yn,
								:nd_normal_review_yn,
								:nd_technician_review_yn,
								:nd_abnormal_review_yn,
								:nd_normal_review_yn;  
			}	

#ifdef DEBUG
    printf("leaving open_test_cur()\n");
    fflush(stdout);
 #endif
  return;
 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at open_test_cur() occured....\n");
   proc_exit();	
}

/*************** CLOSE TEST CURSOR ***************/
void close_test_cur()
{
	
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL CLOSE test_cursor;
	
 #ifdef DEBUG
    printf("leaving close_test_cur()\n");
    fflush(stdout);
 #endif
  return;
 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at close_test_cur() occured....\n");
   proc_exit();	
}

 /*************** FETCH TEST CURSOR ***************/
int fetch_test_cur()
{
	d_test_code.arr[0]				= '\0';
	d_test_name.arr[0]				= '\0';
	d_tech_status.arr[0]			= '\0';
	d_rslt_status.arr[0]			= '\0';
	d_cmnt_status.arr[0]			= '\0';
	d_delta_status.arr[0]			= '\0';
	d_rule_status.arr[0]			= '\0';
	d_qlty_status.arr[0]			= '\0';
	d_spec_rule_status.arr[0]		= '\0';
	d_path_status.arr[0]			= '\0';

	d_test_code.len					= 0;
	d_test_name.len					= 0;
	d_tech_status.len				= 0;
	d_rslt_status.len				= 0;
	d_cmnt_status.len				= 0;
	d_delta_status.len				= 0;
	d_rule_status.len				= 0;
	d_qlty_status.len				= 0;
	d_spec_rule_status.len			= 0;
	d_path_status.len				= 0;

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL FETCH TEST_CURSOR INTO
								d_test_code,
								d_tech_status,
								d_rslt_status,
								d_cmnt_status,
								d_delta_status,
								d_rule_status,
								d_qlty_status,
								d_spec_rule_status,
								d_path_status;

#ifdef DEBUG
         printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
#endif

  if(NODATAFOUND)
    return 0;

	d_test_code.arr[d_test_code.len]				= '\0';
	d_tech_status.arr[d_tech_status.len]			= '\0';
	d_rslt_status.arr[d_rslt_status.len]			= '\0';
	d_cmnt_status.arr[d_cmnt_status.len]			= '\0';
	d_delta_status.arr[d_delta_status.len]			= '\0';
	d_rule_status.arr[d_rule_status.len]			= '\0';
	d_qlty_status.arr[d_qlty_status.len]			= '\0';
	d_spec_rule_status.arr[d_spec_rule_status.len]	= '\0';
	d_path_status.arr[d_path_status.len]			= '\0';

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_test_cur() occured....\n");
   proc_exit();
}


/*************** DECLARE test CURSOR 2***************/
void dclr_test_cur2()
 {
	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL DECLARE TEST_CURSOR2 CURSOR FOR
			    SELECT test_code,nvl(tech_status,'-'),nvl(rslt_status,'-'),nvl(cmnt_status,'-'),nvl(delta_status,'-'),nvl(rule_status,'-'),nvl(qlty_status,'-'),nvl(spec_rule_status,'-'),nvl(path_status,'-')
			      FROM RL_TEST_RESULT 
			     WHERE patient_id = :d_patient_id
			       AND specimen_no = :d_specimen_no
			       AND operating_facility_id = :nd_operating_facility_id
			       AND group_test_code = :d_group_test_code
			       AND test_code = :d_test_code
			       AND NVL(cancelled_yn, 'N') = 'N';

#ifdef DEBUG
    printf("leaving dclr_test_cur2()\n");
    fflush(stdout);
#endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_test_cur2() occured....\n");
   proc_exit();	
}

/*************** OPEN TEST CURSOR 2***************/
void open_test_cur2()
{
EXEC SQL WHENEVER SQLERROR GOTO err_exit;

EXEC SQL OPEN TEST_CURSOR2;  

#ifdef DEBUG
    printf("leaving open_test_cur2()\n");
    fflush(stdout);
 #endif
  return;

 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at open_test_cur2() occured....\n");
   proc_exit();	
}

/*************** CLOSE TEST CURSOR 2***************/
void close_test_cur2()
 {
	
    EXEC SQL WHENEVER SQLERROR GOTO err_exit;
    EXEC SQL CLOSE TEST_CURSOR2;
	
 #ifdef DEBUG
    printf("leaving close_test_cur2()\n");
    fflush(stdout);
 #endif
  return;
 err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at close_test_cur2() occured....\n");
   proc_exit();	
 }

/*************** FETCH TEST CURSOR 2 ***************/
int fetch_test_cur2()
{
	d_test_code.arr[0]				= '\0';
	d_tech_status.arr[0]			= '\0';
	d_rslt_status.arr[0]			= '\0';
	d_cmnt_status.arr[0]			= '\0';
	d_delta_status.arr[0]			= '\0';
	d_rule_status.arr[0]			= '\0';
	d_qlty_status.arr[0]			= '\0';
	d_spec_rule_status.arr[0]		= '\0';
	d_path_status.arr[0]			= '\0';

	d_test_code.len					= 0;
	d_test_name.len					= 0;
	d_tech_status.len				= 0;
	d_rslt_status.len				= 0;
	d_cmnt_status.len				= 0;
	d_delta_status.len				= 0;
	d_rule_status.len				= 0;
	d_qlty_status.len				= 0;
	d_spec_rule_status.len			= 0;
	d_path_status.len				= 0;

	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL FETCH TEST_CURSOR2 INTO
								d_test_code,
								d_tech_status,
								d_rslt_status,
								d_cmnt_status,
								d_delta_status,
								d_rule_status,
								d_qlty_status,
								d_spec_rule_status,
								d_path_status;

#ifdef DEBUG
         printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
#endif

  if(NODATAFOUND)
    return 0;

	d_test_code.arr[d_test_code.len]				= '\0';
	d_tech_status.arr[d_tech_status.len]			= '\0';
	d_rslt_status.arr[d_rslt_status.len]			= '\0';
	d_cmnt_status.arr[d_cmnt_status.len]			= '\0';
	d_delta_status.arr[d_delta_status.len]			= '\0';
	d_rule_status.arr[d_rule_status.len]			= '\0';
	d_qlty_status.arr[d_qlty_status.len]			= '\0';
	d_spec_rule_status.arr[d_spec_rule_status.len]	= '\0';
	d_path_status.arr[d_path_status.len]			= '\0';

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_test_cur2() occured....\n");
   proc_exit();
}

/********* GET SPEC REGD DATE  **********/
void get_spec_regd_date()
{
	d_patient_id.arr[0] = '\0';
	d_spec_regd_date_time.arr[0] = '\0';

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL 
		SELECT patient_id,to_char(spec_regd_date_time,'dd/mm/yyyy hh24:mi')
  		  INTO :d_patient_id,:d_spec_regd_date_time
  			FROM rl_request_header
  		 WHERE specimen_no = to_number(:d_specimen_no)
  		   AND operating_facility_id = :nd_operating_facility_id;

	d_patient_id.arr[d_patient_id.len] = '\0';
	
return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_spec_regd_date() occured....\n");
   proc_exit();	
}



/********* GET REMARK TEXT  **********/
int get_remark_text()
{
	d_remark_text.arr[0]  = '\0';
	d_remark_text.len = 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL SELECT remark_text
		  	   INTO :d_remark_text
	   	 	   FROM rl_result_modify_reason
	  		  WHERE specimen_no = to_number(:d_specimen_no)
	            AND operating_facility_id = :nd_operating_facility_id
			    AND test_code = :d_test_code
			    AND nvl(remark_code,'x') = nvl(:nd_reason_code,nvl(remark_code,'x'))			      
			    -- AND to_date(to_char(modified_date,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') = to_date(:d_time_stamp,'dd/mm/yyyy hh24:mi');					
	            AND released_date = 
				         (SELECT max(released_date) 
	   	 				    FROM rl_result_modify_reason
	  					   WHERE specimen_no = to_number(:d_specimen_no)
							 AND operating_facility_id = :nd_operating_facility_id
							 AND test_code = :d_test_code
							 AND nvl(remark_code,'x') = nvl(:nd_reason_code,nvl(remark_code,'x'))			      
			      		  );
				
  if(NODATAFOUND)
   return 0;

  d_remark_text.arr[d_remark_text.len]	= '\0';

   return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_remark_text() occured....\n");
   proc_exit();	
}

/********* GET SECTION_NAME  **********/
void get_section_name()
  {
    d_section_name.arr[0]	= '\0';
	d_section_name.len		= 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL SELECT long_name
	INTO :d_section_name
	FROM RL_SECTION_CODE_lang_vw
	WHERE section_code = :nd_sect_code
	AND language_id = :language_id;

#ifdef DEBUG
    printf("leaving dclr_section_cur()\n");
    fflush(stdout);
#endif

	d_section_name.arr[d_section_name.len]	= '\0';

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_section_name() occured....\n");
   proc_exit();	
  }


/********* GET TEST_NAME  **********/
void get_test_name1()
  {
    d_test_name.arr[0]	= '\0';
	d_test_name.len		= 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL SELECT short_desc
	INTO :d_test_name
	FROM RL_TEST_CODE_lang_vw 
	WHERE test_code = :nd_test_code
	AND language_id = :language_id;

	d_test_name.arr[d_test_name.len]	= '\0';

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_test_name1() occured....\n");
   proc_exit();	
  }


/********* GET TEST_NAME 2  **********/
void get_test_name2()
  {
    d_test_name.arr[0]	= '\0';
	d_test_name.len		= 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL SELECT short_desc
	INTO :d_test_name
	FROM RL_TEST_CODE_lang_vw 
	WHERE test_code = :d_test_code
	AND language_id = :language_id;

	d_test_name.arr[d_test_name.len]	= '\0';

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_test_name2() occured....\n");
   proc_exit();	
  }

/*******************************************************************/
void chk_break(int lin)
{
   if((line_no + lin) >= MAX_LINES)
   {
     fprintf(f1,"\f");
	 print_page_header();
   }
}

/************* get_params ***************/
void get_params()
{
	nd_operating_facility_id.arr[0]		=	'\0';
	nd_operating_facility_id.len	=	0;
	nd_sect_code.arr[0]		=	'\0';
	nd_sect_code.len		=	0;					
	nd_from_date.arr[0]		=	'\0';	
	nd_from_date.len		=	0;					
	nd_to_date.arr[0]		=	'\0';		
	nd_to_date.len		=	0;					
	nd_test_type.arr[0]		=	'\0';	
	nd_test_type.len		=	0;					
	nd_test_code.arr[0]		=	'\0';	
	nd_test_code.len		=	0;					
	nd_amended.arr[0]		=	'\0';			
	nd_amended.len		=	0;					
	nd_reason_code.arr[0]		=	'\0';			
	nd_reason_code.len		=	0;					
	nd_technician_review_yn.arr[0]		=	'\0';	
	nd_technician_review_yn.len		=	0;					
	nd_abnormal_review_yn.arr[0]		=	'\0';	
	nd_abnormal_review_yn.len		=	0;					
	nd_normal_review_yn.arr[0]		=	'\0';		
	nd_normal_review_yn.len		=	0;					
	nd_tech_status.arr[0]		=	'\0';			
	nd_tech_status.len		=	0;					
	nd_delta_status.arr[0]		=	'\0';			
	nd_delta_status.len		=	0;					
	nd_qlty_status.arr[0]		=	'\0';			
	nd_qlty_status.len		=	0;					
	nd_cmnt_status.arr[0]		=	'\0';			
	nd_cmnt_status.len		=	0;					
	nd_rslt_status.arr[0]		=	'\0';			
	nd_rslt_status.len		=	0;					
	nd_rule_status.arr[0]		=	'\0';			
	nd_rule_status.len		=	0;					
	nd_spec_rule_status.arr[0]		=	'\0';		
	nd_spec_rule_status.len		=	0;					
	nd_marked_status.arr[0]		=	'\0';		
	nd_marked_status.len		=	0;					

   /* read the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT OPERATING_FACILITY_ID,
            PARAM1,PARAM2,
		    PARAM3,PARAM4,PARAM5,
		    PARAM6,
		    PARAM7,
			PARAM8,PARAM9,PARAM10,
			PARAM11,PARAM12,PARAM13,PARAM14,PARAM15,
			PARAM16,PARAM17,PARAM18
		    INTO 
			:nd_operating_facility_id,
			:nd_sect_code,
			:nd_from_date,	
			:nd_to_date,		
			:nd_test_type,
			:nd_test_code,	
			:nd_amended,			
			:nd_reason_code,
			:nd_technician_review_yn,
			:nd_abnormal_review_yn,
			:nd_normal_review_yn,		
			:nd_tech_status,		
			:nd_delta_status,			
			:nd_qlty_status,			
			:nd_cmnt_status,			
			:nd_rslt_status,			
			:nd_rule_status,			
			:nd_spec_rule_status,
			:nd_marked_status	
		    FROM SY_PROG_PARAM
	        WHERE   UPPER(PGM_ID) = 'RLREXCEP'
		    AND SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND PGM_DATE = :nd_pgm_date;
	
	nd_operating_facility_id.arr[nd_operating_facility_id.len]		=	'\0';
 	nd_sect_code.arr[nd_sect_code.len]		=	'\0';
	nd_from_date.arr[nd_from_date.len]		=	'\0';	
	nd_to_date.arr[nd_to_date.len]		=	'\0';		
	nd_test_type.arr[nd_test_type.len]		=	'\0';	
	nd_test_code.arr[nd_test_code.len]		=	'\0';	
	nd_amended.arr[nd_amended.len]		=	'\0';			
	nd_reason_code.arr[nd_reason_code.len]		=	'\0';			
	nd_technician_review_yn.arr[nd_technician_review_yn.len]		=	'\0';	
	nd_abnormal_review_yn.arr[nd_abnormal_review_yn.len]		=	'\0';	
	nd_normal_review_yn.arr[nd_normal_review_yn.len]		=	'\0';		
	nd_tech_status.arr[nd_tech_status.len]		=	'\0';			
	nd_delta_status.arr[nd_delta_status.len]		=	'\0';			
	nd_qlty_status.arr[nd_qlty_status.len]		=	'\0';			
	nd_cmnt_status.arr[nd_cmnt_status.len]		=	'\0';			
	nd_rslt_status.arr[nd_rslt_status.len]		=	'\0';			
	nd_rule_status.arr[nd_rule_status.len]		=	'\0';			
	nd_spec_rule_status.arr[nd_spec_rule_status.len	]		=	'\0';		
	nd_marked_status.arr[nd_marked_status.len]		=	'\0';		

   if(OERROR)
      disp_message(ORA_MESG,"get_parameter_function2 : \n");
   
   #ifdef DEBUG
   printf("**********Parameters from SY_PROG_PARAM *******************\n");
   printf(" nd_fm_section_code = %s\n",nd_fm_section_code.arr);
   printf(" nd_to_section_code = %s\n",nd_to_section_code.arr);
   printf(" nd_type = %d\n",nd_type);
   printf(" nd_fm_source_type = %s\n",nd_fm_source_type.arr);
   printf(" nd_to_source_type = %s\n",nd_to_source_type.arr);
   printf(" v_date = %s\n",v_date.arr);
   printf(" w_date = %s\n",w_date.arr);
   getchar();  
#endif
  /* delete the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DELETE FROM SY_PROG_PARAM
	        WHERE UPPER(PGM_ID) = 'RLREXCEP'
	        AND SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND PGM_DATE = :nd_pgm_date;

     return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_params() occured....\n");
   proc_exit();
}

/************ GET_HEADER_DETAILS****************/
void get_header_dtls()
{
     d_acc_entity_name.arr[0]   = '\0';
	 d_acc_entity_name.len		= 0;
	 d_user.arr[0]				= '\0';
	 d_user.len                 = 0;
	 d_sysdate.arr[0]			= '\0';
	 d_sysdate.len              = 0;

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;

   EXEC SQL SELECT ACC_ENTITY_NAME,
		   USER,
		   TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')
	       INTO :d_acc_entity_name,
		   :d_user,
		   :d_sysdate
            FROM SY_ACC_ENTITY_lang_vw
			WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			AND language_id = :language_id;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';

#ifdef DEBUG
   printf("d_acc_entity_name = %s\n", d_acc_entity_name.arr);
   printf("d_user = %s\n", d_user.arr);
   printf("d_sysdate = %s\n", d_sysdate.arr);
#endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_header_dtls() occured....\n");
   proc_exit();
}


/*************** GENERATE FILE NAME ***************/
void gen_file_name()
{
  	 /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 strcat(nd_file_name.arr,OUTPUT_FILE_NAME);
	 nd_file_name.len = strlen(nd_file_name.arr);

	 if((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
	   disp_message(ERR_MESG,string_var) ;
       proc_exit();
     }
}

/*********** PRINT REPORT HEADER **************/

void print_rep_header()
{
  char			nd_wrk_test_ind[30],
				nd_fm_wrktest_desc[30],
				nd_amended_desc[30];

	get_section_name();
   
	get_test_name1();

  if(strcmp(nd_test_type.arr,"I") == 0)
	//strcpy(nd_wrk_test_ind,"INDIVIDUAL TEST");
	strcpy(nd_wrk_test_ind,local_legend[32]);
  else
		if(strcmp(nd_test_type.arr,"G") == 0)
			//strcpy(nd_wrk_test_ind,"GROUP TEST");
			strcpy(nd_wrk_test_ind,local_legend[33]);
		else 
			if(strcmp(nd_test_type.arr,"W") == 0)
				//strcpy(nd_wrk_test_ind,"WORKGROUP");
				strcpy(nd_wrk_test_ind,local_legend[34]);

  if(strcmp(nd_test_code.arr, "") == 0)
    //strcpy(nd_fm_wrktest_desc, "ALL");
	strcpy(nd_fm_wrktest_desc, local_legend[35]);
  else
	strcpy(nd_fm_wrktest_desc, nd_test_code.arr);

  get_version_no();   ///// added 01.07.2003

  fprintf(f1,"%s\n",d_version.arr);

  fprintf(f1,"\n\n\n\n");
  fprintf(f1,"        ");
  
  //fprintf(f1,"INPUT PARAMETERS :\n");
  fprintf(f1,"%16.16 :\n",local_legend[3]);

  fprintf(f1,"        ");
  fprintf(f1,"------------------\n\n");
  fprintf(f1,"                ");
  
  //fprintf(f1,"DEPARTMENT        : %s\n", d_section_name.arr);
  fprintf(f1,"%10.10s        : %s\n", local_legend[4],d_section_name.arr);

  fprintf(f1,"                ");  
  
  //fprintf(f1,"EVENT PERIOD FROM : %s\n", nd_from_date.arr);
  EXEC SQL EXECUTE
  DECLARE
	t_date   date;
  BEGIN
	GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_from_date,'DD/MM/YYYY'), :language_id , t_date);
	:nd_from_date1 := to_char(t_date,'DD/MM/YYYY');
  END;
  END-EXEC;

  fprintf(f1,"%17.17s : %s\n", local_legend[5],nd_from_date1.arr);

  fprintf(f1,"                               ");
  
  //fprintf(f1,"TO : %s\n", nd_to_date.arr);
  EXEC SQL EXECUTE
  DECLARE
	t_date   date;
  BEGIN
	GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_to_date,'DD/MM/YYYY'), :language_id , t_date);
	:nd_to_date1 := to_char(t_date,'DD/MM/YYYY');
  END;
  END-EXEC;

  fprintf(f1,"%2.2s : %s\n", local_legend[6],nd_to_date1.arr);

  //fprintf(f1,"                TEST              : %s ; %s %s\n\n", nd_wrk_test_ind,nd_fm_wrktest_desc,d_test_name.arr);
  fprintf(f1,"                %4.4s              : %s ; %s %s\n\n", local_legend[7],nd_wrk_test_ind,nd_fm_wrktest_desc,d_test_name.arr);
 
  if (strcmp(nd_amended.arr,"A") == 0)
	//fprintf(f1,"                AMENDED ONLY\n\n");
	fprintf(f1,"                %12.12s\n\n",local_legend[8]);
  else
	fprintf(f1,"\n");

	//fprintf(f1,"                REVIEW:\n");
	fprintf(f1,"                %6.6s:\n",local_legend[9]);
	
	//fprintf(f1,"\t\t\tTechnician             : ");
	fprintf(f1,"\t\t\t%10.10s             : ",local_legend[10]);

	if (strcmp(nd_technician_review_yn.arr,"Y") == 0)
		//fprintf(f1,"Yes\n");
		fprintf(f1,"%3.3s\n",local_legend[11]);
	else
		//fprintf(f1,"No\n");
		fprintf(f1,"%2.2s\n",local_legend[12]);

	//fprintf(f1,"\t\t\tPathologist(Abnormal)  : ");
	fprintf(f1,"\t\t\t%11.11s(%8.8s)  : ",local_legend[13],local_legend[14]);
	if (strcmp(nd_abnormal_review_yn.arr,"Y") == 0)
		//fprintf(f1,"Yes\n");
		fprintf(f1,"%3.3s\n",local_legend[11]);
	else
		//fprintf(f1,"No\n");
		fprintf(f1,"%2.2s\n",local_legend[12]);

	//fprintf(f1,"\t\t\t\Pathologist(Normal)    : ");
	fprintf(f1,"\t\t\t\%11.11s(%6.6s)    : ",local_legend[13],local_legend[15]);
	if (strcmp(nd_normal_review_yn.arr,"Y") == 0)
		//fprintf(f1,"Yes\n");
		fprintf(f1,"%3.3s\n",local_legend[11]);
	else
		//fprintf(f1,"No\n");
		fprintf(f1,"%2.2s\n",local_legend[12]);

  fprintf(f1,"\n\n\n");
  //fprintf(f1,"[T -  Reference Range] [D - Delta] [Q - Quality] [C - Comment] [S - Result  Comment] [L - Rule] [M - 1 in N Count] \n[A - Pathologist Review, N - Review]\n");
  fprintf(f1,"[T -  %15.15s] [D - %5.5s] [Q - %7.7s] [C - %7.7s] [S - %15.15s] [L - %4.4s] [M - %12.12s] \n[A - %18.18s, N - %6.6s]\n",local_legend[16],local_legend[17],local_legend[18],local_legend[19],local_legend[20],local_legend[21],local_legend[22],local_legend[23],local_legend[24]);
  fprintf(f1,"\f");
}

/************ PRINT PAGE HEADER ****************/
void print_page_header()
{
 int i;
 int spc_len;

 line_no = 0;
 page_no++;

 fprintf(f1,"%c&l1O",ESC);
 fprintf(f1,"%c&k4S",ESC);
 fprintf(f1,"\n") ;	
 fprintf(f1,"MDL : RL");
 spc_len = (94 - (strlen(d_acc_entity_name.arr)))/2;
 
 for(i=1;i<=spc_len;i++)
 fprintf(f1," ");
 
 fprintf(f1,"%s", d_acc_entity_name.arr);
 
 for(i=1;i<=spc_len;i++)
 fprintf(f1," ");
 
 //fprintf(f1,"%s", d_sysdate.arr);
 EXEC SQL EXECUTE
	DECLARE
		t_date   date;
	BEGIN
		t_date := GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
		:d_sysdate1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
	END;
 END-EXEC;
 fprintf(f1,"%s", d_sysdate1.arr);

 fprintf(f1,"\n");

 fprintf(f1,"OPR : %s", d_user.arr);
 
 //fprintf(f1,"                            Specimen Reviewed/Amended List                                      ") ;
 fprintf(f1,"                            %30.30s                                      ",local_legend[1]) ;

 //fprintf(f1,"Page : %4d", page_no);
 fprintf(f1,"%4.4s : %4d", local_legend[2],page_no);

 fprintf(f1,"\n");
 fprintf(f1,"REP : RLREXCEP");
 fprintf(f1,"\n");
 fprintf(f1,"-------------------------------------------------------------------------------");
 fprintf(f1,"---------------------------------------------------") ;
 fprintf(f1,"\n");

  if (page_no > 1) 
  { 
	
	//fprintf(f1,"Specimen No Regd Date Time    Patient ID  Released Date Time   Test Code  |<--Failed In-->| Modify Reason\n");
	fprintf(f1,"%11.11s %14.14s    %10.10s  %18.18s   %9.9s  |<--%9.9s-->| %13.13s\n",local_legend[25],local_legend[26],local_legend[27],local_legend[28],local_legend[29],local_legend[30],local_legend[31]);

	fprintf(f1,"=================================================================================================================\n");
	line_no = line_no + 2;
  }
 line_no = line_no + 6;
}


/************ PRINT DETAIL RECORD ****************/
void print_dtl_record()
{
 fprintf(f1,"%-12.12s", d_specimen_no.arr);
 
 //fprintf(f1,"%-18.18s", d_spec_regd_date_time.arr); 
 EXEC SQL EXECUTE
 DECLARE
	t_date   date;
 BEGIN
	GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_spec_regd_date_time,'DD/MM/YYYY'), :language_id , t_date);
    :d_spec_regd_date_time1 := to_char(t_date,'DD/MM/YYYY');
 END;
 END-EXEC;
 fprintf(f1,"%-18.18s", d_spec_regd_date_time1.arr); 

 fprintf(f1,"%-12.12s", d_patient_id.arr); 
 
 //fprintf(f1,"%-21.21s", d_time_stamp.arr); 
 EXEC SQL EXECUTE
 DECLARE
	t_date   date;
 BEGIN
	GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_time_stamp,'DD/MM/YYYY'), :language_id , t_date);
    :d_time_stamp1 := to_char(t_date,'DD/MM/YYYY');
 END;
 END-EXEC;
 fprintf(f1,"%-21.21s", d_time_stamp1.arr);
  
 fprintf(f1,"%-12.12s", d_test_code.arr); 
 fprintf(f1,"%-2.2s", d_tech_status.arr); 
 fprintf(f1,"%-2.2s", d_delta_status.arr); 
 fprintf(f1,"%-2.2s", d_qlty_status.arr); 
 fprintf(f1,"%-2.2s", d_cmnt_status.arr); 
 fprintf(f1,"%-2.2s", d_rslt_status.arr); 
 fprintf(f1,"%-2.2s", d_rule_status.arr); 
 fprintf(f1,"%-2.2s", d_spec_rule_status.arr); 
 fprintf(f1,"%-2.2s", d_path_status.arr); 
 fprintf(f1," %s", d_remark_text.arr); 

 fprintf(f1,"\n");
 line_no = line_no + 1;
 chk_break(2);
}


////////////////// 

get_version_no()
{

////////    This function is used to get the version number of the product.
///////      Added by Srinivas on 1 July 2003

     d_version_no.arr[0] = '\0';
     d_version_no.len    =  0;

     strcpy(d_version.arr,"VER : ");

	 EXEC SQL EXECUTE 
	      begin
			if SM_INSTALLATION_TAB_CHECK THEN
			   :l_tab_exists := 1;
			else
			   :l_tab_exists := 0;
			end if;
		  end;
	 END-EXEC;


    if(l_tab_exists) 
    {
	    EXEC SQL SELECT VERSION_NO INTO :d_version_no 
                 FROM   SM_INSTALLATION; 
        d_version_no.arr[d_version_no.len] = '\0';
    }
    else
	    strcpy(d_version_no.arr,"2.1");

	    strcat(d_version.arr,d_version_no.arr);


    if(OERROR)
	{
	    strcpy(d_version_no.arr,"2.1");
	    strcat(d_version.arr,d_version_no.arr);
    }

}
//////////// UPTO HERE 

/*** added for globalisation ******/
print_space(int aa, int bb, int cc)
{
	if (cc ==1)
	{
  		for(i=1;i <= (aa - bb) ;i++)
		{
			fprintf(f1,"%s"," ");
		}	
	}
	else if (cc ==0)
	{
  		for(i= (aa - bb);i <= aa ;i++)
		{
			fprintf(f1,"%s","-");
		}	
	}
}
/*** added for globalisation ******/  



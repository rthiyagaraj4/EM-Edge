/****************************OCS MEDICOM ver 1.0*****************************
*  File	: rlrcrbat.pc
   Author : Amjad S.
   Date Created : 21/07/2002
   
   
*  Ver 1.10.01   
   
   Modified by   : HAMEED
   Modified date :31.05.2003

*  Purpose : To generate a Specimen List. 
  
*  Input Parameters : 
              Command line inputs
		      1. Usr_id/Password
              2. Session id
		      3. Program Date

              Parameters from SY_PROG_PARAM table 
              4. Batch No.
              5. Batch Date
              6. Section Code
  
*  Table Accessed : RL_REQUEST_HEADER,RL_BATCH_DETAIL
		    MP_PATIENT_MAST,RL_PATIENT_MAST. 

*  Output File : rlrsplst.lis
 ****************************************************************************/  

#include <stdio.h>
#include <math.h>
#include <string.h> 
#include <stdlib.h>
#include "gl.h"

#define MAX_LINES 43
#define REP_WIDTH 125
#define OERROR (sqlca.sqlcode < 0)
#define NODATAFOUND sqlca.sqlcode==1403
#define VER  "VER : 1.10.01\n"
#define ESC 0x1B

/*#define DEBUG 1*/ 



EXEC SQL BEGIN DECLARE SECTION;

       /* increased the length all varchar variables by one to take care */
       /* for null termination */
	VARCHAR     nd_operating_facility_id [3],
	            uid_pwd		             [91],
                nd_file_name             [151],
                nd_user	                 [31],
                nd_file_no               [15],
                nd_printer_name          [16],

				d_version_no			 [20],
				d_version  			     [20],


        /* Variables to recieve data from specimen register cursor*/
	    d_specimen_no           [21],
		d_patient_name          [240],
		d_patient_name_1		[240],
		d_patient_name_2		[240],
		d_patient_name_3		[240],
		d_patient_name_4		[240],
		d_patient_id            [21],
		d_source_code           [12],
		d_source_type            [12], /* addded by madhusudhan for 67676 */
        d_episode_type          [2],
        d_req_comment_1         [45],
        d_req_comment_2         [45],
        d_req_comment_3         [45],
		d_consultant_code       [16],
		d_spec_date             [21],
		d_spec_date1             [21],
		l_spec_date             [21],
		d_dob                   [11],
		d_date_of_birth			[31],
		d_actual_dob_yn			[2],
		d_sex                   [2],
		d_specimen_type_code    [5],

		d_specimen_type_desc	[41],
		d_category_code         [5],
		d_category_year         [5],
		d_category_num          [16],
		d_assign_to             [31],

                /* input parameters to main() */
                nd_session_id      	[16],
		nd_pgm_date	   	[20],
		nd_sp_prfx				[3],


		/* input parameters through from SY_PROG_PARAM */
 		nd_batch_no             [16], 
 		nd_batch_date	        [21],
 		nd_batch_date1	        [21],
		nd_work_group_code      [11], // added by preetham on 13/11/2007 wrt SCF-2016
 		nd_work_group_desc      [41], // added by preetham on 13/11/2007 wrt SCF-2016
		nd_test_code		[11], //added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240
		nd_test_code_desc		[41], //added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240
        nd_dept                 [2],
		d_section_name			[41],

/***************** added on 18/6/2002 for KN ENHANCEMENT by Ananthi************/
		d_location				[11],

		/* for header routine */
	    //d_acc_entity_name        [61],
		d_acc_entity_name        [300],
		d_user                   [31],
		d_sysdate                [17],
		d_sysdate1                [17],
		l_translated_value		 [100],
		language_id			[5];



		/*  For Patient Age SYSDATE, MTHS amjad 17/7/2002*/
   VARCHAR  tday				[30],
			t_days				[30],
			mths				[30],
			mths1				[30],
			t_age				[30];

	float mt;


int l_specimen_length = 0;
int l_count = 0;

int  l_tab_exists ;
int i;
char local_legend[100][100];
char hdr_line1[REP_WIDTH+1],
     hdr_line2[REP_WIDTH+1],
     hdr_line3[REP_WIDTH+1];
int col;
char rep_title1[100] ;
char rep_title2[60];
int rec_len;




EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE SQLCA.H;
EXEC SQL INCLUDE SQLDA.H;
#include <winproc.h>

int   line_no=0, page_no=0;
int   first_page_flag=1;
long  nd_totl_specimens      = 0;

int   l_length = 0;
int   i;

int	  l_len = 30;
char  l_delimeter;

/* summary fields for calculating No. of records */ 
void print_page_header();
void print_col_heading();
FILE *f1;
char string_var[100];

void proc_main(argc, argv)
int argc;
char *argv[];
{
  void  get_params(),
  	    get_header_dtls(),
  	    dclr_specimen_register(),
  	    do_report();
 
   strcpy(uid_pwd.arr, argv[1]);
   uid_pwd.len = strlen(uid_pwd.arr); 

   strcpy(nd_session_id.arr, argv[2]);
   nd_session_id.len = strlen(nd_session_id.arr); 

   strcpy(nd_pgm_date.arr, argv[3]);
   nd_pgm_date.len = strlen(nd_pgm_date.arr); 

   strcpy(OUTPUT_FILE_NAME, argv[5]);

   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL CONNECT :uid_pwd;  

   set_meduser_role();
   strcpy(language_id.arr,l_language_id.arr);
	language_id.len =l_language_id.len;
	language_id.arr[l_language_id.len]='\0';
	
   get_legend_value(25);

   #ifdef DEBUG
    printf("Connected to ORACLE as user: %s \n", uid_pwd.arr);
   #endif  


   #ifdef DEBUG
    printf("I am here main() 0\n");
    fflush(stdout);
   #endif  

   get_params();

   #ifdef DEBUG
    printf("I am here main() 1");
    fflush(stdout);
   #endif  
   gen_file_name();

   get_header_dtls();

   #ifdef DEBUG
    printf("I am here main() 2");
    fflush(stdout);
   #endif  

   dclr_specimen_register();

   #ifdef DEBUG
    printf("I am here main() 3");
    fflush(stdout);
   #endif  

   do_report();


   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL COMMIT WORK;

   fclose(f1);
   return ;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at main() occured....\n");
   proc_exit();
}   


/* get the parameters from the SY_PROG_PARM table and */
/* delete the record after reading it.                 */
void get_params()
{
   /* read the parameter record */


   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT	
                    OPERATING_FACILITY_ID,
					PARAM1,
					PARAM2,
					PARAM3,
					PARAM4,
				/*	PARAM5	Commented by Durai Rajkumar against RL-ICN-Common-6323 on 04/11/08  */
					PARAM6, //added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240
					PARAM7  //added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240 
            INTO :nd_operating_facility_id,
			     :nd_batch_no, 
		         :nd_batch_date, 
   		         :nd_dept,
				 :nd_work_group_code,
				/* :nd_work_group_desc	Commented by Durai Rajkumar against RL-ICN-Common-6323 on 04/11/08  */
				:nd_test_code, //added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240
				 :nd_test_code_desc //added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240
            FROM SY_PROG_PARAM
	        WHERE   PGM_ID = 'RLRCRBAT'
		    AND SESSION_ID = TO_NUMBER(:nd_session_id)
		    AND PGM_DATE = :nd_pgm_date;

    /* Added by Durai Rajkumar against RL-ICN-Common-6323 on 04/11/08  */

	if (nd_work_group_code.len > 0)
	EXEC SQL 
		SELECT	long_desc
		INTO	:nd_work_group_desc
		FROM	rl_outst_work_group_lang_vw
		WHERE	operating_facility_id	= :nd_operating_facility_id
		AND		section_code			= :nd_dept
		AND		outst_work_group_code	= :nd_work_group_code
		AND		language_id				= :language_id;
    if (OERROR)
	return 0; 
    if (NO_DATA_FOUND)
	return 0; 

	/* Ends against RL-ICN-Common-6323 */

   nd_operating_facility_id.arr[nd_operating_facility_id.len] = '\0';
   nd_batch_no.arr[nd_batch_no.len]		= '\0';
   nd_batch_date.arr[nd_batch_date.len]	= '\0';
   nd_work_group_code.arr[nd_work_group_code.len]		= '\0'; // added by preetham on 13/11/2007 wrt SCF-2016
   nd_work_group_desc.arr[nd_work_group_desc.len]		= '\0'; // added by preetham on 13/11/2007 wrt SCF-2016
   nd_test_code.arr[nd_test_code.len]			= '\0';//added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240
   nd_test_code_desc.arr[nd_test_code_desc.len]		= '\0';//added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240
   nd_dept.arr[nd_dept.len]				= '\0';	 
  
  #ifdef DEBUG
   printf("**********Parameters from SY_PROG_PARAM *******************\n");
   printf("nd_fr_specimen_no : %s\n", nd_fr_specimen_no.arr);
   printf("nd_to_specimen_no :%s\n", nd_to_specimen_no.arr);
   printf("nd_fr_process_date :%s\n", nd_fr_process_date.arr);
   printf("nd_to_process_date : %s\n", nd_to_process_date.arr);
  #endif

  /* delete the parameter record */
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL DELETE SY_PROG_PARAM
	   WHERE PGM_ID = 'RLRCRBAT'
	         AND SESSION_ID = :nd_session_id
		 AND PGM_DATE   = :nd_pgm_date;

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_params() occured....\n");
   proc_exit();
}

/* get the header details */
void get_header_dtls()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT ACC_ENTITY_NAME, /* description of the institution */
		    USER,
		    TO_CHAR(SYSDATE, 'DD/MM/YYYY HH24:MI')
	        INTO :d_acc_entity_name,
		    :d_user,
		    :d_sysdate
            FROM SY_ACC_ENTITY_LANG_VW
            WHERE ACC_ENTITY_ID = :nd_operating_facility_id
			AND   LANGUAGE_ID = :language_id;

  d_acc_entity_name.arr[d_acc_entity_name.len] = '\0';
  d_user.arr[d_user.len]                       = '\0';
  d_sysdate.arr[d_sysdate.len]                 = '\0';

  #ifdef DEBUG
   printf("d_acc_entity_name = %s\n", d_acc_entity_name.arr);
   printf("d_user = %s\n", d_user.arr);
   printf("d_sysdate = %s\n", d_sysdate.arr);
  #endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_header_dtls() occured....\n");
   proc_exit();
}
 

/* function declares SPECIMEN_REGISTER cursor */
void dclr_specimen_register()
{

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  
  EXEC SQL DECLARE SPECIMEN_REGISTER CURSOR FOR
     SELECT SPECIMEN_NO,PATIENT_ID,EPISODE_TYPE,SOURCE_CODE,SOURCE_TYPE,
	    CONSULTANT_CODE,
		TO_CHAR(SPEC_REGD_DATE_TIME,'DD/MM/YYYY HH24:MI'),
		TO_CHAR(SPEC_REGD_DATE_TIME,'DD/MM/YYYY'),
	    REQUEST_COMMENT_DESC1,REQUEST_COMMENT_DESC2,REQUEST_COMMENT_DESC3,
            SPECIMEN_TYPE_CODE,CATEGORY_CODE,CATEGORY_YEAR,CATEGORY_NUMBER,
			ASSIGN_TO
       FROM RL_REQUEST_HEADER  
      WHERE SPECIMEN_NO in
					(SELECT specimen_no
		               FROM rl_batch_detail
		              WHERE batch_no = :nd_batch_no
		                AND to_date(to_char(batch_date,'dd/mm/yyyy hh24:mi'),'dd/mm/yyyy hh24:mi') = to_date(:nd_batch_date,'dd/mm/yyyy hh24:mi')
		                AND section_code = :nd_dept
						AND operating_facility_id = :nd_operating_facility_id)
        AND OPERATING_FACILITY_ID = :nd_operating_facility_id
      ORDER BY SPECIMEN_NO;

     
     EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  
     EXEC SQL OPEN SPECIMEN_REGISTER;
     
  
  #ifdef DEBUG
    printf("leaving dclr_specimen_register()\n");
  #endif
 
  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at dclr_specimen_register() occured....\n");
   proc_exit();
}


/* prints the master-detail record until the cursor is empty */
void do_report()
{
  void prepare_new_page();
  void print_detl_rec();
  void end_report();
  void print_rep_header();
  int fetch_specimen_register();
  int still_rec_left;


  #ifdef DEBUG
      printf("entered do_report()\n");
  #endif
  
  prepare_new_page();
  print_rep_header() ;
  prepare_new_page();

  /* read the first cursor record */
  
  still_rec_left = fetch_specimen_register();

  #ifdef DEBUG
      printf("entered do_report()\n");
      fflush(stdout);
  #endif

  while(still_rec_left)
  {
       if(line_no + 3 >= MAX_LINES)
       {
          prepare_new_page();
          print_detl_rec();
       }
       else 
          print_detl_rec();

    nd_totl_specimens += 1;
    still_rec_left = fetch_specimen_register();
  }

//  if(line_no + 3 > MAX_LINES)
  if(line_no + 6 > MAX_LINES)
  {
    prepare_new_page();
	print_total_request();
  }
  else
  {
	print_total_request();
  }

  #ifdef DEBUG
      printf("entered do_report outside while()\n");
      fflush(stdout);
  #endif
  end_report();
}

print_total_request()
{

   fprintf(f1, "\n");
   fprintf(f1, "--------------------------------------------------------------------");
   fprintf(f1, "----------------------------------------------------------------");
   fprintf(f1, "\n");
   fprintf(f1, "%14.14s : %ld",local_legend[2], nd_totl_specimens);
   fprintf(f1, "\n");
   fprintf(f1, "--------------------------------------------------------------------");
   fprintf(f1, "----------------------------------------------------------------");
   
}

/* prepares for the new page */
void prepare_new_page()
{
   #if DEBUG
     printf("entered prepare_new_page\n");
     fflush(stdout);
   #endif
   page_no += 1; /* incr. by 1 to move to subsequent pages */
   line_no = 0;
   if (page_no != 1)
   fprintf(f1,"");
   print_page_header();
   if (page_no != 1) 
   print_col_heading(); 
}

/* fetches the next record from SPECIMEN REGISTER CURSOR */
/* returns 0 if the end of cursor is reached else returns 1. */
int fetch_specimen_register()
{

void get_location_all();

  d_specimen_no.arr[0]        = '\0';
  d_specimen_type_code.arr[0] = '\0';
  d_patient_id.arr[0]         = '\0';
  d_source_code.arr[0]        = '\0';
  d_source_type.arr[0]        = '\0';
  d_consultant_code.arr[0]    = '\0';
  d_spec_date.arr[0]          = '\0';
  l_spec_date.arr[0]          = '\0';
  d_req_comment_1.arr[0]      = '\0';
  d_req_comment_2.arr[0]      = '\0';
  d_req_comment_3.arr[0]      = '\0';
  d_category_code.arr[0]      = '\0';
  d_category_year.arr[0]      = '\0';
  d_category_num.arr[0]       = '\0';
  d_assign_to.arr[0]          = '\0';

  d_specimen_no.len           = 0;
  d_specimen_type_code.len    = 0;
  d_patient_id.len         = 0;
  d_source_code.len        = 0;
  d_source_type.len        = 0;
  d_consultant_code.len    = 0;
  d_spec_date.len          = 0;
  l_spec_date.len          = 0;
  d_req_comment_1.len      = 0;
  d_req_comment_2.len      = 0;
  d_req_comment_3.len      = 0;
  d_category_code.len      = 0;
  d_category_year.len      = 0;
  d_category_num.len       = 0;
  d_assign_to.len          = 0;

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  EXEC SQL FETCH SPECIMEN_REGISTER INTO
                 d_specimen_no, d_patient_id,d_episode_type,
		 d_source_code,d_source_type,d_consultant_code,d_spec_date,l_spec_date,
		 d_req_comment_1,d_req_comment_2,d_req_comment_3,
		 d_specimen_type_code,d_category_code,
		 d_category_year,d_category_num,d_assign_to ;
   #ifdef DEBUG
    printf("SQLCA code after fetch :%d\n", sqlca.sqlcode);
   #endif

  if (NODATAFOUND)
    return 0;

  d_specimen_no.arr[d_specimen_no.len]      = '\0';
  d_patient_id.arr[d_patient_id.len]        = '\0';
  d_episode_type.arr[d_episode_type.len]    = '\0';
  d_source_code.arr[d_source_code.len]      = '\0';
  d_source_type.arr[d_source_type.len]      = '\0';
  d_consultant_code.arr[d_consultant_code.len]    = '\0';
  d_spec_date.arr[d_spec_date.len]          = '\0';
  l_spec_date.arr[l_spec_date.len]          = '\0';
  d_req_comment_1.arr[d_req_comment_1.len]  = '\0';
  d_req_comment_2.arr[d_req_comment_2.len]  = '\0';
  d_req_comment_3.arr[d_req_comment_3.len]  = '\0';
  d_specimen_type_code.arr[d_specimen_type_code.len] = '\0';
  d_category_code.arr[d_category_code.len]  = '\0';
  d_category_year.arr[d_category_year.len]  = '\0';
  d_category_num.arr[d_category_num.len]    = '\0';
  d_assign_to.arr[d_assign_to.len]          = '\0';


#ifdef DEBUG
 printf("d_specimen_no = %s\n",d_specimen_no.arr);
 printf("d_patient_id = %s\n",d_patient_id.arr);
 printf("d_episode_type = %s\n",d_episode_type.arr);
 printf("d_source_code = %s\n",d_source_code.arr);
 printf("d_source_type = %s\n",d_source_type.arr);
 printf("d_consultant_code = %s\n",d_consultant_code.arr);
 printf("d_spec_date = %s\n",d_spec_date.arr);
 printf("d_req_comment_1 = %s\n",d_req_comment_1.arr);
 printf("d_req_comment_2 = %s\n",d_req_comment_2.arr);
 printf("d_req_comment_3 = %s\n",d_req_comment_3.arr);
#endif

get_location_all();

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at fetch_specimen_register() occured....\n");
   proc_exit();
}

void get_location()
{
  d_location.arr[0] = '\0';
  d_location.len    =  0;

   EXEC SQL SELECT location
	    INTO :d_location
        FROM rl_patient_mast
		WHERE PATIENT_ID = :d_patient_id;
		/* AND   OPERATING_FACILITY_ID = :nd_operating_facility_id; */


  d_location.arr[d_location.len] = '\0';

  return;

}


void get_location_all()
{
  d_location.arr[0] = '\0';
  d_location.len    =  0;
  
   if (strcmp(d_source_type.arr,"W")==0 )
    EXEC SQL SELECT SHORT_DESC INTO :d_location
                        FROM IP_NURSING_UNIT_LANG_VW 
                        WHERE FACILITY_ID = :nd_operating_facility_id
                          AND NURSING_UNIT_CODE = :d_source_code
                          AND LANGUAGE_ID = :language_id;
    if (strcmp(d_source_type.arr,"C")==0 )
    EXEC SQL SELECT SHORT_DESC INTO :d_location
                         FROM OP_CLINIC_LANG_VW
					     WHERE FACILITY_ID = :nd_operating_facility_id
						 AND CLINIC_CODE = :d_source_code
						 AND LANGUAGE_ID = :language_id;
    if (strcmp(d_source_type.arr,"R")==0 )			
	EXEC SQL SELECT SHORT_DESC INTO :d_location
                         FROM RL_REFERRAL_LANG_VW
						WHERE REFERRAL_CODE = :d_source_code
						AND    LANGUAGE_ID = :language_id;
	if (strcmp(d_source_type.arr,"E")==0 )						
    EXEC SQL SELECT SHORT_DESC INTO :d_location
                        FROM RL_REFERRAL_LANG_VW
                        WHERE REFERRAL_CODE = :d_source_code
                        AND    LANGUAGE_ID = :language_id;
    else 				
     EXEC SQL SELECT location
	    INTO :d_location
        FROM rl_patient_mast
		WHERE PATIENT_ID = :d_patient_id;
		/* AND   OPERATING_FACILITY_ID = :nd_operating_facility_id; */


  d_location.arr[d_location.len] = '\0';

  return;

}


/* print the finishing line of the report */
void end_report()
{
//  fprintf(f1,"\n\n\n");
  fprintf(f1,"\n");
  fprintf(f1,"\n");
  //fprintf(f1,"                                                   ");
  //fprintf(f1,"** %s **",local_legend[3]);
  rec_len = strlen(local_legend[3]);//added for globalisation
  print_space(REP_WIDTH/2, rec_len/2+2,1);//added for globalisation
  fprintf(f1,"** %s **",local_legend[3]);
  
  fprintf(f1,"");
}

/* to print the detailed record */
void print_detl_rec()
{
    int  get_patient_dtl(); 
    void get_referral_patient_dtl();
	char l_age_legend[5];
    int i = 0;

	
    if(strcmp(d_episode_type.arr,"I")==0 || strcmp(d_episode_type.arr,"O")==0 || strcmp(d_episode_type.arr,"H")==0)
    { 
  	  i=get_patient_dtl();
      
    } 
    else
    if(strcmp(d_episode_type.arr,"R")==0)
      get_referral_patient_dtl();

    if(d_specimen_type_code.len)
	{  d_specimen_type_desc.arr[0] = '\0';
	   d_specimen_type_desc.len = 0;
       get_spec_type_desc();
	}

    patient_age();

	if (strcmp(d_actual_dob_yn.arr, "Y") == 0)
		strcpy(l_age_legend, "");
	else
		strcpy(l_age_legend, "*");

	l_delimeter = ' ';
	rl_split_text(d_patient_name.arr,l_delimeter,l_len,d_patient_name_1.arr,
			      d_patient_name_2.arr,d_patient_name_3.arr,d_patient_name_4.arr);

    
	fprintf(f1,"%-18.18s%-31s%-21s%-1.1s%-12.12s%-4s%-12s%-12s%-7s\n",
	d_specimen_no.arr,d_patient_name_1.arr,d_patient_id.arr,l_age_legend,t_age.arr,
	d_sex.arr,d_source_code.arr,d_location.arr,d_consultant_code.arr);
	
	fprintf(f1,"%-18.18s%-31s%s\n"," ",d_patient_name_2.arr,d_specimen_type_desc.arr);

	line_no += 2;
    
	/********Addded by babu***************/
	        
		EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:d_spec_date,'DD/MM/YYYY HH24:MI'), :language_id , t_date);
				
				:d_spec_date1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
				END;
			END-EXEC;

		//End
/*****************end************************/   
	
	fprintf(f1,"%-18s",d_spec_date1.arr);
	line_no += 1;
     

	if (strlen(d_category_num.arr))
	{
	fprintf(f1,"%5.5s/%-4.4s/%-11.11s%-9.9s%s",
				d_category_code.arr,d_category_year.arr,
				d_category_num.arr," ",d_assign_to.arr);

	}
    else 
	if (strlen(d_assign_to.arr))
	{
	fprintf(f1,"%-31s%s"," ",d_assign_to.arr);
	}   
    
	fprintf(f1,"\n");

    if(strlen(d_req_comment_1.arr))
    {
       fprintf(f1,"%82.82s%-41s\n"," ",d_req_comment_1.arr);
       line_no += 1;
    }
    if(strlen(d_req_comment_2.arr))
    {
       fprintf(f1,"%82.82s%-41s\n"," ",d_req_comment_2.arr);
       line_no += 1;
    }
    if(strlen(d_req_comment_3.arr))
    {
       fprintf(f1,"%82.82s%-41s\n"," ",d_req_comment_3.arr);
       line_no += 1;
    }
	/*
    fprintf(f1,"\n");
    line_no += 1;
	*/

return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at print_detl_rec() occured....\n");
   proc_exit();
}

/* Function to fetch the Specimen Type description */
get_spec_type_desc()
{
  d_specimen_type_desc.arr[0] = '\0';
  d_specimen_type_desc.len = 0;

  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  EXEC SQL SELECT SPECIMEN_DESC
	         INTO :d_specimen_type_desc
             FROM RL_SPECIMEN_TYPE_CODE_LANG_VW
	        WHERE SPECIMEN_TYPE_CODE = :d_specimen_type_code
			AND   LANGUAGE_ID = :language_id;

  d_specimen_type_desc.arr[d_specimen_type_desc.len] = '\0';

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_spec_type_desc() occured....\n");
   proc_exit();
}

/* Function to fetch the REFERRAL PATIENT details */
void get_referral_patient_dtl()
{
  EXEC SQL WHENEVER SQLERROR GOTO err_exit;
  EXEC SQL SELECT SUBSTR(DECODE (:language_id, 'en',  SHORT_NAME,  NVL(SHORT_NAME_loc_lang, SHORT_NAME)),1,25) short_name,
			 TO_CHAR(DATE_OF_BIRTH,'DD/MM/YY'),
			 TO_CHAR(DATE_OF_BIRTH,'DD/MM/YYYY'),
			 SEX,NVL(actual_dob_yn, 'N')
	         INTO  :d_patient_name,:d_dob,:d_date_of_birth,:d_sex,:d_actual_dob_yn
             FROM  RL_PATIENT_MAST
	        WHERE  PATIENT_ID = :d_patient_id;
		    /* AND  OPERATING_FACILITY_ID = :nd_operating_facility_id; */

  d_patient_name.arr[d_patient_name.len]     = '\0';
  d_dob.arr[d_dob.len]                       = '\0';
  d_actual_dob_yn.arr[d_actual_dob_yn.len]		 = '\0';
  d_date_of_birth.arr[d_date_of_birth.len]	 = '\0';
  d_sex.arr[d_sex.len]                       = '\0';

  #ifdef DEBUG
   printf("d_patient_name= %s\n", d_patient_name.arr);
  #endif

  return;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_referral_patient_dtl() occured....\n");
   proc_exit();
}

/* Function to fetch the INPATIENT details */
int get_patient_dtl()
{
   EXEC SQL WHENEVER SQLERROR GOTO err_exit;
   EXEC SQL SELECT SUBSTR(DECODE (:language_id, 'en',  SHORT_NAME,  NVL(SHORT_NAME_loc_lang, SHORT_NAME)) ,1,25) short_name,
			TO_CHAR(DATE_OF_BIRTH,'DD/MM/YY'),TO_CHAR(DATE_OF_BIRTH,'DD/MM/YYYY'),SEX,NVL(actual_dob_yn, 'N')
	        INTO   :d_patient_name,:d_dob,:d_date_of_birth,:d_sex,:d_actual_dob_yn
            FROM   MP_PATIENT_MAST 
	        WHERE  PATIENT_ID = :d_patient_id;
  if(NODATAFOUND)
     return 0;
  d_patient_name.arr[d_patient_name.len]     = '\0';
  d_dob.arr[d_dob.len]                       = '\0';
  d_date_of_birth.arr[d_date_of_birth.len]	 = '\0';
  d_sex.arr[d_sex.len]                       = '\0';
  d_actual_dob_yn.arr[d_actual_dob_yn.len]	 = '\0';
  

  #ifdef DEBUG
   printf("d_patient_name= %s\n", d_patient_name.arr);
  #endif

  return 1;

err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_patient_dtl() occured....\n");
   proc_exit();
}


/*------------------------------------------------------------*/
 patient_age()
 {

		 float  lone = 0;
		 float  num1 = 0, yrs = 0, 
				tmp_mths = 0, 
				tmp_days = 0;

		 char st_r[50];

	tday.arr[0] = '\0';
	tday.len = 0;

	mths.arr[0]  = '\0';
	mths.len  = 0;

	
	EXEC SQL SELECT TO_CHAR(SYSDATE,'DD/MM/YYYY') INTO :tday
            FROM DUAL;                                        

    EXEC SQL SELECT ABS(MONTHS_BETWEEN(
		TO_DATE(:l_spec_date,'DD/MM/YYYY'), 
		TO_DATE(:d_date_of_birth, 'DD/MM/YYYY')))
			INTO :mt FROM DUAL;

			sprintf(mths.arr,"%f",mt);
			strcpy(mths1.arr, mths.arr);

        	tday.arr[tday.len] = '\0';
							
			lone = atoi(strtok(mths1.arr, ".")) ;

		   if (lone > 0) 
		   {
			  num1 = lone/12 ;
			  sprintf(t_age.arr, "%f", num1);
			  yrs = atoi(strtok(t_age.arr, ".")) ;

		   }
		   else
			  yrs = 0;
	
			tmp_mths   = atoi(mths1.arr) - (yrs * 12) ;
			sprintf(t_age.arr, "%f", tmp_mths);

			tmp_mths   = atoi(strtok(t_age.arr, "."));

		if ((tmp_mths == 0)  && (yrs ==0))
			{

				EXEC SQL SELECT TO_CHAR(ROUND((TO_DATE(:l_spec_date,'DD/MM/YYYY') -
					TO_DATE(:d_date_of_birth, 'DD/MM/YYYY')),3))
					INTO :t_days FROM DUAL;

			t_days.arr[t_days.len]		= '\0';

	
				tmp_days = atoi(strtok(t_days.arr,"."));
			}
			else
				tmp_days = (atof(mths.arr) - atoi(mths1.arr)) * 31 ;

			sprintf(st_r, "%f", yrs);
			strcpy(t_age.arr, strtok(st_r, "."));
			strncat(t_age.arr, local_legend[22],1);
			sprintf(st_r, " %f", tmp_mths);
			strcat(t_age.arr, strtok(st_r, "."));
			strncat(t_age.arr, local_legend[23],1);
			sprintf(st_r, " %f", tmp_days);
			strcat(t_age.arr, strtok(st_r, "."));
			strncat(t_age.arr, local_legend[24],1);

				
 }
/*------------------------------------------------------------*/



/* to print the header page for the report */
void print_rep_header()
{
	   

  #ifdef DEBUG
      printf("before report header()\n");
  #endif

  #ifdef DEBUG
      printf("after page header()\n");
  #endif 
  
  fprintf(f1,"--------------------------------------------------------------------");
  fprintf(f1,"----------------------------------------------------------------");
  fprintf(f1,"\n") ;

  get_version_no();   ///// added 01.07.2003

///// 01.07.2003  fprintf(f1,VER);

  fprintf(f1,"%s\n",d_version.arr);

  get_section_name();
  fprintf(f1,"\n\n\n\n");
  //fprintf(f1,"        ");
  //fprintf(f1,"INPUT PARAMETERS :\n");
  //fprintf(f1,"        ");
  //fprintf(f1,"------------------\n\n");
  rec_len = strlen(local_legend[4]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s :\n",local_legend[4]);
  rec_len = strlen(local_legend[4]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  print_space(40, rec_len,0);//added for globalisation
  fprintf(f1,"\n");
  rec_len = strlen(local_legend[5]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s : %s\n",local_legend[5],nd_batch_no.arr);
  //fprintf(f1,"                        ");
  rec_len = strlen(local_legend[6]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  

  //Added by babu---------
		EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				BEGIN
				GET_LOCALE_DATE.CONVERT_TO_LOCALE_DATE (to_date(:nd_batch_date,'DD/MM/YYYY HH24:MI'), :language_id , t_date);
				:nd_batch_date1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
				END;
			END-EXEC;

		//End
  
  
  fprintf(f1,"%s : %s\n",local_legend[6],nd_batch_date1.arr);
  
  rec_len = strlen(local_legend[7]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s : %s %s\n",local_legend[7],nd_work_group_code.arr,nd_work_group_desc.arr); // added by preetham on 13/11/2007 wrt SCF-2016
  //fprintf(f1,"                        ");
  
  /*added by srinivas on 26-11-2008 wrt ML-SD-CRF-20240*/
  rec_len = strlen(local_legend[25]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s : %s %s\n", local_legend[25],nd_test_code.arr,nd_test_code_desc.arr); 
  //fprintf(f1,"                              ");
  /*upto here*/
  rec_len = strlen(local_legend[8]);//added for globalisation
  print_space(40, rec_len,1);//added for globalisation
  fprintf(f1,"%s : %s %s\n", local_legend[8],nd_dept.arr,d_section_name.arr);
  fprintf(f1,"\n");
  
}

/* to print page headers the header details */ 
void print_page_header()
{
 register int i;
 int spc_len;
 char buf[15];

 fprintf(f1,"%c&l1O",ESC);
 fprintf(f1,"%c&k4S\n",ESC);
 /*
 fprintf(f1,"MDL : RL    ");
 fprintf(f1,"                                        ");  
 fprintf(f1,"%-30.30s", d_acc_entity_name.arr);
 fprintf(f1,"               ");  
 */
 /**********************Added by babu for globalization****************************/
		memset(hdr_line1,' ',REP_WIDTH+1);
        strncpy(hdr_line1,"MDL:RL",6);
        col = (int)(REP_WIDTH - strlen(d_acc_entity_name.arr))/2;
        strncpy(hdr_line1 + col,d_acc_entity_name.arr,strlen(d_acc_entity_name.arr));
        EXEC SQL EXECUTE
				DECLARE
				t_date   date;
				
				BEGIN
				t_date:=GET_LOCALE_DATE.GET_CURRENT_DATE(:language_id);
				:d_sysdate1 := to_char(t_date,'DD/MM/YYYY HH24:MI');
				END;
			END-EXEC;
		col = (REP_WIDTH-strlen(d_sysdate1.arr));
		strcpy(hdr_line1+col,d_sysdate1.arr);

/**********************end by babu for globalization****************************/  
  /**********COMMENTED BY BABU*********************
  fprintf(f1,"MDL : RL");
  spc_len = (125 - (strlen(d_acc_entity_name.arr)))/2;
  
  for(i=1;i<=spc_len;i++)
  fprintf(f1," ");
  fprintf(f1,"%-55.55s", d_acc_entity_name.arr);
  //for(i=1;i<=spc_len;i++)
  //fprintf(f1,"2");
  fprintf(f1,"%s", d_sysdate.arr);
  
  *******************END**********************************/
 
 /**********ADDED BY BABU******************************/
  memset(hdr_line2,' ',REP_WIDTH+1);
  strncpy(hdr_line2,"OPR:",4);
  strncpy(hdr_line2+4,d_user.arr,strlen(d_user.arr));
  strcpy(rep_title1, local_legend[9] );
  col = (int)(REP_WIDTH-strlen(rep_title1))/2;
  strncpy(hdr_line2+col,rep_title1,strlen(rep_title1));

  sprintf(buf,"%s : %4d",local_legend[1],page_no);
  strcpy(hdr_line2+(REP_WIDTH-strlen(buf)),buf);
  
 /*************END BABU*******************************/
 
 /**********COMMENTED BY BABU
 fprintf(f1,"OPR : %s", d_user.arr);
 fprintf(f1,"                                                  ");  
 fprintf(f1,"BATCH SPECIMEN LIST");
 fprintf(f1,"                                     ");  
 fprintf(f1,"Page : %4d", page_no);
 ***********END COMMENT*************************************************/
 fprintf(f1,hdr_line1);
  fprintf(f1,"\n");
 fprintf(f1,hdr_line2);
 fprintf(f1,"\n");
 fprintf(f1,"REP:RLRCRBAT");
 fprintf(f1,"\n");
   line_no = 3;
}


/* print the heading */
void print_col_heading()
{

 fprintf(f1,"--------------------------------------------------------------------");
 fprintf(f1,"----------------------------------------------------------------");
 fprintf(f1,"\n");
fprintf(f1,"%-12.12s      %-14.14s                 %-11.11s           %-3.3s         %-3.3s %-3.3s         %-8.8s    %-6.6s\n",local_legend[10],local_legend[11],local_legend[12],local_legend[13],local_legend[14],local_legend[15],local_legend[16],local_legend[17]);
fprintf(f1,"                                                 %-13.13s\n",local_legend[18]);
fprintf(f1,"%-15.15s	  %-15.15s                %-15.15s\n",local_legend[19],local_legend[20],local_legend[21]);
fprintf(f1,"--------------------------------------------------------------------");
fprintf(f1,"----------------------------------------------------------------");
fprintf(f1,"\n");

  line_no +=5; 
}

/*--------------------------------------------------------------------------*/
gen_file_name()
{
/*   nd_file_name.arr[0]   = '\0';
     nd_file_name.len      = 0;
     EXEC SQL SELECT DECODE(PRINT_FILE_NO,NULL,'0',TO_CHAR(PRINT_FILE_NO)),
		      LOWER(USER)
	          INTO   :nd_file_no,
		             :nd_user
	          FROM   RL_PARAM;

     if (OERROR)
         err_mesg("Fetch failed on table RL_PARAM",0,"");
      
     nd_file_no.arr[nd_file_no.len] = '\0';
     nd_user.arr[nd_user.len] = '\0';
     sprintf(nd_file_name.arr,"rlrcrcat_%s.lis",nd_file_no.arr);*/

     /* For a constant file name (4 lines) */
  	 strcpy(nd_file_name.arr,WORKING_DIR) ;
     nd_file_name.len = strlen(nd_file_name.arr);
	 //strcat(nd_file_name.arr,"rlrcrbat.lis");
	 strcat(nd_file_name.arr,OUTPUT_FILE_NAME);
	 nd_file_name.len = strlen(nd_file_name.arr);
	 if ((f1 = fopen(nd_file_name.arr,"w")) == NULL)
     {
       sprintf(string_var,"Error while opening file %s\n",nd_file_name.arr);
       disp_message(ERR_MESG,string_var) ; 
	   proc_exit();
     }

}


/*--------------------------------------------------------------------------*/
/********************** commented since its not getting called anywhere
increment_file_no()
{
EXEC SQL UPDATE RL_PARAM
		SET PRINT_FILE_NO = NVL(PRINT_FILE_NO,0) + 1;
if (OERROR)
       err_mesg("Update failed on table RL_PARAM",0,"");

EXEC SQL COMMIT WORK;
      if (OERROR)
         err_mesg("COMMIT failed",0,"");
}
********************/
/*--------------------------------------------------------------------------*/

////////////////// 

get_version_no()
{

////////    This function is used to get the version number of the product.
///////      Added by Srinivas on 1 July 2003

     d_version_no.arr[0] = '\0';
     d_version_no.len    =  0;

     strcpy(d_version.arr,"VER : ");

	 EXEC SQL EXECUTE 
	      begin
			if SM_INSTALLATION_TAB_CHECK THEN
			   :l_tab_exists := 1;
			else
			   :l_tab_exists := 0;
			end if;
		  end;
	 END-EXEC;


    if (l_tab_exists) 
    {
	    EXEC SQL SELECT VERSION_NO INTO :d_version_no 
                 FROM   SM_INSTALLATION; 
        d_version_no.arr[d_version_no.len] = '\0';
    }
    else
	    strcpy(d_version_no.arr,"2.1");

	    strcat(d_version.arr,d_version_no.arr);


    if (OERROR)
	{
	    strcpy(d_version_no.arr,"2.1");
	    strcat(d_version.arr,d_version_no.arr);
    }

}
//////////// UPTO HERE   
/************get_legend_value*******************/
get_legend_value(int cou)
 {
     
   
	EXEC SQL EXECUTE
	BEGIN
	  SM_POPULATE_REPORT_LEGEND.FETCH_LEGEND (:nd_operating_facility_id,:language_id,'RLRCRBAT.LEGEND_');
	END;
	END-EXEC;




 for (i=1; i<=cou; i++)
	{


	l_translated_value.arr[0]		= '\0';
	
	EXEC SQL EXECUTE
	BEGIN
               :l_translated_value :=    GET_LEGEND(LTRIM(RTRIM('RLRCRBAT.LEGEND_'||LTRIM(RTRIM(TO_CHAR(:i,'009'))))));
	END;
	END-EXEC;
	
	l_translated_value.arr[l_translated_value.len] = '\0';

	//sp_message(ERR_MESG,l_translated_value.arr);

	strcpy(local_legend[i],l_translated_value.arr);

	

	}
	

 }
/****************End****************/
/**********PRINT SPACE*************/
print_space(int aa, int bb, int cc)
{
	if (cc ==1)
	{
  		for(i=1;i <= (aa - bb) ;i++)
		{
			fprintf(f1,"%s"," ");
		}	
	}
	else if (cc ==0)
	{
  		for(i= (aa - bb);i <= aa ;i++)
		{
			fprintf(f1,"%s","-");
		}	
	}
}


/********* GET SECTION_NAME  added on 04/05/2004 against RL-101 from HMC**********/

  get_section_name()
  {
    d_section_name.arr[0]	= '\0';
	d_section_name.len		= 0;

 	EXEC SQL WHENEVER SQLERROR GOTO err_exit;

	EXEC SQL SELECT long_name
	INTO :d_section_name
	FROM RL_SECTION_CODE_LANG_VW
	WHERE section_code = :nd_dept
	AND   language_id = :language_id;

#ifdef DEBUG
    printf("leaving dclr_section_cur()\n");
    fflush(stdout);
#endif

	d_section_name.arr[d_section_name.len]	= '\0';

  return;
err_exit:
   EXEC SQL WHENEVER SQLERROR CONTINUE;
   EXEC SQL ROLLBACK WORK RELEASE;
   disp_message(ORA_MESG,"Oracle error at get_section_name() occured....\n");
   proc_exit();	
  }
/*********************************************/

#undef DEBUG
#undef NODATAFOUND
#undef MAX_LINES
#undef VER
        